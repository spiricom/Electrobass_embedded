
Electrobass_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000171e0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000209c  08017478  08017478  00027478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019514  08019514  00029514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801951c  0801951c  0002951c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019520  08019520  00029520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  20000000  08019524  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000391c  20000100  08019624  00030100  2**2
                  ALLOC
  8 ._user_heap_stack 00006004  20003a1c  08019624  00033a1c  2**0
                  ALLOC
  9 .RAM_D1       0007a120  24000000  24000000  00040000  2**5
                  ALLOC
 10 .RAM_D2       00000400  30000000  30000000  00040000  2**5
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046eaa  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008dc9  00000000  00000000  00076fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003378  00000000  00000000  0007fda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003010  00000000  00000000  00083120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004a39d  00000000  00000000  00086130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00050da5  00000000  00000000  000d04cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00198c69  00000000  00000000  00121272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002b9edb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d8f8  00000000  00000000  002b9f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000100 	.word	0x20000100
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08017460 	.word	0x08017460

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000104 	.word	0x20000104
 80002d4:	08017460 	.word	0x08017460

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
 80005fc:	615a      	str	r2, [r3, #20]
 80005fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000600:	4b5b      	ldr	r3, [pc, #364]	; (8000770 <MX_ADC1_Init+0x194>)
 8000602:	4a5c      	ldr	r2, [pc, #368]	; (8000774 <MX_ADC1_Init+0x198>)
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000606:	4b5a      	ldr	r3, [pc, #360]	; (8000770 <MX_ADC1_Init+0x194>)
 8000608:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800060e:	4b58      	ldr	r3, [pc, #352]	; (8000770 <MX_ADC1_Init+0x194>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000614:	4b56      	ldr	r3, [pc, #344]	; (8000770 <MX_ADC1_Init+0x194>)
 8000616:	2201      	movs	r2, #1
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800061a:	4b55      	ldr	r3, [pc, #340]	; (8000770 <MX_ADC1_Init+0x194>)
 800061c:	2208      	movs	r2, #8
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000620:	4b53      	ldr	r3, [pc, #332]	; (8000770 <MX_ADC1_Init+0x194>)
 8000622:	2200      	movs	r2, #0
 8000624:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000626:	4b52      	ldr	r3, [pc, #328]	; (8000770 <MX_ADC1_Init+0x194>)
 8000628:	2201      	movs	r2, #1
 800062a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 7;
 800062c:	4b50      	ldr	r3, [pc, #320]	; (8000770 <MX_ADC1_Init+0x194>)
 800062e:	2207      	movs	r2, #7
 8000630:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000632:	4b4f      	ldr	r3, [pc, #316]	; (8000770 <MX_ADC1_Init+0x194>)
 8000634:	2200      	movs	r2, #0
 8000636:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000638:	4b4d      	ldr	r3, [pc, #308]	; (8000770 <MX_ADC1_Init+0x194>)
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063e:	4b4c      	ldr	r3, [pc, #304]	; (8000770 <MX_ADC1_Init+0x194>)
 8000640:	2200      	movs	r2, #0
 8000642:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000644:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <MX_ADC1_Init+0x194>)
 8000646:	2203      	movs	r2, #3
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064a:	4b49      	ldr	r3, [pc, #292]	; (8000770 <MX_ADC1_Init+0x194>)
 800064c:	2200      	movs	r2, #0
 800064e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000650:	4b47      	ldr	r3, [pc, #284]	; (8000770 <MX_ADC1_Init+0x194>)
 8000652:	2200      	movs	r2, #0
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000656:	4b46      	ldr	r3, [pc, #280]	; (8000770 <MX_ADC1_Init+0x194>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065e:	4844      	ldr	r0, [pc, #272]	; (8000770 <MX_ADC1_Init+0x194>)
 8000660:	f002 fc66 	bl	8002f30 <HAL_ADC_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800066a:	f001 f8a7 	bl	80017bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	483d      	ldr	r0, [pc, #244]	; (8000770 <MX_ADC1_Init+0x194>)
 800067a:	f003 fa7b 	bl	8003b74 <HAL_ADCEx_MultiModeConfigChannel>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000684:	f001 f89a 	bl	80017bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000688:	4b3b      	ldr	r3, [pc, #236]	; (8000778 <MX_ADC1_Init+0x19c>)
 800068a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068c:	2306      	movs	r3, #6
 800068e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000690:	2304      	movs	r3, #4
 8000692:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000694:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000698:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800069a:	2304      	movs	r3, #4
 800069c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a6:	463b      	mov	r3, r7
 80006a8:	4619      	mov	r1, r3
 80006aa:	4831      	ldr	r0, [pc, #196]	; (8000770 <MX_ADC1_Init+0x194>)
 80006ac:	f002 fde2 	bl	8003274 <HAL_ADC_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006b6:	f001 f881 	bl	80017bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006ba:	4b30      	ldr	r3, [pc, #192]	; (800077c <MX_ADC1_Init+0x1a0>)
 80006bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006be:	230c      	movs	r3, #12
 80006c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	4619      	mov	r1, r3
 80006c6:	482a      	ldr	r0, [pc, #168]	; (8000770 <MX_ADC1_Init+0x194>)
 80006c8:	f002 fdd4 	bl	8003274 <HAL_ADC_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006d2:	f001 f873 	bl	80017bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006d6:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <MX_ADC1_Init+0x1a4>)
 80006d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006da:	2312      	movs	r3, #18
 80006dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	4619      	mov	r1, r3
 80006e2:	4823      	ldr	r0, [pc, #140]	; (8000770 <MX_ADC1_Init+0x194>)
 80006e4:	f002 fdc6 	bl	8003274 <HAL_ADC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80006ee:	f001 f865 	bl	80017bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_ADC1_Init+0x1a8>)
 80006f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006f6:	2318      	movs	r3, #24
 80006f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	4619      	mov	r1, r3
 80006fe:	481c      	ldr	r0, [pc, #112]	; (8000770 <MX_ADC1_Init+0x194>)
 8000700:	f002 fdb8 	bl	8003274 <HAL_ADC_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800070a:	f001 f857 	bl	80017bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_ADC1_Init+0x1ac>)
 8000710:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000716:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	4814      	ldr	r0, [pc, #80]	; (8000770 <MX_ADC1_Init+0x194>)
 800071e:	f002 fda9 	bl	8003274 <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000728:	f001 f848 	bl	80017bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_ADC1_Init+0x1b0>)
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000730:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000734:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	4619      	mov	r1, r3
 800073a:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_ADC1_Init+0x194>)
 800073c:	f002 fd9a 	bl	8003274 <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000746:	f001 f839 	bl	80017bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800074a:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800074e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_ADC1_Init+0x194>)
 800075a:	f002 fd8b 	bl	8003274 <HAL_ADC_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000764:	f001 f82a 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000011c 	.word	0x2000011c
 8000774:	40022000 	.word	0x40022000
 8000778:	0c900008 	.word	0x0c900008
 800077c:	10c00010 	.word	0x10c00010
 8000780:	1d500080 	.word	0x1d500080
 8000784:	2a000400 	.word	0x2a000400
 8000788:	2e300800 	.word	0x2e300800
 800078c:	3ef08000 	.word	0x3ef08000

08000790 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a4b      	ldr	r2, [pc, #300]	; (80008dc <HAL_ADC_MspInit+0x14c>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	f040 8090 	bne.w	80008d4 <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007b4:	4b4a      	ldr	r3, [pc, #296]	; (80008e0 <HAL_ADC_MspInit+0x150>)
 80007b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007ba:	4a49      	ldr	r2, [pc, #292]	; (80008e0 <HAL_ADC_MspInit+0x150>)
 80007bc:	f043 0320 	orr.w	r3, r3, #32
 80007c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007c4:	4b46      	ldr	r3, [pc, #280]	; (80008e0 <HAL_ADC_MspInit+0x150>)
 80007c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007ca:	f003 0320 	and.w	r3, r3, #32
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <HAL_ADC_MspInit+0x150>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d8:	4a41      	ldr	r2, [pc, #260]	; (80008e0 <HAL_ADC_MspInit+0x150>)
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e2:	4b3f      	ldr	r3, [pc, #252]	; (80008e0 <HAL_ADC_MspInit+0x150>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e8:	f003 0304 	and.w	r3, r3, #4
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b3b      	ldr	r3, [pc, #236]	; (80008e0 <HAL_ADC_MspInit+0x150>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f6:	4a3a      	ldr	r2, [pc, #232]	; (80008e0 <HAL_ADC_MspInit+0x150>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000800:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <HAL_ADC_MspInit+0x150>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <HAL_ADC_MspInit+0x150>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	4a32      	ldr	r2, [pc, #200]	; (80008e0 <HAL_ADC_MspInit+0x150>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081e:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <HAL_ADC_MspInit+0x150>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	f003 0302 	and.w	r3, r3, #2
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_INP3
    PA3     ------> ADC1_INP15
    PA7     ------> ADC1_INP7
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800082c:	2303      	movs	r3, #3
 800082e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000830:	2303      	movs	r3, #3
 8000832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4829      	ldr	r0, [pc, #164]	; (80008e4 <HAL_ADC_MspInit+0x154>)
 8000840:	f006 fcb4 	bl	80071ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_7;
 8000844:	23c8      	movs	r3, #200	; 0xc8
 8000846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000848:	2303      	movs	r3, #3
 800084a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4824      	ldr	r0, [pc, #144]	; (80008e8 <HAL_ADC_MspInit+0x158>)
 8000858:	f006 fca8 	bl	80071ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800085c:	2302      	movs	r3, #2
 800085e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000860:	2303      	movs	r3, #3
 8000862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	481f      	ldr	r0, [pc, #124]	; (80008ec <HAL_ADC_MspInit+0x15c>)
 8000870:	f006 fc9c 	bl	80071ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <HAL_ADC_MspInit+0x160>)
 8000876:	4a1f      	ldr	r2, [pc, #124]	; (80008f4 <HAL_ADC_MspInit+0x164>)
 8000878:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <HAL_ADC_MspInit+0x160>)
 800087c:	2209      	movs	r2, #9
 800087e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <HAL_ADC_MspInit+0x160>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <HAL_ADC_MspInit+0x160>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <HAL_ADC_MspInit+0x160>)
 800088e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000892:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <HAL_ADC_MspInit+0x160>)
 8000896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800089a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <HAL_ADC_MspInit+0x160>)
 800089e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_ADC_MspInit+0x160>)
 80008a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008aa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <HAL_ADC_MspInit+0x160>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_ADC_MspInit+0x160>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <HAL_ADC_MspInit+0x160>)
 80008ba:	f003 fd17 	bl	80042ec <HAL_DMA_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80008c4:	f000 ff7a 	bl	80017bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <HAL_ADC_MspInit+0x160>)
 80008cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_ADC_MspInit+0x160>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008d4:	bf00      	nop
 80008d6:	3730      	adds	r7, #48	; 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40022000 	.word	0x40022000
 80008e0:	58024400 	.word	0x58024400
 80008e4:	58020800 	.word	0x58020800
 80008e8:	58020000 	.word	0x58020000
 80008ec:	58020400 	.word	0x58020400
 80008f0:	20000180 	.word	0x20000180
 80008f4:	40020010 	.word	0x40020010

080008f8 <audio_init>:

tMempool smallPool;
tMempool largePool;

void audio_init(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
	LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <audio_init+0x90>)
 8000904:	4a21      	ldr	r2, [pc, #132]	; (800098c <audio_init+0x94>)
 8000906:	4922      	ldr	r1, [pc, #136]	; (8000990 <audio_init+0x98>)
 8000908:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8000994 <audio_init+0x9c>
 800090c:	4822      	ldr	r0, [pc, #136]	; (8000998 <audio_init+0xa0>)
 800090e:	f016 fd09 	bl	8017324 <LEAF_init>
	tMempool_init (&smallPool, smallMemory, SMALL_MEM_SIZE, &leaf);
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <audio_init+0xa0>)
 8000914:	f241 3288 	movw	r2, #5000	; 0x1388
 8000918:	4920      	ldr	r1, [pc, #128]	; (800099c <audio_init+0xa4>)
 800091a:	4821      	ldr	r0, [pc, #132]	; (80009a0 <audio_init+0xa8>)
 800091c:	f016 fc31 	bl	8017182 <tMempool_init>
	//tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);
	tCycle_initToPool(&mySine, &smallPool);
 8000920:	491f      	ldr	r1, [pc, #124]	; (80009a0 <audio_init+0xa8>)
 8000922:	4820      	ldr	r0, [pc, #128]	; (80009a4 <audio_init+0xac>)
 8000924:	f016 fc60 	bl	80171e8 <tCycle_initToPool>
	tCycle_setFreq(&mySine, 440.0f);
 8000928:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80009a8 <audio_init+0xb0>
 800092c:	481d      	ldr	r0, [pc, #116]	; (80009a4 <audio_init+0xac>)
 800092e:	f016 fcd9 	bl	80172e4 <tCycle_setFreq>
	HAL_Delay(10);
 8000932:	200a      	movs	r0, #10
 8000934:	f002 f940 	bl	8002bb8 <HAL_Delay>
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e007      	b.n	800094e <audio_init+0x56>
	{
		audioOutBuffer[i] = 0;
 800093e:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <audio_init+0xb4>)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2100      	movs	r1, #0
 8000944:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	3301      	adds	r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2b7f      	cmp	r3, #127	; 0x7f
 8000952:	ddf4      	ble.n	800093e <audio_init+0x46>
	}
	HAL_Delay(1);
 8000954:	2001      	movs	r0, #1
 8000956:	f002 f92f 	bl	8002bb8 <HAL_Delay>
	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	4913      	ldr	r1, [pc, #76]	; (80009ac <audio_init+0xb4>)
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f00c fb94 	bl	800d08c <HAL_SAI_Transmit_DMA>
 8000964:	4603      	mov	r3, r0
 8000966:	461a      	mov	r2, r3
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <audio_init+0xb8>)
 800096a:	701a      	strb	r2, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	4911      	ldr	r1, [pc, #68]	; (80009b4 <audio_init+0xbc>)
 8000970:	6838      	ldr	r0, [r7, #0]
 8000972:	f00c fc41 	bl	800d1f8 <HAL_SAI_Receive_DMA>
 8000976:	4603      	mov	r3, r0
 8000978:	461a      	mov	r2, r3
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <audio_init+0xc0>)
 800097c:	701a      	strb	r2, [r3, #0]
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	080016f9 	.word	0x080016f9
 800098c:	0007a120 	.word	0x0007a120
 8000990:	24000000 	.word	0x24000000
 8000994:	473b8000 	.word	0x473b8000
 8000998:	2000158c 	.word	0x2000158c
 800099c:	20000204 	.word	0x20000204
 80009a0:	200015dc 	.word	0x200015dc
 80009a4:	20000200 	.word	0x20000200
 80009a8:	43dc0000 	.word	0x43dc0000
 80009ac:	30000000 	.word	0x30000000
 80009b0:	200001f8 	.word	0x200001f8
 80009b4:	30000200 	.word	0x30000200
 80009b8:	200001f9 	.word	0x200001f9

080009bc <audioFrame>:


void audioFrame(uint16_t buffer_offset)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	80fb      	strh	r3, [r7, #6]
	int i;
	int32_t current_sample = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e02b      	b.n	8000a28 <audioFrame+0x6c>
	{
		if ((i & 1) == 0)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d11c      	bne.n	8000a14 <audioFrame+0x58>
		{
			current_sample = (int32_t)(audioTickL((float) (audioInBuffer[buffer_offset + i] * INV_TWO_TO_23)) * TWO_TO_23);
 80009da:	88fa      	ldrh	r2, [r7, #6]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4413      	add	r3, r2
 80009e0:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <audioFrame+0x7c>)
 80009e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e6:	ee07 3a90 	vmov	s15, r3
 80009ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ee:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000a3c <audioFrame+0x80>
 80009f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f6:	eeb0 0a67 	vmov.f32	s0, s15
 80009fa:	f000 f825 	bl	8000a48 <audioTickL>
 80009fe:	eef0 7a40 	vmov.f32	s15, s0
 8000a02:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000a40 <audioFrame+0x84>
 8000a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a0e:	ee17 3a90 	vmov	r3, s15
 8000a12:	60bb      	str	r3, [r7, #8]
		else
		{
			//current_sample = (int32_t)(audioTickL((float) (audioInBuffer[buffer_offset + i] * INV_TWO_TO_23)) * TWO_TO_23);
		}

		audioOutBuffer[buffer_offset + i] = current_sample;
 8000a14:	88fa      	ldrh	r2, [r7, #6]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	490a      	ldr	r1, [pc, #40]	; (8000a44 <audioFrame+0x88>)
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3301      	adds	r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b3f      	cmp	r3, #63	; 0x3f
 8000a2c:	ddd0      	ble.n	80009d0 <audioFrame+0x14>
	}

}
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	30000200 	.word	0x30000200
 8000a3c:	34000000 	.word	0x34000000
 8000a40:	4b000000 	.word	0x4b000000
 8000a44:	30000000 	.word	0x30000000

08000a48 <audioTickL>:


float audioTickL(float audioIn)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	ed87 0a01 	vstr	s0, [r7, #4]

	sample = 0.0f;
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <audioTickL+0x40>)
 8000a54:	f04f 0200 	mov.w	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]

		//tCycle_setFreq(&mySine, (tRamp_tick(&adc[i]) * 500.0f) + 100.0f); // use knob to set frequency between 100 and 600 Hz
	sample += tCycle_tick(&mySine); // tick the oscillator
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <audioTickL+0x44>)
 8000a5c:	f016 fbf8 	bl	8017250 <tCycle_tick>
 8000a60:	eeb0 7a40 	vmov.f32	s14, s0
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <audioTickL+0x40>)
 8000a66:	edd3 7a00 	vldr	s15, [r3]
 8000a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <audioTickL+0x40>)
 8000a70:	edc3 7a00 	vstr	s15, [r3]
	//sample *= 0.33f; // drop the gain because we've got three full volume sine waves summing here

	return sample;
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <audioTickL+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	ee07 3a90 	vmov	s15, r3
}
 8000a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200001fc 	.word	0x200001fc
 8000a8c:	20000200 	.word	0x20000200

08000a90 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	audioFrame(HALF_BUFFER_SIZE);
 8000a98:	2040      	movs	r0, #64	; 0x40
 8000a9a:	f7ff ff8f 	bl	80009bc <audioFrame>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	audioFrame(0);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff ff84 	bl	80009bc <audioFrame>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <codec_init>:
    CODEC_RATE_44K_44K = 0x08 << 2,
};


void codec_init(I2C_HandleTypeDef* i2c)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

    // Determine dev_address
    // I2C Driver knows to shift the address
    int dev_addr = W8731_ADDR_0;
 8000ac4:	231a      	movs	r3, #26
 8000ac6:	617b      	str	r3, [r7, #20]

    int res;
    // Reset
    res = WriteControlRegister(i2c, CODEC_REG_RESET, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	210f      	movs	r1, #15
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f000 f853 	bl	8000b78 <WriteControlRegister>
 8000ad2:	6138      	str	r0, [r7, #16]

    // Set Line Inputs to 0DB
    res = WriteControlRegister(i2c, CODEC_REG_LEFT_LINE_IN, CODEC_INPUT_0_DB);
 8000ad4:	2217      	movs	r2, #23
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 f84d 	bl	8000b78 <WriteControlRegister>
 8000ade:	6138      	str	r0, [r7, #16]

    res = WriteControlRegister(i2c, CODEC_REG_RIGHT_LINE_IN, CODEC_INPUT_0_DB);
 8000ae0:	2217      	movs	r2, #23
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f000 f847 	bl	8000b78 <WriteControlRegister>
 8000aea:	6138      	str	r0, [r7, #16]

    // Set Headphone To Mute (and disable?)
    res = WriteControlRegister(i2c, CODEC_REG_LEFT_HEADPHONES_OUT,
 8000aec:	2200      	movs	r2, #0
 8000aee:	2102      	movs	r1, #2
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 f841 	bl	8000b78 <WriteControlRegister>
 8000af6:	6138      	str	r0, [r7, #16]
                               CODEC_HEADPHONES_MUTE);

    res = WriteControlRegister(i2c, CODEC_REG_RIGHT_HEADPHONES_OUT,
 8000af8:	2200      	movs	r2, #0
 8000afa:	2103      	movs	r1, #3
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 f83b 	bl	8000b78 <WriteControlRegister>
 8000b02:	6138      	str	r0, [r7, #16]
                               CODEC_HEADPHONES_MUTE);


    // Analog and Digital Routing
    res = WriteControlRegister(i2c, CODEC_REG_ANALOGUE_ROUTING,
 8000b04:	2212      	movs	r2, #18
 8000b06:	2104      	movs	r1, #4
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f000 f835 	bl	8000b78 <WriteControlRegister>
 8000b0e:	6138      	str	r0, [r7, #16]
                               CODEC_MIC_MUTE | CODEC_ADC_LINE
                                   | CODEC_OUTPUT_DAC_ENABLE);


    res = WriteControlRegister(i2c, CODEC_REG_DIGITAL_ROUTING,
 8000b10:	2200      	movs	r2, #0
 8000b12:	2105      	movs	r1, #5
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 f82f 	bl	8000b78 <WriteControlRegister>
 8000b1a:	6138      	str	r0, [r7, #16]
                               CODEC_DEEMPHASIS_NONE);


    // Configure power management
    uint8_t power_down_reg = CODEC_POWER_DOWN_MIC | CODEC_POWER_DOWN_CLOCK_OUTPUT;
 8000b1c:	2342      	movs	r3, #66	; 0x42
 8000b1e:	73fb      	strb	r3, [r7, #15]

    power_down_reg |= CODEC_POWER_DOWN_OSCILLATOR;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	f043 0320 	orr.w	r3, r3, #32
 8000b26:	73fb      	strb	r3, [r7, #15]
    res = WriteControlRegister(i2c, CODEC_REG_POWER_MANAGEMENT, power_down_reg);
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	2106      	movs	r1, #6
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f821 	bl	8000b78 <WriteControlRegister>
 8000b36:	6138      	str	r0, [r7, #16]


    // Digital Format
    uint8_t format_byte;
    format_byte = (MSB_FIRST_LJ) | (WL_BITS_24);
 8000b38:	2309      	movs	r3, #9
 8000b3a:	73bb      	strb	r3, [r7, #14]
    format_byte |= CODEC_FORMAT_SLAVE;
    res = WriteControlRegister(i2c, CODEC_REG_DIGITAL_FORMAT, format_byte);
 8000b3c:	7bbb      	ldrb	r3, [r7, #14]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	461a      	mov	r2, r3
 8000b42:	2107      	movs	r1, #7
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f000 f817 	bl	8000b78 <WriteControlRegister>
 8000b4a:	6138      	str	r0, [r7, #16]


    // samplerate
    // TODO: add support for other samplerates
    res = WriteControlRegister(i2c, CODEC_REG_SAMPLE_RATE, CODEC_RATE_48K_48K);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2108      	movs	r1, #8
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f811 	bl	8000b78 <WriteControlRegister>
 8000b56:	6138      	str	r0, [r7, #16]


    res = WriteControlRegister(i2c, CODEC_REG_ACTIVE, 0x00);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2109      	movs	r1, #9
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 f80b 	bl	8000b78 <WriteControlRegister>
 8000b62:	6138      	str	r0, [r7, #16]


    // Enable
    res = WriteControlRegister(i2c, CODEC_REG_ACTIVE, 0x01);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2109      	movs	r1, #9
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 f805 	bl	8000b78 <WriteControlRegister>
 8000b6e:	6138      	str	r0, [r7, #16]

}
 8000b70:	bf00      	nop
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <WriteControlRegister>:

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
 8000b84:	4613      	mov	r3, r2
 8000b86:	803b      	strh	r3, [r7, #0]
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	b25a      	sxtb	r2, r3
 8000b8e:	883b      	ldrh	r3, [r7, #0]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b25b      	sxtb	r3, r3
 8000ba0:	73fb      	strb	r3, [r7, #15]
    uint8_t byte_2  = data & 0xff;
 8000ba2:	883b      	ldrh	r3, [r7, #0]
 8000ba4:	73bb      	strb	r3, [r7, #14]
    uint8_t buff[2] = {byte_1, byte_2};
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	723b      	strb	r3, [r7, #8]
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	727b      	strb	r3, [r7, #9]
    uint8_t result = HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
 8000bae:	f107 0208 	add.w	r2, r7, #8
 8000bb2:	23fa      	movs	r3, #250	; 0xfa
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	2134      	movs	r1, #52	; 0x34
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f006 fd6a 	bl	8007694 <HAL_I2C_Master_Transmit>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	737b      	strb	r3, [r7, #13]
                                              2, 250);

    HAL_Delay(10);
 8000bc4:	200a      	movs	r0, #10
 8000bc6:	f001 fff7 	bl	8002bb8 <HAL_Delay>
    return 1;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2224      	movs	r2, #36	; 0x24
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f016 fc35 	bl	8017450 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_DAC1_Init+0x70>)
 8000be8:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <MX_DAC1_Init+0x74>)
 8000bea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000bec:	4815      	ldr	r0, [pc, #84]	; (8000c44 <MX_DAC1_Init+0x70>)
 8000bee:	f003 fa2b 	bl	8004048 <HAL_DAC_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000bf8:	f000 fde0 	bl	80017bc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8000c00:	2302      	movs	r3, #2
 8000c02:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	4619      	mov	r1, r3
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <MX_DAC1_Init+0x70>)
 8000c18:	f003 fa38 	bl	800408c <HAL_DAC_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000c22:	f000 fdcb 	bl	80017bc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2210      	movs	r2, #16
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_DAC1_Init+0x70>)
 8000c2e:	f003 fa2d 	bl	800408c <HAL_DAC_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000c38:	f000 fdc0 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200015e0 	.word	0x200015e0
 8000c48:	40007400 	.word	0x40007400

08000c4c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <HAL_DAC_MspInit+0x80>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d129      	bne.n	8000cc2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_DAC_MspInit+0x84>)
 8000c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c74:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <HAL_DAC_MspInit+0x84>)
 8000c76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_DAC_MspInit+0x84>)
 8000c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <HAL_DAC_MspInit+0x84>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <HAL_DAC_MspInit+0x84>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_DAC_MspInit+0x84>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000caa:	2330      	movs	r3, #48	; 0x30
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <HAL_DAC_MspInit+0x88>)
 8000cbe:	f006 fa75 	bl	80071ac <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40007400 	.word	0x40007400
 8000cd0:	58024400 	.word	0x58024400
 8000cd4:	58020000 	.word	0x58020000

08000cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cde:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <MX_DMA_Init+0x9c>)
 8000ce0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce4:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <MX_DMA_Init+0x9c>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cee:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_DMA_Init+0x9c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	200b      	movs	r0, #11
 8000d02:	f003 f8f0 	bl	8003ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d06:	200b      	movs	r0, #11
 8000d08:	f003 f907 	bl	8003f1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	200c      	movs	r0, #12
 8000d12:	f003 f8e8 	bl	8003ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d16:	200c      	movs	r0, #12
 8000d18:	f003 f8ff 	bl	8003f1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	200d      	movs	r0, #13
 8000d22:	f003 f8e0 	bl	8003ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d26:	200d      	movs	r0, #13
 8000d28:	f003 f8f7 	bl	8003f1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	200e      	movs	r0, #14
 8000d32:	f003 f8d8 	bl	8003ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d36:	200e      	movs	r0, #14
 8000d38:	f003 f8ef 	bl	8003f1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	200f      	movs	r0, #15
 8000d42:	f003 f8d0 	bl	8003ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d46:	200f      	movs	r0, #15
 8000d48:	f003 f8e7 	bl	8003f1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2010      	movs	r0, #16
 8000d52:	f003 f8c8 	bl	8003ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d56:	2010      	movs	r0, #16
 8000d58:	f003 f8df 	bl	8003f1a <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2066      	movs	r0, #102	; 0x66
 8000d62:	f003 f8c0 	bl	8003ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8000d66:	2066      	movs	r0, #102	; 0x66
 8000d68:	f003 f8d7 	bl	8003f1a <HAL_NVIC_EnableIRQ>

}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	58024400 	.word	0x58024400

08000d78 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
 8000d8c:	615a      	str	r2, [r3, #20]
 8000d8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <MX_FMC_Init+0x94>)
 8000d92:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <MX_FMC_Init+0x98>)
 8000d94:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_FMC_Init+0x94>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_FMC_Init+0x94>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_FMC_Init+0x94>)
 8000da4:	2208      	movs	r2, #8
 8000da6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <MX_FMC_Init+0x94>)
 8000daa:	2220      	movs	r2, #32
 8000dac:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MX_FMC_Init+0x94>)
 8000db0:	2240      	movs	r2, #64	; 0x40
 8000db2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_FMC_Init+0x94>)
 8000db6:	2280      	movs	r2, #128	; 0x80
 8000db8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_FMC_Init+0x94>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_FMC_Init+0x94>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_FMC_Init+0x94>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_FMC_Init+0x94>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000dd2:	2310      	movs	r3, #16
 8000dd4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000dda:	2310      	movs	r3, #16
 8000ddc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000dde:	2310      	movs	r3, #16
 8000de0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000de2:	2310      	movs	r3, #16
 8000de4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000de6:	2310      	movs	r3, #16
 8000de8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000dea:	2310      	movs	r3, #16
 8000dec:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	4619      	mov	r1, r3
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <MX_FMC_Init+0x94>)
 8000df4:	f00e fb28 	bl	800f448 <HAL_SDRAM_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000dfe:	f000 fcdd 	bl	80017bc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e02:	bf00      	nop
 8000e04:	3720      	adds	r7, #32
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200015f4 	.word	0x200015f4
 8000e10:	52004140 	.word	0x52004140

08000e14 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000e28:	4b3d      	ldr	r3, [pc, #244]	; (8000f20 <HAL_FMC_MspInit+0x10c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d172      	bne.n	8000f16 <HAL_FMC_MspInit+0x102>
    return;
  }
  FMC_Initialized = 1;
 8000e30:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <HAL_FMC_MspInit+0x10c>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e36:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <HAL_FMC_MspInit+0x110>)
 8000e38:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e3c:	4a39      	ldr	r2, [pc, #228]	; (8000f24 <HAL_FMC_MspInit+0x110>)
 8000e3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e42:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000e46:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <HAL_FMC_MspInit+0x110>)
 8000e48:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
 8000e54:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e58:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e66:	230c      	movs	r3, #12
 8000e68:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	482e      	ldr	r0, [pc, #184]	; (8000f28 <HAL_FMC_MspInit+0x114>)
 8000e70:	f006 f99c 	bl	80071ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000e74:	f248 1337 	movw	r3, #33079	; 0x8137
 8000e78:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e86:	230c      	movs	r3, #12
 8000e88:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4827      	ldr	r0, [pc, #156]	; (8000f2c <HAL_FMC_MspInit+0x118>)
 8000e90:	f006 f98c 	bl	80071ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000e94:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e98:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ea6:	230c      	movs	r3, #12
 8000ea8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	4619      	mov	r1, r3
 8000eae:	4820      	ldr	r0, [pc, #128]	; (8000f30 <HAL_FMC_MspInit+0x11c>)
 8000eb0:	f006 f97c 	bl	80071ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 8000eb4:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000eb8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_1
                          |GPIO_PIN_10|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4819      	ldr	r0, [pc, #100]	; (8000f34 <HAL_FMC_MspInit+0x120>)
 8000ed0:	f006 f96c 	bl	80071ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 8000ed4:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000ed8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_11
                          |GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ee6:	230c      	movs	r3, #12
 8000ee8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4812      	ldr	r0, [pc, #72]	; (8000f38 <HAL_FMC_MspInit+0x124>)
 8000ef0:	f006 f95c 	bl	80071ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8000ef4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ef8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f06:	230c      	movs	r3, #12
 8000f08:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480b      	ldr	r0, [pc, #44]	; (8000f3c <HAL_FMC_MspInit+0x128>)
 8000f10:	f006 f94c 	bl	80071ac <HAL_GPIO_Init>
 8000f14:	e000      	b.n	8000f18 <HAL_FMC_MspInit+0x104>
    return;
 8000f16:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20001628 	.word	0x20001628
 8000f24:	58024400 	.word	0x58024400
 8000f28:	58021000 	.word	0x58021000
 8000f2c:	58021800 	.word	0x58021800
 8000f30:	58020c00 	.word	0x58020c00
 8000f34:	58022000 	.word	0x58022000
 8000f38:	58021c00 	.word	0x58021c00
 8000f3c:	58021400 	.word	0x58021400

08000f40 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f48:	f7ff ff64 	bl	8000e14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <MX_GPIO_Init>:
     PB12   ------> USB_OTG_HS_ID
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	; 0x38
 8000f58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6a:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f70:	4a55      	ldr	r2, [pc, #340]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000f72:	f043 0310 	orr.w	r3, r3, #16
 8000f76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7a:	4b53      	ldr	r3, [pc, #332]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f80:	f003 0310 	and.w	r3, r3, #16
 8000f84:	623b      	str	r3, [r7, #32]
 8000f86:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f88:	4b4f      	ldr	r3, [pc, #316]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8e:	4a4e      	ldr	r2, [pc, #312]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f98:	4b4b      	ldr	r3, [pc, #300]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	4b48      	ldr	r3, [pc, #288]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fac:	4a46      	ldr	r2, [pc, #280]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb6:	4b44      	ldr	r3, [pc, #272]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b40      	ldr	r3, [pc, #256]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fca:	4a3f      	ldr	r2, [pc, #252]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd4:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe2:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe8:	4a37      	ldr	r2, [pc, #220]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff2:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <MX_GPIO_Init+0x174>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001000:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <MX_GPIO_Init+0x174>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001006:	4a30      	ldr	r2, [pc, #192]	; (80010c8 <MX_GPIO_Init+0x174>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001010:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <MX_GPIO_Init+0x174>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <MX_GPIO_Init+0x174>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <MX_GPIO_Init+0x174>)
 8001026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102e:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <MX_GPIO_Init+0x174>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <MX_GPIO_Init+0x174>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <MX_GPIO_Init+0x174>)
 8001044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <MX_GPIO_Init+0x174>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_GPIO_Init+0x174>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <MX_GPIO_Init+0x174>)
 8001062:	f043 0320 	orr.w	r3, r3, #32
 8001066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_GPIO_Init+0x174>)
 800106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001070:	f003 0320 	and.w	r3, r3, #32
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2180      	movs	r1, #128	; 0x80
 800107c:	4813      	ldr	r0, [pc, #76]	; (80010cc <MX_GPIO_Init+0x178>)
 800107e:	f006 fa45 	bl	800750c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	4619      	mov	r1, r3
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <MX_GPIO_Init+0x178>)
 800109a:	f006 f887 	bl	80071ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800109e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 80010b0:	230c      	movs	r3, #12
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b8:	4619      	mov	r1, r3
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_GPIO_Init+0x17c>)
 80010bc:	f006 f876 	bl	80071ac <HAL_GPIO_Init>

}
 80010c0:	bf00      	nop
 80010c2:	3738      	adds	r7, #56	; 0x38
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58020800 	.word	0x58020800
 80010d0:	58020400 	.word	0x58020400

080010d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <MX_I2C1_Init+0x74>)
 80010da:	4a1c      	ldr	r2, [pc, #112]	; (800114c <MX_I2C1_Init+0x78>)
 80010dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30B00F2D;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_I2C1_Init+0x74>)
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <MX_I2C1_Init+0x7c>)
 80010e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_I2C1_Init+0x74>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_I2C1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_I2C1_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_I2C1_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_I2C1_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_I2C1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110e:	480e      	ldr	r0, [pc, #56]	; (8001148 <MX_I2C1_Init+0x74>)
 8001110:	f006 fa30 	bl	8007574 <HAL_I2C_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800111a:	f000 fb4f 	bl	80017bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111e:	2100      	movs	r1, #0
 8001120:	4809      	ldr	r0, [pc, #36]	; (8001148 <MX_I2C1_Init+0x74>)
 8001122:	f006 fda9 	bl	8007c78 <HAL_I2CEx_ConfigAnalogFilter>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800112c:	f000 fb46 	bl	80017bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001130:	2100      	movs	r1, #0
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_I2C1_Init+0x74>)
 8001134:	f006 fdeb 	bl	8007d0e <HAL_I2CEx_ConfigDigitalFilter>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800113e:	f000 fb3d 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000162c 	.word	0x2000162c
 800114c:	40005400 	.word	0x40005400
 8001150:	30b00f2d 	.word	0x30b00f2d

08001154 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_I2C2_Init+0x74>)
 800115a:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <MX_I2C2_Init+0x78>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_I2C2_Init+0x74>)
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <MX_I2C2_Init+0x7c>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_I2C2_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_I2C2_Init+0x74>)
 800116c:	2201      	movs	r2, #1
 800116e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_I2C2_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_I2C2_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_I2C2_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_I2C2_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_I2C2_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800118e:	480e      	ldr	r0, [pc, #56]	; (80011c8 <MX_I2C2_Init+0x74>)
 8001190:	f006 f9f0 	bl	8007574 <HAL_I2C_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800119a:	f000 fb0f 	bl	80017bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119e:	2100      	movs	r1, #0
 80011a0:	4809      	ldr	r0, [pc, #36]	; (80011c8 <MX_I2C2_Init+0x74>)
 80011a2:	f006 fd69 	bl	8007c78 <HAL_I2CEx_ConfigAnalogFilter>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011ac:	f000 fb06 	bl	80017bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011b0:	2100      	movs	r1, #0
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_I2C2_Init+0x74>)
 80011b4:	f006 fdab 	bl	8007d0e <HAL_I2CEx_ConfigDigitalFilter>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011be:	f000 fafd 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20001678 	.word	0x20001678
 80011cc:	40005800 	.word	0x40005800
 80011d0:	00b03fdb 	.word	0x00b03fdb

080011d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b0bc      	sub	sp, #240	; 0xf0
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ec:	f107 0320 	add.w	r3, r7, #32
 80011f0:	22bc      	movs	r2, #188	; 0xbc
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f016 f92b 	bl	8017450 <memset>
  if(i2cHandle->Instance==I2C1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a5b      	ldr	r2, [pc, #364]	; (800136c <HAL_I2C_MspInit+0x198>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d143      	bne.n	800128c <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001204:	2308      	movs	r3, #8
 8001206:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	4618      	mov	r0, r3
 8001214:	f009 fa24 	bl	800a660 <HAL_RCCEx_PeriphCLKConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800121e:	f000 facd 	bl	80017bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	4b53      	ldr	r3, [pc, #332]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	4a51      	ldr	r2, [pc, #324]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001232:	4b4f      	ldr	r3, [pc, #316]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001240:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001244:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001248:	2312      	movs	r3, #18
 800124a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800125a:	2304      	movs	r3, #4
 800125c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001264:	4619      	mov	r1, r3
 8001266:	4843      	ldr	r0, [pc, #268]	; (8001374 <HAL_I2C_MspInit+0x1a0>)
 8001268:	f005 ffa0 	bl	80071ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800126c:	4b40      	ldr	r3, [pc, #256]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 800126e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001272:	4a3f      	ldr	r2, [pc, #252]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 8001274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001278:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800127c:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 800127e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800128a:	e06b      	b.n	8001364 <HAL_I2C_MspInit+0x190>
  else if(i2cHandle->Instance==I2C2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a39      	ldr	r2, [pc, #228]	; (8001378 <HAL_I2C_MspInit+0x1a4>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d166      	bne.n	8001364 <HAL_I2C_MspInit+0x190>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001296:	2308      	movs	r3, #8
 8001298:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	4618      	mov	r0, r3
 80012a6:	f009 f9db 	bl	800a660 <HAL_RCCEx_PeriphCLKConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 80012b0:	f000 fa84 	bl	80017bc <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b4:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ba:	4a2d      	ldr	r2, [pc, #180]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c4:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b27      	ldr	r3, [pc, #156]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d8:	4a25      	ldr	r2, [pc, #148]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012f0:	2310      	movs	r3, #16
 80012f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f6:	2312      	movs	r3, #18
 80012f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001308:	2304      	movs	r3, #4
 800130a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800130e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001312:	4619      	mov	r1, r3
 8001314:	4819      	ldr	r0, [pc, #100]	; (800137c <HAL_I2C_MspInit+0x1a8>)
 8001316:	f005 ff49 	bl	80071ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800131a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800131e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001322:	2312      	movs	r3, #18
 8001324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001334:	2304      	movs	r3, #4
 8001336:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800133e:	4619      	mov	r1, r3
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <HAL_I2C_MspInit+0x1a0>)
 8001342:	f005 ff33 	bl	80071ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 8001348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800134c:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 800134e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001352:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_I2C_MspInit+0x19c>)
 8001358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800135c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	bf00      	nop
 8001366:	37f0      	adds	r7, #240	; 0xf0
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40005400 	.word	0x40005400
 8001370:	58024400 	.word	0x58024400
 8001374:	58020400 	.word	0x58020400
 8001378:	40005800 	.word	0x40005800
 800137c:	58021c00 	.word	0x58021c00

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  MPU_Conf();
 8001386:	f000 f9d7 	bl	8001738 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800138a:	4b55      	ldr	r3, [pc, #340]	; (80014e0 <main+0x160>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d11b      	bne.n	80013ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001396:	f3bf 8f4f 	dsb	sy
}
 800139a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800139c:	f3bf 8f6f 	isb	sy
}
 80013a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80013a2:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <main+0x160>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80013aa:	f3bf 8f4f 	dsb	sy
}
 80013ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013b0:	f3bf 8f6f 	isb	sy
}
 80013b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80013b6:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <main+0x160>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4a49      	ldr	r2, [pc, #292]	; (80014e0 <main+0x160>)
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013c2:	f3bf 8f4f 	dsb	sy
}
 80013c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c8:	f3bf 8f6f 	isb	sy
}
 80013cc:	e000      	b.n	80013d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80013ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80013d0:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <main+0x160>)
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d138      	bne.n	800144e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80013dc:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <main+0x160>)
 80013de:	2200      	movs	r2, #0
 80013e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80013e4:	f3bf 8f4f 	dsb	sy
}
 80013e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <main+0x160>)
 80013ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013f0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	0b5b      	lsrs	r3, r3, #13
 80013f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013fa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	08db      	lsrs	r3, r3, #3
 8001400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001404:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	015a      	lsls	r2, r3, #5
 800140a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800140e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001414:	4932      	ldr	r1, [pc, #200]	; (80014e0 <main+0x160>)
 8001416:	4313      	orrs	r3, r2
 8001418:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1ef      	bne.n	8001406 <main+0x86>
    } while(sets-- != 0U);
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1e5a      	subs	r2, r3, #1
 800142a:	60ba      	str	r2, [r7, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1e5      	bne.n	80013fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001430:	f3bf 8f4f 	dsb	sy
}
 8001434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <main+0x160>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <main+0x160>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001442:	f3bf 8f4f 	dsb	sy
}
 8001446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001448:	f3bf 8f6f 	isb	sy
}
 800144c:	e000      	b.n	8001450 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800144e:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001450:	f001 fb20 	bl	8002a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001454:	f000 f84e 	bl	80014f4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001458:	f000 f904 	bl	8001664 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145c:	f7ff fd7a 	bl	8000f54 <MX_GPIO_Init>
  MX_DMA_Init();
 8001460:	f7ff fc3a 	bl	8000cd8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001464:	f7ff f8ba 	bl	80005dc <MX_ADC1_Init>
  MX_DAC1_Init();
 8001468:	f7ff fbb4 	bl	8000bd4 <MX_DAC1_Init>
  MX_FMC_Init();
 800146c:	f7ff fc84 	bl	8000d78 <MX_FMC_Init>
  MX_I2C2_Init();
 8001470:	f7ff fe70 	bl	8001154 <MX_I2C2_Init>
  MX_OPAMP1_Init();
 8001474:	f000 f9a8 	bl	80017c8 <MX_OPAMP1_Init>
  MX_QUADSPI_Init();
 8001478:	f000 fa2e 	bl	80018d8 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800147c:	f000 fb48 	bl	8001b10 <MX_SAI1_Init>
  MX_SAI2_Init();
 8001480:	f000 fba2 	bl	8001bc8 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001484:	f000 fe3a 	bl	80020fc <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8001488:	f000 feca 	bl	8002220 <MX_SPI1_Init>
  MX_TIM1_Init();
 800148c:	f001 f8f8 	bl	8002680 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001490:	f001 f9e4 	bl	800285c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001494:	f7ff fe1e 	bl	80010d4 <MX_I2C1_Init>
  MX_RNG_Init();
 8001498:	f000 faec 	bl	8001a74 <MX_RNG_Init>
  MX_FATFS_Init();
 800149c:	f012 fe64 	bl	8014168 <MX_FATFS_Init>
  MX_USB_OTG_HS_USB_Init();
 80014a0:	f001 fac6 	bl	8002a30 <MX_USB_OTG_HS_USB_Init>
  MX_USB_DEVICE_Init();
 80014a4:	f014 ffe4 	bl	8016470 <MX_USB_DEVICE_Init>
  return __builtin_arm_get_fpscr();
 80014a8:	eef1 3a10 	vmrs	r3, fpscr
  /* USER CODE BEGIN 2 */

  uint32_t tempFPURegisterVal = __get_FPSCR();
 80014ac:	617b      	str	r3, [r7, #20]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	613b      	str	r3, [r7, #16]
  __builtin_arm_set_fpscr(fpscr);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	eee1 3a10 	vmsr	fpscr, r3
}
 80014c0:	bf00      	nop
  __set_FPSCR(tempFPURegisterVal);

  codec_init(&hi2c2);
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <main+0x164>)
 80014c4:	f7ff fafa 	bl	8000abc <codec_init>

  audio_init(&hsai_BlockB1, &hsai_BlockA1);
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <main+0x168>)
 80014ca:	4808      	ldr	r0, [pc, #32]	; (80014ec <main+0x16c>)
 80014cc:	f7ff fa14 	bl	80008f8 <audio_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	4807      	ldr	r0, [pc, #28]	; (80014f0 <main+0x170>)
 80014d4:	f006 f833 	bl	800753e <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80014d8:	2064      	movs	r0, #100	; 0x64
 80014da:	f001 fb6d 	bl	8002bb8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80014de:	e7f7      	b.n	80014d0 <main+0x150>
 80014e0:	e000ed00 	.word	0xe000ed00
 80014e4:	20001678 	.word	0x20001678
 80014e8:	20001758 	.word	0x20001758
 80014ec:	200017f0 	.word	0x200017f0
 80014f0:	58020800 	.word	0x58020800

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b09e      	sub	sp, #120	; 0x78
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014fe:	224c      	movs	r2, #76	; 0x4c
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f015 ffa4 	bl	8017450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2220      	movs	r2, #32
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f015 ff9d 	bl	8017450 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001516:	2002      	movs	r0, #2
 8001518:	f007 ffe4 	bl	80094e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	4b4d      	ldr	r3, [pc, #308]	; (8001658 <SystemClock_Config+0x164>)
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	4a4c      	ldr	r2, [pc, #304]	; (8001658 <SystemClock_Config+0x164>)
 8001526:	f023 0301 	bic.w	r3, r3, #1
 800152a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800152c:	4b4a      	ldr	r3, [pc, #296]	; (8001658 <SystemClock_Config+0x164>)
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b49      	ldr	r3, [pc, #292]	; (800165c <SystemClock_Config+0x168>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	4a48      	ldr	r2, [pc, #288]	; (800165c <SystemClock_Config+0x168>)
 800153c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001540:	6193      	str	r3, [r2, #24]
 8001542:	4b46      	ldr	r3, [pc, #280]	; (800165c <SystemClock_Config+0x168>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800154e:	bf00      	nop
 8001550:	4b42      	ldr	r3, [pc, #264]	; (800165c <SystemClock_Config+0x168>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800155c:	d1f8      	bne.n	8001550 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	4b40      	ldr	r3, [pc, #256]	; (8001660 <SystemClock_Config+0x16c>)
 8001560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001564:	4a3e      	ldr	r2, [pc, #248]	; (8001660 <SystemClock_Config+0x16c>)
 8001566:	f043 0302 	orr.w	r3, r3, #2
 800156a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800156e:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <SystemClock_Config+0x16c>)
 8001570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800157c:	2300      	movs	r3, #0
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	4b36      	ldr	r3, [pc, #216]	; (800165c <SystemClock_Config+0x168>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a35      	ldr	r2, [pc, #212]	; (800165c <SystemClock_Config+0x168>)
 8001586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b33      	ldr	r3, [pc, #204]	; (800165c <SystemClock_Config+0x168>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <SystemClock_Config+0x164>)
 8001598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159a:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <SystemClock_Config+0x164>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80015a2:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <SystemClock_Config+0x164>)
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015ae:	bf00      	nop
 80015b0:	4b2a      	ldr	r3, [pc, #168]	; (800165c <SystemClock_Config+0x168>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015bc:	d1f8      	bne.n	80015b0 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80015be:	4b28      	ldr	r3, [pc, #160]	; (8001660 <SystemClock_Config+0x16c>)
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	f023 0303 	bic.w	r3, r3, #3
 80015c6:	4a26      	ldr	r2, [pc, #152]	; (8001660 <SystemClock_Config+0x16c>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80015ce:	2321      	movs	r3, #33	; 0x21
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80015d8:	2301      	movs	r3, #1
 80015da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015dc:	2302      	movs	r3, #2
 80015de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015e0:	2302      	movs	r3, #2
 80015e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80015e8:	233c      	movs	r3, #60	; 0x3c
 80015ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80015f0:	2306      	movs	r3, #6
 80015f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 8;
 80015f4:	2308      	movs	r3, #8
 80015f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015f8:	230c      	movs	r3, #12
 80015fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001608:	4618      	mov	r0, r3
 800160a:	f008 f86f 	bl	80096ec <HAL_RCC_OscConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8001614:	f000 f8d2 	bl	80017bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001618:	233f      	movs	r3, #63	; 0x3f
 800161a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161c:	2303      	movs	r3, #3
 800161e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001624:	2308      	movs	r3, #8
 8001626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001628:	2340      	movs	r3, #64	; 0x40
 800162a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800162c:	2340      	movs	r3, #64	; 0x40
 800162e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001636:	2340      	movs	r3, #64	; 0x40
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2104      	movs	r1, #4
 8001640:	4618      	mov	r0, r3
 8001642:	f008 fc81 	bl	8009f48 <HAL_RCC_ClockConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x15c>
  {
    Error_Handler();
 800164c:	f000 f8b6 	bl	80017bc <Error_Handler>
  }
}
 8001650:	bf00      	nop
 8001652:	3778      	adds	r7, #120	; 0x78
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	58000400 	.word	0x58000400
 800165c:	58024800 	.word	0x58024800
 8001660:	58024400 	.word	0x58024400

08001664 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b0b0      	sub	sp, #192	; 0xc0
 8001668:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	22bc      	movs	r2, #188	; 0xbc
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f015 feed 	bl	8017450 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_ADC
 8001676:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <PeriphCommonClock_Config+0x90>)
 8001678:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SAI2;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800167a:	2301      	movs	r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800167e:	230c      	movs	r3, #12
 8001680:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001682:	2308      	movs	r3, #8
 8001684:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001686:	2302      	movs	r3, #2
 8001688:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800168e:	23c0      	movs	r3, #192	; 0xc0
 8001690:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 800169c:	2301      	movs	r3, #1
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 80016a0:	230c      	movs	r3, #12
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 4;
 80016a4:	2304      	movs	r3, #4
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
 80016a8:	2308      	movs	r3, #8
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 16;
 80016ac:	2310      	movs	r3, #16
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80016b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
 80016ba:	f640 1338 	movw	r3, #2360	; 0x938
 80016be:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80016c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c8:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 80016ca:	2302      	movs	r3, #2
 80016cc:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL3;
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80016d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	4618      	mov	r0, r3
 80016de:	f008 ffbf 	bl	800a660 <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <PeriphCommonClock_Config+0x88>
  {
    Error_Handler();
 80016e8:	f000 f868 	bl	80017bc <Error_Handler>
  }
}
 80016ec:	bf00      	nop
 80016ee:	37c0      	adds	r7, #192	; 0xc0
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	01090300 	.word	0x01090300

080016f8 <randomNumber>:

/* USER CODE BEGIN 4 */
float randomNumber(void) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 80016fe:	463b      	mov	r3, r7
 8001700:	4619      	mov	r1, r3
 8001702:	480b      	ldr	r0, [pc, #44]	; (8001730 <randomNumber+0x38>)
 8001704:	f00b f99a 	bl	800ca3c <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001712:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001734 <randomNumber+0x3c>
 8001716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171a:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	ee07 3a90 	vmov	s15, r3
}
 8001724:	eeb0 0a67 	vmov.f32	s0, s15
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20001744 	.word	0x20001744
 8001734:	2f80000d 	.word	0x2f80000d

08001738 <MPU_Conf>:

void MPU_Conf(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 800173e:	f002 fc07 	bl	8003f50 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001742:	2301      	movs	r3, #1
 8001744:	703b      	strb	r3, [r7, #0]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8001746:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800174a:	607b      	str	r3, [r7, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800174c:	2311      	movs	r3, #17
 800174e:	723b      	strb	r3, [r7, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001750:	2303      	movs	r3, #3
 8001752:	72fb      	strb	r3, [r7, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001754:	2301      	movs	r3, #1
 8001756:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	737b      	strb	r3, [r7, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001764:	2300      	movs	r3, #0
 8001766:	707b      	strb	r3, [r7, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 8001768:	2300      	movs	r3, #0
 800176a:	727b      	strb	r3, [r7, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800176c:	2301      	movs	r3, #1
 800176e:	733b      	strb	r3, [r7, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001770:	463b      	mov	r3, r7
 8001772:	4618      	mov	r0, r3
 8001774:	f002 fc24 	bl	8003fc0 <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001778:	2301      	movs	r3, #1
 800177a:	703b      	strb	r3, [r7, #0]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 800177c:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001780:	607b      	str	r3, [r7, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001782:	230f      	movs	r3, #15
 8001784:	723b      	strb	r3, [r7, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001786:	2303      	movs	r3, #3
 8001788:	72fb      	strb	r3, [r7, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800178a:	2301      	movs	r3, #1
 800178c:	72bb      	strb	r3, [r7, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800178e:	2301      	movs	r3, #1
 8001790:	73bb      	strb	r3, [r7, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001792:	2301      	movs	r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001796:	2301      	movs	r3, #1
 8001798:	737b      	strb	r3, [r7, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800179a:	2301      	movs	r3, #1
 800179c:	707b      	strb	r3, [r7, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 800179e:	2300      	movs	r3, #0
 80017a0:	727b      	strb	r3, [r7, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	733b      	strb	r3, [r7, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017a6:	463b      	mov	r3, r7
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 fc09 	bl	8003fc0 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80017ae:	2004      	movs	r0, #4
 80017b0:	f002 fbe6 	bl	8003f80 <HAL_MPU_Enable>
}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <Error_Handler+0x8>
	...

080017c8 <MX_OPAMP1_Init>:

OPAMP_HandleTypeDef hopamp1;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_OPAMP1_Init+0x44>)
 80017ce:	4a10      	ldr	r2, [pc, #64]	; (8001810 <MX_OPAMP1_Init+0x48>)
 80017d0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_OPAMP1_Init+0x44>)
 80017d4:	2240      	movs	r2, #64	; 0x40
 80017d6:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_OPAMP1_Init+0x44>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_OPAMP1_Init+0x44>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_OPAMP1_Init+0x44>)
 80017e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017ea:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_OPAMP1_Init+0x44>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_OPAMP1_Init+0x44>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_OPAMP1_Init+0x44>)
 80017fa:	f006 fad5 	bl	8007da8 <HAL_OPAMP_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_OPAMP1_Init+0x40>
  {
    Error_Handler();
 8001804:	f7ff ffda 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200016c4 	.word	0x200016c4
 8001810:	40009000 	.word	0x40009000

08001814 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a25      	ldr	r2, [pc, #148]	; (80018c8 <HAL_OPAMP_MspInit+0xb4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d144      	bne.n	80018c0 <HAL_OPAMP_MspInit+0xac>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* OPAMP1 clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8001836:	4b25      	ldr	r3, [pc, #148]	; (80018cc <HAL_OPAMP_MspInit+0xb8>)
 8001838:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800183c:	4a23      	ldr	r2, [pc, #140]	; (80018cc <HAL_OPAMP_MspInit+0xb8>)
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HAL_OPAMP_MspInit+0xb8>)
 8001848:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_OPAMP_MspInit+0xb8>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185a:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <HAL_OPAMP_MspInit+0xb8>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_OPAMP_MspInit+0xb8>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_OPAMP_MspInit+0xb8>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_OPAMP_MspInit+0xb8>)
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_OPAMP_MspInit+0xb8>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PC4     ------> OPAMP1_VOUT
    PC5     ------> OPAMP1_VINM
    PB0     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001890:	2330      	movs	r3, #48	; 0x30
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001894:	2303      	movs	r3, #3
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	480b      	ldr	r0, [pc, #44]	; (80018d0 <HAL_OPAMP_MspInit+0xbc>)
 80018a4:	f005 fc82 	bl	80071ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018a8:	2301      	movs	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ac:	2303      	movs	r3, #3
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	; (80018d4 <HAL_OPAMP_MspInit+0xc0>)
 80018bc:	f005 fc76 	bl	80071ac <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
}
 80018c0:	bf00      	nop
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40009000 	.word	0x40009000
 80018cc:	58024400 	.word	0x58024400
 80018d0:	58020800 	.word	0x58020800
 80018d4:	58020400 	.word	0x58020400

080018d8 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <MX_QUADSPI_Init+0x50>)
 80018de:	4a13      	ldr	r2, [pc, #76]	; (800192c <MX_QUADSPI_Init+0x54>)
 80018e0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MX_QUADSPI_Init+0x50>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MX_QUADSPI_Init+0x50>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <MX_QUADSPI_Init+0x50>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 19;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_QUADSPI_Init+0x50>)
 80018f6:	2213      	movs	r2, #19
 80018f8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <MX_QUADSPI_Init+0x50>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_QUADSPI_Init+0x50>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <MX_QUADSPI_Init+0x50>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_QUADSPI_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_QUADSPI_Init+0x50>)
 8001914:	f007 fe30 	bl	8009578 <HAL_QSPI_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800191e:	f7ff ff4d 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200016f8 	.word	0x200016f8
 800192c:	52005000 	.word	0x52005000

08001930 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b0ba      	sub	sp, #232	; 0xe8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001948:	f107 0318 	add.w	r3, r7, #24
 800194c:	22bc      	movs	r2, #188	; 0xbc
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f015 fd7d 	bl	8017450 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a42      	ldr	r2, [pc, #264]	; (8001a64 <HAL_QSPI_MspInit+0x134>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d17c      	bne.n	8001a5a <HAL_QSPI_MspInit+0x12a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001960:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001964:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL;
 8001966:	2310      	movs	r3, #16
 8001968:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196a:	f107 0318 	add.w	r3, r7, #24
 800196e:	4618      	mov	r0, r3
 8001970:	f008 fe76 	bl	800a660 <HAL_RCCEx_PeriphCLKConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_QSPI_MspInit+0x4e>
    {
      Error_Handler();
 800197a:	f7ff ff1f 	bl	80017bc <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800197e:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <HAL_QSPI_MspInit+0x138>)
 8001980:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001984:	4a38      	ldr	r2, [pc, #224]	; (8001a68 <HAL_QSPI_MspInit+0x138>)
 8001986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800198e:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <HAL_QSPI_MspInit+0x138>)
 8001990:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800199c:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <HAL_QSPI_MspInit+0x138>)
 800199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a2:	4a31      	ldr	r2, [pc, #196]	; (8001a68 <HAL_QSPI_MspInit+0x138>)
 80019a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_QSPI_MspInit+0x138>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ba:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_QSPI_MspInit+0x138>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c0:	4a29      	ldr	r2, [pc, #164]	; (8001a68 <HAL_QSPI_MspInit+0x138>)
 80019c2:	f043 0320 	orr.w	r3, r3, #32
 80019c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_QSPI_MspInit+0x138>)
 80019cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d0:	f003 0320 	and.w	r3, r3, #32
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019d8:	2340      	movs	r3, #64	; 0x40
 80019da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019f0:	230a      	movs	r3, #10
 80019f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019fa:	4619      	mov	r1, r3
 80019fc:	481b      	ldr	r0, [pc, #108]	; (8001a6c <HAL_QSPI_MspInit+0x13c>)
 80019fe:	f005 fbd5 	bl	80071ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 8001a02:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001a06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a1c:	2309      	movs	r3, #9
 8001a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a26:	4619      	mov	r1, r3
 8001a28:	4811      	ldr	r0, [pc, #68]	; (8001a70 <HAL_QSPI_MspInit+0x140>)
 8001a2a:	f005 fbbf 	bl	80071ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a48:	230a      	movs	r3, #10
 8001a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a4e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a52:	4619      	mov	r1, r3
 8001a54:	4806      	ldr	r0, [pc, #24]	; (8001a70 <HAL_QSPI_MspInit+0x140>)
 8001a56:	f005 fba9 	bl	80071ac <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	37e8      	adds	r7, #232	; 0xe8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	52005000 	.word	0x52005000
 8001a68:	58024400 	.word	0x58024400
 8001a6c:	58021800 	.word	0x58021800
 8001a70:	58021400 	.word	0x58021400

08001a74 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <MX_RNG_Init+0x24>)
 8001a7a:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <MX_RNG_Init+0x28>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_RNG_Init+0x24>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_RNG_Init+0x24>)
 8001a86:	f00a ff77 	bl	800c978 <HAL_RNG_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001a90:	f7ff fe94 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20001744 	.word	0x20001744
 8001a9c:	48021800 	.word	0x48021800

08001aa0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b0b2      	sub	sp, #200	; 0xc8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	22bc      	movs	r2, #188	; 0xbc
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f015 fccd 	bl	8017450 <memset>
  if(rngHandle->Instance==RNG)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <HAL_RNG_MspInit+0x68>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d11e      	bne.n	8001afe <HAL_RNG_MspInit+0x5e>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001ac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ac4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f008 fdc5 	bl	800a660 <HAL_RCCEx_PeriphCLKConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001adc:	f7ff fe6e 	bl	80017bc <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_RNG_MspInit+0x6c>)
 8001ae2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001ae6:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <HAL_RNG_MspInit+0x6c>)
 8001ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aec:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_RNG_MspInit+0x6c>)
 8001af2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001afe:	bf00      	nop
 8001b00:	37c8      	adds	r7, #200	; 0xc8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	48021800 	.word	0x48021800
 8001b0c:	58024400 	.word	0x58024400

08001b10 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001b14:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <MX_SAI1_Init+0xa8>)
 8001b16:	4a29      	ldr	r2, [pc, #164]	; (8001bbc <MX_SAI1_Init+0xac>)
 8001b18:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001b1a:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <MX_SAI1_Init+0xa8>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b20:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <MX_SAI1_Init+0xa8>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b26:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <MX_SAI1_Init+0xa8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b2c:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <MX_SAI1_Init+0xa8>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <MX_SAI1_Init+0xa8>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001b38:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <MX_SAI1_Init+0xa8>)
 8001b3a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001b3e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <MX_SAI1_Init+0xa8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_SAI1_Init+0xa8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_SAI1_Init+0xa8>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001b52:	2302      	movs	r3, #2
 8001b54:	2202      	movs	r2, #2
 8001b56:	2101      	movs	r1, #1
 8001b58:	4817      	ldr	r0, [pc, #92]	; (8001bb8 <MX_SAI1_Init+0xa8>)
 8001b5a:	f00a ffc5 	bl	800cae8 <HAL_SAI_InitProtocol>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_SAI1_Init+0x58>
  {
    Error_Handler();
 8001b64:	f7ff fe2a 	bl	80017bc <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <MX_SAI1_Init+0xb0>)
 8001b6a:	4a16      	ldr	r2, [pc, #88]	; (8001bc4 <MX_SAI1_Init+0xb4>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_SAI1_Init+0xb0>)
 8001b70:	2202      	movs	r2, #2
 8001b72:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <MX_SAI1_Init+0xb0>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_SAI1_Init+0xb0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_SAI1_Init+0xb0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_SAI1_Init+0xb0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_SAI1_Init+0xb0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <MX_SAI1_Init+0xb0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_SAI1_Init+0xb0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <MX_SAI1_Init+0xb0>)
 8001ba6:	f00a ff9f 	bl	800cae8 <HAL_SAI_InitProtocol>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001bb0:	f7ff fe04 	bl	80017bc <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20001758 	.word	0x20001758
 8001bbc:	40015804 	.word	0x40015804
 8001bc0:	200017f0 	.word	0x200017f0
 8001bc4:	40015824 	.word	0x40015824

08001bc8 <MX_SAI2_Init>:
/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <MX_SAI2_Init+0xac>)
 8001bce:	4a2a      	ldr	r2, [pc, #168]	; (8001c78 <MX_SAI2_Init+0xb0>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001bd2:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <MX_SAI2_Init+0xac>)
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_SYNCHRONOUS;
 8001bd8:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <MX_SAI2_Init+0xac>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bde:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <MX_SAI2_Init+0xac>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <MX_SAI2_Init+0xac>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <MX_SAI2_Init+0xac>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001bf0:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <MX_SAI2_Init+0xac>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <MX_SAI2_Init+0xac>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <MX_SAI2_Init+0xac>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001c02:	2302      	movs	r3, #2
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	481a      	ldr	r0, [pc, #104]	; (8001c74 <MX_SAI2_Init+0xac>)
 8001c0a:	f00a ff6d 	bl	800cae8 <HAL_SAI_InitProtocol>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_SAI2_Init+0x50>
  {
    Error_Handler();
 8001c14:	f7ff fdd2 	bl	80017bc <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <MX_SAI2_Init+0xb4>)
 8001c1a:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <MX_SAI2_Init+0xb8>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <MX_SAI2_Init+0xb4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_SAI2_Init+0xb4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_SAI2_Init+0xb4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_SAI2_Init+0xb4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_SAI2_Init+0xb4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_SAI2_Init+0xb4>)
 8001c3e:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <MX_SAI2_Init+0xbc>)
 8001c40:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_SAI2_Init+0xb4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_SAI2_Init+0xb4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <MX_SAI2_Init+0xb4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_SAI2_Init+0xb4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4806      	ldr	r0, [pc, #24]	; (8001c7c <MX_SAI2_Init+0xb4>)
 8001c62:	f00a ff41 	bl	800cae8 <HAL_SAI_InitProtocol>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_SAI2_Init+0xa8>
  {
    Error_Handler();
 8001c6c:	f7ff fda6 	bl	80017bc <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20001888 	.word	0x20001888
 8001c78:	40015c04 	.word	0x40015c04
 8001c7c:	20001920 	.word	0x20001920
 8001c80:	40015c24 	.word	0x40015c24
 8001c84:	0002ee00 	.word	0x0002ee00

08001c88 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b090      	sub	sp, #64	; 0x40
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4aa8      	ldr	r2, [pc, #672]	; (8001f38 <HAL_SAI_MspInit+0x2b0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d178      	bne.n	8001d8c <HAL_SAI_MspInit+0x104>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001c9a:	4ba8      	ldr	r3, [pc, #672]	; (8001f3c <HAL_SAI_MspInit+0x2b4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10e      	bne.n	8001cc0 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001ca2:	4ba7      	ldr	r3, [pc, #668]	; (8001f40 <HAL_SAI_MspInit+0x2b8>)
 8001ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ca8:	4aa5      	ldr	r2, [pc, #660]	; (8001f40 <HAL_SAI_MspInit+0x2b8>)
 8001caa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cb2:	4ba3      	ldr	r3, [pc, #652]	; (8001f40 <HAL_SAI_MspInit+0x2b8>)
 8001cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
    }
    SAI1_client ++;
 8001cc0:	4b9e      	ldr	r3, [pc, #632]	; (8001f3c <HAL_SAI_MspInit+0x2b4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	4a9d      	ldr	r2, [pc, #628]	; (8001f3c <HAL_SAI_MspInit+0x2b4>)
 8001cc8:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001cca:	2374      	movs	r3, #116	; 0x74
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001cda:	2306      	movs	r3, #6
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4897      	ldr	r0, [pc, #604]	; (8001f44 <HAL_SAI_MspInit+0x2bc>)
 8001ce6:	f005 fa61 	bl	80071ac <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 8001cea:	4b97      	ldr	r3, [pc, #604]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001cec:	4a97      	ldr	r2, [pc, #604]	; (8001f4c <HAL_SAI_MspInit+0x2c4>)
 8001cee:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001cf0:	4b95      	ldr	r3, [pc, #596]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001cf2:	2257      	movs	r2, #87	; 0x57
 8001cf4:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cf6:	4b94      	ldr	r3, [pc, #592]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cfc:	4b92      	ldr	r3, [pc, #584]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001d02:	4b91      	ldr	r3, [pc, #580]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d08:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d0a:	4b8f      	ldr	r3, [pc, #572]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001d0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d10:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d12:	4b8d      	ldr	r3, [pc, #564]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001d14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d18:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001d1a:	4b8b      	ldr	r3, [pc, #556]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d20:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001d22:	4b89      	ldr	r3, [pc, #548]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001d24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d28:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d2a:	4b87      	ldr	r3, [pc, #540]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001d30:	4885      	ldr	r0, [pc, #532]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001d32:	f002 fadb 	bl	80042ec <HAL_DMA_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8001d3c:	f7ff fd3e 	bl	80017bc <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8001d40:	2306      	movs	r3, #6
 8001d42:	61fb      	str	r3, [r7, #28]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8001d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d48:	623b      	str	r3, [r7, #32]
    pSyncConfig.SyncEnable = DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    pSyncConfig.EventEnable = ENABLE;
 8001d50:	2301      	movs	r3, #1
 8001d52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    pSyncConfig.RequestNumber = 1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4879      	ldr	r0, [pc, #484]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001d62:	f005 f90b 	bl	8006f7c <HAL_DMAEx_ConfigMuxSync>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_SAI_MspInit+0xe8>
    {
      Error_Handler();
 8001d6c:	f7ff fd26 	bl	80017bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a75      	ldr	r2, [pc, #468]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001d78:	4a73      	ldr	r2, [pc, #460]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a71      	ldr	r2, [pc, #452]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001d86:	4a70      	ldr	r2, [pc, #448]	; (8001f48 <HAL_SAI_MspInit+0x2c0>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a6f      	ldr	r2, [pc, #444]	; (8001f50 <HAL_SAI_MspInit+0x2c8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d160      	bne.n	8001e58 <HAL_SAI_MspInit+0x1d0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001d96:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <HAL_SAI_MspInit+0x2b4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10e      	bne.n	8001dbc <HAL_SAI_MspInit+0x134>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001d9e:	4b68      	ldr	r3, [pc, #416]	; (8001f40 <HAL_SAI_MspInit+0x2b8>)
 8001da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001da4:	4a66      	ldr	r2, [pc, #408]	; (8001f40 <HAL_SAI_MspInit+0x2b8>)
 8001da6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001daa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001dae:	4b64      	ldr	r3, [pc, #400]	; (8001f40 <HAL_SAI_MspInit+0x2b8>)
 8001db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	697b      	ldr	r3, [r7, #20]
      }
    SAI1_client ++;
 8001dbc:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_SAI_MspInit+0x2b4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	4a5e      	ldr	r2, [pc, #376]	; (8001f3c <HAL_SAI_MspInit+0x2b4>)
 8001dc4:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dde:	4619      	mov	r1, r3
 8001de0:	4858      	ldr	r0, [pc, #352]	; (8001f44 <HAL_SAI_MspInit+0x2bc>)
 8001de2:	f005 f9e3 	bl	80071ac <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream2;
 8001de6:	4b5b      	ldr	r3, [pc, #364]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001de8:	4a5b      	ldr	r2, [pc, #364]	; (8001f58 <HAL_SAI_MspInit+0x2d0>)
 8001dea:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001dee:	2258      	movs	r2, #88	; 0x58
 8001df0:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df2:	4b58      	ldr	r3, [pc, #352]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001df4:	2240      	movs	r2, #64	; 0x40
 8001df6:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df8:	4b56      	ldr	r3, [pc, #344]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001dfe:	4b55      	ldr	r3, [pc, #340]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e04:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e06:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001e08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e0c:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e0e:	4b51      	ldr	r3, [pc, #324]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001e10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e14:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001e16:	4b4f      	ldr	r3, [pc, #316]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001e18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1c:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8001e1e:	4b4d      	ldr	r3, [pc, #308]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001e20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e24:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e26:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001e2c:	4849      	ldr	r0, [pc, #292]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001e2e:	f002 fa5d 	bl	80042ec <HAL_DMA_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_SAI_MspInit+0x1b4>
    {
      Error_Handler();
 8001e38:	f7ff fcc0 	bl	80017bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a45      	ldr	r2, [pc, #276]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001e44:	4a43      	ldr	r2, [pc, #268]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a41      	ldr	r2, [pc, #260]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001e52:	4a40      	ldr	r2, [pc, #256]	; (8001f54 <HAL_SAI_MspInit+0x2cc>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a3f      	ldr	r2, [pc, #252]	; (8001f5c <HAL_SAI_MspInit+0x2d4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	f040 8097 	bne.w	8001f92 <HAL_SAI_MspInit+0x30a>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001e64:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <HAL_SAI_MspInit+0x2d8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10e      	bne.n	8001e8a <HAL_SAI_MspInit+0x202>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001e6c:	4b34      	ldr	r3, [pc, #208]	; (8001f40 <HAL_SAI_MspInit+0x2b8>)
 8001e6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e72:	4a33      	ldr	r2, [pc, #204]	; (8001f40 <HAL_SAI_MspInit+0x2b8>)
 8001e74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e7c:	4b30      	ldr	r3, [pc, #192]	; (8001f40 <HAL_SAI_MspInit+0x2b8>)
 8001e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001e8a:	4b35      	ldr	r3, [pc, #212]	; (8001f60 <HAL_SAI_MspInit+0x2d8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	4a33      	ldr	r2, [pc, #204]	; (8001f60 <HAL_SAI_MspInit+0x2d8>)
 8001e92:	6013      	str	r3, [r2, #0]

    /**SAI2_A_Block_A GPIO Configuration
    PD11     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ea6:	230a      	movs	r3, #10
 8001ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eae:	4619      	mov	r1, r3
 8001eb0:	482c      	ldr	r0, [pc, #176]	; (8001f64 <HAL_SAI_MspInit+0x2dc>)
 8001eb2:	f005 f97b 	bl	80071ac <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Stream3;
 8001eb6:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <HAL_SAI_MspInit+0x2e0>)
 8001eb8:	4a2c      	ldr	r2, [pc, #176]	; (8001f6c <HAL_SAI_MspInit+0x2e4>)
 8001eba:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_SAI2_A;
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <HAL_SAI_MspInit+0x2e0>)
 8001ebe:	2259      	movs	r2, #89	; 0x59
 8001ec0:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec2:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <HAL_SAI_MspInit+0x2e0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <HAL_SAI_MspInit+0x2e0>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <HAL_SAI_MspInit+0x2e0>)
 8001ed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed4:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ed6:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_SAI_MspInit+0x2e0>)
 8001ed8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001edc:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_SAI_MspInit+0x2e0>)
 8001ee0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ee4:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_SAI_MspInit+0x2e0>)
 8001ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eec:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_SAI_MspInit+0x2e0>)
 8001ef0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ef4:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_SAI_MspInit+0x2e0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8001efc:	481a      	ldr	r0, [pc, #104]	; (8001f68 <HAL_SAI_MspInit+0x2e0>)
 8001efe:	f002 f9f5 	bl	80042ec <HAL_DMA_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_SAI_MspInit+0x284>
    {
      Error_Handler();
 8001f08:	f7ff fc58 	bl	80017bc <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8001f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f14:	623b      	str	r3, [r7, #32]
    pSyncConfig.SyncEnable = ENABLE;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    pSyncConfig.EventEnable = DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    pSyncConfig.RequestNumber = 1;
 8001f22:	2301      	movs	r3, #1
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai2_a, &pSyncConfig) != HAL_OK)
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480e      	ldr	r0, [pc, #56]	; (8001f68 <HAL_SAI_MspInit+0x2e0>)
 8001f2e:	f005 f825 	bl	8006f7c <HAL_DMAEx_ConfigMuxSync>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	e01b      	b.n	8001f70 <HAL_SAI_MspInit+0x2e8>
 8001f38:	40015804 	.word	0x40015804
 8001f3c:	20001b98 	.word	0x20001b98
 8001f40:	58024400 	.word	0x58024400
 8001f44:	58021000 	.word	0x58021000
 8001f48:	200019b8 	.word	0x200019b8
 8001f4c:	40020028 	.word	0x40020028
 8001f50:	40015824 	.word	0x40015824
 8001f54:	20001a30 	.word	0x20001a30
 8001f58:	40020040 	.word	0x40020040
 8001f5c:	40015c04 	.word	0x40015c04
 8001f60:	20001b9c 	.word	0x20001b9c
 8001f64:	58020c00 	.word	0x58020c00
 8001f68:	20001aa8 	.word	0x20001aa8
 8001f6c:	40020058 	.word	0x40020058
 8001f70:	d001      	beq.n	8001f76 <HAL_SAI_MspInit+0x2ee>
    {
      Error_Handler();
 8001f72:	f7ff fc23 	bl	80017bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a58      	ldr	r2, [pc, #352]	; (80020dc <HAL_SAI_MspInit+0x454>)
 8001f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001f7e:	4a57      	ldr	r2, [pc, #348]	; (80020dc <HAL_SAI_MspInit+0x454>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a55      	ldr	r2, [pc, #340]	; (80020dc <HAL_SAI_MspInit+0x454>)
 8001f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001f8c:	4a53      	ldr	r2, [pc, #332]	; (80020dc <HAL_SAI_MspInit+0x454>)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a52      	ldr	r2, [pc, #328]	; (80020e0 <HAL_SAI_MspInit+0x458>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	f040 809a 	bne.w	80020d2 <HAL_SAI_MspInit+0x44a>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001f9e:	4b51      	ldr	r3, [pc, #324]	; (80020e4 <HAL_SAI_MspInit+0x45c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_SAI_MspInit+0x33c>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001fa6:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_SAI_MspInit+0x460>)
 8001fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fac:	4a4e      	ldr	r2, [pc, #312]	; (80020e8 <HAL_SAI_MspInit+0x460>)
 8001fae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fb6:	4b4c      	ldr	r3, [pc, #304]	; (80020e8 <HAL_SAI_MspInit+0x460>)
 8001fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001fc4:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_SAI_MspInit+0x45c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	4a46      	ldr	r2, [pc, #280]	; (80020e4 <HAL_SAI_MspInit+0x45c>)
 8001fcc:	6013      	str	r3, [r2, #0]
    PG9     ------> SAI2_FS_B
    PA1     ------> SAI2_MCLK_B
    PA0     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001fe0:	230a      	movs	r3, #10
 8001fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4840      	ldr	r0, [pc, #256]	; (80020ec <HAL_SAI_MspInit+0x464>)
 8001fec:	f005 f8de 	bl	80071ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002000:	230a      	movs	r3, #10
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002008:	4619      	mov	r1, r3
 800200a:	4839      	ldr	r0, [pc, #228]	; (80020f0 <HAL_SAI_MspInit+0x468>)
 800200c:	f005 f8ce 	bl	80071ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002010:	2304      	movs	r3, #4
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8002020:	2308      	movs	r3, #8
 8002022:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002028:	4619      	mov	r1, r3
 800202a:	4831      	ldr	r0, [pc, #196]	; (80020f0 <HAL_SAI_MspInit+0x468>)
 800202c:	f005 f8be 	bl	80071ac <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Stream4;
 8002030:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 8002032:	4a31      	ldr	r2, [pc, #196]	; (80020f8 <HAL_SAI_MspInit+0x470>)
 8002034:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_SAI2_B;
 8002036:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 8002038:	225a      	movs	r2, #90	; 0x5a
 800203a:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800203c:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 800203e:	2240      	movs	r2, #64	; 0x40
 8002040:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002042:	4b2c      	ldr	r3, [pc, #176]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8002048:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 800204a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800204e:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002050:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 8002052:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002056:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002058:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 800205a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800205e:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 8002062:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002066:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 800206a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800206e:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8002076:	481f      	ldr	r0, [pc, #124]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 8002078:	f002 f938 	bl	80042ec <HAL_DMA_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_SAI_MspInit+0x3fe>
    {
      Error_Handler();
 8002082:	f7ff fb9b 	bl	80017bc <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8002086:	2301      	movs	r3, #1
 8002088:	61fb      	str	r3, [r7, #28]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 800208a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800208e:	623b      	str	r3, [r7, #32]
    pSyncConfig.SyncEnable = ENABLE;
 8002090:	2301      	movs	r3, #1
 8002092:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    pSyncConfig.EventEnable = DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    pSyncConfig.RequestNumber = 1;
 800209c:	2301      	movs	r3, #1
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai2_b, &pSyncConfig) != HAL_OK)
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	4619      	mov	r1, r3
 80020a6:	4813      	ldr	r0, [pc, #76]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 80020a8:	f004 ff68 	bl	8006f7c <HAL_DMAEx_ConfigMuxSync>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_SAI_MspInit+0x42e>
    {
      Error_Handler();
 80020b2:	f7ff fb83 	bl	80017bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 80020ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80020be:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 80020c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80020cc:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <HAL_SAI_MspInit+0x46c>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80020d2:	bf00      	nop
 80020d4:	3740      	adds	r7, #64	; 0x40
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20001aa8 	.word	0x20001aa8
 80020e0:	40015c24 	.word	0x40015c24
 80020e4:	20001b9c 	.word	0x20001b9c
 80020e8:	58024400 	.word	0x58024400
 80020ec:	58021800 	.word	0x58021800
 80020f0:	58020000 	.word	0x58020000
 80020f4:	20001b20 	.word	0x20001b20
 80020f8:	40020070 	.word	0x40020070

080020fc <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <MX_SDMMC1_SD_Init+0x34>)
 8002102:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <MX_SDMMC1_SD_Init+0x38>)
 8002104:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <MX_SDMMC1_SD_Init+0x34>)
 8002108:	2200      	movs	r2, #0
 800210a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <MX_SDMMC1_SD_Init+0x34>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002112:	4b07      	ldr	r3, [pc, #28]	; (8002130 <MX_SDMMC1_SD_Init+0x34>)
 8002114:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002118:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <MX_SDMMC1_SD_Init+0x34>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 168;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <MX_SDMMC1_SD_Init+0x34>)
 8002122:	22a8      	movs	r2, #168	; 0xa8
 8002124:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	20001ba0 	.word	0x20001ba0
 8002134:	52007000 	.word	0x52007000

08002138 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2e      	ldr	r2, [pc, #184]	; (8002210 <HAL_SD_MspInit+0xd8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d155      	bne.n	8002206 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800215a:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <HAL_SD_MspInit+0xdc>)
 800215c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002160:	4a2c      	ldr	r2, [pc, #176]	; (8002214 <HAL_SD_MspInit+0xdc>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002166:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_SD_MspInit+0xdc>)
 800216c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002178:	4b26      	ldr	r3, [pc, #152]	; (8002214 <HAL_SD_MspInit+0xdc>)
 800217a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217e:	4a25      	ldr	r2, [pc, #148]	; (8002214 <HAL_SD_MspInit+0xdc>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002188:	4b22      	ldr	r3, [pc, #136]	; (8002214 <HAL_SD_MspInit+0xdc>)
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002196:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <HAL_SD_MspInit+0xdc>)
 8002198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219c:	4a1d      	ldr	r2, [pc, #116]	; (8002214 <HAL_SD_MspInit+0xdc>)
 800219e:	f043 0308 	orr.w	r3, r3, #8
 80021a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_SD_MspInit+0xdc>)
 80021a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80021b4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80021b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80021c6:	230c      	movs	r3, #12
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	4811      	ldr	r0, [pc, #68]	; (8002218 <HAL_SD_MspInit+0xe0>)
 80021d2:	f004 ffeb 	bl	80071ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d6:	2304      	movs	r3, #4
 80021d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80021e6:	230c      	movs	r3, #12
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	480a      	ldr	r0, [pc, #40]	; (800221c <HAL_SD_MspInit+0xe4>)
 80021f2:	f004 ffdb 	bl	80071ac <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2031      	movs	r0, #49	; 0x31
 80021fc:	f001 fe73 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002200:	2031      	movs	r0, #49	; 0x31
 8002202:	f001 fe8a 	bl	8003f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002206:	bf00      	nop
 8002208:	3728      	adds	r7, #40	; 0x28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	52007000 	.word	0x52007000
 8002214:	58024400 	.word	0x58024400
 8002218:	58020800 	.word	0x58020800
 800221c:	58020c00 	.word	0x58020c00

08002220 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <MX_SPI1_Init+0xa4>)
 8002226:	4a28      	ldr	r2, [pc, #160]	; (80022c8 <MX_SPI1_Init+0xa8>)
 8002228:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <MX_SPI1_Init+0xa4>)
 800222c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002230:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <MX_SPI1_Init+0xa4>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002238:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <MX_SPI1_Init+0xa4>)
 800223a:	2203      	movs	r2, #3
 800223c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800223e:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <MX_SPI1_Init+0xa4>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002244:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <MX_SPI1_Init+0xa4>)
 8002246:	2200      	movs	r2, #0
 8002248:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800224a:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <MX_SPI1_Init+0xa4>)
 800224c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002250:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002252:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <MX_SPI1_Init+0xa4>)
 8002254:	2200      	movs	r2, #0
 8002256:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <MX_SPI1_Init+0xa4>)
 800225a:	2200      	movs	r2, #0
 800225c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800225e:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <MX_SPI1_Init+0xa4>)
 8002260:	2200      	movs	r2, #0
 8002262:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <MX_SPI1_Init+0xa4>)
 8002266:	2200      	movs	r2, #0
 8002268:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800226a:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <MX_SPI1_Init+0xa4>)
 800226c:	2200      	movs	r2, #0
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <MX_SPI1_Init+0xa4>)
 8002272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002276:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <MX_SPI1_Init+0xa4>)
 800227a:	2200      	movs	r2, #0
 800227c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <MX_SPI1_Init+0xa4>)
 8002280:	2200      	movs	r2, #0
 8002282:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <MX_SPI1_Init+0xa4>)
 8002286:	2200      	movs	r2, #0
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <MX_SPI1_Init+0xa4>)
 800228c:	2200      	movs	r2, #0
 800228e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <MX_SPI1_Init+0xa4>)
 8002292:	2200      	movs	r2, #0
 8002294:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <MX_SPI1_Init+0xa4>)
 8002298:	2200      	movs	r2, #0
 800229a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <MX_SPI1_Init+0xa4>)
 800229e:	2200      	movs	r2, #0
 80022a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <MX_SPI1_Init+0xa4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <MX_SPI1_Init+0xa4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <MX_SPI1_Init+0xa4>)
 80022b0:	f00d f906 	bl	800f4c0 <HAL_SPI_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80022ba:	f7ff fa7f 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20001c1c 	.word	0x20001c1c
 80022c8:	40013000 	.word	0x40013000

080022cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b0ba      	sub	sp, #232	; 0xe8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e4:	f107 0318 	add.w	r3, r7, #24
 80022e8:	22bc      	movs	r2, #188	; 0xbc
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f015 f8af 	bl	8017450 <memset>
  if(spiHandle->Instance==SPI1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a37      	ldr	r2, [pc, #220]	; (80023d4 <HAL_SPI_MspInit+0x108>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d166      	bne.n	80023ca <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80022fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002300:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002302:	2300      	movs	r3, #0
 8002304:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002306:	f107 0318 	add.w	r3, r7, #24
 800230a:	4618      	mov	r0, r3
 800230c:	f008 f9a8 	bl	800a660 <HAL_RCCEx_PeriphCLKConfig>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002316:	f7ff fa51 	bl	80017bc <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800231a:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <HAL_SPI_MspInit+0x10c>)
 800231c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002320:	4a2d      	ldr	r2, [pc, #180]	; (80023d8 <HAL_SPI_MspInit+0x10c>)
 8002322:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002326:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_SPI_MspInit+0x10c>)
 800232c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <HAL_SPI_MspInit+0x10c>)
 800233a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233e:	4a26      	ldr	r2, [pc, #152]	; (80023d8 <HAL_SPI_MspInit+0x10c>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002348:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <HAL_SPI_MspInit+0x10c>)
 800234a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_SPI_MspInit+0x10c>)
 8002358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800235c:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <HAL_SPI_MspInit+0x10c>)
 800235e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_SPI_MspInit+0x10c>)
 8002368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800236c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
    PB5     ------> SPI1_MOSI
    PB4 (NJTRST)     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    PG10     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8002374:	2330      	movs	r3, #48	; 0x30
 8002376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800238c:	2305      	movs	r3, #5
 800238e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002392:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002396:	4619      	mov	r1, r3
 8002398:	4810      	ldr	r0, [pc, #64]	; (80023dc <HAL_SPI_MspInit+0x110>)
 800239a:	f004 ff07 	bl	80071ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800239e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023b8:	2305      	movs	r3, #5
 80023ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023c2:	4619      	mov	r1, r3
 80023c4:	4806      	ldr	r0, [pc, #24]	; (80023e0 <HAL_SPI_MspInit+0x114>)
 80023c6:	f004 fef1 	bl	80071ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023ca:	bf00      	nop
 80023cc:	37e8      	adds	r7, #232	; 0xe8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40013000 	.word	0x40013000
 80023d8:	58024400 	.word	0x58024400
 80023dc:	58020400 	.word	0x58020400
 80023e0:	58021800 	.word	0x58021800

080023e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_MspInit+0x30>)
 80023ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023f0:	4a08      	ldr	r2, [pc, #32]	; (8002414 <HAL_MspInit+0x30>)
 80023f2:	f043 0302 	orr.w	r3, r3, #2
 80023f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_MspInit+0x30>)
 80023fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	58024400 	.word	0x58024400

08002418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800241c:	e7fe      	b.n	800241c <NMI_Handler+0x4>

0800241e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <HardFault_Handler+0x4>

08002424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <MemManage_Handler+0x4>

0800242a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <BusFault_Handler+0x4>

08002430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <UsageFault_Handler+0x4>

08002436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002464:	f000 fb88 	bl	8002b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}

0800246c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002470:	4802      	ldr	r0, [pc, #8]	; (800247c <DMA1_Stream0_IRQHandler+0x10>)
 8002472:	f003 fa65 	bl	8005940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000180 	.word	0x20000180

08002480 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <DMA1_Stream1_IRQHandler+0x10>)
 8002486:	f003 fa5b 	bl	8005940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200019b8 	.word	0x200019b8

08002494 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <DMA1_Stream2_IRQHandler+0x10>)
 800249a:	f003 fa51 	bl	8005940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20001a30 	.word	0x20001a30

080024a8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <DMA1_Stream3_IRQHandler+0x10>)
 80024ae:	f003 fa47 	bl	8005940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20001aa8 	.word	0x20001aa8

080024bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <DMA1_Stream4_IRQHandler+0x10>)
 80024c2:	f003 fa3d 	bl	8005940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20001b20 	.word	0x20001b20

080024d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <DMA1_Stream5_IRQHandler+0x10>)
 80024d6:	f003 fa33 	bl	8005940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20001d80 	.word	0x20001d80

080024e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <USART1_IRQHandler+0x10>)
 80024ea:	f00d fea7 	bl	801023c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20001cf0 	.word	0x20001cf0

080024f8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <SDMMC1_IRQHandler+0x10>)
 80024fe:	f00b fdaf 	bl	800e060 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20001ba0 	.word	0x20001ba0

0800250c <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8002512:	f005 fe68 	bl	80081e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200032f0 	.word	0x200032f0

08002520 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8002526:	f005 fe5e 	bl	80081e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200032f0 	.word	0x200032f0

08002534 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <OTG_FS_IRQHandler+0x10>)
 800253a:	f005 fe54 	bl	80081e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200032f0 	.word	0x200032f0

08002548 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <DMAMUX1_OVR_IRQHandler+0x1c>)
 800254e:	f004 fddb 	bl	8007108 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Stream3
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai2_a);
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <DMAMUX1_OVR_IRQHandler+0x20>)
 8002554:	f004 fdd8 	bl	8007108 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Stream4
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai2_b);
 8002558:	4804      	ldr	r0, [pc, #16]	; (800256c <DMAMUX1_OVR_IRQHandler+0x24>)
 800255a:	f004 fdd5 	bl	8007108 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200019b8 	.word	0x200019b8
 8002568:	20001aa8 	.word	0x20001aa8
 800256c:	20001b20 	.word	0x20001b20

08002570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002574:	4b37      	ldr	r3, [pc, #220]	; (8002654 <SystemInit+0xe4>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	4a36      	ldr	r2, [pc, #216]	; (8002654 <SystemInit+0xe4>)
 800257c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002584:	4b34      	ldr	r3, [pc, #208]	; (8002658 <SystemInit+0xe8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	2b06      	cmp	r3, #6
 800258e:	d807      	bhi.n	80025a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002590:	4b31      	ldr	r3, [pc, #196]	; (8002658 <SystemInit+0xe8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 030f 	bic.w	r3, r3, #15
 8002598:	4a2f      	ldr	r2, [pc, #188]	; (8002658 <SystemInit+0xe8>)
 800259a:	f043 0307 	orr.w	r3, r3, #7
 800259e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <SystemInit+0xec>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2d      	ldr	r2, [pc, #180]	; (800265c <SystemInit+0xec>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025ac:	4b2b      	ldr	r3, [pc, #172]	; (800265c <SystemInit+0xec>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025b2:	4b2a      	ldr	r3, [pc, #168]	; (800265c <SystemInit+0xec>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4929      	ldr	r1, [pc, #164]	; (800265c <SystemInit+0xec>)
 80025b8:	4b29      	ldr	r3, [pc, #164]	; (8002660 <SystemInit+0xf0>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025be:	4b26      	ldr	r3, [pc, #152]	; (8002658 <SystemInit+0xe8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025ca:	4b23      	ldr	r3, [pc, #140]	; (8002658 <SystemInit+0xe8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 030f 	bic.w	r3, r3, #15
 80025d2:	4a21      	ldr	r2, [pc, #132]	; (8002658 <SystemInit+0xe8>)
 80025d4:	f043 0307 	orr.w	r3, r3, #7
 80025d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <SystemInit+0xec>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025e0:	4b1e      	ldr	r3, [pc, #120]	; (800265c <SystemInit+0xec>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <SystemInit+0xec>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <SystemInit+0xec>)
 80025ee:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <SystemInit+0xf4>)
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <SystemInit+0xec>)
 80025f4:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <SystemInit+0xf8>)
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <SystemInit+0xec>)
 80025fa:	4a1c      	ldr	r2, [pc, #112]	; (800266c <SystemInit+0xfc>)
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025fe:	4b17      	ldr	r3, [pc, #92]	; (800265c <SystemInit+0xec>)
 8002600:	2200      	movs	r2, #0
 8002602:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002604:	4b15      	ldr	r3, [pc, #84]	; (800265c <SystemInit+0xec>)
 8002606:	4a19      	ldr	r2, [pc, #100]	; (800266c <SystemInit+0xfc>)
 8002608:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800260a:	4b14      	ldr	r3, [pc, #80]	; (800265c <SystemInit+0xec>)
 800260c:	2200      	movs	r2, #0
 800260e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <SystemInit+0xec>)
 8002612:	4a16      	ldr	r2, [pc, #88]	; (800266c <SystemInit+0xfc>)
 8002614:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <SystemInit+0xec>)
 8002618:	2200      	movs	r2, #0
 800261a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <SystemInit+0xec>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0e      	ldr	r2, [pc, #56]	; (800265c <SystemInit+0xec>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002626:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <SystemInit+0xec>)
 800262a:	2200      	movs	r2, #0
 800262c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <SystemInit+0x100>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <SystemInit+0x104>)
 8002634:	4013      	ands	r3, r2
 8002636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800263a:	d202      	bcs.n	8002642 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800263c:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <SystemInit+0x108>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <SystemInit+0x10c>)
 8002644:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002648:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00
 8002658:	52002000 	.word	0x52002000
 800265c:	58024400 	.word	0x58024400
 8002660:	eaf6ed7f 	.word	0xeaf6ed7f
 8002664:	02020200 	.word	0x02020200
 8002668:	01ff0000 	.word	0x01ff0000
 800266c:	01010280 	.word	0x01010280
 8002670:	5c001000 	.word	0x5c001000
 8002674:	ffff0000 	.word	0xffff0000
 8002678:	51008108 	.word	0x51008108
 800267c:	52004000 	.word	0x52004000

08002680 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b096      	sub	sp, #88	; 0x58
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002686:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002692:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	611a      	str	r2, [r3, #16]
 80026a2:	615a      	str	r2, [r3, #20]
 80026a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	222c      	movs	r2, #44	; 0x2c
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f014 fecf 	bl	8017450 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026b2:	4b39      	ldr	r3, [pc, #228]	; (8002798 <MX_TIM1_Init+0x118>)
 80026b4:	4a39      	ldr	r2, [pc, #228]	; (800279c <MX_TIM1_Init+0x11c>)
 80026b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026b8:	4b37      	ldr	r3, [pc, #220]	; (8002798 <MX_TIM1_Init+0x118>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026be:	4b36      	ldr	r3, [pc, #216]	; (8002798 <MX_TIM1_Init+0x118>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026c4:	4b34      	ldr	r3, [pc, #208]	; (8002798 <MX_TIM1_Init+0x118>)
 80026c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026cc:	4b32      	ldr	r3, [pc, #200]	; (8002798 <MX_TIM1_Init+0x118>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026d2:	4b31      	ldr	r3, [pc, #196]	; (8002798 <MX_TIM1_Init+0x118>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <MX_TIM1_Init+0x118>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80026de:	482e      	ldr	r0, [pc, #184]	; (8002798 <MX_TIM1_Init+0x118>)
 80026e0:	f00d f80f 	bl	800f702 <HAL_TIM_OC_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80026ea:	f7ff f867 	bl	80017bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026fe:	4619      	mov	r1, r3
 8002700:	4825      	ldr	r0, [pc, #148]	; (8002798 <MX_TIM1_Init+0x118>)
 8002702:	f00d fc3f 	bl	800ff84 <HAL_TIMEx_MasterConfigSynchronization>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800270c:	f7ff f856 	bl	80017bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002710:	2300      	movs	r3, #0
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002718:	2300      	movs	r3, #0
 800271a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800271c:	2300      	movs	r3, #0
 800271e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800272c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002730:	2200      	movs	r2, #0
 8002732:	4619      	mov	r1, r3
 8002734:	4818      	ldr	r0, [pc, #96]	; (8002798 <MX_TIM1_Init+0x118>)
 8002736:	f00d f83b 	bl	800f7b0 <HAL_TIM_OC_ConfigChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002740:	f7ff f83c 	bl	80017bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002744:	2300      	movs	r3, #0
 8002746:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800275c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002774:	1d3b      	adds	r3, r7, #4
 8002776:	4619      	mov	r1, r3
 8002778:	4807      	ldr	r0, [pc, #28]	; (8002798 <MX_TIM1_Init+0x118>)
 800277a:	f00d fc91 	bl	80100a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002784:	f7ff f81a 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002788:	4803      	ldr	r0, [pc, #12]	; (8002798 <MX_TIM1_Init+0x118>)
 800278a:	f000 f82b 	bl	80027e4 <HAL_TIM_MspPostInit>

}
 800278e:	bf00      	nop
 8002790:	3758      	adds	r7, #88	; 0x58
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20001ca4 	.word	0x20001ca4
 800279c:	40010000 	.word	0x40010000

080027a0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <HAL_TIM_OC_MspInit+0x3c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10e      	bne.n	80027d0 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027b2:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_TIM_OC_MspInit+0x40>)
 80027b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027b8:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_TIM_OC_MspInit+0x40>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <HAL_TIM_OC_MspInit+0x40>)
 80027c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40010000 	.word	0x40010000
 80027e0:	58024400 	.word	0x58024400

080027e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a13      	ldr	r2, [pc, #76]	; (8002850 <HAL_TIM_MspPostInit+0x6c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d11f      	bne.n	8002846 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_TIM_MspPostInit+0x70>)
 8002808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800280c:	4a11      	ldr	r2, [pc, #68]	; (8002854 <HAL_TIM_MspPostInit+0x70>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002816:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_TIM_MspPostInit+0x70>)
 8002818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002828:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002836:	2301      	movs	r3, #1
 8002838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283a:	f107 030c 	add.w	r3, r7, #12
 800283e:	4619      	mov	r1, r3
 8002840:	4805      	ldr	r0, [pc, #20]	; (8002858 <HAL_TIM_MspPostInit+0x74>)
 8002842:	f004 fcb3 	bl	80071ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002846:	bf00      	nop
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40010000 	.word	0x40010000
 8002854:	58024400 	.word	0x58024400
 8002858:	58020000 	.word	0x58020000

0800285c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <MX_USART1_UART_Init+0x90>)
 8002862:	4a23      	ldr	r2, [pc, #140]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 8002864:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <MX_USART1_UART_Init+0x90>)
 8002868:	f647 2212 	movw	r2, #31250	; 0x7a12
 800286c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800286e:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <MX_USART1_UART_Init+0x90>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002874:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <MX_USART1_UART_Init+0x90>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <MX_USART1_UART_Init+0x90>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <MX_USART1_UART_Init+0x90>)
 8002882:	220c      	movs	r2, #12
 8002884:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <MX_USART1_UART_Init+0x90>)
 8002888:	2200      	movs	r2, #0
 800288a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <MX_USART1_UART_Init+0x90>)
 800288e:	2200      	movs	r2, #0
 8002890:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002892:	4b16      	ldr	r3, [pc, #88]	; (80028ec <MX_USART1_UART_Init+0x90>)
 8002894:	2200      	movs	r2, #0
 8002896:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <MX_USART1_UART_Init+0x90>)
 800289a:	2200      	movs	r2, #0
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800289e:	4b13      	ldr	r3, [pc, #76]	; (80028ec <MX_USART1_UART_Init+0x90>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028a4:	4811      	ldr	r0, [pc, #68]	; (80028ec <MX_USART1_UART_Init+0x90>)
 80028a6:	f00d fc79 	bl	801019c <HAL_UART_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80028b0:	f7fe ff84 	bl	80017bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028b4:	2100      	movs	r1, #0
 80028b6:	480d      	ldr	r0, [pc, #52]	; (80028ec <MX_USART1_UART_Init+0x90>)
 80028b8:	f00f f89a 	bl	80119f0 <HAL_UARTEx_SetTxFifoThreshold>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80028c2:	f7fe ff7b 	bl	80017bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028c6:	2100      	movs	r1, #0
 80028c8:	4808      	ldr	r0, [pc, #32]	; (80028ec <MX_USART1_UART_Init+0x90>)
 80028ca:	f00f f8cf 	bl	8011a6c <HAL_UARTEx_SetRxFifoThreshold>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80028d4:	f7fe ff72 	bl	80017bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028d8:	4804      	ldr	r0, [pc, #16]	; (80028ec <MX_USART1_UART_Init+0x90>)
 80028da:	f00f f850 	bl	801197e <HAL_UARTEx_DisableFifoMode>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80028e4:	f7fe ff6a 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20001cf0 	.word	0x20001cf0
 80028f0:	40011000 	.word	0x40011000

080028f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b0b8      	sub	sp, #224	; 0xe0
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	22bc      	movs	r2, #188	; 0xbc
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f014 fd9b 	bl	8017450 <memset>
  if(uartHandle->Instance==USART1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a3f      	ldr	r2, [pc, #252]	; (8002a1c <HAL_UART_MspInit+0x128>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d177      	bne.n	8002a14 <HAL_UART_MspInit+0x120>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002924:	2301      	movs	r3, #1
 8002926:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800292e:	f107 0310 	add.w	r3, r7, #16
 8002932:	4618      	mov	r0, r3
 8002934:	f007 fe94 	bl	800a660 <HAL_RCCEx_PeriphCLKConfig>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800293e:	f7fe ff3d 	bl	80017bc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002942:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <HAL_UART_MspInit+0x12c>)
 8002944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002948:	4a35      	ldr	r2, [pc, #212]	; (8002a20 <HAL_UART_MspInit+0x12c>)
 800294a:	f043 0310 	orr.w	r3, r3, #16
 800294e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002952:	4b33      	ldr	r3, [pc, #204]	; (8002a20 <HAL_UART_MspInit+0x12c>)
 8002954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <HAL_UART_MspInit+0x12c>)
 8002962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002966:	4a2e      	ldr	r2, [pc, #184]	; (8002a20 <HAL_UART_MspInit+0x12c>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002970:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <HAL_UART_MspInit+0x12c>)
 8002972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800297e:	23c0      	movs	r3, #192	; 0xc0
 8002980:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002996:	2307      	movs	r3, #7
 8002998:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029a0:	4619      	mov	r1, r3
 80029a2:	4820      	ldr	r0, [pc, #128]	; (8002a24 <HAL_UART_MspInit+0x130>)
 80029a4:	f004 fc02 	bl	80071ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream5;
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <HAL_UART_MspInit+0x134>)
 80029aa:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <HAL_UART_MspInit+0x138>)
 80029ac:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80029ae:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <HAL_UART_MspInit+0x134>)
 80029b0:	2229      	movs	r2, #41	; 0x29
 80029b2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029b4:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <HAL_UART_MspInit+0x134>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_UART_MspInit+0x134>)
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_UART_MspInit+0x134>)
 80029c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_UART_MspInit+0x134>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ce:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_UART_MspInit+0x134>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <HAL_UART_MspInit+0x134>)
 80029d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029da:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_UART_MspInit+0x134>)
 80029de:	2200      	movs	r2, #0
 80029e0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_UART_MspInit+0x134>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029e8:	480f      	ldr	r0, [pc, #60]	; (8002a28 <HAL_UART_MspInit+0x134>)
 80029ea:	f001 fc7f 	bl	80042ec <HAL_DMA_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 80029f4:	f7fe fee2 	bl	80017bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <HAL_UART_MspInit+0x134>)
 80029fc:	67da      	str	r2, [r3, #124]	; 0x7c
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <HAL_UART_MspInit+0x134>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a04:	2200      	movs	r2, #0
 8002a06:	2100      	movs	r1, #0
 8002a08:	2025      	movs	r0, #37	; 0x25
 8002a0a:	f001 fa6c 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a0e:	2025      	movs	r0, #37	; 0x25
 8002a10:	f001 fa83 	bl	8003f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a14:	bf00      	nop
 8002a16:	37e0      	adds	r7, #224	; 0xe0
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40011000 	.word	0x40011000
 8002a20:	58024400 	.word	0x58024400
 8002a24:	58020400 	.word	0x58020400
 8002a28:	20001d80 	.word	0x20001d80
 8002a2c:	40020088 	.word	0x40020088

08002a30 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a44:	f7ff fd94 	bl	8002570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a48:	480c      	ldr	r0, [pc, #48]	; (8002a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a4a:	490d      	ldr	r1, [pc, #52]	; (8002a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	; (8002a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a50:	e002      	b.n	8002a58 <LoopCopyDataInit>

08002a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a56:	3304      	adds	r3, #4

08002a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a5c:	d3f9      	bcc.n	8002a52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a60:	4c0a      	ldr	r4, [pc, #40]	; (8002a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a64:	e001      	b.n	8002a6a <LoopFillZerobss>

08002a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a68:	3204      	adds	r2, #4

08002a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a6c:	d3fb      	bcc.n	8002a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a6e:	f014 fccb 	bl	8017408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a72:	f7fe fc85 	bl	8001380 <main>
  bx  lr
 8002a76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a78:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a80:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002a84:	08019524 	.word	0x08019524
  ldr r2, =_sbss
 8002a88:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002a8c:	20003a1c 	.word	0x20003a1c

08002a90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a90:	e7fe      	b.n	8002a90 <ADC3_IRQHandler>
	...

08002a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a9a:	2003      	movs	r0, #3
 8002a9c:	f001 fa18 	bl	8003ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002aa0:	f007 fc08 	bl	800a2b4 <HAL_RCC_GetSysClockFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <HAL_Init+0x68>)
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	4913      	ldr	r1, [pc, #76]	; (8002b00 <HAL_Init+0x6c>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8002abc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002abe:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <HAL_Init+0x68>)
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <HAL_Init+0x6c>)
 8002ac8:	5cd3      	ldrb	r3, [r2, r3]
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad4:	4a0b      	ldr	r2, [pc, #44]	; (8002b04 <HAL_Init+0x70>)
 8002ad6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ad8:	4a0b      	ldr	r2, [pc, #44]	; (8002b08 <HAL_Init+0x74>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f000 f814 	bl	8002b0c <HAL_InitTick>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e002      	b.n	8002af4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002aee:	f7ff fc79 	bl	80023e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	58024400 	.word	0x58024400
 8002b00:	080174c0 	.word	0x080174c0
 8002b04:	20000004 	.word	0x20000004
 8002b08:	20000000 	.word	0x20000000

08002b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b14:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <HAL_InitTick+0x60>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e021      	b.n	8002b64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <HAL_InitTick+0x64>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <HAL_InitTick+0x60>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 f9fd 	bl	8003f36 <HAL_SYSTICK_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e00e      	b.n	8002b64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b0f      	cmp	r3, #15
 8002b4a:	d80a      	bhi.n	8002b62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b54:	f001 f9c7 	bl	8003ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b58:	4a06      	ldr	r2, [pc, #24]	; (8002b74 <HAL_InitTick+0x68>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e000      	b.n	8002b64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	2000000c 	.word	0x2000000c
 8002b70:	20000000 	.word	0x20000000
 8002b74:	20000008 	.word	0x20000008

08002b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_IncTick+0x20>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_IncTick+0x24>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4413      	add	r3, r2
 8002b88:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <HAL_IncTick+0x24>)
 8002b8a:	6013      	str	r3, [r2, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	2000000c 	.word	0x2000000c
 8002b9c:	20001df8 	.word	0x20001df8

08002ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <HAL_GetTick+0x14>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20001df8 	.word	0x20001df8

08002bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bc0:	f7ff ffee 	bl	8002ba0 <HAL_GetTick>
 8002bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bd0:	d005      	beq.n	8002bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_Delay+0x44>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4413      	add	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bde:	bf00      	nop
 8002be0:	f7ff ffde 	bl	8002ba0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d8f7      	bhi.n	8002be0 <HAL_Delay+0x28>
  {
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	2000000c 	.word	0x2000000c

08002c00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <HAL_GetREVID+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0c1b      	lsrs	r3, r3, #16
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	5c001000 	.word	0x5c001000

08002c18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	609a      	str	r2, [r3, #8]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	609a      	str	r2, [r3, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3360      	adds	r3, #96	; 0x60
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	611a      	str	r2, [r3, #16]
}
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b087      	sub	sp, #28
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3360      	adds	r3, #96	; 0x60
 8002d02:	461a      	mov	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	601a      	str	r2, [r3, #0]
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3330      	adds	r3, #48	; 0x30
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	4413      	add	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	211f      	movs	r1, #31
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	0e9b      	lsrs	r3, r3, #26
 8002d60:	f003 011f 	and.w	r1, r3, #31
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3314      	adds	r3, #20
 8002d90:	461a      	mov	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	0e5b      	lsrs	r3, r3, #25
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	4413      	add	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	0d1b      	lsrs	r3, r3, #20
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	2107      	movs	r1, #7
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	401a      	ands	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	0d1b      	lsrs	r3, r3, #20
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df0:	43db      	mvns	r3, r3
 8002df2:	401a      	ands	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 0318 	and.w	r3, r3, #24
 8002dfa:	4908      	ldr	r1, [pc, #32]	; (8002e1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002dfc:	40d9      	lsrs	r1, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	400b      	ands	r3, r1
 8002e02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e06:	431a      	orrs	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002e0e:	bf00      	nop
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	000fffff 	.word	0x000fffff

08002e20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6093      	str	r3, [r2, #8]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	5fffffc0 	.word	0x5fffffc0

08002e44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e58:	d101      	bne.n	8002e5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <LL_ADC_EnableInternalRegulator+0x24>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	6fffffc0 	.word	0x6fffffc0

08002e94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ea8:	d101      	bne.n	8002eae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <LL_ADC_IsEnabled+0x18>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <LL_ADC_IsEnabled+0x1a>
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d101      	bne.n	8002efa <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d101      	bne.n	8002f20 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e18f      	b.n	800326a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7fd fc19 	bl	8000790 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff67 	bl	8002e44 <LL_ADC_IsDeepPowerDownEnabled>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff4d 	bl	8002e20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ff82 	bl	8002e94 <LL_ADC_IsInternalRegulatorEnabled>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d114      	bne.n	8002fc0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff ff66 	bl	8002e6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fa0:	4b87      	ldr	r3, [pc, #540]	; (80031c0 <HAL_ADC_Init+0x290>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	4a87      	ldr	r2, [pc, #540]	; (80031c4 <HAL_ADC_Init+0x294>)
 8002fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fac:	099b      	lsrs	r3, r3, #6
 8002fae:	3301      	adds	r3, #1
 8002fb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fb2:	e002      	b.n	8002fba <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f9      	bne.n	8002fb4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff65 	bl	8002e94 <LL_ADC_IsInternalRegulatorEnabled>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10d      	bne.n	8002fec <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd4:	f043 0210 	orr.w	r2, r3, #16
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff76 	bl	8002ee2 <LL_ADC_REG_IsConversionOngoing>
 8002ff6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b00      	cmp	r3, #0
 8003002:	f040 8129 	bne.w	8003258 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f040 8125 	bne.w	8003258 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003012:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003016:	f043 0202 	orr.w	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ff4a 	bl	8002ebc <LL_ADC_IsEnabled>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d136      	bne.n	800309c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a65      	ldr	r2, [pc, #404]	; (80031c8 <HAL_ADC_Init+0x298>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d004      	beq.n	8003042 <HAL_ADC_Init+0x112>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a63      	ldr	r2, [pc, #396]	; (80031cc <HAL_ADC_Init+0x29c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10e      	bne.n	8003060 <HAL_ADC_Init+0x130>
 8003042:	4861      	ldr	r0, [pc, #388]	; (80031c8 <HAL_ADC_Init+0x298>)
 8003044:	f7ff ff3a 	bl	8002ebc <LL_ADC_IsEnabled>
 8003048:	4604      	mov	r4, r0
 800304a:	4860      	ldr	r0, [pc, #384]	; (80031cc <HAL_ADC_Init+0x29c>)
 800304c:	f7ff ff36 	bl	8002ebc <LL_ADC_IsEnabled>
 8003050:	4603      	mov	r3, r0
 8003052:	4323      	orrs	r3, r4
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e008      	b.n	8003072 <HAL_ADC_Init+0x142>
 8003060:	485b      	ldr	r0, [pc, #364]	; (80031d0 <HAL_ADC_Init+0x2a0>)
 8003062:	f7ff ff2b 	bl	8002ebc <LL_ADC_IsEnabled>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d012      	beq.n	800309c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a53      	ldr	r2, [pc, #332]	; (80031c8 <HAL_ADC_Init+0x298>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d004      	beq.n	800308a <HAL_ADC_Init+0x15a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a51      	ldr	r2, [pc, #324]	; (80031cc <HAL_ADC_Init+0x29c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <HAL_ADC_Init+0x15e>
 800308a:	4a52      	ldr	r2, [pc, #328]	; (80031d4 <HAL_ADC_Init+0x2a4>)
 800308c:	e000      	b.n	8003090 <HAL_ADC_Init+0x160>
 800308e:	4a52      	ldr	r2, [pc, #328]	; (80031d8 <HAL_ADC_Init+0x2a8>)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f7ff fdbe 	bl	8002c18 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800309c:	f7ff fdb0 	bl	8002c00 <HAL_GetREVID>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d914      	bls.n	80030d4 <HAL_ADC_Init+0x1a4>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b10      	cmp	r3, #16
 80030b0:	d110      	bne.n	80030d4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7d5b      	ldrb	r3, [r3, #21]
 80030b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030bc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	7f1b      	ldrb	r3, [r3, #28]
 80030c8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030ca:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030cc:	f043 030c 	orr.w	r3, r3, #12
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	e00d      	b.n	80030f0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7d5b      	ldrb	r3, [r3, #21]
 80030d8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030de:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030e4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	7f1b      	ldrb	r3, [r3, #28]
 80030ea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7f1b      	ldrb	r3, [r3, #28]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	045b      	lsls	r3, r3, #17
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <HAL_ADC_Init+0x2ac>)
 800312a:	4013      	ands	r3, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	69b9      	ldr	r1, [r7, #24]
 8003132:	430b      	orrs	r3, r1
 8003134:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fed1 	bl	8002ee2 <LL_ADC_REG_IsConversionOngoing>
 8003140:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fede 	bl	8002f08 <LL_ADC_INJ_IsConversionOngoing>
 800314c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d15f      	bne.n	8003214 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d15c      	bne.n	8003214 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7d1b      	ldrb	r3, [r3, #20]
 800315e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <HAL_ADC_Init+0x2b0>)
 8003170:	4013      	ands	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	69b9      	ldr	r1, [r7, #24]
 8003178:	430b      	orrs	r3, r1
 800317a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003182:	2b01      	cmp	r3, #1
 8003184:	d130      	bne.n	80031e8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <HAL_ADC_Init+0x2b4>)
 8003194:	4013      	ands	r3, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800319a:	3a01      	subs	r2, #1
 800319c:	0411      	lsls	r1, r2, #16
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031a2:	4311      	orrs	r1, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031a8:	4311      	orrs	r1, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031ae:	430a      	orrs	r2, r1
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	611a      	str	r2, [r3, #16]
 80031bc:	e01c      	b.n	80031f8 <HAL_ADC_Init+0x2c8>
 80031be:	bf00      	nop
 80031c0:	20000000 	.word	0x20000000
 80031c4:	053e2d63 	.word	0x053e2d63
 80031c8:	40022000 	.word	0x40022000
 80031cc:	40022100 	.word	0x40022100
 80031d0:	58026000 	.word	0x58026000
 80031d4:	40022300 	.word	0x40022300
 80031d8:	58026300 	.word	0x58026300
 80031dc:	fff0c003 	.word	0xfff0c003
 80031e0:	ffffbffc 	.word	0xffffbffc
 80031e4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fb80 	bl	8003914 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d10c      	bne.n	8003236 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f023 010f 	bic.w	r1, r3, #15
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	1e5a      	subs	r2, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
 8003234:	e007      	b.n	8003246 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 020f 	bic.w	r2, r2, #15
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324a:	f023 0303 	bic.w	r3, r3, #3
 800324e:	f043 0201 	orr.w	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
 8003256:	e007      	b.n	8003268 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	f043 0210 	orr.w	r2, r3, #16
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003268:	7ffb      	ldrb	r3, [r7, #31]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3724      	adds	r7, #36	; 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd90      	pop	{r4, r7, pc}
 8003272:	bf00      	nop

08003274 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b0a1      	sub	sp, #132	; 0x84
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4a9d      	ldr	r2, [pc, #628]	; (8003504 <HAL_ADC_ConfigChannel+0x290>)
 800328e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x2a>
 800329a:	2302      	movs	r3, #2
 800329c:	e321      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x66e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fe19 	bl	8002ee2 <LL_ADC_REG_IsConversionOngoing>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 8306 	bne.w	80038c4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d108      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x62>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2201      	movs	r2, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	e016      	b.n	8003304 <HAL_ADC_ConfigChannel+0x90>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032e6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80032ee:	2320      	movs	r3, #32
 80032f0:	e003      	b.n	80032fa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80032f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032f4:	fab3 f383 	clz	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2201      	movs	r2, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	69d1      	ldr	r1, [r2, #28]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6812      	ldr	r2, [r2, #0]
 800330e:	430b      	orrs	r3, r1
 8003310:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	f7ff fd02 	bl	8002d28 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fdda 	bl	8002ee2 <LL_ADC_REG_IsConversionOngoing>
 800332e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fde7 	bl	8002f08 <LL_ADC_INJ_IsConversionOngoing>
 800333a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800333c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 80b3 	bne.w	80034aa <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 80af 	bne.w	80034aa <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6819      	ldr	r1, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	461a      	mov	r2, r3
 800335a:	f7ff fd11 	bl	8002d80 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800335e:	4b6a      	ldr	r3, [pc, #424]	; (8003508 <HAL_ADC_ConfigChannel+0x294>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800336a:	d10b      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x110>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	e01d      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x14c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10b      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x136>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	e00a      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x14c>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	089b      	lsrs	r3, r3, #2
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d027      	beq.n	800341a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6919      	ldr	r1, [r3, #16]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033d8:	f7ff fc52 	bl	8002c80 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6919      	ldr	r1, [r3, #16]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	7e5b      	ldrb	r3, [r3, #25]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d102      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x17e>
 80033ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80033f0:	e000      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x180>
 80033f2:	2300      	movs	r3, #0
 80033f4:	461a      	mov	r2, r3
 80033f6:	f7ff fc7c 	bl	8002cf2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6919      	ldr	r1, [r3, #16]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	7e1b      	ldrb	r3, [r3, #24]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d102      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x19c>
 800340a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800340e:	e000      	b.n	8003412 <HAL_ADC_ConfigChannel+0x19e>
 8003410:	2300      	movs	r3, #0
 8003412:	461a      	mov	r2, r3
 8003414:	f7ff fc54 	bl	8002cc0 <LL_ADC_SetDataRightShift>
 8003418:	e047      	b.n	80034aa <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003420:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	069b      	lsls	r3, r3, #26
 800342a:	429a      	cmp	r2, r3
 800342c:	d107      	bne.n	800343e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800343c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003444:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	069b      	lsls	r3, r3, #26
 800344e:	429a      	cmp	r2, r3
 8003450:	d107      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003460:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003468:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	069b      	lsls	r3, r3, #26
 8003472:	429a      	cmp	r2, r3
 8003474:	d107      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003484:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	069b      	lsls	r3, r3, #26
 8003496:	429a      	cmp	r2, r3
 8003498:	d107      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034a8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fd04 	bl	8002ebc <LL_ADC_IsEnabled>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 820d 	bne.w	80038d6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	461a      	mov	r2, r3
 80034ca:	f7ff fc85 	bl	8002dd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	4a0c      	ldr	r2, [pc, #48]	; (8003504 <HAL_ADC_ConfigChannel+0x290>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	f040 8133 	bne.w	8003740 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d110      	bne.n	800350c <HAL_ADC_ConfigChannel+0x298>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	0e9b      	lsrs	r3, r3, #26
 80034f0:	3301      	adds	r3, #1
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2b09      	cmp	r3, #9
 80034f8:	bf94      	ite	ls
 80034fa:	2301      	movls	r3, #1
 80034fc:	2300      	movhi	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	e01e      	b.n	8003540 <HAL_ADC_ConfigChannel+0x2cc>
 8003502:	bf00      	nop
 8003504:	47ff0000 	.word	0x47ff0000
 8003508:	5c001000 	.word	0x5c001000
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800351a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800351e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003524:	2320      	movs	r3, #32
 8003526:	e003      	b.n	8003530 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3301      	adds	r3, #1
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2b09      	cmp	r3, #9
 8003538:	bf94      	ite	ls
 800353a:	2301      	movls	r3, #1
 800353c:	2300      	movhi	r3, #0
 800353e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003540:	2b00      	cmp	r3, #0
 8003542:	d079      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800354c:	2b00      	cmp	r3, #0
 800354e:	d107      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x2ec>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0e9b      	lsrs	r3, r3, #26
 8003556:	3301      	adds	r3, #1
 8003558:	069b      	lsls	r3, r3, #26
 800355a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800355e:	e015      	b.n	800358c <HAL_ADC_ConfigChannel+0x318>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800356e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003570:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003578:	2320      	movs	r3, #32
 800357a:	e003      	b.n	8003584 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800357c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	3301      	adds	r3, #1
 8003586:	069b      	lsls	r3, r3, #26
 8003588:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x338>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	0e9b      	lsrs	r3, r3, #26
 800359e:	3301      	adds	r3, #1
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	e017      	b.n	80035dc <HAL_ADC_ConfigChannel+0x368>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80035ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80035be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80035c4:	2320      	movs	r3, #32
 80035c6:	e003      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80035c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	2101      	movs	r1, #1
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	ea42 0103 	orr.w	r1, r2, r3
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x38e>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	0e9b      	lsrs	r3, r3, #26
 80035f2:	3301      	adds	r3, #1
 80035f4:	f003 021f 	and.w	r2, r3, #31
 80035f8:	4613      	mov	r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4413      	add	r3, r2
 80035fe:	051b      	lsls	r3, r3, #20
 8003600:	e018      	b.n	8003634 <HAL_ADC_ConfigChannel+0x3c0>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800361a:	2320      	movs	r3, #32
 800361c:	e003      	b.n	8003626 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	fab3 f383 	clz	r3, r3
 8003624:	b2db      	uxtb	r3, r3
 8003626:	3301      	adds	r3, #1
 8003628:	f003 021f 	and.w	r2, r3, #31
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003634:	430b      	orrs	r3, r1
 8003636:	e07e      	b.n	8003736 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003640:	2b00      	cmp	r3, #0
 8003642:	d107      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x3e0>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0e9b      	lsrs	r3, r3, #26
 800364a:	3301      	adds	r3, #1
 800364c:	069b      	lsls	r3, r3, #26
 800364e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003652:	e015      	b.n	8003680 <HAL_ADC_ConfigChannel+0x40c>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800366c:	2320      	movs	r3, #32
 800366e:	e003      	b.n	8003678 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3301      	adds	r3, #1
 800367a:	069b      	lsls	r3, r3, #26
 800367c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x42c>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	0e9b      	lsrs	r3, r3, #26
 8003692:	3301      	adds	r3, #1
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	e017      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x45c>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	61bb      	str	r3, [r7, #24]
  return result;
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80036b8:	2320      	movs	r3, #32
 80036ba:	e003      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	2101      	movs	r1, #1
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	ea42 0103 	orr.w	r1, r2, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x488>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0e9b      	lsrs	r3, r3, #26
 80036e6:	3301      	adds	r3, #1
 80036e8:	f003 021f 	and.w	r2, r3, #31
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	3b1e      	subs	r3, #30
 80036f4:	051b      	lsls	r3, r3, #20
 80036f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036fa:	e01b      	b.n	8003734 <HAL_ADC_ConfigChannel+0x4c0>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	fa93 f3a3 	rbit	r3, r3
 8003708:	60fb      	str	r3, [r7, #12]
  return result;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003714:	2320      	movs	r3, #32
 8003716:	e003      	b.n	8003720 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	3301      	adds	r3, #1
 8003722:	f003 021f 	and.w	r2, r3, #31
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	3b1e      	subs	r3, #30
 800372e:	051b      	lsls	r3, r3, #20
 8003730:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003734:	430b      	orrs	r3, r1
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	6892      	ldr	r2, [r2, #8]
 800373a:	4619      	mov	r1, r3
 800373c:	f7ff fb20 	bl	8002d80 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f280 80c6 	bge.w	80038d6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a67      	ldr	r2, [pc, #412]	; (80038ec <HAL_ADC_ConfigChannel+0x678>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_ADC_ConfigChannel+0x4ea>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a65      	ldr	r2, [pc, #404]	; (80038f0 <HAL_ADC_ConfigChannel+0x67c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x4ee>
 800375e:	4b65      	ldr	r3, [pc, #404]	; (80038f4 <HAL_ADC_ConfigChannel+0x680>)
 8003760:	e000      	b.n	8003764 <HAL_ADC_ConfigChannel+0x4f0>
 8003762:	4b65      	ldr	r3, [pc, #404]	; (80038f8 <HAL_ADC_ConfigChannel+0x684>)
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fa7d 	bl	8002c64 <LL_ADC_GetCommonPathInternalCh>
 800376a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a5e      	ldr	r2, [pc, #376]	; (80038ec <HAL_ADC_ConfigChannel+0x678>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x50c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a5d      	ldr	r2, [pc, #372]	; (80038f0 <HAL_ADC_ConfigChannel+0x67c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d10e      	bne.n	800379e <HAL_ADC_ConfigChannel+0x52a>
 8003780:	485a      	ldr	r0, [pc, #360]	; (80038ec <HAL_ADC_ConfigChannel+0x678>)
 8003782:	f7ff fb9b 	bl	8002ebc <LL_ADC_IsEnabled>
 8003786:	4604      	mov	r4, r0
 8003788:	4859      	ldr	r0, [pc, #356]	; (80038f0 <HAL_ADC_ConfigChannel+0x67c>)
 800378a:	f7ff fb97 	bl	8002ebc <LL_ADC_IsEnabled>
 800378e:	4603      	mov	r3, r0
 8003790:	4323      	orrs	r3, r4
 8003792:	2b00      	cmp	r3, #0
 8003794:	bf0c      	ite	eq
 8003796:	2301      	moveq	r3, #1
 8003798:	2300      	movne	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	e008      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x53c>
 800379e:	4857      	ldr	r0, [pc, #348]	; (80038fc <HAL_ADC_ConfigChannel+0x688>)
 80037a0:	f7ff fb8c 	bl	8002ebc <LL_ADC_IsEnabled>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf0c      	ite	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	2300      	movne	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d07d      	beq.n	80038b0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a51      	ldr	r2, [pc, #324]	; (8003900 <HAL_ADC_ConfigChannel+0x68c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d130      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x5ac>
 80037be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d12b      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a4b      	ldr	r2, [pc, #300]	; (80038fc <HAL_ADC_ConfigChannel+0x688>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	f040 8081 	bne.w	80038d6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a44      	ldr	r2, [pc, #272]	; (80038ec <HAL_ADC_ConfigChannel+0x678>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_ADC_ConfigChannel+0x574>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a43      	ldr	r2, [pc, #268]	; (80038f0 <HAL_ADC_ConfigChannel+0x67c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d101      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x578>
 80037e8:	4a42      	ldr	r2, [pc, #264]	; (80038f4 <HAL_ADC_ConfigChannel+0x680>)
 80037ea:	e000      	b.n	80037ee <HAL_ADC_ConfigChannel+0x57a>
 80037ec:	4a42      	ldr	r2, [pc, #264]	; (80038f8 <HAL_ADC_ConfigChannel+0x684>)
 80037ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037f4:	4619      	mov	r1, r3
 80037f6:	4610      	mov	r0, r2
 80037f8:	f7ff fa21 	bl	8002c3e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037fc:	4b41      	ldr	r3, [pc, #260]	; (8003904 <HAL_ADC_ConfigChannel+0x690>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	4a41      	ldr	r2, [pc, #260]	; (8003908 <HAL_ADC_ConfigChannel+0x694>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	3301      	adds	r3, #1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003810:	e002      	b.n	8003818 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3b01      	subs	r3, #1
 8003816:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f9      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800381e:	e05a      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a39      	ldr	r2, [pc, #228]	; (800390c <HAL_ADC_ConfigChannel+0x698>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d11e      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x5f4>
 800382a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d119      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a30      	ldr	r2, [pc, #192]	; (80038fc <HAL_ADC_ConfigChannel+0x688>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d14b      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a2a      	ldr	r2, [pc, #168]	; (80038ec <HAL_ADC_ConfigChannel+0x678>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d004      	beq.n	8003852 <HAL_ADC_ConfigChannel+0x5de>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a28      	ldr	r2, [pc, #160]	; (80038f0 <HAL_ADC_ConfigChannel+0x67c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d101      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x5e2>
 8003852:	4a28      	ldr	r2, [pc, #160]	; (80038f4 <HAL_ADC_ConfigChannel+0x680>)
 8003854:	e000      	b.n	8003858 <HAL_ADC_ConfigChannel+0x5e4>
 8003856:	4a28      	ldr	r2, [pc, #160]	; (80038f8 <HAL_ADC_ConfigChannel+0x684>)
 8003858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f7ff f9ec 	bl	8002c3e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003866:	e036      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a28      	ldr	r2, [pc, #160]	; (8003910 <HAL_ADC_ConfigChannel+0x69c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d131      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x662>
 8003872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d12c      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1e      	ldr	r2, [pc, #120]	; (80038fc <HAL_ADC_ConfigChannel+0x688>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d127      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a18      	ldr	r2, [pc, #96]	; (80038ec <HAL_ADC_ConfigChannel+0x678>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d004      	beq.n	800389a <HAL_ADC_ConfigChannel+0x626>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <HAL_ADC_ConfigChannel+0x67c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d101      	bne.n	800389e <HAL_ADC_ConfigChannel+0x62a>
 800389a:	4a16      	ldr	r2, [pc, #88]	; (80038f4 <HAL_ADC_ConfigChannel+0x680>)
 800389c:	e000      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x62c>
 800389e:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <HAL_ADC_ConfigChannel+0x684>)
 80038a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038a6:	4619      	mov	r1, r3
 80038a8:	4610      	mov	r0, r2
 80038aa:	f7ff f9c8 	bl	8002c3e <LL_ADC_SetCommonPathInternalCh>
 80038ae:	e012      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	f043 0220 	orr.w	r2, r3, #32
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80038c2:	e008      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80038de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3784      	adds	r7, #132	; 0x84
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd90      	pop	{r4, r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40022000 	.word	0x40022000
 80038f0:	40022100 	.word	0x40022100
 80038f4:	40022300 	.word	0x40022300
 80038f8:	58026300 	.word	0x58026300
 80038fc:	58026000 	.word	0x58026000
 8003900:	cb840000 	.word	0xcb840000
 8003904:	20000000 	.word	0x20000000
 8003908:	053e2d63 	.word	0x053e2d63
 800390c:	c7520000 	.word	0xc7520000
 8003910:	cfb80000 	.word	0xcfb80000

08003914 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a79      	ldr	r2, [pc, #484]	; (8003b08 <ADC_ConfigureBoostMode+0x1f4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <ADC_ConfigureBoostMode+0x1c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a78      	ldr	r2, [pc, #480]	; (8003b0c <ADC_ConfigureBoostMode+0x1f8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d109      	bne.n	8003944 <ADC_ConfigureBoostMode+0x30>
 8003930:	4b77      	ldr	r3, [pc, #476]	; (8003b10 <ADC_ConfigureBoostMode+0x1fc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e008      	b.n	8003956 <ADC_ConfigureBoostMode+0x42>
 8003944:	4b73      	ldr	r3, [pc, #460]	; (8003b14 <ADC_ConfigureBoostMode+0x200>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf14      	ite	ne
 8003950:	2301      	movne	r3, #1
 8003952:	2300      	moveq	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01c      	beq.n	8003994 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800395a:	f006 fe25 	bl	800a5a8 <HAL_RCC_GetHCLKFreq>
 800395e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003968:	d010      	beq.n	800398c <ADC_ConfigureBoostMode+0x78>
 800396a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800396e:	d871      	bhi.n	8003a54 <ADC_ConfigureBoostMode+0x140>
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003974:	d002      	beq.n	800397c <ADC_ConfigureBoostMode+0x68>
 8003976:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800397a:	d16b      	bne.n	8003a54 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	60fb      	str	r3, [r7, #12]
        break;
 800398a:	e066      	b.n	8003a5a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	60fb      	str	r3, [r7, #12]
        break;
 8003992:	e062      	b.n	8003a5a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003994:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003998:	f007 fda8 	bl	800b4ec <HAL_RCCEx_GetPeriphCLKFreq>
 800399c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80039a6:	d051      	beq.n	8003a4c <ADC_ConfigureBoostMode+0x138>
 80039a8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80039ac:	d854      	bhi.n	8003a58 <ADC_ConfigureBoostMode+0x144>
 80039ae:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80039b2:	d047      	beq.n	8003a44 <ADC_ConfigureBoostMode+0x130>
 80039b4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80039b8:	d84e      	bhi.n	8003a58 <ADC_ConfigureBoostMode+0x144>
 80039ba:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80039be:	d03d      	beq.n	8003a3c <ADC_ConfigureBoostMode+0x128>
 80039c0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80039c4:	d848      	bhi.n	8003a58 <ADC_ConfigureBoostMode+0x144>
 80039c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ca:	d033      	beq.n	8003a34 <ADC_ConfigureBoostMode+0x120>
 80039cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039d0:	d842      	bhi.n	8003a58 <ADC_ConfigureBoostMode+0x144>
 80039d2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039d6:	d029      	beq.n	8003a2c <ADC_ConfigureBoostMode+0x118>
 80039d8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039dc:	d83c      	bhi.n	8003a58 <ADC_ConfigureBoostMode+0x144>
 80039de:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039e2:	d01a      	beq.n	8003a1a <ADC_ConfigureBoostMode+0x106>
 80039e4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039e8:	d836      	bhi.n	8003a58 <ADC_ConfigureBoostMode+0x144>
 80039ea:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039ee:	d014      	beq.n	8003a1a <ADC_ConfigureBoostMode+0x106>
 80039f0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039f4:	d830      	bhi.n	8003a58 <ADC_ConfigureBoostMode+0x144>
 80039f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fa:	d00e      	beq.n	8003a1a <ADC_ConfigureBoostMode+0x106>
 80039fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a00:	d82a      	bhi.n	8003a58 <ADC_ConfigureBoostMode+0x144>
 8003a02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a06:	d008      	beq.n	8003a1a <ADC_ConfigureBoostMode+0x106>
 8003a08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a0c:	d824      	bhi.n	8003a58 <ADC_ConfigureBoostMode+0x144>
 8003a0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a12:	d002      	beq.n	8003a1a <ADC_ConfigureBoostMode+0x106>
 8003a14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a18:	d11e      	bne.n	8003a58 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	0c9b      	lsrs	r3, r3, #18
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a28:	60fb      	str	r3, [r7, #12]
        break;
 8003a2a:	e016      	b.n	8003a5a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	60fb      	str	r3, [r7, #12]
        break;
 8003a32:	e012      	b.n	8003a5a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	60fb      	str	r3, [r7, #12]
        break;
 8003a3a:	e00e      	b.n	8003a5a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	099b      	lsrs	r3, r3, #6
 8003a40:	60fb      	str	r3, [r7, #12]
        break;
 8003a42:	e00a      	b.n	8003a5a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	09db      	lsrs	r3, r3, #7
 8003a48:	60fb      	str	r3, [r7, #12]
        break;
 8003a4a:	e006      	b.n	8003a5a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	60fb      	str	r3, [r7, #12]
        break;
 8003a52:	e002      	b.n	8003a5a <ADC_ConfigureBoostMode+0x146>
        break;
 8003a54:	bf00      	nop
 8003a56:	e000      	b.n	8003a5a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003a58:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003a5a:	f7ff f8d1 	bl	8002c00 <HAL_GetREVID>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d815      	bhi.n	8003a94 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4a2b      	ldr	r2, [pc, #172]	; (8003b18 <ADC_ConfigureBoostMode+0x204>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d908      	bls.n	8003a82 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a80:	e03e      	b.n	8003b00 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a90:	609a      	str	r2, [r3, #8]
}
 8003a92:	e035      	b.n	8003b00 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	085b      	lsrs	r3, r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a1f      	ldr	r2, [pc, #124]	; (8003b1c <ADC_ConfigureBoostMode+0x208>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d808      	bhi.n	8003ab4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ab0:	609a      	str	r2, [r3, #8]
}
 8003ab2:	e025      	b.n	8003b00 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a1a      	ldr	r2, [pc, #104]	; (8003b20 <ADC_ConfigureBoostMode+0x20c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d80a      	bhi.n	8003ad2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ace:	609a      	str	r2, [r3, #8]
}
 8003ad0:	e016      	b.n	8003b00 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <ADC_ConfigureBoostMode+0x210>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d80a      	bhi.n	8003af0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aec:	609a      	str	r2, [r3, #8]
}
 8003aee:	e007      	b.n	8003b00 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003afe:	609a      	str	r2, [r3, #8]
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40022000 	.word	0x40022000
 8003b0c:	40022100 	.word	0x40022100
 8003b10:	40022300 	.word	0x40022300
 8003b14:	58026300 	.word	0x58026300
 8003b18:	01312d00 	.word	0x01312d00
 8003b1c:	005f5e10 	.word	0x005f5e10
 8003b20:	00bebc20 	.word	0x00bebc20
 8003b24:	017d7840 	.word	0x017d7840

08003b28 <LL_ADC_IsEnabled>:
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <LL_ADC_IsEnabled+0x18>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <LL_ADC_IsEnabled+0x1a>
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <LL_ADC_REG_IsConversionOngoing>:
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d101      	bne.n	8003b66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b74:	b590      	push	{r4, r7, lr}
 8003b76:	b09f      	sub	sp, #124	; 0x7c
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e0be      	b.n	8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a5c      	ldr	r2, [pc, #368]	; (8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d102      	bne.n	8003bb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003bac:	4b5b      	ldr	r3, [pc, #364]	; (8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	e001      	b.n	8003bb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10b      	bne.n	8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	f043 0220 	orr.w	r2, r3, #32
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e09d      	b.n	8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff ffb9 	bl	8003b4e <LL_ADC_REG_IsConversionOngoing>
 8003bdc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ffb3 	bl	8003b4e <LL_ADC_REG_IsConversionOngoing>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d17f      	bne.n	8003cee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d17c      	bne.n	8003cee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a47      	ldr	r2, [pc, #284]	; (8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d004      	beq.n	8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a46      	ldr	r2, [pc, #280]	; (8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d101      	bne.n	8003c0c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003c08:	4b45      	ldr	r3, [pc, #276]	; (8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c0a:	e000      	b.n	8003c0e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003c0c:	4b45      	ldr	r3, [pc, #276]	; (8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c0e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d039      	beq.n	8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c28:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a3a      	ldr	r2, [pc, #232]	; (8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d004      	beq.n	8003c3e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a38      	ldr	r2, [pc, #224]	; (8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d10e      	bne.n	8003c5c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c3e:	4836      	ldr	r0, [pc, #216]	; (8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c40:	f7ff ff72 	bl	8003b28 <LL_ADC_IsEnabled>
 8003c44:	4604      	mov	r4, r0
 8003c46:	4835      	ldr	r0, [pc, #212]	; (8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c48:	f7ff ff6e 	bl	8003b28 <LL_ADC_IsEnabled>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4323      	orrs	r3, r4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	e008      	b.n	8003c6e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003c5c:	4832      	ldr	r0, [pc, #200]	; (8003d28 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003c5e:	f7ff ff63 	bl	8003b28 <LL_ADC_IsEnabled>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d047      	beq.n	8003d02 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	4b2d      	ldr	r3, [pc, #180]	; (8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	6811      	ldr	r1, [r2, #0]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	6892      	ldr	r2, [r2, #8]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	431a      	orrs	r2, r3
 8003c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c88:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c8a:	e03a      	b.n	8003d02 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c96:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	; (8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10e      	bne.n	8003cca <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003cac:	481a      	ldr	r0, [pc, #104]	; (8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cae:	f7ff ff3b 	bl	8003b28 <LL_ADC_IsEnabled>
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	4819      	ldr	r0, [pc, #100]	; (8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cb6:	f7ff ff37 	bl	8003b28 <LL_ADC_IsEnabled>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4323      	orrs	r3, r4
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	bf0c      	ite	eq
 8003cc2:	2301      	moveq	r3, #1
 8003cc4:	2300      	movne	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	e008      	b.n	8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003cca:	4817      	ldr	r0, [pc, #92]	; (8003d28 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ccc:	f7ff ff2c 	bl	8003b28 <LL_ADC_IsEnabled>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	bf0c      	ite	eq
 8003cd6:	2301      	moveq	r3, #1
 8003cd8:	2300      	movne	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d010      	beq.n	8003d02 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cec:	e009      	b.n	8003d02 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	f043 0220 	orr.w	r2, r3, #32
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003d00:	e000      	b.n	8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d02:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d0c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	377c      	adds	r7, #124	; 0x7c
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd90      	pop	{r4, r7, pc}
 8003d18:	40022000 	.word	0x40022000
 8003d1c:	40022100 	.word	0x40022100
 8003d20:	40022300 	.word	0x40022300
 8003d24:	58026300 	.word	0x58026300
 8003d28:	58026000 	.word	0x58026000
 8003d2c:	fffff0e0 	.word	0xfffff0e0

08003d30 <__NVIC_SetPriorityGrouping>:
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <__NVIC_SetPriorityGrouping+0x40>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <__NVIC_SetPriorityGrouping+0x44>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d5e:	4a04      	ldr	r2, [pc, #16]	; (8003d70 <__NVIC_SetPriorityGrouping+0x40>)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	60d3      	str	r3, [r2, #12]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	e000ed00 	.word	0xe000ed00
 8003d74:	05fa0000 	.word	0x05fa0000

08003d78 <__NVIC_GetPriorityGrouping>:
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <__NVIC_GetPriorityGrouping+0x18>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	0a1b      	lsrs	r3, r3, #8
 8003d82:	f003 0307 	and.w	r3, r3, #7
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000ed00 	.word	0xe000ed00

08003d94 <__NVIC_EnableIRQ>:
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	db0b      	blt.n	8003dbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	f003 021f 	and.w	r2, r3, #31
 8003dac:	4907      	ldr	r1, [pc, #28]	; (8003dcc <__NVIC_EnableIRQ+0x38>)
 8003dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	2001      	movs	r0, #1
 8003db6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	e000e100 	.word	0xe000e100

08003dd0 <__NVIC_SetPriority>:
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	6039      	str	r1, [r7, #0]
 8003dda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ddc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	db0a      	blt.n	8003dfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	490c      	ldr	r1, [pc, #48]	; (8003e1c <__NVIC_SetPriority+0x4c>)
 8003dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dee:	0112      	lsls	r2, r2, #4
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	440b      	add	r3, r1
 8003df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003df8:	e00a      	b.n	8003e10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	4908      	ldr	r1, [pc, #32]	; (8003e20 <__NVIC_SetPriority+0x50>)
 8003e00:	88fb      	ldrh	r3, [r7, #6]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	3b04      	subs	r3, #4
 8003e08:	0112      	lsls	r2, r2, #4
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	761a      	strb	r2, [r3, #24]
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	e000e100 	.word	0xe000e100
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <NVIC_EncodePriority>:
{
 8003e24:	b480      	push	{r7}
 8003e26:	b089      	sub	sp, #36	; 0x24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f1c3 0307 	rsb	r3, r3, #7
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	bf28      	it	cs
 8003e42:	2304      	movcs	r3, #4
 8003e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	2b06      	cmp	r3, #6
 8003e4c:	d902      	bls.n	8003e54 <NVIC_EncodePriority+0x30>
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	3b03      	subs	r3, #3
 8003e52:	e000      	b.n	8003e56 <NVIC_EncodePriority+0x32>
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43da      	mvns	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	401a      	ands	r2, r3
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	fa01 f303 	lsl.w	r3, r1, r3
 8003e76:	43d9      	mvns	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e7c:	4313      	orrs	r3, r2
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3724      	adds	r7, #36	; 0x24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e9c:	d301      	bcc.n	8003ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e00f      	b.n	8003ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <SysTick_Config+0x40>)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eaa:	210f      	movs	r1, #15
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eb0:	f7ff ff8e 	bl	8003dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <SysTick_Config+0x40>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eba:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <SysTick_Config+0x40>)
 8003ebc:	2207      	movs	r2, #7
 8003ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	e000e010 	.word	0xe000e010

08003ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff ff29 	bl	8003d30 <__NVIC_SetPriorityGrouping>
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	4603      	mov	r3, r0
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ef4:	f7ff ff40 	bl	8003d78 <__NVIC_GetPriorityGrouping>
 8003ef8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	6978      	ldr	r0, [r7, #20]
 8003f00:	f7ff ff90 	bl	8003e24 <NVIC_EncodePriority>
 8003f04:	4602      	mov	r2, r0
 8003f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff ff5f 	bl	8003dd0 <__NVIC_SetPriority>
}
 8003f12:	bf00      	nop
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	4603      	mov	r3, r0
 8003f22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff33 	bl	8003d94 <__NVIC_EnableIRQ>
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff ffa4 	bl	8003e8c <SysTick_Config>
 8003f44:	4603      	mov	r3, r0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003f54:	f3bf 8f5f 	dmb	sy
}
 8003f58:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003f5a:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <HAL_MPU_Disable+0x28>)
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	4a06      	ldr	r2, [pc, #24]	; (8003f78 <HAL_MPU_Disable+0x28>)
 8003f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f64:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_MPU_Disable+0x2c>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	605a      	str	r2, [r3, #4]
}
 8003f6c:	bf00      	nop
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	e000ed00 	.word	0xe000ed00
 8003f7c:	e000ed90 	.word	0xe000ed90

08003f80 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003f88:	4a0b      	ldr	r2, [pc, #44]	; (8003fb8 <HAL_MPU_Enable+0x38>)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003f92:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <HAL_MPU_Enable+0x3c>)
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <HAL_MPU_Enable+0x3c>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003f9e:	f3bf 8f4f 	dsb	sy
}
 8003fa2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fa4:	f3bf 8f6f 	isb	sy
}
 8003fa8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	e000ed90 	.word	0xe000ed90
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	785a      	ldrb	r2, [r3, #1]
 8003fcc:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <HAL_MPU_ConfigRegion+0x84>)
 8003fce:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d029      	beq.n	800402c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003fd8:	4a1a      	ldr	r2, [pc, #104]	; (8004044 <HAL_MPU_ConfigRegion+0x84>)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	7b1b      	ldrb	r3, [r3, #12]
 8003fe4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7adb      	ldrb	r3, [r3, #11]
 8003fea:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003fec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7a9b      	ldrb	r3, [r3, #10]
 8003ff2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ff4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7b5b      	ldrb	r3, [r3, #13]
 8003ffa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ffc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	7b9b      	ldrb	r3, [r3, #14]
 8004002:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004004:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	7bdb      	ldrb	r3, [r3, #15]
 800400a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800400c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	7a5b      	ldrb	r3, [r3, #9]
 8004012:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004014:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7a1b      	ldrb	r3, [r3, #8]
 800401a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800401c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004024:	4a07      	ldr	r2, [pc, #28]	; (8004044 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004026:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004028:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800402a:	e005      	b.n	8004038 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800402c:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_MPU_ConfigRegion+0x84>)
 800402e:	2200      	movs	r2, #0
 8004030:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004032:	4b04      	ldr	r3, [pc, #16]	; (8004044 <HAL_MPU_ConfigRegion+0x84>)
 8004034:	2200      	movs	r2, #0
 8004036:	611a      	str	r2, [r3, #16]
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000ed90 	.word	0xe000ed90

08004048 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e014      	b.n	8004084 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	791b      	ldrb	r3, [r3, #4]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d105      	bne.n	8004070 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fc fdee 	bl	8000c4c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	795b      	ldrb	r3, [r3, #5]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_DAC_ConfigChannel+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e11d      	b.n	80042e0 <HAL_DAC_ConfigChannel+0x254>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2202      	movs	r2, #2
 80040ae:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d174      	bne.n	80041a2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80040b8:	f7fe fd72 	bl	8002ba0 <HAL_GetTick>
 80040bc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d134      	bne.n	800412e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040c4:	e011      	b.n	80040ea <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80040c6:	f7fe fd6b 	bl	8002ba0 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d90a      	bls.n	80040ea <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f043 0208 	orr.w	r2, r3, #8
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2203      	movs	r2, #3
 80040e4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e0fa      	b.n	80042e0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f0:	4b7d      	ldr	r3, [pc, #500]	; (80042e8 <HAL_DAC_ConfigChannel+0x25c>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e6      	bne.n	80040c6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80040f8:	2001      	movs	r0, #1
 80040fa:	f7fe fd5d 	bl	8002bb8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	6992      	ldr	r2, [r2, #24]
 8004106:	641a      	str	r2, [r3, #64]	; 0x40
 8004108:	e01e      	b.n	8004148 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800410a:	f7fe fd49 	bl	8002ba0 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	d90a      	bls.n	800412e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f043 0208 	orr.w	r2, r3, #8
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2203      	movs	r2, #3
 8004128:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e0d8      	b.n	80042e0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004134:	2b00      	cmp	r3, #0
 8004136:	dbe8      	blt.n	800410a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004138:	2001      	movs	r0, #1
 800413a:	f7fe fd3d 	bl	8002bb8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	6992      	ldr	r2, [r2, #24]
 8004146:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004158:	fa01 f303 	lsl.w	r3, r1, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	ea02 0103 	and.w	r1, r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	69da      	ldr	r2, [r3, #28]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f003 0310 	and.w	r3, r3, #16
 800416c:	409a      	lsls	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	21ff      	movs	r1, #255	; 0xff
 8004184:	fa01 f303 	lsl.w	r3, r1, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	ea02 0103 	and.w	r1, r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	6a1a      	ldr	r2, [r3, #32]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	409a      	lsls	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d11d      	bne.n	80041e6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	221f      	movs	r2, #31
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4013      	ands	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ec:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2207      	movs	r2, #7
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4013      	ands	r3, r2
 8004200:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d102      	bne.n	8004210 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	e00f      	b.n	8004230 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d102      	bne.n	800421e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004218:	2301      	movs	r3, #1
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	e008      	b.n	8004230 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004226:	2301      	movs	r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
 800422a:	e001      	b.n	8004230 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800422c:	2300      	movs	r3, #0
 800422e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	4313      	orrs	r3, r2
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6819      	ldr	r1, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f003 0310 	and.w	r3, r3, #16
 8004266:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43da      	mvns	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	400a      	ands	r2, r1
 8004276:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f003 0310 	and.w	r3, r3, #16
 8004286:	f640 72fe 	movw	r2, #4094	; 0xffe
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43db      	mvns	r3, r3
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4013      	ands	r3, r2
 8004294:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6819      	ldr	r1, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	22c0      	movs	r2, #192	; 0xc0
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43da      	mvns	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	400a      	ands	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3720      	adds	r7, #32
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	20008000 	.word	0x20008000

080042ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80042f4:	f7fe fc54 	bl	8002ba0 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e316      	b.n	8004932 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a66      	ldr	r2, [pc, #408]	; (80044a4 <HAL_DMA_Init+0x1b8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d04a      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a65      	ldr	r2, [pc, #404]	; (80044a8 <HAL_DMA_Init+0x1bc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d045      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a63      	ldr	r2, [pc, #396]	; (80044ac <HAL_DMA_Init+0x1c0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d040      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a62      	ldr	r2, [pc, #392]	; (80044b0 <HAL_DMA_Init+0x1c4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d03b      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a60      	ldr	r2, [pc, #384]	; (80044b4 <HAL_DMA_Init+0x1c8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d036      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a5f      	ldr	r2, [pc, #380]	; (80044b8 <HAL_DMA_Init+0x1cc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d031      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a5d      	ldr	r2, [pc, #372]	; (80044bc <HAL_DMA_Init+0x1d0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d02c      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a5c      	ldr	r2, [pc, #368]	; (80044c0 <HAL_DMA_Init+0x1d4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d027      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a5a      	ldr	r2, [pc, #360]	; (80044c4 <HAL_DMA_Init+0x1d8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d022      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a59      	ldr	r2, [pc, #356]	; (80044c8 <HAL_DMA_Init+0x1dc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d01d      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a57      	ldr	r2, [pc, #348]	; (80044cc <HAL_DMA_Init+0x1e0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d018      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a56      	ldr	r2, [pc, #344]	; (80044d0 <HAL_DMA_Init+0x1e4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d013      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a54      	ldr	r2, [pc, #336]	; (80044d4 <HAL_DMA_Init+0x1e8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00e      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a53      	ldr	r2, [pc, #332]	; (80044d8 <HAL_DMA_Init+0x1ec>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d009      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a51      	ldr	r2, [pc, #324]	; (80044dc <HAL_DMA_Init+0x1f0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d004      	beq.n	80043a4 <HAL_DMA_Init+0xb8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a50      	ldr	r2, [pc, #320]	; (80044e0 <HAL_DMA_Init+0x1f4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d101      	bne.n	80043a8 <HAL_DMA_Init+0xbc>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <HAL_DMA_Init+0xbe>
 80043a8:	2300      	movs	r3, #0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 813b 	beq.w	8004626 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a37      	ldr	r2, [pc, #220]	; (80044a4 <HAL_DMA_Init+0x1b8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d04a      	beq.n	8004460 <HAL_DMA_Init+0x174>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a36      	ldr	r2, [pc, #216]	; (80044a8 <HAL_DMA_Init+0x1bc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d045      	beq.n	8004460 <HAL_DMA_Init+0x174>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a34      	ldr	r2, [pc, #208]	; (80044ac <HAL_DMA_Init+0x1c0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d040      	beq.n	8004460 <HAL_DMA_Init+0x174>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a33      	ldr	r2, [pc, #204]	; (80044b0 <HAL_DMA_Init+0x1c4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d03b      	beq.n	8004460 <HAL_DMA_Init+0x174>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a31      	ldr	r2, [pc, #196]	; (80044b4 <HAL_DMA_Init+0x1c8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d036      	beq.n	8004460 <HAL_DMA_Init+0x174>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a30      	ldr	r2, [pc, #192]	; (80044b8 <HAL_DMA_Init+0x1cc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d031      	beq.n	8004460 <HAL_DMA_Init+0x174>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a2e      	ldr	r2, [pc, #184]	; (80044bc <HAL_DMA_Init+0x1d0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d02c      	beq.n	8004460 <HAL_DMA_Init+0x174>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a2d      	ldr	r2, [pc, #180]	; (80044c0 <HAL_DMA_Init+0x1d4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d027      	beq.n	8004460 <HAL_DMA_Init+0x174>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a2b      	ldr	r2, [pc, #172]	; (80044c4 <HAL_DMA_Init+0x1d8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d022      	beq.n	8004460 <HAL_DMA_Init+0x174>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2a      	ldr	r2, [pc, #168]	; (80044c8 <HAL_DMA_Init+0x1dc>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d01d      	beq.n	8004460 <HAL_DMA_Init+0x174>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a28      	ldr	r2, [pc, #160]	; (80044cc <HAL_DMA_Init+0x1e0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d018      	beq.n	8004460 <HAL_DMA_Init+0x174>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a27      	ldr	r2, [pc, #156]	; (80044d0 <HAL_DMA_Init+0x1e4>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d013      	beq.n	8004460 <HAL_DMA_Init+0x174>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a25      	ldr	r2, [pc, #148]	; (80044d4 <HAL_DMA_Init+0x1e8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00e      	beq.n	8004460 <HAL_DMA_Init+0x174>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a24      	ldr	r2, [pc, #144]	; (80044d8 <HAL_DMA_Init+0x1ec>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d009      	beq.n	8004460 <HAL_DMA_Init+0x174>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a22      	ldr	r2, [pc, #136]	; (80044dc <HAL_DMA_Init+0x1f0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_DMA_Init+0x174>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a21      	ldr	r2, [pc, #132]	; (80044e0 <HAL_DMA_Init+0x1f4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d108      	bne.n	8004472 <HAL_DMA_Init+0x186>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	e007      	b.n	8004482 <HAL_DMA_Init+0x196>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0201 	bic.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004482:	e02f      	b.n	80044e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004484:	f7fe fb8c 	bl	8002ba0 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b05      	cmp	r3, #5
 8004490:	d928      	bls.n	80044e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2203      	movs	r2, #3
 800449c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e246      	b.n	8004932 <HAL_DMA_Init+0x646>
 80044a4:	40020010 	.word	0x40020010
 80044a8:	40020028 	.word	0x40020028
 80044ac:	40020040 	.word	0x40020040
 80044b0:	40020058 	.word	0x40020058
 80044b4:	40020070 	.word	0x40020070
 80044b8:	40020088 	.word	0x40020088
 80044bc:	400200a0 	.word	0x400200a0
 80044c0:	400200b8 	.word	0x400200b8
 80044c4:	40020410 	.word	0x40020410
 80044c8:	40020428 	.word	0x40020428
 80044cc:	40020440 	.word	0x40020440
 80044d0:	40020458 	.word	0x40020458
 80044d4:	40020470 	.word	0x40020470
 80044d8:	40020488 	.word	0x40020488
 80044dc:	400204a0 	.word	0x400204a0
 80044e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1c8      	bne.n	8004484 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4b83      	ldr	r3, [pc, #524]	; (800470c <HAL_DMA_Init+0x420>)
 80044fe:	4013      	ands	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800450a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004516:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004522:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	2b04      	cmp	r3, #4
 8004536:	d107      	bne.n	8004548 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	4313      	orrs	r3, r2
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004548:	4b71      	ldr	r3, [pc, #452]	; (8004710 <HAL_DMA_Init+0x424>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b71      	ldr	r3, [pc, #452]	; (8004714 <HAL_DMA_Init+0x428>)
 800454e:	4013      	ands	r3, r2
 8004550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004554:	d328      	bcc.n	80045a8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b28      	cmp	r3, #40	; 0x28
 800455c:	d903      	bls.n	8004566 <HAL_DMA_Init+0x27a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b2e      	cmp	r3, #46	; 0x2e
 8004564:	d917      	bls.n	8004596 <HAL_DMA_Init+0x2aa>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b3e      	cmp	r3, #62	; 0x3e
 800456c:	d903      	bls.n	8004576 <HAL_DMA_Init+0x28a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b42      	cmp	r3, #66	; 0x42
 8004574:	d90f      	bls.n	8004596 <HAL_DMA_Init+0x2aa>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b46      	cmp	r3, #70	; 0x46
 800457c:	d903      	bls.n	8004586 <HAL_DMA_Init+0x29a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b48      	cmp	r3, #72	; 0x48
 8004584:	d907      	bls.n	8004596 <HAL_DMA_Init+0x2aa>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b4e      	cmp	r3, #78	; 0x4e
 800458c:	d905      	bls.n	800459a <HAL_DMA_Init+0x2ae>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b52      	cmp	r3, #82	; 0x52
 8004594:	d801      	bhi.n	800459a <HAL_DMA_Init+0x2ae>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <HAL_DMA_Init+0x2b0>
 800459a:	2300      	movs	r3, #0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045a6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f023 0307 	bic.w	r3, r3, #7
 80045be:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d117      	bne.n	8004602 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00e      	beq.n	8004602 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f002 fb3f 	bl	8006c68 <DMA_CheckFifoParam>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2240      	movs	r2, #64	; 0x40
 80045f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e197      	b.n	8004932 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f002 fa7a 	bl	8006b04 <DMA_CalcBaseAndBitshift>
 8004610:	4603      	mov	r3, r0
 8004612:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	223f      	movs	r2, #63	; 0x3f
 800461e:	409a      	lsls	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	609a      	str	r2, [r3, #8]
 8004624:	e0cd      	b.n	80047c2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a3b      	ldr	r2, [pc, #236]	; (8004718 <HAL_DMA_Init+0x42c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d022      	beq.n	8004676 <HAL_DMA_Init+0x38a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a39      	ldr	r2, [pc, #228]	; (800471c <HAL_DMA_Init+0x430>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d01d      	beq.n	8004676 <HAL_DMA_Init+0x38a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a38      	ldr	r2, [pc, #224]	; (8004720 <HAL_DMA_Init+0x434>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d018      	beq.n	8004676 <HAL_DMA_Init+0x38a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a36      	ldr	r2, [pc, #216]	; (8004724 <HAL_DMA_Init+0x438>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <HAL_DMA_Init+0x38a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a35      	ldr	r2, [pc, #212]	; (8004728 <HAL_DMA_Init+0x43c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00e      	beq.n	8004676 <HAL_DMA_Init+0x38a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a33      	ldr	r2, [pc, #204]	; (800472c <HAL_DMA_Init+0x440>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d009      	beq.n	8004676 <HAL_DMA_Init+0x38a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a32      	ldr	r2, [pc, #200]	; (8004730 <HAL_DMA_Init+0x444>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d004      	beq.n	8004676 <HAL_DMA_Init+0x38a>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a30      	ldr	r2, [pc, #192]	; (8004734 <HAL_DMA_Init+0x448>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d101      	bne.n	800467a <HAL_DMA_Init+0x38e>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_DMA_Init+0x390>
 800467a:	2300      	movs	r3, #0
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8097 	beq.w	80047b0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a24      	ldr	r2, [pc, #144]	; (8004718 <HAL_DMA_Init+0x42c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d021      	beq.n	80046d0 <HAL_DMA_Init+0x3e4>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a22      	ldr	r2, [pc, #136]	; (800471c <HAL_DMA_Init+0x430>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01c      	beq.n	80046d0 <HAL_DMA_Init+0x3e4>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a21      	ldr	r2, [pc, #132]	; (8004720 <HAL_DMA_Init+0x434>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d017      	beq.n	80046d0 <HAL_DMA_Init+0x3e4>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1f      	ldr	r2, [pc, #124]	; (8004724 <HAL_DMA_Init+0x438>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d012      	beq.n	80046d0 <HAL_DMA_Init+0x3e4>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1e      	ldr	r2, [pc, #120]	; (8004728 <HAL_DMA_Init+0x43c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00d      	beq.n	80046d0 <HAL_DMA_Init+0x3e4>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1c      	ldr	r2, [pc, #112]	; (800472c <HAL_DMA_Init+0x440>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d008      	beq.n	80046d0 <HAL_DMA_Init+0x3e4>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1b      	ldr	r2, [pc, #108]	; (8004730 <HAL_DMA_Init+0x444>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d003      	beq.n	80046d0 <HAL_DMA_Init+0x3e4>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a19      	ldr	r2, [pc, #100]	; (8004734 <HAL_DMA_Init+0x448>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2202      	movs	r2, #2
 80046d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4b12      	ldr	r3, [pc, #72]	; (8004738 <HAL_DMA_Init+0x44c>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d020      	beq.n	800473c <HAL_DMA_Init+0x450>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b80      	cmp	r3, #128	; 0x80
 8004700:	d102      	bne.n	8004708 <HAL_DMA_Init+0x41c>
 8004702:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004706:	e01a      	b.n	800473e <HAL_DMA_Init+0x452>
 8004708:	2300      	movs	r3, #0
 800470a:	e018      	b.n	800473e <HAL_DMA_Init+0x452>
 800470c:	fe10803f 	.word	0xfe10803f
 8004710:	5c001000 	.word	0x5c001000
 8004714:	ffff0000 	.word	0xffff0000
 8004718:	58025408 	.word	0x58025408
 800471c:	5802541c 	.word	0x5802541c
 8004720:	58025430 	.word	0x58025430
 8004724:	58025444 	.word	0x58025444
 8004728:	58025458 	.word	0x58025458
 800472c:	5802546c 	.word	0x5802546c
 8004730:	58025480 	.word	0x58025480
 8004734:	58025494 	.word	0x58025494
 8004738:	fffe000f 	.word	0xfffe000f
 800473c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	68d2      	ldr	r2, [r2, #12]
 8004742:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004744:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800474c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004754:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800475c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004764:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800476c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	4b6e      	ldr	r3, [pc, #440]	; (800493c <HAL_DMA_Init+0x650>)
 8004784:	4413      	add	r3, r2
 8004786:	4a6e      	ldr	r2, [pc, #440]	; (8004940 <HAL_DMA_Init+0x654>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	091b      	lsrs	r3, r3, #4
 800478e:	009a      	lsls	r2, r3, #2
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f002 f9b5 	bl	8006b04 <DMA_CalcBaseAndBitshift>
 800479a:	4603      	mov	r3, r0
 800479c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	2201      	movs	r2, #1
 80047a8:	409a      	lsls	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	605a      	str	r2, [r3, #4]
 80047ae:	e008      	b.n	80047c2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2240      	movs	r2, #64	; 0x40
 80047b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2203      	movs	r2, #3
 80047ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e0b7      	b.n	8004932 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a5f      	ldr	r2, [pc, #380]	; (8004944 <HAL_DMA_Init+0x658>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d072      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a5d      	ldr	r2, [pc, #372]	; (8004948 <HAL_DMA_Init+0x65c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d06d      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a5c      	ldr	r2, [pc, #368]	; (800494c <HAL_DMA_Init+0x660>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d068      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a5a      	ldr	r2, [pc, #360]	; (8004950 <HAL_DMA_Init+0x664>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d063      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a59      	ldr	r2, [pc, #356]	; (8004954 <HAL_DMA_Init+0x668>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d05e      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a57      	ldr	r2, [pc, #348]	; (8004958 <HAL_DMA_Init+0x66c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d059      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a56      	ldr	r2, [pc, #344]	; (800495c <HAL_DMA_Init+0x670>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d054      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a54      	ldr	r2, [pc, #336]	; (8004960 <HAL_DMA_Init+0x674>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d04f      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a53      	ldr	r2, [pc, #332]	; (8004964 <HAL_DMA_Init+0x678>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d04a      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a51      	ldr	r2, [pc, #324]	; (8004968 <HAL_DMA_Init+0x67c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d045      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a50      	ldr	r2, [pc, #320]	; (800496c <HAL_DMA_Init+0x680>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d040      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a4e      	ldr	r2, [pc, #312]	; (8004970 <HAL_DMA_Init+0x684>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d03b      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a4d      	ldr	r2, [pc, #308]	; (8004974 <HAL_DMA_Init+0x688>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d036      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a4b      	ldr	r2, [pc, #300]	; (8004978 <HAL_DMA_Init+0x68c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d031      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a4a      	ldr	r2, [pc, #296]	; (800497c <HAL_DMA_Init+0x690>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d02c      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a48      	ldr	r2, [pc, #288]	; (8004980 <HAL_DMA_Init+0x694>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d027      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a47      	ldr	r2, [pc, #284]	; (8004984 <HAL_DMA_Init+0x698>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d022      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a45      	ldr	r2, [pc, #276]	; (8004988 <HAL_DMA_Init+0x69c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d01d      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a44      	ldr	r2, [pc, #272]	; (800498c <HAL_DMA_Init+0x6a0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d018      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a42      	ldr	r2, [pc, #264]	; (8004990 <HAL_DMA_Init+0x6a4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a41      	ldr	r2, [pc, #260]	; (8004994 <HAL_DMA_Init+0x6a8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00e      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a3f      	ldr	r2, [pc, #252]	; (8004998 <HAL_DMA_Init+0x6ac>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d009      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a3e      	ldr	r2, [pc, #248]	; (800499c <HAL_DMA_Init+0x6b0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_DMA_Init+0x5c6>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a3c      	ldr	r2, [pc, #240]	; (80049a0 <HAL_DMA_Init+0x6b4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d101      	bne.n	80048b6 <HAL_DMA_Init+0x5ca>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <HAL_DMA_Init+0x5cc>
 80048b6:	2300      	movs	r3, #0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d032      	beq.n	8004922 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f002 fa4f 	bl	8006d60 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b80      	cmp	r3, #128	; 0x80
 80048c8:	d102      	bne.n	80048d0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80048e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d010      	beq.n	8004910 <HAL_DMA_Init+0x624>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d80c      	bhi.n	8004910 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f002 facc 	bl	8006e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	e008      	b.n	8004922 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	a7fdabf8 	.word	0xa7fdabf8
 8004940:	cccccccd 	.word	0xcccccccd
 8004944:	40020010 	.word	0x40020010
 8004948:	40020028 	.word	0x40020028
 800494c:	40020040 	.word	0x40020040
 8004950:	40020058 	.word	0x40020058
 8004954:	40020070 	.word	0x40020070
 8004958:	40020088 	.word	0x40020088
 800495c:	400200a0 	.word	0x400200a0
 8004960:	400200b8 	.word	0x400200b8
 8004964:	40020410 	.word	0x40020410
 8004968:	40020428 	.word	0x40020428
 800496c:	40020440 	.word	0x40020440
 8004970:	40020458 	.word	0x40020458
 8004974:	40020470 	.word	0x40020470
 8004978:	40020488 	.word	0x40020488
 800497c:	400204a0 	.word	0x400204a0
 8004980:	400204b8 	.word	0x400204b8
 8004984:	58025408 	.word	0x58025408
 8004988:	5802541c 	.word	0x5802541c
 800498c:	58025430 	.word	0x58025430
 8004990:	58025444 	.word	0x58025444
 8004994:	58025458 	.word	0x58025458
 8004998:	5802546c 	.word	0x5802546c
 800499c:	58025480 	.word	0x58025480
 80049a0:	58025494 	.word	0x58025494

080049a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e226      	b.n	8004e0e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_DMA_Start_IT+0x2a>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e21f      	b.n	8004e0e <HAL_DMA_Start_IT+0x46a>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	f040 820a 	bne.w	8004df8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a68      	ldr	r2, [pc, #416]	; (8004b98 <HAL_DMA_Start_IT+0x1f4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d04a      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a66      	ldr	r2, [pc, #408]	; (8004b9c <HAL_DMA_Start_IT+0x1f8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d045      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a65      	ldr	r2, [pc, #404]	; (8004ba0 <HAL_DMA_Start_IT+0x1fc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d040      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a63      	ldr	r2, [pc, #396]	; (8004ba4 <HAL_DMA_Start_IT+0x200>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d03b      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a62      	ldr	r2, [pc, #392]	; (8004ba8 <HAL_DMA_Start_IT+0x204>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d036      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a60      	ldr	r2, [pc, #384]	; (8004bac <HAL_DMA_Start_IT+0x208>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d031      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a5f      	ldr	r2, [pc, #380]	; (8004bb0 <HAL_DMA_Start_IT+0x20c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d02c      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a5d      	ldr	r2, [pc, #372]	; (8004bb4 <HAL_DMA_Start_IT+0x210>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d027      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a5c      	ldr	r2, [pc, #368]	; (8004bb8 <HAL_DMA_Start_IT+0x214>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d022      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a5a      	ldr	r2, [pc, #360]	; (8004bbc <HAL_DMA_Start_IT+0x218>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d01d      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a59      	ldr	r2, [pc, #356]	; (8004bc0 <HAL_DMA_Start_IT+0x21c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d018      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a57      	ldr	r2, [pc, #348]	; (8004bc4 <HAL_DMA_Start_IT+0x220>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a56      	ldr	r2, [pc, #344]	; (8004bc8 <HAL_DMA_Start_IT+0x224>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00e      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a54      	ldr	r2, [pc, #336]	; (8004bcc <HAL_DMA_Start_IT+0x228>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a53      	ldr	r2, [pc, #332]	; (8004bd0 <HAL_DMA_Start_IT+0x22c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_DMA_Start_IT+0xee>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a51      	ldr	r2, [pc, #324]	; (8004bd4 <HAL_DMA_Start_IT+0x230>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d108      	bne.n	8004aa4 <HAL_DMA_Start_IT+0x100>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e007      	b.n	8004ab4 <HAL_DMA_Start_IT+0x110>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0201 	bic.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f001 fe76 	bl	80067ac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a34      	ldr	r2, [pc, #208]	; (8004b98 <HAL_DMA_Start_IT+0x1f4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d04a      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a33      	ldr	r2, [pc, #204]	; (8004b9c <HAL_DMA_Start_IT+0x1f8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d045      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a31      	ldr	r2, [pc, #196]	; (8004ba0 <HAL_DMA_Start_IT+0x1fc>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d040      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a30      	ldr	r2, [pc, #192]	; (8004ba4 <HAL_DMA_Start_IT+0x200>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d03b      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a2e      	ldr	r2, [pc, #184]	; (8004ba8 <HAL_DMA_Start_IT+0x204>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d036      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2d      	ldr	r2, [pc, #180]	; (8004bac <HAL_DMA_Start_IT+0x208>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d031      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a2b      	ldr	r2, [pc, #172]	; (8004bb0 <HAL_DMA_Start_IT+0x20c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d02c      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a2a      	ldr	r2, [pc, #168]	; (8004bb4 <HAL_DMA_Start_IT+0x210>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d027      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a28      	ldr	r2, [pc, #160]	; (8004bb8 <HAL_DMA_Start_IT+0x214>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d022      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a27      	ldr	r2, [pc, #156]	; (8004bbc <HAL_DMA_Start_IT+0x218>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d01d      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a25      	ldr	r2, [pc, #148]	; (8004bc0 <HAL_DMA_Start_IT+0x21c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d018      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a24      	ldr	r2, [pc, #144]	; (8004bc4 <HAL_DMA_Start_IT+0x220>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d013      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <HAL_DMA_Start_IT+0x224>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00e      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <HAL_DMA_Start_IT+0x228>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1f      	ldr	r2, [pc, #124]	; (8004bd0 <HAL_DMA_Start_IT+0x22c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_DMA_Start_IT+0x1bc>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1e      	ldr	r2, [pc, #120]	; (8004bd4 <HAL_DMA_Start_IT+0x230>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d101      	bne.n	8004b64 <HAL_DMA_Start_IT+0x1c0>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <HAL_DMA_Start_IT+0x1c2>
 8004b64:	2300      	movs	r3, #0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d036      	beq.n	8004bd8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f023 021e 	bic.w	r2, r3, #30
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0216 	orr.w	r2, r2, #22
 8004b7c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d03e      	beq.n	8004c04 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0208 	orr.w	r2, r2, #8
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e035      	b.n	8004c04 <HAL_DMA_Start_IT+0x260>
 8004b98:	40020010 	.word	0x40020010
 8004b9c:	40020028 	.word	0x40020028
 8004ba0:	40020040 	.word	0x40020040
 8004ba4:	40020058 	.word	0x40020058
 8004ba8:	40020070 	.word	0x40020070
 8004bac:	40020088 	.word	0x40020088
 8004bb0:	400200a0 	.word	0x400200a0
 8004bb4:	400200b8 	.word	0x400200b8
 8004bb8:	40020410 	.word	0x40020410
 8004bbc:	40020428 	.word	0x40020428
 8004bc0:	40020440 	.word	0x40020440
 8004bc4:	40020458 	.word	0x40020458
 8004bc8:	40020470 	.word	0x40020470
 8004bcc:	40020488 	.word	0x40020488
 8004bd0:	400204a0 	.word	0x400204a0
 8004bd4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 020e 	bic.w	r2, r3, #14
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 020a 	orr.w	r2, r2, #10
 8004bea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0204 	orr.w	r2, r2, #4
 8004c02:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a83      	ldr	r2, [pc, #524]	; (8004e18 <HAL_DMA_Start_IT+0x474>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d072      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a82      	ldr	r2, [pc, #520]	; (8004e1c <HAL_DMA_Start_IT+0x478>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d06d      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a80      	ldr	r2, [pc, #512]	; (8004e20 <HAL_DMA_Start_IT+0x47c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d068      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a7f      	ldr	r2, [pc, #508]	; (8004e24 <HAL_DMA_Start_IT+0x480>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d063      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a7d      	ldr	r2, [pc, #500]	; (8004e28 <HAL_DMA_Start_IT+0x484>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d05e      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a7c      	ldr	r2, [pc, #496]	; (8004e2c <HAL_DMA_Start_IT+0x488>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d059      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a7a      	ldr	r2, [pc, #488]	; (8004e30 <HAL_DMA_Start_IT+0x48c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d054      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a79      	ldr	r2, [pc, #484]	; (8004e34 <HAL_DMA_Start_IT+0x490>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d04f      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a77      	ldr	r2, [pc, #476]	; (8004e38 <HAL_DMA_Start_IT+0x494>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d04a      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a76      	ldr	r2, [pc, #472]	; (8004e3c <HAL_DMA_Start_IT+0x498>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d045      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a74      	ldr	r2, [pc, #464]	; (8004e40 <HAL_DMA_Start_IT+0x49c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d040      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a73      	ldr	r2, [pc, #460]	; (8004e44 <HAL_DMA_Start_IT+0x4a0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d03b      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a71      	ldr	r2, [pc, #452]	; (8004e48 <HAL_DMA_Start_IT+0x4a4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d036      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a70      	ldr	r2, [pc, #448]	; (8004e4c <HAL_DMA_Start_IT+0x4a8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d031      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a6e      	ldr	r2, [pc, #440]	; (8004e50 <HAL_DMA_Start_IT+0x4ac>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d02c      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a6d      	ldr	r2, [pc, #436]	; (8004e54 <HAL_DMA_Start_IT+0x4b0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d027      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a6b      	ldr	r2, [pc, #428]	; (8004e58 <HAL_DMA_Start_IT+0x4b4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d022      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a6a      	ldr	r2, [pc, #424]	; (8004e5c <HAL_DMA_Start_IT+0x4b8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d01d      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a68      	ldr	r2, [pc, #416]	; (8004e60 <HAL_DMA_Start_IT+0x4bc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d018      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a67      	ldr	r2, [pc, #412]	; (8004e64 <HAL_DMA_Start_IT+0x4c0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d013      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a65      	ldr	r2, [pc, #404]	; (8004e68 <HAL_DMA_Start_IT+0x4c4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00e      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a64      	ldr	r2, [pc, #400]	; (8004e6c <HAL_DMA_Start_IT+0x4c8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a62      	ldr	r2, [pc, #392]	; (8004e70 <HAL_DMA_Start_IT+0x4cc>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d004      	beq.n	8004cf4 <HAL_DMA_Start_IT+0x350>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a61      	ldr	r2, [pc, #388]	; (8004e74 <HAL_DMA_Start_IT+0x4d0>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d101      	bne.n	8004cf8 <HAL_DMA_Start_IT+0x354>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <HAL_DMA_Start_IT+0x356>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d01a      	beq.n	8004d34 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d1a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d32:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a37      	ldr	r2, [pc, #220]	; (8004e18 <HAL_DMA_Start_IT+0x474>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d04a      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a36      	ldr	r2, [pc, #216]	; (8004e1c <HAL_DMA_Start_IT+0x478>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d045      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a34      	ldr	r2, [pc, #208]	; (8004e20 <HAL_DMA_Start_IT+0x47c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d040      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a33      	ldr	r2, [pc, #204]	; (8004e24 <HAL_DMA_Start_IT+0x480>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d03b      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a31      	ldr	r2, [pc, #196]	; (8004e28 <HAL_DMA_Start_IT+0x484>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d036      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a30      	ldr	r2, [pc, #192]	; (8004e2c <HAL_DMA_Start_IT+0x488>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d031      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a2e      	ldr	r2, [pc, #184]	; (8004e30 <HAL_DMA_Start_IT+0x48c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d02c      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a2d      	ldr	r2, [pc, #180]	; (8004e34 <HAL_DMA_Start_IT+0x490>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d027      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2b      	ldr	r2, [pc, #172]	; (8004e38 <HAL_DMA_Start_IT+0x494>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d022      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a2a      	ldr	r2, [pc, #168]	; (8004e3c <HAL_DMA_Start_IT+0x498>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d01d      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a28      	ldr	r2, [pc, #160]	; (8004e40 <HAL_DMA_Start_IT+0x49c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d018      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a27      	ldr	r2, [pc, #156]	; (8004e44 <HAL_DMA_Start_IT+0x4a0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d013      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a25      	ldr	r2, [pc, #148]	; (8004e48 <HAL_DMA_Start_IT+0x4a4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00e      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a24      	ldr	r2, [pc, #144]	; (8004e4c <HAL_DMA_Start_IT+0x4a8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d009      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a22      	ldr	r2, [pc, #136]	; (8004e50 <HAL_DMA_Start_IT+0x4ac>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d004      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x430>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a21      	ldr	r2, [pc, #132]	; (8004e54 <HAL_DMA_Start_IT+0x4b0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d108      	bne.n	8004de6 <HAL_DMA_Start_IT+0x442>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e012      	b.n	8004e0c <HAL_DMA_Start_IT+0x468>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0201 	orr.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	e009      	b.n	8004e0c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40020010 	.word	0x40020010
 8004e1c:	40020028 	.word	0x40020028
 8004e20:	40020040 	.word	0x40020040
 8004e24:	40020058 	.word	0x40020058
 8004e28:	40020070 	.word	0x40020070
 8004e2c:	40020088 	.word	0x40020088
 8004e30:	400200a0 	.word	0x400200a0
 8004e34:	400200b8 	.word	0x400200b8
 8004e38:	40020410 	.word	0x40020410
 8004e3c:	40020428 	.word	0x40020428
 8004e40:	40020440 	.word	0x40020440
 8004e44:	40020458 	.word	0x40020458
 8004e48:	40020470 	.word	0x40020470
 8004e4c:	40020488 	.word	0x40020488
 8004e50:	400204a0 	.word	0x400204a0
 8004e54:	400204b8 	.word	0x400204b8
 8004e58:	58025408 	.word	0x58025408
 8004e5c:	5802541c 	.word	0x5802541c
 8004e60:	58025430 	.word	0x58025430
 8004e64:	58025444 	.word	0x58025444
 8004e68:	58025458 	.word	0x58025458
 8004e6c:	5802546c 	.word	0x5802546c
 8004e70:	58025480 	.word	0x58025480
 8004e74:	58025494 	.word	0x58025494

08004e78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004e80:	f7fd fe8e 	bl	8002ba0 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e2dc      	b.n	800544a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d008      	beq.n	8004eae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2280      	movs	r2, #128	; 0x80
 8004ea0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e2cd      	b.n	800544a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a76      	ldr	r2, [pc, #472]	; (800508c <HAL_DMA_Abort+0x214>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d04a      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a74      	ldr	r2, [pc, #464]	; (8005090 <HAL_DMA_Abort+0x218>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d045      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a73      	ldr	r2, [pc, #460]	; (8005094 <HAL_DMA_Abort+0x21c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d040      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a71      	ldr	r2, [pc, #452]	; (8005098 <HAL_DMA_Abort+0x220>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d03b      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a70      	ldr	r2, [pc, #448]	; (800509c <HAL_DMA_Abort+0x224>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d036      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a6e      	ldr	r2, [pc, #440]	; (80050a0 <HAL_DMA_Abort+0x228>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d031      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a6d      	ldr	r2, [pc, #436]	; (80050a4 <HAL_DMA_Abort+0x22c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d02c      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a6b      	ldr	r2, [pc, #428]	; (80050a8 <HAL_DMA_Abort+0x230>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d027      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a6a      	ldr	r2, [pc, #424]	; (80050ac <HAL_DMA_Abort+0x234>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d022      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a68      	ldr	r2, [pc, #416]	; (80050b0 <HAL_DMA_Abort+0x238>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d01d      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a67      	ldr	r2, [pc, #412]	; (80050b4 <HAL_DMA_Abort+0x23c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d018      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a65      	ldr	r2, [pc, #404]	; (80050b8 <HAL_DMA_Abort+0x240>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a64      	ldr	r2, [pc, #400]	; (80050bc <HAL_DMA_Abort+0x244>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00e      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a62      	ldr	r2, [pc, #392]	; (80050c0 <HAL_DMA_Abort+0x248>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a61      	ldr	r2, [pc, #388]	; (80050c4 <HAL_DMA_Abort+0x24c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <HAL_DMA_Abort+0xd6>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a5f      	ldr	r2, [pc, #380]	; (80050c8 <HAL_DMA_Abort+0x250>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d101      	bne.n	8004f52 <HAL_DMA_Abort+0xda>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <HAL_DMA_Abort+0xdc>
 8004f52:	2300      	movs	r3, #0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d013      	beq.n	8004f80 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 021e 	bic.w	r2, r2, #30
 8004f66:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695a      	ldr	r2, [r3, #20]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f76:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	e00a      	b.n	8004f96 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 020e 	bic.w	r2, r2, #14
 8004f8e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a3c      	ldr	r2, [pc, #240]	; (800508c <HAL_DMA_Abort+0x214>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d072      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a3a      	ldr	r2, [pc, #232]	; (8005090 <HAL_DMA_Abort+0x218>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d06d      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a39      	ldr	r2, [pc, #228]	; (8005094 <HAL_DMA_Abort+0x21c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d068      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a37      	ldr	r2, [pc, #220]	; (8005098 <HAL_DMA_Abort+0x220>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d063      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a36      	ldr	r2, [pc, #216]	; (800509c <HAL_DMA_Abort+0x224>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d05e      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a34      	ldr	r2, [pc, #208]	; (80050a0 <HAL_DMA_Abort+0x228>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d059      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a33      	ldr	r2, [pc, #204]	; (80050a4 <HAL_DMA_Abort+0x22c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d054      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a31      	ldr	r2, [pc, #196]	; (80050a8 <HAL_DMA_Abort+0x230>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d04f      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a30      	ldr	r2, [pc, #192]	; (80050ac <HAL_DMA_Abort+0x234>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d04a      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a2e      	ldr	r2, [pc, #184]	; (80050b0 <HAL_DMA_Abort+0x238>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d045      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a2d      	ldr	r2, [pc, #180]	; (80050b4 <HAL_DMA_Abort+0x23c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d040      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a2b      	ldr	r2, [pc, #172]	; (80050b8 <HAL_DMA_Abort+0x240>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d03b      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a2a      	ldr	r2, [pc, #168]	; (80050bc <HAL_DMA_Abort+0x244>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d036      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a28      	ldr	r2, [pc, #160]	; (80050c0 <HAL_DMA_Abort+0x248>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d031      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a27      	ldr	r2, [pc, #156]	; (80050c4 <HAL_DMA_Abort+0x24c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d02c      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a25      	ldr	r2, [pc, #148]	; (80050c8 <HAL_DMA_Abort+0x250>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d027      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a24      	ldr	r2, [pc, #144]	; (80050cc <HAL_DMA_Abort+0x254>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d022      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a22      	ldr	r2, [pc, #136]	; (80050d0 <HAL_DMA_Abort+0x258>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d01d      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a21      	ldr	r2, [pc, #132]	; (80050d4 <HAL_DMA_Abort+0x25c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d018      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1f      	ldr	r2, [pc, #124]	; (80050d8 <HAL_DMA_Abort+0x260>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d013      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1e      	ldr	r2, [pc, #120]	; (80050dc <HAL_DMA_Abort+0x264>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00e      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1c      	ldr	r2, [pc, #112]	; (80050e0 <HAL_DMA_Abort+0x268>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d009      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1b      	ldr	r2, [pc, #108]	; (80050e4 <HAL_DMA_Abort+0x26c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d004      	beq.n	8005086 <HAL_DMA_Abort+0x20e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a19      	ldr	r2, [pc, #100]	; (80050e8 <HAL_DMA_Abort+0x270>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d132      	bne.n	80050ec <HAL_DMA_Abort+0x274>
 8005086:	2301      	movs	r3, #1
 8005088:	e031      	b.n	80050ee <HAL_DMA_Abort+0x276>
 800508a:	bf00      	nop
 800508c:	40020010 	.word	0x40020010
 8005090:	40020028 	.word	0x40020028
 8005094:	40020040 	.word	0x40020040
 8005098:	40020058 	.word	0x40020058
 800509c:	40020070 	.word	0x40020070
 80050a0:	40020088 	.word	0x40020088
 80050a4:	400200a0 	.word	0x400200a0
 80050a8:	400200b8 	.word	0x400200b8
 80050ac:	40020410 	.word	0x40020410
 80050b0:	40020428 	.word	0x40020428
 80050b4:	40020440 	.word	0x40020440
 80050b8:	40020458 	.word	0x40020458
 80050bc:	40020470 	.word	0x40020470
 80050c0:	40020488 	.word	0x40020488
 80050c4:	400204a0 	.word	0x400204a0
 80050c8:	400204b8 	.word	0x400204b8
 80050cc:	58025408 	.word	0x58025408
 80050d0:	5802541c 	.word	0x5802541c
 80050d4:	58025430 	.word	0x58025430
 80050d8:	58025444 	.word	0x58025444
 80050dc:	58025458 	.word	0x58025458
 80050e0:	5802546c 	.word	0x5802546c
 80050e4:	58025480 	.word	0x58025480
 80050e8:	58025494 	.word	0x58025494
 80050ec:	2300      	movs	r3, #0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005100:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a6d      	ldr	r2, [pc, #436]	; (80052bc <HAL_DMA_Abort+0x444>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d04a      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a6b      	ldr	r2, [pc, #428]	; (80052c0 <HAL_DMA_Abort+0x448>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d045      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a6a      	ldr	r2, [pc, #424]	; (80052c4 <HAL_DMA_Abort+0x44c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d040      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a68      	ldr	r2, [pc, #416]	; (80052c8 <HAL_DMA_Abort+0x450>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d03b      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a67      	ldr	r2, [pc, #412]	; (80052cc <HAL_DMA_Abort+0x454>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d036      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a65      	ldr	r2, [pc, #404]	; (80052d0 <HAL_DMA_Abort+0x458>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d031      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a64      	ldr	r2, [pc, #400]	; (80052d4 <HAL_DMA_Abort+0x45c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d02c      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a62      	ldr	r2, [pc, #392]	; (80052d8 <HAL_DMA_Abort+0x460>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d027      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a61      	ldr	r2, [pc, #388]	; (80052dc <HAL_DMA_Abort+0x464>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d022      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a5f      	ldr	r2, [pc, #380]	; (80052e0 <HAL_DMA_Abort+0x468>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01d      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a5e      	ldr	r2, [pc, #376]	; (80052e4 <HAL_DMA_Abort+0x46c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d018      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a5c      	ldr	r2, [pc, #368]	; (80052e8 <HAL_DMA_Abort+0x470>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a5b      	ldr	r2, [pc, #364]	; (80052ec <HAL_DMA_Abort+0x474>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00e      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a59      	ldr	r2, [pc, #356]	; (80052f0 <HAL_DMA_Abort+0x478>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d009      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a58      	ldr	r2, [pc, #352]	; (80052f4 <HAL_DMA_Abort+0x47c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_DMA_Abort+0x32a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a56      	ldr	r2, [pc, #344]	; (80052f8 <HAL_DMA_Abort+0x480>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d108      	bne.n	80051b4 <HAL_DMA_Abort+0x33c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0201 	bic.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	e007      	b.n	80051c4 <HAL_DMA_Abort+0x34c>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80051c4:	e013      	b.n	80051ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051c6:	f7fd fceb 	bl	8002ba0 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b05      	cmp	r3, #5
 80051d2:	d90c      	bls.n	80051ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2203      	movs	r2, #3
 80051de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e12d      	b.n	800544a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e5      	bne.n	80051c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a2f      	ldr	r2, [pc, #188]	; (80052bc <HAL_DMA_Abort+0x444>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d04a      	beq.n	800529a <HAL_DMA_Abort+0x422>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2d      	ldr	r2, [pc, #180]	; (80052c0 <HAL_DMA_Abort+0x448>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d045      	beq.n	800529a <HAL_DMA_Abort+0x422>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a2c      	ldr	r2, [pc, #176]	; (80052c4 <HAL_DMA_Abort+0x44c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d040      	beq.n	800529a <HAL_DMA_Abort+0x422>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2a      	ldr	r2, [pc, #168]	; (80052c8 <HAL_DMA_Abort+0x450>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d03b      	beq.n	800529a <HAL_DMA_Abort+0x422>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a29      	ldr	r2, [pc, #164]	; (80052cc <HAL_DMA_Abort+0x454>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d036      	beq.n	800529a <HAL_DMA_Abort+0x422>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <HAL_DMA_Abort+0x458>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d031      	beq.n	800529a <HAL_DMA_Abort+0x422>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a26      	ldr	r2, [pc, #152]	; (80052d4 <HAL_DMA_Abort+0x45c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d02c      	beq.n	800529a <HAL_DMA_Abort+0x422>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a24      	ldr	r2, [pc, #144]	; (80052d8 <HAL_DMA_Abort+0x460>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d027      	beq.n	800529a <HAL_DMA_Abort+0x422>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a23      	ldr	r2, [pc, #140]	; (80052dc <HAL_DMA_Abort+0x464>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d022      	beq.n	800529a <HAL_DMA_Abort+0x422>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a21      	ldr	r2, [pc, #132]	; (80052e0 <HAL_DMA_Abort+0x468>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d01d      	beq.n	800529a <HAL_DMA_Abort+0x422>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a20      	ldr	r2, [pc, #128]	; (80052e4 <HAL_DMA_Abort+0x46c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d018      	beq.n	800529a <HAL_DMA_Abort+0x422>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1e      	ldr	r2, [pc, #120]	; (80052e8 <HAL_DMA_Abort+0x470>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <HAL_DMA_Abort+0x422>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1d      	ldr	r2, [pc, #116]	; (80052ec <HAL_DMA_Abort+0x474>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00e      	beq.n	800529a <HAL_DMA_Abort+0x422>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1b      	ldr	r2, [pc, #108]	; (80052f0 <HAL_DMA_Abort+0x478>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d009      	beq.n	800529a <HAL_DMA_Abort+0x422>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1a      	ldr	r2, [pc, #104]	; (80052f4 <HAL_DMA_Abort+0x47c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d004      	beq.n	800529a <HAL_DMA_Abort+0x422>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <HAL_DMA_Abort+0x480>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d101      	bne.n	800529e <HAL_DMA_Abort+0x426>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <HAL_DMA_Abort+0x428>
 800529e:	2300      	movs	r3, #0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d02b      	beq.n	80052fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ae:	f003 031f 	and.w	r3, r3, #31
 80052b2:	223f      	movs	r2, #63	; 0x3f
 80052b4:	409a      	lsls	r2, r3
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	609a      	str	r2, [r3, #8]
 80052ba:	e02a      	b.n	8005312 <HAL_DMA_Abort+0x49a>
 80052bc:	40020010 	.word	0x40020010
 80052c0:	40020028 	.word	0x40020028
 80052c4:	40020040 	.word	0x40020040
 80052c8:	40020058 	.word	0x40020058
 80052cc:	40020070 	.word	0x40020070
 80052d0:	40020088 	.word	0x40020088
 80052d4:	400200a0 	.word	0x400200a0
 80052d8:	400200b8 	.word	0x400200b8
 80052dc:	40020410 	.word	0x40020410
 80052e0:	40020428 	.word	0x40020428
 80052e4:	40020440 	.word	0x40020440
 80052e8:	40020458 	.word	0x40020458
 80052ec:	40020470 	.word	0x40020470
 80052f0:	40020488 	.word	0x40020488
 80052f4:	400204a0 	.word	0x400204a0
 80052f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	2201      	movs	r2, #1
 800530c:	409a      	lsls	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a4f      	ldr	r2, [pc, #316]	; (8005454 <HAL_DMA_Abort+0x5dc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d072      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a4d      	ldr	r2, [pc, #308]	; (8005458 <HAL_DMA_Abort+0x5e0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d06d      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a4c      	ldr	r2, [pc, #304]	; (800545c <HAL_DMA_Abort+0x5e4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d068      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a4a      	ldr	r2, [pc, #296]	; (8005460 <HAL_DMA_Abort+0x5e8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d063      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a49      	ldr	r2, [pc, #292]	; (8005464 <HAL_DMA_Abort+0x5ec>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d05e      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a47      	ldr	r2, [pc, #284]	; (8005468 <HAL_DMA_Abort+0x5f0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d059      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a46      	ldr	r2, [pc, #280]	; (800546c <HAL_DMA_Abort+0x5f4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d054      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a44      	ldr	r2, [pc, #272]	; (8005470 <HAL_DMA_Abort+0x5f8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d04f      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a43      	ldr	r2, [pc, #268]	; (8005474 <HAL_DMA_Abort+0x5fc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d04a      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a41      	ldr	r2, [pc, #260]	; (8005478 <HAL_DMA_Abort+0x600>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d045      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a40      	ldr	r2, [pc, #256]	; (800547c <HAL_DMA_Abort+0x604>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d040      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a3e      	ldr	r2, [pc, #248]	; (8005480 <HAL_DMA_Abort+0x608>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d03b      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a3d      	ldr	r2, [pc, #244]	; (8005484 <HAL_DMA_Abort+0x60c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d036      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a3b      	ldr	r2, [pc, #236]	; (8005488 <HAL_DMA_Abort+0x610>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d031      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a3a      	ldr	r2, [pc, #232]	; (800548c <HAL_DMA_Abort+0x614>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d02c      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a38      	ldr	r2, [pc, #224]	; (8005490 <HAL_DMA_Abort+0x618>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d027      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a37      	ldr	r2, [pc, #220]	; (8005494 <HAL_DMA_Abort+0x61c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d022      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a35      	ldr	r2, [pc, #212]	; (8005498 <HAL_DMA_Abort+0x620>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01d      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a34      	ldr	r2, [pc, #208]	; (800549c <HAL_DMA_Abort+0x624>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d018      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a32      	ldr	r2, [pc, #200]	; (80054a0 <HAL_DMA_Abort+0x628>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a31      	ldr	r2, [pc, #196]	; (80054a4 <HAL_DMA_Abort+0x62c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00e      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2f      	ldr	r2, [pc, #188]	; (80054a8 <HAL_DMA_Abort+0x630>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d009      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a2e      	ldr	r2, [pc, #184]	; (80054ac <HAL_DMA_Abort+0x634>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <HAL_DMA_Abort+0x58a>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a2c      	ldr	r2, [pc, #176]	; (80054b0 <HAL_DMA_Abort+0x638>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d101      	bne.n	8005406 <HAL_DMA_Abort+0x58e>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <HAL_DMA_Abort+0x590>
 8005406:	2300      	movs	r3, #0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d015      	beq.n	8005438 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005414:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00c      	beq.n	8005438 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800542c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005436:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40020010 	.word	0x40020010
 8005458:	40020028 	.word	0x40020028
 800545c:	40020040 	.word	0x40020040
 8005460:	40020058 	.word	0x40020058
 8005464:	40020070 	.word	0x40020070
 8005468:	40020088 	.word	0x40020088
 800546c:	400200a0 	.word	0x400200a0
 8005470:	400200b8 	.word	0x400200b8
 8005474:	40020410 	.word	0x40020410
 8005478:	40020428 	.word	0x40020428
 800547c:	40020440 	.word	0x40020440
 8005480:	40020458 	.word	0x40020458
 8005484:	40020470 	.word	0x40020470
 8005488:	40020488 	.word	0x40020488
 800548c:	400204a0 	.word	0x400204a0
 8005490:	400204b8 	.word	0x400204b8
 8005494:	58025408 	.word	0x58025408
 8005498:	5802541c 	.word	0x5802541c
 800549c:	58025430 	.word	0x58025430
 80054a0:	58025444 	.word	0x58025444
 80054a4:	58025458 	.word	0x58025458
 80054a8:	5802546c 	.word	0x5802546c
 80054ac:	58025480 	.word	0x58025480
 80054b0:	58025494 	.word	0x58025494

080054b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e237      	b.n	8005936 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d004      	beq.n	80054dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2280      	movs	r2, #128	; 0x80
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e22c      	b.n	8005936 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a5c      	ldr	r2, [pc, #368]	; (8005654 <HAL_DMA_Abort_IT+0x1a0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d04a      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a5b      	ldr	r2, [pc, #364]	; (8005658 <HAL_DMA_Abort_IT+0x1a4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d045      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a59      	ldr	r2, [pc, #356]	; (800565c <HAL_DMA_Abort_IT+0x1a8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d040      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a58      	ldr	r2, [pc, #352]	; (8005660 <HAL_DMA_Abort_IT+0x1ac>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d03b      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a56      	ldr	r2, [pc, #344]	; (8005664 <HAL_DMA_Abort_IT+0x1b0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d036      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a55      	ldr	r2, [pc, #340]	; (8005668 <HAL_DMA_Abort_IT+0x1b4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d031      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a53      	ldr	r2, [pc, #332]	; (800566c <HAL_DMA_Abort_IT+0x1b8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d02c      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a52      	ldr	r2, [pc, #328]	; (8005670 <HAL_DMA_Abort_IT+0x1bc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d027      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a50      	ldr	r2, [pc, #320]	; (8005674 <HAL_DMA_Abort_IT+0x1c0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d022      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a4f      	ldr	r2, [pc, #316]	; (8005678 <HAL_DMA_Abort_IT+0x1c4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d01d      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a4d      	ldr	r2, [pc, #308]	; (800567c <HAL_DMA_Abort_IT+0x1c8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d018      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a4c      	ldr	r2, [pc, #304]	; (8005680 <HAL_DMA_Abort_IT+0x1cc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d013      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a4a      	ldr	r2, [pc, #296]	; (8005684 <HAL_DMA_Abort_IT+0x1d0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00e      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a49      	ldr	r2, [pc, #292]	; (8005688 <HAL_DMA_Abort_IT+0x1d4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d009      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a47      	ldr	r2, [pc, #284]	; (800568c <HAL_DMA_Abort_IT+0x1d8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d004      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a46      	ldr	r2, [pc, #280]	; (8005690 <HAL_DMA_Abort_IT+0x1dc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d101      	bne.n	8005580 <HAL_DMA_Abort_IT+0xcc>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <HAL_DMA_Abort_IT+0xce>
 8005580:	2300      	movs	r3, #0
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 8086 	beq.w	8005694 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2204      	movs	r2, #4
 800558c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a2f      	ldr	r2, [pc, #188]	; (8005654 <HAL_DMA_Abort_IT+0x1a0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d04a      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a2e      	ldr	r2, [pc, #184]	; (8005658 <HAL_DMA_Abort_IT+0x1a4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d045      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a2c      	ldr	r2, [pc, #176]	; (800565c <HAL_DMA_Abort_IT+0x1a8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d040      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a2b      	ldr	r2, [pc, #172]	; (8005660 <HAL_DMA_Abort_IT+0x1ac>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d03b      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a29      	ldr	r2, [pc, #164]	; (8005664 <HAL_DMA_Abort_IT+0x1b0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d036      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a28      	ldr	r2, [pc, #160]	; (8005668 <HAL_DMA_Abort_IT+0x1b4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d031      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a26      	ldr	r2, [pc, #152]	; (800566c <HAL_DMA_Abort_IT+0x1b8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d02c      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a25      	ldr	r2, [pc, #148]	; (8005670 <HAL_DMA_Abort_IT+0x1bc>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d027      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a23      	ldr	r2, [pc, #140]	; (8005674 <HAL_DMA_Abort_IT+0x1c0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d022      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a22      	ldr	r2, [pc, #136]	; (8005678 <HAL_DMA_Abort_IT+0x1c4>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d01d      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a20      	ldr	r2, [pc, #128]	; (800567c <HAL_DMA_Abort_IT+0x1c8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d018      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1f      	ldr	r2, [pc, #124]	; (8005680 <HAL_DMA_Abort_IT+0x1cc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1d      	ldr	r2, [pc, #116]	; (8005684 <HAL_DMA_Abort_IT+0x1d0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00e      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1c      	ldr	r2, [pc, #112]	; (8005688 <HAL_DMA_Abort_IT+0x1d4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d009      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a1a      	ldr	r2, [pc, #104]	; (800568c <HAL_DMA_Abort_IT+0x1d8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_DMA_Abort_IT+0x17c>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a19      	ldr	r2, [pc, #100]	; (8005690 <HAL_DMA_Abort_IT+0x1dc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d108      	bne.n	8005642 <HAL_DMA_Abort_IT+0x18e>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0201 	bic.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	e178      	b.n	8005934 <HAL_DMA_Abort_IT+0x480>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0201 	bic.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e16f      	b.n	8005934 <HAL_DMA_Abort_IT+0x480>
 8005654:	40020010 	.word	0x40020010
 8005658:	40020028 	.word	0x40020028
 800565c:	40020040 	.word	0x40020040
 8005660:	40020058 	.word	0x40020058
 8005664:	40020070 	.word	0x40020070
 8005668:	40020088 	.word	0x40020088
 800566c:	400200a0 	.word	0x400200a0
 8005670:	400200b8 	.word	0x400200b8
 8005674:	40020410 	.word	0x40020410
 8005678:	40020428 	.word	0x40020428
 800567c:	40020440 	.word	0x40020440
 8005680:	40020458 	.word	0x40020458
 8005684:	40020470 	.word	0x40020470
 8005688:	40020488 	.word	0x40020488
 800568c:	400204a0 	.word	0x400204a0
 8005690:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 020e 	bic.w	r2, r2, #14
 80056a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a6c      	ldr	r2, [pc, #432]	; (800585c <HAL_DMA_Abort_IT+0x3a8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d04a      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a6b      	ldr	r2, [pc, #428]	; (8005860 <HAL_DMA_Abort_IT+0x3ac>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d045      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a69      	ldr	r2, [pc, #420]	; (8005864 <HAL_DMA_Abort_IT+0x3b0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d040      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a68      	ldr	r2, [pc, #416]	; (8005868 <HAL_DMA_Abort_IT+0x3b4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d03b      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a66      	ldr	r2, [pc, #408]	; (800586c <HAL_DMA_Abort_IT+0x3b8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d036      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a65      	ldr	r2, [pc, #404]	; (8005870 <HAL_DMA_Abort_IT+0x3bc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d031      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a63      	ldr	r2, [pc, #396]	; (8005874 <HAL_DMA_Abort_IT+0x3c0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d02c      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a62      	ldr	r2, [pc, #392]	; (8005878 <HAL_DMA_Abort_IT+0x3c4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d027      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a60      	ldr	r2, [pc, #384]	; (800587c <HAL_DMA_Abort_IT+0x3c8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d022      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a5f      	ldr	r2, [pc, #380]	; (8005880 <HAL_DMA_Abort_IT+0x3cc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d01d      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a5d      	ldr	r2, [pc, #372]	; (8005884 <HAL_DMA_Abort_IT+0x3d0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d018      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a5c      	ldr	r2, [pc, #368]	; (8005888 <HAL_DMA_Abort_IT+0x3d4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d013      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a5a      	ldr	r2, [pc, #360]	; (800588c <HAL_DMA_Abort_IT+0x3d8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00e      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a59      	ldr	r2, [pc, #356]	; (8005890 <HAL_DMA_Abort_IT+0x3dc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d009      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a57      	ldr	r2, [pc, #348]	; (8005894 <HAL_DMA_Abort_IT+0x3e0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d004      	beq.n	8005744 <HAL_DMA_Abort_IT+0x290>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a56      	ldr	r2, [pc, #344]	; (8005898 <HAL_DMA_Abort_IT+0x3e4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d108      	bne.n	8005756 <HAL_DMA_Abort_IT+0x2a2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	e007      	b.n	8005766 <HAL_DMA_Abort_IT+0x2b2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0201 	bic.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3c      	ldr	r2, [pc, #240]	; (800585c <HAL_DMA_Abort_IT+0x3a8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d072      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a3a      	ldr	r2, [pc, #232]	; (8005860 <HAL_DMA_Abort_IT+0x3ac>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d06d      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a39      	ldr	r2, [pc, #228]	; (8005864 <HAL_DMA_Abort_IT+0x3b0>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d068      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a37      	ldr	r2, [pc, #220]	; (8005868 <HAL_DMA_Abort_IT+0x3b4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d063      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a36      	ldr	r2, [pc, #216]	; (800586c <HAL_DMA_Abort_IT+0x3b8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d05e      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a34      	ldr	r2, [pc, #208]	; (8005870 <HAL_DMA_Abort_IT+0x3bc>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d059      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a33      	ldr	r2, [pc, #204]	; (8005874 <HAL_DMA_Abort_IT+0x3c0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d054      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a31      	ldr	r2, [pc, #196]	; (8005878 <HAL_DMA_Abort_IT+0x3c4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d04f      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a30      	ldr	r2, [pc, #192]	; (800587c <HAL_DMA_Abort_IT+0x3c8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d04a      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a2e      	ldr	r2, [pc, #184]	; (8005880 <HAL_DMA_Abort_IT+0x3cc>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d045      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a2d      	ldr	r2, [pc, #180]	; (8005884 <HAL_DMA_Abort_IT+0x3d0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d040      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a2b      	ldr	r2, [pc, #172]	; (8005888 <HAL_DMA_Abort_IT+0x3d4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d03b      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a2a      	ldr	r2, [pc, #168]	; (800588c <HAL_DMA_Abort_IT+0x3d8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d036      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a28      	ldr	r2, [pc, #160]	; (8005890 <HAL_DMA_Abort_IT+0x3dc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d031      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a27      	ldr	r2, [pc, #156]	; (8005894 <HAL_DMA_Abort_IT+0x3e0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d02c      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a25      	ldr	r2, [pc, #148]	; (8005898 <HAL_DMA_Abort_IT+0x3e4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d027      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a24      	ldr	r2, [pc, #144]	; (800589c <HAL_DMA_Abort_IT+0x3e8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d022      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a22      	ldr	r2, [pc, #136]	; (80058a0 <HAL_DMA_Abort_IT+0x3ec>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d01d      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <HAL_DMA_Abort_IT+0x3f0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d018      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1f      	ldr	r2, [pc, #124]	; (80058a8 <HAL_DMA_Abort_IT+0x3f4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1e      	ldr	r2, [pc, #120]	; (80058ac <HAL_DMA_Abort_IT+0x3f8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1c      	ldr	r2, [pc, #112]	; (80058b0 <HAL_DMA_Abort_IT+0x3fc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1b      	ldr	r2, [pc, #108]	; (80058b4 <HAL_DMA_Abort_IT+0x400>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_DMA_Abort_IT+0x3a2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a19      	ldr	r2, [pc, #100]	; (80058b8 <HAL_DMA_Abort_IT+0x404>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d132      	bne.n	80058bc <HAL_DMA_Abort_IT+0x408>
 8005856:	2301      	movs	r3, #1
 8005858:	e031      	b.n	80058be <HAL_DMA_Abort_IT+0x40a>
 800585a:	bf00      	nop
 800585c:	40020010 	.word	0x40020010
 8005860:	40020028 	.word	0x40020028
 8005864:	40020040 	.word	0x40020040
 8005868:	40020058 	.word	0x40020058
 800586c:	40020070 	.word	0x40020070
 8005870:	40020088 	.word	0x40020088
 8005874:	400200a0 	.word	0x400200a0
 8005878:	400200b8 	.word	0x400200b8
 800587c:	40020410 	.word	0x40020410
 8005880:	40020428 	.word	0x40020428
 8005884:	40020440 	.word	0x40020440
 8005888:	40020458 	.word	0x40020458
 800588c:	40020470 	.word	0x40020470
 8005890:	40020488 	.word	0x40020488
 8005894:	400204a0 	.word	0x400204a0
 8005898:	400204b8 	.word	0x400204b8
 800589c:	58025408 	.word	0x58025408
 80058a0:	5802541c 	.word	0x5802541c
 80058a4:	58025430 	.word	0x58025430
 80058a8:	58025444 	.word	0x58025444
 80058ac:	58025458 	.word	0x58025458
 80058b0:	5802546c 	.word	0x5802546c
 80058b4:	58025480 	.word	0x58025480
 80058b8:	58025494 	.word	0x58025494
 80058bc:	2300      	movs	r3, #0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d028      	beq.n	8005914 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	2201      	movs	r2, #1
 80058e2:	409a      	lsls	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00c      	beq.n	8005914 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005908:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005912:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop

08005940 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800594c:	4b67      	ldr	r3, [pc, #412]	; (8005aec <HAL_DMA_IRQHandler+0x1ac>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a67      	ldr	r2, [pc, #412]	; (8005af0 <HAL_DMA_IRQHandler+0x1b0>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	0a9b      	lsrs	r3, r3, #10
 8005958:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a5f      	ldr	r2, [pc, #380]	; (8005af4 <HAL_DMA_IRQHandler+0x1b4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d04a      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a5d      	ldr	r2, [pc, #372]	; (8005af8 <HAL_DMA_IRQHandler+0x1b8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d045      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a5c      	ldr	r2, [pc, #368]	; (8005afc <HAL_DMA_IRQHandler+0x1bc>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d040      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a5a      	ldr	r2, [pc, #360]	; (8005b00 <HAL_DMA_IRQHandler+0x1c0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d03b      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a59      	ldr	r2, [pc, #356]	; (8005b04 <HAL_DMA_IRQHandler+0x1c4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d036      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a57      	ldr	r2, [pc, #348]	; (8005b08 <HAL_DMA_IRQHandler+0x1c8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d031      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a56      	ldr	r2, [pc, #344]	; (8005b0c <HAL_DMA_IRQHandler+0x1cc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d02c      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a54      	ldr	r2, [pc, #336]	; (8005b10 <HAL_DMA_IRQHandler+0x1d0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d027      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a53      	ldr	r2, [pc, #332]	; (8005b14 <HAL_DMA_IRQHandler+0x1d4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d022      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a51      	ldr	r2, [pc, #324]	; (8005b18 <HAL_DMA_IRQHandler+0x1d8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01d      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a50      	ldr	r2, [pc, #320]	; (8005b1c <HAL_DMA_IRQHandler+0x1dc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d018      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a4e      	ldr	r2, [pc, #312]	; (8005b20 <HAL_DMA_IRQHandler+0x1e0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a4d      	ldr	r2, [pc, #308]	; (8005b24 <HAL_DMA_IRQHandler+0x1e4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00e      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a4b      	ldr	r2, [pc, #300]	; (8005b28 <HAL_DMA_IRQHandler+0x1e8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d009      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a4a      	ldr	r2, [pc, #296]	; (8005b2c <HAL_DMA_IRQHandler+0x1ec>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d004      	beq.n	8005a12 <HAL_DMA_IRQHandler+0xd2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a48      	ldr	r2, [pc, #288]	; (8005b30 <HAL_DMA_IRQHandler+0x1f0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d101      	bne.n	8005a16 <HAL_DMA_IRQHandler+0xd6>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <HAL_DMA_IRQHandler+0xd8>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 842b 	beq.w	8006274 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a22:	f003 031f 	and.w	r3, r3, #31
 8005a26:	2208      	movs	r2, #8
 8005a28:	409a      	lsls	r2, r3
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 80a2 	beq.w	8005b78 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2e      	ldr	r2, [pc, #184]	; (8005af4 <HAL_DMA_IRQHandler+0x1b4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d04a      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2d      	ldr	r2, [pc, #180]	; (8005af8 <HAL_DMA_IRQHandler+0x1b8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d045      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a2b      	ldr	r2, [pc, #172]	; (8005afc <HAL_DMA_IRQHandler+0x1bc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d040      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a2a      	ldr	r2, [pc, #168]	; (8005b00 <HAL_DMA_IRQHandler+0x1c0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d03b      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a28      	ldr	r2, [pc, #160]	; (8005b04 <HAL_DMA_IRQHandler+0x1c4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d036      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a27      	ldr	r2, [pc, #156]	; (8005b08 <HAL_DMA_IRQHandler+0x1c8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d031      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a25      	ldr	r2, [pc, #148]	; (8005b0c <HAL_DMA_IRQHandler+0x1cc>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d02c      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a24      	ldr	r2, [pc, #144]	; (8005b10 <HAL_DMA_IRQHandler+0x1d0>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d027      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a22      	ldr	r2, [pc, #136]	; (8005b14 <HAL_DMA_IRQHandler+0x1d4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d022      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a21      	ldr	r2, [pc, #132]	; (8005b18 <HAL_DMA_IRQHandler+0x1d8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d01d      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1f      	ldr	r2, [pc, #124]	; (8005b1c <HAL_DMA_IRQHandler+0x1dc>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d018      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a1e      	ldr	r2, [pc, #120]	; (8005b20 <HAL_DMA_IRQHandler+0x1e0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1c      	ldr	r2, [pc, #112]	; (8005b24 <HAL_DMA_IRQHandler+0x1e4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00e      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1b      	ldr	r2, [pc, #108]	; (8005b28 <HAL_DMA_IRQHandler+0x1e8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a19      	ldr	r2, [pc, #100]	; (8005b2c <HAL_DMA_IRQHandler+0x1ec>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d004      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x194>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a18      	ldr	r2, [pc, #96]	; (8005b30 <HAL_DMA_IRQHandler+0x1f0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d12f      	bne.n	8005b34 <HAL_DMA_IRQHandler+0x1f4>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bf14      	ite	ne
 8005ae2:	2301      	movne	r3, #1
 8005ae4:	2300      	moveq	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	e02e      	b.n	8005b48 <HAL_DMA_IRQHandler+0x208>
 8005aea:	bf00      	nop
 8005aec:	20000000 	.word	0x20000000
 8005af0:	1b4e81b5 	.word	0x1b4e81b5
 8005af4:	40020010 	.word	0x40020010
 8005af8:	40020028 	.word	0x40020028
 8005afc:	40020040 	.word	0x40020040
 8005b00:	40020058 	.word	0x40020058
 8005b04:	40020070 	.word	0x40020070
 8005b08:	40020088 	.word	0x40020088
 8005b0c:	400200a0 	.word	0x400200a0
 8005b10:	400200b8 	.word	0x400200b8
 8005b14:	40020410 	.word	0x40020410
 8005b18:	40020428 	.word	0x40020428
 8005b1c:	40020440 	.word	0x40020440
 8005b20:	40020458 	.word	0x40020458
 8005b24:	40020470 	.word	0x40020470
 8005b28:	40020488 	.word	0x40020488
 8005b2c:	400204a0 	.word	0x400204a0
 8005b30:	400204b8 	.word	0x400204b8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bf14      	ite	ne
 8005b42:	2301      	movne	r3, #1
 8005b44:	2300      	moveq	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d015      	beq.n	8005b78 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0204 	bic.w	r2, r2, #4
 8005b5a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b60:	f003 031f 	and.w	r3, r3, #31
 8005b64:	2208      	movs	r2, #8
 8005b66:	409a      	lsls	r2, r3
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b70:	f043 0201 	orr.w	r2, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7c:	f003 031f 	and.w	r3, r3, #31
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	fa22 f303 	lsr.w	r3, r2, r3
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d06e      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a69      	ldr	r2, [pc, #420]	; (8005d38 <HAL_DMA_IRQHandler+0x3f8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d04a      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a67      	ldr	r2, [pc, #412]	; (8005d3c <HAL_DMA_IRQHandler+0x3fc>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d045      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a66      	ldr	r2, [pc, #408]	; (8005d40 <HAL_DMA_IRQHandler+0x400>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d040      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a64      	ldr	r2, [pc, #400]	; (8005d44 <HAL_DMA_IRQHandler+0x404>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d03b      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a63      	ldr	r2, [pc, #396]	; (8005d48 <HAL_DMA_IRQHandler+0x408>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d036      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a61      	ldr	r2, [pc, #388]	; (8005d4c <HAL_DMA_IRQHandler+0x40c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d031      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a60      	ldr	r2, [pc, #384]	; (8005d50 <HAL_DMA_IRQHandler+0x410>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d02c      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a5e      	ldr	r2, [pc, #376]	; (8005d54 <HAL_DMA_IRQHandler+0x414>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d027      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a5d      	ldr	r2, [pc, #372]	; (8005d58 <HAL_DMA_IRQHandler+0x418>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d022      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a5b      	ldr	r2, [pc, #364]	; (8005d5c <HAL_DMA_IRQHandler+0x41c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d01d      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a5a      	ldr	r2, [pc, #360]	; (8005d60 <HAL_DMA_IRQHandler+0x420>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d018      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a58      	ldr	r2, [pc, #352]	; (8005d64 <HAL_DMA_IRQHandler+0x424>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d013      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a57      	ldr	r2, [pc, #348]	; (8005d68 <HAL_DMA_IRQHandler+0x428>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00e      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a55      	ldr	r2, [pc, #340]	; (8005d6c <HAL_DMA_IRQHandler+0x42c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d009      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a54      	ldr	r2, [pc, #336]	; (8005d70 <HAL_DMA_IRQHandler+0x430>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d004      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x2ee>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a52      	ldr	r2, [pc, #328]	; (8005d74 <HAL_DMA_IRQHandler+0x434>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d10a      	bne.n	8005c44 <HAL_DMA_IRQHandler+0x304>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bf14      	ite	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	2300      	moveq	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	e003      	b.n	8005c4c <HAL_DMA_IRQHandler+0x30c>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00d      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c54:	f003 031f 	and.w	r3, r3, #31
 8005c58:	2201      	movs	r2, #1
 8005c5a:	409a      	lsls	r2, r3
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c64:	f043 0202 	orr.w	r2, r3, #2
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	2204      	movs	r2, #4
 8005c76:	409a      	lsls	r2, r3
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 808f 	beq.w	8005da0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a2c      	ldr	r2, [pc, #176]	; (8005d38 <HAL_DMA_IRQHandler+0x3f8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d04a      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a2a      	ldr	r2, [pc, #168]	; (8005d3c <HAL_DMA_IRQHandler+0x3fc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d045      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a29      	ldr	r2, [pc, #164]	; (8005d40 <HAL_DMA_IRQHandler+0x400>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d040      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a27      	ldr	r2, [pc, #156]	; (8005d44 <HAL_DMA_IRQHandler+0x404>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d03b      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a26      	ldr	r2, [pc, #152]	; (8005d48 <HAL_DMA_IRQHandler+0x408>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d036      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a24      	ldr	r2, [pc, #144]	; (8005d4c <HAL_DMA_IRQHandler+0x40c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d031      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a23      	ldr	r2, [pc, #140]	; (8005d50 <HAL_DMA_IRQHandler+0x410>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d02c      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a21      	ldr	r2, [pc, #132]	; (8005d54 <HAL_DMA_IRQHandler+0x414>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d027      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a20      	ldr	r2, [pc, #128]	; (8005d58 <HAL_DMA_IRQHandler+0x418>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d022      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1e      	ldr	r2, [pc, #120]	; (8005d5c <HAL_DMA_IRQHandler+0x41c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d01d      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1d      	ldr	r2, [pc, #116]	; (8005d60 <HAL_DMA_IRQHandler+0x420>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d018      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a1b      	ldr	r2, [pc, #108]	; (8005d64 <HAL_DMA_IRQHandler+0x424>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d013      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1a      	ldr	r2, [pc, #104]	; (8005d68 <HAL_DMA_IRQHandler+0x428>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00e      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a18      	ldr	r2, [pc, #96]	; (8005d6c <HAL_DMA_IRQHandler+0x42c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d009      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <HAL_DMA_IRQHandler+0x430>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d004      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x3e2>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a15      	ldr	r2, [pc, #84]	; (8005d74 <HAL_DMA_IRQHandler+0x434>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d12a      	bne.n	8005d78 <HAL_DMA_IRQHandler+0x438>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	bf14      	ite	ne
 8005d30:	2301      	movne	r3, #1
 8005d32:	2300      	moveq	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	e023      	b.n	8005d80 <HAL_DMA_IRQHandler+0x440>
 8005d38:	40020010 	.word	0x40020010
 8005d3c:	40020028 	.word	0x40020028
 8005d40:	40020040 	.word	0x40020040
 8005d44:	40020058 	.word	0x40020058
 8005d48:	40020070 	.word	0x40020070
 8005d4c:	40020088 	.word	0x40020088
 8005d50:	400200a0 	.word	0x400200a0
 8005d54:	400200b8 	.word	0x400200b8
 8005d58:	40020410 	.word	0x40020410
 8005d5c:	40020428 	.word	0x40020428
 8005d60:	40020440 	.word	0x40020440
 8005d64:	40020458 	.word	0x40020458
 8005d68:	40020470 	.word	0x40020470
 8005d6c:	40020488 	.word	0x40020488
 8005d70:	400204a0 	.word	0x400204a0
 8005d74:	400204b8 	.word	0x400204b8
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00d      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	2204      	movs	r2, #4
 8005d8e:	409a      	lsls	r2, r3
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d98:	f043 0204 	orr.w	r2, r3, #4
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da4:	f003 031f 	and.w	r3, r3, #31
 8005da8:	2210      	movs	r2, #16
 8005daa:	409a      	lsls	r2, r3
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80a6 	beq.w	8005f02 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a85      	ldr	r2, [pc, #532]	; (8005fd0 <HAL_DMA_IRQHandler+0x690>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d04a      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a83      	ldr	r2, [pc, #524]	; (8005fd4 <HAL_DMA_IRQHandler+0x694>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d045      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a82      	ldr	r2, [pc, #520]	; (8005fd8 <HAL_DMA_IRQHandler+0x698>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d040      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a80      	ldr	r2, [pc, #512]	; (8005fdc <HAL_DMA_IRQHandler+0x69c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d03b      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a7f      	ldr	r2, [pc, #508]	; (8005fe0 <HAL_DMA_IRQHandler+0x6a0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d036      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a7d      	ldr	r2, [pc, #500]	; (8005fe4 <HAL_DMA_IRQHandler+0x6a4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d031      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a7c      	ldr	r2, [pc, #496]	; (8005fe8 <HAL_DMA_IRQHandler+0x6a8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d02c      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a7a      	ldr	r2, [pc, #488]	; (8005fec <HAL_DMA_IRQHandler+0x6ac>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d027      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a79      	ldr	r2, [pc, #484]	; (8005ff0 <HAL_DMA_IRQHandler+0x6b0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d022      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a77      	ldr	r2, [pc, #476]	; (8005ff4 <HAL_DMA_IRQHandler+0x6b4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d01d      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a76      	ldr	r2, [pc, #472]	; (8005ff8 <HAL_DMA_IRQHandler+0x6b8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d018      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a74      	ldr	r2, [pc, #464]	; (8005ffc <HAL_DMA_IRQHandler+0x6bc>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d013      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a73      	ldr	r2, [pc, #460]	; (8006000 <HAL_DMA_IRQHandler+0x6c0>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00e      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a71      	ldr	r2, [pc, #452]	; (8006004 <HAL_DMA_IRQHandler+0x6c4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d009      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a70      	ldr	r2, [pc, #448]	; (8006008 <HAL_DMA_IRQHandler+0x6c8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x516>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a6e      	ldr	r2, [pc, #440]	; (800600c <HAL_DMA_IRQHandler+0x6cc>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d10a      	bne.n	8005e6c <HAL_DMA_IRQHandler+0x52c>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bf14      	ite	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	2300      	moveq	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	e009      	b.n	8005e80 <HAL_DMA_IRQHandler+0x540>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	bf14      	ite	ne
 8005e7a:	2301      	movne	r3, #1
 8005e7c:	2300      	moveq	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d03e      	beq.n	8005f02 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e88:	f003 031f 	and.w	r3, r3, #31
 8005e8c:	2210      	movs	r2, #16
 8005e8e:	409a      	lsls	r2, r3
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d018      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d108      	bne.n	8005ec2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d024      	beq.n	8005f02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	4798      	blx	r3
 8005ec0:	e01f      	b.n	8005f02 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01b      	beq.n	8005f02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
 8005ed2:	e016      	b.n	8005f02 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d107      	bne.n	8005ef2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0208 	bic.w	r2, r2, #8
 8005ef0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	409a      	lsls	r2, r3
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8110 	beq.w	8006138 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a2c      	ldr	r2, [pc, #176]	; (8005fd0 <HAL_DMA_IRQHandler+0x690>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d04a      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a2b      	ldr	r2, [pc, #172]	; (8005fd4 <HAL_DMA_IRQHandler+0x694>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d045      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a29      	ldr	r2, [pc, #164]	; (8005fd8 <HAL_DMA_IRQHandler+0x698>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d040      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a28      	ldr	r2, [pc, #160]	; (8005fdc <HAL_DMA_IRQHandler+0x69c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d03b      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a26      	ldr	r2, [pc, #152]	; (8005fe0 <HAL_DMA_IRQHandler+0x6a0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d036      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a25      	ldr	r2, [pc, #148]	; (8005fe4 <HAL_DMA_IRQHandler+0x6a4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d031      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a23      	ldr	r2, [pc, #140]	; (8005fe8 <HAL_DMA_IRQHandler+0x6a8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d02c      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a22      	ldr	r2, [pc, #136]	; (8005fec <HAL_DMA_IRQHandler+0x6ac>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d027      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a20      	ldr	r2, [pc, #128]	; (8005ff0 <HAL_DMA_IRQHandler+0x6b0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d022      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1f      	ldr	r2, [pc, #124]	; (8005ff4 <HAL_DMA_IRQHandler+0x6b4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d01d      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1d      	ldr	r2, [pc, #116]	; (8005ff8 <HAL_DMA_IRQHandler+0x6b8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d018      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1c      	ldr	r2, [pc, #112]	; (8005ffc <HAL_DMA_IRQHandler+0x6bc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d013      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a1a      	ldr	r2, [pc, #104]	; (8006000 <HAL_DMA_IRQHandler+0x6c0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00e      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a19      	ldr	r2, [pc, #100]	; (8006004 <HAL_DMA_IRQHandler+0x6c4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d009      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a17      	ldr	r2, [pc, #92]	; (8006008 <HAL_DMA_IRQHandler+0x6c8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d004      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x678>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a16      	ldr	r2, [pc, #88]	; (800600c <HAL_DMA_IRQHandler+0x6cc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d12b      	bne.n	8006010 <HAL_DMA_IRQHandler+0x6d0>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0310 	and.w	r3, r3, #16
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	bf14      	ite	ne
 8005fc6:	2301      	movne	r3, #1
 8005fc8:	2300      	moveq	r3, #0
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	e02a      	b.n	8006024 <HAL_DMA_IRQHandler+0x6e4>
 8005fce:	bf00      	nop
 8005fd0:	40020010 	.word	0x40020010
 8005fd4:	40020028 	.word	0x40020028
 8005fd8:	40020040 	.word	0x40020040
 8005fdc:	40020058 	.word	0x40020058
 8005fe0:	40020070 	.word	0x40020070
 8005fe4:	40020088 	.word	0x40020088
 8005fe8:	400200a0 	.word	0x400200a0
 8005fec:	400200b8 	.word	0x400200b8
 8005ff0:	40020410 	.word	0x40020410
 8005ff4:	40020428 	.word	0x40020428
 8005ff8:	40020440 	.word	0x40020440
 8005ffc:	40020458 	.word	0x40020458
 8006000:	40020470 	.word	0x40020470
 8006004:	40020488 	.word	0x40020488
 8006008:	400204a0 	.word	0x400204a0
 800600c:	400204b8 	.word	0x400204b8
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	bf14      	ite	ne
 800601e:	2301      	movne	r3, #1
 8006020:	2300      	moveq	r3, #0
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 8087 	beq.w	8006138 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602e:	f003 031f 	and.w	r3, r3, #31
 8006032:	2220      	movs	r2, #32
 8006034:	409a      	lsls	r2, r3
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b04      	cmp	r3, #4
 8006044:	d139      	bne.n	80060ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0216 	bic.w	r2, r2, #22
 8006054:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695a      	ldr	r2, [r3, #20]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006064:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	2b00      	cmp	r3, #0
 800606c:	d103      	bne.n	8006076 <HAL_DMA_IRQHandler+0x736>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0208 	bic.w	r2, r2, #8
 8006084:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608a:	f003 031f 	and.w	r3, r3, #31
 800608e:	223f      	movs	r2, #63	; 0x3f
 8006090:	409a      	lsls	r2, r3
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 834a 	beq.w	8006744 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	4798      	blx	r3
          }
          return;
 80060b8:	e344      	b.n	8006744 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d018      	beq.n	80060fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d108      	bne.n	80060e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d02c      	beq.n	8006138 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	4798      	blx	r3
 80060e6:	e027      	b.n	8006138 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d023      	beq.n	8006138 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4798      	blx	r3
 80060f8:	e01e      	b.n	8006138 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10f      	bne.n	8006128 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0210 	bic.w	r2, r2, #16
 8006116:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8306 	beq.w	800674e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 8088 	beq.w	8006260 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2204      	movs	r2, #4
 8006154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a7a      	ldr	r2, [pc, #488]	; (8006348 <HAL_DMA_IRQHandler+0xa08>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d04a      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a79      	ldr	r2, [pc, #484]	; (800634c <HAL_DMA_IRQHandler+0xa0c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d045      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a77      	ldr	r2, [pc, #476]	; (8006350 <HAL_DMA_IRQHandler+0xa10>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d040      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a76      	ldr	r2, [pc, #472]	; (8006354 <HAL_DMA_IRQHandler+0xa14>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d03b      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a74      	ldr	r2, [pc, #464]	; (8006358 <HAL_DMA_IRQHandler+0xa18>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d036      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a73      	ldr	r2, [pc, #460]	; (800635c <HAL_DMA_IRQHandler+0xa1c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d031      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a71      	ldr	r2, [pc, #452]	; (8006360 <HAL_DMA_IRQHandler+0xa20>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d02c      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a70      	ldr	r2, [pc, #448]	; (8006364 <HAL_DMA_IRQHandler+0xa24>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d027      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a6e      	ldr	r2, [pc, #440]	; (8006368 <HAL_DMA_IRQHandler+0xa28>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d022      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a6d      	ldr	r2, [pc, #436]	; (800636c <HAL_DMA_IRQHandler+0xa2c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d01d      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a6b      	ldr	r2, [pc, #428]	; (8006370 <HAL_DMA_IRQHandler+0xa30>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d018      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a6a      	ldr	r2, [pc, #424]	; (8006374 <HAL_DMA_IRQHandler+0xa34>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d013      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a68      	ldr	r2, [pc, #416]	; (8006378 <HAL_DMA_IRQHandler+0xa38>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00e      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a67      	ldr	r2, [pc, #412]	; (800637c <HAL_DMA_IRQHandler+0xa3c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d009      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a65      	ldr	r2, [pc, #404]	; (8006380 <HAL_DMA_IRQHandler+0xa40>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d004      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x8b8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a64      	ldr	r2, [pc, #400]	; (8006384 <HAL_DMA_IRQHandler+0xa44>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d108      	bne.n	800620a <HAL_DMA_IRQHandler+0x8ca>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0201 	bic.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	e007      	b.n	800621a <HAL_DMA_IRQHandler+0x8da>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0201 	bic.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3301      	adds	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006222:	429a      	cmp	r2, r3
 8006224:	d307      	bcc.n	8006236 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1f2      	bne.n	800621a <HAL_DMA_IRQHandler+0x8da>
 8006234:	e000      	b.n	8006238 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006236:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d004      	beq.n	8006250 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2203      	movs	r2, #3
 800624a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800624e:	e003      	b.n	8006258 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8272 	beq.w	800674e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	4798      	blx	r3
 8006272:	e26c      	b.n	800674e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a43      	ldr	r2, [pc, #268]	; (8006388 <HAL_DMA_IRQHandler+0xa48>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d022      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x984>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a42      	ldr	r2, [pc, #264]	; (800638c <HAL_DMA_IRQHandler+0xa4c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d01d      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x984>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a40      	ldr	r2, [pc, #256]	; (8006390 <HAL_DMA_IRQHandler+0xa50>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d018      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x984>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a3f      	ldr	r2, [pc, #252]	; (8006394 <HAL_DMA_IRQHandler+0xa54>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d013      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x984>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a3d      	ldr	r2, [pc, #244]	; (8006398 <HAL_DMA_IRQHandler+0xa58>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00e      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x984>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a3c      	ldr	r2, [pc, #240]	; (800639c <HAL_DMA_IRQHandler+0xa5c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d009      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x984>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a3a      	ldr	r2, [pc, #232]	; (80063a0 <HAL_DMA_IRQHandler+0xa60>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d004      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x984>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a39      	ldr	r2, [pc, #228]	; (80063a4 <HAL_DMA_IRQHandler+0xa64>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d101      	bne.n	80062c8 <HAL_DMA_IRQHandler+0x988>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <HAL_DMA_IRQHandler+0x98a>
 80062c8:	2300      	movs	r3, #0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 823f 	beq.w	800674e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	2204      	movs	r2, #4
 80062e2:	409a      	lsls	r2, r3
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	4013      	ands	r3, r2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80cd 	beq.w	8006488 <HAL_DMA_IRQHandler+0xb48>
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80c7 	beq.w	8006488 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	2204      	movs	r2, #4
 8006304:	409a      	lsls	r2, r3
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d049      	beq.n	80063a8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d109      	bne.n	8006332 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 8210 	beq.w	8006748 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006330:	e20a      	b.n	8006748 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 8206 	beq.w	8006748 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006344:	e200      	b.n	8006748 <HAL_DMA_IRQHandler+0xe08>
 8006346:	bf00      	nop
 8006348:	40020010 	.word	0x40020010
 800634c:	40020028 	.word	0x40020028
 8006350:	40020040 	.word	0x40020040
 8006354:	40020058 	.word	0x40020058
 8006358:	40020070 	.word	0x40020070
 800635c:	40020088 	.word	0x40020088
 8006360:	400200a0 	.word	0x400200a0
 8006364:	400200b8 	.word	0x400200b8
 8006368:	40020410 	.word	0x40020410
 800636c:	40020428 	.word	0x40020428
 8006370:	40020440 	.word	0x40020440
 8006374:	40020458 	.word	0x40020458
 8006378:	40020470 	.word	0x40020470
 800637c:	40020488 	.word	0x40020488
 8006380:	400204a0 	.word	0x400204a0
 8006384:	400204b8 	.word	0x400204b8
 8006388:	58025408 	.word	0x58025408
 800638c:	5802541c 	.word	0x5802541c
 8006390:	58025430 	.word	0x58025430
 8006394:	58025444 	.word	0x58025444
 8006398:	58025458 	.word	0x58025458
 800639c:	5802546c 	.word	0x5802546c
 80063a0:	58025480 	.word	0x58025480
 80063a4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d160      	bne.n	8006474 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a7f      	ldr	r2, [pc, #508]	; (80065b4 <HAL_DMA_IRQHandler+0xc74>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d04a      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a7d      	ldr	r2, [pc, #500]	; (80065b8 <HAL_DMA_IRQHandler+0xc78>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d045      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a7c      	ldr	r2, [pc, #496]	; (80065bc <HAL_DMA_IRQHandler+0xc7c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d040      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a7a      	ldr	r2, [pc, #488]	; (80065c0 <HAL_DMA_IRQHandler+0xc80>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d03b      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a79      	ldr	r2, [pc, #484]	; (80065c4 <HAL_DMA_IRQHandler+0xc84>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d036      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a77      	ldr	r2, [pc, #476]	; (80065c8 <HAL_DMA_IRQHandler+0xc88>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d031      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a76      	ldr	r2, [pc, #472]	; (80065cc <HAL_DMA_IRQHandler+0xc8c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d02c      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a74      	ldr	r2, [pc, #464]	; (80065d0 <HAL_DMA_IRQHandler+0xc90>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d027      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a73      	ldr	r2, [pc, #460]	; (80065d4 <HAL_DMA_IRQHandler+0xc94>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d022      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a71      	ldr	r2, [pc, #452]	; (80065d8 <HAL_DMA_IRQHandler+0xc98>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d01d      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a70      	ldr	r2, [pc, #448]	; (80065dc <HAL_DMA_IRQHandler+0xc9c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d018      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a6e      	ldr	r2, [pc, #440]	; (80065e0 <HAL_DMA_IRQHandler+0xca0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d013      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a6d      	ldr	r2, [pc, #436]	; (80065e4 <HAL_DMA_IRQHandler+0xca4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00e      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a6b      	ldr	r2, [pc, #428]	; (80065e8 <HAL_DMA_IRQHandler+0xca8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d009      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a6a      	ldr	r2, [pc, #424]	; (80065ec <HAL_DMA_IRQHandler+0xcac>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d004      	beq.n	8006452 <HAL_DMA_IRQHandler+0xb12>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a68      	ldr	r2, [pc, #416]	; (80065f0 <HAL_DMA_IRQHandler+0xcb0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d108      	bne.n	8006464 <HAL_DMA_IRQHandler+0xb24>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0208 	bic.w	r2, r2, #8
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	e007      	b.n	8006474 <HAL_DMA_IRQHandler+0xb34>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0204 	bic.w	r2, r2, #4
 8006472:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 8165 	beq.w	8006748 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006486:	e15f      	b.n	8006748 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648c:	f003 031f 	and.w	r3, r3, #31
 8006490:	2202      	movs	r2, #2
 8006492:	409a      	lsls	r2, r3
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	4013      	ands	r3, r2
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 80c5 	beq.w	8006628 <HAL_DMA_IRQHandler+0xce8>
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 80bf 	beq.w	8006628 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ae:	f003 031f 	and.w	r3, r3, #31
 80064b2:	2202      	movs	r2, #2
 80064b4:	409a      	lsls	r2, r3
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d018      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 813a 	beq.w	800674c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064e0:	e134      	b.n	800674c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 8130 	beq.w	800674c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064f4:	e12a      	b.n	800674c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f003 0320 	and.w	r3, r3, #32
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f040 8089 	bne.w	8006614 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2b      	ldr	r2, [pc, #172]	; (80065b4 <HAL_DMA_IRQHandler+0xc74>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d04a      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a29      	ldr	r2, [pc, #164]	; (80065b8 <HAL_DMA_IRQHandler+0xc78>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d045      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a28      	ldr	r2, [pc, #160]	; (80065bc <HAL_DMA_IRQHandler+0xc7c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d040      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a26      	ldr	r2, [pc, #152]	; (80065c0 <HAL_DMA_IRQHandler+0xc80>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d03b      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a25      	ldr	r2, [pc, #148]	; (80065c4 <HAL_DMA_IRQHandler+0xc84>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d036      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a23      	ldr	r2, [pc, #140]	; (80065c8 <HAL_DMA_IRQHandler+0xc88>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d031      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a22      	ldr	r2, [pc, #136]	; (80065cc <HAL_DMA_IRQHandler+0xc8c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d02c      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a20      	ldr	r2, [pc, #128]	; (80065d0 <HAL_DMA_IRQHandler+0xc90>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d027      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1f      	ldr	r2, [pc, #124]	; (80065d4 <HAL_DMA_IRQHandler+0xc94>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d022      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1d      	ldr	r2, [pc, #116]	; (80065d8 <HAL_DMA_IRQHandler+0xc98>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d01d      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a1c      	ldr	r2, [pc, #112]	; (80065dc <HAL_DMA_IRQHandler+0xc9c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d018      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1a      	ldr	r2, [pc, #104]	; (80065e0 <HAL_DMA_IRQHandler+0xca0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a19      	ldr	r2, [pc, #100]	; (80065e4 <HAL_DMA_IRQHandler+0xca4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d00e      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <HAL_DMA_IRQHandler+0xca8>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d009      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a16      	ldr	r2, [pc, #88]	; (80065ec <HAL_DMA_IRQHandler+0xcac>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d004      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xc62>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a14      	ldr	r2, [pc, #80]	; (80065f0 <HAL_DMA_IRQHandler+0xcb0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d128      	bne.n	80065f4 <HAL_DMA_IRQHandler+0xcb4>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0214 	bic.w	r2, r2, #20
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e027      	b.n	8006604 <HAL_DMA_IRQHandler+0xcc4>
 80065b4:	40020010 	.word	0x40020010
 80065b8:	40020028 	.word	0x40020028
 80065bc:	40020040 	.word	0x40020040
 80065c0:	40020058 	.word	0x40020058
 80065c4:	40020070 	.word	0x40020070
 80065c8:	40020088 	.word	0x40020088
 80065cc:	400200a0 	.word	0x400200a0
 80065d0:	400200b8 	.word	0x400200b8
 80065d4:	40020410 	.word	0x40020410
 80065d8:	40020428 	.word	0x40020428
 80065dc:	40020440 	.word	0x40020440
 80065e0:	40020458 	.word	0x40020458
 80065e4:	40020470 	.word	0x40020470
 80065e8:	40020488 	.word	0x40020488
 80065ec:	400204a0 	.word	0x400204a0
 80065f0:	400204b8 	.word	0x400204b8
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 020a 	bic.w	r2, r2, #10
 8006602:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 8097 	beq.w	800674c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006626:	e091      	b.n	800674c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	2208      	movs	r2, #8
 8006632:	409a      	lsls	r2, r3
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	4013      	ands	r3, r2
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8088 	beq.w	800674e <HAL_DMA_IRQHandler+0xe0e>
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 8082 	beq.w	800674e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a41      	ldr	r2, [pc, #260]	; (8006754 <HAL_DMA_IRQHandler+0xe14>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d04a      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a3f      	ldr	r2, [pc, #252]	; (8006758 <HAL_DMA_IRQHandler+0xe18>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d045      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a3e      	ldr	r2, [pc, #248]	; (800675c <HAL_DMA_IRQHandler+0xe1c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d040      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a3c      	ldr	r2, [pc, #240]	; (8006760 <HAL_DMA_IRQHandler+0xe20>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d03b      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a3b      	ldr	r2, [pc, #236]	; (8006764 <HAL_DMA_IRQHandler+0xe24>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d036      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a39      	ldr	r2, [pc, #228]	; (8006768 <HAL_DMA_IRQHandler+0xe28>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d031      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a38      	ldr	r2, [pc, #224]	; (800676c <HAL_DMA_IRQHandler+0xe2c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d02c      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a36      	ldr	r2, [pc, #216]	; (8006770 <HAL_DMA_IRQHandler+0xe30>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d027      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a35      	ldr	r2, [pc, #212]	; (8006774 <HAL_DMA_IRQHandler+0xe34>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d022      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a33      	ldr	r2, [pc, #204]	; (8006778 <HAL_DMA_IRQHandler+0xe38>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d01d      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a32      	ldr	r2, [pc, #200]	; (800677c <HAL_DMA_IRQHandler+0xe3c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d018      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a30      	ldr	r2, [pc, #192]	; (8006780 <HAL_DMA_IRQHandler+0xe40>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d013      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a2f      	ldr	r2, [pc, #188]	; (8006784 <HAL_DMA_IRQHandler+0xe44>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00e      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a2d      	ldr	r2, [pc, #180]	; (8006788 <HAL_DMA_IRQHandler+0xe48>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d009      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a2c      	ldr	r2, [pc, #176]	; (800678c <HAL_DMA_IRQHandler+0xe4c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d004      	beq.n	80066ea <HAL_DMA_IRQHandler+0xdaa>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a2a      	ldr	r2, [pc, #168]	; (8006790 <HAL_DMA_IRQHandler+0xe50>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d108      	bne.n	80066fc <HAL_DMA_IRQHandler+0xdbc>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 021c 	bic.w	r2, r2, #28
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	e007      	b.n	800670c <HAL_DMA_IRQHandler+0xdcc>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 020e 	bic.w	r2, r2, #14
 800670a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006710:	f003 031f 	and.w	r3, r3, #31
 8006714:	2201      	movs	r2, #1
 8006716:	409a      	lsls	r2, r3
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006736:	2b00      	cmp	r3, #0
 8006738:	d009      	beq.n	800674e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	4798      	blx	r3
 8006742:	e004      	b.n	800674e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006744:	bf00      	nop
 8006746:	e002      	b.n	800674e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006748:	bf00      	nop
 800674a:	e000      	b.n	800674e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800674c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800674e:	3728      	adds	r7, #40	; 0x28
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	40020010 	.word	0x40020010
 8006758:	40020028 	.word	0x40020028
 800675c:	40020040 	.word	0x40020040
 8006760:	40020058 	.word	0x40020058
 8006764:	40020070 	.word	0x40020070
 8006768:	40020088 	.word	0x40020088
 800676c:	400200a0 	.word	0x400200a0
 8006770:	400200b8 	.word	0x400200b8
 8006774:	40020410 	.word	0x40020410
 8006778:	40020428 	.word	0x40020428
 800677c:	40020440 	.word	0x40020440
 8006780:	40020458 	.word	0x40020458
 8006784:	40020470 	.word	0x40020470
 8006788:	40020488 	.word	0x40020488
 800678c:	400204a0 	.word	0x400204a0
 8006790:	400204b8 	.word	0x400204b8

08006794 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067be:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a7f      	ldr	r2, [pc, #508]	; (80069c8 <DMA_SetConfig+0x21c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d072      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a7d      	ldr	r2, [pc, #500]	; (80069cc <DMA_SetConfig+0x220>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d06d      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a7c      	ldr	r2, [pc, #496]	; (80069d0 <DMA_SetConfig+0x224>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d068      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a7a      	ldr	r2, [pc, #488]	; (80069d4 <DMA_SetConfig+0x228>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d063      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a79      	ldr	r2, [pc, #484]	; (80069d8 <DMA_SetConfig+0x22c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d05e      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a77      	ldr	r2, [pc, #476]	; (80069dc <DMA_SetConfig+0x230>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d059      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a76      	ldr	r2, [pc, #472]	; (80069e0 <DMA_SetConfig+0x234>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d054      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a74      	ldr	r2, [pc, #464]	; (80069e4 <DMA_SetConfig+0x238>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d04f      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a73      	ldr	r2, [pc, #460]	; (80069e8 <DMA_SetConfig+0x23c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d04a      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a71      	ldr	r2, [pc, #452]	; (80069ec <DMA_SetConfig+0x240>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d045      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a70      	ldr	r2, [pc, #448]	; (80069f0 <DMA_SetConfig+0x244>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d040      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a6e      	ldr	r2, [pc, #440]	; (80069f4 <DMA_SetConfig+0x248>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d03b      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a6d      	ldr	r2, [pc, #436]	; (80069f8 <DMA_SetConfig+0x24c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d036      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a6b      	ldr	r2, [pc, #428]	; (80069fc <DMA_SetConfig+0x250>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d031      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a6a      	ldr	r2, [pc, #424]	; (8006a00 <DMA_SetConfig+0x254>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d02c      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a68      	ldr	r2, [pc, #416]	; (8006a04 <DMA_SetConfig+0x258>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d027      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a67      	ldr	r2, [pc, #412]	; (8006a08 <DMA_SetConfig+0x25c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d022      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a65      	ldr	r2, [pc, #404]	; (8006a0c <DMA_SetConfig+0x260>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d01d      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a64      	ldr	r2, [pc, #400]	; (8006a10 <DMA_SetConfig+0x264>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d018      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a62      	ldr	r2, [pc, #392]	; (8006a14 <DMA_SetConfig+0x268>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d013      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a61      	ldr	r2, [pc, #388]	; (8006a18 <DMA_SetConfig+0x26c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00e      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a5f      	ldr	r2, [pc, #380]	; (8006a1c <DMA_SetConfig+0x270>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d009      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a5e      	ldr	r2, [pc, #376]	; (8006a20 <DMA_SetConfig+0x274>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d004      	beq.n	80068b6 <DMA_SetConfig+0x10a>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a5c      	ldr	r2, [pc, #368]	; (8006a24 <DMA_SetConfig+0x278>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d101      	bne.n	80068ba <DMA_SetConfig+0x10e>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e000      	b.n	80068bc <DMA_SetConfig+0x110>
 80068ba:	2300      	movs	r3, #0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00d      	beq.n	80068dc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80068c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d004      	beq.n	80068dc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80068da:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a39      	ldr	r2, [pc, #228]	; (80069c8 <DMA_SetConfig+0x21c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d04a      	beq.n	800697c <DMA_SetConfig+0x1d0>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a38      	ldr	r2, [pc, #224]	; (80069cc <DMA_SetConfig+0x220>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d045      	beq.n	800697c <DMA_SetConfig+0x1d0>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a36      	ldr	r2, [pc, #216]	; (80069d0 <DMA_SetConfig+0x224>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d040      	beq.n	800697c <DMA_SetConfig+0x1d0>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a35      	ldr	r2, [pc, #212]	; (80069d4 <DMA_SetConfig+0x228>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d03b      	beq.n	800697c <DMA_SetConfig+0x1d0>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a33      	ldr	r2, [pc, #204]	; (80069d8 <DMA_SetConfig+0x22c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d036      	beq.n	800697c <DMA_SetConfig+0x1d0>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a32      	ldr	r2, [pc, #200]	; (80069dc <DMA_SetConfig+0x230>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d031      	beq.n	800697c <DMA_SetConfig+0x1d0>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a30      	ldr	r2, [pc, #192]	; (80069e0 <DMA_SetConfig+0x234>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d02c      	beq.n	800697c <DMA_SetConfig+0x1d0>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a2f      	ldr	r2, [pc, #188]	; (80069e4 <DMA_SetConfig+0x238>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d027      	beq.n	800697c <DMA_SetConfig+0x1d0>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a2d      	ldr	r2, [pc, #180]	; (80069e8 <DMA_SetConfig+0x23c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d022      	beq.n	800697c <DMA_SetConfig+0x1d0>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a2c      	ldr	r2, [pc, #176]	; (80069ec <DMA_SetConfig+0x240>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d01d      	beq.n	800697c <DMA_SetConfig+0x1d0>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a2a      	ldr	r2, [pc, #168]	; (80069f0 <DMA_SetConfig+0x244>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d018      	beq.n	800697c <DMA_SetConfig+0x1d0>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a29      	ldr	r2, [pc, #164]	; (80069f4 <DMA_SetConfig+0x248>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d013      	beq.n	800697c <DMA_SetConfig+0x1d0>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a27      	ldr	r2, [pc, #156]	; (80069f8 <DMA_SetConfig+0x24c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00e      	beq.n	800697c <DMA_SetConfig+0x1d0>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a26      	ldr	r2, [pc, #152]	; (80069fc <DMA_SetConfig+0x250>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d009      	beq.n	800697c <DMA_SetConfig+0x1d0>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a24      	ldr	r2, [pc, #144]	; (8006a00 <DMA_SetConfig+0x254>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d004      	beq.n	800697c <DMA_SetConfig+0x1d0>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a23      	ldr	r2, [pc, #140]	; (8006a04 <DMA_SetConfig+0x258>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d101      	bne.n	8006980 <DMA_SetConfig+0x1d4>
 800697c:	2301      	movs	r3, #1
 800697e:	e000      	b.n	8006982 <DMA_SetConfig+0x1d6>
 8006980:	2300      	movs	r3, #0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d059      	beq.n	8006a3a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698a:	f003 031f 	and.w	r3, r3, #31
 800698e:	223f      	movs	r2, #63	; 0x3f
 8006990:	409a      	lsls	r2, r3
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80069a4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b40      	cmp	r3, #64	; 0x40
 80069b4:	d138      	bne.n	8006a28 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80069c6:	e086      	b.n	8006ad6 <DMA_SetConfig+0x32a>
 80069c8:	40020010 	.word	0x40020010
 80069cc:	40020028 	.word	0x40020028
 80069d0:	40020040 	.word	0x40020040
 80069d4:	40020058 	.word	0x40020058
 80069d8:	40020070 	.word	0x40020070
 80069dc:	40020088 	.word	0x40020088
 80069e0:	400200a0 	.word	0x400200a0
 80069e4:	400200b8 	.word	0x400200b8
 80069e8:	40020410 	.word	0x40020410
 80069ec:	40020428 	.word	0x40020428
 80069f0:	40020440 	.word	0x40020440
 80069f4:	40020458 	.word	0x40020458
 80069f8:	40020470 	.word	0x40020470
 80069fc:	40020488 	.word	0x40020488
 8006a00:	400204a0 	.word	0x400204a0
 8006a04:	400204b8 	.word	0x400204b8
 8006a08:	58025408 	.word	0x58025408
 8006a0c:	5802541c 	.word	0x5802541c
 8006a10:	58025430 	.word	0x58025430
 8006a14:	58025444 	.word	0x58025444
 8006a18:	58025458 	.word	0x58025458
 8006a1c:	5802546c 	.word	0x5802546c
 8006a20:	58025480 	.word	0x58025480
 8006a24:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	60da      	str	r2, [r3, #12]
}
 8006a38:	e04d      	b.n	8006ad6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a29      	ldr	r2, [pc, #164]	; (8006ae4 <DMA_SetConfig+0x338>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d022      	beq.n	8006a8a <DMA_SetConfig+0x2de>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a27      	ldr	r2, [pc, #156]	; (8006ae8 <DMA_SetConfig+0x33c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d01d      	beq.n	8006a8a <DMA_SetConfig+0x2de>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a26      	ldr	r2, [pc, #152]	; (8006aec <DMA_SetConfig+0x340>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d018      	beq.n	8006a8a <DMA_SetConfig+0x2de>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a24      	ldr	r2, [pc, #144]	; (8006af0 <DMA_SetConfig+0x344>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d013      	beq.n	8006a8a <DMA_SetConfig+0x2de>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a23      	ldr	r2, [pc, #140]	; (8006af4 <DMA_SetConfig+0x348>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00e      	beq.n	8006a8a <DMA_SetConfig+0x2de>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a21      	ldr	r2, [pc, #132]	; (8006af8 <DMA_SetConfig+0x34c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d009      	beq.n	8006a8a <DMA_SetConfig+0x2de>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a20      	ldr	r2, [pc, #128]	; (8006afc <DMA_SetConfig+0x350>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d004      	beq.n	8006a8a <DMA_SetConfig+0x2de>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1e      	ldr	r2, [pc, #120]	; (8006b00 <DMA_SetConfig+0x354>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d101      	bne.n	8006a8e <DMA_SetConfig+0x2e2>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <DMA_SetConfig+0x2e4>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d020      	beq.n	8006ad6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a98:	f003 031f 	and.w	r3, r3, #31
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	409a      	lsls	r2, r3
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	2b40      	cmp	r3, #64	; 0x40
 8006ab2:	d108      	bne.n	8006ac6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	60da      	str	r2, [r3, #12]
}
 8006ac4:	e007      	b.n	8006ad6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	60da      	str	r2, [r3, #12]
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	58025408 	.word	0x58025408
 8006ae8:	5802541c 	.word	0x5802541c
 8006aec:	58025430 	.word	0x58025430
 8006af0:	58025444 	.word	0x58025444
 8006af4:	58025458 	.word	0x58025458
 8006af8:	5802546c 	.word	0x5802546c
 8006afc:	58025480 	.word	0x58025480
 8006b00:	58025494 	.word	0x58025494

08006b04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a42      	ldr	r2, [pc, #264]	; (8006c1c <DMA_CalcBaseAndBitshift+0x118>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d04a      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a41      	ldr	r2, [pc, #260]	; (8006c20 <DMA_CalcBaseAndBitshift+0x11c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d045      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a3f      	ldr	r2, [pc, #252]	; (8006c24 <DMA_CalcBaseAndBitshift+0x120>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d040      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a3e      	ldr	r2, [pc, #248]	; (8006c28 <DMA_CalcBaseAndBitshift+0x124>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d03b      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a3c      	ldr	r2, [pc, #240]	; (8006c2c <DMA_CalcBaseAndBitshift+0x128>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d036      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a3b      	ldr	r2, [pc, #236]	; (8006c30 <DMA_CalcBaseAndBitshift+0x12c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d031      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a39      	ldr	r2, [pc, #228]	; (8006c34 <DMA_CalcBaseAndBitshift+0x130>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d02c      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a38      	ldr	r2, [pc, #224]	; (8006c38 <DMA_CalcBaseAndBitshift+0x134>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d027      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a36      	ldr	r2, [pc, #216]	; (8006c3c <DMA_CalcBaseAndBitshift+0x138>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d022      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a35      	ldr	r2, [pc, #212]	; (8006c40 <DMA_CalcBaseAndBitshift+0x13c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d01d      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a33      	ldr	r2, [pc, #204]	; (8006c44 <DMA_CalcBaseAndBitshift+0x140>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d018      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a32      	ldr	r2, [pc, #200]	; (8006c48 <DMA_CalcBaseAndBitshift+0x144>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a30      	ldr	r2, [pc, #192]	; (8006c4c <DMA_CalcBaseAndBitshift+0x148>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00e      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a2f      	ldr	r2, [pc, #188]	; (8006c50 <DMA_CalcBaseAndBitshift+0x14c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a2d      	ldr	r2, [pc, #180]	; (8006c54 <DMA_CalcBaseAndBitshift+0x150>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <DMA_CalcBaseAndBitshift+0xa8>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a2c      	ldr	r2, [pc, #176]	; (8006c58 <DMA_CalcBaseAndBitshift+0x154>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d101      	bne.n	8006bb0 <DMA_CalcBaseAndBitshift+0xac>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <DMA_CalcBaseAndBitshift+0xae>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d024      	beq.n	8006c00 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	3b10      	subs	r3, #16
 8006bbe:	4a27      	ldr	r2, [pc, #156]	; (8006c5c <DMA_CalcBaseAndBitshift+0x158>)
 8006bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc4:	091b      	lsrs	r3, r3, #4
 8006bc6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	4a24      	ldr	r2, [pc, #144]	; (8006c60 <DMA_CalcBaseAndBitshift+0x15c>)
 8006bd0:	5cd3      	ldrb	r3, [r2, r3]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d908      	bls.n	8006bf0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	4b1f      	ldr	r3, [pc, #124]	; (8006c64 <DMA_CalcBaseAndBitshift+0x160>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	1d1a      	adds	r2, r3, #4
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	659a      	str	r2, [r3, #88]	; 0x58
 8006bee:	e00d      	b.n	8006c0c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	4b1b      	ldr	r3, [pc, #108]	; (8006c64 <DMA_CalcBaseAndBitshift+0x160>)
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8006bfe:	e005      	b.n	8006c0c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	40020010 	.word	0x40020010
 8006c20:	40020028 	.word	0x40020028
 8006c24:	40020040 	.word	0x40020040
 8006c28:	40020058 	.word	0x40020058
 8006c2c:	40020070 	.word	0x40020070
 8006c30:	40020088 	.word	0x40020088
 8006c34:	400200a0 	.word	0x400200a0
 8006c38:	400200b8 	.word	0x400200b8
 8006c3c:	40020410 	.word	0x40020410
 8006c40:	40020428 	.word	0x40020428
 8006c44:	40020440 	.word	0x40020440
 8006c48:	40020458 	.word	0x40020458
 8006c4c:	40020470 	.word	0x40020470
 8006c50:	40020488 	.word	0x40020488
 8006c54:	400204a0 	.word	0x400204a0
 8006c58:	400204b8 	.word	0x400204b8
 8006c5c:	aaaaaaab 	.word	0xaaaaaaab
 8006c60:	080174d0 	.word	0x080174d0
 8006c64:	fffffc00 	.word	0xfffffc00

08006c68 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d120      	bne.n	8006cbe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	2b03      	cmp	r3, #3
 8006c82:	d858      	bhi.n	8006d36 <DMA_CheckFifoParam+0xce>
 8006c84:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <DMA_CheckFifoParam+0x24>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006c9d 	.word	0x08006c9d
 8006c90:	08006caf 	.word	0x08006caf
 8006c94:	08006c9d 	.word	0x08006c9d
 8006c98:	08006d37 	.word	0x08006d37
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d048      	beq.n	8006d3a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006cac:	e045      	b.n	8006d3a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006cb6:	d142      	bne.n	8006d3e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006cbc:	e03f      	b.n	8006d3e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cc6:	d123      	bne.n	8006d10 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d838      	bhi.n	8006d42 <DMA_CheckFifoParam+0xda>
 8006cd0:	a201      	add	r2, pc, #4	; (adr r2, 8006cd8 <DMA_CheckFifoParam+0x70>)
 8006cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd6:	bf00      	nop
 8006cd8:	08006ce9 	.word	0x08006ce9
 8006cdc:	08006cef 	.word	0x08006cef
 8006ce0:	08006ce9 	.word	0x08006ce9
 8006ce4:	08006d01 	.word	0x08006d01
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	73fb      	strb	r3, [r7, #15]
        break;
 8006cec:	e030      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d025      	beq.n	8006d46 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006cfe:	e022      	b.n	8006d46 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d08:	d11f      	bne.n	8006d4a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d0e:	e01c      	b.n	8006d4a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d902      	bls.n	8006d1e <DMA_CheckFifoParam+0xb6>
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d003      	beq.n	8006d24 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006d1c:	e018      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	73fb      	strb	r3, [r7, #15]
        break;
 8006d22:	e015      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00e      	beq.n	8006d4e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
    break;
 8006d34:	e00b      	b.n	8006d4e <DMA_CheckFifoParam+0xe6>
        break;
 8006d36:	bf00      	nop
 8006d38:	e00a      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
        break;
 8006d3a:	bf00      	nop
 8006d3c:	e008      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
        break;
 8006d3e:	bf00      	nop
 8006d40:	e006      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
        break;
 8006d42:	bf00      	nop
 8006d44:	e004      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
        break;
 8006d46:	bf00      	nop
 8006d48:	e002      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
        break;
 8006d4a:	bf00      	nop
 8006d4c:	e000      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
    break;
 8006d4e:	bf00      	nop
    }
  }

  return status;
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop

08006d60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a38      	ldr	r2, [pc, #224]	; (8006e54 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d022      	beq.n	8006dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a36      	ldr	r2, [pc, #216]	; (8006e58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d01d      	beq.n	8006dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a35      	ldr	r2, [pc, #212]	; (8006e5c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d018      	beq.n	8006dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a33      	ldr	r2, [pc, #204]	; (8006e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d013      	beq.n	8006dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a32      	ldr	r2, [pc, #200]	; (8006e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d00e      	beq.n	8006dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a30      	ldr	r2, [pc, #192]	; (8006e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d009      	beq.n	8006dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a2f      	ldr	r2, [pc, #188]	; (8006e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d004      	beq.n	8006dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a2d      	ldr	r2, [pc, #180]	; (8006e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d101      	bne.n	8006dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01a      	beq.n	8006dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	3b08      	subs	r3, #8
 8006dd0:	4a28      	ldr	r2, [pc, #160]	; (8006e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd6:	091b      	lsrs	r3, r3, #4
 8006dd8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4b26      	ldr	r3, [pc, #152]	; (8006e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a24      	ldr	r2, [pc, #144]	; (8006e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006dec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	2201      	movs	r2, #1
 8006df6:	409a      	lsls	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006dfc:	e024      	b.n	8006e48 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	3b10      	subs	r3, #16
 8006e06:	4a1e      	ldr	r2, [pc, #120]	; (8006e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006e08:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0c:	091b      	lsrs	r3, r3, #4
 8006e0e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	4a1c      	ldr	r2, [pc, #112]	; (8006e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d806      	bhi.n	8006e26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4a1b      	ldr	r2, [pc, #108]	; (8006e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d902      	bls.n	8006e26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3308      	adds	r3, #8
 8006e24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4b18      	ldr	r3, [pc, #96]	; (8006e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	461a      	mov	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a16      	ldr	r2, [pc, #88]	; (8006e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006e38:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	2201      	movs	r2, #1
 8006e42:	409a      	lsls	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006e48:	bf00      	nop
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	58025408 	.word	0x58025408
 8006e58:	5802541c 	.word	0x5802541c
 8006e5c:	58025430 	.word	0x58025430
 8006e60:	58025444 	.word	0x58025444
 8006e64:	58025458 	.word	0x58025458
 8006e68:	5802546c 	.word	0x5802546c
 8006e6c:	58025480 	.word	0x58025480
 8006e70:	58025494 	.word	0x58025494
 8006e74:	cccccccd 	.word	0xcccccccd
 8006e78:	16009600 	.word	0x16009600
 8006e7c:	58025880 	.word	0x58025880
 8006e80:	aaaaaaab 	.word	0xaaaaaaab
 8006e84:	400204b8 	.word	0x400204b8
 8006e88:	4002040f 	.word	0x4002040f
 8006e8c:	10008200 	.word	0x10008200
 8006e90:	40020880 	.word	0x40020880

08006e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d04a      	beq.n	8006f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d847      	bhi.n	8006f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a25      	ldr	r2, [pc, #148]	; (8006f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d022      	beq.n	8006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a24      	ldr	r2, [pc, #144]	; (8006f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d01d      	beq.n	8006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a22      	ldr	r2, [pc, #136]	; (8006f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d018      	beq.n	8006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a21      	ldr	r2, [pc, #132]	; (8006f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1f      	ldr	r2, [pc, #124]	; (8006f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00e      	beq.n	8006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1e      	ldr	r2, [pc, #120]	; (8006f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d009      	beq.n	8006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1c      	ldr	r2, [pc, #112]	; (8006f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d004      	beq.n	8006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a1b      	ldr	r2, [pc, #108]	; (8006f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d101      	bne.n	8006f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006f00:	2301      	movs	r3, #1
 8006f02:	e000      	b.n	8006f06 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006f04:	2300      	movs	r3, #0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4b17      	ldr	r3, [pc, #92]	; (8006f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	461a      	mov	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a15      	ldr	r2, [pc, #84]	; (8006f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006f1c:	671a      	str	r2, [r3, #112]	; 0x70
 8006f1e:	e009      	b.n	8006f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4b14      	ldr	r3, [pc, #80]	; (8006f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	461a      	mov	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a11      	ldr	r2, [pc, #68]	; (8006f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006f32:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	2201      	movs	r2, #1
 8006f3a:	409a      	lsls	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006f40:	bf00      	nop
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	58025408 	.word	0x58025408
 8006f50:	5802541c 	.word	0x5802541c
 8006f54:	58025430 	.word	0x58025430
 8006f58:	58025444 	.word	0x58025444
 8006f5c:	58025458 	.word	0x58025458
 8006f60:	5802546c 	.word	0x5802546c
 8006f64:	58025480 	.word	0x58025480
 8006f68:	58025494 	.word	0x58025494
 8006f6c:	1600963f 	.word	0x1600963f
 8006f70:	58025940 	.word	0x58025940
 8006f74:	1000823f 	.word	0x1000823f
 8006f78:	40020940 	.word	0x40020940

08006f7c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	7a1b      	ldrb	r3, [r3, #8]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d155      	bne.n	8007042 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a4b      	ldr	r2, [pc, #300]	; (80070c8 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d049      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a49      	ldr	r2, [pc, #292]	; (80070cc <HAL_DMAEx_ConfigMuxSync+0x150>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d044      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a48      	ldr	r2, [pc, #288]	; (80070d0 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d03f      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a46      	ldr	r2, [pc, #280]	; (80070d4 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d03a      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a45      	ldr	r2, [pc, #276]	; (80070d8 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d035      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a43      	ldr	r2, [pc, #268]	; (80070dc <HAL_DMAEx_ConfigMuxSync+0x160>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d030      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a42      	ldr	r2, [pc, #264]	; (80070e0 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d02b      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a40      	ldr	r2, [pc, #256]	; (80070e4 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d026      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a3f      	ldr	r2, [pc, #252]	; (80070e8 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d021      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a3d      	ldr	r2, [pc, #244]	; (80070ec <HAL_DMAEx_ConfigMuxSync+0x170>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d01c      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a3c      	ldr	r2, [pc, #240]	; (80070f0 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d017      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a3a      	ldr	r2, [pc, #232]	; (80070f4 <HAL_DMAEx_ConfigMuxSync+0x178>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d012      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a39      	ldr	r2, [pc, #228]	; (80070f8 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d00d      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a37      	ldr	r2, [pc, #220]	; (80070fc <HAL_DMAEx_ConfigMuxSync+0x180>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d008      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a36      	ldr	r2, [pc, #216]	; (8007100 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d003      	beq.n	8007034 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a34      	ldr	r2, [pc, #208]	; (8007104 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8007032:	4293      	cmp	r3, r2
 8007034:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b01      	cmp	r3, #1
 800704c:	d131      	bne.n	80070b2 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_DMAEx_ConfigMuxSync+0xe0>
 8007058:	2302      	movs	r3, #2
 800705a:	e02f      	b.n	80070bc <HAL_DMAEx_ConfigMuxSync+0x140>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800706e:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8007072:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	b2d9      	uxtb	r1, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	061a      	lsls	r2, r3, #24
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	3b01      	subs	r3, #1
 8007086:	04db      	lsls	r3, r3, #19
 8007088:	431a      	orrs	r2, r3
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	431a      	orrs	r2, r3
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	7a1b      	ldrb	r3, [r3, #8]
 8007092:	041b      	lsls	r3, r3, #16
 8007094:	431a      	orrs	r2, r3
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	7a5b      	ldrb	r3, [r3, #9]
 800709a:	025b      	lsls	r3, r3, #9
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070a2:	430a      	orrs	r2, r1
 80070a4:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	e004      	b.n	80070bc <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
  }
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	40020010 	.word	0x40020010
 80070cc:	40020028 	.word	0x40020028
 80070d0:	40020040 	.word	0x40020040
 80070d4:	40020058 	.word	0x40020058
 80070d8:	40020070 	.word	0x40020070
 80070dc:	40020088 	.word	0x40020088
 80070e0:	400200a0 	.word	0x400200a0
 80070e4:	400200b8 	.word	0x400200b8
 80070e8:	40020410 	.word	0x40020410
 80070ec:	40020428 	.word	0x40020428
 80070f0:	40020440 	.word	0x40020440
 80070f4:	40020458 	.word	0x40020458
 80070f8:	40020470 	.word	0x40020470
 80070fc:	40020488 	.word	0x40020488
 8007100:	400204a0 	.word	0x400204a0
 8007104:	400204b8 	.word	0x400204b8

08007108 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800711a:	4013      	ands	r3, r2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d01a      	beq.n	8007156 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800712a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800712e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007138:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d022      	beq.n	80071a4 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007168:	4013      	ands	r3, r2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d01a      	beq.n	80071a4 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800717c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007186:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	4798      	blx	r3
      }
    }
  }
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b089      	sub	sp, #36	; 0x24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80071ba:	4b89      	ldr	r3, [pc, #548]	; (80073e0 <HAL_GPIO_Init+0x234>)
 80071bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80071be:	e194      	b.n	80074ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	2101      	movs	r1, #1
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	fa01 f303 	lsl.w	r3, r1, r3
 80071cc:	4013      	ands	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 8186 	beq.w	80074e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f003 0303 	and.w	r3, r3, #3
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d005      	beq.n	80071f0 <HAL_GPIO_Init+0x44>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f003 0303 	and.w	r3, r3, #3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d130      	bne.n	8007252 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	2203      	movs	r2, #3
 80071fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007200:	43db      	mvns	r3, r3
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	4013      	ands	r3, r2
 8007206:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	fa02 f303 	lsl.w	r3, r2, r3
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	4313      	orrs	r3, r2
 8007218:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007226:	2201      	movs	r2, #1
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	fa02 f303 	lsl.w	r3, r2, r3
 800722e:	43db      	mvns	r3, r3
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	4013      	ands	r3, r2
 8007234:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	091b      	lsrs	r3, r3, #4
 800723c:	f003 0201 	and.w	r2, r3, #1
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	fa02 f303 	lsl.w	r3, r2, r3
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	4313      	orrs	r3, r2
 800724a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	2b03      	cmp	r3, #3
 800725c:	d017      	beq.n	800728e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	2203      	movs	r2, #3
 800726a:	fa02 f303 	lsl.w	r3, r2, r3
 800726e:	43db      	mvns	r3, r3
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	4013      	ands	r3, r2
 8007274:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	689a      	ldr	r2, [r3, #8]
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	fa02 f303 	lsl.w	r3, r2, r3
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	4313      	orrs	r3, r2
 8007286:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d123      	bne.n	80072e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	08da      	lsrs	r2, r3, #3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	3208      	adds	r2, #8
 80072a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	220f      	movs	r2, #15
 80072b2:	fa02 f303 	lsl.w	r3, r2, r3
 80072b6:	43db      	mvns	r3, r3
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	4013      	ands	r3, r2
 80072bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	691a      	ldr	r2, [r3, #16]
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	fa02 f303 	lsl.w	r3, r2, r3
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	08da      	lsrs	r2, r3, #3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3208      	adds	r2, #8
 80072dc:	69b9      	ldr	r1, [r7, #24]
 80072de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	2203      	movs	r2, #3
 80072ee:	fa02 f303 	lsl.w	r3, r2, r3
 80072f2:	43db      	mvns	r3, r3
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	4013      	ands	r3, r2
 80072f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f003 0203 	and.w	r2, r3, #3
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	fa02 f303 	lsl.w	r3, r2, r3
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	4313      	orrs	r3, r2
 800730e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 80e0 	beq.w	80074e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007324:	4b2f      	ldr	r3, [pc, #188]	; (80073e4 <HAL_GPIO_Init+0x238>)
 8007326:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800732a:	4a2e      	ldr	r2, [pc, #184]	; (80073e4 <HAL_GPIO_Init+0x238>)
 800732c:	f043 0302 	orr.w	r3, r3, #2
 8007330:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007334:	4b2b      	ldr	r3, [pc, #172]	; (80073e4 <HAL_GPIO_Init+0x238>)
 8007336:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007342:	4a29      	ldr	r2, [pc, #164]	; (80073e8 <HAL_GPIO_Init+0x23c>)
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	089b      	lsrs	r3, r3, #2
 8007348:	3302      	adds	r3, #2
 800734a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800734e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f003 0303 	and.w	r3, r3, #3
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	220f      	movs	r2, #15
 800735a:	fa02 f303 	lsl.w	r3, r2, r3
 800735e:	43db      	mvns	r3, r3
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	4013      	ands	r3, r2
 8007364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a20      	ldr	r2, [pc, #128]	; (80073ec <HAL_GPIO_Init+0x240>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d052      	beq.n	8007414 <HAL_GPIO_Init+0x268>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a1f      	ldr	r2, [pc, #124]	; (80073f0 <HAL_GPIO_Init+0x244>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d031      	beq.n	80073da <HAL_GPIO_Init+0x22e>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a1e      	ldr	r2, [pc, #120]	; (80073f4 <HAL_GPIO_Init+0x248>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d02b      	beq.n	80073d6 <HAL_GPIO_Init+0x22a>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a1d      	ldr	r2, [pc, #116]	; (80073f8 <HAL_GPIO_Init+0x24c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d025      	beq.n	80073d2 <HAL_GPIO_Init+0x226>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <HAL_GPIO_Init+0x250>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d01f      	beq.n	80073ce <HAL_GPIO_Init+0x222>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a1b      	ldr	r2, [pc, #108]	; (8007400 <HAL_GPIO_Init+0x254>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d019      	beq.n	80073ca <HAL_GPIO_Init+0x21e>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a1a      	ldr	r2, [pc, #104]	; (8007404 <HAL_GPIO_Init+0x258>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d013      	beq.n	80073c6 <HAL_GPIO_Init+0x21a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a19      	ldr	r2, [pc, #100]	; (8007408 <HAL_GPIO_Init+0x25c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00d      	beq.n	80073c2 <HAL_GPIO_Init+0x216>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a18      	ldr	r2, [pc, #96]	; (800740c <HAL_GPIO_Init+0x260>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d007      	beq.n	80073be <HAL_GPIO_Init+0x212>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a17      	ldr	r2, [pc, #92]	; (8007410 <HAL_GPIO_Init+0x264>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d101      	bne.n	80073ba <HAL_GPIO_Init+0x20e>
 80073b6:	2309      	movs	r3, #9
 80073b8:	e02d      	b.n	8007416 <HAL_GPIO_Init+0x26a>
 80073ba:	230a      	movs	r3, #10
 80073bc:	e02b      	b.n	8007416 <HAL_GPIO_Init+0x26a>
 80073be:	2308      	movs	r3, #8
 80073c0:	e029      	b.n	8007416 <HAL_GPIO_Init+0x26a>
 80073c2:	2307      	movs	r3, #7
 80073c4:	e027      	b.n	8007416 <HAL_GPIO_Init+0x26a>
 80073c6:	2306      	movs	r3, #6
 80073c8:	e025      	b.n	8007416 <HAL_GPIO_Init+0x26a>
 80073ca:	2305      	movs	r3, #5
 80073cc:	e023      	b.n	8007416 <HAL_GPIO_Init+0x26a>
 80073ce:	2304      	movs	r3, #4
 80073d0:	e021      	b.n	8007416 <HAL_GPIO_Init+0x26a>
 80073d2:	2303      	movs	r3, #3
 80073d4:	e01f      	b.n	8007416 <HAL_GPIO_Init+0x26a>
 80073d6:	2302      	movs	r3, #2
 80073d8:	e01d      	b.n	8007416 <HAL_GPIO_Init+0x26a>
 80073da:	2301      	movs	r3, #1
 80073dc:	e01b      	b.n	8007416 <HAL_GPIO_Init+0x26a>
 80073de:	bf00      	nop
 80073e0:	58000080 	.word	0x58000080
 80073e4:	58024400 	.word	0x58024400
 80073e8:	58000400 	.word	0x58000400
 80073ec:	58020000 	.word	0x58020000
 80073f0:	58020400 	.word	0x58020400
 80073f4:	58020800 	.word	0x58020800
 80073f8:	58020c00 	.word	0x58020c00
 80073fc:	58021000 	.word	0x58021000
 8007400:	58021400 	.word	0x58021400
 8007404:	58021800 	.word	0x58021800
 8007408:	58021c00 	.word	0x58021c00
 800740c:	58022000 	.word	0x58022000
 8007410:	58022400 	.word	0x58022400
 8007414:	2300      	movs	r3, #0
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	f002 0203 	and.w	r2, r2, #3
 800741c:	0092      	lsls	r2, r2, #2
 800741e:	4093      	lsls	r3, r2
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	4313      	orrs	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007426:	4938      	ldr	r1, [pc, #224]	; (8007508 <HAL_GPIO_Init+0x35c>)
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	089b      	lsrs	r3, r3, #2
 800742c:	3302      	adds	r3, #2
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	43db      	mvns	r3, r3
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	4013      	ands	r3, r2
 8007444:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800745a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	43db      	mvns	r3, r3
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	4013      	ands	r3, r2
 8007472:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	43db      	mvns	r3, r3
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	4013      	ands	r3, r2
 800749e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	43db      	mvns	r3, r3
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	4013      	ands	r3, r2
 80074c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	3301      	adds	r3, #1
 80074e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	fa22 f303 	lsr.w	r3, r2, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f47f ae63 	bne.w	80071c0 <HAL_GPIO_Init+0x14>
  }
}
 80074fa:	bf00      	nop
 80074fc:	bf00      	nop
 80074fe:	3724      	adds	r7, #36	; 0x24
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	58000400 	.word	0x58000400

0800750c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	807b      	strh	r3, [r7, #2]
 8007518:	4613      	mov	r3, r2
 800751a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800751c:	787b      	ldrb	r3, [r7, #1]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007522:	887a      	ldrh	r2, [r7, #2]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007528:	e003      	b.n	8007532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800752a:	887b      	ldrh	r3, [r7, #2]
 800752c:	041a      	lsls	r2, r3, #16
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	619a      	str	r2, [r3, #24]
}
 8007532:	bf00      	nop
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800753e:	b480      	push	{r7}
 8007540:	b085      	sub	sp, #20
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	460b      	mov	r3, r1
 8007548:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007550:	887a      	ldrh	r2, [r7, #2]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4013      	ands	r3, r2
 8007556:	041a      	lsls	r2, r3, #16
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	43d9      	mvns	r1, r3
 800755c:	887b      	ldrh	r3, [r7, #2]
 800755e:	400b      	ands	r3, r1
 8007560:	431a      	orrs	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	619a      	str	r2, [r3, #24]
}
 8007566:	bf00      	nop
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
	...

08007574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e07f      	b.n	8007686 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d106      	bne.n	80075a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7f9 fe1a 	bl	80011d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2224      	movs	r2, #36	; 0x24
 80075a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0201 	bic.w	r2, r2, #1
 80075b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d107      	bne.n	80075ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075ea:	609a      	str	r2, [r3, #8]
 80075ec:	e006      	b.n	80075fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80075fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	2b02      	cmp	r3, #2
 8007602:	d104      	bne.n	800760e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800760c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6859      	ldr	r1, [r3, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	4b1d      	ldr	r3, [pc, #116]	; (8007690 <HAL_I2C_Init+0x11c>)
 800761a:	430b      	orrs	r3, r1
 800761c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68da      	ldr	r2, [r3, #12]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800762c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691a      	ldr	r2, [r3, #16]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	69d9      	ldr	r1, [r3, #28]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1a      	ldr	r2, [r3, #32]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0201 	orr.w	r2, r2, #1
 8007666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2220      	movs	r2, #32
 8007672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	02008000 	.word	0x02008000

08007694 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b088      	sub	sp, #32
 8007698:	af02      	add	r7, sp, #8
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	607a      	str	r2, [r7, #4]
 800769e:	461a      	mov	r2, r3
 80076a0:	460b      	mov	r3, r1
 80076a2:	817b      	strh	r3, [r7, #10]
 80076a4:	4613      	mov	r3, r2
 80076a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b20      	cmp	r3, #32
 80076b2:	f040 80da 	bne.w	800786a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d101      	bne.n	80076c4 <HAL_I2C_Master_Transmit+0x30>
 80076c0:	2302      	movs	r3, #2
 80076c2:	e0d3      	b.n	800786c <HAL_I2C_Master_Transmit+0x1d8>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076cc:	f7fb fa68 	bl	8002ba0 <HAL_GetTick>
 80076d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	2319      	movs	r3, #25
 80076d8:	2201      	movs	r2, #1
 80076da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 f8f0 	bl	80078c4 <I2C_WaitOnFlagUntilTimeout>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e0be      	b.n	800786c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2221      	movs	r2, #33	; 0x21
 80076f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2210      	movs	r2, #16
 80076fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	893a      	ldrh	r2, [r7, #8]
 800770e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771a:	b29b      	uxth	r3, r3
 800771c:	2bff      	cmp	r3, #255	; 0xff
 800771e:	d90e      	bls.n	800773e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	22ff      	movs	r2, #255	; 0xff
 8007724:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800772a:	b2da      	uxtb	r2, r3
 800772c:	8979      	ldrh	r1, [r7, #10]
 800772e:	4b51      	ldr	r3, [pc, #324]	; (8007874 <HAL_I2C_Master_Transmit+0x1e0>)
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 fa6c 	bl	8007c14 <I2C_TransferConfig>
 800773c:	e06c      	b.n	8007818 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800774c:	b2da      	uxtb	r2, r3
 800774e:	8979      	ldrh	r1, [r7, #10]
 8007750:	4b48      	ldr	r3, [pc, #288]	; (8007874 <HAL_I2C_Master_Transmit+0x1e0>)
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fa5b 	bl	8007c14 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800775e:	e05b      	b.n	8007818 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	6a39      	ldr	r1, [r7, #32]
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 f8ed 	bl	8007944 <I2C_WaitOnTXISFlagUntilTimeout>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e07b      	b.n	800786c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800779c:	3b01      	subs	r3, #1
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d034      	beq.n	8007818 <HAL_I2C_Master_Transmit+0x184>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d130      	bne.n	8007818 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	2200      	movs	r2, #0
 80077be:	2180      	movs	r1, #128	; 0x80
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f87f 	bl	80078c4 <I2C_WaitOnFlagUntilTimeout>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e04d      	b.n	800786c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2bff      	cmp	r3, #255	; 0xff
 80077d8:	d90e      	bls.n	80077f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	22ff      	movs	r2, #255	; 0xff
 80077de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	8979      	ldrh	r1, [r7, #10]
 80077e8:	2300      	movs	r3, #0
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 fa0f 	bl	8007c14 <I2C_TransferConfig>
 80077f6:	e00f      	b.n	8007818 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007806:	b2da      	uxtb	r2, r3
 8007808:	8979      	ldrh	r1, [r7, #10]
 800780a:	2300      	movs	r3, #0
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 f9fe 	bl	8007c14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d19e      	bne.n	8007760 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	6a39      	ldr	r1, [r7, #32]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 f8cc 	bl	80079c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <HAL_I2C_Master_Transmit+0x1a2>
    {
			return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e01a      	b.n	800786c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2220      	movs	r2, #32
 800783c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6859      	ldr	r1, [r3, #4]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	4b0b      	ldr	r3, [pc, #44]	; (8007878 <HAL_I2C_Master_Transmit+0x1e4>)
 800784a:	400b      	ands	r3, r1
 800784c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2220      	movs	r2, #32
 8007852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	e000      	b.n	800786c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800786a:	2302      	movs	r3, #2
  }
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	80002000 	.word	0x80002000
 8007878:	fe00e800 	.word	0xfe00e800

0800787c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b02      	cmp	r3, #2
 8007890:	d103      	bne.n	800789a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2200      	movs	r2, #0
 8007898:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d007      	beq.n	80078b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0201 	orr.w	r2, r2, #1
 80078b6:	619a      	str	r2, [r3, #24]
  }
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	603b      	str	r3, [r7, #0]
 80078d0:	4613      	mov	r3, r2
 80078d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078d4:	e022      	b.n	800791c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078dc:	d01e      	beq.n	800791c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078de:	f7fb f95f 	bl	8002ba0 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d302      	bcc.n	80078f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d113      	bne.n	800791c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f8:	f043 0220 	orr.w	r2, r3, #32
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e00f      	b.n	800793c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699a      	ldr	r2, [r3, #24]
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	4013      	ands	r3, r2
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	429a      	cmp	r2, r3
 800792a:	bf0c      	ite	eq
 800792c:	2301      	moveq	r3, #1
 800792e:	2300      	movne	r3, #0
 8007930:	b2db      	uxtb	r3, r3
 8007932:	461a      	mov	r2, r3
 8007934:	79fb      	ldrb	r3, [r7, #7]
 8007936:	429a      	cmp	r2, r3
 8007938:	d0cd      	beq.n	80078d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007950:	e02c      	b.n	80079ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	68b9      	ldr	r1, [r7, #8]
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f870 	bl	8007a3c <I2C_IsErrorOccurred>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e02a      	b.n	80079bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800796c:	d01e      	beq.n	80079ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800796e:	f7fb f917 	bl	8002ba0 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	429a      	cmp	r2, r3
 800797c:	d302      	bcc.n	8007984 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d113      	bne.n	80079ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007988:	f043 0220 	orr.w	r2, r3, #32
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e007      	b.n	80079bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d1cb      	bne.n	8007952 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079d0:	e028      	b.n	8007a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	68b9      	ldr	r1, [r7, #8]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 f830 	bl	8007a3c <I2C_IsErrorOccurred>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e026      	b.n	8007a34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079e6:	f7fb f8db 	bl	8002ba0 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d302      	bcc.n	80079fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d113      	bne.n	8007a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a00:	f043 0220 	orr.w	r2, r3, #32
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e007      	b.n	8007a34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	f003 0320 	and.w	r3, r3, #32
 8007a2e:	2b20      	cmp	r3, #32
 8007a30:	d1cf      	bne.n	80079d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b08a      	sub	sp, #40	; 0x28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	f003 0310 	and.w	r3, r3, #16
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d075      	beq.n	8007b54 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2210      	movs	r2, #16
 8007a6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a70:	e056      	b.n	8007b20 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a78:	d052      	beq.n	8007b20 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a7a:	f7fb f891 	bl	8002ba0 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d302      	bcc.n	8007a90 <I2C_IsErrorOccurred+0x54>
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d147      	bne.n	8007b20 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007aa2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ab2:	d12e      	bne.n	8007b12 <I2C_IsErrorOccurred+0xd6>
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aba:	d02a      	beq.n	8007b12 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007abc:	7cfb      	ldrb	r3, [r7, #19]
 8007abe:	2b20      	cmp	r3, #32
 8007ac0:	d027      	beq.n	8007b12 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ad0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007ad2:	f7fb f865 	bl	8002ba0 <HAL_GetTick>
 8007ad6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ad8:	e01b      	b.n	8007b12 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007ada:	f7fb f861 	bl	8002ba0 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b19      	cmp	r3, #25
 8007ae6:	d914      	bls.n	8007b12 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aec:	f043 0220 	orr.w	r2, r3, #32
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	f003 0320 	and.w	r3, r3, #32
 8007b1c:	2b20      	cmp	r3, #32
 8007b1e:	d1dc      	bne.n	8007ada <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	f003 0320 	and.w	r3, r3, #32
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	d003      	beq.n	8007b36 <I2C_IsErrorOccurred+0xfa>
 8007b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d09d      	beq.n	8007a72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d103      	bne.n	8007b46 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2220      	movs	r2, #32
 8007b44:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	f043 0304 	orr.w	r3, r3, #4
 8007b4c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00b      	beq.n	8007b7e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	f043 0301 	orr.w	r3, r3, #1
 8007b6c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00b      	beq.n	8007ba0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	f043 0308 	orr.w	r3, r3, #8
 8007b8e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00b      	beq.n	8007bc2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	f043 0302 	orr.w	r3, r3, #2
 8007bb0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d01c      	beq.n	8007c04 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7ff fe56 	bl	800787c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6859      	ldr	r1, [r3, #4]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <I2C_IsErrorOccurred+0x1d4>)
 8007bdc:	400b      	ands	r3, r1
 8007bde:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	431a      	orrs	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3728      	adds	r7, #40	; 0x28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	fe00e800 	.word	0xfe00e800

08007c14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	607b      	str	r3, [r7, #4]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	817b      	strh	r3, [r7, #10]
 8007c22:	4613      	mov	r3, r2
 8007c24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c26:	897b      	ldrh	r3, [r7, #10]
 8007c28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c2c:	7a7b      	ldrb	r3, [r7, #9]
 8007c2e:	041b      	lsls	r3, r3, #16
 8007c30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c34:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c42:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	0d5b      	lsrs	r3, r3, #21
 8007c4e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007c52:	4b08      	ldr	r3, [pc, #32]	; (8007c74 <I2C_TransferConfig+0x60>)
 8007c54:	430b      	orrs	r3, r1
 8007c56:	43db      	mvns	r3, r3
 8007c58:	ea02 0103 	and.w	r1, r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007c66:	bf00      	nop
 8007c68:	371c      	adds	r7, #28
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	03ff63ff 	.word	0x03ff63ff

08007c78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d138      	bne.n	8007d00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d101      	bne.n	8007c9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	e032      	b.n	8007d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2224      	movs	r2, #36	; 0x24
 8007ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0201 	bic.w	r2, r2, #1
 8007cba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6819      	ldr	r1, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0201 	orr.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e000      	b.n	8007d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d00:	2302      	movs	r3, #2
  }
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b20      	cmp	r3, #32
 8007d22:	d139      	bne.n	8007d98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d101      	bne.n	8007d32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d2e:	2302      	movs	r3, #2
 8007d30:	e033      	b.n	8007d9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2224      	movs	r2, #36	; 0x24
 8007d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f022 0201 	bic.w	r2, r2, #1
 8007d50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	e000      	b.n	8007d9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d98:	2302      	movs	r3, #2
  }
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
	...

08007da8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{ 
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e0b1      	b.n	8007f22 <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b05      	cmp	r3, #5
 8007dc8:	d101      	bne.n	8007dce <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e0a9      	b.n	8007f22 <HAL_OPAMP_Init+0x17a>
  }  
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d101      	bne.n	8007dde <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e0a1      	b.n	8007f22 <HAL_OPAMP_Init+0x17a>
    }
    

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming)); 

    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePHighSpeed));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNHighSpeed));
      }
    }
     
    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d103      	bne.n	8007dfa <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);    
#else    
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7f9 fd0a 	bl	8001814 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e0e:	601a      	str	r2, [r3, #0]
    /* In PGA mode InvertingInput is Not Applicable  */                                          
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	2b40      	cmp	r3, #64	; 0x40
 8007e16:	d119      	bne.n	8007e4c <HAL_OPAMP_Init+0xa4>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	4b43      	ldr	r3, [pc, #268]	; (8007f2c <HAL_OPAMP_Init+0x184>)
 8007e20:	4013      	ands	r3, r2
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	6851      	ldr	r1, [r2, #4]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	6892      	ldr	r2, [r2, #8]
 8007e2a:	4311      	orrs	r1, r2
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	6952      	ldr	r2, [r2, #20]
 8007e30:	4311      	orrs	r1, r2
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	6992      	ldr	r2, [r2, #24]
 8007e36:	4311      	orrs	r1, r2
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	6912      	ldr	r2, [r2, #16]
 8007e3c:	4311      	orrs	r1, r2
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	69d2      	ldr	r2, [r2, #28]
 8007e42:	4311      	orrs	r1, r2
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6812      	ldr	r2, [r2, #0]
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.PgaConnect | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }
    
    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	2b60      	cmp	r3, #96	; 0x60
 8007e52:	d113      	bne.n	8007e7c <HAL_OPAMP_Init+0xd4>
    {
  /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	4b35      	ldr	r3, [pc, #212]	; (8007f30 <HAL_OPAMP_Init+0x188>)
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6851      	ldr	r1, [r2, #4]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6892      	ldr	r2, [r2, #8]
 8007e66:	4311      	orrs	r1, r2
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6912      	ldr	r2, [r2, #16]
 8007e6c:	4311      	orrs	r1, r2
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	69d2      	ldr	r2, [r2, #28]
 8007e72:	4311      	orrs	r1, r2
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	6812      	ldr	r2, [r2, #0]
 8007e78:	430b      	orrs	r3, r1
 8007e7a:	6013      	str	r3, [r2, #0]
                                              hopamp->Init.Mode | \
                                              hopamp->Init.NonInvertingInput | \
                                              hopamp->Init.UserTrimming);     
    }     
    
    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d116      	bne.n	8007eb2 <HAL_OPAMP_Init+0x10a>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	4b29      	ldr	r3, [pc, #164]	; (8007f30 <HAL_OPAMP_Init+0x188>)
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	6851      	ldr	r1, [r2, #4]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	6892      	ldr	r2, [r2, #8]
 8007e96:	4311      	orrs	r1, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	68d2      	ldr	r2, [r2, #12]
 8007e9c:	4311      	orrs	r1, r2
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6912      	ldr	r2, [r2, #16]
 8007ea2:	4311      	orrs	r1, r2
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	69d2      	ldr	r2, [r2, #28]
 8007ea8:	4311      	orrs	r1, r2
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	6812      	ldr	r2, [r2, #0]
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    } 
    
    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007eba:	d127      	bne.n	8007f0c <HAL_OPAMP_Init+0x164>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec4:	d011      	beq.n	8007eea <HAL_OPAMP_Init+0x142>
      {
        /* OPAMP_POWERMODE_NORMAL */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN)); 
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	4b16      	ldr	r3, [pc, #88]	; (8007f34 <HAL_OPAMP_Init+0x18c>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	6812      	ldr	r2, [r2, #0]
 8007ee2:	68b9      	ldr	r1, [r7, #8]
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	6053      	str	r3, [r2, #4]
 8007ee8:	e010      	b.n	8007f0c <HAL_OPAMP_Init+0x164>
      else
      {
        /* OPAMP_POWERMODE_HIGHSPEED*/
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* high speed mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eee:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNHighSpeed)); 
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);     
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689a      	ldr	r2, [r3, #8]
 8007efe:	4b0d      	ldr	r3, [pc, #52]	; (8007f34 <HAL_OPAMP_Init+0x18c>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	6812      	ldr	r2, [r2, #0]
 8007f06:	68b9      	ldr	r1, [r7, #8]
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	6093      	str	r3, [r2, #8]
      }
    } 
   
    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d103      	bne.n	8007f20 <HAL_OPAMP_Init+0x178>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	fff83e93 	.word	0xfff83e93
 8007f30:	fffbfe93 	.word	0xfffbfe93
 8007f34:	ffffe0e0 	.word	0xffffe0e0

08007f38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f3a:	b08f      	sub	sp, #60	; 0x3c
 8007f3c:	af0a      	add	r7, sp, #40	; 0x28
 8007f3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e116      	b.n	8008178 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d106      	bne.n	8007f6a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f00e fc65 	bl	8016834 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2203      	movs	r2, #3
 8007f6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d102      	bne.n	8007f84 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f00a fdac 	bl	8012ae6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	603b      	str	r3, [r7, #0]
 8007f94:	687e      	ldr	r6, [r7, #4]
 8007f96:	466d      	mov	r5, sp
 8007f98:	f106 0410 	add.w	r4, r6, #16
 8007f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007fa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007fa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8007fac:	1d33      	adds	r3, r6, #4
 8007fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fb0:	6838      	ldr	r0, [r7, #0]
 8007fb2:	f00a fc77 	bl	80128a4 <USB_CoreInit>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d005      	beq.n	8007fc8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e0d7      	b.n	8008178 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2100      	movs	r1, #0
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f00a fd9a 	bl	8012b08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	73fb      	strb	r3, [r7, #15]
 8007fd8:	e04a      	b.n	8008070 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007fda:	7bfa      	ldrb	r2, [r7, #15]
 8007fdc:	6879      	ldr	r1, [r7, #4]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	00db      	lsls	r3, r3, #3
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	333d      	adds	r3, #61	; 0x3d
 8007fea:	2201      	movs	r2, #1
 8007fec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007fee:	7bfa      	ldrb	r2, [r7, #15]
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	00db      	lsls	r3, r3, #3
 8007ff6:	4413      	add	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	333c      	adds	r3, #60	; 0x3c
 8007ffe:	7bfa      	ldrb	r2, [r7, #15]
 8008000:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008002:	7bfa      	ldrb	r2, [r7, #15]
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	b298      	uxth	r0, r3
 8008008:	6879      	ldr	r1, [r7, #4]
 800800a:	4613      	mov	r3, r2
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	4413      	add	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	440b      	add	r3, r1
 8008014:	3344      	adds	r3, #68	; 0x44
 8008016:	4602      	mov	r2, r0
 8008018:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800801a:	7bfa      	ldrb	r2, [r7, #15]
 800801c:	6879      	ldr	r1, [r7, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	00db      	lsls	r3, r3, #3
 8008022:	4413      	add	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	440b      	add	r3, r1
 8008028:	3340      	adds	r3, #64	; 0x40
 800802a:	2200      	movs	r2, #0
 800802c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800802e:	7bfa      	ldrb	r2, [r7, #15]
 8008030:	6879      	ldr	r1, [r7, #4]
 8008032:	4613      	mov	r3, r2
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	4413      	add	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	440b      	add	r3, r1
 800803c:	3348      	adds	r3, #72	; 0x48
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008042:	7bfa      	ldrb	r2, [r7, #15]
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	4613      	mov	r3, r2
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	440b      	add	r3, r1
 8008050:	334c      	adds	r3, #76	; 0x4c
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008056:	7bfa      	ldrb	r2, [r7, #15]
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	4613      	mov	r3, r2
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	440b      	add	r3, r1
 8008064:	3354      	adds	r3, #84	; 0x54
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	3301      	adds	r3, #1
 800806e:	73fb      	strb	r3, [r7, #15]
 8008070:	7bfa      	ldrb	r2, [r7, #15]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	429a      	cmp	r2, r3
 8008078:	d3af      	bcc.n	8007fda <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
 800807e:	e044      	b.n	800810a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008080:	7bfa      	ldrb	r2, [r7, #15]
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	4613      	mov	r3, r2
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	440b      	add	r3, r1
 800808e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008092:	2200      	movs	r2, #0
 8008094:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008096:	7bfa      	ldrb	r2, [r7, #15]
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	4613      	mov	r3, r2
 800809c:	00db      	lsls	r3, r3, #3
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	440b      	add	r3, r1
 80080a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80080a8:	7bfa      	ldrb	r2, [r7, #15]
 80080aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80080ac:	7bfa      	ldrb	r2, [r7, #15]
 80080ae:	6879      	ldr	r1, [r7, #4]
 80080b0:	4613      	mov	r3, r2
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	4413      	add	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	440b      	add	r3, r1
 80080ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80080be:	2200      	movs	r2, #0
 80080c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80080c2:	7bfa      	ldrb	r2, [r7, #15]
 80080c4:	6879      	ldr	r1, [r7, #4]
 80080c6:	4613      	mov	r3, r2
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
 80080d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80080d4:	2200      	movs	r2, #0
 80080d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80080d8:	7bfa      	ldrb	r2, [r7, #15]
 80080da:	6879      	ldr	r1, [r7, #4]
 80080dc:	4613      	mov	r3, r2
 80080de:	00db      	lsls	r3, r3, #3
 80080e0:	4413      	add	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	440b      	add	r3, r1
 80080e6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80080ee:	7bfa      	ldrb	r2, [r7, #15]
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	4613      	mov	r3, r2
 80080f4:	00db      	lsls	r3, r3, #3
 80080f6:	4413      	add	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	440b      	add	r3, r1
 80080fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008104:	7bfb      	ldrb	r3, [r7, #15]
 8008106:	3301      	adds	r3, #1
 8008108:	73fb      	strb	r3, [r7, #15]
 800810a:	7bfa      	ldrb	r2, [r7, #15]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	429a      	cmp	r2, r3
 8008112:	d3b5      	bcc.n	8008080 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	603b      	str	r3, [r7, #0]
 800811a:	687e      	ldr	r6, [r7, #4]
 800811c:	466d      	mov	r5, sp
 800811e:	f106 0410 	add.w	r4, r6, #16
 8008122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800812a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800812e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008132:	1d33      	adds	r3, r6, #4
 8008134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008136:	6838      	ldr	r0, [r7, #0]
 8008138:	f00a fd32 	bl	8012ba0 <USB_DevInit>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2202      	movs	r2, #2
 8008146:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e014      	b.n	8008178 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	2b01      	cmp	r3, #1
 8008164:	d102      	bne.n	800816c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 f98c 	bl	8009484 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4618      	mov	r0, r3
 8008172:	f00b fe80 	bl	8013e76 <USB_DevDisconnect>

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008180 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_PCD_Start+0x1c>
 8008198:	2302      	movs	r3, #2
 800819a:	e020      	b.n	80081de <HAL_PCD_Start+0x5e>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d109      	bne.n	80081c0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d005      	beq.n	80081c0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f00a fc7d 	bl	8012ac4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f00b fe30 	bl	8013e34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80081e6:	b590      	push	{r4, r7, lr}
 80081e8:	b08d      	sub	sp, #52	; 0x34
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f00b feee 	bl	8013fde <USB_GetMode>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	f040 84b7 	bne.w	8008b78 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4618      	mov	r0, r3
 8008210:	f00b fe52 	bl	8013eb8 <USB_ReadInterrupts>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 84ad 	beq.w	8008b76 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	0a1b      	lsrs	r3, r3, #8
 8008226:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4618      	mov	r0, r3
 8008236:	f00b fe3f 	bl	8013eb8 <USB_ReadInterrupts>
 800823a:	4603      	mov	r3, r0
 800823c:	f003 0302 	and.w	r3, r3, #2
 8008240:	2b02      	cmp	r3, #2
 8008242:	d107      	bne.n	8008254 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695a      	ldr	r2, [r3, #20]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f002 0202 	and.w	r2, r2, #2
 8008252:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4618      	mov	r0, r3
 800825a:	f00b fe2d 	bl	8013eb8 <USB_ReadInterrupts>
 800825e:	4603      	mov	r3, r0
 8008260:	f003 0310 	and.w	r3, r3, #16
 8008264:	2b10      	cmp	r3, #16
 8008266:	d161      	bne.n	800832c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699a      	ldr	r2, [r3, #24]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 0210 	bic.w	r2, r2, #16
 8008276:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	f003 020f 	and.w	r2, r3, #15
 8008284:	4613      	mov	r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	4413      	add	r3, r2
 8008294:	3304      	adds	r3, #4
 8008296:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	0c5b      	lsrs	r3, r3, #17
 800829c:	f003 030f 	and.w	r3, r3, #15
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d124      	bne.n	80082ee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80082aa:	4013      	ands	r3, r2
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d035      	beq.n	800831c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	091b      	lsrs	r3, r3, #4
 80082b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80082ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082be:	b29b      	uxth	r3, r3
 80082c0:	461a      	mov	r2, r3
 80082c2:	6a38      	ldr	r0, [r7, #32]
 80082c4:	f00b fc64 	bl	8013b90 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	691a      	ldr	r2, [r3, #16]
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	091b      	lsrs	r3, r3, #4
 80082d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082d4:	441a      	add	r2, r3
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	6a1a      	ldr	r2, [r3, #32]
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	091b      	lsrs	r3, r3, #4
 80082e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082e6:	441a      	add	r2, r3
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	621a      	str	r2, [r3, #32]
 80082ec:	e016      	b.n	800831c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	0c5b      	lsrs	r3, r3, #17
 80082f2:	f003 030f 	and.w	r3, r3, #15
 80082f6:	2b06      	cmp	r3, #6
 80082f8:	d110      	bne.n	800831c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008300:	2208      	movs	r2, #8
 8008302:	4619      	mov	r1, r3
 8008304:	6a38      	ldr	r0, [r7, #32]
 8008306:	f00b fc43 	bl	8013b90 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	6a1a      	ldr	r2, [r3, #32]
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	091b      	lsrs	r3, r3, #4
 8008312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008316:	441a      	add	r2, r3
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	699a      	ldr	r2, [r3, #24]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f042 0210 	orr.w	r2, r2, #16
 800832a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4618      	mov	r0, r3
 8008332:	f00b fdc1 	bl	8013eb8 <USB_ReadInterrupts>
 8008336:	4603      	mov	r3, r0
 8008338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800833c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008340:	f040 80a7 	bne.w	8008492 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4618      	mov	r0, r3
 800834e:	f00b fdc6 	bl	8013ede <USB_ReadDevAllOutEpInterrupt>
 8008352:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008354:	e099      	b.n	800848a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 808e 	beq.w	800847e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008368:	b2d2      	uxtb	r2, r2
 800836a:	4611      	mov	r1, r2
 800836c:	4618      	mov	r0, r3
 800836e:	f00b fdea 	bl	8013f46 <USB_ReadDevOutEPInterrupt>
 8008372:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00c      	beq.n	8008398 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838a:	461a      	mov	r2, r3
 800838c:	2301      	movs	r3, #1
 800838e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fef0 	bl	8009178 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f003 0308 	and.w	r3, r3, #8
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00c      	beq.n	80083bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ae:	461a      	mov	r2, r3
 80083b0:	2308      	movs	r3, #8
 80083b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80083b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 ffc6 	bl	8009348 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f003 0310 	and.w	r3, r3, #16
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d008      	beq.n	80083d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d2:	461a      	mov	r2, r3
 80083d4:	2310      	movs	r3, #16
 80083d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d030      	beq.n	8008444 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ea:	2b80      	cmp	r3, #128	; 0x80
 80083ec:	d109      	bne.n	8008402 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	69fa      	ldr	r2, [r7, #28]
 80083f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008400:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008404:	4613      	mov	r3, r2
 8008406:	00db      	lsls	r3, r3, #3
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	4413      	add	r3, r2
 8008414:	3304      	adds	r3, #4
 8008416:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	78db      	ldrb	r3, [r3, #3]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d108      	bne.n	8008432 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2200      	movs	r2, #0
 8008424:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	b2db      	uxtb	r3, r3
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f00e fb45 	bl	8016abc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843e:	461a      	mov	r2, r3
 8008440:	2302      	movs	r3, #2
 8008442:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f003 0320 	and.w	r3, r3, #32
 800844a:	2b00      	cmp	r3, #0
 800844c:	d008      	beq.n	8008460 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	015a      	lsls	r2, r3, #5
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	4413      	add	r3, r2
 8008456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845a:	461a      	mov	r2, r3
 800845c:	2320      	movs	r3, #32
 800845e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d009      	beq.n	800847e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008476:	461a      	mov	r2, r3
 8008478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800847c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	3301      	adds	r3, #1
 8008482:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008486:	085b      	lsrs	r3, r3, #1
 8008488:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848c:	2b00      	cmp	r3, #0
 800848e:	f47f af62 	bne.w	8008356 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f00b fd0e 	bl	8013eb8 <USB_ReadInterrupts>
 800849c:	4603      	mov	r3, r0
 800849e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084a6:	f040 80db 	bne.w	8008660 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f00b fd2f 	bl	8013f12 <USB_ReadDevAllInEpInterrupt>
 80084b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80084ba:	e0cd      	b.n	8008658 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 80c2 	beq.w	800864c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ce:	b2d2      	uxtb	r2, r2
 80084d0:	4611      	mov	r1, r2
 80084d2:	4618      	mov	r0, r3
 80084d4:	f00b fd55 	bl	8013f82 <USB_ReadDevInEPInterrupt>
 80084d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d057      	beq.n	8008594 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	f003 030f 	and.w	r3, r3, #15
 80084ea:	2201      	movs	r2, #1
 80084ec:	fa02 f303 	lsl.w	r3, r2, r3
 80084f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	43db      	mvns	r3, r3
 80084fe:	69f9      	ldr	r1, [r7, #28]
 8008500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008504:	4013      	ands	r3, r2
 8008506:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008514:	461a      	mov	r2, r3
 8008516:	2301      	movs	r3, #1
 8008518:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d132      	bne.n	8008588 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008522:	6879      	ldr	r1, [r7, #4]
 8008524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008526:	4613      	mov	r3, r2
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	440b      	add	r3, r1
 8008530:	334c      	adds	r3, #76	; 0x4c
 8008532:	6819      	ldr	r1, [r3, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008538:	4613      	mov	r3, r2
 800853a:	00db      	lsls	r3, r3, #3
 800853c:	4413      	add	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4403      	add	r3, r0
 8008542:	3348      	adds	r3, #72	; 0x48
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4419      	add	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800854c:	4613      	mov	r3, r2
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4403      	add	r3, r0
 8008556:	334c      	adds	r3, #76	; 0x4c
 8008558:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	2b00      	cmp	r3, #0
 800855e:	d113      	bne.n	8008588 <HAL_PCD_IRQHandler+0x3a2>
 8008560:	6879      	ldr	r1, [r7, #4]
 8008562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008564:	4613      	mov	r3, r2
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	440b      	add	r3, r1
 800856e:	3354      	adds	r3, #84	; 0x54
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d108      	bne.n	8008588 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008580:	461a      	mov	r2, r3
 8008582:	2101      	movs	r1, #1
 8008584:	f00b fd5e 	bl	8014044 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	b2db      	uxtb	r3, r3
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f00e fa0f 	bl	80169b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f003 0308 	and.w	r3, r3, #8
 800859a:	2b00      	cmp	r3, #0
 800859c:	d008      	beq.n	80085b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085aa:	461a      	mov	r2, r3
 80085ac:	2308      	movs	r3, #8
 80085ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f003 0310 	and.w	r3, r3, #16
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d008      	beq.n	80085cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c6:	461a      	mov	r2, r3
 80085c8:	2310      	movs	r3, #16
 80085ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d008      	beq.n	80085e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	015a      	lsls	r2, r3, #5
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	4413      	add	r3, r2
 80085de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e2:	461a      	mov	r2, r3
 80085e4:	2340      	movs	r3, #64	; 0x40
 80085e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d023      	beq.n	800863a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80085f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085f4:	6a38      	ldr	r0, [r7, #32]
 80085f6:	f00a fc31 	bl	8012e5c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80085fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085fc:	4613      	mov	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	3338      	adds	r3, #56	; 0x38
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	4413      	add	r3, r2
 800860a:	3304      	adds	r3, #4
 800860c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	78db      	ldrb	r3, [r3, #3]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d108      	bne.n	8008628 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2200      	movs	r2, #0
 800861a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	b2db      	uxtb	r3, r3
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f00e fa5c 	bl	8016ae0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	4413      	add	r3, r2
 8008630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008634:	461a      	mov	r2, r3
 8008636:	2302      	movs	r3, #2
 8008638:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fd08 	bl	800905c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	3301      	adds	r3, #1
 8008650:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008654:	085b      	lsrs	r3, r3, #1
 8008656:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	2b00      	cmp	r3, #0
 800865c:	f47f af2e 	bne.w	80084bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f00b fc27 	bl	8013eb8 <USB_ReadInterrupts>
 800866a:	4603      	mov	r3, r0
 800866c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008674:	d122      	bne.n	80086bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	69fa      	ldr	r2, [r7, #28]
 8008680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008684:	f023 0301 	bic.w	r3, r3, #1
 8008688:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008690:	2b01      	cmp	r3, #1
 8008692:	d108      	bne.n	80086a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800869c:	2100      	movs	r1, #0
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 ff14 	bl	80094cc <HAL_PCDEx_LPM_Callback>
 80086a4:	e002      	b.n	80086ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f00e f9fa 	bl	8016aa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	695a      	ldr	r2, [r3, #20]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80086ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f00b fbf9 	bl	8013eb8 <USB_ReadInterrupts>
 80086c6:	4603      	mov	r3, r0
 80086c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086d0:	d112      	bne.n	80086f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d102      	bne.n	80086e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f00e f9b6 	bl	8016a54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695a      	ldr	r2, [r3, #20]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80086f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f00b fbdb 	bl	8013eb8 <USB_ReadInterrupts>
 8008702:	4603      	mov	r3, r0
 8008704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800870c:	d121      	bne.n	8008752 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	695a      	ldr	r2, [r3, #20]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800871c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008724:	2b00      	cmp	r3, #0
 8008726:	d111      	bne.n	800874c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008736:	089b      	lsrs	r3, r3, #2
 8008738:	f003 020f 	and.w	r2, r3, #15
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008742:	2101      	movs	r1, #1
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fec1 	bl	80094cc <HAL_PCDEx_LPM_Callback>
 800874a:	e002      	b.n	8008752 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f00e f981 	bl	8016a54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4618      	mov	r0, r3
 8008758:	f00b fbae 	bl	8013eb8 <USB_ReadInterrupts>
 800875c:	4603      	mov	r3, r0
 800875e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008766:	f040 80b7 	bne.w	80088d8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008778:	f023 0301 	bic.w	r3, r3, #1
 800877c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2110      	movs	r1, #16
 8008784:	4618      	mov	r0, r3
 8008786:	f00a fb69 	bl	8012e5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800878a:	2300      	movs	r3, #0
 800878c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800878e:	e046      	b.n	800881e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879c:	461a      	mov	r2, r3
 800879e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80087a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a6:	015a      	lsls	r2, r3, #5
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	4413      	add	r3, r2
 80087ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087b4:	0151      	lsls	r1, r2, #5
 80087b6:	69fa      	ldr	r2, [r7, #28]
 80087b8:	440a      	add	r2, r1
 80087ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80087c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d0:	461a      	mov	r2, r3
 80087d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087e8:	0151      	lsls	r1, r2, #5
 80087ea:	69fa      	ldr	r2, [r7, #28]
 80087ec:	440a      	add	r2, r1
 80087ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80087f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008808:	0151      	lsls	r1, r2, #5
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	440a      	add	r2, r1
 800880e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008812:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008816:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	3301      	adds	r3, #1
 800881c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008824:	429a      	cmp	r2, r3
 8008826:	d3b3      	bcc.n	8008790 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	69fa      	ldr	r2, [r7, #28]
 8008832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008836:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800883a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008840:	2b00      	cmp	r3, #0
 8008842:	d016      	beq.n	8008872 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800884a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800884e:	69fa      	ldr	r2, [r7, #28]
 8008850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008854:	f043 030b 	orr.w	r3, r3, #11
 8008858:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008864:	69fa      	ldr	r2, [r7, #28]
 8008866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800886a:	f043 030b 	orr.w	r3, r3, #11
 800886e:	6453      	str	r3, [r2, #68]	; 0x44
 8008870:	e015      	b.n	800889e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008878:	695a      	ldr	r2, [r3, #20]
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008880:	4619      	mov	r1, r3
 8008882:	f242 032b 	movw	r3, #8235	; 0x202b
 8008886:	4313      	orrs	r3, r2
 8008888:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	69fa      	ldr	r2, [r7, #28]
 8008894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008898:	f043 030b 	orr.w	r3, r3, #11
 800889c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69fa      	ldr	r2, [r7, #28]
 80088a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80088b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6818      	ldr	r0, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80088c2:	461a      	mov	r2, r3
 80088c4:	f00b fbbe 	bl	8014044 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	695a      	ldr	r2, [r3, #20]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80088d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4618      	mov	r0, r3
 80088de:	f00b faeb 	bl	8013eb8 <USB_ReadInterrupts>
 80088e2:	4603      	mov	r3, r0
 80088e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088ec:	d124      	bne.n	8008938 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f00b fb82 	bl	8013ffc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f00a fb2a 	bl	8012f56 <USB_GetDevSpeed>
 8008902:	4603      	mov	r3, r0
 8008904:	461a      	mov	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681c      	ldr	r4, [r3, #0]
 800890e:	f001 fe4b 	bl	800a5a8 <HAL_RCC_GetHCLKFreq>
 8008912:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008918:	b2db      	uxtb	r3, r3
 800891a:	461a      	mov	r2, r3
 800891c:	4620      	mov	r0, r4
 800891e:	f00a f82f 	bl	8012980 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f00e f86d 	bl	8016a02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695a      	ldr	r2, [r3, #20]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008936:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4618      	mov	r0, r3
 800893e:	f00b fabb 	bl	8013eb8 <USB_ReadInterrupts>
 8008942:	4603      	mov	r3, r0
 8008944:	f003 0308 	and.w	r3, r3, #8
 8008948:	2b08      	cmp	r3, #8
 800894a:	d10a      	bne.n	8008962 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f00e f84a 	bl	80169e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	695a      	ldr	r2, [r3, #20]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f002 0208 	and.w	r2, r2, #8
 8008960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4618      	mov	r0, r3
 8008968:	f00b faa6 	bl	8013eb8 <USB_ReadInterrupts>
 800896c:	4603      	mov	r3, r0
 800896e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008972:	2b80      	cmp	r3, #128	; 0x80
 8008974:	d122      	bne.n	80089bc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008982:	2301      	movs	r3, #1
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
 8008986:	e014      	b.n	80089b2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898c:	4613      	mov	r3, r2
 800898e:	00db      	lsls	r3, r3, #3
 8008990:	4413      	add	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	440b      	add	r3, r1
 8008996:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d105      	bne.n	80089ac <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fb27 	bl	8008ffa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	3301      	adds	r3, #1
 80089b0:	627b      	str	r3, [r7, #36]	; 0x24
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d3e5      	bcc.n	8008988 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f00b fa79 	bl	8013eb8 <USB_ReadInterrupts>
 80089c6:	4603      	mov	r3, r0
 80089c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089d0:	d13b      	bne.n	8008a4a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80089d2:	2301      	movs	r3, #1
 80089d4:	627b      	str	r3, [r7, #36]	; 0x24
 80089d6:	e02b      	b.n	8008a30 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80089e8:	6879      	ldr	r1, [r7, #4]
 80089ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ec:	4613      	mov	r3, r2
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	4413      	add	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	440b      	add	r3, r1
 80089f6:	3340      	adds	r3, #64	; 0x40
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d115      	bne.n	8008a2a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80089fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	da12      	bge.n	8008a2a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008a04:	6879      	ldr	r1, [r7, #4]
 8008a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a08:	4613      	mov	r3, r2
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	4413      	add	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	440b      	add	r3, r1
 8008a12:	333f      	adds	r3, #63	; 0x3f
 8008a14:	2201      	movs	r2, #1
 8008a16:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fae8 	bl	8008ffa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d3ce      	bcc.n	80089d8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	695a      	ldr	r2, [r3, #20]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f00b fa32 	bl	8013eb8 <USB_ReadInterrupts>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a5e:	d155      	bne.n	8008b0c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a60:	2301      	movs	r3, #1
 8008a62:	627b      	str	r3, [r7, #36]	; 0x24
 8008a64:	e045      	b.n	8008af2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008a76:	6879      	ldr	r1, [r7, #4]
 8008a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	440b      	add	r3, r1
 8008a84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d12e      	bne.n	8008aec <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008a8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	da2b      	bge.n	8008aec <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008aa0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d121      	bne.n	8008aec <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008aa8:	6879      	ldr	r1, [r7, #4]
 8008aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aac:	4613      	mov	r3, r2
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	440b      	add	r3, r1
 8008ab6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008aba:	2201      	movs	r2, #1
 8008abc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10a      	bne.n	8008aec <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	69fa      	ldr	r2, [r7, #28]
 8008ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ae4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ae8:	6053      	str	r3, [r2, #4]
            break;
 8008aea:	e007      	b.n	8008afc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	3301      	adds	r3, #1
 8008af0:	627b      	str	r3, [r7, #36]	; 0x24
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d3b4      	bcc.n	8008a66 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	695a      	ldr	r2, [r3, #20]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008b0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f00b f9d1 	bl	8013eb8 <USB_ReadInterrupts>
 8008b16:	4603      	mov	r3, r0
 8008b18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b20:	d10a      	bne.n	8008b38 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f00d ffee 	bl	8016b04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	695a      	ldr	r2, [r3, #20]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f00b f9bb 	bl	8013eb8 <USB_ReadInterrupts>
 8008b42:	4603      	mov	r3, r0
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	d115      	bne.n	8008b78 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	f003 0304 	and.w	r3, r3, #4
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f00d ffde 	bl	8016b20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6859      	ldr	r1, [r3, #4]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	69ba      	ldr	r2, [r7, #24]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	605a      	str	r2, [r3, #4]
 8008b74:	e000      	b.n	8008b78 <HAL_PCD_IRQHandler+0x992>
      return;
 8008b76:	bf00      	nop
    }
  }
}
 8008b78:	3734      	adds	r7, #52	; 0x34
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd90      	pop	{r4, r7, pc}

08008b7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d101      	bne.n	8008b98 <HAL_PCD_SetAddress+0x1a>
 8008b94:	2302      	movs	r3, #2
 8008b96:	e013      	b.n	8008bc0 <HAL_PCD_SetAddress+0x42>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	78fa      	ldrb	r2, [r7, #3]
 8008bae:	4611      	mov	r1, r2
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f00b f919 	bl	8013de8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	70fb      	strb	r3, [r7, #3]
 8008bda:	460b      	mov	r3, r1
 8008bdc:	803b      	strh	r3, [r7, #0]
 8008bde:	4613      	mov	r3, r2
 8008be0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	da0f      	bge.n	8008c0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bee:	78fb      	ldrb	r3, [r7, #3]
 8008bf0:	f003 020f 	and.w	r2, r3, #15
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	00db      	lsls	r3, r3, #3
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	3338      	adds	r3, #56	; 0x38
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	4413      	add	r3, r2
 8008c02:	3304      	adds	r3, #4
 8008c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	705a      	strb	r2, [r3, #1]
 8008c0c:	e00f      	b.n	8008c2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c0e:	78fb      	ldrb	r3, [r7, #3]
 8008c10:	f003 020f 	and.w	r2, r3, #15
 8008c14:	4613      	mov	r3, r2
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	4413      	add	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	4413      	add	r3, r2
 8008c24:	3304      	adds	r3, #4
 8008c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008c2e:	78fb      	ldrb	r3, [r7, #3]
 8008c30:	f003 030f 	and.w	r3, r3, #15
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008c3a:	883a      	ldrh	r2, [r7, #0]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	78ba      	ldrb	r2, [r7, #2]
 8008c44:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	785b      	ldrb	r3, [r3, #1]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d004      	beq.n	8008c58 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008c58:	78bb      	ldrb	r3, [r7, #2]
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d102      	bne.n	8008c64 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d101      	bne.n	8008c72 <HAL_PCD_EP_Open+0xaa>
 8008c6e:	2302      	movs	r3, #2
 8008c70:	e00e      	b.n	8008c90 <HAL_PCD_EP_Open+0xc8>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68f9      	ldr	r1, [r7, #12]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f00a f98d 	bl	8012fa0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008c8e:	7afb      	ldrb	r3, [r7, #11]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	da0f      	bge.n	8008ccc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cac:	78fb      	ldrb	r3, [r7, #3]
 8008cae:	f003 020f 	and.w	r2, r3, #15
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	3338      	adds	r3, #56	; 0x38
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	705a      	strb	r2, [r3, #1]
 8008cca:	e00f      	b.n	8008cec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	f003 020f 	and.w	r2, r3, #15
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	00db      	lsls	r3, r3, #3
 8008cd6:	4413      	add	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008cec:	78fb      	ldrb	r3, [r7, #3]
 8008cee:	f003 030f 	and.w	r3, r3, #15
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d101      	bne.n	8008d06 <HAL_PCD_EP_Close+0x6e>
 8008d02:	2302      	movs	r3, #2
 8008d04:	e00e      	b.n	8008d24 <HAL_PCD_EP_Close+0x8c>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68f9      	ldr	r1, [r7, #12]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f00a f9cb 	bl	80130b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	607a      	str	r2, [r7, #4]
 8008d36:	603b      	str	r3, [r7, #0]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d3c:	7afb      	ldrb	r3, [r7, #11]
 8008d3e:	f003 020f 	and.w	r2, r3, #15
 8008d42:	4613      	mov	r3, r2
 8008d44:	00db      	lsls	r3, r3, #3
 8008d46:	4413      	add	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	4413      	add	r3, r2
 8008d52:	3304      	adds	r3, #4
 8008d54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2200      	movs	r2, #0
 8008d66:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d6e:	7afb      	ldrb	r3, [r7, #11]
 8008d70:	f003 030f 	and.w	r3, r3, #15
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d102      	bne.n	8008d88 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d88:	7afb      	ldrb	r3, [r7, #11]
 8008d8a:	f003 030f 	and.w	r3, r3, #15
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d109      	bne.n	8008da6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6818      	ldr	r0, [r3, #0]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	6979      	ldr	r1, [r7, #20]
 8008da0:	f00a fcb2 	bl	8013708 <USB_EP0StartXfer>
 8008da4:	e008      	b.n	8008db8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6818      	ldr	r0, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	461a      	mov	r2, r3
 8008db2:	6979      	ldr	r1, [r7, #20]
 8008db4:	f00a fa58 	bl	8013268 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b083      	sub	sp, #12
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008dce:	78fb      	ldrb	r3, [r7, #3]
 8008dd0:	f003 020f 	and.w	r2, r3, #15
 8008dd4:	6879      	ldr	r1, [r7, #4]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	00db      	lsls	r3, r3, #3
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	440b      	add	r3, r1
 8008de0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008de4:	681b      	ldr	r3, [r3, #0]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b086      	sub	sp, #24
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e02:	7afb      	ldrb	r3, [r7, #11]
 8008e04:	f003 020f 	and.w	r2, r3, #15
 8008e08:	4613      	mov	r3, r2
 8008e0a:	00db      	lsls	r3, r3, #3
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	3338      	adds	r3, #56	; 0x38
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	4413      	add	r3, r2
 8008e16:	3304      	adds	r3, #4
 8008e18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e32:	7afb      	ldrb	r3, [r7, #11]
 8008e34:	f003 030f 	and.w	r3, r3, #15
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d102      	bne.n	8008e4c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e4c:	7afb      	ldrb	r3, [r7, #11]
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d109      	bne.n	8008e6a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	461a      	mov	r2, r3
 8008e62:	6979      	ldr	r1, [r7, #20]
 8008e64:	f00a fc50 	bl	8013708 <USB_EP0StartXfer>
 8008e68:	e008      	b.n	8008e7c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6818      	ldr	r0, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	461a      	mov	r2, r3
 8008e76:	6979      	ldr	r1, [r7, #20]
 8008e78:	f00a f9f6 	bl	8013268 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b084      	sub	sp, #16
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008e92:	78fb      	ldrb	r3, [r7, #3]
 8008e94:	f003 020f 	and.w	r2, r3, #15
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d901      	bls.n	8008ea4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e050      	b.n	8008f46 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	da0f      	bge.n	8008ecc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008eac:	78fb      	ldrb	r3, [r7, #3]
 8008eae:	f003 020f 	and.w	r2, r3, #15
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	00db      	lsls	r3, r3, #3
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	3338      	adds	r3, #56	; 0x38
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	705a      	strb	r2, [r3, #1]
 8008eca:	e00d      	b.n	8008ee8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008ecc:	78fa      	ldrb	r2, [r7, #3]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	00db      	lsls	r3, r3, #3
 8008ed2:	4413      	add	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	4413      	add	r3, r2
 8008ede:	3304      	adds	r3, #4
 8008ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2201      	movs	r2, #1
 8008eec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008eee:	78fb      	ldrb	r3, [r7, #3]
 8008ef0:	f003 030f 	and.w	r3, r3, #15
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d101      	bne.n	8008f08 <HAL_PCD_EP_SetStall+0x82>
 8008f04:	2302      	movs	r3, #2
 8008f06:	e01e      	b.n	8008f46 <HAL_PCD_EP_SetStall+0xc0>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68f9      	ldr	r1, [r7, #12]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f00a fe92 	bl	8013c40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	f003 030f 	and.w	r3, r3, #15
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10a      	bne.n	8008f3c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	b2d9      	uxtb	r1, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008f36:	461a      	mov	r2, r3
 8008f38:	f00b f884 	bl	8014044 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	f003 020f 	and.w	r2, r3, #15
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d901      	bls.n	8008f6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e042      	b.n	8008ff2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008f6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	da0f      	bge.n	8008f94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f74:	78fb      	ldrb	r3, [r7, #3]
 8008f76:	f003 020f 	and.w	r2, r3, #15
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	3338      	adds	r3, #56	; 0x38
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	4413      	add	r3, r2
 8008f88:	3304      	adds	r3, #4
 8008f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	705a      	strb	r2, [r3, #1]
 8008f92:	e00f      	b.n	8008fb4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f94:	78fb      	ldrb	r3, [r7, #3]
 8008f96:	f003 020f 	and.w	r2, r3, #15
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	4413      	add	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	4413      	add	r3, r2
 8008faa:	3304      	adds	r3, #4
 8008fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	f003 030f 	and.w	r3, r3, #15
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d101      	bne.n	8008fd4 <HAL_PCD_EP_ClrStall+0x86>
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e00e      	b.n	8008ff2 <HAL_PCD_EP_ClrStall+0xa4>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68f9      	ldr	r1, [r7, #12]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f00a fe9a 	bl	8013d1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	460b      	mov	r3, r1
 8009004:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800900a:	2b00      	cmp	r3, #0
 800900c:	da0c      	bge.n	8009028 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800900e:	78fb      	ldrb	r3, [r7, #3]
 8009010:	f003 020f 	and.w	r2, r3, #15
 8009014:	4613      	mov	r3, r2
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	4413      	add	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	3338      	adds	r3, #56	; 0x38
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	4413      	add	r3, r2
 8009022:	3304      	adds	r3, #4
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	e00c      	b.n	8009042 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009028:	78fb      	ldrb	r3, [r7, #3]
 800902a:	f003 020f 	and.w	r2, r3, #15
 800902e:	4613      	mov	r3, r2
 8009030:	00db      	lsls	r3, r3, #3
 8009032:	4413      	add	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	4413      	add	r3, r2
 800903e:	3304      	adds	r3, #4
 8009040:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68f9      	ldr	r1, [r7, #12]
 8009048:	4618      	mov	r0, r3
 800904a:	f00a fcb9 	bl	80139c0 <USB_EPStopXfer>
 800904e:	4603      	mov	r3, r0
 8009050:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009052:	7afb      	ldrb	r3, [r7, #11]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b08a      	sub	sp, #40	; 0x28
 8009060:	af02      	add	r7, sp, #8
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	4613      	mov	r3, r2
 8009074:	00db      	lsls	r3, r3, #3
 8009076:	4413      	add	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	3338      	adds	r3, #56	; 0x38
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	4413      	add	r3, r2
 8009080:	3304      	adds	r3, #4
 8009082:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6a1a      	ldr	r2, [r3, #32]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	429a      	cmp	r2, r3
 800908e:	d901      	bls.n	8009094 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e06c      	b.n	800916e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	699a      	ldr	r2, [r3, #24]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6a1b      	ldr	r3, [r3, #32]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	69fa      	ldr	r2, [r7, #28]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d902      	bls.n	80090b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	3303      	adds	r3, #3
 80090b4:	089b      	lsrs	r3, r3, #2
 80090b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80090b8:	e02b      	b.n	8009112 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	699a      	ldr	r2, [r3, #24]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d902      	bls.n	80090d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	3303      	adds	r3, #3
 80090da:	089b      	lsrs	r3, r3, #2
 80090dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6919      	ldr	r1, [r3, #16]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	4603      	mov	r3, r0
 80090f4:	6978      	ldr	r0, [r7, #20]
 80090f6:	f00a fd0d 	bl	8013b14 <USB_WritePacket>

    ep->xfer_buff  += len;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	691a      	ldr	r2, [r3, #16]
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	441a      	add	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6a1a      	ldr	r2, [r3, #32]
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	441a      	add	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	b29b      	uxth	r3, r3
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	429a      	cmp	r2, r3
 8009126:	d809      	bhi.n	800913c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6a1a      	ldr	r2, [r3, #32]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009130:	429a      	cmp	r2, r3
 8009132:	d203      	bcs.n	800913c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1be      	bne.n	80090ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	699a      	ldr	r2, [r3, #24]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	429a      	cmp	r2, r3
 8009146:	d811      	bhi.n	800916c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f003 030f 	and.w	r3, r3, #15
 800914e:	2201      	movs	r2, #1
 8009150:	fa02 f303 	lsl.w	r3, r2, r3
 8009154:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	43db      	mvns	r3, r3
 8009162:	6939      	ldr	r1, [r7, #16]
 8009164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009168:	4013      	ands	r3, r2
 800916a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3720      	adds	r7, #32
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
	...

08009178 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	333c      	adds	r3, #60	; 0x3c
 8009190:	3304      	adds	r3, #4
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	015a      	lsls	r2, r3, #5
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	4413      	add	r3, r2
 800919e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d17b      	bne.n	80092a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	f003 0308 	and.w	r3, r3, #8
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d015      	beq.n	80091e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	4a61      	ldr	r2, [pc, #388]	; (8009340 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	f240 80b9 	bls.w	8009334 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 80b3 	beq.w	8009334 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	015a      	lsls	r2, r3, #5
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	4413      	add	r3, r2
 80091d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091da:	461a      	mov	r2, r3
 80091dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091e0:	6093      	str	r3, [r2, #8]
 80091e2:	e0a7      	b.n	8009334 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f003 0320 	and.w	r3, r3, #32
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d009      	beq.n	8009202 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fa:	461a      	mov	r2, r3
 80091fc:	2320      	movs	r3, #32
 80091fe:	6093      	str	r3, [r2, #8]
 8009200:	e098      	b.n	8009334 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009208:	2b00      	cmp	r3, #0
 800920a:	f040 8093 	bne.w	8009334 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	4a4b      	ldr	r2, [pc, #300]	; (8009340 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d90f      	bls.n	8009236 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00a      	beq.n	8009236 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922c:	461a      	mov	r2, r3
 800922e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009232:	6093      	str	r3, [r2, #8]
 8009234:	e07e      	b.n	8009334 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	4613      	mov	r3, r2
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	4413      	add	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	4413      	add	r3, r2
 8009248:	3304      	adds	r3, #4
 800924a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	69da      	ldr	r2, [r3, #28]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	0159      	lsls	r1, r3, #5
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	440b      	add	r3, r1
 8009258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009262:	1ad2      	subs	r2, r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d114      	bne.n	8009298 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d109      	bne.n	800928a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6818      	ldr	r0, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009280:	461a      	mov	r2, r3
 8009282:	2101      	movs	r1, #1
 8009284:	f00a fede 	bl	8014044 <USB_EP0_OutStart>
 8009288:	e006      	b.n	8009298 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	691a      	ldr	r2, [r3, #16]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	441a      	add	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	b2db      	uxtb	r3, r3
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f00d fb6c 	bl	801697c <HAL_PCD_DataOutStageCallback>
 80092a4:	e046      	b.n	8009334 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	4a26      	ldr	r2, [pc, #152]	; (8009344 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d124      	bne.n	80092f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00a      	beq.n	80092ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c4:	461a      	mov	r2, r3
 80092c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092ca:	6093      	str	r3, [r2, #8]
 80092cc:	e032      	b.n	8009334 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	f003 0320 	and.w	r3, r3, #32
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d008      	beq.n	80092ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e4:	461a      	mov	r2, r3
 80092e6:	2320      	movs	r3, #32
 80092e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f00d fb43 	bl	801697c <HAL_PCD_DataOutStageCallback>
 80092f6:	e01d      	b.n	8009334 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d114      	bne.n	8009328 <PCD_EP_OutXfrComplete_int+0x1b0>
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	4613      	mov	r3, r2
 8009304:	00db      	lsls	r3, r3, #3
 8009306:	4413      	add	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	440b      	add	r3, r1
 800930c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d108      	bne.n	8009328 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6818      	ldr	r0, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009320:	461a      	mov	r2, r3
 8009322:	2100      	movs	r1, #0
 8009324:	f00a fe8e 	bl	8014044 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	b2db      	uxtb	r3, r3
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f00d fb24 	bl	801697c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3720      	adds	r7, #32
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	4f54300a 	.word	0x4f54300a
 8009344:	4f54310a 	.word	0x4f54310a

08009348 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	333c      	adds	r3, #60	; 0x3c
 8009360:	3304      	adds	r3, #4
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	4a15      	ldr	r2, [pc, #84]	; (80093d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d90e      	bls.n	800939c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009384:	2b00      	cmp	r3, #0
 8009386:	d009      	beq.n	800939c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009394:	461a      	mov	r2, r3
 8009396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800939a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f00d fadb 	bl	8016958 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	4a0a      	ldr	r2, [pc, #40]	; (80093d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d90c      	bls.n	80093c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d108      	bne.n	80093c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6818      	ldr	r0, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80093bc:	461a      	mov	r2, r3
 80093be:	2101      	movs	r1, #1
 80093c0:	f00a fe40 	bl	8014044 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	4f54300a 	.word	0x4f54300a

080093d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	460b      	mov	r3, r1
 80093de:	70fb      	strb	r3, [r7, #3]
 80093e0:	4613      	mov	r3, r2
 80093e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d107      	bne.n	8009402 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80093f2:	883b      	ldrh	r3, [r7, #0]
 80093f4:	0419      	lsls	r1, r3, #16
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	629a      	str	r2, [r3, #40]	; 0x28
 8009400:	e028      	b.n	8009454 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009408:	0c1b      	lsrs	r3, r3, #16
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	4413      	add	r3, r2
 800940e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009410:	2300      	movs	r3, #0
 8009412:	73fb      	strb	r3, [r7, #15]
 8009414:	e00d      	b.n	8009432 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	3340      	adds	r3, #64	; 0x40
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	0c1b      	lsrs	r3, r3, #16
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	4413      	add	r3, r2
 800942a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	3301      	adds	r3, #1
 8009430:	73fb      	strb	r3, [r7, #15]
 8009432:	7bfa      	ldrb	r2, [r7, #15]
 8009434:	78fb      	ldrb	r3, [r7, #3]
 8009436:	3b01      	subs	r3, #1
 8009438:	429a      	cmp	r2, r3
 800943a:	d3ec      	bcc.n	8009416 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800943c:	883b      	ldrh	r3, [r7, #0]
 800943e:	0418      	lsls	r0, r3, #16
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6819      	ldr	r1, [r3, #0]
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	3b01      	subs	r3, #1
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	4302      	orrs	r2, r0
 800944c:	3340      	adds	r3, #64	; 0x40
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	440b      	add	r3, r1
 8009452:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	460b      	mov	r3, r1
 800946c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	887a      	ldrh	r2, [r7, #2]
 8009474:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094b2:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	10000003 	.word	0x10000003

080094cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	460b      	mov	r3, r1
 80094d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80094ec:	4b19      	ldr	r3, [pc, #100]	; (8009554 <HAL_PWREx_ConfigSupply+0x70>)
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f003 0304 	and.w	r3, r3, #4
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d00a      	beq.n	800950e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80094f8:	4b16      	ldr	r3, [pc, #88]	; (8009554 <HAL_PWREx_ConfigSupply+0x70>)
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f003 0307 	and.w	r3, r3, #7
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	429a      	cmp	r2, r3
 8009504:	d001      	beq.n	800950a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e01f      	b.n	800954a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	e01d      	b.n	800954a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800950e:	4b11      	ldr	r3, [pc, #68]	; (8009554 <HAL_PWREx_ConfigSupply+0x70>)
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f023 0207 	bic.w	r2, r3, #7
 8009516:	490f      	ldr	r1, [pc, #60]	; (8009554 <HAL_PWREx_ConfigSupply+0x70>)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4313      	orrs	r3, r2
 800951c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800951e:	f7f9 fb3f 	bl	8002ba0 <HAL_GetTick>
 8009522:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009524:	e009      	b.n	800953a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009526:	f7f9 fb3b 	bl	8002ba0 <HAL_GetTick>
 800952a:	4602      	mov	r2, r0
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009534:	d901      	bls.n	800953a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e007      	b.n	800954a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800953a:	4b06      	ldr	r3, [pc, #24]	; (8009554 <HAL_PWREx_ConfigSupply+0x70>)
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009546:	d1ee      	bne.n	8009526 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	58024800 	.word	0x58024800

08009558 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009558:	b480      	push	{r7}
 800955a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800955c:	4b05      	ldr	r3, [pc, #20]	; (8009574 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	4a04      	ldr	r2, [pc, #16]	; (8009574 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009566:	60d3      	str	r3, [r2, #12]
}
 8009568:	bf00      	nop
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	58024800 	.word	0x58024800

08009578 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af02      	add	r7, sp, #8
 800957e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009580:	f7f9 fb0e 	bl	8002ba0 <HAL_GetTick>
 8009584:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e05f      	b.n	8009650 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009596:	b2db      	uxtb	r3, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	d107      	bne.n	80095ac <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7f8 f9c7 	bl	8001930 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80095a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f85a 	bl	8009660 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	3b01      	subs	r3, #1
 80095bc:	021a      	lsls	r2, r3, #8
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	430a      	orrs	r2, r1
 80095c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	2120      	movs	r1, #32
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f852 	bl	800967c <QSPI_WaitFlagStateUntilTimeout>
 80095d8:	4603      	mov	r3, r0
 80095da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80095dc:	7afb      	ldrb	r3, [r7, #11]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d135      	bne.n	800964e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	4b1b      	ldr	r3, [pc, #108]	; (8009658 <HAL_QSPI_Init+0xe0>)
 80095ea:	4013      	ands	r3, r2
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	6852      	ldr	r2, [r2, #4]
 80095f0:	0611      	lsls	r1, r2, #24
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	68d2      	ldr	r2, [r2, #12]
 80095f6:	4311      	orrs	r1, r2
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	69d2      	ldr	r2, [r2, #28]
 80095fc:	4311      	orrs	r1, r2
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	6a12      	ldr	r2, [r2, #32]
 8009602:	4311      	orrs	r1, r2
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	6812      	ldr	r2, [r2, #0]
 8009608:	430b      	orrs	r3, r1
 800960a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	4b12      	ldr	r3, [pc, #72]	; (800965c <HAL_QSPI_Init+0xe4>)
 8009614:	4013      	ands	r3, r2
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	6912      	ldr	r2, [r2, #16]
 800961a:	0411      	lsls	r1, r2, #16
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	6952      	ldr	r2, [r2, #20]
 8009620:	4311      	orrs	r1, r2
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	6992      	ldr	r2, [r2, #24]
 8009626:	4311      	orrs	r1, r2
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	6812      	ldr	r2, [r2, #0]
 800962c:	430b      	orrs	r3, r1
 800962e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f042 0201 	orr.w	r2, r2, #1
 800963e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800964e:	7afb      	ldrb	r3, [r7, #11]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	00ffff2f 	.word	0x00ffff2f
 800965c:	ffe0f8fe 	.word	0xffe0f8fe

08009660 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	683a      	ldr	r2, [r7, #0]
 800966e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	4613      	mov	r3, r2
 800968a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800968c:	e01a      	b.n	80096c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009694:	d016      	beq.n	80096c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009696:	f7f9 fa83 	bl	8002ba0 <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d302      	bcc.n	80096ac <QSPI_WaitFlagStateUntilTimeout+0x30>
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10b      	bne.n	80096c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2204      	movs	r2, #4
 80096b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b8:	f043 0201 	orr.w	r2, r3, #1
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e00e      	b.n	80096e2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689a      	ldr	r2, [r3, #8]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	4013      	ands	r3, r2
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	bf14      	ite	ne
 80096d2:	2301      	movne	r3, #1
 80096d4:	2300      	moveq	r3, #0
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	461a      	mov	r2, r3
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d1d6      	bne.n	800968e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08c      	sub	sp, #48	; 0x30
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d102      	bne.n	8009700 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	f000 bc1d 	b.w	8009f3a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 8087 	beq.w	800981c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800970e:	4b99      	ldr	r3, [pc, #612]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009716:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009718:	4b96      	ldr	r3, [pc, #600]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 800971a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800971e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009720:	2b10      	cmp	r3, #16
 8009722:	d007      	beq.n	8009734 <HAL_RCC_OscConfig+0x48>
 8009724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009726:	2b18      	cmp	r3, #24
 8009728:	d110      	bne.n	800974c <HAL_RCC_OscConfig+0x60>
 800972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972c:	f003 0303 	and.w	r3, r3, #3
 8009730:	2b02      	cmp	r3, #2
 8009732:	d10b      	bne.n	800974c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009734:	4b8f      	ldr	r3, [pc, #572]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d06c      	beq.n	800981a <HAL_RCC_OscConfig+0x12e>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d168      	bne.n	800981a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e3f6      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009754:	d106      	bne.n	8009764 <HAL_RCC_OscConfig+0x78>
 8009756:	4b87      	ldr	r3, [pc, #540]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a86      	ldr	r2, [pc, #536]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 800975c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009760:	6013      	str	r3, [r2, #0]
 8009762:	e02e      	b.n	80097c2 <HAL_RCC_OscConfig+0xd6>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10c      	bne.n	8009786 <HAL_RCC_OscConfig+0x9a>
 800976c:	4b81      	ldr	r3, [pc, #516]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a80      	ldr	r2, [pc, #512]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 8009772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009776:	6013      	str	r3, [r2, #0]
 8009778:	4b7e      	ldr	r3, [pc, #504]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a7d      	ldr	r2, [pc, #500]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 800977e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	e01d      	b.n	80097c2 <HAL_RCC_OscConfig+0xd6>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800978e:	d10c      	bne.n	80097aa <HAL_RCC_OscConfig+0xbe>
 8009790:	4b78      	ldr	r3, [pc, #480]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a77      	ldr	r2, [pc, #476]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 8009796:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	4b75      	ldr	r3, [pc, #468]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a74      	ldr	r2, [pc, #464]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 80097a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097a6:	6013      	str	r3, [r2, #0]
 80097a8:	e00b      	b.n	80097c2 <HAL_RCC_OscConfig+0xd6>
 80097aa:	4b72      	ldr	r3, [pc, #456]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a71      	ldr	r2, [pc, #452]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 80097b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	4b6f      	ldr	r3, [pc, #444]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a6e      	ldr	r2, [pc, #440]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 80097bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d013      	beq.n	80097f2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ca:	f7f9 f9e9 	bl	8002ba0 <HAL_GetTick>
 80097ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097d0:	e008      	b.n	80097e4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097d2:	f7f9 f9e5 	bl	8002ba0 <HAL_GetTick>
 80097d6:	4602      	mov	r2, r0
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	2b64      	cmp	r3, #100	; 0x64
 80097de:	d901      	bls.n	80097e4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e3aa      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097e4:	4b63      	ldr	r3, [pc, #396]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d0f0      	beq.n	80097d2 <HAL_RCC_OscConfig+0xe6>
 80097f0:	e014      	b.n	800981c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f2:	f7f9 f9d5 	bl	8002ba0 <HAL_GetTick>
 80097f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097f8:	e008      	b.n	800980c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097fa:	f7f9 f9d1 	bl	8002ba0 <HAL_GetTick>
 80097fe:	4602      	mov	r2, r0
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	2b64      	cmp	r3, #100	; 0x64
 8009806:	d901      	bls.n	800980c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e396      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800980c:	4b59      	ldr	r3, [pc, #356]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1f0      	bne.n	80097fa <HAL_RCC_OscConfig+0x10e>
 8009818:	e000      	b.n	800981c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800981a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0302 	and.w	r3, r3, #2
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 80cb 	beq.w	80099c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800982a:	4b52      	ldr	r3, [pc, #328]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009832:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009834:	4b4f      	ldr	r3, [pc, #316]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 8009836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009838:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800983a:	6a3b      	ldr	r3, [r7, #32]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d007      	beq.n	8009850 <HAL_RCC_OscConfig+0x164>
 8009840:	6a3b      	ldr	r3, [r7, #32]
 8009842:	2b18      	cmp	r3, #24
 8009844:	d156      	bne.n	80098f4 <HAL_RCC_OscConfig+0x208>
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	f003 0303 	and.w	r3, r3, #3
 800984c:	2b00      	cmp	r3, #0
 800984e:	d151      	bne.n	80098f4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009850:	4b48      	ldr	r3, [pc, #288]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b00      	cmp	r3, #0
 800985a:	d005      	beq.n	8009868 <HAL_RCC_OscConfig+0x17c>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d101      	bne.n	8009868 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e368      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009868:	4b42      	ldr	r3, [pc, #264]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f023 0219 	bic.w	r2, r3, #25
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	493f      	ldr	r1, [pc, #252]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 8009876:	4313      	orrs	r3, r2
 8009878:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800987a:	f7f9 f991 	bl	8002ba0 <HAL_GetTick>
 800987e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009880:	e008      	b.n	8009894 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009882:	f7f9 f98d 	bl	8002ba0 <HAL_GetTick>
 8009886:	4602      	mov	r2, r0
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	2b02      	cmp	r3, #2
 800988e:	d901      	bls.n	8009894 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e352      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009894:	4b37      	ldr	r3, [pc, #220]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 0304 	and.w	r3, r3, #4
 800989c:	2b00      	cmp	r3, #0
 800989e:	d0f0      	beq.n	8009882 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098a0:	f7f9 f9ae 	bl	8002c00 <HAL_GetREVID>
 80098a4:	4603      	mov	r3, r0
 80098a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d817      	bhi.n	80098de <HAL_RCC_OscConfig+0x1f2>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	2b40      	cmp	r3, #64	; 0x40
 80098b4:	d108      	bne.n	80098c8 <HAL_RCC_OscConfig+0x1dc>
 80098b6:	4b2f      	ldr	r3, [pc, #188]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80098be:	4a2d      	ldr	r2, [pc, #180]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 80098c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098c6:	e07b      	b.n	80099c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098c8:	4b2a      	ldr	r3, [pc, #168]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	031b      	lsls	r3, r3, #12
 80098d6:	4927      	ldr	r1, [pc, #156]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098dc:	e070      	b.n	80099c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098de:	4b25      	ldr	r3, [pc, #148]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	061b      	lsls	r3, r3, #24
 80098ec:	4921      	ldr	r1, [pc, #132]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098f2:	e065      	b.n	80099c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d048      	beq.n	800998e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80098fc:	4b1d      	ldr	r3, [pc, #116]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f023 0219 	bic.w	r2, r3, #25
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	491a      	ldr	r1, [pc, #104]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 800990a:	4313      	orrs	r3, r2
 800990c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800990e:	f7f9 f947 	bl	8002ba0 <HAL_GetTick>
 8009912:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009914:	e008      	b.n	8009928 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009916:	f7f9 f943 	bl	8002ba0 <HAL_GetTick>
 800991a:	4602      	mov	r2, r0
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	2b02      	cmp	r3, #2
 8009922:	d901      	bls.n	8009928 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009924:	2303      	movs	r3, #3
 8009926:	e308      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009928:	4b12      	ldr	r3, [pc, #72]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 0304 	and.w	r3, r3, #4
 8009930:	2b00      	cmp	r3, #0
 8009932:	d0f0      	beq.n	8009916 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009934:	f7f9 f964 	bl	8002c00 <HAL_GetREVID>
 8009938:	4603      	mov	r3, r0
 800993a:	f241 0203 	movw	r2, #4099	; 0x1003
 800993e:	4293      	cmp	r3, r2
 8009940:	d81a      	bhi.n	8009978 <HAL_RCC_OscConfig+0x28c>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	2b40      	cmp	r3, #64	; 0x40
 8009948:	d108      	bne.n	800995c <HAL_RCC_OscConfig+0x270>
 800994a:	4b0a      	ldr	r3, [pc, #40]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009952:	4a08      	ldr	r2, [pc, #32]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 8009954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009958:	6053      	str	r3, [r2, #4]
 800995a:	e031      	b.n	80099c0 <HAL_RCC_OscConfig+0x2d4>
 800995c:	4b05      	ldr	r3, [pc, #20]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	031b      	lsls	r3, r3, #12
 800996a:	4902      	ldr	r1, [pc, #8]	; (8009974 <HAL_RCC_OscConfig+0x288>)
 800996c:	4313      	orrs	r3, r2
 800996e:	604b      	str	r3, [r1, #4]
 8009970:	e026      	b.n	80099c0 <HAL_RCC_OscConfig+0x2d4>
 8009972:	bf00      	nop
 8009974:	58024400 	.word	0x58024400
 8009978:	4b9a      	ldr	r3, [pc, #616]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	061b      	lsls	r3, r3, #24
 8009986:	4997      	ldr	r1, [pc, #604]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009988:	4313      	orrs	r3, r2
 800998a:	604b      	str	r3, [r1, #4]
 800998c:	e018      	b.n	80099c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800998e:	4b95      	ldr	r3, [pc, #596]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a94      	ldr	r2, [pc, #592]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009994:	f023 0301 	bic.w	r3, r3, #1
 8009998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800999a:	f7f9 f901 	bl	8002ba0 <HAL_GetTick>
 800999e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099a0:	e008      	b.n	80099b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099a2:	f7f9 f8fd 	bl	8002ba0 <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d901      	bls.n	80099b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e2c2      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099b4:	4b8b      	ldr	r3, [pc, #556]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 0304 	and.w	r3, r3, #4
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1f0      	bne.n	80099a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0310 	and.w	r3, r3, #16
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 80a9 	beq.w	8009b20 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099ce:	4b85      	ldr	r3, [pc, #532]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099d8:	4b82      	ldr	r3, [pc, #520]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 80099da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d007      	beq.n	80099f4 <HAL_RCC_OscConfig+0x308>
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	2b18      	cmp	r3, #24
 80099e8:	d13a      	bne.n	8009a60 <HAL_RCC_OscConfig+0x374>
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f003 0303 	and.w	r3, r3, #3
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d135      	bne.n	8009a60 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099f4:	4b7b      	ldr	r3, [pc, #492]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d005      	beq.n	8009a0c <HAL_RCC_OscConfig+0x320>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	2b80      	cmp	r3, #128	; 0x80
 8009a06:	d001      	beq.n	8009a0c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e296      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a0c:	f7f9 f8f8 	bl	8002c00 <HAL_GetREVID>
 8009a10:	4603      	mov	r3, r0
 8009a12:	f241 0203 	movw	r2, #4099	; 0x1003
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d817      	bhi.n	8009a4a <HAL_RCC_OscConfig+0x35e>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	2b20      	cmp	r3, #32
 8009a20:	d108      	bne.n	8009a34 <HAL_RCC_OscConfig+0x348>
 8009a22:	4b70      	ldr	r3, [pc, #448]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a2a:	4a6e      	ldr	r2, [pc, #440]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a30:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a32:	e075      	b.n	8009b20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a34:	4b6b      	ldr	r3, [pc, #428]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	069b      	lsls	r3, r3, #26
 8009a42:	4968      	ldr	r1, [pc, #416]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a48:	e06a      	b.n	8009b20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a4a:	4b66      	ldr	r3, [pc, #408]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	061b      	lsls	r3, r3, #24
 8009a58:	4962      	ldr	r1, [pc, #392]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a5e:	e05f      	b.n	8009b20 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	69db      	ldr	r3, [r3, #28]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d042      	beq.n	8009aee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009a68:	4b5e      	ldr	r3, [pc, #376]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a5d      	ldr	r2, [pc, #372]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a74:	f7f9 f894 	bl	8002ba0 <HAL_GetTick>
 8009a78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a7a:	e008      	b.n	8009a8e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009a7c:	f7f9 f890 	bl	8002ba0 <HAL_GetTick>
 8009a80:	4602      	mov	r2, r0
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d901      	bls.n	8009a8e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e255      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a8e:	4b55      	ldr	r3, [pc, #340]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0f0      	beq.n	8009a7c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a9a:	f7f9 f8b1 	bl	8002c00 <HAL_GetREVID>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	f241 0203 	movw	r2, #4099	; 0x1003
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d817      	bhi.n	8009ad8 <HAL_RCC_OscConfig+0x3ec>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a1b      	ldr	r3, [r3, #32]
 8009aac:	2b20      	cmp	r3, #32
 8009aae:	d108      	bne.n	8009ac2 <HAL_RCC_OscConfig+0x3d6>
 8009ab0:	4b4c      	ldr	r3, [pc, #304]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009ab8:	4a4a      	ldr	r2, [pc, #296]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009aba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009abe:	6053      	str	r3, [r2, #4]
 8009ac0:	e02e      	b.n	8009b20 <HAL_RCC_OscConfig+0x434>
 8009ac2:	4b48      	ldr	r3, [pc, #288]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	069b      	lsls	r3, r3, #26
 8009ad0:	4944      	ldr	r1, [pc, #272]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	604b      	str	r3, [r1, #4]
 8009ad6:	e023      	b.n	8009b20 <HAL_RCC_OscConfig+0x434>
 8009ad8:	4b42      	ldr	r3, [pc, #264]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	061b      	lsls	r3, r3, #24
 8009ae6:	493f      	ldr	r1, [pc, #252]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	60cb      	str	r3, [r1, #12]
 8009aec:	e018      	b.n	8009b20 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009aee:	4b3d      	ldr	r3, [pc, #244]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a3c      	ldr	r2, [pc, #240]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009afa:	f7f9 f851 	bl	8002ba0 <HAL_GetTick>
 8009afe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b00:	e008      	b.n	8009b14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009b02:	f7f9 f84d 	bl	8002ba0 <HAL_GetTick>
 8009b06:	4602      	mov	r2, r0
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d901      	bls.n	8009b14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e212      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b14:	4b33      	ldr	r3, [pc, #204]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1f0      	bne.n	8009b02 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 0308 	and.w	r3, r3, #8
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d036      	beq.n	8009b9a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d019      	beq.n	8009b68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b34:	4b2b      	ldr	r3, [pc, #172]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b38:	4a2a      	ldr	r2, [pc, #168]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009b3a:	f043 0301 	orr.w	r3, r3, #1
 8009b3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b40:	f7f9 f82e 	bl	8002ba0 <HAL_GetTick>
 8009b44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b46:	e008      	b.n	8009b5a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b48:	f7f9 f82a 	bl	8002ba0 <HAL_GetTick>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d901      	bls.n	8009b5a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e1ef      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b5a:	4b22      	ldr	r3, [pc, #136]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0f0      	beq.n	8009b48 <HAL_RCC_OscConfig+0x45c>
 8009b66:	e018      	b.n	8009b9a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b68:	4b1e      	ldr	r3, [pc, #120]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b6c:	4a1d      	ldr	r2, [pc, #116]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009b6e:	f023 0301 	bic.w	r3, r3, #1
 8009b72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b74:	f7f9 f814 	bl	8002ba0 <HAL_GetTick>
 8009b78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b7a:	e008      	b.n	8009b8e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b7c:	f7f9 f810 	bl	8002ba0 <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d901      	bls.n	8009b8e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e1d5      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b8e:	4b15      	ldr	r3, [pc, #84]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b92:	f003 0302 	and.w	r3, r3, #2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1f0      	bne.n	8009b7c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 0320 	and.w	r3, r3, #32
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d039      	beq.n	8009c1a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d01c      	beq.n	8009be8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009bae:	4b0d      	ldr	r3, [pc, #52]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a0c      	ldr	r2, [pc, #48]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009bb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009bba:	f7f8 fff1 	bl	8002ba0 <HAL_GetTick>
 8009bbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009bc0:	e008      	b.n	8009bd4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009bc2:	f7f8 ffed 	bl	8002ba0 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d901      	bls.n	8009bd4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e1b2      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009bd4:	4b03      	ldr	r3, [pc, #12]	; (8009be4 <HAL_RCC_OscConfig+0x4f8>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d0f0      	beq.n	8009bc2 <HAL_RCC_OscConfig+0x4d6>
 8009be0:	e01b      	b.n	8009c1a <HAL_RCC_OscConfig+0x52e>
 8009be2:	bf00      	nop
 8009be4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009be8:	4b9b      	ldr	r3, [pc, #620]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a9a      	ldr	r2, [pc, #616]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bf2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009bf4:	f7f8 ffd4 	bl	8002ba0 <HAL_GetTick>
 8009bf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009bfa:	e008      	b.n	8009c0e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009bfc:	f7f8 ffd0 	bl	8002ba0 <HAL_GetTick>
 8009c00:	4602      	mov	r2, r0
 8009c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d901      	bls.n	8009c0e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e195      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c0e:	4b92      	ldr	r3, [pc, #584]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1f0      	bne.n	8009bfc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0304 	and.w	r3, r3, #4
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f000 8081 	beq.w	8009d2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009c28:	4b8c      	ldr	r3, [pc, #560]	; (8009e5c <HAL_RCC_OscConfig+0x770>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a8b      	ldr	r2, [pc, #556]	; (8009e5c <HAL_RCC_OscConfig+0x770>)
 8009c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c34:	f7f8 ffb4 	bl	8002ba0 <HAL_GetTick>
 8009c38:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c3a:	e008      	b.n	8009c4e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009c3c:	f7f8 ffb0 	bl	8002ba0 <HAL_GetTick>
 8009c40:	4602      	mov	r2, r0
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	2b64      	cmp	r3, #100	; 0x64
 8009c48:	d901      	bls.n	8009c4e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e175      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c4e:	4b83      	ldr	r3, [pc, #524]	; (8009e5c <HAL_RCC_OscConfig+0x770>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d0f0      	beq.n	8009c3c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d106      	bne.n	8009c70 <HAL_RCC_OscConfig+0x584>
 8009c62:	4b7d      	ldr	r3, [pc, #500]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c66:	4a7c      	ldr	r2, [pc, #496]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009c68:	f043 0301 	orr.w	r3, r3, #1
 8009c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c6e:	e02d      	b.n	8009ccc <HAL_RCC_OscConfig+0x5e0>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10c      	bne.n	8009c92 <HAL_RCC_OscConfig+0x5a6>
 8009c78:	4b77      	ldr	r3, [pc, #476]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7c:	4a76      	ldr	r2, [pc, #472]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009c7e:	f023 0301 	bic.w	r3, r3, #1
 8009c82:	6713      	str	r3, [r2, #112]	; 0x70
 8009c84:	4b74      	ldr	r3, [pc, #464]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c88:	4a73      	ldr	r2, [pc, #460]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009c8a:	f023 0304 	bic.w	r3, r3, #4
 8009c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c90:	e01c      	b.n	8009ccc <HAL_RCC_OscConfig+0x5e0>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	2b05      	cmp	r3, #5
 8009c98:	d10c      	bne.n	8009cb4 <HAL_RCC_OscConfig+0x5c8>
 8009c9a:	4b6f      	ldr	r3, [pc, #444]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9e:	4a6e      	ldr	r2, [pc, #440]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009ca0:	f043 0304 	orr.w	r3, r3, #4
 8009ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ca6:	4b6c      	ldr	r3, [pc, #432]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009caa:	4a6b      	ldr	r2, [pc, #428]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009cac:	f043 0301 	orr.w	r3, r3, #1
 8009cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8009cb2:	e00b      	b.n	8009ccc <HAL_RCC_OscConfig+0x5e0>
 8009cb4:	4b68      	ldr	r3, [pc, #416]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb8:	4a67      	ldr	r2, [pc, #412]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009cba:	f023 0301 	bic.w	r3, r3, #1
 8009cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8009cc0:	4b65      	ldr	r3, [pc, #404]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc4:	4a64      	ldr	r2, [pc, #400]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009cc6:	f023 0304 	bic.w	r3, r3, #4
 8009cca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d015      	beq.n	8009d00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cd4:	f7f8 ff64 	bl	8002ba0 <HAL_GetTick>
 8009cd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cda:	e00a      	b.n	8009cf2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009cdc:	f7f8 ff60 	bl	8002ba0 <HAL_GetTick>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d901      	bls.n	8009cf2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	e123      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cf2:	4b59      	ldr	r3, [pc, #356]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf6:	f003 0302 	and.w	r3, r3, #2
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d0ee      	beq.n	8009cdc <HAL_RCC_OscConfig+0x5f0>
 8009cfe:	e014      	b.n	8009d2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d00:	f7f8 ff4e 	bl	8002ba0 <HAL_GetTick>
 8009d04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d06:	e00a      	b.n	8009d1e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d08:	f7f8 ff4a 	bl	8002ba0 <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d901      	bls.n	8009d1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	e10d      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d1e:	4b4e      	ldr	r3, [pc, #312]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d22:	f003 0302 	and.w	r3, r3, #2
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1ee      	bne.n	8009d08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 8102 	beq.w	8009f38 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009d34:	4b48      	ldr	r3, [pc, #288]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d3c:	2b18      	cmp	r3, #24
 8009d3e:	f000 80bd 	beq.w	8009ebc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	f040 809e 	bne.w	8009e88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d4c:	4b42      	ldr	r3, [pc, #264]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a41      	ldr	r2, [pc, #260]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d58:	f7f8 ff22 	bl	8002ba0 <HAL_GetTick>
 8009d5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d5e:	e008      	b.n	8009d72 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d60:	f7f8 ff1e 	bl	8002ba0 <HAL_GetTick>
 8009d64:	4602      	mov	r2, r0
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d901      	bls.n	8009d72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	e0e3      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d72:	4b39      	ldr	r3, [pc, #228]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1f0      	bne.n	8009d60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d7e:	4b36      	ldr	r3, [pc, #216]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d82:	4b37      	ldr	r3, [pc, #220]	; (8009e60 <HAL_RCC_OscConfig+0x774>)
 8009d84:	4013      	ands	r3, r2
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d8e:	0112      	lsls	r2, r2, #4
 8009d90:	430a      	orrs	r2, r1
 8009d92:	4931      	ldr	r1, [pc, #196]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009d94:	4313      	orrs	r3, r2
 8009d96:	628b      	str	r3, [r1, #40]	; 0x28
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da6:	3b01      	subs	r3, #1
 8009da8:	025b      	lsls	r3, r3, #9
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	431a      	orrs	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db2:	3b01      	subs	r3, #1
 8009db4:	041b      	lsls	r3, r3, #16
 8009db6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009dba:	431a      	orrs	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	061b      	lsls	r3, r3, #24
 8009dc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009dc8:	4923      	ldr	r1, [pc, #140]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009dce:	4b22      	ldr	r3, [pc, #136]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd2:	4a21      	ldr	r2, [pc, #132]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009dd4:	f023 0301 	bic.w	r3, r3, #1
 8009dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009dda:	4b1f      	ldr	r3, [pc, #124]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dde:	4b21      	ldr	r3, [pc, #132]	; (8009e64 <HAL_RCC_OscConfig+0x778>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009de6:	00d2      	lsls	r2, r2, #3
 8009de8:	491b      	ldr	r1, [pc, #108]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009dee:	4b1a      	ldr	r3, [pc, #104]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df2:	f023 020c 	bic.w	r2, r3, #12
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	4917      	ldr	r1, [pc, #92]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009e00:	4b15      	ldr	r3, [pc, #84]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e04:	f023 0202 	bic.w	r2, r3, #2
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e0c:	4912      	ldr	r1, [pc, #72]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e12:	4b11      	ldr	r3, [pc, #68]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e16:	4a10      	ldr	r2, [pc, #64]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e1e:	4b0e      	ldr	r3, [pc, #56]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e22:	4a0d      	ldr	r2, [pc, #52]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009e2a:	4b0b      	ldr	r3, [pc, #44]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2e:	4a0a      	ldr	r2, [pc, #40]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009e36:	4b08      	ldr	r3, [pc, #32]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3a:	4a07      	ldr	r2, [pc, #28]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009e3c:	f043 0301 	orr.w	r3, r3, #1
 8009e40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e42:	4b05      	ldr	r3, [pc, #20]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a04      	ldr	r2, [pc, #16]	; (8009e58 <HAL_RCC_OscConfig+0x76c>)
 8009e48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e4e:	f7f8 fea7 	bl	8002ba0 <HAL_GetTick>
 8009e52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e54:	e011      	b.n	8009e7a <HAL_RCC_OscConfig+0x78e>
 8009e56:	bf00      	nop
 8009e58:	58024400 	.word	0x58024400
 8009e5c:	58024800 	.word	0x58024800
 8009e60:	fffffc0c 	.word	0xfffffc0c
 8009e64:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e68:	f7f8 fe9a 	bl	8002ba0 <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d901      	bls.n	8009e7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e05f      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e7a:	4b32      	ldr	r3, [pc, #200]	; (8009f44 <HAL_RCC_OscConfig+0x858>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d0f0      	beq.n	8009e68 <HAL_RCC_OscConfig+0x77c>
 8009e86:	e057      	b.n	8009f38 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e88:	4b2e      	ldr	r3, [pc, #184]	; (8009f44 <HAL_RCC_OscConfig+0x858>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a2d      	ldr	r2, [pc, #180]	; (8009f44 <HAL_RCC_OscConfig+0x858>)
 8009e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e94:	f7f8 fe84 	bl	8002ba0 <HAL_GetTick>
 8009e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e9a:	e008      	b.n	8009eae <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e9c:	f7f8 fe80 	bl	8002ba0 <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d901      	bls.n	8009eae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e045      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009eae:	4b25      	ldr	r3, [pc, #148]	; (8009f44 <HAL_RCC_OscConfig+0x858>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1f0      	bne.n	8009e9c <HAL_RCC_OscConfig+0x7b0>
 8009eba:	e03d      	b.n	8009f38 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009ebc:	4b21      	ldr	r3, [pc, #132]	; (8009f44 <HAL_RCC_OscConfig+0x858>)
 8009ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009ec2:	4b20      	ldr	r3, [pc, #128]	; (8009f44 <HAL_RCC_OscConfig+0x858>)
 8009ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d031      	beq.n	8009f34 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	f003 0203 	and.w	r2, r3, #3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d12a      	bne.n	8009f34 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	091b      	lsrs	r3, r3, #4
 8009ee2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d122      	bne.n	8009f34 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d11a      	bne.n	8009f34 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	0a5b      	lsrs	r3, r3, #9
 8009f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f0a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d111      	bne.n	8009f34 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	0c1b      	lsrs	r3, r3, #16
 8009f14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d108      	bne.n	8009f34 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	0e1b      	lsrs	r3, r3, #24
 8009f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d001      	beq.n	8009f38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	e000      	b.n	8009f3a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3730      	adds	r7, #48	; 0x30
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	58024400 	.word	0x58024400

08009f48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d101      	bne.n	8009f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e19c      	b.n	800a296 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f5c:	4b8a      	ldr	r3, [pc, #552]	; (800a188 <HAL_RCC_ClockConfig+0x240>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 030f 	and.w	r3, r3, #15
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d910      	bls.n	8009f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f6a:	4b87      	ldr	r3, [pc, #540]	; (800a188 <HAL_RCC_ClockConfig+0x240>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f023 020f 	bic.w	r2, r3, #15
 8009f72:	4985      	ldr	r1, [pc, #532]	; (800a188 <HAL_RCC_ClockConfig+0x240>)
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f7a:	4b83      	ldr	r3, [pc, #524]	; (800a188 <HAL_RCC_ClockConfig+0x240>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f003 030f 	and.w	r3, r3, #15
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d001      	beq.n	8009f8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e184      	b.n	800a296 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 0304 	and.w	r3, r3, #4
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d010      	beq.n	8009fba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	691a      	ldr	r2, [r3, #16]
 8009f9c:	4b7b      	ldr	r3, [pc, #492]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d908      	bls.n	8009fba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fa8:	4b78      	ldr	r3, [pc, #480]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	4975      	ldr	r1, [pc, #468]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f003 0308 	and.w	r3, r3, #8
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d010      	beq.n	8009fe8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	695a      	ldr	r2, [r3, #20]
 8009fca:	4b70      	ldr	r3, [pc, #448]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 8009fcc:	69db      	ldr	r3, [r3, #28]
 8009fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d908      	bls.n	8009fe8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009fd6:	4b6d      	ldr	r3, [pc, #436]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	496a      	ldr	r1, [pc, #424]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0310 	and.w	r3, r3, #16
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d010      	beq.n	800a016 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	699a      	ldr	r2, [r3, #24]
 8009ff8:	4b64      	ldr	r3, [pc, #400]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 8009ffa:	69db      	ldr	r3, [r3, #28]
 8009ffc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a000:	429a      	cmp	r2, r3
 800a002:	d908      	bls.n	800a016 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a004:	4b61      	ldr	r3, [pc, #388]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	495e      	ldr	r1, [pc, #376]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a012:	4313      	orrs	r3, r2
 800a014:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 0320 	and.w	r3, r3, #32
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d010      	beq.n	800a044 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	69da      	ldr	r2, [r3, #28]
 800a026:	4b59      	ldr	r3, [pc, #356]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a02e:	429a      	cmp	r2, r3
 800a030:	d908      	bls.n	800a044 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a032:	4b56      	ldr	r3, [pc, #344]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	4953      	ldr	r1, [pc, #332]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a040:	4313      	orrs	r3, r2
 800a042:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 0302 	and.w	r3, r3, #2
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d010      	beq.n	800a072 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	68da      	ldr	r2, [r3, #12]
 800a054:	4b4d      	ldr	r3, [pc, #308]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	f003 030f 	and.w	r3, r3, #15
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d908      	bls.n	800a072 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a060:	4b4a      	ldr	r3, [pc, #296]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a062:	699b      	ldr	r3, [r3, #24]
 800a064:	f023 020f 	bic.w	r2, r3, #15
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	4947      	ldr	r1, [pc, #284]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0301 	and.w	r3, r3, #1
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d055      	beq.n	800a12a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a07e:	4b43      	ldr	r3, [pc, #268]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	4940      	ldr	r1, [pc, #256]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d107      	bne.n	800a0a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a098:	4b3c      	ldr	r3, [pc, #240]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d121      	bne.n	800a0e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e0f6      	b.n	800a296 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	d107      	bne.n	800a0c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0b0:	4b36      	ldr	r3, [pc, #216]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d115      	bne.n	800a0e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e0ea      	b.n	800a296 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d107      	bne.n	800a0d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0c8:	4b30      	ldr	r3, [pc, #192]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d109      	bne.n	800a0e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e0de      	b.n	800a296 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0d8:	4b2c      	ldr	r3, [pc, #176]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0304 	and.w	r3, r3, #4
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d101      	bne.n	800a0e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e0d6      	b.n	800a296 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a0e8:	4b28      	ldr	r3, [pc, #160]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	f023 0207 	bic.w	r2, r3, #7
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	4925      	ldr	r1, [pc, #148]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0fa:	f7f8 fd51 	bl	8002ba0 <HAL_GetTick>
 800a0fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a100:	e00a      	b.n	800a118 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a102:	f7f8 fd4d 	bl	8002ba0 <HAL_GetTick>
 800a106:	4602      	mov	r2, r0
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a110:	4293      	cmp	r3, r2
 800a112:	d901      	bls.n	800a118 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e0be      	b.n	800a296 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a118:	4b1c      	ldr	r3, [pc, #112]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	00db      	lsls	r3, r3, #3
 800a126:	429a      	cmp	r2, r3
 800a128:	d1eb      	bne.n	800a102 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 0302 	and.w	r3, r3, #2
 800a132:	2b00      	cmp	r3, #0
 800a134:	d010      	beq.n	800a158 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68da      	ldr	r2, [r3, #12]
 800a13a:	4b14      	ldr	r3, [pc, #80]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	f003 030f 	and.w	r3, r3, #15
 800a142:	429a      	cmp	r2, r3
 800a144:	d208      	bcs.n	800a158 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a146:	4b11      	ldr	r3, [pc, #68]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	f023 020f 	bic.w	r2, r3, #15
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	490e      	ldr	r1, [pc, #56]	; (800a18c <HAL_RCC_ClockConfig+0x244>)
 800a154:	4313      	orrs	r3, r2
 800a156:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a158:	4b0b      	ldr	r3, [pc, #44]	; (800a188 <HAL_RCC_ClockConfig+0x240>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 030f 	and.w	r3, r3, #15
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	429a      	cmp	r2, r3
 800a164:	d214      	bcs.n	800a190 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a166:	4b08      	ldr	r3, [pc, #32]	; (800a188 <HAL_RCC_ClockConfig+0x240>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f023 020f 	bic.w	r2, r3, #15
 800a16e:	4906      	ldr	r1, [pc, #24]	; (800a188 <HAL_RCC_ClockConfig+0x240>)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	4313      	orrs	r3, r2
 800a174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a176:	4b04      	ldr	r3, [pc, #16]	; (800a188 <HAL_RCC_ClockConfig+0x240>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 030f 	and.w	r3, r3, #15
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	429a      	cmp	r2, r3
 800a182:	d005      	beq.n	800a190 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	e086      	b.n	800a296 <HAL_RCC_ClockConfig+0x34e>
 800a188:	52002000 	.word	0x52002000
 800a18c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0304 	and.w	r3, r3, #4
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d010      	beq.n	800a1be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	691a      	ldr	r2, [r3, #16]
 800a1a0:	4b3f      	ldr	r3, [pc, #252]	; (800a2a0 <HAL_RCC_ClockConfig+0x358>)
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d208      	bcs.n	800a1be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1ac:	4b3c      	ldr	r3, [pc, #240]	; (800a2a0 <HAL_RCC_ClockConfig+0x358>)
 800a1ae:	699b      	ldr	r3, [r3, #24]
 800a1b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	4939      	ldr	r1, [pc, #228]	; (800a2a0 <HAL_RCC_ClockConfig+0x358>)
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 0308 	and.w	r3, r3, #8
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d010      	beq.n	800a1ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	695a      	ldr	r2, [r3, #20]
 800a1ce:	4b34      	ldr	r3, [pc, #208]	; (800a2a0 <HAL_RCC_ClockConfig+0x358>)
 800a1d0:	69db      	ldr	r3, [r3, #28]
 800a1d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d208      	bcs.n	800a1ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1da:	4b31      	ldr	r3, [pc, #196]	; (800a2a0 <HAL_RCC_ClockConfig+0x358>)
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	492e      	ldr	r1, [pc, #184]	; (800a2a0 <HAL_RCC_ClockConfig+0x358>)
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 0310 	and.w	r3, r3, #16
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d010      	beq.n	800a21a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	699a      	ldr	r2, [r3, #24]
 800a1fc:	4b28      	ldr	r3, [pc, #160]	; (800a2a0 <HAL_RCC_ClockConfig+0x358>)
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a204:	429a      	cmp	r2, r3
 800a206:	d208      	bcs.n	800a21a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a208:	4b25      	ldr	r3, [pc, #148]	; (800a2a0 <HAL_RCC_ClockConfig+0x358>)
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	699b      	ldr	r3, [r3, #24]
 800a214:	4922      	ldr	r1, [pc, #136]	; (800a2a0 <HAL_RCC_ClockConfig+0x358>)
 800a216:	4313      	orrs	r3, r2
 800a218:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 0320 	and.w	r3, r3, #32
 800a222:	2b00      	cmp	r3, #0
 800a224:	d010      	beq.n	800a248 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	69da      	ldr	r2, [r3, #28]
 800a22a:	4b1d      	ldr	r3, [pc, #116]	; (800a2a0 <HAL_RCC_ClockConfig+0x358>)
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a232:	429a      	cmp	r2, r3
 800a234:	d208      	bcs.n	800a248 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a236:	4b1a      	ldr	r3, [pc, #104]	; (800a2a0 <HAL_RCC_ClockConfig+0x358>)
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	4917      	ldr	r1, [pc, #92]	; (800a2a0 <HAL_RCC_ClockConfig+0x358>)
 800a244:	4313      	orrs	r3, r2
 800a246:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a248:	f000 f834 	bl	800a2b4 <HAL_RCC_GetSysClockFreq>
 800a24c:	4602      	mov	r2, r0
 800a24e:	4b14      	ldr	r3, [pc, #80]	; (800a2a0 <HAL_RCC_ClockConfig+0x358>)
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	0a1b      	lsrs	r3, r3, #8
 800a254:	f003 030f 	and.w	r3, r3, #15
 800a258:	4912      	ldr	r1, [pc, #72]	; (800a2a4 <HAL_RCC_ClockConfig+0x35c>)
 800a25a:	5ccb      	ldrb	r3, [r1, r3]
 800a25c:	f003 031f 	and.w	r3, r3, #31
 800a260:	fa22 f303 	lsr.w	r3, r2, r3
 800a264:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a266:	4b0e      	ldr	r3, [pc, #56]	; (800a2a0 <HAL_RCC_ClockConfig+0x358>)
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	f003 030f 	and.w	r3, r3, #15
 800a26e:	4a0d      	ldr	r2, [pc, #52]	; (800a2a4 <HAL_RCC_ClockConfig+0x35c>)
 800a270:	5cd3      	ldrb	r3, [r2, r3]
 800a272:	f003 031f 	and.w	r3, r3, #31
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	fa22 f303 	lsr.w	r3, r2, r3
 800a27c:	4a0a      	ldr	r2, [pc, #40]	; (800a2a8 <HAL_RCC_ClockConfig+0x360>)
 800a27e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a280:	4a0a      	ldr	r2, [pc, #40]	; (800a2ac <HAL_RCC_ClockConfig+0x364>)
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a286:	4b0a      	ldr	r3, [pc, #40]	; (800a2b0 <HAL_RCC_ClockConfig+0x368>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7f8 fc3e 	bl	8002b0c <HAL_InitTick>
 800a290:	4603      	mov	r3, r0
 800a292:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a294:	7bfb      	ldrb	r3, [r7, #15]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	58024400 	.word	0x58024400
 800a2a4:	080174c0 	.word	0x080174c0
 800a2a8:	20000004 	.word	0x20000004
 800a2ac:	20000000 	.word	0x20000000
 800a2b0:	20000008 	.word	0x20000008

0800a2b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b089      	sub	sp, #36	; 0x24
 800a2b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2ba:	4bb3      	ldr	r3, [pc, #716]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2c2:	2b18      	cmp	r3, #24
 800a2c4:	f200 8155 	bhi.w	800a572 <HAL_RCC_GetSysClockFreq+0x2be>
 800a2c8:	a201      	add	r2, pc, #4	; (adr r2, 800a2d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ce:	bf00      	nop
 800a2d0:	0800a335 	.word	0x0800a335
 800a2d4:	0800a573 	.word	0x0800a573
 800a2d8:	0800a573 	.word	0x0800a573
 800a2dc:	0800a573 	.word	0x0800a573
 800a2e0:	0800a573 	.word	0x0800a573
 800a2e4:	0800a573 	.word	0x0800a573
 800a2e8:	0800a573 	.word	0x0800a573
 800a2ec:	0800a573 	.word	0x0800a573
 800a2f0:	0800a35b 	.word	0x0800a35b
 800a2f4:	0800a573 	.word	0x0800a573
 800a2f8:	0800a573 	.word	0x0800a573
 800a2fc:	0800a573 	.word	0x0800a573
 800a300:	0800a573 	.word	0x0800a573
 800a304:	0800a573 	.word	0x0800a573
 800a308:	0800a573 	.word	0x0800a573
 800a30c:	0800a573 	.word	0x0800a573
 800a310:	0800a361 	.word	0x0800a361
 800a314:	0800a573 	.word	0x0800a573
 800a318:	0800a573 	.word	0x0800a573
 800a31c:	0800a573 	.word	0x0800a573
 800a320:	0800a573 	.word	0x0800a573
 800a324:	0800a573 	.word	0x0800a573
 800a328:	0800a573 	.word	0x0800a573
 800a32c:	0800a573 	.word	0x0800a573
 800a330:	0800a367 	.word	0x0800a367
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a334:	4b94      	ldr	r3, [pc, #592]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0320 	and.w	r3, r3, #32
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d009      	beq.n	800a354 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a340:	4b91      	ldr	r3, [pc, #580]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	08db      	lsrs	r3, r3, #3
 800a346:	f003 0303 	and.w	r3, r3, #3
 800a34a:	4a90      	ldr	r2, [pc, #576]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a34c:	fa22 f303 	lsr.w	r3, r2, r3
 800a350:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a352:	e111      	b.n	800a578 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a354:	4b8d      	ldr	r3, [pc, #564]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a356:	61bb      	str	r3, [r7, #24]
    break;
 800a358:	e10e      	b.n	800a578 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a35a:	4b8d      	ldr	r3, [pc, #564]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a35c:	61bb      	str	r3, [r7, #24]
    break;
 800a35e:	e10b      	b.n	800a578 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a360:	4b8c      	ldr	r3, [pc, #560]	; (800a594 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a362:	61bb      	str	r3, [r7, #24]
    break;
 800a364:	e108      	b.n	800a578 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a366:	4b88      	ldr	r3, [pc, #544]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36a:	f003 0303 	and.w	r3, r3, #3
 800a36e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a370:	4b85      	ldr	r3, [pc, #532]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a374:	091b      	lsrs	r3, r3, #4
 800a376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a37a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a37c:	4b82      	ldr	r3, [pc, #520]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a380:	f003 0301 	and.w	r3, r3, #1
 800a384:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a386:	4b80      	ldr	r3, [pc, #512]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38a:	08db      	lsrs	r3, r3, #3
 800a38c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	fb02 f303 	mul.w	r3, r2, r3
 800a396:	ee07 3a90 	vmov	s15, r3
 800a39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a39e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 80e1 	beq.w	800a56c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	f000 8083 	beq.w	800a4b8 <HAL_RCC_GetSysClockFreq+0x204>
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	f200 80a1 	bhi.w	800a4fc <HAL_RCC_GetSysClockFreq+0x248>
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d003      	beq.n	800a3c8 <HAL_RCC_GetSysClockFreq+0x114>
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d056      	beq.n	800a474 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a3c6:	e099      	b.n	800a4fc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3c8:	4b6f      	ldr	r3, [pc, #444]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f003 0320 	and.w	r3, r3, #32
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d02d      	beq.n	800a430 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3d4:	4b6c      	ldr	r3, [pc, #432]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	08db      	lsrs	r3, r3, #3
 800a3da:	f003 0303 	and.w	r3, r3, #3
 800a3de:	4a6b      	ldr	r2, [pc, #428]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a3e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	ee07 3a90 	vmov	s15, r3
 800a3ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	ee07 3a90 	vmov	s15, r3
 800a3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3fe:	4b62      	ldr	r3, [pc, #392]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a406:	ee07 3a90 	vmov	s15, r3
 800a40a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a40e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a412:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a598 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a41a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a41e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a42a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a42e:	e087      	b.n	800a540 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	ee07 3a90 	vmov	s15, r3
 800a436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a43a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a59c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a43e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a442:	4b51      	ldr	r3, [pc, #324]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a44a:	ee07 3a90 	vmov	s15, r3
 800a44e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a452:	ed97 6a02 	vldr	s12, [r7, #8]
 800a456:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a598 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a45a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a45e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a46a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a46e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a472:	e065      	b.n	800a540 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	ee07 3a90 	vmov	s15, r3
 800a47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a47e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a5a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a486:	4b40      	ldr	r3, [pc, #256]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a48e:	ee07 3a90 	vmov	s15, r3
 800a492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a496:	ed97 6a02 	vldr	s12, [r7, #8]
 800a49a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a598 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a49e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4b6:	e043      	b.n	800a540 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	ee07 3a90 	vmov	s15, r3
 800a4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a5a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a4c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4ca:	4b2f      	ldr	r3, [pc, #188]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d2:	ee07 3a90 	vmov	s15, r3
 800a4d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4da:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a598 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4fa:	e021      	b.n	800a540 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	ee07 3a90 	vmov	s15, r3
 800a502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a506:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a5a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a50a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a50e:	4b1e      	ldr	r3, [pc, #120]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a516:	ee07 3a90 	vmov	s15, r3
 800a51a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a51e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a522:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a598 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a52a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a52e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a53a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a53e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a540:	4b11      	ldr	r3, [pc, #68]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a544:	0a5b      	lsrs	r3, r3, #9
 800a546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a54a:	3301      	adds	r3, #1
 800a54c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	ee07 3a90 	vmov	s15, r3
 800a554:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a558:	edd7 6a07 	vldr	s13, [r7, #28]
 800a55c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a564:	ee17 3a90 	vmov	r3, s15
 800a568:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a56a:	e005      	b.n	800a578 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a56c:	2300      	movs	r3, #0
 800a56e:	61bb      	str	r3, [r7, #24]
    break;
 800a570:	e002      	b.n	800a578 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a572:	4b07      	ldr	r3, [pc, #28]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a574:	61bb      	str	r3, [r7, #24]
    break;
 800a576:	bf00      	nop
  }

  return sysclockfreq;
 800a578:	69bb      	ldr	r3, [r7, #24]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3724      	adds	r7, #36	; 0x24
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	58024400 	.word	0x58024400
 800a58c:	03d09000 	.word	0x03d09000
 800a590:	003d0900 	.word	0x003d0900
 800a594:	00f42400 	.word	0x00f42400
 800a598:	46000000 	.word	0x46000000
 800a59c:	4c742400 	.word	0x4c742400
 800a5a0:	4a742400 	.word	0x4a742400
 800a5a4:	4b742400 	.word	0x4b742400

0800a5a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a5ae:	f7ff fe81 	bl	800a2b4 <HAL_RCC_GetSysClockFreq>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	4b10      	ldr	r3, [pc, #64]	; (800a5f8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	0a1b      	lsrs	r3, r3, #8
 800a5ba:	f003 030f 	and.w	r3, r3, #15
 800a5be:	490f      	ldr	r1, [pc, #60]	; (800a5fc <HAL_RCC_GetHCLKFreq+0x54>)
 800a5c0:	5ccb      	ldrb	r3, [r1, r3]
 800a5c2:	f003 031f 	and.w	r3, r3, #31
 800a5c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5cc:	4b0a      	ldr	r3, [pc, #40]	; (800a5f8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	f003 030f 	and.w	r3, r3, #15
 800a5d4:	4a09      	ldr	r2, [pc, #36]	; (800a5fc <HAL_RCC_GetHCLKFreq+0x54>)
 800a5d6:	5cd3      	ldrb	r3, [r2, r3]
 800a5d8:	f003 031f 	and.w	r3, r3, #31
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e2:	4a07      	ldr	r2, [pc, #28]	; (800a600 <HAL_RCC_GetHCLKFreq+0x58>)
 800a5e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a5e6:	4a07      	ldr	r2, [pc, #28]	; (800a604 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a5ec:	4b04      	ldr	r3, [pc, #16]	; (800a600 <HAL_RCC_GetHCLKFreq+0x58>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	58024400 	.word	0x58024400
 800a5fc:	080174c0 	.word	0x080174c0
 800a600:	20000004 	.word	0x20000004
 800a604:	20000000 	.word	0x20000000

0800a608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a60c:	f7ff ffcc 	bl	800a5a8 <HAL_RCC_GetHCLKFreq>
 800a610:	4602      	mov	r2, r0
 800a612:	4b06      	ldr	r3, [pc, #24]	; (800a62c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a614:	69db      	ldr	r3, [r3, #28]
 800a616:	091b      	lsrs	r3, r3, #4
 800a618:	f003 0307 	and.w	r3, r3, #7
 800a61c:	4904      	ldr	r1, [pc, #16]	; (800a630 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a61e:	5ccb      	ldrb	r3, [r1, r3]
 800a620:	f003 031f 	and.w	r3, r3, #31
 800a624:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a628:	4618      	mov	r0, r3
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	58024400 	.word	0x58024400
 800a630:	080174c0 	.word	0x080174c0

0800a634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a638:	f7ff ffb6 	bl	800a5a8 <HAL_RCC_GetHCLKFreq>
 800a63c:	4602      	mov	r2, r0
 800a63e:	4b06      	ldr	r3, [pc, #24]	; (800a658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a640:	69db      	ldr	r3, [r3, #28]
 800a642:	0a1b      	lsrs	r3, r3, #8
 800a644:	f003 0307 	and.w	r3, r3, #7
 800a648:	4904      	ldr	r1, [pc, #16]	; (800a65c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a64a:	5ccb      	ldrb	r3, [r1, r3]
 800a64c:	f003 031f 	and.w	r3, r3, #31
 800a650:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a654:	4618      	mov	r0, r3
 800a656:	bd80      	pop	{r7, pc}
 800a658:	58024400 	.word	0x58024400
 800a65c:	080174c0 	.word	0x080174c0

0800a660 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a668:	2300      	movs	r3, #0
 800a66a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a66c:	2300      	movs	r3, #0
 800a66e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d03f      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a680:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a684:	d02a      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a686:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a68a:	d824      	bhi.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a68c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a690:	d018      	beq.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a692:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a696:	d81e      	bhi.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d003      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a69c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6a0:	d007      	beq.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a6a2:	e018      	b.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6a4:	4ba3      	ldr	r3, [pc, #652]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a8:	4aa2      	ldr	r2, [pc, #648]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a6aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a6b0:	e015      	b.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	2102      	movs	r1, #2
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f001 fff9 	bl	800c6b0 <RCCEx_PLL2_Config>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a6c2:	e00c      	b.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	3324      	adds	r3, #36	; 0x24
 800a6c8:	2102      	movs	r1, #2
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f002 f8a2 	bl	800c814 <RCCEx_PLL3_Config>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a6d4:	e003      	b.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	75fb      	strb	r3, [r7, #23]
      break;
 800a6da:	e000      	b.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a6dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6de:	7dfb      	ldrb	r3, [r7, #23]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d109      	bne.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a6e4:	4b93      	ldr	r3, [pc, #588]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a6e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6f0:	4990      	ldr	r1, [pc, #576]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	650b      	str	r3, [r1, #80]	; 0x50
 800a6f6:	e001      	b.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f8:	7dfb      	ldrb	r3, [r7, #23]
 800a6fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a704:	2b00      	cmp	r3, #0
 800a706:	d03d      	beq.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a70c:	2b04      	cmp	r3, #4
 800a70e:	d826      	bhi.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a710:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a716:	bf00      	nop
 800a718:	0800a72d 	.word	0x0800a72d
 800a71c:	0800a73b 	.word	0x0800a73b
 800a720:	0800a74d 	.word	0x0800a74d
 800a724:	0800a765 	.word	0x0800a765
 800a728:	0800a765 	.word	0x0800a765
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a72c:	4b81      	ldr	r3, [pc, #516]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a730:	4a80      	ldr	r2, [pc, #512]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a736:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a738:	e015      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	3304      	adds	r3, #4
 800a73e:	2100      	movs	r1, #0
 800a740:	4618      	mov	r0, r3
 800a742:	f001 ffb5 	bl	800c6b0 <RCCEx_PLL2_Config>
 800a746:	4603      	mov	r3, r0
 800a748:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a74a:	e00c      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3324      	adds	r3, #36	; 0x24
 800a750:	2100      	movs	r1, #0
 800a752:	4618      	mov	r0, r3
 800a754:	f002 f85e 	bl	800c814 <RCCEx_PLL3_Config>
 800a758:	4603      	mov	r3, r0
 800a75a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a75c:	e003      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	75fb      	strb	r3, [r7, #23]
      break;
 800a762:	e000      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a764:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a766:	7dfb      	ldrb	r3, [r7, #23]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d109      	bne.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a76c:	4b71      	ldr	r3, [pc, #452]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a76e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a770:	f023 0207 	bic.w	r2, r3, #7
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a778:	496e      	ldr	r1, [pc, #440]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	650b      	str	r3, [r1, #80]	; 0x50
 800a77e:	e001      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a780:	7dfb      	ldrb	r3, [r7, #23]
 800a782:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d042      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a798:	d02b      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a79a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a79e:	d825      	bhi.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a7a0:	2bc0      	cmp	r3, #192	; 0xc0
 800a7a2:	d028      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a7a4:	2bc0      	cmp	r3, #192	; 0xc0
 800a7a6:	d821      	bhi.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a7a8:	2b80      	cmp	r3, #128	; 0x80
 800a7aa:	d016      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a7ac:	2b80      	cmp	r3, #128	; 0x80
 800a7ae:	d81d      	bhi.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d002      	beq.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a7b4:	2b40      	cmp	r3, #64	; 0x40
 800a7b6:	d007      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a7b8:	e018      	b.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7ba:	4b5e      	ldr	r3, [pc, #376]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7be:	4a5d      	ldr	r2, [pc, #372]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a7c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a7c6:	e017      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f001 ff6e 	bl	800c6b0 <RCCEx_PLL2_Config>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a7d8:	e00e      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	3324      	adds	r3, #36	; 0x24
 800a7de:	2100      	movs	r1, #0
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f002 f817 	bl	800c814 <RCCEx_PLL3_Config>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a7ea:	e005      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a7f0:	e002      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a7f2:	bf00      	nop
 800a7f4:	e000      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a7f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7f8:	7dfb      	ldrb	r3, [r7, #23]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d109      	bne.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a7fe:	4b4d      	ldr	r3, [pc, #308]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a802:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a80a:	494a      	ldr	r1, [pc, #296]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a80c:	4313      	orrs	r3, r2
 800a80e:	650b      	str	r3, [r1, #80]	; 0x50
 800a810:	e001      	b.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a812:	7dfb      	ldrb	r3, [r7, #23]
 800a814:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d049      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a828:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a82c:	d030      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a82e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a832:	d82a      	bhi.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a834:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a838:	d02c      	beq.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a83a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a83e:	d824      	bhi.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a844:	d018      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a84a:	d81e      	bhi.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d003      	beq.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a854:	d007      	beq.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a856:	e018      	b.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a858:	4b36      	ldr	r3, [pc, #216]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85c:	4a35      	ldr	r2, [pc, #212]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a85e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a862:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a864:	e017      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	3304      	adds	r3, #4
 800a86a:	2100      	movs	r1, #0
 800a86c:	4618      	mov	r0, r3
 800a86e:	f001 ff1f 	bl	800c6b0 <RCCEx_PLL2_Config>
 800a872:	4603      	mov	r3, r0
 800a874:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a876:	e00e      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	3324      	adds	r3, #36	; 0x24
 800a87c:	2100      	movs	r1, #0
 800a87e:	4618      	mov	r0, r3
 800a880:	f001 ffc8 	bl	800c814 <RCCEx_PLL3_Config>
 800a884:	4603      	mov	r3, r0
 800a886:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a888:	e005      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	75fb      	strb	r3, [r7, #23]
      break;
 800a88e:	e002      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a890:	bf00      	nop
 800a892:	e000      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a894:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a896:	7dfb      	ldrb	r3, [r7, #23]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d10a      	bne.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a89c:	4b25      	ldr	r3, [pc, #148]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a89e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a8aa:	4922      	ldr	r1, [pc, #136]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	658b      	str	r3, [r1, #88]	; 0x58
 800a8b0:	e001      	b.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
 800a8b4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d04b      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a8c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a8cc:	d030      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a8ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a8d2:	d82a      	bhi.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a8d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a8d8:	d02e      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800a8da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a8de:	d824      	bhi.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a8e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8e4:	d018      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a8e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8ea:	d81e      	bhi.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d003      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a8f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a8f4:	d007      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a8f6:	e018      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8f8:	4b0e      	ldr	r3, [pc, #56]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fc:	4a0d      	ldr	r2, [pc, #52]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a8fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a902:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a904:	e019      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	3304      	adds	r3, #4
 800a90a:	2100      	movs	r1, #0
 800a90c:	4618      	mov	r0, r3
 800a90e:	f001 fecf 	bl	800c6b0 <RCCEx_PLL2_Config>
 800a912:	4603      	mov	r3, r0
 800a914:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a916:	e010      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	3324      	adds	r3, #36	; 0x24
 800a91c:	2100      	movs	r1, #0
 800a91e:	4618      	mov	r0, r3
 800a920:	f001 ff78 	bl	800c814 <RCCEx_PLL3_Config>
 800a924:	4603      	mov	r3, r0
 800a926:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a928:	e007      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	75fb      	strb	r3, [r7, #23]
      break;
 800a92e:	e004      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800a930:	bf00      	nop
 800a932:	e002      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a934:	58024400 	.word	0x58024400
      break;
 800a938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a93a:	7dfb      	ldrb	r3, [r7, #23]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10a      	bne.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a940:	4b99      	ldr	r3, [pc, #612]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a944:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a94e:	4996      	ldr	r1, [pc, #600]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a950:	4313      	orrs	r3, r2
 800a952:	658b      	str	r3, [r1, #88]	; 0x58
 800a954:	e001      	b.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a956:	7dfb      	ldrb	r3, [r7, #23]
 800a958:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a962:	2b00      	cmp	r3, #0
 800a964:	d032      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a96a:	2b30      	cmp	r3, #48	; 0x30
 800a96c:	d01c      	beq.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800a96e:	2b30      	cmp	r3, #48	; 0x30
 800a970:	d817      	bhi.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a972:	2b20      	cmp	r3, #32
 800a974:	d00c      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800a976:	2b20      	cmp	r3, #32
 800a978:	d813      	bhi.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d016      	beq.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a97e:	2b10      	cmp	r3, #16
 800a980:	d10f      	bne.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a982:	4b89      	ldr	r3, [pc, #548]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a986:	4a88      	ldr	r2, [pc, #544]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a98c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a98e:	e00e      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	3304      	adds	r3, #4
 800a994:	2102      	movs	r1, #2
 800a996:	4618      	mov	r0, r3
 800a998:	f001 fe8a 	bl	800c6b0 <RCCEx_PLL2_Config>
 800a99c:	4603      	mov	r3, r0
 800a99e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a9a0:	e005      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a9a6:	e002      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a9a8:	bf00      	nop
 800a9aa:	e000      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a9ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d109      	bne.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a9b4:	4b7c      	ldr	r3, [pc, #496]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a9b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9c0:	4979      	ldr	r1, [pc, #484]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a9c6:	e001      	b.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d047      	beq.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9e0:	d030      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a9e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9e6:	d82a      	bhi.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a9e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9ec:	d02c      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800a9ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9f2:	d824      	bhi.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a9f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9f8:	d018      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800a9fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9fe:	d81e      	bhi.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d003      	beq.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800aa04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa08:	d007      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800aa0a:	e018      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa0c:	4b66      	ldr	r3, [pc, #408]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa10:	4a65      	ldr	r2, [pc, #404]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa18:	e017      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	2100      	movs	r1, #0
 800aa20:	4618      	mov	r0, r3
 800aa22:	f001 fe45 	bl	800c6b0 <RCCEx_PLL2_Config>
 800aa26:	4603      	mov	r3, r0
 800aa28:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa2a:	e00e      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	3324      	adds	r3, #36	; 0x24
 800aa30:	2100      	movs	r1, #0
 800aa32:	4618      	mov	r0, r3
 800aa34:	f001 feee 	bl	800c814 <RCCEx_PLL3_Config>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa3c:	e005      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	75fb      	strb	r3, [r7, #23]
      break;
 800aa42:	e002      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800aa44:	bf00      	nop
 800aa46:	e000      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800aa48:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d109      	bne.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800aa50:	4b55      	ldr	r3, [pc, #340]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa54:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa5c:	4952      	ldr	r1, [pc, #328]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	650b      	str	r3, [r1, #80]	; 0x50
 800aa62:	e001      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa64:	7dfb      	ldrb	r3, [r7, #23]
 800aa66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d049      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa7c:	d02e      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800aa7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa82:	d828      	bhi.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800aa84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa88:	d02a      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800aa8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa8e:	d822      	bhi.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800aa90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa94:	d026      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800aa96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa9a:	d81c      	bhi.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800aa9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaa0:	d010      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800aaa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaa6:	d816      	bhi.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d01d      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800aaac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aab0:	d111      	bne.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	3304      	adds	r3, #4
 800aab6:	2101      	movs	r1, #1
 800aab8:	4618      	mov	r0, r3
 800aaba:	f001 fdf9 	bl	800c6b0 <RCCEx_PLL2_Config>
 800aabe:	4603      	mov	r3, r0
 800aac0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aac2:	e012      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	3324      	adds	r3, #36	; 0x24
 800aac8:	2101      	movs	r1, #1
 800aaca:	4618      	mov	r0, r3
 800aacc:	f001 fea2 	bl	800c814 <RCCEx_PLL3_Config>
 800aad0:	4603      	mov	r3, r0
 800aad2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aad4:	e009      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	75fb      	strb	r3, [r7, #23]
      break;
 800aada:	e006      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800aadc:	bf00      	nop
 800aade:	e004      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800aae0:	bf00      	nop
 800aae2:	e002      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800aae4:	bf00      	nop
 800aae6:	e000      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800aae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d109      	bne.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aaf0:	4b2d      	ldr	r3, [pc, #180]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aaf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaf4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aafc:	492a      	ldr	r1, [pc, #168]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aafe:	4313      	orrs	r3, r2
 800ab00:	650b      	str	r3, [r1, #80]	; 0x50
 800ab02:	e001      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab04:	7dfb      	ldrb	r3, [r7, #23]
 800ab06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d04d      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab1e:	d02e      	beq.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800ab20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab24:	d828      	bhi.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800ab26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab2a:	d02a      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800ab2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab30:	d822      	bhi.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800ab32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ab36:	d026      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800ab38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ab3c:	d81c      	bhi.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800ab3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab42:	d010      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ab44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab48:	d816      	bhi.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d01d      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800ab4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab52:	d111      	bne.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	3304      	adds	r3, #4
 800ab58:	2101      	movs	r1, #1
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f001 fda8 	bl	800c6b0 <RCCEx_PLL2_Config>
 800ab60:	4603      	mov	r3, r0
 800ab62:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ab64:	e012      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	3324      	adds	r3, #36	; 0x24
 800ab6a:	2101      	movs	r1, #1
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f001 fe51 	bl	800c814 <RCCEx_PLL3_Config>
 800ab72:	4603      	mov	r3, r0
 800ab74:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ab76:	e009      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab7c:	e006      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800ab7e:	bf00      	nop
 800ab80:	e004      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800ab82:	bf00      	nop
 800ab84:	e002      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800ab86:	bf00      	nop
 800ab88:	e000      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800ab8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab8c:	7dfb      	ldrb	r3, [r7, #23]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10c      	bne.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ab92:	4b05      	ldr	r3, [pc, #20]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ab94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aba0:	4901      	ldr	r1, [pc, #4]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aba2:	4313      	orrs	r3, r2
 800aba4:	658b      	str	r3, [r1, #88]	; 0x58
 800aba6:	e003      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800aba8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abac:	7dfb      	ldrb	r3, [r7, #23]
 800abae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d02f      	beq.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abc4:	d00e      	beq.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800abc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abca:	d814      	bhi.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d015      	beq.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800abd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abd4:	d10f      	bne.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abd6:	4baf      	ldr	r3, [pc, #700]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800abd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abda:	4aae      	ldr	r2, [pc, #696]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800abdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abe0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800abe2:	e00c      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	3304      	adds	r3, #4
 800abe8:	2101      	movs	r1, #1
 800abea:	4618      	mov	r0, r3
 800abec:	f001 fd60 	bl	800c6b0 <RCCEx_PLL2_Config>
 800abf0:	4603      	mov	r3, r0
 800abf2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800abf4:	e003      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	75fb      	strb	r3, [r7, #23]
      break;
 800abfa:	e000      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800abfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d109      	bne.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ac04:	4ba3      	ldr	r3, [pc, #652]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac10:	49a0      	ldr	r1, [pc, #640]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac12:	4313      	orrs	r3, r2
 800ac14:	650b      	str	r3, [r1, #80]	; 0x50
 800ac16:	e001      	b.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac18:	7dfb      	ldrb	r3, [r7, #23]
 800ac1a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d032      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac2c:	2b03      	cmp	r3, #3
 800ac2e:	d81b      	bhi.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800ac30:	a201      	add	r2, pc, #4	; (adr r2, 800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800ac32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac36:	bf00      	nop
 800ac38:	0800ac6f 	.word	0x0800ac6f
 800ac3c:	0800ac49 	.word	0x0800ac49
 800ac40:	0800ac57 	.word	0x0800ac57
 800ac44:	0800ac6f 	.word	0x0800ac6f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac48:	4b92      	ldr	r3, [pc, #584]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4c:	4a91      	ldr	r2, [pc, #580]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ac54:	e00c      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3304      	adds	r3, #4
 800ac5a:	2102      	movs	r1, #2
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f001 fd27 	bl	800c6b0 <RCCEx_PLL2_Config>
 800ac62:	4603      	mov	r3, r0
 800ac64:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ac66:	e003      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac6c:	e000      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800ac6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac70:	7dfb      	ldrb	r3, [r7, #23]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d109      	bne.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ac76:	4b87      	ldr	r3, [pc, #540]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac7a:	f023 0203 	bic.w	r2, r3, #3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac82:	4984      	ldr	r1, [pc, #528]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac84:	4313      	orrs	r3, r2
 800ac86:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ac88:	e001      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac8a:	7dfb      	ldrb	r3, [r7, #23]
 800ac8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f000 8086 	beq.w	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac9c:	4b7e      	ldr	r3, [pc, #504]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a7d      	ldr	r2, [pc, #500]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800aca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aca6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aca8:	f7f7 ff7a 	bl	8002ba0 <HAL_GetTick>
 800acac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acae:	e009      	b.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acb0:	f7f7 ff76 	bl	8002ba0 <HAL_GetTick>
 800acb4:	4602      	mov	r2, r0
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	2b64      	cmp	r3, #100	; 0x64
 800acbc:	d902      	bls.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800acbe:	2303      	movs	r3, #3
 800acc0:	75fb      	strb	r3, [r7, #23]
        break;
 800acc2:	e005      	b.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acc4:	4b74      	ldr	r3, [pc, #464]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800accc:	2b00      	cmp	r3, #0
 800acce:	d0ef      	beq.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800acd0:	7dfb      	ldrb	r3, [r7, #23]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d166      	bne.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800acd6:	4b6f      	ldr	r3, [pc, #444]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800acd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ace0:	4053      	eors	r3, r2
 800ace2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d013      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800acea:	4b6a      	ldr	r3, [pc, #424]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800acec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acf2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800acf4:	4b67      	ldr	r3, [pc, #412]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800acf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acf8:	4a66      	ldr	r2, [pc, #408]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800acfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acfe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ad00:	4b64      	ldr	r3, [pc, #400]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad04:	4a63      	ldr	r2, [pc, #396]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad0a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ad0c:	4a61      	ldr	r2, [pc, #388]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad1c:	d115      	bne.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad1e:	f7f7 ff3f 	bl	8002ba0 <HAL_GetTick>
 800ad22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad24:	e00b      	b.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad26:	f7f7 ff3b 	bl	8002ba0 <HAL_GetTick>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d902      	bls.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	75fb      	strb	r3, [r7, #23]
            break;
 800ad3c:	e005      	b.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad3e:	4b55      	ldr	r3, [pc, #340]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad42:	f003 0302 	and.w	r3, r3, #2
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d0ed      	beq.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800ad4a:	7dfb      	ldrb	r3, [r7, #23]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d126      	bne.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad5e:	d10d      	bne.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800ad60:	4b4c      	ldr	r3, [pc, #304]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad6e:	0919      	lsrs	r1, r3, #4
 800ad70:	4b4a      	ldr	r3, [pc, #296]	; (800ae9c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800ad72:	400b      	ands	r3, r1
 800ad74:	4947      	ldr	r1, [pc, #284]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad76:	4313      	orrs	r3, r2
 800ad78:	610b      	str	r3, [r1, #16]
 800ad7a:	e005      	b.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800ad7c:	4b45      	ldr	r3, [pc, #276]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	4a44      	ldr	r2, [pc, #272]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad86:	6113      	str	r3, [r2, #16]
 800ad88:	4b42      	ldr	r3, [pc, #264]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad96:	493f      	ldr	r1, [pc, #252]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	670b      	str	r3, [r1, #112]	; 0x70
 800ad9c:	e004      	b.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ad9e:	7dfb      	ldrb	r3, [r7, #23]
 800ada0:	75bb      	strb	r3, [r7, #22]
 800ada2:	e001      	b.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ada4:	7dfb      	ldrb	r3, [r7, #23]
 800ada6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0301 	and.w	r3, r3, #1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 8085 	beq.w	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adba:	2b28      	cmp	r3, #40	; 0x28
 800adbc:	d866      	bhi.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800adbe:	a201      	add	r2, pc, #4	; (adr r2, 800adc4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800adc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc4:	0800aea1 	.word	0x0800aea1
 800adc8:	0800ae8d 	.word	0x0800ae8d
 800adcc:	0800ae8d 	.word	0x0800ae8d
 800add0:	0800ae8d 	.word	0x0800ae8d
 800add4:	0800ae8d 	.word	0x0800ae8d
 800add8:	0800ae8d 	.word	0x0800ae8d
 800addc:	0800ae8d 	.word	0x0800ae8d
 800ade0:	0800ae8d 	.word	0x0800ae8d
 800ade4:	0800ae69 	.word	0x0800ae69
 800ade8:	0800ae8d 	.word	0x0800ae8d
 800adec:	0800ae8d 	.word	0x0800ae8d
 800adf0:	0800ae8d 	.word	0x0800ae8d
 800adf4:	0800ae8d 	.word	0x0800ae8d
 800adf8:	0800ae8d 	.word	0x0800ae8d
 800adfc:	0800ae8d 	.word	0x0800ae8d
 800ae00:	0800ae8d 	.word	0x0800ae8d
 800ae04:	0800ae7b 	.word	0x0800ae7b
 800ae08:	0800ae8d 	.word	0x0800ae8d
 800ae0c:	0800ae8d 	.word	0x0800ae8d
 800ae10:	0800ae8d 	.word	0x0800ae8d
 800ae14:	0800ae8d 	.word	0x0800ae8d
 800ae18:	0800ae8d 	.word	0x0800ae8d
 800ae1c:	0800ae8d 	.word	0x0800ae8d
 800ae20:	0800ae8d 	.word	0x0800ae8d
 800ae24:	0800aea1 	.word	0x0800aea1
 800ae28:	0800ae8d 	.word	0x0800ae8d
 800ae2c:	0800ae8d 	.word	0x0800ae8d
 800ae30:	0800ae8d 	.word	0x0800ae8d
 800ae34:	0800ae8d 	.word	0x0800ae8d
 800ae38:	0800ae8d 	.word	0x0800ae8d
 800ae3c:	0800ae8d 	.word	0x0800ae8d
 800ae40:	0800ae8d 	.word	0x0800ae8d
 800ae44:	0800aea1 	.word	0x0800aea1
 800ae48:	0800ae8d 	.word	0x0800ae8d
 800ae4c:	0800ae8d 	.word	0x0800ae8d
 800ae50:	0800ae8d 	.word	0x0800ae8d
 800ae54:	0800ae8d 	.word	0x0800ae8d
 800ae58:	0800ae8d 	.word	0x0800ae8d
 800ae5c:	0800ae8d 	.word	0x0800ae8d
 800ae60:	0800ae8d 	.word	0x0800ae8d
 800ae64:	0800aea1 	.word	0x0800aea1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	3304      	adds	r3, #4
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f001 fc1e 	bl	800c6b0 <RCCEx_PLL2_Config>
 800ae74:	4603      	mov	r3, r0
 800ae76:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ae78:	e013      	b.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	3324      	adds	r3, #36	; 0x24
 800ae7e:	2101      	movs	r1, #1
 800ae80:	4618      	mov	r0, r3
 800ae82:	f001 fcc7 	bl	800c814 <RCCEx_PLL3_Config>
 800ae86:	4603      	mov	r3, r0
 800ae88:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ae8a:	e00a      	b.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	75fb      	strb	r3, [r7, #23]
      break;
 800ae90:	e007      	b.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800ae92:	bf00      	nop
 800ae94:	58024400 	.word	0x58024400
 800ae98:	58024800 	.word	0x58024800
 800ae9c:	00ffffcf 	.word	0x00ffffcf
      break;
 800aea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aea2:	7dfb      	ldrb	r3, [r7, #23]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d109      	bne.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aea8:	4b96      	ldr	r3, [pc, #600]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800aeaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aeb4:	4993      	ldr	r1, [pc, #588]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	654b      	str	r3, [r1, #84]	; 0x54
 800aeba:	e001      	b.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aebc:	7dfb      	ldrb	r3, [r7, #23]
 800aebe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 0302 	and.w	r3, r3, #2
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d038      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aed0:	2b05      	cmp	r3, #5
 800aed2:	d821      	bhi.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800aed4:	a201      	add	r2, pc, #4	; (adr r2, 800aedc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800aed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeda:	bf00      	nop
 800aedc:	0800af1f 	.word	0x0800af1f
 800aee0:	0800aef5 	.word	0x0800aef5
 800aee4:	0800af07 	.word	0x0800af07
 800aee8:	0800af1f 	.word	0x0800af1f
 800aeec:	0800af1f 	.word	0x0800af1f
 800aef0:	0800af1f 	.word	0x0800af1f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3304      	adds	r3, #4
 800aef8:	2101      	movs	r1, #1
 800aefa:	4618      	mov	r0, r3
 800aefc:	f001 fbd8 	bl	800c6b0 <RCCEx_PLL2_Config>
 800af00:	4603      	mov	r3, r0
 800af02:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800af04:	e00c      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	3324      	adds	r3, #36	; 0x24
 800af0a:	2101      	movs	r1, #1
 800af0c:	4618      	mov	r0, r3
 800af0e:	f001 fc81 	bl	800c814 <RCCEx_PLL3_Config>
 800af12:	4603      	mov	r3, r0
 800af14:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800af16:	e003      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	75fb      	strb	r3, [r7, #23]
      break;
 800af1c:	e000      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800af1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af20:	7dfb      	ldrb	r3, [r7, #23]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d109      	bne.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800af26:	4b77      	ldr	r3, [pc, #476]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800af28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af2a:	f023 0207 	bic.w	r2, r3, #7
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af32:	4974      	ldr	r1, [pc, #464]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800af34:	4313      	orrs	r3, r2
 800af36:	654b      	str	r3, [r1, #84]	; 0x54
 800af38:	e001      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af3a:	7dfb      	ldrb	r3, [r7, #23]
 800af3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0304 	and.w	r3, r3, #4
 800af46:	2b00      	cmp	r3, #0
 800af48:	d03a      	beq.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af50:	2b05      	cmp	r3, #5
 800af52:	d821      	bhi.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800af54:	a201      	add	r2, pc, #4	; (adr r2, 800af5c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800af56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5a:	bf00      	nop
 800af5c:	0800af9f 	.word	0x0800af9f
 800af60:	0800af75 	.word	0x0800af75
 800af64:	0800af87 	.word	0x0800af87
 800af68:	0800af9f 	.word	0x0800af9f
 800af6c:	0800af9f 	.word	0x0800af9f
 800af70:	0800af9f 	.word	0x0800af9f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3304      	adds	r3, #4
 800af78:	2101      	movs	r1, #1
 800af7a:	4618      	mov	r0, r3
 800af7c:	f001 fb98 	bl	800c6b0 <RCCEx_PLL2_Config>
 800af80:	4603      	mov	r3, r0
 800af82:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800af84:	e00c      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3324      	adds	r3, #36	; 0x24
 800af8a:	2101      	movs	r1, #1
 800af8c:	4618      	mov	r0, r3
 800af8e:	f001 fc41 	bl	800c814 <RCCEx_PLL3_Config>
 800af92:	4603      	mov	r3, r0
 800af94:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800af96:	e003      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af98:	2301      	movs	r3, #1
 800af9a:	75fb      	strb	r3, [r7, #23]
      break;
 800af9c:	e000      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800af9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afa0:	7dfb      	ldrb	r3, [r7, #23]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10a      	bne.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800afa6:	4b57      	ldr	r3, [pc, #348]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800afa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afaa:	f023 0207 	bic.w	r2, r3, #7
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afb4:	4953      	ldr	r1, [pc, #332]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800afb6:	4313      	orrs	r3, r2
 800afb8:	658b      	str	r3, [r1, #88]	; 0x58
 800afba:	e001      	b.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afbc:	7dfb      	ldrb	r3, [r7, #23]
 800afbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 0320 	and.w	r3, r3, #32
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d04b      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afd6:	d02e      	beq.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800afd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afdc:	d828      	bhi.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800afde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afe2:	d02a      	beq.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800afe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afe8:	d822      	bhi.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800afea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afee:	d026      	beq.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800aff0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aff4:	d81c      	bhi.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800aff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800affa:	d010      	beq.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800affc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b000:	d816      	bhi.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b002:	2b00      	cmp	r3, #0
 800b004:	d01d      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800b006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b00a:	d111      	bne.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	3304      	adds	r3, #4
 800b010:	2100      	movs	r1, #0
 800b012:	4618      	mov	r0, r3
 800b014:	f001 fb4c 	bl	800c6b0 <RCCEx_PLL2_Config>
 800b018:	4603      	mov	r3, r0
 800b01a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b01c:	e012      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	3324      	adds	r3, #36	; 0x24
 800b022:	2102      	movs	r1, #2
 800b024:	4618      	mov	r0, r3
 800b026:	f001 fbf5 	bl	800c814 <RCCEx_PLL3_Config>
 800b02a:	4603      	mov	r3, r0
 800b02c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b02e:	e009      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	75fb      	strb	r3, [r7, #23]
      break;
 800b034:	e006      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b036:	bf00      	nop
 800b038:	e004      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b03a:	bf00      	nop
 800b03c:	e002      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b03e:	bf00      	nop
 800b040:	e000      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b042:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b044:	7dfb      	ldrb	r3, [r7, #23]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10a      	bne.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b04a:	4b2e      	ldr	r3, [pc, #184]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b04e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b058:	492a      	ldr	r1, [pc, #168]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b05a:	4313      	orrs	r3, r2
 800b05c:	654b      	str	r3, [r1, #84]	; 0x54
 800b05e:	e001      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b060:	7dfb      	ldrb	r3, [r7, #23]
 800b062:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d04d      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b076:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b07a:	d02e      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b07c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b080:	d828      	bhi.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b086:	d02a      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b08c:	d822      	bhi.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b08e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b092:	d026      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b094:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b098:	d81c      	bhi.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b09a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b09e:	d010      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800b0a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0a4:	d816      	bhi.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d01d      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800b0aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0ae:	d111      	bne.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	3304      	adds	r3, #4
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f001 fafa 	bl	800c6b0 <RCCEx_PLL2_Config>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b0c0:	e012      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3324      	adds	r3, #36	; 0x24
 800b0c6:	2102      	movs	r1, #2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f001 fba3 	bl	800c814 <RCCEx_PLL3_Config>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b0d2:	e009      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	75fb      	strb	r3, [r7, #23]
      break;
 800b0d8:	e006      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b0da:	bf00      	nop
 800b0dc:	e004      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b0de:	bf00      	nop
 800b0e0:	e002      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b0e2:	bf00      	nop
 800b0e4:	e000      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b0e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0e8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d10c      	bne.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b0ee:	4b05      	ldr	r3, [pc, #20]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b0f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0fc:	4901      	ldr	r1, [pc, #4]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b0fe:	4313      	orrs	r3, r2
 800b100:	658b      	str	r3, [r1, #88]	; 0x58
 800b102:	e003      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b104:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b108:	7dfb      	ldrb	r3, [r7, #23]
 800b10a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b114:	2b00      	cmp	r3, #0
 800b116:	d04b      	beq.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b11e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b122:	d02e      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b124:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b128:	d828      	bhi.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b12a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b12e:	d02a      	beq.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b134:	d822      	bhi.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b136:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b13a:	d026      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800b13c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b140:	d81c      	bhi.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b146:	d010      	beq.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800b148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b14c:	d816      	bhi.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d01d      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800b152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b156:	d111      	bne.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	3304      	adds	r3, #4
 800b15c:	2100      	movs	r1, #0
 800b15e:	4618      	mov	r0, r3
 800b160:	f001 faa6 	bl	800c6b0 <RCCEx_PLL2_Config>
 800b164:	4603      	mov	r3, r0
 800b166:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b168:	e012      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	3324      	adds	r3, #36	; 0x24
 800b16e:	2102      	movs	r1, #2
 800b170:	4618      	mov	r0, r3
 800b172:	f001 fb4f 	bl	800c814 <RCCEx_PLL3_Config>
 800b176:	4603      	mov	r3, r0
 800b178:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b17a:	e009      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	75fb      	strb	r3, [r7, #23]
      break;
 800b180:	e006      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b182:	bf00      	nop
 800b184:	e004      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b186:	bf00      	nop
 800b188:	e002      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b18a:	bf00      	nop
 800b18c:	e000      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b18e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b190:	7dfb      	ldrb	r3, [r7, #23]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d10a      	bne.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b196:	4b9d      	ldr	r3, [pc, #628]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b19a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1a4:	4999      	ldr	r1, [pc, #612]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	658b      	str	r3, [r1, #88]	; 0x58
 800b1aa:	e001      	b.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ac:	7dfb      	ldrb	r3, [r7, #23]
 800b1ae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 0308 	and.w	r3, r3, #8
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d01a      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1c6:	d10a      	bne.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	3324      	adds	r3, #36	; 0x24
 800b1cc:	2102      	movs	r1, #2
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f001 fb20 	bl	800c814 <RCCEx_PLL3_Config>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d001      	beq.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b1de:	4b8b      	ldr	r3, [pc, #556]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1ec:	4987      	ldr	r1, [pc, #540]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f003 0310 	and.w	r3, r3, #16
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d01a      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b208:	d10a      	bne.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	3324      	adds	r3, #36	; 0x24
 800b20e:	2102      	movs	r1, #2
 800b210:	4618      	mov	r0, r3
 800b212:	f001 faff 	bl	800c814 <RCCEx_PLL3_Config>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b220:	4b7a      	ldr	r3, [pc, #488]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b22e:	4977      	ldr	r1, [pc, #476]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b230:	4313      	orrs	r3, r2
 800b232:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d034      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b24a:	d01d      	beq.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800b24c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b250:	d817      	bhi.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800b252:	2b00      	cmp	r3, #0
 800b254:	d003      	beq.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b25a:	d009      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800b25c:	e011      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	3304      	adds	r3, #4
 800b262:	2100      	movs	r1, #0
 800b264:	4618      	mov	r0, r3
 800b266:	f001 fa23 	bl	800c6b0 <RCCEx_PLL2_Config>
 800b26a:	4603      	mov	r3, r0
 800b26c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b26e:	e00c      	b.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3324      	adds	r3, #36	; 0x24
 800b274:	2102      	movs	r1, #2
 800b276:	4618      	mov	r0, r3
 800b278:	f001 facc 	bl	800c814 <RCCEx_PLL3_Config>
 800b27c:	4603      	mov	r3, r0
 800b27e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b280:	e003      	b.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	75fb      	strb	r3, [r7, #23]
      break;
 800b286:	e000      	b.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800b288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b28a:	7dfb      	ldrb	r3, [r7, #23]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10a      	bne.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b290:	4b5e      	ldr	r3, [pc, #376]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b294:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b29e:	495b      	ldr	r1, [pc, #364]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	658b      	str	r3, [r1, #88]	; 0x58
 800b2a4:	e001      	b.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d033      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2c0:	d01c      	beq.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800b2c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2c6:	d816      	bhi.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800b2c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2cc:	d003      	beq.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800b2ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2d2:	d007      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800b2d4:	e00f      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2d6:	4b4d      	ldr	r3, [pc, #308]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2da:	4a4c      	ldr	r2, [pc, #304]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b2dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b2e2:	e00c      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3324      	adds	r3, #36	; 0x24
 800b2e8:	2101      	movs	r1, #1
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f001 fa92 	bl	800c814 <RCCEx_PLL3_Config>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b2f4:	e003      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	75fb      	strb	r3, [r7, #23]
      break;
 800b2fa:	e000      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800b2fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2fe:	7dfb      	ldrb	r3, [r7, #23]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10a      	bne.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b304:	4b41      	ldr	r3, [pc, #260]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b312:	493e      	ldr	r1, [pc, #248]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b314:	4313      	orrs	r3, r2
 800b316:	654b      	str	r3, [r1, #84]	; 0x54
 800b318:	e001      	b.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b31a:	7dfb      	ldrb	r3, [r7, #23]
 800b31c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b326:	2b00      	cmp	r3, #0
 800b328:	d029      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d003      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800b332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b336:	d007      	beq.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800b338:	e00f      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b33a:	4b34      	ldr	r3, [pc, #208]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33e:	4a33      	ldr	r2, [pc, #204]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b344:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b346:	e00b      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	3304      	adds	r3, #4
 800b34c:	2102      	movs	r1, #2
 800b34e:	4618      	mov	r0, r3
 800b350:	f001 f9ae 	bl	800c6b0 <RCCEx_PLL2_Config>
 800b354:	4603      	mov	r3, r0
 800b356:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b358:	e002      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	75fb      	strb	r3, [r7, #23]
      break;
 800b35e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b360:	7dfb      	ldrb	r3, [r7, #23]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d109      	bne.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b366:	4b29      	ldr	r3, [pc, #164]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b36a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b372:	4926      	ldr	r1, [pc, #152]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b374:	4313      	orrs	r3, r2
 800b376:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b378:	e001      	b.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b37a:	7dfb      	ldrb	r3, [r7, #23]
 800b37c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00a      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	3324      	adds	r3, #36	; 0x24
 800b38e:	2102      	movs	r1, #2
 800b390:	4618      	mov	r0, r3
 800b392:	f001 fa3f 	bl	800c814 <RCCEx_PLL3_Config>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d001      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d033      	beq.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3b4:	d017      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b3b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3ba:	d811      	bhi.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b3bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3c0:	d013      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b3c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3c6:	d80b      	bhi.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d010      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800b3cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3d0:	d106      	bne.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3d2:	4b0e      	ldr	r3, [pc, #56]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d6:	4a0d      	ldr	r2, [pc, #52]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b3d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b3de:	e007      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3e4:	e004      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b3e6:	bf00      	nop
 800b3e8:	e002      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b3ea:	bf00      	nop
 800b3ec:	e000      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b3ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3f0:	7dfb      	ldrb	r3, [r7, #23]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10c      	bne.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b3f6:	4b05      	ldr	r3, [pc, #20]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b402:	4902      	ldr	r1, [pc, #8]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b404:	4313      	orrs	r3, r2
 800b406:	654b      	str	r3, [r1, #84]	; 0x54
 800b408:	e004      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800b40a:	bf00      	nop
 800b40c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b410:	7dfb      	ldrb	r3, [r7, #23]
 800b412:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d008      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b420:	4b31      	ldr	r3, [pc, #196]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b424:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b42c:	492e      	ldr	r1, [pc, #184]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b42e:	4313      	orrs	r3, r2
 800b430:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d009      	beq.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b43e:	4b2a      	ldr	r3, [pc, #168]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b44c:	4926      	ldr	r1, [pc, #152]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b44e:	4313      	orrs	r3, r2
 800b450:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d008      	beq.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b45e:	4b22      	ldr	r3, [pc, #136]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b462:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b46a:	491f      	ldr	r1, [pc, #124]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b46c:	4313      	orrs	r3, r2
 800b46e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00d      	beq.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b47c:	4b1a      	ldr	r3, [pc, #104]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	4a19      	ldr	r2, [pc, #100]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b482:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b486:	6113      	str	r3, [r2, #16]
 800b488:	4b17      	ldr	r3, [pc, #92]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b48a:	691a      	ldr	r2, [r3, #16]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b492:	4915      	ldr	r1, [pc, #84]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b494:	4313      	orrs	r3, r2
 800b496:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	da08      	bge.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b4a0:	4b11      	ldr	r3, [pc, #68]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b4a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4ac:	490e      	ldr	r1, [pc, #56]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d009      	beq.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b4be:	4b0a      	ldr	r3, [pc, #40]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4cc:	4906      	ldr	r1, [pc, #24]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b4d2:	7dbb      	ldrb	r3, [r7, #22]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d101      	bne.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	e000      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3718      	adds	r7, #24
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	58024400 	.word	0x58024400

0800b4ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b090      	sub	sp, #64	; 0x40
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4fa:	f040 8095 	bne.w	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b4fe:	4b97      	ldr	r3, [pc, #604]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b502:	f003 0307 	and.w	r3, r3, #7
 800b506:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	2b04      	cmp	r3, #4
 800b50c:	f200 8088 	bhi.w	800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b510:	a201      	add	r2, pc, #4	; (adr r2, 800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800b512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b516:	bf00      	nop
 800b518:	0800b52d 	.word	0x0800b52d
 800b51c:	0800b555 	.word	0x0800b555
 800b520:	0800b57d 	.word	0x0800b57d
 800b524:	0800b619 	.word	0x0800b619
 800b528:	0800b5a5 	.word	0x0800b5a5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b52c:	4b8b      	ldr	r3, [pc, #556]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b534:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b538:	d108      	bne.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b53a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b53e:	4618      	mov	r0, r3
 800b540:	f000 ff64 	bl	800c40c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b546:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b548:	f000 bc94 	b.w	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b550:	f000 bc90 	b.w	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b554:	4b81      	ldr	r3, [pc, #516]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b55c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b560:	d108      	bne.n	800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b562:	f107 0318 	add.w	r3, r7, #24
 800b566:	4618      	mov	r0, r3
 800b568:	f000 fca8 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b570:	f000 bc80 	b.w	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b574:	2300      	movs	r3, #0
 800b576:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b578:	f000 bc7c 	b.w	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b57c:	4b77      	ldr	r3, [pc, #476]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b588:	d108      	bne.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b58a:	f107 030c 	add.w	r3, r7, #12
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 fde8 	bl	800c164 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b598:	f000 bc6c 	b.w	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b59c:	2300      	movs	r3, #0
 800b59e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5a0:	f000 bc68 	b.w	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b5a4:	4b6d      	ldr	r3, [pc, #436]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5ac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5ae:	4b6b      	ldr	r3, [pc, #428]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 0304 	and.w	r3, r3, #4
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	d10c      	bne.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800b5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d109      	bne.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b5c0:	4b66      	ldr	r3, [pc, #408]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	08db      	lsrs	r3, r3, #3
 800b5c6:	f003 0303 	and.w	r3, r3, #3
 800b5ca:	4a65      	ldr	r2, [pc, #404]	; (800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b5cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5d2:	e01f      	b.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b5d4:	4b61      	ldr	r3, [pc, #388]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5e0:	d106      	bne.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5e8:	d102      	bne.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b5ea:	4b5e      	ldr	r3, [pc, #376]	; (800b764 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5ee:	e011      	b.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5f0:	4b5a      	ldr	r3, [pc, #360]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5fc:	d106      	bne.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800b5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b604:	d102      	bne.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b606:	4b58      	ldr	r3, [pc, #352]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b60a:	e003      	b.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b60c:	2300      	movs	r3, #0
 800b60e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b610:	f000 bc30 	b.w	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b614:	f000 bc2e 	b.w	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b618:	4b54      	ldr	r3, [pc, #336]	; (800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b61a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b61c:	f000 bc2a 	b.w	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b620:	2300      	movs	r3, #0
 800b622:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b624:	f000 bc26 	b.w	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b62e:	f040 809f 	bne.w	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b632:	4b4a      	ldr	r3, [pc, #296]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b636:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b63a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b642:	d04d      	beq.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b64a:	f200 8084 	bhi.w	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	2bc0      	cmp	r3, #192	; 0xc0
 800b652:	d07d      	beq.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b656:	2bc0      	cmp	r3, #192	; 0xc0
 800b658:	d87d      	bhi.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65c:	2b80      	cmp	r3, #128	; 0x80
 800b65e:	d02d      	beq.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b662:	2b80      	cmp	r3, #128	; 0x80
 800b664:	d877      	bhi.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d003      	beq.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800b66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66e:	2b40      	cmp	r3, #64	; 0x40
 800b670:	d012      	beq.n	800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800b672:	e070      	b.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b674:	4b39      	ldr	r3, [pc, #228]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b67c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b680:	d107      	bne.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b686:	4618      	mov	r0, r3
 800b688:	f000 fec0 	bl	800c40c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b690:	e3f0      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b692:	2300      	movs	r3, #0
 800b694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b696:	e3ed      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b698:	4b30      	ldr	r3, [pc, #192]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6a4:	d107      	bne.n	800b6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6a6:	f107 0318 	add.w	r3, r7, #24
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 fc06 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b6b4:	e3de      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6ba:	e3db      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6bc:	4b27      	ldr	r3, [pc, #156]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6c8:	d107      	bne.n	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6ca:	f107 030c 	add.w	r3, r7, #12
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f000 fd48 	bl	800c164 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b6d8:	e3cc      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6de:	e3c9      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b6e0:	4b1e      	ldr	r3, [pc, #120]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b6e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b6e8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b6ea:	4b1c      	ldr	r3, [pc, #112]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 0304 	and.w	r3, r3, #4
 800b6f2:	2b04      	cmp	r3, #4
 800b6f4:	d10c      	bne.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800b6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d109      	bne.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b6fc:	4b17      	ldr	r3, [pc, #92]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	08db      	lsrs	r3, r3, #3
 800b702:	f003 0303 	and.w	r3, r3, #3
 800b706:	4a16      	ldr	r2, [pc, #88]	; (800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b708:	fa22 f303 	lsr.w	r3, r2, r3
 800b70c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b70e:	e01e      	b.n	800b74e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b710:	4b12      	ldr	r3, [pc, #72]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b71c:	d106      	bne.n	800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800b71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b720:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b724:	d102      	bne.n	800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b726:	4b0f      	ldr	r3, [pc, #60]	; (800b764 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b72a:	e010      	b.n	800b74e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b72c:	4b0b      	ldr	r3, [pc, #44]	; (800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b734:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b738:	d106      	bne.n	800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800b73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b740:	d102      	bne.n	800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b742:	4b09      	ldr	r3, [pc, #36]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b744:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b746:	e002      	b.n	800b74e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b748:	2300      	movs	r3, #0
 800b74a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b74c:	e392      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b74e:	e391      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b750:	4b06      	ldr	r3, [pc, #24]	; (800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b752:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b754:	e38e      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b75a:	e38b      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b75c:	58024400 	.word	0x58024400
 800b760:	03d09000 	.word	0x03d09000
 800b764:	003d0900 	.word	0x003d0900
 800b768:	00f42400 	.word	0x00f42400
 800b76c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b776:	f040 809c 	bne.w	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b77a:	4b9d      	ldr	r3, [pc, #628]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b77c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b77e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b782:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b786:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b78a:	d054      	beq.n	800b836 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b792:	f200 808b 	bhi.w	800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b798:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b79c:	f000 8083 	beq.w	800b8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b7a6:	f200 8081 	bhi.w	800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7b0:	d02f      	beq.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800b7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7b8:	d878      	bhi.n	800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d004      	beq.n	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800b7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7c6:	d012      	beq.n	800b7ee <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800b7c8:	e070      	b.n	800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b7ca:	4b89      	ldr	r3, [pc, #548]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7d6:	d107      	bne.n	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f000 fe15 	bl	800c40c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b7e6:	e345      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7ec:	e342      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7ee:	4b80      	ldr	r3, [pc, #512]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7fa:	d107      	bne.n	800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7fc:	f107 0318 	add.w	r3, r7, #24
 800b800:	4618      	mov	r0, r3
 800b802:	f000 fb5b 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b80a:	e333      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b80c:	2300      	movs	r3, #0
 800b80e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b810:	e330      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b812:	4b77      	ldr	r3, [pc, #476]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b81a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b81e:	d107      	bne.n	800b830 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b820:	f107 030c 	add.w	r3, r7, #12
 800b824:	4618      	mov	r0, r3
 800b826:	f000 fc9d 	bl	800c164 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b82e:	e321      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b830:	2300      	movs	r3, #0
 800b832:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b834:	e31e      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b836:	4b6e      	ldr	r3, [pc, #440]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b83a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b83e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b840:	4b6b      	ldr	r3, [pc, #428]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f003 0304 	and.w	r3, r3, #4
 800b848:	2b04      	cmp	r3, #4
 800b84a:	d10c      	bne.n	800b866 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800b84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d109      	bne.n	800b866 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b852:	4b67      	ldr	r3, [pc, #412]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	08db      	lsrs	r3, r3, #3
 800b858:	f003 0303 	and.w	r3, r3, #3
 800b85c:	4a65      	ldr	r2, [pc, #404]	; (800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b85e:	fa22 f303 	lsr.w	r3, r2, r3
 800b862:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b864:	e01e      	b.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b866:	4b62      	ldr	r3, [pc, #392]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b86e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b872:	d106      	bne.n	800b882 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b876:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b87a:	d102      	bne.n	800b882 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b87c:	4b5e      	ldr	r3, [pc, #376]	; (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b87e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b880:	e010      	b.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b882:	4b5b      	ldr	r3, [pc, #364]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b88a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b88e:	d106      	bne.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b896:	d102      	bne.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b898:	4b58      	ldr	r3, [pc, #352]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b89a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b89c:	e002      	b.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b8a2:	e2e7      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b8a4:	e2e6      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b8a6:	4b56      	ldr	r3, [pc, #344]	; (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8aa:	e2e3      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8b0:	e2e0      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8b8:	f040 80a7 	bne.w	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b8bc:	4b4c      	ldr	r3, [pc, #304]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b8be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8c0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b8c4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8cc:	d055      	beq.n	800b97a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8d4:	f200 8096 	bhi.w	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b8de:	f000 8084 	beq.w	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b8e8:	f200 808c 	bhi.w	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8f2:	d030      	beq.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8fa:	f200 8083 	bhi.w	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b900:	2b00      	cmp	r3, #0
 800b902:	d004      	beq.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b906:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b90a:	d012      	beq.n	800b932 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b90c:	e07a      	b.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b90e:	4b38      	ldr	r3, [pc, #224]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b916:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b91a:	d107      	bne.n	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b91c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b920:	4618      	mov	r0, r3
 800b922:	f000 fd73 	bl	800c40c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b928:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b92a:	e2a3      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b92c:	2300      	movs	r3, #0
 800b92e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b930:	e2a0      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b932:	4b2f      	ldr	r3, [pc, #188]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b93a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b93e:	d107      	bne.n	800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b940:	f107 0318 	add.w	r3, r7, #24
 800b944:	4618      	mov	r0, r3
 800b946:	f000 fab9 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b94e:	e291      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b950:	2300      	movs	r3, #0
 800b952:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b954:	e28e      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b956:	4b26      	ldr	r3, [pc, #152]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b95e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b962:	d107      	bne.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b964:	f107 030c 	add.w	r3, r7, #12
 800b968:	4618      	mov	r0, r3
 800b96a:	f000 fbfb 	bl	800c164 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b972:	e27f      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b974:	2300      	movs	r3, #0
 800b976:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b978:	e27c      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b97a:	4b1d      	ldr	r3, [pc, #116]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b97c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b97e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b982:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b984:	4b1a      	ldr	r3, [pc, #104]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 0304 	and.w	r3, r3, #4
 800b98c:	2b04      	cmp	r3, #4
 800b98e:	d10c      	bne.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b992:	2b00      	cmp	r3, #0
 800b994:	d109      	bne.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b996:	4b16      	ldr	r3, [pc, #88]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	08db      	lsrs	r3, r3, #3
 800b99c:	f003 0303 	and.w	r3, r3, #3
 800b9a0:	4a14      	ldr	r2, [pc, #80]	; (800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b9a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9a8:	e01e      	b.n	800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9aa:	4b11      	ldr	r3, [pc, #68]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9b6:	d106      	bne.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800b9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9be:	d102      	bne.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b9c0:	4b0d      	ldr	r3, [pc, #52]	; (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9c4:	e010      	b.n	800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9c6:	4b0a      	ldr	r3, [pc, #40]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9d2:	d106      	bne.n	800b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9da:	d102      	bne.n	800b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b9dc:	4b07      	ldr	r3, [pc, #28]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b9de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9e0:	e002      	b.n	800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b9e6:	e245      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b9e8:	e244      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b9ea:	4b05      	ldr	r3, [pc, #20]	; (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9ee:	e241      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b9f0:	58024400 	.word	0x58024400
 800b9f4:	03d09000 	.word	0x03d09000
 800b9f8:	003d0900 	.word	0x003d0900
 800b9fc:	00f42400 	.word	0x00f42400
 800ba00:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba08:	e234      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba10:	f040 809c 	bne.w	800bb4c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800ba14:	4b9b      	ldr	r3, [pc, #620]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ba16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba18:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ba1c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ba1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba24:	d054      	beq.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800ba26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba2c:	f200 808b 	bhi.w	800bb46 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800ba30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba36:	f000 8083 	beq.w	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800ba3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba40:	f200 8081 	bhi.w	800bb46 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800ba44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba4a:	d02f      	beq.n	800baac <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba52:	d878      	bhi.n	800bb46 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800ba54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d004      	beq.n	800ba64 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba60:	d012      	beq.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800ba62:	e070      	b.n	800bb46 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba64:	4b87      	ldr	r3, [pc, #540]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba70:	d107      	bne.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba76:	4618      	mov	r0, r3
 800ba78:	f000 fcc8 	bl	800c40c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ba80:	e1f8      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ba82:	2300      	movs	r3, #0
 800ba84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba86:	e1f5      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba88:	4b7e      	ldr	r3, [pc, #504]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba94:	d107      	bne.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba96:	f107 0318 	add.w	r3, r7, #24
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f000 fa0e 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800baa4:	e1e6      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800baa6:	2300      	movs	r3, #0
 800baa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800baaa:	e1e3      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800baac:	4b75      	ldr	r3, [pc, #468]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bab8:	d107      	bne.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baba:	f107 030c 	add.w	r3, r7, #12
 800babe:	4618      	mov	r0, r3
 800bac0:	f000 fb50 	bl	800c164 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bac8:	e1d4      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800baca:	2300      	movs	r3, #0
 800bacc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bace:	e1d1      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bad0:	4b6c      	ldr	r3, [pc, #432]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bad4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bad8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bada:	4b6a      	ldr	r3, [pc, #424]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f003 0304 	and.w	r3, r3, #4
 800bae2:	2b04      	cmp	r3, #4
 800bae4:	d10c      	bne.n	800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800bae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d109      	bne.n	800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800baec:	4b65      	ldr	r3, [pc, #404]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	08db      	lsrs	r3, r3, #3
 800baf2:	f003 0303 	and.w	r3, r3, #3
 800baf6:	4a64      	ldr	r2, [pc, #400]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800baf8:	fa22 f303 	lsr.w	r3, r2, r3
 800bafc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bafe:	e01e      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb00:	4b60      	ldr	r3, [pc, #384]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb0c:	d106      	bne.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800bb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb14:	d102      	bne.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bb16:	4b5d      	ldr	r3, [pc, #372]	; (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800bb18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb1a:	e010      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb1c:	4b59      	ldr	r3, [pc, #356]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb28:	d106      	bne.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800bb2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb30:	d102      	bne.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bb32:	4b57      	ldr	r3, [pc, #348]	; (800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800bb34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb36:	e002      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bb3c:	e19a      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800bb3e:	e199      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bb40:	4b54      	ldr	r3, [pc, #336]	; (800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bb42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb44:	e196      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800bb46:	2300      	movs	r3, #0
 800bb48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb4a:	e193      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bb52:	d173      	bne.n	800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800bb54:	4b4b      	ldr	r3, [pc, #300]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bb56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bb5c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb64:	d02f      	beq.n	800bbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800bb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb6c:	d863      	bhi.n	800bc36 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d004      	beq.n	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800bb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb7a:	d012      	beq.n	800bba2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800bb7c:	e05b      	b.n	800bc36 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb7e:	4b41      	ldr	r3, [pc, #260]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb8a:	d107      	bne.n	800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb8c:	f107 0318 	add.w	r3, r7, #24
 800bb90:	4618      	mov	r0, r3
 800bb92:	f000 f993 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bb9a:	e16b      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bba0:	e168      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bba2:	4b38      	ldr	r3, [pc, #224]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbae:	d107      	bne.n	800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbb0:	f107 030c 	add.w	r3, r7, #12
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f000 fad5 	bl	800c164 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bbbe:	e159      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbc4:	e156      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bbc6:	4b2f      	ldr	r3, [pc, #188]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bbc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbce:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bbd0:	4b2c      	ldr	r3, [pc, #176]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 0304 	and.w	r3, r3, #4
 800bbd8:	2b04      	cmp	r3, #4
 800bbda:	d10c      	bne.n	800bbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800bbdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d109      	bne.n	800bbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bbe2:	4b28      	ldr	r3, [pc, #160]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	08db      	lsrs	r3, r3, #3
 800bbe8:	f003 0303 	and.w	r3, r3, #3
 800bbec:	4a26      	ldr	r2, [pc, #152]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800bbee:	fa22 f303 	lsr.w	r3, r2, r3
 800bbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbf4:	e01e      	b.n	800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bbf6:	4b23      	ldr	r3, [pc, #140]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc02:	d106      	bne.n	800bc12 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800bc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc0a:	d102      	bne.n	800bc12 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bc0c:	4b1f      	ldr	r3, [pc, #124]	; (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800bc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc10:	e010      	b.n	800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc12:	4b1c      	ldr	r3, [pc, #112]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc1e:	d106      	bne.n	800bc2e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800bc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc26:	d102      	bne.n	800bc2e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bc28:	4b19      	ldr	r3, [pc, #100]	; (800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800bc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc2c:	e002      	b.n	800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bc32:	e11f      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800bc34:	e11e      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc3a:	e11b      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc42:	d13e      	bne.n	800bcc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800bc44:	4b0f      	ldr	r3, [pc, #60]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bc46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc4c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d004      	beq.n	800bc5e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800bc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc5a:	d01d      	beq.n	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800bc5c:	e02e      	b.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc5e:	4b09      	ldr	r3, [pc, #36]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc6a:	d107      	bne.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc70:	4618      	mov	r0, r3
 800bc72:	f000 fbcb 	bl	800c40c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bc7a:	e0fb      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc80:	e0f8      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800bc82:	bf00      	nop
 800bc84:	58024400 	.word	0x58024400
 800bc88:	03d09000 	.word	0x03d09000
 800bc8c:	003d0900 	.word	0x003d0900
 800bc90:	00f42400 	.word	0x00f42400
 800bc94:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc98:	4b79      	ldr	r3, [pc, #484]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bca4:	d107      	bne.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bca6:	f107 0318 	add.w	r3, r7, #24
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f000 f906 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bcb0:	6a3b      	ldr	r3, [r7, #32]
 800bcb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bcb4:	e0de      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcba:	e0db      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcc0:	e0d8      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcc8:	f040 8085 	bne.w	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800bccc:	4b6c      	ldr	r3, [pc, #432]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bcce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcd0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bcd4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bcdc:	d06b      	beq.n	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800bcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bce4:	d874      	bhi.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800bce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcec:	d056      	beq.n	800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800bcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcf4:	d86c      	bhi.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800bcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bcfc:	d03b      	beq.n	800bd76 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800bcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd04:	d864      	bhi.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800bd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd0c:	d021      	beq.n	800bd52 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800bd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd14:	d85c      	bhi.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800bd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d004      	beq.n	800bd26 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800bd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd22:	d004      	beq.n	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800bd24:	e054      	b.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bd26:	f000 f8b3 	bl	800be90 <HAL_RCCEx_GetD3PCLK1Freq>
 800bd2a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800bd2c:	e0a2      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd2e:	4b54      	ldr	r3, [pc, #336]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd3a:	d107      	bne.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd3c:	f107 0318 	add.w	r3, r7, #24
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 f8bb 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bd4a:	e093      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd50:	e090      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd52:	4b4b      	ldr	r3, [pc, #300]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd5e:	d107      	bne.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd60:	f107 030c 	add.w	r3, r7, #12
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 f9fd 	bl	800c164 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bd6e:	e081      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bd70:	2300      	movs	r3, #0
 800bd72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd74:	e07e      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bd76:	4b42      	ldr	r3, [pc, #264]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 0304 	and.w	r3, r3, #4
 800bd7e:	2b04      	cmp	r3, #4
 800bd80:	d109      	bne.n	800bd96 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bd82:	4b3f      	ldr	r3, [pc, #252]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	08db      	lsrs	r3, r3, #3
 800bd88:	f003 0303 	and.w	r3, r3, #3
 800bd8c:	4a3d      	ldr	r2, [pc, #244]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800bd8e:	fa22 f303 	lsr.w	r3, r2, r3
 800bd92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bd94:	e06e      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bd96:	2300      	movs	r3, #0
 800bd98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd9a:	e06b      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bd9c:	4b38      	ldr	r3, [pc, #224]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bda4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bda8:	d102      	bne.n	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800bdaa:	4b37      	ldr	r3, [pc, #220]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800bdac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bdae:	e061      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdb4:	e05e      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bdb6:	4b32      	ldr	r3, [pc, #200]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdc2:	d102      	bne.n	800bdca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800bdc4:	4b31      	ldr	r3, [pc, #196]	; (800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bdc8:	e054      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdce:	e051      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdd4:	e04e      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bddc:	d148      	bne.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800bdde:	4b28      	ldr	r3, [pc, #160]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bde0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bde6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdee:	d02a      	beq.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800bdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdf6:	d838      	bhi.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800bdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d004      	beq.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800bdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be04:	d00d      	beq.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800be06:	e030      	b.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800be08:	4b1d      	ldr	r3, [pc, #116]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be14:	d102      	bne.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800be16:	4b1d      	ldr	r3, [pc, #116]	; (800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800be18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800be1a:	e02b      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be20:	e028      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be22:	4b17      	ldr	r3, [pc, #92]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be2e:	d107      	bne.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be34:	4618      	mov	r0, r3
 800be36:	f000 fae9 	bl	800c40c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800be3e:	e019      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800be40:	2300      	movs	r3, #0
 800be42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be44:	e016      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be46:	4b0e      	ldr	r3, [pc, #56]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be52:	d107      	bne.n	800be64 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be54:	f107 0318 	add.w	r3, r7, #24
 800be58:	4618      	mov	r0, r3
 800be5a:	f000 f82f 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800be62:	e007      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800be64:	2300      	movs	r3, #0
 800be66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be68:	e004      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800be6a:	2300      	movs	r3, #0
 800be6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be6e:	e001      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800be70:	2300      	movs	r3, #0
 800be72:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800be74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800be76:	4618      	mov	r0, r3
 800be78:	3740      	adds	r7, #64	; 0x40
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	58024400 	.word	0x58024400
 800be84:	03d09000 	.word	0x03d09000
 800be88:	003d0900 	.word	0x003d0900
 800be8c:	00f42400 	.word	0x00f42400

0800be90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800be94:	f7fe fb88 	bl	800a5a8 <HAL_RCC_GetHCLKFreq>
 800be98:	4602      	mov	r2, r0
 800be9a:	4b06      	ldr	r3, [pc, #24]	; (800beb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800be9c:	6a1b      	ldr	r3, [r3, #32]
 800be9e:	091b      	lsrs	r3, r3, #4
 800bea0:	f003 0307 	and.w	r3, r3, #7
 800bea4:	4904      	ldr	r1, [pc, #16]	; (800beb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bea6:	5ccb      	ldrb	r3, [r1, r3]
 800bea8:	f003 031f 	and.w	r3, r3, #31
 800beac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	58024400 	.word	0x58024400
 800beb8:	080174c0 	.word	0x080174c0

0800bebc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b089      	sub	sp, #36	; 0x24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bec4:	4ba1      	ldr	r3, [pc, #644]	; (800c14c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec8:	f003 0303 	and.w	r3, r3, #3
 800becc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bece:	4b9f      	ldr	r3, [pc, #636]	; (800c14c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed2:	0b1b      	lsrs	r3, r3, #12
 800bed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bed8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800beda:	4b9c      	ldr	r3, [pc, #624]	; (800c14c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bede:	091b      	lsrs	r3, r3, #4
 800bee0:	f003 0301 	and.w	r3, r3, #1
 800bee4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bee6:	4b99      	ldr	r3, [pc, #612]	; (800c14c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beea:	08db      	lsrs	r3, r3, #3
 800beec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bef0:	693a      	ldr	r2, [r7, #16]
 800bef2:	fb02 f303 	mul.w	r3, r2, r3
 800bef6:	ee07 3a90 	vmov	s15, r3
 800befa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800befe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f000 8111 	beq.w	800c12c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	f000 8083 	beq.w	800c018 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	f200 80a1 	bhi.w	800c05c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d003      	beq.n	800bf28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d056      	beq.n	800bfd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bf26:	e099      	b.n	800c05c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf28:	4b88      	ldr	r3, [pc, #544]	; (800c14c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f003 0320 	and.w	r3, r3, #32
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d02d      	beq.n	800bf90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf34:	4b85      	ldr	r3, [pc, #532]	; (800c14c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	08db      	lsrs	r3, r3, #3
 800bf3a:	f003 0303 	and.w	r3, r3, #3
 800bf3e:	4a84      	ldr	r2, [pc, #528]	; (800c150 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bf40:	fa22 f303 	lsr.w	r3, r2, r3
 800bf44:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	ee07 3a90 	vmov	s15, r3
 800bf4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	ee07 3a90 	vmov	s15, r3
 800bf56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf5e:	4b7b      	ldr	r3, [pc, #492]	; (800c14c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf66:	ee07 3a90 	vmov	s15, r3
 800bf6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf72:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bf8e:	e087      	b.n	800c0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	ee07 3a90 	vmov	s15, r3
 800bf96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c158 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bf9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfa2:	4b6a      	ldr	r3, [pc, #424]	; (800c14c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfaa:	ee07 3a90 	vmov	s15, r3
 800bfae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bfba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfd2:	e065      	b.n	800c0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	ee07 3a90 	vmov	s15, r3
 800bfda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c15c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bfe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfe6:	4b59      	ldr	r3, [pc, #356]	; (800c14c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bff6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bffa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c012:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c016:	e043      	b.n	800c0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	ee07 3a90 	vmov	s15, r3
 800c01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c022:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c160 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c02a:	4b48      	ldr	r3, [pc, #288]	; (800c14c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c032:	ee07 3a90 	vmov	s15, r3
 800c036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c03a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c03e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c04a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c056:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c05a:	e021      	b.n	800c0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	ee07 3a90 	vmov	s15, r3
 800c062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c066:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c15c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c06e:	4b37      	ldr	r3, [pc, #220]	; (800c14c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c076:	ee07 3a90 	vmov	s15, r3
 800c07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c07e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c082:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c08e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c09a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c09e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c0a0:	4b2a      	ldr	r3, [pc, #168]	; (800c14c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a4:	0a5b      	lsrs	r3, r3, #9
 800c0a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0aa:	ee07 3a90 	vmov	s15, r3
 800c0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0c6:	ee17 2a90 	vmov	r2, s15
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c0ce:	4b1f      	ldr	r3, [pc, #124]	; (800c14c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d2:	0c1b      	lsrs	r3, r3, #16
 800c0d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0d8:	ee07 3a90 	vmov	s15, r3
 800c0dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0f4:	ee17 2a90 	vmov	r2, s15
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c0fc:	4b13      	ldr	r3, [pc, #76]	; (800c14c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c100:	0e1b      	lsrs	r3, r3, #24
 800c102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c106:	ee07 3a90 	vmov	s15, r3
 800c10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c10e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c112:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c116:	edd7 6a07 	vldr	s13, [r7, #28]
 800c11a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c11e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c122:	ee17 2a90 	vmov	r2, s15
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c12a:	e008      	b.n	800c13e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	609a      	str	r2, [r3, #8]
}
 800c13e:	bf00      	nop
 800c140:	3724      	adds	r7, #36	; 0x24
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	58024400 	.word	0x58024400
 800c150:	03d09000 	.word	0x03d09000
 800c154:	46000000 	.word	0x46000000
 800c158:	4c742400 	.word	0x4c742400
 800c15c:	4a742400 	.word	0x4a742400
 800c160:	4b742400 	.word	0x4b742400

0800c164 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c164:	b480      	push	{r7}
 800c166:	b089      	sub	sp, #36	; 0x24
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c16c:	4ba1      	ldr	r3, [pc, #644]	; (800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c170:	f003 0303 	and.w	r3, r3, #3
 800c174:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c176:	4b9f      	ldr	r3, [pc, #636]	; (800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c17a:	0d1b      	lsrs	r3, r3, #20
 800c17c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c180:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c182:	4b9c      	ldr	r3, [pc, #624]	; (800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c186:	0a1b      	lsrs	r3, r3, #8
 800c188:	f003 0301 	and.w	r3, r3, #1
 800c18c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c18e:	4b99      	ldr	r3, [pc, #612]	; (800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c192:	08db      	lsrs	r3, r3, #3
 800c194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c198:	693a      	ldr	r2, [r7, #16]
 800c19a:	fb02 f303 	mul.w	r3, r2, r3
 800c19e:	ee07 3a90 	vmov	s15, r3
 800c1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f000 8111 	beq.w	800c3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	f000 8083 	beq.w	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	f200 80a1 	bhi.w	800c304 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d003      	beq.n	800c1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d056      	beq.n	800c27c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c1ce:	e099      	b.n	800c304 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1d0:	4b88      	ldr	r3, [pc, #544]	; (800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f003 0320 	and.w	r3, r3, #32
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d02d      	beq.n	800c238 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c1dc:	4b85      	ldr	r3, [pc, #532]	; (800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	08db      	lsrs	r3, r3, #3
 800c1e2:	f003 0303 	and.w	r3, r3, #3
 800c1e6:	4a84      	ldr	r2, [pc, #528]	; (800c3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c1e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	ee07 3a90 	vmov	s15, r3
 800c1f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	ee07 3a90 	vmov	s15, r3
 800c1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c206:	4b7b      	ldr	r3, [pc, #492]	; (800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c20e:	ee07 3a90 	vmov	s15, r3
 800c212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c216:	ed97 6a03 	vldr	s12, [r7, #12]
 800c21a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c3fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c21e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c22a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c22e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c232:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c236:	e087      	b.n	800c348 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	ee07 3a90 	vmov	s15, r3
 800c23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c242:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c400 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c24a:	4b6a      	ldr	r3, [pc, #424]	; (800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c252:	ee07 3a90 	vmov	s15, r3
 800c256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c25a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c25e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c3fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c26a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c26e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c272:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c276:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c27a:	e065      	b.n	800c348 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	ee07 3a90 	vmov	s15, r3
 800c282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c286:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c404 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c28a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c28e:	4b59      	ldr	r3, [pc, #356]	; (800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c296:	ee07 3a90 	vmov	s15, r3
 800c29a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c29e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c3fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c2a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c2be:	e043      	b.n	800c348 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	ee07 3a90 	vmov	s15, r3
 800c2c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c408 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c2ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2d2:	4b48      	ldr	r3, [pc, #288]	; (800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2da:	ee07 3a90 	vmov	s15, r3
 800c2de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c3fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c2ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c302:	e021      	b.n	800c348 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	ee07 3a90 	vmov	s15, r3
 800c30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c30e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c404 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c316:	4b37      	ldr	r3, [pc, #220]	; (800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c31e:	ee07 3a90 	vmov	s15, r3
 800c322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c326:	ed97 6a03 	vldr	s12, [r7, #12]
 800c32a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c3fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c32e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c33a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c342:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c346:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c348:	4b2a      	ldr	r3, [pc, #168]	; (800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c34c:	0a5b      	lsrs	r3, r3, #9
 800c34e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c352:	ee07 3a90 	vmov	s15, r3
 800c356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c35a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c35e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c362:	edd7 6a07 	vldr	s13, [r7, #28]
 800c366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c36a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c36e:	ee17 2a90 	vmov	r2, s15
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c376:	4b1f      	ldr	r3, [pc, #124]	; (800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37a:	0c1b      	lsrs	r3, r3, #16
 800c37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c380:	ee07 3a90 	vmov	s15, r3
 800c384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c38c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c390:	edd7 6a07 	vldr	s13, [r7, #28]
 800c394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c39c:	ee17 2a90 	vmov	r2, s15
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c3a4:	4b13      	ldr	r3, [pc, #76]	; (800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a8:	0e1b      	lsrs	r3, r3, #24
 800c3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ae:	ee07 3a90 	vmov	s15, r3
 800c3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3be:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3ca:	ee17 2a90 	vmov	r2, s15
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c3d2:	e008      	b.n	800c3e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	609a      	str	r2, [r3, #8]
}
 800c3e6:	bf00      	nop
 800c3e8:	3724      	adds	r7, #36	; 0x24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	58024400 	.word	0x58024400
 800c3f8:	03d09000 	.word	0x03d09000
 800c3fc:	46000000 	.word	0x46000000
 800c400:	4c742400 	.word	0x4c742400
 800c404:	4a742400 	.word	0x4a742400
 800c408:	4b742400 	.word	0x4b742400

0800c40c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b089      	sub	sp, #36	; 0x24
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c414:	4ba0      	ldr	r3, [pc, #640]	; (800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c418:	f003 0303 	and.w	r3, r3, #3
 800c41c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c41e:	4b9e      	ldr	r3, [pc, #632]	; (800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c422:	091b      	lsrs	r3, r3, #4
 800c424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c428:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c42a:	4b9b      	ldr	r3, [pc, #620]	; (800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42e:	f003 0301 	and.w	r3, r3, #1
 800c432:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c434:	4b98      	ldr	r3, [pc, #608]	; (800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c438:	08db      	lsrs	r3, r3, #3
 800c43a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c43e:	693a      	ldr	r2, [r7, #16]
 800c440:	fb02 f303 	mul.w	r3, r2, r3
 800c444:	ee07 3a90 	vmov	s15, r3
 800c448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c44c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	2b00      	cmp	r3, #0
 800c454:	f000 8111 	beq.w	800c67a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	2b02      	cmp	r3, #2
 800c45c:	f000 8083 	beq.w	800c566 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	2b02      	cmp	r3, #2
 800c464:	f200 80a1 	bhi.w	800c5aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d003      	beq.n	800c476 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c46e:	69bb      	ldr	r3, [r7, #24]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d056      	beq.n	800c522 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c474:	e099      	b.n	800c5aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c476:	4b88      	ldr	r3, [pc, #544]	; (800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f003 0320 	and.w	r3, r3, #32
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d02d      	beq.n	800c4de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c482:	4b85      	ldr	r3, [pc, #532]	; (800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	08db      	lsrs	r3, r3, #3
 800c488:	f003 0303 	and.w	r3, r3, #3
 800c48c:	4a83      	ldr	r2, [pc, #524]	; (800c69c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c48e:	fa22 f303 	lsr.w	r3, r2, r3
 800c492:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	ee07 3a90 	vmov	s15, r3
 800c49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	ee07 3a90 	vmov	s15, r3
 800c4a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4ac:	4b7a      	ldr	r3, [pc, #488]	; (800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4b4:	ee07 3a90 	vmov	s15, r3
 800c4b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c4c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4d8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c4dc:	e087      	b.n	800c5ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	ee07 3a90 	vmov	s15, r3
 800c4e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c6a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c4ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4f0:	4b69      	ldr	r3, [pc, #420]	; (800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4f8:	ee07 3a90 	vmov	s15, r3
 800c4fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c500:	ed97 6a03 	vldr	s12, [r7, #12]
 800c504:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c50c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c51c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c520:	e065      	b.n	800c5ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	ee07 3a90 	vmov	s15, r3
 800c528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c52c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c534:	4b58      	ldr	r3, [pc, #352]	; (800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c53c:	ee07 3a90 	vmov	s15, r3
 800c540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c544:	ed97 6a03 	vldr	s12, [r7, #12]
 800c548:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c54c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c55c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c560:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c564:	e043      	b.n	800c5ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	ee07 3a90 	vmov	s15, r3
 800c56c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c570:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c6ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c578:	4b47      	ldr	r3, [pc, #284]	; (800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c57c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c580:	ee07 3a90 	vmov	s15, r3
 800c584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c588:	ed97 6a03 	vldr	s12, [r7, #12]
 800c58c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c59c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5a8:	e021      	b.n	800c5ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	ee07 3a90 	vmov	s15, r3
 800c5b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c6a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c5b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5bc:	4b36      	ldr	r3, [pc, #216]	; (800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c4:	ee07 3a90 	vmov	s15, r3
 800c5c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c5d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c5ee:	4b2a      	ldr	r3, [pc, #168]	; (800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5f2:	0a5b      	lsrs	r3, r3, #9
 800c5f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5f8:	ee07 3a90 	vmov	s15, r3
 800c5fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c604:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c608:	edd7 6a07 	vldr	s13, [r7, #28]
 800c60c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c614:	ee17 2a90 	vmov	r2, s15
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c61c:	4b1e      	ldr	r3, [pc, #120]	; (800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c620:	0c1b      	lsrs	r3, r3, #16
 800c622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c626:	ee07 3a90 	vmov	s15, r3
 800c62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c62e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c632:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c636:	edd7 6a07 	vldr	s13, [r7, #28]
 800c63a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c63e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c642:	ee17 2a90 	vmov	r2, s15
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c64a:	4b13      	ldr	r3, [pc, #76]	; (800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c64e:	0e1b      	lsrs	r3, r3, #24
 800c650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c654:	ee07 3a90 	vmov	s15, r3
 800c658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c65c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c660:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c664:	edd7 6a07 	vldr	s13, [r7, #28]
 800c668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c66c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c670:	ee17 2a90 	vmov	r2, s15
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c678:	e008      	b.n	800c68c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2200      	movs	r2, #0
 800c68a:	609a      	str	r2, [r3, #8]
}
 800c68c:	bf00      	nop
 800c68e:	3724      	adds	r7, #36	; 0x24
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr
 800c698:	58024400 	.word	0x58024400
 800c69c:	03d09000 	.word	0x03d09000
 800c6a0:	46000000 	.word	0x46000000
 800c6a4:	4c742400 	.word	0x4c742400
 800c6a8:	4a742400 	.word	0x4a742400
 800c6ac:	4b742400 	.word	0x4b742400

0800c6b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c6be:	4b53      	ldr	r3, [pc, #332]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c2:	f003 0303 	and.w	r3, r3, #3
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	d101      	bne.n	800c6ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e099      	b.n	800c802 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c6ce:	4b4f      	ldr	r3, [pc, #316]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a4e      	ldr	r2, [pc, #312]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c6d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c6d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6da:	f7f6 fa61 	bl	8002ba0 <HAL_GetTick>
 800c6de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c6e0:	e008      	b.n	800c6f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c6e2:	f7f6 fa5d 	bl	8002ba0 <HAL_GetTick>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d901      	bls.n	800c6f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e086      	b.n	800c802 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c6f4:	4b45      	ldr	r3, [pc, #276]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1f0      	bne.n	800c6e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c700:	4b42      	ldr	r3, [pc, #264]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c704:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	031b      	lsls	r3, r3, #12
 800c70e:	493f      	ldr	r1, [pc, #252]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c710:	4313      	orrs	r3, r2
 800c712:	628b      	str	r3, [r1, #40]	; 0x28
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	3b01      	subs	r3, #1
 800c71a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	3b01      	subs	r3, #1
 800c724:	025b      	lsls	r3, r3, #9
 800c726:	b29b      	uxth	r3, r3
 800c728:	431a      	orrs	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	3b01      	subs	r3, #1
 800c730:	041b      	lsls	r3, r3, #16
 800c732:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c736:	431a      	orrs	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	3b01      	subs	r3, #1
 800c73e:	061b      	lsls	r3, r3, #24
 800c740:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c744:	4931      	ldr	r1, [pc, #196]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c746:	4313      	orrs	r3, r2
 800c748:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c74a:	4b30      	ldr	r3, [pc, #192]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	695b      	ldr	r3, [r3, #20]
 800c756:	492d      	ldr	r1, [pc, #180]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c758:	4313      	orrs	r3, r2
 800c75a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c75c:	4b2b      	ldr	r3, [pc, #172]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c760:	f023 0220 	bic.w	r2, r3, #32
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	699b      	ldr	r3, [r3, #24]
 800c768:	4928      	ldr	r1, [pc, #160]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c76a:	4313      	orrs	r3, r2
 800c76c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c76e:	4b27      	ldr	r3, [pc, #156]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c772:	4a26      	ldr	r2, [pc, #152]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c774:	f023 0310 	bic.w	r3, r3, #16
 800c778:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c77a:	4b24      	ldr	r3, [pc, #144]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c77c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c77e:	4b24      	ldr	r3, [pc, #144]	; (800c810 <RCCEx_PLL2_Config+0x160>)
 800c780:	4013      	ands	r3, r2
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	69d2      	ldr	r2, [r2, #28]
 800c786:	00d2      	lsls	r2, r2, #3
 800c788:	4920      	ldr	r1, [pc, #128]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c78a:	4313      	orrs	r3, r2
 800c78c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c78e:	4b1f      	ldr	r3, [pc, #124]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c792:	4a1e      	ldr	r2, [pc, #120]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c794:	f043 0310 	orr.w	r3, r3, #16
 800c798:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d106      	bne.n	800c7ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c7a0:	4b1a      	ldr	r3, [pc, #104]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a4:	4a19      	ldr	r2, [pc, #100]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c7a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c7aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c7ac:	e00f      	b.n	800c7ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d106      	bne.n	800c7c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c7b4:	4b15      	ldr	r3, [pc, #84]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	4a14      	ldr	r2, [pc, #80]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c7ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c7c0:	e005      	b.n	800c7ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c7c2:	4b12      	ldr	r3, [pc, #72]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c6:	4a11      	ldr	r2, [pc, #68]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c7c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c7cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c7ce:	4b0f      	ldr	r3, [pc, #60]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4a0e      	ldr	r2, [pc, #56]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c7d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c7d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7da:	f7f6 f9e1 	bl	8002ba0 <HAL_GetTick>
 800c7de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c7e0:	e008      	b.n	800c7f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c7e2:	f7f6 f9dd 	bl	8002ba0 <HAL_GetTick>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	1ad3      	subs	r3, r2, r3
 800c7ec:	2b02      	cmp	r3, #2
 800c7ee:	d901      	bls.n	800c7f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c7f0:	2303      	movs	r3, #3
 800c7f2:	e006      	b.n	800c802 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c7f4:	4b05      	ldr	r3, [pc, #20]	; (800c80c <RCCEx_PLL2_Config+0x15c>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d0f0      	beq.n	800c7e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c800:	7bfb      	ldrb	r3, [r7, #15]
}
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	58024400 	.word	0x58024400
 800c810:	ffff0007 	.word	0xffff0007

0800c814 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c81e:	2300      	movs	r3, #0
 800c820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c822:	4b53      	ldr	r3, [pc, #332]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c826:	f003 0303 	and.w	r3, r3, #3
 800c82a:	2b03      	cmp	r3, #3
 800c82c:	d101      	bne.n	800c832 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c82e:	2301      	movs	r3, #1
 800c830:	e099      	b.n	800c966 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c832:	4b4f      	ldr	r3, [pc, #316]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a4e      	ldr	r2, [pc, #312]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c83c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c83e:	f7f6 f9af 	bl	8002ba0 <HAL_GetTick>
 800c842:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c844:	e008      	b.n	800c858 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c846:	f7f6 f9ab 	bl	8002ba0 <HAL_GetTick>
 800c84a:	4602      	mov	r2, r0
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	1ad3      	subs	r3, r2, r3
 800c850:	2b02      	cmp	r3, #2
 800c852:	d901      	bls.n	800c858 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c854:	2303      	movs	r3, #3
 800c856:	e086      	b.n	800c966 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c858:	4b45      	ldr	r3, [pc, #276]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c860:	2b00      	cmp	r3, #0
 800c862:	d1f0      	bne.n	800c846 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c864:	4b42      	ldr	r3, [pc, #264]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c868:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	051b      	lsls	r3, r3, #20
 800c872:	493f      	ldr	r1, [pc, #252]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c874:	4313      	orrs	r3, r2
 800c876:	628b      	str	r3, [r1, #40]	; 0x28
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	3b01      	subs	r3, #1
 800c87e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	3b01      	subs	r3, #1
 800c888:	025b      	lsls	r3, r3, #9
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	431a      	orrs	r2, r3
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	3b01      	subs	r3, #1
 800c894:	041b      	lsls	r3, r3, #16
 800c896:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c89a:	431a      	orrs	r2, r3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	061b      	lsls	r3, r3, #24
 800c8a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c8a8:	4931      	ldr	r1, [pc, #196]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c8ae:	4b30      	ldr	r3, [pc, #192]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	695b      	ldr	r3, [r3, #20]
 800c8ba:	492d      	ldr	r1, [pc, #180]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c8c0:	4b2b      	ldr	r3, [pc, #172]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	699b      	ldr	r3, [r3, #24]
 800c8cc:	4928      	ldr	r1, [pc, #160]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c8d2:	4b27      	ldr	r3, [pc, #156]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d6:	4a26      	ldr	r2, [pc, #152]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c8d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c8de:	4b24      	ldr	r3, [pc, #144]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c8e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8e2:	4b24      	ldr	r3, [pc, #144]	; (800c974 <RCCEx_PLL3_Config+0x160>)
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	69d2      	ldr	r2, [r2, #28]
 800c8ea:	00d2      	lsls	r2, r2, #3
 800c8ec:	4920      	ldr	r1, [pc, #128]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c8f2:	4b1f      	ldr	r3, [pc, #124]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f6:	4a1e      	ldr	r2, [pc, #120]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c8f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d106      	bne.n	800c912 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c904:	4b1a      	ldr	r3, [pc, #104]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c908:	4a19      	ldr	r2, [pc, #100]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c90a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c90e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c910:	e00f      	b.n	800c932 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	2b01      	cmp	r3, #1
 800c916:	d106      	bne.n	800c926 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c918:	4b15      	ldr	r3, [pc, #84]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c91c:	4a14      	ldr	r2, [pc, #80]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c91e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c922:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c924:	e005      	b.n	800c932 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c926:	4b12      	ldr	r3, [pc, #72]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c92a:	4a11      	ldr	r2, [pc, #68]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c92c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c930:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c932:	4b0f      	ldr	r3, [pc, #60]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a0e      	ldr	r2, [pc, #56]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c93c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c93e:	f7f6 f92f 	bl	8002ba0 <HAL_GetTick>
 800c942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c944:	e008      	b.n	800c958 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c946:	f7f6 f92b 	bl	8002ba0 <HAL_GetTick>
 800c94a:	4602      	mov	r2, r0
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	2b02      	cmp	r3, #2
 800c952:	d901      	bls.n	800c958 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c954:	2303      	movs	r3, #3
 800c956:	e006      	b.n	800c966 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c958:	4b05      	ldr	r3, [pc, #20]	; (800c970 <RCCEx_PLL3_Config+0x15c>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c960:	2b00      	cmp	r3, #0
 800c962:	d0f0      	beq.n	800c946 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c964:	7bfb      	ldrb	r3, [r7, #15]
}
 800c966:	4618      	mov	r0, r3
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	58024400 	.word	0x58024400
 800c974:	ffff0007 	.word	0xffff0007

0800c978 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d101      	bne.n	800c98a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	e054      	b.n	800ca34 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	7a5b      	ldrb	r3, [r3, #9]
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	2b00      	cmp	r3, #0
 800c992:	d105      	bne.n	800c9a0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7f5 f880 	bl	8001aa0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2202      	movs	r2, #2
 800c9a4:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f023 0120 	bic.w	r1, r3, #32
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	685a      	ldr	r2, [r3, #4]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	430a      	orrs	r2, r1
 800c9ba:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f042 0204 	orr.w	r2, r2, #4
 800c9ca:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9d6:	2b40      	cmp	r3, #64	; 0x40
 800c9d8:	d104      	bne.n	800c9e4 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2204      	movs	r2, #4
 800c9de:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e027      	b.n	800ca34 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800c9e4:	f7f6 f8dc 	bl	8002ba0 <HAL_GetTick>
 800c9e8:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800c9ea:	e015      	b.n	800ca18 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c9ec:	f7f6 f8d8 	bl	8002ba0 <HAL_GetTick>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	1ad3      	subs	r3, r2, r3
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d90e      	bls.n	800ca18 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	f003 0304 	and.w	r3, r3, #4
 800ca04:	2b04      	cmp	r3, #4
 800ca06:	d107      	bne.n	800ca18 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2204      	movs	r2, #4
 800ca0c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2202      	movs	r2, #2
 800ca12:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	e00d      	b.n	800ca34 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	f003 0304 	and.w	r3, r3, #4
 800ca22:	2b04      	cmp	r3, #4
 800ca24:	d0e2      	beq.n	800c9ec <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2201      	movs	r2, #1
 800ca2a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca46:	2300      	movs	r3, #0
 800ca48:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	7a1b      	ldrb	r3, [r3, #8]
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d101      	bne.n	800ca56 <HAL_RNG_GenerateRandomNumber+0x1a>
 800ca52:	2302      	movs	r3, #2
 800ca54:	e044      	b.n	800cae0 <HAL_RNG_GenerateRandomNumber+0xa4>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2201      	movs	r2, #1
 800ca5a:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	7a5b      	ldrb	r3, [r3, #9]
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d133      	bne.n	800cace <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2202      	movs	r2, #2
 800ca6a:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800ca6c:	f7f6 f898 	bl	8002ba0 <HAL_GetTick>
 800ca70:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ca72:	e018      	b.n	800caa6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800ca74:	f7f6 f894 	bl	8002ba0 <HAL_GetTick>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d911      	bls.n	800caa6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	f003 0301 	and.w	r3, r3, #1
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d00a      	beq.n	800caa6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2202      	movs	r2, #2
 800ca9a:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	e01c      	b.n	800cae0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	f003 0301 	and.w	r3, r3, #1
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d1df      	bne.n	800ca74 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	689a      	ldr	r2, [r3, #8]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	691a      	ldr	r2, [r3, #16]
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2201      	movs	r2, #1
 800caca:	725a      	strb	r2, [r3, #9]
 800cacc:	e004      	b.n	800cad8 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2204      	movs	r2, #4
 800cad2:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800cad4:	2301      	movs	r3, #1
 800cad6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	721a      	strb	r2, [r3, #8]

  return status;
 800cade:	7bfb      	ldrb	r3, [r7, #15]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3710      	adds	r7, #16
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b086      	sub	sp, #24
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
 800caf4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	2b02      	cmp	r3, #2
 800cafa:	d904      	bls.n	800cb06 <HAL_SAI_InitProtocol+0x1e>
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	3b03      	subs	r3, #3
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d812      	bhi.n	800cb2a <HAL_SAI_InitProtocol+0x42>
 800cb04:	e008      	b.n	800cb18 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	68b9      	ldr	r1, [r7, #8]
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f000 fc25 	bl	800d35c <SAI_InitI2S>
 800cb12:	4603      	mov	r3, r0
 800cb14:	75fb      	strb	r3, [r7, #23]
      break;
 800cb16:	e00b      	b.n	800cb30 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	68b9      	ldr	r1, [r7, #8]
 800cb1e:	68f8      	ldr	r0, [r7, #12]
 800cb20:	f000 fcce 	bl	800d4c0 <SAI_InitPCM>
 800cb24:	4603      	mov	r3, r0
 800cb26:	75fb      	strb	r3, [r7, #23]
      break;
 800cb28:	e002      	b.n	800cb30 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	75fb      	strb	r3, [r7, #23]
      break;
 800cb2e:	bf00      	nop
  }

  if (status == HAL_OK)
 800cb30:	7dfb      	ldrb	r3, [r7, #23]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d104      	bne.n	800cb40 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800cb36:	68f8      	ldr	r0, [r7, #12]
 800cb38:	f000 f808 	bl	800cb4c <HAL_SAI_Init>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800cb40:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3718      	adds	r7, #24
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
	...

0800cb4c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08a      	sub	sp, #40	; 0x28
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d101      	bne.n	800cb5e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e283      	b.n	800d066 <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800cb5e:	f7f6 f84f 	bl	8002c00 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d113      	bne.n	800cb94 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a94      	ldr	r2, [pc, #592]	; (800cdc4 <HAL_SAI_Init+0x278>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d004      	beq.n	800cb80 <HAL_SAI_Init+0x34>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a93      	ldr	r2, [pc, #588]	; (800cdc8 <HAL_SAI_Init+0x27c>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d107      	bne.n	800cb90 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d103      	bne.n	800cb90 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d001      	beq.n	800cb94 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	e268      	b.n	800d066 <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a8a      	ldr	r2, [pc, #552]	; (800cdc4 <HAL_SAI_Init+0x278>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d004      	beq.n	800cba8 <HAL_SAI_Init+0x5c>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a8a      	ldr	r2, [pc, #552]	; (800cdcc <HAL_SAI_Init+0x280>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d102      	bne.n	800cbae <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800cba8:	4b89      	ldr	r3, [pc, #548]	; (800cdd0 <HAL_SAI_Init+0x284>)
 800cbaa:	61bb      	str	r3, [r7, #24]
 800cbac:	e028      	b.n	800cc00 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4a88      	ldr	r2, [pc, #544]	; (800cdd4 <HAL_SAI_Init+0x288>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d004      	beq.n	800cbc2 <HAL_SAI_Init+0x76>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a86      	ldr	r2, [pc, #536]	; (800cdd8 <HAL_SAI_Init+0x28c>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d102      	bne.n	800cbc8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800cbc2:	4b86      	ldr	r3, [pc, #536]	; (800cddc <HAL_SAI_Init+0x290>)
 800cbc4:	61bb      	str	r3, [r7, #24]
 800cbc6:	e01b      	b.n	800cc00 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a84      	ldr	r2, [pc, #528]	; (800cde0 <HAL_SAI_Init+0x294>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d004      	beq.n	800cbdc <HAL_SAI_Init+0x90>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a83      	ldr	r2, [pc, #524]	; (800cde4 <HAL_SAI_Init+0x298>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d102      	bne.n	800cbe2 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800cbdc:	4b82      	ldr	r3, [pc, #520]	; (800cde8 <HAL_SAI_Init+0x29c>)
 800cbde:	61bb      	str	r3, [r7, #24]
 800cbe0:	e00e      	b.n	800cc00 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a78      	ldr	r2, [pc, #480]	; (800cdc8 <HAL_SAI_Init+0x27c>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d004      	beq.n	800cbf6 <HAL_SAI_Init+0xaa>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a7e      	ldr	r2, [pc, #504]	; (800cdec <HAL_SAI_Init+0x2a0>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d102      	bne.n	800cbfc <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800cbf6:	4b7e      	ldr	r3, [pc, #504]	; (800cdf0 <HAL_SAI_Init+0x2a4>)
 800cbf8:	61bb      	str	r3, [r7, #24]
 800cbfa:	e001      	b.n	800cc00 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e232      	b.n	800d066 <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d106      	bne.n	800cc1a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f7f5 f837 	bl	8001c88 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 fd0a 	bl	800d634 <SAI_Disable>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d001      	beq.n	800cc2a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	e21d      	b.n	800d066 <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2202      	movs	r2, #2
 800cc2e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	2b02      	cmp	r3, #2
 800cc38:	d00c      	beq.n	800cc54 <HAL_SAI_Init+0x108>
 800cc3a:	2b02      	cmp	r3, #2
 800cc3c:	d80d      	bhi.n	800cc5a <HAL_SAI_Init+0x10e>
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d002      	beq.n	800cc48 <HAL_SAI_Init+0xfc>
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d003      	beq.n	800cc4e <HAL_SAI_Init+0x102>
 800cc46:	e008      	b.n	800cc5a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cc4c:	e008      	b.n	800cc60 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800cc4e:	2310      	movs	r3, #16
 800cc50:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cc52:	e005      	b.n	800cc60 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800cc54:	2320      	movs	r3, #32
 800cc56:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cc58:	e002      	b.n	800cc60 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cc5e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	2b05      	cmp	r3, #5
 800cc66:	d832      	bhi.n	800ccce <HAL_SAI_Init+0x182>
 800cc68:	a201      	add	r2, pc, #4	; (adr r2, 800cc70 <HAL_SAI_Init+0x124>)
 800cc6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc6e:	bf00      	nop
 800cc70:	0800cc89 	.word	0x0800cc89
 800cc74:	0800cc8f 	.word	0x0800cc8f
 800cc78:	0800cc97 	.word	0x0800cc97
 800cc7c:	0800cc9f 	.word	0x0800cc9f
 800cc80:	0800ccaf 	.word	0x0800ccaf
 800cc84:	0800ccbf 	.word	0x0800ccbf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	61fb      	str	r3, [r7, #28]
      break;
 800cc8c:	e022      	b.n	800ccd4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800cc8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc92:	61fb      	str	r3, [r7, #28]
      break;
 800cc94:	e01e      	b.n	800ccd4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800cc96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc9a:	61fb      	str	r3, [r7, #28]
      break;
 800cc9c:	e01a      	b.n	800ccd4 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800cc9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cca2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800cca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca6:	f043 0301 	orr.w	r3, r3, #1
 800ccaa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ccac:	e012      	b.n	800ccd4 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ccae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ccb2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb6:	f043 0302 	orr.w	r3, r3, #2
 800ccba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ccbc:	e00a      	b.n	800ccd4 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ccbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ccc2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc6:	f043 0303 	orr.w	r3, r3, #3
 800ccca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cccc:	e002      	b.n	800ccd4 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	61fb      	str	r3, [r7, #28]
      break;
 800ccd2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800ccd4:	69bb      	ldr	r3, [r7, #24]
 800ccd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccd8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6a1b      	ldr	r3, [r3, #32]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	f000 80ba 	beq.w	800ce58 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 800cce4:	2300      	movs	r3, #0
 800cce6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a35      	ldr	r2, [pc, #212]	; (800cdc4 <HAL_SAI_Init+0x278>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d004      	beq.n	800ccfc <HAL_SAI_Init+0x1b0>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a35      	ldr	r2, [pc, #212]	; (800cdcc <HAL_SAI_Init+0x280>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d104      	bne.n	800cd06 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ccfc:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cd00:	f7fe fbf4 	bl	800b4ec <HAL_RCCEx_GetPeriphCLKFreq>
 800cd04:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a32      	ldr	r2, [pc, #200]	; (800cdd4 <HAL_SAI_Init+0x288>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d004      	beq.n	800cd1a <HAL_SAI_Init+0x1ce>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a30      	ldr	r2, [pc, #192]	; (800cdd8 <HAL_SAI_Init+0x28c>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d104      	bne.n	800cd24 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800cd1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cd1e:	f7fe fbe5 	bl	800b4ec <HAL_RCCEx_GetPeriphCLKFreq>
 800cd22:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a2d      	ldr	r2, [pc, #180]	; (800cde0 <HAL_SAI_Init+0x294>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d004      	beq.n	800cd38 <HAL_SAI_Init+0x1ec>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a2c      	ldr	r2, [pc, #176]	; (800cde4 <HAL_SAI_Init+0x298>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d104      	bne.n	800cd42 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800cd38:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cd3c:	f7fe fbd6 	bl	800b4ec <HAL_RCCEx_GetPeriphCLKFreq>
 800cd40:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a20      	ldr	r2, [pc, #128]	; (800cdc8 <HAL_SAI_Init+0x27c>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d104      	bne.n	800cd56 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800cd4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cd50:	f7fe fbcc 	bl	800b4ec <HAL_RCCEx_GetPeriphCLKFreq>
 800cd54:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a24      	ldr	r2, [pc, #144]	; (800cdec <HAL_SAI_Init+0x2a0>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d104      	bne.n	800cd6a <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800cd60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cd64:	f7fe fbc2 	bl	800b4ec <HAL_RCCEx_GetPeriphCLKFreq>
 800cd68:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	699b      	ldr	r3, [r3, #24]
 800cd6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cd72:	d120      	bne.n	800cdb6 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd78:	2b04      	cmp	r3, #4
 800cd7a:	d102      	bne.n	800cd82 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800cd7c:	2340      	movs	r3, #64	; 0x40
 800cd7e:	60fb      	str	r3, [r7, #12]
 800cd80:	e00a      	b.n	800cd98 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd86:	2b08      	cmp	r3, #8
 800cd88:	d103      	bne.n	800cd92 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800cd8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd8e:	60fb      	str	r3, [r7, #12]
 800cd90:	e002      	b.n	800cd98 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd96:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800cd98:	697a      	ldr	r2, [r7, #20]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	4413      	add	r3, r2
 800cda0:	005b      	lsls	r3, r3, #1
 800cda2:	4619      	mov	r1, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a1b      	ldr	r3, [r3, #32]
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	fb02 f303 	mul.w	r3, r2, r3
 800cdae:	fbb1 f3f3 	udiv	r3, r1, r3
 800cdb2:	613b      	str	r3, [r7, #16]
 800cdb4:	e02f      	b.n	800ce16 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cdbe:	d119      	bne.n	800cdf4 <HAL_SAI_Init+0x2a8>
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	e018      	b.n	800cdf6 <HAL_SAI_Init+0x2aa>
 800cdc4:	40015804 	.word	0x40015804
 800cdc8:	58005404 	.word	0x58005404
 800cdcc:	40015824 	.word	0x40015824
 800cdd0:	40015800 	.word	0x40015800
 800cdd4:	40015c04 	.word	0x40015c04
 800cdd8:	40015c24 	.word	0x40015c24
 800cddc:	40015c00 	.word	0x40015c00
 800cde0:	40016004 	.word	0x40016004
 800cde4:	40016024 	.word	0x40016024
 800cde8:	40016000 	.word	0x40016000
 800cdec:	58005424 	.word	0x58005424
 800cdf0:	58005400 	.word	0x58005400
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	4413      	add	r3, r2
 800ce00:	005b      	lsls	r3, r3, #1
 800ce02:	4619      	mov	r1, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6a1b      	ldr	r3, [r3, #32]
 800ce08:	68ba      	ldr	r2, [r7, #8]
 800ce0a:	fb02 f303 	mul.w	r3, r2, r3
 800ce0e:	021b      	lsls	r3, r3, #8
 800ce10:	fbb1 f3f3 	udiv	r3, r1, r3
 800ce14:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	4a95      	ldr	r2, [pc, #596]	; (800d070 <HAL_SAI_Init+0x524>)
 800ce1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce1e:	08da      	lsrs	r2, r3, #3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ce24:	6939      	ldr	r1, [r7, #16]
 800ce26:	4b92      	ldr	r3, [pc, #584]	; (800d070 <HAL_SAI_Init+0x524>)
 800ce28:	fba3 2301 	umull	r2, r3, r3, r1
 800ce2c:	08da      	lsrs	r2, r3, #3
 800ce2e:	4613      	mov	r3, r2
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	4413      	add	r3, r2
 800ce34:	005b      	lsls	r3, r3, #1
 800ce36:	1aca      	subs	r2, r1, r3
 800ce38:	2a08      	cmp	r2, #8
 800ce3a:	d904      	bls.n	800ce46 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce40:	1c5a      	adds	r2, r3, #1
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce4a:	2b04      	cmp	r3, #4
 800ce4c:	d104      	bne.n	800ce58 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce52:	085a      	lsrs	r2, r3, #1
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d003      	beq.n	800ce68 <HAL_SAI_Init+0x31c>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	d109      	bne.n	800ce7c <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d101      	bne.n	800ce74 <HAL_SAI_Init+0x328>
 800ce70:	2300      	movs	r3, #0
 800ce72:	e001      	b.n	800ce78 <HAL_SAI_Init+0x32c>
 800ce74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce78:	623b      	str	r3, [r7, #32]
 800ce7a:	e008      	b.n	800ce8e <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d102      	bne.n	800ce8a <HAL_SAI_Init+0x33e>
 800ce84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce88:	e000      	b.n	800ce8c <HAL_SAI_Init+0x340>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800ce8e:	f7f5 feb7 	bl	8002c00 <HAL_GetREVID>
 800ce92:	4603      	mov	r3, r0
 800ce94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce98:	d331      	bcc.n	800cefe <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	6819      	ldr	r1, [r3, #0]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	4b73      	ldr	r3, [pc, #460]	; (800d074 <HAL_SAI_Init+0x528>)
 800cea6:	400b      	ands	r3, r1
 800cea8:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	6819      	ldr	r1, [r3, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	685a      	ldr	r2, [r3, #4]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceb8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cebe:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cec4:	431a      	orrs	r2, r3
 800cec6:	6a3b      	ldr	r3, [r7, #32]
 800cec8:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800ced2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	695b      	ldr	r3, [r3, #20]
 800ced8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cede:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee4:	051b      	lsls	r3, r3, #20
 800cee6:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ceec:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	691b      	ldr	r3, [r3, #16]
 800cef2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	430a      	orrs	r2, r1
 800cefa:	601a      	str	r2, [r3, #0]
 800cefc:	e02d      	b.n	800cf5a <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	6819      	ldr	r1, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	4b5b      	ldr	r3, [pc, #364]	; (800d078 <HAL_SAI_Init+0x52c>)
 800cf0a:	400b      	ands	r3, r1
 800cf0c:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	6819      	ldr	r1, [r3, #0]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	685a      	ldr	r2, [r3, #4]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf1c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cf22:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf28:	431a      	orrs	r2, r3
 800cf2a:	6a3b      	ldr	r3, [r7, #32]
 800cf2c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800cf36:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	695b      	ldr	r3, [r3, #20]
 800cf3c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cf42:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf48:	051b      	lsls	r3, r3, #20
 800cf4a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800cf50:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	430a      	orrs	r2, r1
 800cf58:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	6859      	ldr	r1, [r3, #4]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	4b45      	ldr	r3, [pc, #276]	; (800d07c <HAL_SAI_Init+0x530>)
 800cf66:	400b      	ands	r3, r1
 800cf68:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	6859      	ldr	r1, [r3, #4]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	69da      	ldr	r2, [r3, #28]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf78:	431a      	orrs	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf7e:	431a      	orrs	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	430a      	orrs	r2, r1
 800cf86:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6899      	ldr	r1, [r3, #8]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	4b3b      	ldr	r3, [pc, #236]	; (800d080 <HAL_SAI_Init+0x534>)
 800cf94:	400b      	ands	r3, r1
 800cf96:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	6899      	ldr	r1, [r3, #8]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfa2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800cfa8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800cfae:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800cfb4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfba:	3b01      	subs	r3, #1
 800cfbc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800cfbe:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	430a      	orrs	r2, r1
 800cfc6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	68d9      	ldr	r1, [r3, #12]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	f24f 0320 	movw	r3, #61472	; 0xf020
 800cfd6:	400b      	ands	r3, r1
 800cfd8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	68d9      	ldr	r1, [r3, #12]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfe8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfee:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800cff0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cff6:	3b01      	subs	r3, #1
 800cff8:	021b      	lsls	r3, r3, #8
 800cffa:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	430a      	orrs	r2, r1
 800d002:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a1e      	ldr	r2, [pc, #120]	; (800d084 <HAL_SAI_Init+0x538>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d004      	beq.n	800d018 <HAL_SAI_Init+0x4cc>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a1d      	ldr	r2, [pc, #116]	; (800d088 <HAL_SAI_Init+0x53c>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d119      	bne.n	800d04c <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800d018:	69bb      	ldr	r3, [r7, #24]
 800d01a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d01c:	f023 0201 	bic.w	r2, r3, #1
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d10e      	bne.n	800d04c <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d036:	3b01      	subs	r3, #1
 800d038:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800d03a:	431a      	orrs	r2, r3
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d044:	f043 0201 	orr.w	r2, r3, #1
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2201      	movs	r2, #1
 800d058:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3728      	adds	r7, #40	; 0x28
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	cccccccd 	.word	0xcccccccd
 800d074:	f005c010 	.word	0xf005c010
 800d078:	f805c010 	.word	0xf805c010
 800d07c:	ffff1ff0 	.word	0xffff1ff0
 800d080:	fff88000 	.word	0xfff88000
 800d084:	40015804 	.word	0x40015804
 800d088:	58005404 	.word	0x58005404

0800d08c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b086      	sub	sp, #24
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	4613      	mov	r3, r2
 800d098:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800d09a:	f7f5 fd81 	bl	8002ba0 <HAL_GetTick>
 800d09e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d002      	beq.n	800d0ac <HAL_SAI_Transmit_DMA+0x20>
 800d0a6:	88fb      	ldrh	r3, [r7, #6]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d101      	bne.n	800d0b0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e098      	b.n	800d1e2 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	f040 8091 	bne.w	800d1e0 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d101      	bne.n	800d0cc <HAL_SAI_Transmit_DMA+0x40>
 800d0c8:	2302      	movs	r3, #2
 800d0ca:	e08a      	b.n	800d1e2 <HAL_SAI_Transmit_DMA+0x156>
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	68ba      	ldr	r2, [r7, #8]
 800d0d8:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	88fa      	ldrh	r2, [r7, #6]
 800d0de:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	88fa      	ldrh	r2, [r7, #6]
 800d0e6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2212      	movs	r2, #18
 800d0f6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d100:	4a3a      	ldr	r2, [pc, #232]	; (800d1ec <HAL_SAI_Transmit_DMA+0x160>)
 800d102:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d10a:	4a39      	ldr	r2, [pc, #228]	; (800d1f0 <HAL_SAI_Transmit_DMA+0x164>)
 800d10c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d114:	4a37      	ldr	r2, [pc, #220]	; (800d1f4 <HAL_SAI_Transmit_DMA+0x168>)
 800d116:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d11e:	2200      	movs	r2, #0
 800d120:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d12c:	4619      	mov	r1, r3
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	331c      	adds	r3, #28
 800d134:	461a      	mov	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800d13c:	f7f7 fc32 	bl	80049a4 <HAL_DMA_Start_IT>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d005      	beq.n	800d152 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2200      	movs	r2, #0
 800d14a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	e047      	b.n	800d1e2 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d152:	2100      	movs	r1, #0
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f000 fa35 	bl	800d5c4 <SAI_InterruptFlag>
 800d15a:	4601      	mov	r1, r0
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	691a      	ldr	r2, [r3, #16]
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	430a      	orrs	r2, r1
 800d168:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d178:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d17a:	e015      	b.n	800d1a8 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800d17c:	f7f5 fd10 	bl	8002ba0 <HAL_GetTick>
 800d180:	4602      	mov	r2, r0
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d18a:	d90d      	bls.n	800d1a8 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d192:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800d1a4:	2303      	movs	r3, #3
 800d1a6:	e01c      	b.n	800d1e2 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	695b      	ldr	r3, [r3, #20]
 800d1ae:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d0e2      	beq.n	800d17c <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d107      	bne.n	800d1d4 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d1d2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e000      	b.n	800d1e2 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800d1e0:	2302      	movs	r3, #2
  }
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3718      	adds	r7, #24
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	0800d709 	.word	0x0800d709
 800d1f0:	0800d6a9 	.word	0x0800d6a9
 800d1f4:	0800d7a1 	.word	0x0800d7a1

0800d1f8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	4613      	mov	r3, r2
 800d204:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d002      	beq.n	800d212 <HAL_SAI_Receive_DMA+0x1a>
 800d20c:	88fb      	ldrh	r3, [r7, #6]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d101      	bne.n	800d216 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800d212:	2301      	movs	r3, #1
 800d214:	e079      	b.n	800d30a <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d172      	bne.n	800d308 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d101      	bne.n	800d230 <HAL_SAI_Receive_DMA+0x38>
 800d22c:	2302      	movs	r3, #2
 800d22e:	e06c      	b.n	800d30a <HAL_SAI_Receive_DMA+0x112>
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	68ba      	ldr	r2, [r7, #8]
 800d23c:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	88fa      	ldrh	r2, [r7, #6]
 800d242:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	88fa      	ldrh	r2, [r7, #6]
 800d24a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2200      	movs	r2, #0
 800d252:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2222      	movs	r2, #34	; 0x22
 800d25a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d264:	4a2b      	ldr	r2, [pc, #172]	; (800d314 <HAL_SAI_Receive_DMA+0x11c>)
 800d266:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d26e:	4a2a      	ldr	r2, [pc, #168]	; (800d318 <HAL_SAI_Receive_DMA+0x120>)
 800d270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d278:	4a28      	ldr	r2, [pc, #160]	; (800d31c <HAL_SAI_Receive_DMA+0x124>)
 800d27a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d282:	2200      	movs	r2, #0
 800d284:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	331c      	adds	r3, #28
 800d292:	4619      	mov	r1, r3
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d298:	461a      	mov	r2, r3
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800d2a0:	f7f7 fb80 	bl	80049a4 <HAL_DMA_Start_IT>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d005      	beq.n	800d2b6 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e029      	b.n	800d30a <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	f000 f983 	bl	800d5c4 <SAI_InterruptFlag>
 800d2be:	4601      	mov	r1, r0
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	691a      	ldr	r2, [r3, #16]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	430a      	orrs	r2, r1
 800d2cc:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d2dc:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d107      	bne.n	800d2fc <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d2fa:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2200      	movs	r2, #0
 800d300:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800d304:	2300      	movs	r3, #0
 800d306:	e000      	b.n	800d30a <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800d308:	2302      	movs	r3, #2
  }
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3710      	adds	r7, #16
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	0800d785 	.word	0x0800d785
 800d318:	0800d725 	.word	0x0800d725
 800d31c:	0800d7a1 	.word	0x0800d7a1

0800d320 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800d328:	bf00      	nop
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d33c:	bf00      	nop
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b087      	sub	sp, #28
 800d360:	af00      	add	r7, sp, #0
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	607a      	str	r2, [r7, #4]
 800d368:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d36a:	2300      	movs	r3, #0
 800d36c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2200      	movs	r2, #0
 800d372:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d003      	beq.n	800d38a <SAI_InitI2S+0x2e>
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	2b02      	cmp	r3, #2
 800d388:	d103      	bne.n	800d392 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2200      	movs	r2, #0
 800d38e:	651a      	str	r2, [r3, #80]	; 0x50
 800d390:	e002      	b.n	800d398 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2201      	movs	r2, #1
 800d396:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d39e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3a6:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	683a      	ldr	r2, [r7, #0]
 800d3b2:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	f003 0301 	and.w	r3, r3, #1
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d001      	beq.n	800d3c2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e077      	b.n	800d4b2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d107      	bne.n	800d3d8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d3d4:	665a      	str	r2, [r3, #100]	; 0x64
 800d3d6:	e006      	b.n	800d3e6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d3de:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2b03      	cmp	r3, #3
 800d3ea:	d84f      	bhi.n	800d48c <SAI_InitI2S+0x130>
 800d3ec:	a201      	add	r2, pc, #4	; (adr r2, 800d3f4 <SAI_InitI2S+0x98>)
 800d3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f2:	bf00      	nop
 800d3f4:	0800d405 	.word	0x0800d405
 800d3f8:	0800d427 	.word	0x0800d427
 800d3fc:	0800d449 	.word	0x0800d449
 800d400:	0800d46b 	.word	0x0800d46b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2280      	movs	r2, #128	; 0x80
 800d408:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	085b      	lsrs	r3, r3, #1
 800d40e:	015a      	lsls	r2, r3, #5
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	085b      	lsrs	r3, r3, #1
 800d418:	011a      	lsls	r2, r3, #4
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2240      	movs	r2, #64	; 0x40
 800d422:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d424:	e035      	b.n	800d492 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2280      	movs	r2, #128	; 0x80
 800d42a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	085b      	lsrs	r3, r3, #1
 800d430:	019a      	lsls	r2, r3, #6
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	085b      	lsrs	r3, r3, #1
 800d43a:	015a      	lsls	r2, r3, #5
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	2280      	movs	r2, #128	; 0x80
 800d444:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d446:	e024      	b.n	800d492 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	22c0      	movs	r2, #192	; 0xc0
 800d44c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	085b      	lsrs	r3, r3, #1
 800d452:	019a      	lsls	r2, r3, #6
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	085b      	lsrs	r3, r3, #1
 800d45c:	015a      	lsls	r2, r3, #5
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2280      	movs	r2, #128	; 0x80
 800d466:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d468:	e013      	b.n	800d492 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	22e0      	movs	r2, #224	; 0xe0
 800d46e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	085b      	lsrs	r3, r3, #1
 800d474:	019a      	lsls	r2, r3, #6
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	085b      	lsrs	r3, r3, #1
 800d47e:	015a      	lsls	r2, r3, #5
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2280      	movs	r2, #128	; 0x80
 800d488:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d48a:	e002      	b.n	800d492 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800d48c:	2301      	movs	r3, #1
 800d48e:	75fb      	strb	r3, [r7, #23]
      break;
 800d490:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	2b02      	cmp	r3, #2
 800d496:	d10b      	bne.n	800d4b0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d102      	bne.n	800d4a4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2210      	movs	r2, #16
 800d4a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d102      	bne.n	800d4b0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2208      	movs	r2, #8
 800d4ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800d4b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	371c      	adds	r7, #28
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop

0800d4c0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b087      	sub	sp, #28
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	607a      	str	r2, [r7, #4]
 800d4cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d003      	beq.n	800d4ee <SAI_InitPCM+0x2e>
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	d103      	bne.n	800d4f6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	651a      	str	r2, [r3, #80]	; 0x50
 800d4f4:	e002      	b.n	800d4fc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2200      	movs	r2, #0
 800d500:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d508:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d510:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2200      	movs	r2, #0
 800d516:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	683a      	ldr	r2, [r7, #0]
 800d51c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d524:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2b04      	cmp	r3, #4
 800d52a:	d103      	bne.n	800d534 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2201      	movs	r2, #1
 800d530:	659a      	str	r2, [r3, #88]	; 0x58
 800d532:	e002      	b.n	800d53a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	220d      	movs	r2, #13
 800d538:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b03      	cmp	r3, #3
 800d53e:	d837      	bhi.n	800d5b0 <SAI_InitPCM+0xf0>
 800d540:	a201      	add	r2, pc, #4	; (adr r2, 800d548 <SAI_InitPCM+0x88>)
 800d542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d546:	bf00      	nop
 800d548:	0800d559 	.word	0x0800d559
 800d54c:	0800d56f 	.word	0x0800d56f
 800d550:	0800d585 	.word	0x0800d585
 800d554:	0800d59b 	.word	0x0800d59b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2280      	movs	r2, #128	; 0x80
 800d55c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	011a      	lsls	r2, r3, #4
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2240      	movs	r2, #64	; 0x40
 800d56a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d56c:	e023      	b.n	800d5b6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2280      	movs	r2, #128	; 0x80
 800d572:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	015a      	lsls	r2, r3, #5
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2280      	movs	r2, #128	; 0x80
 800d580:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d582:	e018      	b.n	800d5b6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	22c0      	movs	r2, #192	; 0xc0
 800d588:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	015a      	lsls	r2, r3, #5
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2280      	movs	r2, #128	; 0x80
 800d596:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d598:	e00d      	b.n	800d5b6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	22e0      	movs	r2, #224	; 0xe0
 800d59e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	015a      	lsls	r2, r3, #5
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2280      	movs	r2, #128	; 0x80
 800d5ac:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d5ae:	e002      	b.n	800d5b6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	75fb      	strb	r3, [r7, #23]
      break;
 800d5b4:	bf00      	nop
  }

  return status;
 800d5b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	371c      	adds	r7, #28
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800d5d4:	78fb      	ldrb	r3, [r7, #3]
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d103      	bne.n	800d5e2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f043 0308 	orr.w	r3, r3, #8
 800d5e0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5e6:	2b08      	cmp	r3, #8
 800d5e8:	d10b      	bne.n	800d602 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d5ee:	2b03      	cmp	r3, #3
 800d5f0:	d003      	beq.n	800d5fa <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d103      	bne.n	800d602 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f043 0310 	orr.w	r3, r3, #16
 800d600:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	2b03      	cmp	r3, #3
 800d608:	d003      	beq.n	800d612 <SAI_InterruptFlag+0x4e>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	2b02      	cmp	r3, #2
 800d610:	d104      	bne.n	800d61c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d618:	60fb      	str	r3, [r7, #12]
 800d61a:	e003      	b.n	800d624 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f043 0304 	orr.w	r3, r3, #4
 800d622:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800d624:	68fb      	ldr	r3, [r7, #12]
}
 800d626:	4618      	mov	r0, r3
 800d628:	3714      	adds	r7, #20
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr
	...

0800d634 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d634:	b480      	push	{r7}
 800d636:	b085      	sub	sp, #20
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d63c:	4b18      	ldr	r3, [pc, #96]	; (800d6a0 <SAI_Disable+0x6c>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a18      	ldr	r2, [pc, #96]	; (800d6a4 <SAI_Disable+0x70>)
 800d642:	fba2 2303 	umull	r2, r3, r2, r3
 800d646:	0b1b      	lsrs	r3, r3, #12
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d64c:	2300      	movs	r3, #0
 800d64e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d65e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d10a      	bne.n	800d67c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d66c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800d676:	2303      	movs	r3, #3
 800d678:	72fb      	strb	r3, [r7, #11]
      break;
 800d67a:	e009      	b.n	800d690 <SAI_Disable+0x5c>
    }
    count--;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	3b01      	subs	r3, #1
 800d680:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1e7      	bne.n	800d660 <SAI_Disable+0x2c>

  return status;
 800d690:	7afb      	ldrb	r3, [r7, #11]
}
 800d692:	4618      	mov	r0, r3
 800d694:	3714      	adds	r7, #20
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop
 800d6a0:	20000000 	.word	0x20000000
 800d6a4:	95cbec1b 	.word	0x95cbec1b

0800d6a8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	69db      	ldr	r3, [r3, #28]
 800d6ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6be:	d01c      	beq.n	800d6fa <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d6d6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d6d8:	2100      	movs	r1, #0
 800d6da:	68f8      	ldr	r0, [r7, #12]
 800d6dc:	f7ff ff72 	bl	800d5c4 <SAI_InterruptFlag>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	43d9      	mvns	r1, r3
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	691a      	ldr	r2, [r3, #16]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	400a      	ands	r2, r1
 800d6f0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800d6fa:	68f8      	ldr	r0, [r7, #12]
 800d6fc:	f7ff fe10 	bl	800d320 <HAL_SAI_TxCpltCallback>
#endif
}
 800d700:	bf00      	nop
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d714:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800d716:	68f8      	ldr	r0, [r7, #12]
 800d718:	f7ff fe0c 	bl	800d334 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800d71c:	bf00      	nop
 800d71e:	3710      	adds	r7, #16
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d730:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	69db      	ldr	r3, [r3, #28]
 800d736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d73a:	d01c      	beq.n	800d776 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d74a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2200      	movs	r2, #0
 800d750:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d754:	2100      	movs	r1, #0
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f7ff ff34 	bl	800d5c4 <SAI_InterruptFlag>
 800d75c:	4603      	mov	r3, r0
 800d75e:	43d9      	mvns	r1, r3
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	691a      	ldr	r2, [r3, #16]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	400a      	ands	r2, r1
 800d76c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2201      	movs	r2, #1
 800d772:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f7f3 f98a 	bl	8000a90 <HAL_SAI_RxCpltCallback>
#endif
}
 800d77c:	bf00      	nop
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d790:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f7f3 f987 	bl	8000aa6 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800d798:	bf00      	nop
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ac:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7f8 fff0 	bl	8006794 <HAL_DMA_GetError>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	2b02      	cmp	r3, #2
 800d7b8:	d01d      	beq.n	800d7f6 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d7d8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800d7da:	68f8      	ldr	r0, [r7, #12]
 800d7dc:	f7ff ff2a 	bl	800d634 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f7ff fda9 	bl	800d348 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800d7f6:	bf00      	nop
 800d7f8:	3710      	adds	r7, #16
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b08a      	sub	sp, #40	; 0x28
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d101      	bne.n	800d810 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d80c:	2301      	movs	r3, #1
 800d80e:	e075      	b.n	800d8fc <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d816:	b2db      	uxtb	r3, r3
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d105      	bne.n	800d828 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7f4 fc88 	bl	8002138 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2204      	movs	r2, #4
 800d82c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 f867 	bl	800d904 <HAL_SD_InitCard>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d001      	beq.n	800d840 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d83c:	2301      	movs	r3, #1
 800d83e:	e05d      	b.n	800d8fc <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d840:	f107 0308 	add.w	r3, r7, #8
 800d844:	4619      	mov	r1, r3
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 ff70 	bl	800e72c <HAL_SD_GetCardStatus>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d001      	beq.n	800d856 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d852:	2301      	movs	r3, #1
 800d854:	e052      	b.n	800d8fc <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d856:	7e3b      	ldrb	r3, [r7, #24]
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d85c:	7e7b      	ldrb	r3, [r7, #25]
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d866:	2b01      	cmp	r3, #1
 800d868:	d10a      	bne.n	800d880 <HAL_SD_Init+0x82>
 800d86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d102      	bne.n	800d876 <HAL_SD_Init+0x78>
 800d870:	6a3b      	ldr	r3, [r7, #32]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d004      	beq.n	800d880 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d87c:	659a      	str	r2, [r3, #88]	; 0x58
 800d87e:	e00b      	b.n	800d898 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d884:	2b01      	cmp	r3, #1
 800d886:	d104      	bne.n	800d892 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d88e:	659a      	str	r2, [r3, #88]	; 0x58
 800d890:	e002      	b.n	800d898 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	4619      	mov	r1, r3
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f001 f82e 	bl	800e900 <HAL_SD_ConfigWideBusOperation>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d001      	beq.n	800d8ae <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	e026      	b.n	800d8fc <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d8ae:	f7f5 f977 	bl	8002ba0 <HAL_GetTick>
 800d8b2:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d8b4:	e011      	b.n	800d8da <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d8b6:	f7f5 f973 	bl	8002ba0 <HAL_GetTick>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	1ad3      	subs	r3, r2, r3
 800d8c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8c4:	d109      	bne.n	800d8da <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d8cc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d8d6:	2303      	movs	r3, #3
 800d8d8:	e010      	b.n	800d8fc <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f001 f922 	bl	800eb24 <HAL_SD_GetCardState>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b04      	cmp	r3, #4
 800d8e4:	d1e7      	bne.n	800d8b6 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d8fa:	2300      	movs	r3, #0
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3728      	adds	r7, #40	; 0x28
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d904:	b590      	push	{r4, r7, lr}
 800d906:	b08d      	sub	sp, #52	; 0x34
 800d908:	af02      	add	r7, sp, #8
 800d90a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800d90c:	2300      	movs	r3, #0
 800d90e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d910:	2300      	movs	r3, #0
 800d912:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d914:	2300      	movs	r3, #0
 800d916:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d918:	2300      	movs	r3, #0
 800d91a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d91c:	2300      	movs	r3, #0
 800d91e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d920:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d924:	f7fd fde2 	bl	800b4ec <HAL_RCCEx_GetPeriphCLKFreq>
 800d928:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d109      	bne.n	800d944 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2201      	movs	r2, #1
 800d934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d93e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d940:	2301      	movs	r3, #1
 800d942:	e06a      	b.n	800da1a <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d946:	0a1b      	lsrs	r3, r3, #8
 800d948:	4a36      	ldr	r2, [pc, #216]	; (800da24 <HAL_SD_InitCard+0x120>)
 800d94a:	fba2 2303 	umull	r2, r3, r2, r3
 800d94e:	091b      	lsrs	r3, r3, #4
 800d950:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681c      	ldr	r4, [r3, #0]
 800d956:	466a      	mov	r2, sp
 800d958:	f107 0318 	add.w	r3, r7, #24
 800d95c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d960:	e882 0003 	stmia.w	r2, {r0, r1}
 800d964:	f107 030c 	add.w	r3, r7, #12
 800d968:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d96a:	4620      	mov	r0, r4
 800d96c:	f004 f9d0 	bl	8011d10 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4618      	mov	r0, r3
 800d976:	f004 fa13 	bl	8011da0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	005b      	lsls	r3, r3, #1
 800d97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d980:	fbb2 f3f3 	udiv	r3, r2, r3
 800d984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d986:	4a28      	ldr	r2, [pc, #160]	; (800da28 <HAL_SD_InitCard+0x124>)
 800d988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d98e:	3301      	adds	r3, #1
 800d990:	4618      	mov	r0, r3
 800d992:	f7f5 f911 	bl	8002bb8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f001 f9b2 	bl	800ed00 <SD_PowerON>
 800d99c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d99e:	6a3b      	ldr	r3, [r7, #32]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d00b      	beq.n	800d9bc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9b0:	6a3b      	ldr	r3, [r7, #32]
 800d9b2:	431a      	orrs	r2, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	e02e      	b.n	800da1a <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f001 f8d1 	bl	800eb64 <SD_InitCard>
 800d9c2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9c4:	6a3b      	ldr	r3, [r7, #32]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00b      	beq.n	800d9e2 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9d6:	6a3b      	ldr	r3, [r7, #32]
 800d9d8:	431a      	orrs	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e01b      	b.n	800da1a <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f004 fa6e 	bl	8011ecc <SDMMC_CmdBlockLength>
 800d9f0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9f2:	6a3b      	ldr	r3, [r7, #32]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d00f      	beq.n	800da18 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a0b      	ldr	r2, [pc, #44]	; (800da2c <HAL_SD_InitCard+0x128>)
 800d9fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da04:	6a3b      	ldr	r3, [r7, #32]
 800da06:	431a      	orrs	r2, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2201      	movs	r2, #1
 800da10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800da14:	2301      	movs	r3, #1
 800da16:	e000      	b.n	800da1a <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800da18:	2300      	movs	r3, #0
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	372c      	adds	r7, #44	; 0x2c
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd90      	pop	{r4, r7, pc}
 800da22:	bf00      	nop
 800da24:	014f8b59 	.word	0x014f8b59
 800da28:	00012110 	.word	0x00012110
 800da2c:	1fe00fff 	.word	0x1fe00fff

0800da30 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b092      	sub	sp, #72	; 0x48
 800da34:	af00      	add	r7, sp, #0
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	607a      	str	r2, [r7, #4]
 800da3c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800da3e:	f7f5 f8af 	bl	8002ba0 <HAL_GetTick>
 800da42:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d107      	bne.n	800da62 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800da5e:	2301      	movs	r3, #1
 800da60:	e167      	b.n	800dd32 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	f040 815a 	bne.w	800dd24 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2200      	movs	r2, #0
 800da74:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800da76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	441a      	add	r2, r3
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da80:	429a      	cmp	r2, r3
 800da82:	d907      	bls.n	800da94 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da88:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800da90:	2301      	movs	r3, #1
 800da92:	e14e      	b.n	800dd32 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	2203      	movs	r2, #3
 800da98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2200      	movs	r2, #0
 800daa2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d002      	beq.n	800dab2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800daac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daae:	025b      	lsls	r3, r3, #9
 800dab0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dab6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	025b      	lsls	r3, r3, #9
 800dabc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800dabe:	2390      	movs	r3, #144	; 0x90
 800dac0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dac2:	2302      	movs	r3, #2
 800dac4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dac6:	2300      	movs	r3, #0
 800dac8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800daca:	2300      	movs	r3, #0
 800dacc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f107 0214 	add.w	r2, r7, #20
 800dad6:	4611      	mov	r1, r2
 800dad8:	4618      	mov	r0, r3
 800dada:	f004 f9cb 	bl	8011e74 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	68da      	ldr	r2, [r3, #12]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800daec:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d90a      	bls.n	800db0a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2202      	movs	r2, #2
 800daf8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db00:	4618      	mov	r0, r3
 800db02:	f004 fa29 	bl	8011f58 <SDMMC_CmdReadMultiBlock>
 800db06:	6478      	str	r0, [r7, #68]	; 0x44
 800db08:	e009      	b.n	800db1e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2201      	movs	r2, #1
 800db0e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db16:	4618      	mov	r0, r3
 800db18:	f004 f9fb 	bl	8011f12 <SDMMC_CmdReadSingleBlock>
 800db1c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800db1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db20:	2b00      	cmp	r3, #0
 800db22:	d012      	beq.n	800db4a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4a84      	ldr	r2, [pc, #528]	; (800dd3c <HAL_SD_ReadBlocks+0x30c>)
 800db2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db32:	431a      	orrs	r2, r3
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2201      	movs	r2, #1
 800db3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2200      	movs	r2, #0
 800db44:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800db46:	2301      	movs	r3, #1
 800db48:	e0f3      	b.n	800dd32 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800db4e:	e058      	b.n	800dc02 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d033      	beq.n	800dbc6 <HAL_SD_ReadBlocks+0x196>
 800db5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db60:	2b1f      	cmp	r3, #31
 800db62:	d930      	bls.n	800dbc6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800db64:	2300      	movs	r3, #0
 800db66:	643b      	str	r3, [r7, #64]	; 0x40
 800db68:	e027      	b.n	800dbba <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4618      	mov	r0, r3
 800db70:	f004 f8f8 	bl	8011d64 <SDMMC_ReadFIFO>
 800db74:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800db76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800db7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db80:	3301      	adds	r3, #1
 800db82:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800db84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db86:	0a1b      	lsrs	r3, r3, #8
 800db88:	b2da      	uxtb	r2, r3
 800db8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800db8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db90:	3301      	adds	r3, #1
 800db92:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800db94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db96:	0c1b      	lsrs	r3, r3, #16
 800db98:	b2da      	uxtb	r2, r3
 800db9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800db9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dba0:	3301      	adds	r3, #1
 800dba2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800dba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba6:	0e1b      	lsrs	r3, r3, #24
 800dba8:	b2da      	uxtb	r2, r3
 800dbaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800dbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 800dbb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	643b      	str	r3, [r7, #64]	; 0x40
 800dbba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbbc:	2b07      	cmp	r3, #7
 800dbbe:	d9d4      	bls.n	800db6a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800dbc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbc2:	3b20      	subs	r3, #32
 800dbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800dbc6:	f7f4 ffeb 	bl	8002ba0 <HAL_GetTick>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbce:	1ad3      	subs	r3, r2, r3
 800dbd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d902      	bls.n	800dbdc <HAL_SD_ReadBlocks+0x1ac>
 800dbd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d112      	bne.n	800dc02 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4a56      	ldr	r2, [pc, #344]	; (800dd3c <HAL_SD_ReadBlocks+0x30c>)
 800dbe2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbe8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800dbfe:	2303      	movs	r3, #3
 800dc00:	e097      	b.n	800dd32 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc08:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d09f      	beq.n	800db50 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	68da      	ldr	r2, [r3, #12]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc1e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d022      	beq.n	800dc74 <HAL_SD_ReadBlocks+0x244>
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d91f      	bls.n	800dc74 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc38:	2b03      	cmp	r3, #3
 800dc3a:	d01b      	beq.n	800dc74 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f004 f9f3 	bl	801202c <SDMMC_CmdStopTransfer>
 800dc46:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800dc48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d012      	beq.n	800dc74 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4a3a      	ldr	r2, [pc, #232]	; (800dd3c <HAL_SD_ReadBlocks+0x30c>)
 800dc54:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc5c:	431a      	orrs	r2, r3
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2201      	movs	r2, #1
 800dc66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800dc70:	2301      	movs	r3, #1
 800dc72:	e05e      	b.n	800dd32 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc7a:	f003 0308 	and.w	r3, r3, #8
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d012      	beq.n	800dca8 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4a2d      	ldr	r2, [pc, #180]	; (800dd3c <HAL_SD_ReadBlocks+0x30c>)
 800dc88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc8e:	f043 0208 	orr.w	r2, r3, #8
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2201      	movs	r2, #1
 800dc9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2200      	movs	r2, #0
 800dca2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800dca4:	2301      	movs	r3, #1
 800dca6:	e044      	b.n	800dd32 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcae:	f003 0302 	and.w	r3, r3, #2
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d012      	beq.n	800dcdc <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4a20      	ldr	r2, [pc, #128]	; (800dd3c <HAL_SD_ReadBlocks+0x30c>)
 800dcbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc2:	f043 0202 	orr.w	r2, r3, #2
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2201      	movs	r2, #1
 800dcce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	e02a      	b.n	800dd32 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce2:	f003 0320 	and.w	r3, r3, #32
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d012      	beq.n	800dd10 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4a13      	ldr	r2, [pc, #76]	; (800dd3c <HAL_SD_ReadBlocks+0x30c>)
 800dcf0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf6:	f043 0220 	orr.w	r2, r3, #32
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2201      	movs	r2, #1
 800dd02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	e010      	b.n	800dd32 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a0a      	ldr	r2, [pc, #40]	; (800dd40 <HAL_SD_ReadBlocks+0x310>)
 800dd16:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800dd20:	2300      	movs	r3, #0
 800dd22:	e006      	b.n	800dd32 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dd30:	2301      	movs	r3, #1
  }
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3748      	adds	r7, #72	; 0x48
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	1fe00fff 	.word	0x1fe00fff
 800dd40:	18000f3a 	.word	0x18000f3a

0800dd44 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b092      	sub	sp, #72	; 0x48
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
 800dd50:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dd52:	f7f4 ff25 	bl	8002ba0 <HAL_GetTick>
 800dd56:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d107      	bne.n	800dd76 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dd72:	2301      	movs	r3, #1
 800dd74:	e16b      	b.n	800e04e <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	f040 815e 	bne.w	800e040 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2200      	movs	r2, #0
 800dd88:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dd8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	441a      	add	r2, r3
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d907      	bls.n	800dda8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd9c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800dda4:	2301      	movs	r3, #1
 800dda6:	e152      	b.n	800e04e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2203      	movs	r2, #3
 800ddac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d002      	beq.n	800ddc6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800ddc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc2:	025b      	lsls	r3, r3, #9
 800ddc4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ddc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ddca:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	025b      	lsls	r3, r3, #9
 800ddd0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ddd2:	2390      	movs	r3, #144	; 0x90
 800ddd4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ddda:	2300      	movs	r3, #0
 800dddc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ddde:	2300      	movs	r3, #0
 800dde0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f107 0218 	add.w	r2, r7, #24
 800ddea:	4611      	mov	r1, r2
 800ddec:	4618      	mov	r0, r3
 800ddee:	f004 f841 	bl	8011e74 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	68da      	ldr	r2, [r3, #12]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de00:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	2b01      	cmp	r3, #1
 800de06:	d90a      	bls.n	800de1e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2220      	movs	r2, #32
 800de0c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de14:	4618      	mov	r0, r3
 800de16:	f004 f8e5 	bl	8011fe4 <SDMMC_CmdWriteMultiBlock>
 800de1a:	6478      	str	r0, [r7, #68]	; 0x44
 800de1c:	e009      	b.n	800de32 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2210      	movs	r2, #16
 800de22:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de2a:	4618      	mov	r0, r3
 800de2c:	f004 f8b7 	bl	8011f9e <SDMMC_CmdWriteSingleBlock>
 800de30:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800de32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de34:	2b00      	cmp	r3, #0
 800de36:	d012      	beq.n	800de5e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4a86      	ldr	r2, [pc, #536]	; (800e058 <HAL_SD_WriteBlocks+0x314>)
 800de3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de46:	431a      	orrs	r2, r3
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2201      	movs	r2, #1
 800de50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2200      	movs	r2, #0
 800de58:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	e0f7      	b.n	800e04e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800de62:	e05c      	b.n	800df1e <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d037      	beq.n	800dee2 <HAL_SD_WriteBlocks+0x19e>
 800de72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de74:	2b1f      	cmp	r3, #31
 800de76:	d934      	bls.n	800dee2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800de78:	2300      	movs	r3, #0
 800de7a:	643b      	str	r3, [r7, #64]	; 0x40
 800de7c:	e02b      	b.n	800ded6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800de7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800de84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de86:	3301      	adds	r3, #1
 800de88:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800de8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	021a      	lsls	r2, r3, #8
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	4313      	orrs	r3, r2
 800de94:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800de96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de98:	3301      	adds	r3, #1
 800de9a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800de9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	041a      	lsls	r2, r3, #16
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	4313      	orrs	r3, r2
 800dea6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800dea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deaa:	3301      	adds	r3, #1
 800deac:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800deae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	061a      	lsls	r2, r3, #24
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	4313      	orrs	r3, r2
 800deb8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800deba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800debc:	3301      	adds	r3, #1
 800debe:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f107 0214 	add.w	r2, r7, #20
 800dec8:	4611      	mov	r1, r2
 800deca:	4618      	mov	r0, r3
 800decc:	f003 ff57 	bl	8011d7e <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800ded0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ded2:	3301      	adds	r3, #1
 800ded4:	643b      	str	r3, [r7, #64]	; 0x40
 800ded6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ded8:	2b07      	cmp	r3, #7
 800deda:	d9d0      	bls.n	800de7e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800dedc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dede:	3b20      	subs	r3, #32
 800dee0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800dee2:	f7f4 fe5d 	bl	8002ba0 <HAL_GetTick>
 800dee6:	4602      	mov	r2, r0
 800dee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deea:	1ad3      	subs	r3, r2, r3
 800deec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800deee:	429a      	cmp	r2, r3
 800def0:	d902      	bls.n	800def8 <HAL_SD_WriteBlocks+0x1b4>
 800def2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800def4:	2b00      	cmp	r3, #0
 800def6:	d112      	bne.n	800df1e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4a56      	ldr	r2, [pc, #344]	; (800e058 <HAL_SD_WriteBlocks+0x314>)
 800defe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df06:	431a      	orrs	r2, r3
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2201      	movs	r2, #1
 800df10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2200      	movs	r2, #0
 800df18:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800df1a:	2303      	movs	r3, #3
 800df1c:	e097      	b.n	800e04e <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df24:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d09b      	beq.n	800de64 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	68da      	ldr	r2, [r3, #12]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df3a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df46:	2b00      	cmp	r3, #0
 800df48:	d022      	beq.n	800df90 <HAL_SD_WriteBlocks+0x24c>
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d91f      	bls.n	800df90 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df54:	2b03      	cmp	r3, #3
 800df56:	d01b      	beq.n	800df90 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4618      	mov	r0, r3
 800df5e:	f004 f865 	bl	801202c <SDMMC_CmdStopTransfer>
 800df62:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800df64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df66:	2b00      	cmp	r3, #0
 800df68:	d012      	beq.n	800df90 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4a3a      	ldr	r2, [pc, #232]	; (800e058 <HAL_SD_WriteBlocks+0x314>)
 800df70:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df78:	431a      	orrs	r2, r3
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2201      	movs	r2, #1
 800df82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2200      	movs	r2, #0
 800df8a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800df8c:	2301      	movs	r3, #1
 800df8e:	e05e      	b.n	800e04e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df96:	f003 0308 	and.w	r3, r3, #8
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d012      	beq.n	800dfc4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	4a2d      	ldr	r2, [pc, #180]	; (800e058 <HAL_SD_WriteBlocks+0x314>)
 800dfa4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfaa:	f043 0208 	orr.w	r2, r3, #8
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e044      	b.n	800e04e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfca:	f003 0302 	and.w	r3, r3, #2
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d012      	beq.n	800dff8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4a20      	ldr	r2, [pc, #128]	; (800e058 <HAL_SD_WriteBlocks+0x314>)
 800dfd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfde:	f043 0202 	orr.w	r2, r3, #2
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	2201      	movs	r2, #1
 800dfea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2200      	movs	r2, #0
 800dff2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800dff4:	2301      	movs	r3, #1
 800dff6:	e02a      	b.n	800e04e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dffe:	f003 0310 	and.w	r3, r3, #16
 800e002:	2b00      	cmp	r3, #0
 800e004:	d012      	beq.n	800e02c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4a13      	ldr	r2, [pc, #76]	; (800e058 <HAL_SD_WriteBlocks+0x314>)
 800e00c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e012:	f043 0210 	orr.w	r2, r3, #16
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2201      	movs	r2, #1
 800e01e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e028:	2301      	movs	r3, #1
 800e02a:	e010      	b.n	800e04e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4a0a      	ldr	r2, [pc, #40]	; (800e05c <HAL_SD_WriteBlocks+0x318>)
 800e032:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2201      	movs	r2, #1
 800e038:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800e03c:	2300      	movs	r3, #0
 800e03e:	e006      	b.n	800e04e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e044:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e04c:	2301      	movs	r3, #1
  }
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3748      	adds	r7, #72	; 0x48
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	1fe00fff 	.word	0x1fe00fff
 800e05c:	18000f3a 	.word	0x18000f3a

0800e060 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e06c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d008      	beq.n	800e08e <HAL_SD_IRQHandler+0x2e>
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f003 0308 	and.w	r3, r3, #8
 800e082:	2b00      	cmp	r3, #0
 800e084:	d003      	beq.n	800e08e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f001 f926 	bl	800f2d8 <SD_Read_IT>
 800e08c:	e19a      	b.n	800e3c4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e098:	2b00      	cmp	r3, #0
 800e09a:	f000 80ac 	beq.w	800e1f6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e0a6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	4b59      	ldr	r3, [pc, #356]	; (800e218 <HAL_SD_IRQHandler+0x1b8>)
 800e0b4:	400b      	ands	r3, r1
 800e0b6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e0c6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	68da      	ldr	r2, [r3, #12]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e0d6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f003 0308 	and.w	r3, r3, #8
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d038      	beq.n	800e154 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f003 0302 	and.w	r3, r3, #2
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d104      	bne.n	800e0f6 <HAL_SD_IRQHandler+0x96>
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f003 0320 	and.w	r3, r3, #32
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d011      	beq.n	800e11a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f003 ff96 	bl	801202c <SDMMC_CmdStopTransfer>
 800e100:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d008      	beq.n	800e11a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	431a      	orrs	r2, r3
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f000 f95b 	bl	800e3d0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4a3f      	ldr	r2, [pc, #252]	; (800e21c <HAL_SD_IRQHandler+0x1bc>)
 800e120:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2201      	movs	r2, #1
 800e126:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2200      	movs	r2, #0
 800e12e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f003 0301 	and.w	r3, r3, #1
 800e136:	2b00      	cmp	r3, #0
 800e138:	d104      	bne.n	800e144 <HAL_SD_IRQHandler+0xe4>
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f003 0302 	and.w	r3, r3, #2
 800e140:	2b00      	cmp	r3, #0
 800e142:	d003      	beq.n	800e14c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f006 f8ab 	bl	80142a0 <HAL_SD_RxCpltCallback>
 800e14a:	e13b      	b.n	800e3c4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f006 f89d 	bl	801428c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e152:	e137      	b.n	800e3c4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 8132 	beq.w	800e3c4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2200      	movs	r2, #0
 800e166:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2200      	movs	r2, #0
 800e16e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2200      	movs	r2, #0
 800e176:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f003 0302 	and.w	r3, r3, #2
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d104      	bne.n	800e18c <HAL_SD_IRQHandler+0x12c>
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f003 0320 	and.w	r3, r3, #32
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d011      	beq.n	800e1b0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4618      	mov	r0, r3
 800e192:	f003 ff4b 	bl	801202c <SDMMC_CmdStopTransfer>
 800e196:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d008      	beq.n	800e1b0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	431a      	orrs	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f000 f910 	bl	800e3d0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	f003 0310 	and.w	r3, r3, #16
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d104      	bne.n	800e1d2 <HAL_SD_IRQHandler+0x172>
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f003 0320 	and.w	r3, r3, #32
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d002      	beq.n	800e1d8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f006 f85a 	bl	801428c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f003 0301 	and.w	r3, r3, #1
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d105      	bne.n	800e1ee <HAL_SD_IRQHandler+0x18e>
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f003 0302 	and.w	r3, r3, #2
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	f000 80eb 	beq.w	800e3c4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f006 f856 	bl	80142a0 <HAL_SD_RxCpltCallback>
}
 800e1f4:	e0e6      	b.n	800e3c4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e200:	2b00      	cmp	r3, #0
 800e202:	d00d      	beq.n	800e220 <HAL_SD_IRQHandler+0x1c0>
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f003 0308 	and.w	r3, r3, #8
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d008      	beq.n	800e220 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f001 f8a8 	bl	800f364 <SD_Write_IT>
 800e214:	e0d6      	b.n	800e3c4 <HAL_SD_IRQHandler+0x364>
 800e216:	bf00      	nop
 800e218:	ffff3ec5 	.word	0xffff3ec5
 800e21c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e226:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f000 809d 	beq.w	800e36a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e236:	f003 0302 	and.w	r3, r3, #2
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d005      	beq.n	800e24a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e242:	f043 0202 	orr.w	r2, r3, #2
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e250:	f003 0308 	and.w	r3, r3, #8
 800e254:	2b00      	cmp	r3, #0
 800e256:	d005      	beq.n	800e264 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e25c:	f043 0208 	orr.w	r2, r3, #8
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e26a:	f003 0320 	and.w	r3, r3, #32
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d005      	beq.n	800e27e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e276:	f043 0220 	orr.w	r2, r3, #32
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e284:	f003 0310 	and.w	r3, r3, #16
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d005      	beq.n	800e298 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e290:	f043 0210 	orr.w	r2, r3, #16
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a4b      	ldr	r2, [pc, #300]	; (800e3cc <HAL_SD_IRQHandler+0x36c>)
 800e29e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e2ae:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	68da      	ldr	r2, [r3, #12]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2be:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e2ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	68da      	ldr	r2, [r3, #12]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e2de:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f003 fea1 	bl	801202c <SDMMC_CmdStopTransfer>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f0:	431a      	orrs	r2, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	68da      	ldr	r2, [r3, #12]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e304:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e30e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f003 0308 	and.w	r3, r3, #8
 800e316:	2b00      	cmp	r3, #0
 800e318:	d00a      	beq.n	800e330 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2201      	movs	r2, #1
 800e31e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2200      	movs	r2, #0
 800e326:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 f851 	bl	800e3d0 <HAL_SD_ErrorCallback>
}
 800e32e:	e049      	b.n	800e3c4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e336:	2b00      	cmp	r3, #0
 800e338:	d044      	beq.n	800e3c4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d040      	beq.n	800e3c4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e350:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2200      	movs	r2, #0
 800e358:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2201      	movs	r2, #1
 800e35e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f000 f834 	bl	800e3d0 <HAL_SD_ErrorCallback>
}
 800e368:	e02c      	b.n	800e3c4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e374:	2b00      	cmp	r3, #0
 800e376:	d025      	beq.n	800e3c4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e380:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e388:	f003 0304 	and.w	r3, r3, #4
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d10c      	bne.n	800e3aa <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f003 0320 	and.w	r3, r3, #32
 800e396:	2b00      	cmp	r3, #0
 800e398:	d003      	beq.n	800e3a2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f001 f84a 	bl	800f434 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800e3a0:	e010      	b.n	800e3c4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f001 f832 	bl	800f40c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800e3a8:	e00c      	b.n	800e3c4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f003 0320 	and.w	r3, r3, #32
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d003      	beq.n	800e3bc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f001 f833 	bl	800f420 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800e3ba:	e003      	b.n	800e3c4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f001 f81b 	bl	800f3f8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800e3c2:	e7ff      	b.n	800e3c4 <HAL_SD_IRQHandler+0x364>
 800e3c4:	bf00      	nop
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	18000f3a 	.word	0x18000f3a

0800e3d0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e3d8:	bf00      	nop
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3f2:	0f9b      	lsrs	r3, r3, #30
 800e3f4:	b2da      	uxtb	r2, r3
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3fe:	0e9b      	lsrs	r3, r3, #26
 800e400:	b2db      	uxtb	r3, r3
 800e402:	f003 030f 	and.w	r3, r3, #15
 800e406:	b2da      	uxtb	r2, r3
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e410:	0e1b      	lsrs	r3, r3, #24
 800e412:	b2db      	uxtb	r3, r3
 800e414:	f003 0303 	and.w	r3, r3, #3
 800e418:	b2da      	uxtb	r2, r3
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e422:	0c1b      	lsrs	r3, r3, #16
 800e424:	b2da      	uxtb	r2, r3
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e42e:	0a1b      	lsrs	r3, r3, #8
 800e430:	b2da      	uxtb	r2, r3
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e43a:	b2da      	uxtb	r2, r3
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e444:	0d1b      	lsrs	r3, r3, #20
 800e446:	b29a      	uxth	r2, r3
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e450:	0c1b      	lsrs	r3, r3, #16
 800e452:	b2db      	uxtb	r3, r3
 800e454:	f003 030f 	and.w	r3, r3, #15
 800e458:	b2da      	uxtb	r2, r3
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e462:	0bdb      	lsrs	r3, r3, #15
 800e464:	b2db      	uxtb	r3, r3
 800e466:	f003 0301 	and.w	r3, r3, #1
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e474:	0b9b      	lsrs	r3, r3, #14
 800e476:	b2db      	uxtb	r3, r3
 800e478:	f003 0301 	and.w	r3, r3, #1
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e486:	0b5b      	lsrs	r3, r3, #13
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	f003 0301 	and.w	r3, r3, #1
 800e48e:	b2da      	uxtb	r2, r3
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e498:	0b1b      	lsrs	r3, r3, #12
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	f003 0301 	and.w	r3, r3, #1
 800e4a0:	b2da      	uxtb	r2, r3
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d163      	bne.n	800e57c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4b8:	009a      	lsls	r2, r3, #2
 800e4ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e4be:	4013      	ands	r3, r2
 800e4c0:	687a      	ldr	r2, [r7, #4]
 800e4c2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e4c4:	0f92      	lsrs	r2, r2, #30
 800e4c6:	431a      	orrs	r2, r3
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4d0:	0edb      	lsrs	r3, r3, #27
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	f003 0307 	and.w	r3, r3, #7
 800e4d8:	b2da      	uxtb	r2, r3
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4e2:	0e1b      	lsrs	r3, r3, #24
 800e4e4:	b2db      	uxtb	r3, r3
 800e4e6:	f003 0307 	and.w	r3, r3, #7
 800e4ea:	b2da      	uxtb	r2, r3
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4f4:	0d5b      	lsrs	r3, r3, #21
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	f003 0307 	and.w	r3, r3, #7
 800e4fc:	b2da      	uxtb	r2, r3
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e506:	0c9b      	lsrs	r3, r3, #18
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	f003 0307 	and.w	r3, r3, #7
 800e50e:	b2da      	uxtb	r2, r3
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e518:	0bdb      	lsrs	r3, r3, #15
 800e51a:	b2db      	uxtb	r3, r3
 800e51c:	f003 0307 	and.w	r3, r3, #7
 800e520:	b2da      	uxtb	r2, r3
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	691b      	ldr	r3, [r3, #16]
 800e52a:	1c5a      	adds	r2, r3, #1
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	7e1b      	ldrb	r3, [r3, #24]
 800e534:	b2db      	uxtb	r3, r3
 800e536:	f003 0307 	and.w	r3, r3, #7
 800e53a:	3302      	adds	r3, #2
 800e53c:	2201      	movs	r2, #1
 800e53e:	fa02 f303 	lsl.w	r3, r2, r3
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e546:	fb03 f202 	mul.w	r2, r3, r2
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	7a1b      	ldrb	r3, [r3, #8]
 800e552:	b2db      	uxtb	r3, r3
 800e554:	f003 030f 	and.w	r3, r3, #15
 800e558:	2201      	movs	r2, #1
 800e55a:	409a      	lsls	r2, r3
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e564:	687a      	ldr	r2, [r7, #4]
 800e566:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e568:	0a52      	lsrs	r2, r2, #9
 800e56a:	fb03 f202 	mul.w	r2, r3, r2
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e578:	655a      	str	r2, [r3, #84]	; 0x54
 800e57a:	e031      	b.n	800e5e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e580:	2b01      	cmp	r3, #1
 800e582:	d11d      	bne.n	800e5c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e588:	041b      	lsls	r3, r3, #16
 800e58a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e592:	0c1b      	lsrs	r3, r3, #16
 800e594:	431a      	orrs	r2, r3
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	691b      	ldr	r3, [r3, #16]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	029a      	lsls	r2, r3, #10
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e5b4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	655a      	str	r2, [r3, #84]	; 0x54
 800e5be:	e00f      	b.n	800e5e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4a58      	ldr	r2, [pc, #352]	; (800e728 <HAL_SD_GetCardCSD+0x344>)
 800e5c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	e09d      	b.n	800e71c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5e4:	0b9b      	lsrs	r3, r3, #14
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	f003 0301 	and.w	r3, r3, #1
 800e5ec:	b2da      	uxtb	r2, r3
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5f6:	09db      	lsrs	r3, r3, #7
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5fe:	b2da      	uxtb	r2, r3
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e60e:	b2da      	uxtb	r2, r3
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e618:	0fdb      	lsrs	r3, r3, #31
 800e61a:	b2da      	uxtb	r2, r3
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e624:	0f5b      	lsrs	r3, r3, #29
 800e626:	b2db      	uxtb	r3, r3
 800e628:	f003 0303 	and.w	r3, r3, #3
 800e62c:	b2da      	uxtb	r2, r3
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e636:	0e9b      	lsrs	r3, r3, #26
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	f003 0307 	and.w	r3, r3, #7
 800e63e:	b2da      	uxtb	r2, r3
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e648:	0d9b      	lsrs	r3, r3, #22
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	f003 030f 	and.w	r3, r3, #15
 800e650:	b2da      	uxtb	r2, r3
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e65a:	0d5b      	lsrs	r3, r3, #21
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	f003 0301 	and.w	r3, r3, #1
 800e662:	b2da      	uxtb	r2, r3
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	2200      	movs	r2, #0
 800e66e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e676:	0c1b      	lsrs	r3, r3, #16
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	f003 0301 	and.w	r3, r3, #1
 800e67e:	b2da      	uxtb	r2, r3
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e68a:	0bdb      	lsrs	r3, r3, #15
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	f003 0301 	and.w	r3, r3, #1
 800e692:	b2da      	uxtb	r2, r3
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e69e:	0b9b      	lsrs	r3, r3, #14
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	f003 0301 	and.w	r3, r3, #1
 800e6a6:	b2da      	uxtb	r2, r3
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6b2:	0b5b      	lsrs	r3, r3, #13
 800e6b4:	b2db      	uxtb	r3, r3
 800e6b6:	f003 0301 	and.w	r3, r3, #1
 800e6ba:	b2da      	uxtb	r2, r3
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6c6:	0b1b      	lsrs	r3, r3, #12
 800e6c8:	b2db      	uxtb	r3, r3
 800e6ca:	f003 0301 	and.w	r3, r3, #1
 800e6ce:	b2da      	uxtb	r2, r3
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6da:	0a9b      	lsrs	r3, r3, #10
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	f003 0303 	and.w	r3, r3, #3
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6ee:	0a1b      	lsrs	r3, r3, #8
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	f003 0303 	and.w	r3, r3, #3
 800e6f6:	b2da      	uxtb	r2, r3
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e702:	085b      	lsrs	r3, r3, #1
 800e704:	b2db      	uxtb	r3, r3
 800e706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e70a:	b2da      	uxtb	r2, r3
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	2201      	movs	r2, #1
 800e716:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e71a:	2300      	movs	r3, #0
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	370c      	adds	r7, #12
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr
 800e728:	1fe00fff 	.word	0x1fe00fff

0800e72c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b094      	sub	sp, #80	; 0x50
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e736:	2300      	movs	r3, #0
 800e738:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b03      	cmp	r3, #3
 800e746:	d101      	bne.n	800e74c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e748:	2301      	movs	r3, #1
 800e74a:	e0a7      	b.n	800e89c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e74c:	f107 0308 	add.w	r3, r7, #8
 800e750:	4619      	mov	r1, r3
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 fb62 	bl	800ee1c <SD_SendSDStatus>
 800e758:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e75a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d011      	beq.n	800e784 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a4f      	ldr	r2, [pc, #316]	; (800e8a4 <HAL_SD_GetCardStatus+0x178>)
 800e766:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e76c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e76e:	431a      	orrs	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2201      	movs	r2, #1
 800e778:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e77c:	2301      	movs	r3, #1
 800e77e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e782:	e070      	b.n	800e866 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	099b      	lsrs	r3, r3, #6
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	f003 0303 	and.w	r3, r3, #3
 800e78e:	b2da      	uxtb	r2, r3
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	095b      	lsrs	r3, r3, #5
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	f003 0301 	and.w	r3, r3, #1
 800e79e:	b2da      	uxtb	r2, r3
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	0a1b      	lsrs	r3, r3, #8
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	0e1b      	lsrs	r3, r3, #24
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	061a      	lsls	r2, r3, #24
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	021b      	lsls	r3, r3, #8
 800e7c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7ca:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	0a1b      	lsrs	r3, r3, #8
 800e7d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e7d4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	0e1b      	lsrs	r3, r3, #24
 800e7da:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	0a1b      	lsrs	r3, r3, #8
 800e7ec:	b2da      	uxtb	r2, r3
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	0d1b      	lsrs	r3, r3, #20
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	f003 030f 	and.w	r3, r3, #15
 800e7fc:	b2da      	uxtb	r2, r3
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	0c1b      	lsrs	r3, r3, #16
 800e806:	b29b      	uxth	r3, r3
 800e808:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e80c:	b29a      	uxth	r2, r3
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	b29b      	uxth	r3, r3
 800e812:	b2db      	uxtb	r3, r3
 800e814:	b29b      	uxth	r3, r3
 800e816:	4313      	orrs	r3, r2
 800e818:	b29a      	uxth	r2, r3
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	0a9b      	lsrs	r3, r3, #10
 800e822:	b2db      	uxtb	r3, r3
 800e824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e828:	b2da      	uxtb	r2, r3
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	0a1b      	lsrs	r3, r3, #8
 800e832:	b2db      	uxtb	r3, r3
 800e834:	f003 0303 	and.w	r3, r3, #3
 800e838:	b2da      	uxtb	r2, r3
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	091b      	lsrs	r3, r3, #4
 800e842:	b2db      	uxtb	r3, r3
 800e844:	f003 030f 	and.w	r3, r3, #15
 800e848:	b2da      	uxtb	r2, r3
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	b2db      	uxtb	r3, r3
 800e852:	f003 030f 	and.w	r3, r3, #15
 800e856:	b2da      	uxtb	r2, r3
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	0e1b      	lsrs	r3, r3, #24
 800e860:	b2da      	uxtb	r2, r3
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e86e:	4618      	mov	r0, r3
 800e870:	f003 fb2c 	bl	8011ecc <SDMMC_CmdBlockLength>
 800e874:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d00d      	beq.n	800e898 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a08      	ldr	r2, [pc, #32]	; (800e8a4 <HAL_SD_GetCardStatus+0x178>)
 800e882:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e888:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2201      	movs	r2, #1
 800e88e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e892:	2301      	movs	r3, #1
 800e894:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e898:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3750      	adds	r7, #80	; 0x50
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	1fe00fff 	.word	0x1fe00fff

0800e8a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e900:	b590      	push	{r4, r7, lr}
 800e902:	b08d      	sub	sp, #52	; 0x34
 800e904:	af02      	add	r7, sp, #8
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800e90a:	2300      	movs	r3, #0
 800e90c:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800e90e:	2300      	movs	r3, #0
 800e910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2203      	movs	r2, #3
 800e918:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e920:	2b03      	cmp	r3, #3
 800e922:	d02e      	beq.n	800e982 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e92a:	d106      	bne.n	800e93a <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e930:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	635a      	str	r2, [r3, #52]	; 0x34
 800e938:	e029      	b.n	800e98e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e940:	d10a      	bne.n	800e958 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 fb62 	bl	800f00c <SD_WideBus_Enable>
 800e948:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	431a      	orrs	r2, r3
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	635a      	str	r2, [r3, #52]	; 0x34
 800e956:	e01a      	b.n	800e98e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d10a      	bne.n	800e974 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 fb9f 	bl	800f0a2 <SD_WideBus_Disable>
 800e964:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	431a      	orrs	r2, r3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	635a      	str	r2, [r3, #52]	; 0x34
 800e972:	e00c      	b.n	800e98e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e978:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	635a      	str	r2, [r3, #52]	; 0x34
 800e980:	e005      	b.n	800e98e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e986:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e992:	2b00      	cmp	r3, #0
 800e994:	d007      	beq.n	800e9a6 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a5e      	ldr	r2, [pc, #376]	; (800eb14 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e99c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9a4:	e094      	b.n	800ead0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e9a6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e9aa:	f7fc fd9f 	bl	800b4ec <HAL_RCCEx_GetPeriphCLKFreq>
 800e9ae:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800e9b0:	6a3b      	ldr	r3, [r7, #32]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f000 8083 	beq.w	800eabe <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	689b      	ldr	r3, [r3, #8]
 800e9c2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	691b      	ldr	r3, [r3, #16]
 800e9cc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	695a      	ldr	r2, [r3, #20]
 800e9d2:	6a3b      	ldr	r3, [r7, #32]
 800e9d4:	4950      	ldr	r1, [pc, #320]	; (800eb18 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e9d6:	fba1 1303 	umull	r1, r3, r1, r3
 800e9da:	0e1b      	lsrs	r3, r3, #24
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d303      	bcc.n	800e9e8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	695b      	ldr	r3, [r3, #20]
 800e9e4:	61bb      	str	r3, [r7, #24]
 800e9e6:	e05a      	b.n	800ea9e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9f0:	d103      	bne.n	800e9fa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	695b      	ldr	r3, [r3, #20]
 800e9f6:	61bb      	str	r3, [r7, #24]
 800e9f8:	e051      	b.n	800ea9e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea02:	d126      	bne.n	800ea52 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	695b      	ldr	r3, [r3, #20]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d10e      	bne.n	800ea2a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ea0c:	6a3b      	ldr	r3, [r7, #32]
 800ea0e:	4a43      	ldr	r2, [pc, #268]	; (800eb1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d906      	bls.n	800ea22 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ea14:	6a3b      	ldr	r3, [r7, #32]
 800ea16:	4a40      	ldr	r2, [pc, #256]	; (800eb18 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ea18:	fba2 2303 	umull	r2, r3, r2, r3
 800ea1c:	0e5b      	lsrs	r3, r3, #25
 800ea1e:	61bb      	str	r3, [r7, #24]
 800ea20:	e03d      	b.n	800ea9e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	695b      	ldr	r3, [r3, #20]
 800ea26:	61bb      	str	r3, [r7, #24]
 800ea28:	e039      	b.n	800ea9e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	695b      	ldr	r3, [r3, #20]
 800ea2e:	005b      	lsls	r3, r3, #1
 800ea30:	6a3a      	ldr	r2, [r7, #32]
 800ea32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea36:	4a39      	ldr	r2, [pc, #228]	; (800eb1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d906      	bls.n	800ea4a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ea3c:	6a3b      	ldr	r3, [r7, #32]
 800ea3e:	4a36      	ldr	r2, [pc, #216]	; (800eb18 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ea40:	fba2 2303 	umull	r2, r3, r2, r3
 800ea44:	0e5b      	lsrs	r3, r3, #25
 800ea46:	61bb      	str	r3, [r7, #24]
 800ea48:	e029      	b.n	800ea9e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	695b      	ldr	r3, [r3, #20]
 800ea4e:	61bb      	str	r3, [r7, #24]
 800ea50:	e025      	b.n	800ea9e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	695b      	ldr	r3, [r3, #20]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d10e      	bne.n	800ea78 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ea5a:	6a3b      	ldr	r3, [r7, #32]
 800ea5c:	4a30      	ldr	r2, [pc, #192]	; (800eb20 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d906      	bls.n	800ea70 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ea62:	6a3b      	ldr	r3, [r7, #32]
 800ea64:	4a2c      	ldr	r2, [pc, #176]	; (800eb18 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ea66:	fba2 2303 	umull	r2, r3, r2, r3
 800ea6a:	0e1b      	lsrs	r3, r3, #24
 800ea6c:	61bb      	str	r3, [r7, #24]
 800ea6e:	e016      	b.n	800ea9e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	695b      	ldr	r3, [r3, #20]
 800ea74:	61bb      	str	r3, [r7, #24]
 800ea76:	e012      	b.n	800ea9e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	695b      	ldr	r3, [r3, #20]
 800ea7c:	005b      	lsls	r3, r3, #1
 800ea7e:	6a3a      	ldr	r2, [r7, #32]
 800ea80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea84:	4a26      	ldr	r2, [pc, #152]	; (800eb20 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d906      	bls.n	800ea98 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ea8a:	6a3b      	ldr	r3, [r7, #32]
 800ea8c:	4a22      	ldr	r2, [pc, #136]	; (800eb18 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ea8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ea92:	0e1b      	lsrs	r3, r3, #24
 800ea94:	61bb      	str	r3, [r7, #24]
 800ea96:	e002      	b.n	800ea9e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	695b      	ldr	r3, [r3, #20]
 800ea9c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681c      	ldr	r4, [r3, #0]
 800eaa2:	466a      	mov	r2, sp
 800eaa4:	f107 0314 	add.w	r3, r7, #20
 800eaa8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eaac:	e882 0003 	stmia.w	r2, {r0, r1}
 800eab0:	f107 0308 	add.w	r3, r7, #8
 800eab4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eab6:	4620      	mov	r0, r4
 800eab8:	f003 f92a 	bl	8011d10 <SDMMC_Init>
 800eabc:	e008      	b.n	800ead0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eac2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800eaca:	2301      	movs	r3, #1
 800eacc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ead8:	4618      	mov	r0, r3
 800eada:	f003 f9f7 	bl	8011ecc <SDMMC_CmdBlockLength>
 800eade:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d00c      	beq.n	800eb00 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4a0a      	ldr	r2, [pc, #40]	; (800eb14 <HAL_SD_ConfigWideBusOperation+0x214>)
 800eaec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eaf2:	69fb      	ldr	r3, [r7, #28]
 800eaf4:	431a      	orrs	r2, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2201      	movs	r2, #1
 800eb04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800eb08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	372c      	adds	r7, #44	; 0x2c
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd90      	pop	{r4, r7, pc}
 800eb14:	1fe00fff 	.word	0x1fe00fff
 800eb18:	55e63b89 	.word	0x55e63b89
 800eb1c:	02faf080 	.word	0x02faf080
 800eb20:	017d7840 	.word	0x017d7840

0800eb24 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b086      	sub	sp, #24
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800eb30:	f107 030c 	add.w	r3, r7, #12
 800eb34:	4619      	mov	r1, r3
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f000 fa40 	bl	800efbc <SD_SendStatus>
 800eb3c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d005      	beq.n	800eb50 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	431a      	orrs	r2, r3
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	0a5b      	lsrs	r3, r3, #9
 800eb54:	f003 030f 	and.w	r3, r3, #15
 800eb58:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800eb5a:	693b      	ldr	r3, [r7, #16]
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3718      	adds	r7, #24
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b090      	sub	sp, #64	; 0x40
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800eb70:	f7f4 f816 	bl	8002ba0 <HAL_GetTick>
 800eb74:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f003 f921 	bl	8011dc2 <SDMMC_GetPowerState>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d102      	bne.n	800eb8c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800eb8a:	e0b5      	b.n	800ecf8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb90:	2b03      	cmp	r3, #3
 800eb92:	d02e      	beq.n	800ebf2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f003 fb6c 	bl	8012276 <SDMMC_CmdSendCID>
 800eb9e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800eba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d001      	beq.n	800ebaa <SD_InitCard+0x46>
    {
      return errorstate;
 800eba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba8:	e0a6      	b.n	800ecf8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2100      	movs	r1, #0
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f003 f94c 	bl	8011e4e <SDMMC_GetResponse>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2104      	movs	r1, #4
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f003 f943 	bl	8011e4e <SDMMC_GetResponse>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	2108      	movs	r1, #8
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f003 f93a 	bl	8011e4e <SDMMC_GetResponse>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	210c      	movs	r1, #12
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f003 f931 	bl	8011e4e <SDMMC_GetResponse>
 800ebec:	4602      	mov	r2, r0
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf6:	2b03      	cmp	r3, #3
 800ebf8:	d01d      	beq.n	800ec36 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ebfa:	e019      	b.n	800ec30 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f107 020a 	add.w	r2, r7, #10
 800ec04:	4611      	mov	r1, r2
 800ec06:	4618      	mov	r0, r3
 800ec08:	f003 fb74 	bl	80122f4 <SDMMC_CmdSetRelAdd>
 800ec0c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ec0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d001      	beq.n	800ec18 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ec14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec16:	e06f      	b.n	800ecf8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ec18:	f7f3 ffc2 	bl	8002ba0 <HAL_GetTick>
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec20:	1ad3      	subs	r3, r2, r3
 800ec22:	f241 3287 	movw	r2, #4999	; 0x1387
 800ec26:	4293      	cmp	r3, r2
 800ec28:	d902      	bls.n	800ec30 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ec2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec2e:	e063      	b.n	800ecf8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800ec30:	897b      	ldrh	r3, [r7, #10]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d0e2      	beq.n	800ebfc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec3a:	2b03      	cmp	r3, #3
 800ec3c:	d036      	beq.n	800ecac <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ec3e:	897b      	ldrh	r3, [r7, #10]
 800ec40:	461a      	mov	r2, r3
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec4e:	041b      	lsls	r3, r3, #16
 800ec50:	4619      	mov	r1, r3
 800ec52:	4610      	mov	r0, r2
 800ec54:	f003 fb2e 	bl	80122b4 <SDMMC_CmdSendCSD>
 800ec58:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ec5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d001      	beq.n	800ec64 <SD_InitCard+0x100>
    {
      return errorstate;
 800ec60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec62:	e049      	b.n	800ecf8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	2100      	movs	r1, #0
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f003 f8ef 	bl	8011e4e <SDMMC_GetResponse>
 800ec70:	4602      	mov	r2, r0
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	2104      	movs	r1, #4
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f003 f8e6 	bl	8011e4e <SDMMC_GetResponse>
 800ec82:	4602      	mov	r2, r0
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	2108      	movs	r1, #8
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f003 f8dd 	bl	8011e4e <SDMMC_GetResponse>
 800ec94:	4602      	mov	r2, r0
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	210c      	movs	r1, #12
 800eca0:	4618      	mov	r0, r3
 800eca2:	f003 f8d4 	bl	8011e4e <SDMMC_GetResponse>
 800eca6:	4602      	mov	r2, r0
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	2104      	movs	r1, #4
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f003 f8cb 	bl	8011e4e <SDMMC_GetResponse>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	0d1a      	lsrs	r2, r3, #20
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ecc0:	f107 030c 	add.w	r3, r7, #12
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7ff fb8c 	bl	800e3e4 <HAL_SD_GetCardCSD>
 800eccc:	4603      	mov	r3, r0
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d002      	beq.n	800ecd8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ecd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ecd6:	e00f      	b.n	800ecf8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ece0:	041b      	lsls	r3, r3, #16
 800ece2:	4619      	mov	r1, r3
 800ece4:	4610      	mov	r0, r2
 800ece6:	f003 f9dd 	bl	80120a4 <SDMMC_CmdSelDesel>
 800ecea:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ecec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d001      	beq.n	800ecf6 <SD_InitCard+0x192>
  {
    return errorstate;
 800ecf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf4:	e000      	b.n	800ecf8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ecf6:	2300      	movs	r3, #0
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3740      	adds	r7, #64	; 0x40
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b086      	sub	sp, #24
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ed10:	2300      	movs	r3, #0
 800ed12:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f003 f9e6 	bl	80120ea <SDMMC_CmdGoIdleState>
 800ed1e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d001      	beq.n	800ed2a <SD_PowerON+0x2a>
  {
    return errorstate;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	e072      	b.n	800ee10 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f003 f9f9 	bl	8012126 <SDMMC_CmdOperCond>
 800ed34:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed3c:	d10d      	bne.n	800ed5a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f003 f9ce 	bl	80120ea <SDMMC_CmdGoIdleState>
 800ed4e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d004      	beq.n	800ed60 <SD_PowerON+0x60>
    {
      return errorstate;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	e05a      	b.n	800ee10 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d137      	bne.n	800edd8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	2100      	movs	r1, #0
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f003 f9f9 	bl	8012166 <SDMMC_CmdAppCommand>
 800ed74:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d02d      	beq.n	800edd8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ed80:	e046      	b.n	800ee10 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	2100      	movs	r1, #0
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f003 f9ec 	bl	8012166 <SDMMC_CmdAppCommand>
 800ed8e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d001      	beq.n	800ed9a <SD_PowerON+0x9a>
    {
      return errorstate;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	e03a      	b.n	800ee10 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	491e      	ldr	r1, [pc, #120]	; (800ee18 <SD_PowerON+0x118>)
 800eda0:	4618      	mov	r0, r3
 800eda2:	f003 fa03 	bl	80121ac <SDMMC_CmdAppOperCommand>
 800eda6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d002      	beq.n	800edb4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800edae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800edb2:	e02d      	b.n	800ee10 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	2100      	movs	r1, #0
 800edba:	4618      	mov	r0, r3
 800edbc:	f003 f847 	bl	8011e4e <SDMMC_GetResponse>
 800edc0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	0fdb      	lsrs	r3, r3, #31
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d101      	bne.n	800edce <SD_PowerON+0xce>
 800edca:	2301      	movs	r3, #1
 800edcc:	e000      	b.n	800edd0 <SD_PowerON+0xd0>
 800edce:	2300      	movs	r3, #0
 800edd0:	613b      	str	r3, [r7, #16]

    count++;
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	3301      	adds	r3, #1
 800edd6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800edde:	4293      	cmp	r3, r2
 800ede0:	d802      	bhi.n	800ede8 <SD_PowerON+0xe8>
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d0cc      	beq.n	800ed82 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800edee:	4293      	cmp	r3, r2
 800edf0:	d902      	bls.n	800edf8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800edf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800edf6:	e00b      	b.n	800ee10 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2200      	movs	r2, #0
 800edfc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d002      	beq.n	800ee0e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ee0e:	2300      	movs	r3, #0
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3718      	adds	r7, #24
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	c1100000 	.word	0xc1100000

0800ee1c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b08c      	sub	sp, #48	; 0x30
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ee26:	f7f3 febb 	bl	8002ba0 <HAL_GetTick>
 800ee2a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2100      	movs	r1, #0
 800ee36:	4618      	mov	r0, r3
 800ee38:	f003 f809 	bl	8011e4e <SDMMC_GetResponse>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee46:	d102      	bne.n	800ee4e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ee48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ee4c:	e0b0      	b.n	800efb0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2140      	movs	r1, #64	; 0x40
 800ee54:	4618      	mov	r0, r3
 800ee56:	f003 f839 	bl	8011ecc <SDMMC_CmdBlockLength>
 800ee5a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ee5c:	6a3b      	ldr	r3, [r7, #32]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d005      	beq.n	800ee6e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ee6a:	6a3b      	ldr	r3, [r7, #32]
 800ee6c:	e0a0      	b.n	800efb0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee76:	041b      	lsls	r3, r3, #16
 800ee78:	4619      	mov	r1, r3
 800ee7a:	4610      	mov	r0, r2
 800ee7c:	f003 f973 	bl	8012166 <SDMMC_CmdAppCommand>
 800ee80:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ee82:	6a3b      	ldr	r3, [r7, #32]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d005      	beq.n	800ee94 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ee90:	6a3b      	ldr	r3, [r7, #32]
 800ee92:	e08d      	b.n	800efb0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ee94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee98:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ee9a:	2340      	movs	r3, #64	; 0x40
 800ee9c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ee9e:	2360      	movs	r3, #96	; 0x60
 800eea0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800eea2:	2302      	movs	r3, #2
 800eea4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800eea6:	2300      	movs	r3, #0
 800eea8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f107 0208 	add.w	r2, r7, #8
 800eeb6:	4611      	mov	r1, r2
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f002 ffdb 	bl	8011e74 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4618      	mov	r0, r3
 800eec4:	f003 fa5b 	bl	801237e <SDMMC_CmdStatusRegister>
 800eec8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eeca:	6a3b      	ldr	r3, [r7, #32]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d02b      	beq.n	800ef28 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800eed8:	6a3b      	ldr	r3, [r7, #32]
 800eeda:	e069      	b.n	800efb0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d013      	beq.n	800ef12 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800eeea:	2300      	movs	r3, #0
 800eeec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eeee:	e00d      	b.n	800ef0c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4618      	mov	r0, r3
 800eef6:	f002 ff35 	bl	8011d64 <SDMMC_ReadFIFO>
 800eefa:	4602      	mov	r2, r0
 800eefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefe:	601a      	str	r2, [r3, #0]
        pData++;
 800ef00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef02:	3304      	adds	r3, #4
 800ef04:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800ef06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef08:	3301      	adds	r3, #1
 800ef0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0e:	2b07      	cmp	r3, #7
 800ef10:	d9ee      	bls.n	800eef0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ef12:	f7f3 fe45 	bl	8002ba0 <HAL_GetTick>
 800ef16:	4602      	mov	r2, r0
 800ef18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1a:	1ad3      	subs	r3, r2, r3
 800ef1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef20:	d102      	bne.n	800ef28 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ef22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef26:	e043      	b.n	800efb0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef2e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d0d2      	beq.n	800eedc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef3c:	f003 0308 	and.w	r3, r3, #8
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d001      	beq.n	800ef48 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ef44:	2308      	movs	r3, #8
 800ef46:	e033      	b.n	800efb0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef4e:	f003 0302 	and.w	r3, r3, #2
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d001      	beq.n	800ef5a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ef56:	2302      	movs	r3, #2
 800ef58:	e02a      	b.n	800efb0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef60:	f003 0320 	and.w	r3, r3, #32
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d017      	beq.n	800ef98 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ef68:	2320      	movs	r3, #32
 800ef6a:	e021      	b.n	800efb0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4618      	mov	r0, r3
 800ef72:	f002 fef7 	bl	8011d64 <SDMMC_ReadFIFO>
 800ef76:	4602      	mov	r2, r0
 800ef78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7a:	601a      	str	r2, [r3, #0]
    pData++;
 800ef7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7e:	3304      	adds	r3, #4
 800ef80:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ef82:	f7f3 fe0d 	bl	8002ba0 <HAL_GetTick>
 800ef86:	4602      	mov	r2, r0
 800ef88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8a:	1ad3      	subs	r3, r2, r3
 800ef8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef90:	d102      	bne.n	800ef98 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ef92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef96:	e00b      	b.n	800efb0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d1e2      	bne.n	800ef6c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4a03      	ldr	r2, [pc, #12]	; (800efb8 <SD_SendSDStatus+0x19c>)
 800efac:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800efae:	2300      	movs	r3, #0
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3730      	adds	r7, #48	; 0x30
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	18000f3a 	.word	0x18000f3a

0800efbc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d102      	bne.n	800efd2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800efcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800efd0:	e018      	b.n	800f004 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efda:	041b      	lsls	r3, r3, #16
 800efdc:	4619      	mov	r1, r3
 800efde:	4610      	mov	r0, r2
 800efe0:	f003 f9aa 	bl	8012338 <SDMMC_CmdSendStatus>
 800efe4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d001      	beq.n	800eff0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	e009      	b.n	800f004 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	2100      	movs	r1, #0
 800eff6:	4618      	mov	r0, r3
 800eff8:	f002 ff29 	bl	8011e4e <SDMMC_GetResponse>
 800effc:	4602      	mov	r2, r0
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	3710      	adds	r7, #16
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}

0800f00c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f014:	2300      	movs	r3, #0
 800f016:	60fb      	str	r3, [r7, #12]
 800f018:	2300      	movs	r3, #0
 800f01a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	2100      	movs	r1, #0
 800f022:	4618      	mov	r0, r3
 800f024:	f002 ff13 	bl	8011e4e <SDMMC_GetResponse>
 800f028:	4603      	mov	r3, r0
 800f02a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f02e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f032:	d102      	bne.n	800f03a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f034:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f038:	e02f      	b.n	800f09a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f03a:	f107 030c 	add.w	r3, r7, #12
 800f03e:	4619      	mov	r1, r3
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f000 f879 	bl	800f138 <SD_FindSCR>
 800f046:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d001      	beq.n	800f052 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	e023      	b.n	800f09a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d01c      	beq.n	800f096 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f064:	041b      	lsls	r3, r3, #16
 800f066:	4619      	mov	r1, r3
 800f068:	4610      	mov	r0, r2
 800f06a:	f003 f87c 	bl	8012166 <SDMMC_CmdAppCommand>
 800f06e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d001      	beq.n	800f07a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	e00f      	b.n	800f09a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2102      	movs	r1, #2
 800f080:	4618      	mov	r0, r3
 800f082:	f003 f8b3 	bl	80121ec <SDMMC_CmdBusWidth>
 800f086:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d001      	beq.n	800f092 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	e003      	b.n	800f09a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f092:	2300      	movs	r3, #0
 800f094:	e001      	b.n	800f09a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f096:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3718      	adds	r7, #24
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b086      	sub	sp, #24
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	60fb      	str	r3, [r7, #12]
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2100      	movs	r1, #0
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f002 fec8 	bl	8011e4e <SDMMC_GetResponse>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f0c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f0c8:	d102      	bne.n	800f0d0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f0ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f0ce:	e02f      	b.n	800f130 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f0d0:	f107 030c 	add.w	r3, r7, #12
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 f82e 	bl	800f138 <SD_FindSCR>
 800f0dc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d001      	beq.n	800f0e8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	e023      	b.n	800f130 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d01c      	beq.n	800f12c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0fa:	041b      	lsls	r3, r3, #16
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	4610      	mov	r0, r2
 800f100:	f003 f831 	bl	8012166 <SDMMC_CmdAppCommand>
 800f104:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d001      	beq.n	800f110 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	e00f      	b.n	800f130 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	2100      	movs	r1, #0
 800f116:	4618      	mov	r0, r3
 800f118:	f003 f868 	bl	80121ec <SDMMC_CmdBusWidth>
 800f11c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d001      	beq.n	800f128 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	e003      	b.n	800f130 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f128:	2300      	movs	r3, #0
 800f12a:	e001      	b.n	800f130 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f12c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f130:	4618      	mov	r0, r3
 800f132:	3718      	adds	r7, #24
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b08e      	sub	sp, #56	; 0x38
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f142:	f7f3 fd2d 	bl	8002ba0 <HAL_GetTick>
 800f146:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f148:	2300      	movs	r3, #0
 800f14a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f14c:	2300      	movs	r3, #0
 800f14e:	60bb      	str	r3, [r7, #8]
 800f150:	2300      	movs	r3, #0
 800f152:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2108      	movs	r1, #8
 800f15e:	4618      	mov	r0, r3
 800f160:	f002 feb4 	bl	8011ecc <SDMMC_CmdBlockLength>
 800f164:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d001      	beq.n	800f170 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16e:	e0ad      	b.n	800f2cc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f178:	041b      	lsls	r3, r3, #16
 800f17a:	4619      	mov	r1, r3
 800f17c:	4610      	mov	r0, r2
 800f17e:	f002 fff2 	bl	8012166 <SDMMC_CmdAppCommand>
 800f182:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f186:	2b00      	cmp	r3, #0
 800f188:	d001      	beq.n	800f18e <SD_FindSCR+0x56>
  {
    return errorstate;
 800f18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f18c:	e09e      	b.n	800f2cc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f18e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f192:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f194:	2308      	movs	r3, #8
 800f196:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f198:	2330      	movs	r3, #48	; 0x30
 800f19a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f19c:	2302      	movs	r3, #2
 800f19e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f107 0210 	add.w	r2, r7, #16
 800f1b0:	4611      	mov	r1, r2
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f002 fe5e 	bl	8011e74 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f003 f838 	bl	8012232 <SDMMC_CmdSendSCR>
 800f1c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d027      	beq.n	800f21a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1cc:	e07e      	b.n	800f2cc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d113      	bne.n	800f204 <SD_FindSCR+0xcc>
 800f1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d110      	bne.n	800f204 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f002 fdbc 	bl	8011d64 <SDMMC_ReadFIFO>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f002 fdb5 	bl	8011d64 <SDMMC_ReadFIFO>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	60fb      	str	r3, [r7, #12]
      index++;
 800f1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f200:	3301      	adds	r3, #1
 800f202:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f204:	f7f3 fccc 	bl	8002ba0 <HAL_GetTick>
 800f208:	4602      	mov	r2, r0
 800f20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20c:	1ad3      	subs	r3, r2, r3
 800f20e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f212:	d102      	bne.n	800f21a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f214:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f218:	e058      	b.n	800f2cc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f220:	f240 532a 	movw	r3, #1322	; 0x52a
 800f224:	4013      	ands	r3, r2
 800f226:	2b00      	cmp	r3, #0
 800f228:	d0d1      	beq.n	800f1ce <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f230:	f003 0308 	and.w	r3, r3, #8
 800f234:	2b00      	cmp	r3, #0
 800f236:	d005      	beq.n	800f244 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	2208      	movs	r2, #8
 800f23e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f240:	2308      	movs	r3, #8
 800f242:	e043      	b.n	800f2cc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f24a:	f003 0302 	and.w	r3, r3, #2
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d005      	beq.n	800f25e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	2202      	movs	r2, #2
 800f258:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f25a:	2302      	movs	r3, #2
 800f25c:	e036      	b.n	800f2cc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f264:	f003 0320 	and.w	r3, r3, #32
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d005      	beq.n	800f278 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2220      	movs	r2, #32
 800f272:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f274:	2320      	movs	r3, #32
 800f276:	e029      	b.n	800f2cc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4a15      	ldr	r2, [pc, #84]	; (800f2d4 <SD_FindSCR+0x19c>)
 800f27e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	061a      	lsls	r2, r3, #24
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	021b      	lsls	r3, r3, #8
 800f288:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f28c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	0a1b      	lsrs	r3, r3, #8
 800f292:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f296:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	0e1b      	lsrs	r3, r3, #24
 800f29c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a0:	601a      	str	r2, [r3, #0]
    scr++;
 800f2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a4:	3304      	adds	r3, #4
 800f2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	061a      	lsls	r2, r3, #24
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	021b      	lsls	r3, r3, #8
 800f2b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f2b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	0a1b      	lsrs	r3, r3, #8
 800f2ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f2be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	0e1b      	lsrs	r3, r3, #24
 800f2c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f2ca:	2300      	movs	r3, #0
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3738      	adds	r7, #56	; 0x38
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	18000f3a 	.word	0x18000f3a

0800f2d8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b086      	sub	sp, #24
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ea:	2b1f      	cmp	r3, #31
 800f2ec:	d936      	bls.n	800f35c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	617b      	str	r3, [r7, #20]
 800f2f2:	e027      	b.n	800f344 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f002 fd33 	bl	8011d64 <SDMMC_ReadFIFO>
 800f2fe:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	b2da      	uxtb	r2, r3
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	3301      	adds	r3, #1
 800f30c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	0a1b      	lsrs	r3, r3, #8
 800f312:	b2da      	uxtb	r2, r3
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	3301      	adds	r3, #1
 800f31c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	0c1b      	lsrs	r3, r3, #16
 800f322:	b2da      	uxtb	r2, r3
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	3301      	adds	r3, #1
 800f32c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	0e1b      	lsrs	r3, r3, #24
 800f332:	b2da      	uxtb	r2, r3
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	3301      	adds	r3, #1
 800f33c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	3301      	adds	r3, #1
 800f342:	617b      	str	r3, [r7, #20]
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	2b07      	cmp	r3, #7
 800f348:	d9d4      	bls.n	800f2f4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	693a      	ldr	r2, [r7, #16]
 800f34e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f354:	f1a3 0220 	sub.w	r2, r3, #32
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800f35c:	bf00      	nop
 800f35e:	3718      	adds	r7, #24
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	69db      	ldr	r3, [r3, #28]
 800f370:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6a1b      	ldr	r3, [r3, #32]
 800f376:	2b1f      	cmp	r3, #31
 800f378:	d93a      	bls.n	800f3f0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800f37a:	2300      	movs	r3, #0
 800f37c:	617b      	str	r3, [r7, #20]
 800f37e:	e02b      	b.n	800f3d8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	3301      	adds	r3, #1
 800f38a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	021a      	lsls	r2, r3, #8
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	4313      	orrs	r3, r2
 800f396:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	3301      	adds	r3, #1
 800f39c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	041a      	lsls	r2, r3, #16
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	4313      	orrs	r3, r2
 800f3a8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	061a      	lsls	r2, r3, #24
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f107 020c 	add.w	r2, r7, #12
 800f3ca:	4611      	mov	r1, r2
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f002 fcd6 	bl	8011d7e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	617b      	str	r3, [r7, #20]
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	2b07      	cmp	r3, #7
 800f3dc:	d9d0      	bls.n	800f380 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	693a      	ldr	r2, [r7, #16]
 800f3e2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6a1b      	ldr	r3, [r3, #32]
 800f3e8:	f1a3 0220 	sub.w	r2, r3, #32
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	621a      	str	r2, [r3, #32]
  }
}
 800f3f0:	bf00      	nop
 800f3f2:	3718      	adds	r7, #24
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b083      	sub	sp, #12
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f400:	bf00      	nop
 800f402:	370c      	adds	r7, #12
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr

0800f40c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f414:	bf00      	nop
 800f416:	370c      	adds	r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr

0800f420 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f420:	b480      	push	{r7}
 800f422:	b083      	sub	sp, #12
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f428:	bf00      	nop
 800f42a:	370c      	adds	r7, #12
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr

0800f434 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f43c:	bf00      	nop
 800f43e:	370c      	adds	r7, #12
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr

0800f448 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d101      	bne.n	800f45c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800f458:	2301      	movs	r3, #1
 800f45a:	e02b      	b.n	800f4b4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f462:	b2db      	uxtb	r3, r3
 800f464:	2b00      	cmp	r3, #0
 800f466:	d106      	bne.n	800f476 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2200      	movs	r2, #0
 800f46c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f7f1 fd65 	bl	8000f40 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2202      	movs	r2, #2
 800f47a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	3304      	adds	r3, #4
 800f486:	4619      	mov	r1, r3
 800f488:	4610      	mov	r0, r2
 800f48a:	f002 fb7b 	bl	8011b84 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6818      	ldr	r0, [r3, #0]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	461a      	mov	r2, r3
 800f498:	6839      	ldr	r1, [r7, #0]
 800f49a:	f002 fbcf 	bl	8011c3c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800f49e:	4b07      	ldr	r3, [pc, #28]	; (800f4bc <HAL_SDRAM_Init+0x74>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	4a06      	ldr	r2, [pc, #24]	; (800f4bc <HAL_SDRAM_Init+0x74>)
 800f4a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f4a8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f4b2:	2300      	movs	r3, #0
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3708      	adds	r7, #8
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	52004000 	.word	0x52004000

0800f4c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d101      	bne.n	800f4d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	e0f1      	b.n	800f6b6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4a78      	ldr	r2, [pc, #480]	; (800f6c0 <HAL_SPI_Init+0x200>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d00f      	beq.n	800f502 <HAL_SPI_Init+0x42>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	4a77      	ldr	r2, [pc, #476]	; (800f6c4 <HAL_SPI_Init+0x204>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d00a      	beq.n	800f502 <HAL_SPI_Init+0x42>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4a75      	ldr	r2, [pc, #468]	; (800f6c8 <HAL_SPI_Init+0x208>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d005      	beq.n	800f502 <HAL_SPI_Init+0x42>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	2b0f      	cmp	r3, #15
 800f4fc:	d901      	bls.n	800f502 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f4fe:	2301      	movs	r3, #1
 800f500:	e0d9      	b.n	800f6b6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f000 f8e2 	bl	800f6cc <SPI_GetPacketSize>
 800f508:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	4a6c      	ldr	r2, [pc, #432]	; (800f6c0 <HAL_SPI_Init+0x200>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d00c      	beq.n	800f52e <HAL_SPI_Init+0x6e>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	4a6a      	ldr	r2, [pc, #424]	; (800f6c4 <HAL_SPI_Init+0x204>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d007      	beq.n	800f52e <HAL_SPI_Init+0x6e>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	4a69      	ldr	r2, [pc, #420]	; (800f6c8 <HAL_SPI_Init+0x208>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d002      	beq.n	800f52e <HAL_SPI_Init+0x6e>
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2b08      	cmp	r3, #8
 800f52c:	d811      	bhi.n	800f552 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f532:	4a63      	ldr	r2, [pc, #396]	; (800f6c0 <HAL_SPI_Init+0x200>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d009      	beq.n	800f54c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	4a61      	ldr	r2, [pc, #388]	; (800f6c4 <HAL_SPI_Init+0x204>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d004      	beq.n	800f54c <HAL_SPI_Init+0x8c>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4a60      	ldr	r2, [pc, #384]	; (800f6c8 <HAL_SPI_Init+0x208>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d104      	bne.n	800f556 <HAL_SPI_Init+0x96>
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2b10      	cmp	r3, #16
 800f550:	d901      	bls.n	800f556 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f552:	2301      	movs	r3, #1
 800f554:	e0af      	b.n	800f6b6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d106      	bne.n	800f570 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2200      	movs	r2, #0
 800f566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f7f2 feae 	bl	80022cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2202      	movs	r2, #2
 800f574:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	681a      	ldr	r2, [r3, #0]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f022 0201 	bic.w	r2, r2, #1
 800f586:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	689b      	ldr	r3, [r3, #8]
 800f58e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f592:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	699b      	ldr	r3, [r3, #24]
 800f598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f59c:	d119      	bne.n	800f5d2 <HAL_SPI_Init+0x112>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	685b      	ldr	r3, [r3, #4]
 800f5a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f5a6:	d103      	bne.n	800f5b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d008      	beq.n	800f5c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d10c      	bne.n	800f5d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f5bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f5c0:	d107      	bne.n	800f5d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	681a      	ldr	r2, [r3, #0]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f5d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	69da      	ldr	r2, [r3, #28]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5da:	431a      	orrs	r2, r3
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	431a      	orrs	r2, r3
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5e4:	ea42 0103 	orr.w	r1, r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	68da      	ldr	r2, [r3, #12]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	430a      	orrs	r2, r1
 800f5f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5fc:	431a      	orrs	r2, r3
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f602:	431a      	orrs	r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	699b      	ldr	r3, [r3, #24]
 800f608:	431a      	orrs	r2, r3
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	691b      	ldr	r3, [r3, #16]
 800f60e:	431a      	orrs	r2, r3
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	695b      	ldr	r3, [r3, #20]
 800f614:	431a      	orrs	r2, r3
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6a1b      	ldr	r3, [r3, #32]
 800f61a:	431a      	orrs	r2, r3
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	431a      	orrs	r2, r3
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f626:	431a      	orrs	r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	689b      	ldr	r3, [r3, #8]
 800f62c:	431a      	orrs	r2, r3
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f632:	ea42 0103 	orr.w	r1, r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	430a      	orrs	r2, r1
 800f640:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d113      	bne.n	800f672 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	689b      	ldr	r3, [r3, #8]
 800f650:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f65c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	689b      	ldr	r3, [r3, #8]
 800f664:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f670:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f022 0201 	bic.w	r2, r2, #1
 800f680:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d00a      	beq.n	800f6a4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	430a      	orrs	r2, r1
 800f6a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3710      	adds	r7, #16
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	40013000 	.word	0x40013000
 800f6c4:	40003800 	.word	0x40003800
 800f6c8:	40003c00 	.word	0x40003c00

0800f6cc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b085      	sub	sp, #20
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6d8:	095b      	lsrs	r3, r3, #5
 800f6da:	3301      	adds	r3, #1
 800f6dc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	68db      	ldr	r3, [r3, #12]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	3307      	adds	r3, #7
 800f6ea:	08db      	lsrs	r3, r3, #3
 800f6ec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	68fa      	ldr	r2, [r7, #12]
 800f6f2:	fb02 f303 	mul.w	r3, r2, r3
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3714      	adds	r7, #20
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f700:	4770      	bx	lr

0800f702 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800f702:	b580      	push	{r7, lr}
 800f704:	b082      	sub	sp, #8
 800f706:	af00      	add	r7, sp, #0
 800f708:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d101      	bne.n	800f714 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800f710:	2301      	movs	r3, #1
 800f712:	e049      	b.n	800f7a8 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d106      	bne.n	800f72e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2200      	movs	r2, #0
 800f724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f7f3 f839 	bl	80027a0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2202      	movs	r2, #2
 800f732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	3304      	adds	r3, #4
 800f73e:	4619      	mov	r1, r3
 800f740:	4610      	mov	r0, r2
 800f742:	f000 f8af 	bl	800f8a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2201      	movs	r2, #1
 800f74a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2201      	movs	r2, #1
 800f752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2201      	movs	r2, #1
 800f75a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2201      	movs	r2, #1
 800f762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2201      	movs	r2, #1
 800f76a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2201      	movs	r2, #1
 800f772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2201      	movs	r2, #1
 800f77a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2201      	movs	r2, #1
 800f782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2201      	movs	r2, #1
 800f78a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2201      	movs	r2, #1
 800f792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2201      	movs	r2, #1
 800f79a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f7a6:	2300      	movs	r3, #0
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3708      	adds	r7, #8
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b086      	sub	sp, #24
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7c6:	2b01      	cmp	r3, #1
 800f7c8:	d101      	bne.n	800f7ce <HAL_TIM_OC_ConfigChannel+0x1e>
 800f7ca:	2302      	movs	r3, #2
 800f7cc:	e066      	b.n	800f89c <HAL_TIM_OC_ConfigChannel+0xec>
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2201      	movs	r2, #1
 800f7d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2b14      	cmp	r3, #20
 800f7da:	d857      	bhi.n	800f88c <HAL_TIM_OC_ConfigChannel+0xdc>
 800f7dc:	a201      	add	r2, pc, #4	; (adr r2, 800f7e4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800f7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7e2:	bf00      	nop
 800f7e4:	0800f839 	.word	0x0800f839
 800f7e8:	0800f88d 	.word	0x0800f88d
 800f7ec:	0800f88d 	.word	0x0800f88d
 800f7f0:	0800f88d 	.word	0x0800f88d
 800f7f4:	0800f847 	.word	0x0800f847
 800f7f8:	0800f88d 	.word	0x0800f88d
 800f7fc:	0800f88d 	.word	0x0800f88d
 800f800:	0800f88d 	.word	0x0800f88d
 800f804:	0800f855 	.word	0x0800f855
 800f808:	0800f88d 	.word	0x0800f88d
 800f80c:	0800f88d 	.word	0x0800f88d
 800f810:	0800f88d 	.word	0x0800f88d
 800f814:	0800f863 	.word	0x0800f863
 800f818:	0800f88d 	.word	0x0800f88d
 800f81c:	0800f88d 	.word	0x0800f88d
 800f820:	0800f88d 	.word	0x0800f88d
 800f824:	0800f871 	.word	0x0800f871
 800f828:	0800f88d 	.word	0x0800f88d
 800f82c:	0800f88d 	.word	0x0800f88d
 800f830:	0800f88d 	.word	0x0800f88d
 800f834:	0800f87f 	.word	0x0800f87f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	68b9      	ldr	r1, [r7, #8]
 800f83e:	4618      	mov	r0, r3
 800f840:	f000 f8ca 	bl	800f9d8 <TIM_OC1_SetConfig>
      break;
 800f844:	e025      	b.n	800f892 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	68b9      	ldr	r1, [r7, #8]
 800f84c:	4618      	mov	r0, r3
 800f84e:	f000 f953 	bl	800faf8 <TIM_OC2_SetConfig>
      break;
 800f852:	e01e      	b.n	800f892 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	68b9      	ldr	r1, [r7, #8]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f000 f9d6 	bl	800fc0c <TIM_OC3_SetConfig>
      break;
 800f860:	e017      	b.n	800f892 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	68b9      	ldr	r1, [r7, #8]
 800f868:	4618      	mov	r0, r3
 800f86a:	f000 fa57 	bl	800fd1c <TIM_OC4_SetConfig>
      break;
 800f86e:	e010      	b.n	800f892 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	68b9      	ldr	r1, [r7, #8]
 800f876:	4618      	mov	r0, r3
 800f878:	f000 faba 	bl	800fdf0 <TIM_OC5_SetConfig>
      break;
 800f87c:	e009      	b.n	800f892 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	68b9      	ldr	r1, [r7, #8]
 800f884:	4618      	mov	r0, r3
 800f886:	f000 fb17 	bl	800feb8 <TIM_OC6_SetConfig>
      break;
 800f88a:	e002      	b.n	800f892 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800f88c:	2301      	movs	r3, #1
 800f88e:	75fb      	strb	r3, [r7, #23]
      break;
 800f890:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2200      	movs	r2, #0
 800f896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f89a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f89c:	4618      	mov	r0, r3
 800f89e:	3718      	adds	r7, #24
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b085      	sub	sp, #20
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	4a40      	ldr	r2, [pc, #256]	; (800f9b8 <TIM_Base_SetConfig+0x114>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d013      	beq.n	800f8e4 <TIM_Base_SetConfig+0x40>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8c2:	d00f      	beq.n	800f8e4 <TIM_Base_SetConfig+0x40>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4a3d      	ldr	r2, [pc, #244]	; (800f9bc <TIM_Base_SetConfig+0x118>)
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d00b      	beq.n	800f8e4 <TIM_Base_SetConfig+0x40>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	4a3c      	ldr	r2, [pc, #240]	; (800f9c0 <TIM_Base_SetConfig+0x11c>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d007      	beq.n	800f8e4 <TIM_Base_SetConfig+0x40>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	4a3b      	ldr	r2, [pc, #236]	; (800f9c4 <TIM_Base_SetConfig+0x120>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d003      	beq.n	800f8e4 <TIM_Base_SetConfig+0x40>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	4a3a      	ldr	r2, [pc, #232]	; (800f9c8 <TIM_Base_SetConfig+0x124>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d108      	bne.n	800f8f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	68fa      	ldr	r2, [r7, #12]
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4a2f      	ldr	r2, [pc, #188]	; (800f9b8 <TIM_Base_SetConfig+0x114>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d01f      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f904:	d01b      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4a2c      	ldr	r2, [pc, #176]	; (800f9bc <TIM_Base_SetConfig+0x118>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d017      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4a2b      	ldr	r2, [pc, #172]	; (800f9c0 <TIM_Base_SetConfig+0x11c>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d013      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4a2a      	ldr	r2, [pc, #168]	; (800f9c4 <TIM_Base_SetConfig+0x120>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d00f      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4a29      	ldr	r2, [pc, #164]	; (800f9c8 <TIM_Base_SetConfig+0x124>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d00b      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a28      	ldr	r2, [pc, #160]	; (800f9cc <TIM_Base_SetConfig+0x128>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d007      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4a27      	ldr	r2, [pc, #156]	; (800f9d0 <TIM_Base_SetConfig+0x12c>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d003      	beq.n	800f93e <TIM_Base_SetConfig+0x9a>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4a26      	ldr	r2, [pc, #152]	; (800f9d4 <TIM_Base_SetConfig+0x130>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d108      	bne.n	800f950 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	68fa      	ldr	r2, [r7, #12]
 800f94c:	4313      	orrs	r3, r2
 800f94e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	695b      	ldr	r3, [r3, #20]
 800f95a:	4313      	orrs	r3, r2
 800f95c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	68fa      	ldr	r2, [r7, #12]
 800f962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	689a      	ldr	r2, [r3, #8]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	681a      	ldr	r2, [r3, #0]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	4a10      	ldr	r2, [pc, #64]	; (800f9b8 <TIM_Base_SetConfig+0x114>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d00f      	beq.n	800f99c <TIM_Base_SetConfig+0xf8>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	4a12      	ldr	r2, [pc, #72]	; (800f9c8 <TIM_Base_SetConfig+0x124>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d00b      	beq.n	800f99c <TIM_Base_SetConfig+0xf8>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	4a11      	ldr	r2, [pc, #68]	; (800f9cc <TIM_Base_SetConfig+0x128>)
 800f988:	4293      	cmp	r3, r2
 800f98a:	d007      	beq.n	800f99c <TIM_Base_SetConfig+0xf8>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	4a10      	ldr	r2, [pc, #64]	; (800f9d0 <TIM_Base_SetConfig+0x12c>)
 800f990:	4293      	cmp	r3, r2
 800f992:	d003      	beq.n	800f99c <TIM_Base_SetConfig+0xf8>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	4a0f      	ldr	r2, [pc, #60]	; (800f9d4 <TIM_Base_SetConfig+0x130>)
 800f998:	4293      	cmp	r3, r2
 800f99a:	d103      	bne.n	800f9a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	691a      	ldr	r2, [r3, #16]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2201      	movs	r2, #1
 800f9a8:	615a      	str	r2, [r3, #20]
}
 800f9aa:	bf00      	nop
 800f9ac:	3714      	adds	r7, #20
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr
 800f9b6:	bf00      	nop
 800f9b8:	40010000 	.word	0x40010000
 800f9bc:	40000400 	.word	0x40000400
 800f9c0:	40000800 	.word	0x40000800
 800f9c4:	40000c00 	.word	0x40000c00
 800f9c8:	40010400 	.word	0x40010400
 800f9cc:	40014000 	.word	0x40014000
 800f9d0:	40014400 	.word	0x40014400
 800f9d4:	40014800 	.word	0x40014800

0800f9d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b087      	sub	sp, #28
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6a1b      	ldr	r3, [r3, #32]
 800f9e6:	f023 0201 	bic.w	r2, r3, #1
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a1b      	ldr	r3, [r3, #32]
 800f9f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	699b      	ldr	r3, [r3, #24]
 800f9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fa00:	68fa      	ldr	r2, [r7, #12]
 800fa02:	4b37      	ldr	r3, [pc, #220]	; (800fae0 <TIM_OC1_SetConfig+0x108>)
 800fa04:	4013      	ands	r3, r2
 800fa06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f023 0303 	bic.w	r3, r3, #3
 800fa0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	68fa      	ldr	r2, [r7, #12]
 800fa16:	4313      	orrs	r3, r2
 800fa18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	f023 0302 	bic.w	r3, r3, #2
 800fa20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	689b      	ldr	r3, [r3, #8]
 800fa26:	697a      	ldr	r2, [r7, #20]
 800fa28:	4313      	orrs	r3, r2
 800fa2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4a2d      	ldr	r2, [pc, #180]	; (800fae4 <TIM_OC1_SetConfig+0x10c>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d00f      	beq.n	800fa54 <TIM_OC1_SetConfig+0x7c>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	4a2c      	ldr	r2, [pc, #176]	; (800fae8 <TIM_OC1_SetConfig+0x110>)
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	d00b      	beq.n	800fa54 <TIM_OC1_SetConfig+0x7c>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	4a2b      	ldr	r2, [pc, #172]	; (800faec <TIM_OC1_SetConfig+0x114>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d007      	beq.n	800fa54 <TIM_OC1_SetConfig+0x7c>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	4a2a      	ldr	r2, [pc, #168]	; (800faf0 <TIM_OC1_SetConfig+0x118>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d003      	beq.n	800fa54 <TIM_OC1_SetConfig+0x7c>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	4a29      	ldr	r2, [pc, #164]	; (800faf4 <TIM_OC1_SetConfig+0x11c>)
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d10c      	bne.n	800fa6e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	f023 0308 	bic.w	r3, r3, #8
 800fa5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	697a      	ldr	r2, [r7, #20]
 800fa62:	4313      	orrs	r3, r2
 800fa64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	f023 0304 	bic.w	r3, r3, #4
 800fa6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4a1c      	ldr	r2, [pc, #112]	; (800fae4 <TIM_OC1_SetConfig+0x10c>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d00f      	beq.n	800fa96 <TIM_OC1_SetConfig+0xbe>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	4a1b      	ldr	r2, [pc, #108]	; (800fae8 <TIM_OC1_SetConfig+0x110>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d00b      	beq.n	800fa96 <TIM_OC1_SetConfig+0xbe>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4a1a      	ldr	r2, [pc, #104]	; (800faec <TIM_OC1_SetConfig+0x114>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d007      	beq.n	800fa96 <TIM_OC1_SetConfig+0xbe>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4a19      	ldr	r2, [pc, #100]	; (800faf0 <TIM_OC1_SetConfig+0x118>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d003      	beq.n	800fa96 <TIM_OC1_SetConfig+0xbe>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4a18      	ldr	r2, [pc, #96]	; (800faf4 <TIM_OC1_SetConfig+0x11c>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d111      	bne.n	800faba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fa96:	693b      	ldr	r3, [r7, #16]
 800fa98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800faa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	695b      	ldr	r3, [r3, #20]
 800faaa:	693a      	ldr	r2, [r7, #16]
 800faac:	4313      	orrs	r3, r2
 800faae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	699b      	ldr	r3, [r3, #24]
 800fab4:	693a      	ldr	r2, [r7, #16]
 800fab6:	4313      	orrs	r3, r2
 800fab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	693a      	ldr	r2, [r7, #16]
 800fabe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	68fa      	ldr	r2, [r7, #12]
 800fac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	685a      	ldr	r2, [r3, #4]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	697a      	ldr	r2, [r7, #20]
 800fad2:	621a      	str	r2, [r3, #32]
}
 800fad4:	bf00      	nop
 800fad6:	371c      	adds	r7, #28
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr
 800fae0:	fffeff8f 	.word	0xfffeff8f
 800fae4:	40010000 	.word	0x40010000
 800fae8:	40010400 	.word	0x40010400
 800faec:	40014000 	.word	0x40014000
 800faf0:	40014400 	.word	0x40014400
 800faf4:	40014800 	.word	0x40014800

0800faf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b087      	sub	sp, #28
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6a1b      	ldr	r3, [r3, #32]
 800fb06:	f023 0210 	bic.w	r2, r3, #16
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6a1b      	ldr	r3, [r3, #32]
 800fb12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	685b      	ldr	r3, [r3, #4]
 800fb18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	699b      	ldr	r3, [r3, #24]
 800fb1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fb20:	68fa      	ldr	r2, [r7, #12]
 800fb22:	4b34      	ldr	r3, [pc, #208]	; (800fbf4 <TIM_OC2_SetConfig+0xfc>)
 800fb24:	4013      	ands	r3, r2
 800fb26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	021b      	lsls	r3, r3, #8
 800fb36:	68fa      	ldr	r2, [r7, #12]
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	f023 0320 	bic.w	r3, r3, #32
 800fb42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	689b      	ldr	r3, [r3, #8]
 800fb48:	011b      	lsls	r3, r3, #4
 800fb4a:	697a      	ldr	r2, [r7, #20]
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4a29      	ldr	r2, [pc, #164]	; (800fbf8 <TIM_OC2_SetConfig+0x100>)
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d003      	beq.n	800fb60 <TIM_OC2_SetConfig+0x68>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4a28      	ldr	r2, [pc, #160]	; (800fbfc <TIM_OC2_SetConfig+0x104>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d10d      	bne.n	800fb7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	68db      	ldr	r3, [r3, #12]
 800fb6c:	011b      	lsls	r3, r3, #4
 800fb6e:	697a      	ldr	r2, [r7, #20]
 800fb70:	4313      	orrs	r3, r2
 800fb72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	4a1e      	ldr	r2, [pc, #120]	; (800fbf8 <TIM_OC2_SetConfig+0x100>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d00f      	beq.n	800fba4 <TIM_OC2_SetConfig+0xac>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	4a1d      	ldr	r2, [pc, #116]	; (800fbfc <TIM_OC2_SetConfig+0x104>)
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	d00b      	beq.n	800fba4 <TIM_OC2_SetConfig+0xac>
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	4a1c      	ldr	r2, [pc, #112]	; (800fc00 <TIM_OC2_SetConfig+0x108>)
 800fb90:	4293      	cmp	r3, r2
 800fb92:	d007      	beq.n	800fba4 <TIM_OC2_SetConfig+0xac>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	4a1b      	ldr	r2, [pc, #108]	; (800fc04 <TIM_OC2_SetConfig+0x10c>)
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d003      	beq.n	800fba4 <TIM_OC2_SetConfig+0xac>
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	4a1a      	ldr	r2, [pc, #104]	; (800fc08 <TIM_OC2_SetConfig+0x110>)
 800fba0:	4293      	cmp	r3, r2
 800fba2:	d113      	bne.n	800fbcc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fbaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fbb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	695b      	ldr	r3, [r3, #20]
 800fbb8:	009b      	lsls	r3, r3, #2
 800fbba:	693a      	ldr	r2, [r7, #16]
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	699b      	ldr	r3, [r3, #24]
 800fbc4:	009b      	lsls	r3, r3, #2
 800fbc6:	693a      	ldr	r2, [r7, #16]
 800fbc8:	4313      	orrs	r3, r2
 800fbca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	693a      	ldr	r2, [r7, #16]
 800fbd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	68fa      	ldr	r2, [r7, #12]
 800fbd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	685a      	ldr	r2, [r3, #4]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	697a      	ldr	r2, [r7, #20]
 800fbe4:	621a      	str	r2, [r3, #32]
}
 800fbe6:	bf00      	nop
 800fbe8:	371c      	adds	r7, #28
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr
 800fbf2:	bf00      	nop
 800fbf4:	feff8fff 	.word	0xfeff8fff
 800fbf8:	40010000 	.word	0x40010000
 800fbfc:	40010400 	.word	0x40010400
 800fc00:	40014000 	.word	0x40014000
 800fc04:	40014400 	.word	0x40014400
 800fc08:	40014800 	.word	0x40014800

0800fc0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b087      	sub	sp, #28
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6a1b      	ldr	r3, [r3, #32]
 800fc1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6a1b      	ldr	r3, [r3, #32]
 800fc26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	69db      	ldr	r3, [r3, #28]
 800fc32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fc34:	68fa      	ldr	r2, [r7, #12]
 800fc36:	4b33      	ldr	r3, [pc, #204]	; (800fd04 <TIM_OC3_SetConfig+0xf8>)
 800fc38:	4013      	ands	r3, r2
 800fc3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f023 0303 	bic.w	r3, r3, #3
 800fc42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	68fa      	ldr	r2, [r7, #12]
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fc54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	689b      	ldr	r3, [r3, #8]
 800fc5a:	021b      	lsls	r3, r3, #8
 800fc5c:	697a      	ldr	r2, [r7, #20]
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	4a28      	ldr	r2, [pc, #160]	; (800fd08 <TIM_OC3_SetConfig+0xfc>)
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d003      	beq.n	800fc72 <TIM_OC3_SetConfig+0x66>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4a27      	ldr	r2, [pc, #156]	; (800fd0c <TIM_OC3_SetConfig+0x100>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d10d      	bne.n	800fc8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	68db      	ldr	r3, [r3, #12]
 800fc7e:	021b      	lsls	r3, r3, #8
 800fc80:	697a      	ldr	r2, [r7, #20]
 800fc82:	4313      	orrs	r3, r2
 800fc84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4a1d      	ldr	r2, [pc, #116]	; (800fd08 <TIM_OC3_SetConfig+0xfc>)
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d00f      	beq.n	800fcb6 <TIM_OC3_SetConfig+0xaa>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	4a1c      	ldr	r2, [pc, #112]	; (800fd0c <TIM_OC3_SetConfig+0x100>)
 800fc9a:	4293      	cmp	r3, r2
 800fc9c:	d00b      	beq.n	800fcb6 <TIM_OC3_SetConfig+0xaa>
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	4a1b      	ldr	r2, [pc, #108]	; (800fd10 <TIM_OC3_SetConfig+0x104>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d007      	beq.n	800fcb6 <TIM_OC3_SetConfig+0xaa>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	4a1a      	ldr	r2, [pc, #104]	; (800fd14 <TIM_OC3_SetConfig+0x108>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d003      	beq.n	800fcb6 <TIM_OC3_SetConfig+0xaa>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	4a19      	ldr	r2, [pc, #100]	; (800fd18 <TIM_OC3_SetConfig+0x10c>)
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d113      	bne.n	800fcde <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fcbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fcc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	695b      	ldr	r3, [r3, #20]
 800fcca:	011b      	lsls	r3, r3, #4
 800fccc:	693a      	ldr	r2, [r7, #16]
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	699b      	ldr	r3, [r3, #24]
 800fcd6:	011b      	lsls	r3, r3, #4
 800fcd8:	693a      	ldr	r2, [r7, #16]
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	693a      	ldr	r2, [r7, #16]
 800fce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	68fa      	ldr	r2, [r7, #12]
 800fce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	685a      	ldr	r2, [r3, #4]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	697a      	ldr	r2, [r7, #20]
 800fcf6:	621a      	str	r2, [r3, #32]
}
 800fcf8:	bf00      	nop
 800fcfa:	371c      	adds	r7, #28
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr
 800fd04:	fffeff8f 	.word	0xfffeff8f
 800fd08:	40010000 	.word	0x40010000
 800fd0c:	40010400 	.word	0x40010400
 800fd10:	40014000 	.word	0x40014000
 800fd14:	40014400 	.word	0x40014400
 800fd18:	40014800 	.word	0x40014800

0800fd1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b087      	sub	sp, #28
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6a1b      	ldr	r3, [r3, #32]
 800fd2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6a1b      	ldr	r3, [r3, #32]
 800fd36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	69db      	ldr	r3, [r3, #28]
 800fd42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fd44:	68fa      	ldr	r2, [r7, #12]
 800fd46:	4b24      	ldr	r3, [pc, #144]	; (800fdd8 <TIM_OC4_SetConfig+0xbc>)
 800fd48:	4013      	ands	r3, r2
 800fd4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	021b      	lsls	r3, r3, #8
 800fd5a:	68fa      	ldr	r2, [r7, #12]
 800fd5c:	4313      	orrs	r3, r2
 800fd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	689b      	ldr	r3, [r3, #8]
 800fd6c:	031b      	lsls	r3, r3, #12
 800fd6e:	693a      	ldr	r2, [r7, #16]
 800fd70:	4313      	orrs	r3, r2
 800fd72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4a19      	ldr	r2, [pc, #100]	; (800fddc <TIM_OC4_SetConfig+0xc0>)
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d00f      	beq.n	800fd9c <TIM_OC4_SetConfig+0x80>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	4a18      	ldr	r2, [pc, #96]	; (800fde0 <TIM_OC4_SetConfig+0xc4>)
 800fd80:	4293      	cmp	r3, r2
 800fd82:	d00b      	beq.n	800fd9c <TIM_OC4_SetConfig+0x80>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	4a17      	ldr	r2, [pc, #92]	; (800fde4 <TIM_OC4_SetConfig+0xc8>)
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d007      	beq.n	800fd9c <TIM_OC4_SetConfig+0x80>
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	4a16      	ldr	r2, [pc, #88]	; (800fde8 <TIM_OC4_SetConfig+0xcc>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d003      	beq.n	800fd9c <TIM_OC4_SetConfig+0x80>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	4a15      	ldr	r2, [pc, #84]	; (800fdec <TIM_OC4_SetConfig+0xd0>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d109      	bne.n	800fdb0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fda2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	695b      	ldr	r3, [r3, #20]
 800fda8:	019b      	lsls	r3, r3, #6
 800fdaa:	697a      	ldr	r2, [r7, #20]
 800fdac:	4313      	orrs	r3, r2
 800fdae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	697a      	ldr	r2, [r7, #20]
 800fdb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	68fa      	ldr	r2, [r7, #12]
 800fdba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	685a      	ldr	r2, [r3, #4]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	693a      	ldr	r2, [r7, #16]
 800fdc8:	621a      	str	r2, [r3, #32]
}
 800fdca:	bf00      	nop
 800fdcc:	371c      	adds	r7, #28
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd4:	4770      	bx	lr
 800fdd6:	bf00      	nop
 800fdd8:	feff8fff 	.word	0xfeff8fff
 800fddc:	40010000 	.word	0x40010000
 800fde0:	40010400 	.word	0x40010400
 800fde4:	40014000 	.word	0x40014000
 800fde8:	40014400 	.word	0x40014400
 800fdec:	40014800 	.word	0x40014800

0800fdf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b087      	sub	sp, #28
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6a1b      	ldr	r3, [r3, #32]
 800fdfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6a1b      	ldr	r3, [r3, #32]
 800fe0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fe18:	68fa      	ldr	r2, [r7, #12]
 800fe1a:	4b21      	ldr	r3, [pc, #132]	; (800fea0 <TIM_OC5_SetConfig+0xb0>)
 800fe1c:	4013      	ands	r3, r2
 800fe1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	68fa      	ldr	r2, [r7, #12]
 800fe26:	4313      	orrs	r3, r2
 800fe28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fe30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	689b      	ldr	r3, [r3, #8]
 800fe36:	041b      	lsls	r3, r3, #16
 800fe38:	693a      	ldr	r2, [r7, #16]
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	4a18      	ldr	r2, [pc, #96]	; (800fea4 <TIM_OC5_SetConfig+0xb4>)
 800fe42:	4293      	cmp	r3, r2
 800fe44:	d00f      	beq.n	800fe66 <TIM_OC5_SetConfig+0x76>
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	4a17      	ldr	r2, [pc, #92]	; (800fea8 <TIM_OC5_SetConfig+0xb8>)
 800fe4a:	4293      	cmp	r3, r2
 800fe4c:	d00b      	beq.n	800fe66 <TIM_OC5_SetConfig+0x76>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	4a16      	ldr	r2, [pc, #88]	; (800feac <TIM_OC5_SetConfig+0xbc>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d007      	beq.n	800fe66 <TIM_OC5_SetConfig+0x76>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4a15      	ldr	r2, [pc, #84]	; (800feb0 <TIM_OC5_SetConfig+0xc0>)
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	d003      	beq.n	800fe66 <TIM_OC5_SetConfig+0x76>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	4a14      	ldr	r2, [pc, #80]	; (800feb4 <TIM_OC5_SetConfig+0xc4>)
 800fe62:	4293      	cmp	r3, r2
 800fe64:	d109      	bne.n	800fe7a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fe6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	695b      	ldr	r3, [r3, #20]
 800fe72:	021b      	lsls	r3, r3, #8
 800fe74:	697a      	ldr	r2, [r7, #20]
 800fe76:	4313      	orrs	r3, r2
 800fe78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	697a      	ldr	r2, [r7, #20]
 800fe7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	68fa      	ldr	r2, [r7, #12]
 800fe84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	685a      	ldr	r2, [r3, #4]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	693a      	ldr	r2, [r7, #16]
 800fe92:	621a      	str	r2, [r3, #32]
}
 800fe94:	bf00      	nop
 800fe96:	371c      	adds	r7, #28
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr
 800fea0:	fffeff8f 	.word	0xfffeff8f
 800fea4:	40010000 	.word	0x40010000
 800fea8:	40010400 	.word	0x40010400
 800feac:	40014000 	.word	0x40014000
 800feb0:	40014400 	.word	0x40014400
 800feb4:	40014800 	.word	0x40014800

0800feb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800feb8:	b480      	push	{r7}
 800feba:	b087      	sub	sp, #28
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6a1b      	ldr	r3, [r3, #32]
 800fec6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6a1b      	ldr	r3, [r3, #32]
 800fed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fee0:	68fa      	ldr	r2, [r7, #12]
 800fee2:	4b22      	ldr	r3, [pc, #136]	; (800ff6c <TIM_OC6_SetConfig+0xb4>)
 800fee4:	4013      	ands	r3, r2
 800fee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	021b      	lsls	r3, r3, #8
 800feee:	68fa      	ldr	r2, [r7, #12]
 800fef0:	4313      	orrs	r3, r2
 800fef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fefa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	051b      	lsls	r3, r3, #20
 800ff02:	693a      	ldr	r2, [r7, #16]
 800ff04:	4313      	orrs	r3, r2
 800ff06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	4a19      	ldr	r2, [pc, #100]	; (800ff70 <TIM_OC6_SetConfig+0xb8>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d00f      	beq.n	800ff30 <TIM_OC6_SetConfig+0x78>
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	4a18      	ldr	r2, [pc, #96]	; (800ff74 <TIM_OC6_SetConfig+0xbc>)
 800ff14:	4293      	cmp	r3, r2
 800ff16:	d00b      	beq.n	800ff30 <TIM_OC6_SetConfig+0x78>
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	4a17      	ldr	r2, [pc, #92]	; (800ff78 <TIM_OC6_SetConfig+0xc0>)
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d007      	beq.n	800ff30 <TIM_OC6_SetConfig+0x78>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	4a16      	ldr	r2, [pc, #88]	; (800ff7c <TIM_OC6_SetConfig+0xc4>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d003      	beq.n	800ff30 <TIM_OC6_SetConfig+0x78>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	4a15      	ldr	r2, [pc, #84]	; (800ff80 <TIM_OC6_SetConfig+0xc8>)
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d109      	bne.n	800ff44 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ff36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	695b      	ldr	r3, [r3, #20]
 800ff3c:	029b      	lsls	r3, r3, #10
 800ff3e:	697a      	ldr	r2, [r7, #20]
 800ff40:	4313      	orrs	r3, r2
 800ff42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	697a      	ldr	r2, [r7, #20]
 800ff48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	68fa      	ldr	r2, [r7, #12]
 800ff4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	685a      	ldr	r2, [r3, #4]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	693a      	ldr	r2, [r7, #16]
 800ff5c:	621a      	str	r2, [r3, #32]
}
 800ff5e:	bf00      	nop
 800ff60:	371c      	adds	r7, #28
 800ff62:	46bd      	mov	sp, r7
 800ff64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff68:	4770      	bx	lr
 800ff6a:	bf00      	nop
 800ff6c:	feff8fff 	.word	0xfeff8fff
 800ff70:	40010000 	.word	0x40010000
 800ff74:	40010400 	.word	0x40010400
 800ff78:	40014000 	.word	0x40014000
 800ff7c:	40014400 	.word	0x40014400
 800ff80:	40014800 	.word	0x40014800

0800ff84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff84:	b480      	push	{r7}
 800ff86:	b085      	sub	sp, #20
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d101      	bne.n	800ff9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ff98:	2302      	movs	r3, #2
 800ff9a:	e06d      	b.n	8010078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2202      	movs	r2, #2
 800ffa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	689b      	ldr	r3, [r3, #8]
 800ffba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	4a30      	ldr	r2, [pc, #192]	; (8010084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d004      	beq.n	800ffd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	4a2f      	ldr	r2, [pc, #188]	; (8010088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d108      	bne.n	800ffe2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ffd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	685b      	ldr	r3, [r3, #4]
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	4313      	orrs	r3, r2
 800ffe0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffe8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	68fa      	ldr	r2, [r7, #12]
 800fff0:	4313      	orrs	r3, r2
 800fff2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	68fa      	ldr	r2, [r7, #12]
 800fffa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4a20      	ldr	r2, [pc, #128]	; (8010084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010002:	4293      	cmp	r3, r2
 8010004:	d022      	beq.n	801004c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801000e:	d01d      	beq.n	801004c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	4a1d      	ldr	r2, [pc, #116]	; (801008c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010016:	4293      	cmp	r3, r2
 8010018:	d018      	beq.n	801004c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	4a1c      	ldr	r2, [pc, #112]	; (8010090 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010020:	4293      	cmp	r3, r2
 8010022:	d013      	beq.n	801004c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	4a1a      	ldr	r2, [pc, #104]	; (8010094 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801002a:	4293      	cmp	r3, r2
 801002c:	d00e      	beq.n	801004c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	4a15      	ldr	r2, [pc, #84]	; (8010088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010034:	4293      	cmp	r3, r2
 8010036:	d009      	beq.n	801004c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	4a16      	ldr	r2, [pc, #88]	; (8010098 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801003e:	4293      	cmp	r3, r2
 8010040:	d004      	beq.n	801004c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4a15      	ldr	r2, [pc, #84]	; (801009c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d10c      	bne.n	8010066 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010052:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	689b      	ldr	r3, [r3, #8]
 8010058:	68ba      	ldr	r2, [r7, #8]
 801005a:	4313      	orrs	r3, r2
 801005c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	68ba      	ldr	r2, [r7, #8]
 8010064:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2201      	movs	r2, #1
 801006a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010076:	2300      	movs	r3, #0
}
 8010078:	4618      	mov	r0, r3
 801007a:	3714      	adds	r7, #20
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr
 8010084:	40010000 	.word	0x40010000
 8010088:	40010400 	.word	0x40010400
 801008c:	40000400 	.word	0x40000400
 8010090:	40000800 	.word	0x40000800
 8010094:	40000c00 	.word	0x40000c00
 8010098:	40001800 	.word	0x40001800
 801009c:	40014000 	.word	0x40014000

080100a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b085      	sub	sp, #20
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80100aa:	2300      	movs	r3, #0
 80100ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d101      	bne.n	80100bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80100b8:	2302      	movs	r3, #2
 80100ba:	e065      	b.n	8010188 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2201      	movs	r2, #1
 80100c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	4313      	orrs	r3, r2
 80100d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	689b      	ldr	r3, [r3, #8]
 80100dc:	4313      	orrs	r3, r2
 80100de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	4313      	orrs	r3, r2
 80100ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	4313      	orrs	r3, r2
 80100fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	691b      	ldr	r3, [r3, #16]
 8010106:	4313      	orrs	r3, r2
 8010108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	695b      	ldr	r3, [r3, #20]
 8010114:	4313      	orrs	r3, r2
 8010116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010122:	4313      	orrs	r3, r2
 8010124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	699b      	ldr	r3, [r3, #24]
 8010130:	041b      	lsls	r3, r3, #16
 8010132:	4313      	orrs	r3, r2
 8010134:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4a16      	ldr	r2, [pc, #88]	; (8010194 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d004      	beq.n	801014a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	4a14      	ldr	r2, [pc, #80]	; (8010198 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010146:	4293      	cmp	r3, r2
 8010148:	d115      	bne.n	8010176 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010154:	051b      	lsls	r3, r3, #20
 8010156:	4313      	orrs	r3, r2
 8010158:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	69db      	ldr	r3, [r3, #28]
 8010164:	4313      	orrs	r3, r2
 8010166:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	6a1b      	ldr	r3, [r3, #32]
 8010172:	4313      	orrs	r3, r2
 8010174:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	68fa      	ldr	r2, [r7, #12]
 801017c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2200      	movs	r2, #0
 8010182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010186:	2300      	movs	r3, #0
}
 8010188:	4618      	mov	r0, r3
 801018a:	3714      	adds	r7, #20
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr
 8010194:	40010000 	.word	0x40010000
 8010198:	40010400 	.word	0x40010400

0801019c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d101      	bne.n	80101ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80101aa:	2301      	movs	r3, #1
 80101ac:	e042      	b.n	8010234 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d106      	bne.n	80101c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2200      	movs	r2, #0
 80101bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f7f2 fb97 	bl	80028f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2224      	movs	r2, #36	; 0x24
 80101ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	681a      	ldr	r2, [r3, #0]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	f022 0201 	bic.w	r2, r2, #1
 80101dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f000 fbea 	bl	80109b8 <UART_SetConfig>
 80101e4:	4603      	mov	r3, r0
 80101e6:	2b01      	cmp	r3, #1
 80101e8:	d101      	bne.n	80101ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80101ea:	2301      	movs	r3, #1
 80101ec:	e022      	b.n	8010234 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d002      	beq.n	80101fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f001 f946 	bl	8011488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	685a      	ldr	r2, [r3, #4]
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801020a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	689a      	ldr	r2, [r3, #8]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801021a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	f042 0201 	orr.w	r2, r2, #1
 801022a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f001 f9cd 	bl	80115cc <UART_CheckIdleState>
 8010232:	4603      	mov	r3, r0
}
 8010234:	4618      	mov	r0, r3
 8010236:	3708      	adds	r7, #8
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}

0801023c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b0ba      	sub	sp, #232	; 0xe8
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	69db      	ldr	r3, [r3, #28]
 801024a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	689b      	ldr	r3, [r3, #8]
 801025e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010262:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010266:	f640 030f 	movw	r3, #2063	; 0x80f
 801026a:	4013      	ands	r3, r2
 801026c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010274:	2b00      	cmp	r3, #0
 8010276:	d11b      	bne.n	80102b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801027c:	f003 0320 	and.w	r3, r3, #32
 8010280:	2b00      	cmp	r3, #0
 8010282:	d015      	beq.n	80102b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010288:	f003 0320 	and.w	r3, r3, #32
 801028c:	2b00      	cmp	r3, #0
 801028e:	d105      	bne.n	801029c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010298:	2b00      	cmp	r3, #0
 801029a:	d009      	beq.n	80102b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f000 835a 	beq.w	801095a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	4798      	blx	r3
      }
      return;
 80102ae:	e354      	b.n	801095a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80102b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	f000 811f 	beq.w	80104f8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80102ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80102be:	4b8b      	ldr	r3, [pc, #556]	; (80104ec <HAL_UART_IRQHandler+0x2b0>)
 80102c0:	4013      	ands	r3, r2
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d106      	bne.n	80102d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80102c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80102ca:	4b89      	ldr	r3, [pc, #548]	; (80104f0 <HAL_UART_IRQHandler+0x2b4>)
 80102cc:	4013      	ands	r3, r2
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	f000 8112 	beq.w	80104f8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80102d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102d8:	f003 0301 	and.w	r3, r3, #1
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d011      	beq.n	8010304 <HAL_UART_IRQHandler+0xc8>
 80102e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d00b      	beq.n	8010304 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2201      	movs	r2, #1
 80102f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80102fa:	f043 0201 	orr.w	r2, r3, #1
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010308:	f003 0302 	and.w	r3, r3, #2
 801030c:	2b00      	cmp	r3, #0
 801030e:	d011      	beq.n	8010334 <HAL_UART_IRQHandler+0xf8>
 8010310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010314:	f003 0301 	and.w	r3, r3, #1
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00b      	beq.n	8010334 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2202      	movs	r2, #2
 8010322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801032a:	f043 0204 	orr.w	r2, r3, #4
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010338:	f003 0304 	and.w	r3, r3, #4
 801033c:	2b00      	cmp	r3, #0
 801033e:	d011      	beq.n	8010364 <HAL_UART_IRQHandler+0x128>
 8010340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010344:	f003 0301 	and.w	r3, r3, #1
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00b      	beq.n	8010364 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2204      	movs	r2, #4
 8010352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801035a:	f043 0202 	orr.w	r2, r3, #2
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010368:	f003 0308 	and.w	r3, r3, #8
 801036c:	2b00      	cmp	r3, #0
 801036e:	d017      	beq.n	80103a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010374:	f003 0320 	and.w	r3, r3, #32
 8010378:	2b00      	cmp	r3, #0
 801037a:	d105      	bne.n	8010388 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801037c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010380:	4b5a      	ldr	r3, [pc, #360]	; (80104ec <HAL_UART_IRQHandler+0x2b0>)
 8010382:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010384:	2b00      	cmp	r3, #0
 8010386:	d00b      	beq.n	80103a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2208      	movs	r2, #8
 801038e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010396:	f043 0208 	orr.w	r2, r3, #8
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80103a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d012      	beq.n	80103d2 <HAL_UART_IRQHandler+0x196>
 80103ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d00c      	beq.n	80103d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80103c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103c8:	f043 0220 	orr.w	r2, r3, #32
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f000 82c0 	beq.w	801095e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80103de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103e2:	f003 0320 	and.w	r3, r3, #32
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d013      	beq.n	8010412 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80103ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103ee:	f003 0320 	and.w	r3, r3, #32
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d105      	bne.n	8010402 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80103f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d007      	beq.n	8010412 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010406:	2b00      	cmp	r3, #0
 8010408:	d003      	beq.n	8010412 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010418:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	689b      	ldr	r3, [r3, #8]
 8010422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010426:	2b40      	cmp	r3, #64	; 0x40
 8010428:	d005      	beq.n	8010436 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801042a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801042e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010432:	2b00      	cmp	r3, #0
 8010434:	d04f      	beq.n	80104d6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f001 f9dc 	bl	80117f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	689b      	ldr	r3, [r3, #8]
 8010442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010446:	2b40      	cmp	r3, #64	; 0x40
 8010448:	d141      	bne.n	80104ce <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	3308      	adds	r3, #8
 8010450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010454:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010458:	e853 3f00 	ldrex	r3, [r3]
 801045c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010460:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	3308      	adds	r3, #8
 8010472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010476:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801047a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801047e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010486:	e841 2300 	strex	r3, r2, [r1]
 801048a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801048e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010492:	2b00      	cmp	r3, #0
 8010494:	d1d9      	bne.n	801044a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801049a:	2b00      	cmp	r3, #0
 801049c:	d013      	beq.n	80104c6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104a2:	4a14      	ldr	r2, [pc, #80]	; (80104f4 <HAL_UART_IRQHandler+0x2b8>)
 80104a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7f5 f802 	bl	80054b4 <HAL_DMA_Abort_IT>
 80104b0:	4603      	mov	r3, r0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d017      	beq.n	80104e6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104bc:	687a      	ldr	r2, [r7, #4]
 80104be:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80104c0:	4610      	mov	r0, r2
 80104c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104c4:	e00f      	b.n	80104e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 fa60 	bl	801098c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104cc:	e00b      	b.n	80104e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f000 fa5c 	bl	801098c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104d4:	e007      	b.n	80104e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f000 fa58 	bl	801098c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2200      	movs	r2, #0
 80104e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80104e4:	e23b      	b.n	801095e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104e6:	bf00      	nop
    return;
 80104e8:	e239      	b.n	801095e <HAL_UART_IRQHandler+0x722>
 80104ea:	bf00      	nop
 80104ec:	10000001 	.word	0x10000001
 80104f0:	04000120 	.word	0x04000120
 80104f4:	080118c1 	.word	0x080118c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	f040 81ce 	bne.w	801089e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010506:	f003 0310 	and.w	r3, r3, #16
 801050a:	2b00      	cmp	r3, #0
 801050c:	f000 81c7 	beq.w	801089e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010514:	f003 0310 	and.w	r3, r3, #16
 8010518:	2b00      	cmp	r3, #0
 801051a:	f000 81c0 	beq.w	801089e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	2210      	movs	r2, #16
 8010524:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	689b      	ldr	r3, [r3, #8]
 801052c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010530:	2b40      	cmp	r3, #64	; 0x40
 8010532:	f040 813b 	bne.w	80107ac <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	4a8b      	ldr	r2, [pc, #556]	; (801076c <HAL_UART_IRQHandler+0x530>)
 801053e:	4293      	cmp	r3, r2
 8010540:	d059      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	4a89      	ldr	r2, [pc, #548]	; (8010770 <HAL_UART_IRQHandler+0x534>)
 801054a:	4293      	cmp	r3, r2
 801054c:	d053      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4a87      	ldr	r2, [pc, #540]	; (8010774 <HAL_UART_IRQHandler+0x538>)
 8010556:	4293      	cmp	r3, r2
 8010558:	d04d      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	4a85      	ldr	r2, [pc, #532]	; (8010778 <HAL_UART_IRQHandler+0x53c>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d047      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	4a83      	ldr	r2, [pc, #524]	; (801077c <HAL_UART_IRQHandler+0x540>)
 801056e:	4293      	cmp	r3, r2
 8010570:	d041      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4a81      	ldr	r2, [pc, #516]	; (8010780 <HAL_UART_IRQHandler+0x544>)
 801057a:	4293      	cmp	r3, r2
 801057c:	d03b      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	4a7f      	ldr	r2, [pc, #508]	; (8010784 <HAL_UART_IRQHandler+0x548>)
 8010586:	4293      	cmp	r3, r2
 8010588:	d035      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	4a7d      	ldr	r2, [pc, #500]	; (8010788 <HAL_UART_IRQHandler+0x54c>)
 8010592:	4293      	cmp	r3, r2
 8010594:	d02f      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	4a7b      	ldr	r2, [pc, #492]	; (801078c <HAL_UART_IRQHandler+0x550>)
 801059e:	4293      	cmp	r3, r2
 80105a0:	d029      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	4a79      	ldr	r2, [pc, #484]	; (8010790 <HAL_UART_IRQHandler+0x554>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d023      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4a77      	ldr	r2, [pc, #476]	; (8010794 <HAL_UART_IRQHandler+0x558>)
 80105b6:	4293      	cmp	r3, r2
 80105b8:	d01d      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4a75      	ldr	r2, [pc, #468]	; (8010798 <HAL_UART_IRQHandler+0x55c>)
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d017      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	4a73      	ldr	r2, [pc, #460]	; (801079c <HAL_UART_IRQHandler+0x560>)
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d011      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4a71      	ldr	r2, [pc, #452]	; (80107a0 <HAL_UART_IRQHandler+0x564>)
 80105da:	4293      	cmp	r3, r2
 80105dc:	d00b      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	4a6f      	ldr	r2, [pc, #444]	; (80107a4 <HAL_UART_IRQHandler+0x568>)
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d005      	beq.n	80105f6 <HAL_UART_IRQHandler+0x3ba>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	4a6d      	ldr	r2, [pc, #436]	; (80107a8 <HAL_UART_IRQHandler+0x56c>)
 80105f2:	4293      	cmp	r3, r2
 80105f4:	d105      	bne.n	8010602 <HAL_UART_IRQHandler+0x3c6>
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	b29b      	uxth	r3, r3
 8010600:	e004      	b.n	801060c <HAL_UART_IRQHandler+0x3d0>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	685b      	ldr	r3, [r3, #4]
 801060a:	b29b      	uxth	r3, r3
 801060c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010610:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010614:	2b00      	cmp	r3, #0
 8010616:	f000 81a4 	beq.w	8010962 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010620:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010624:	429a      	cmp	r2, r3
 8010626:	f080 819c 	bcs.w	8010962 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010630:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010638:	69db      	ldr	r3, [r3, #28]
 801063a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801063e:	f000 8086 	beq.w	801074e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801064a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801064e:	e853 3f00 	ldrex	r3, [r3]
 8010652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010656:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801065a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801065e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	461a      	mov	r2, r3
 8010668:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801066c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010670:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010674:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010678:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801067c:	e841 2300 	strex	r3, r2, [r1]
 8010680:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010684:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1da      	bne.n	8010642 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	3308      	adds	r3, #8
 8010692:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010696:	e853 3f00 	ldrex	r3, [r3]
 801069a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801069c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801069e:	f023 0301 	bic.w	r3, r3, #1
 80106a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	3308      	adds	r3, #8
 80106ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80106b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80106b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80106b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80106bc:	e841 2300 	strex	r3, r2, [r1]
 80106c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80106c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d1e1      	bne.n	801068c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	3308      	adds	r3, #8
 80106ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106d2:	e853 3f00 	ldrex	r3, [r3]
 80106d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80106d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	3308      	adds	r3, #8
 80106e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80106ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80106ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80106f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80106f4:	e841 2300 	strex	r3, r2, [r1]
 80106f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80106fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d1e3      	bne.n	80106c8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2220      	movs	r2, #32
 8010704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2200      	movs	r2, #0
 801070c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010716:	e853 3f00 	ldrex	r3, [r3]
 801071a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801071c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801071e:	f023 0310 	bic.w	r3, r3, #16
 8010722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	461a      	mov	r2, r3
 801072c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010730:	65bb      	str	r3, [r7, #88]	; 0x58
 8010732:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010734:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010736:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010738:	e841 2300 	strex	r3, r2, [r1]
 801073c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801073e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010740:	2b00      	cmp	r3, #0
 8010742:	d1e4      	bne.n	801070e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010748:	4618      	mov	r0, r3
 801074a:	f7f4 fb95 	bl	8004e78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801075a:	b29b      	uxth	r3, r3
 801075c:	1ad3      	subs	r3, r2, r3
 801075e:	b29b      	uxth	r3, r3
 8010760:	4619      	mov	r1, r3
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f000 f91c 	bl	80109a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010768:	e0fb      	b.n	8010962 <HAL_UART_IRQHandler+0x726>
 801076a:	bf00      	nop
 801076c:	40020010 	.word	0x40020010
 8010770:	40020028 	.word	0x40020028
 8010774:	40020040 	.word	0x40020040
 8010778:	40020058 	.word	0x40020058
 801077c:	40020070 	.word	0x40020070
 8010780:	40020088 	.word	0x40020088
 8010784:	400200a0 	.word	0x400200a0
 8010788:	400200b8 	.word	0x400200b8
 801078c:	40020410 	.word	0x40020410
 8010790:	40020428 	.word	0x40020428
 8010794:	40020440 	.word	0x40020440
 8010798:	40020458 	.word	0x40020458
 801079c:	40020470 	.word	0x40020470
 80107a0:	40020488 	.word	0x40020488
 80107a4:	400204a0 	.word	0x400204a0
 80107a8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	1ad3      	subs	r3, r2, r3
 80107bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	f000 80cc 	beq.w	8010966 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80107ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	f000 80c7 	beq.w	8010966 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107e0:	e853 3f00 	ldrex	r3, [r3]
 80107e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80107e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80107ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	461a      	mov	r2, r3
 80107f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80107fa:	647b      	str	r3, [r7, #68]	; 0x44
 80107fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010800:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010802:	e841 2300 	strex	r3, r2, [r1]
 8010806:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801080a:	2b00      	cmp	r3, #0
 801080c:	d1e4      	bne.n	80107d8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	3308      	adds	r3, #8
 8010814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010818:	e853 3f00 	ldrex	r3, [r3]
 801081c:	623b      	str	r3, [r7, #32]
   return(result);
 801081e:	6a3a      	ldr	r2, [r7, #32]
 8010820:	4b54      	ldr	r3, [pc, #336]	; (8010974 <HAL_UART_IRQHandler+0x738>)
 8010822:	4013      	ands	r3, r2
 8010824:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	3308      	adds	r3, #8
 801082e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010832:	633a      	str	r2, [r7, #48]	; 0x30
 8010834:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801083a:	e841 2300 	strex	r3, r2, [r1]
 801083e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010842:	2b00      	cmp	r3, #0
 8010844:	d1e3      	bne.n	801080e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2220      	movs	r2, #32
 801084a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2200      	movs	r2, #0
 8010852:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2200      	movs	r2, #0
 8010858:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	e853 3f00 	ldrex	r3, [r3]
 8010866:	60fb      	str	r3, [r7, #12]
   return(result);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f023 0310 	bic.w	r3, r3, #16
 801086e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	461a      	mov	r2, r3
 8010878:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801087c:	61fb      	str	r3, [r7, #28]
 801087e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010880:	69b9      	ldr	r1, [r7, #24]
 8010882:	69fa      	ldr	r2, [r7, #28]
 8010884:	e841 2300 	strex	r3, r2, [r1]
 8010888:	617b      	str	r3, [r7, #20]
   return(result);
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d1e4      	bne.n	801085a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010894:	4619      	mov	r1, r3
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f000 f882 	bl	80109a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801089c:	e063      	b.n	8010966 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801089e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d00e      	beq.n	80108c8 <HAL_UART_IRQHandler+0x68c>
 80108aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d008      	beq.n	80108c8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80108be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f001 f83e 	bl	8011942 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80108c6:	e051      	b.n	801096c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80108c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d014      	beq.n	80108fe <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80108d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d105      	bne.n	80108ec <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80108e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d008      	beq.n	80108fe <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d03a      	beq.n	801096a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	4798      	blx	r3
    }
    return;
 80108fc:	e035      	b.n	801096a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80108fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010906:	2b00      	cmp	r3, #0
 8010908:	d009      	beq.n	801091e <HAL_UART_IRQHandler+0x6e2>
 801090a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801090e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010912:	2b00      	cmp	r3, #0
 8010914:	d003      	beq.n	801091e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 ffe8 	bl	80118ec <UART_EndTransmit_IT>
    return;
 801091c:	e026      	b.n	801096c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801091e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010926:	2b00      	cmp	r3, #0
 8010928:	d009      	beq.n	801093e <HAL_UART_IRQHandler+0x702>
 801092a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801092e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010932:	2b00      	cmp	r3, #0
 8010934:	d003      	beq.n	801093e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f001 f817 	bl	801196a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801093c:	e016      	b.n	801096c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801093e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010942:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010946:	2b00      	cmp	r3, #0
 8010948:	d010      	beq.n	801096c <HAL_UART_IRQHandler+0x730>
 801094a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801094e:	2b00      	cmp	r3, #0
 8010950:	da0c      	bge.n	801096c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f000 ffff 	bl	8011956 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010958:	e008      	b.n	801096c <HAL_UART_IRQHandler+0x730>
      return;
 801095a:	bf00      	nop
 801095c:	e006      	b.n	801096c <HAL_UART_IRQHandler+0x730>
    return;
 801095e:	bf00      	nop
 8010960:	e004      	b.n	801096c <HAL_UART_IRQHandler+0x730>
      return;
 8010962:	bf00      	nop
 8010964:	e002      	b.n	801096c <HAL_UART_IRQHandler+0x730>
      return;
 8010966:	bf00      	nop
 8010968:	e000      	b.n	801096c <HAL_UART_IRQHandler+0x730>
    return;
 801096a:	bf00      	nop
  }
}
 801096c:	37e8      	adds	r7, #232	; 0xe8
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}
 8010972:	bf00      	nop
 8010974:	effffffe 	.word	0xeffffffe

08010978 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010978:	b480      	push	{r7}
 801097a:	b083      	sub	sp, #12
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010980:	bf00      	nop
 8010982:	370c      	adds	r7, #12
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr

0801098c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801098c:	b480      	push	{r7}
 801098e:	b083      	sub	sp, #12
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010994:	bf00      	nop
 8010996:	370c      	adds	r7, #12
 8010998:	46bd      	mov	sp, r7
 801099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099e:	4770      	bx	lr

080109a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80109a0:	b480      	push	{r7}
 80109a2:	b083      	sub	sp, #12
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	460b      	mov	r3, r1
 80109aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80109ac:	bf00      	nop
 80109ae:	370c      	adds	r7, #12
 80109b0:	46bd      	mov	sp, r7
 80109b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b6:	4770      	bx	lr

080109b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80109b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80109bc:	b092      	sub	sp, #72	; 0x48
 80109be:	af00      	add	r7, sp, #0
 80109c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80109c2:	2300      	movs	r3, #0
 80109c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	689a      	ldr	r2, [r3, #8]
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	691b      	ldr	r3, [r3, #16]
 80109d0:	431a      	orrs	r2, r3
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	695b      	ldr	r3, [r3, #20]
 80109d6:	431a      	orrs	r2, r3
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	69db      	ldr	r3, [r3, #28]
 80109dc:	4313      	orrs	r3, r2
 80109de:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	681a      	ldr	r2, [r3, #0]
 80109e6:	4bbe      	ldr	r3, [pc, #760]	; (8010ce0 <UART_SetConfig+0x328>)
 80109e8:	4013      	ands	r3, r2
 80109ea:	697a      	ldr	r2, [r7, #20]
 80109ec:	6812      	ldr	r2, [r2, #0]
 80109ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109f0:	430b      	orrs	r3, r1
 80109f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	68da      	ldr	r2, [r3, #12]
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	430a      	orrs	r2, r1
 8010a08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	699b      	ldr	r3, [r3, #24]
 8010a0e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	4ab3      	ldr	r2, [pc, #716]	; (8010ce4 <UART_SetConfig+0x32c>)
 8010a16:	4293      	cmp	r3, r2
 8010a18:	d004      	beq.n	8010a24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	6a1b      	ldr	r3, [r3, #32]
 8010a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a20:	4313      	orrs	r3, r2
 8010a22:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	689a      	ldr	r2, [r3, #8]
 8010a2a:	4baf      	ldr	r3, [pc, #700]	; (8010ce8 <UART_SetConfig+0x330>)
 8010a2c:	4013      	ands	r3, r2
 8010a2e:	697a      	ldr	r2, [r7, #20]
 8010a30:	6812      	ldr	r2, [r2, #0]
 8010a32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a34:	430b      	orrs	r3, r1
 8010a36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010a38:	697b      	ldr	r3, [r7, #20]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a3e:	f023 010f 	bic.w	r1, r3, #15
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	430a      	orrs	r2, r1
 8010a4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	4aa6      	ldr	r2, [pc, #664]	; (8010cec <UART_SetConfig+0x334>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d177      	bne.n	8010b48 <UART_SetConfig+0x190>
 8010a58:	4ba5      	ldr	r3, [pc, #660]	; (8010cf0 <UART_SetConfig+0x338>)
 8010a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010a60:	2b28      	cmp	r3, #40	; 0x28
 8010a62:	d86d      	bhi.n	8010b40 <UART_SetConfig+0x188>
 8010a64:	a201      	add	r2, pc, #4	; (adr r2, 8010a6c <UART_SetConfig+0xb4>)
 8010a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a6a:	bf00      	nop
 8010a6c:	08010b11 	.word	0x08010b11
 8010a70:	08010b41 	.word	0x08010b41
 8010a74:	08010b41 	.word	0x08010b41
 8010a78:	08010b41 	.word	0x08010b41
 8010a7c:	08010b41 	.word	0x08010b41
 8010a80:	08010b41 	.word	0x08010b41
 8010a84:	08010b41 	.word	0x08010b41
 8010a88:	08010b41 	.word	0x08010b41
 8010a8c:	08010b19 	.word	0x08010b19
 8010a90:	08010b41 	.word	0x08010b41
 8010a94:	08010b41 	.word	0x08010b41
 8010a98:	08010b41 	.word	0x08010b41
 8010a9c:	08010b41 	.word	0x08010b41
 8010aa0:	08010b41 	.word	0x08010b41
 8010aa4:	08010b41 	.word	0x08010b41
 8010aa8:	08010b41 	.word	0x08010b41
 8010aac:	08010b21 	.word	0x08010b21
 8010ab0:	08010b41 	.word	0x08010b41
 8010ab4:	08010b41 	.word	0x08010b41
 8010ab8:	08010b41 	.word	0x08010b41
 8010abc:	08010b41 	.word	0x08010b41
 8010ac0:	08010b41 	.word	0x08010b41
 8010ac4:	08010b41 	.word	0x08010b41
 8010ac8:	08010b41 	.word	0x08010b41
 8010acc:	08010b29 	.word	0x08010b29
 8010ad0:	08010b41 	.word	0x08010b41
 8010ad4:	08010b41 	.word	0x08010b41
 8010ad8:	08010b41 	.word	0x08010b41
 8010adc:	08010b41 	.word	0x08010b41
 8010ae0:	08010b41 	.word	0x08010b41
 8010ae4:	08010b41 	.word	0x08010b41
 8010ae8:	08010b41 	.word	0x08010b41
 8010aec:	08010b31 	.word	0x08010b31
 8010af0:	08010b41 	.word	0x08010b41
 8010af4:	08010b41 	.word	0x08010b41
 8010af8:	08010b41 	.word	0x08010b41
 8010afc:	08010b41 	.word	0x08010b41
 8010b00:	08010b41 	.word	0x08010b41
 8010b04:	08010b41 	.word	0x08010b41
 8010b08:	08010b41 	.word	0x08010b41
 8010b0c:	08010b39 	.word	0x08010b39
 8010b10:	2301      	movs	r3, #1
 8010b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b16:	e222      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010b18:	2304      	movs	r3, #4
 8010b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b1e:	e21e      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010b20:	2308      	movs	r3, #8
 8010b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b26:	e21a      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010b28:	2310      	movs	r3, #16
 8010b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b2e:	e216      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010b30:	2320      	movs	r3, #32
 8010b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b36:	e212      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010b38:	2340      	movs	r3, #64	; 0x40
 8010b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b3e:	e20e      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010b40:	2380      	movs	r3, #128	; 0x80
 8010b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b46:	e20a      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	4a69      	ldr	r2, [pc, #420]	; (8010cf4 <UART_SetConfig+0x33c>)
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d130      	bne.n	8010bb4 <UART_SetConfig+0x1fc>
 8010b52:	4b67      	ldr	r3, [pc, #412]	; (8010cf0 <UART_SetConfig+0x338>)
 8010b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b56:	f003 0307 	and.w	r3, r3, #7
 8010b5a:	2b05      	cmp	r3, #5
 8010b5c:	d826      	bhi.n	8010bac <UART_SetConfig+0x1f4>
 8010b5e:	a201      	add	r2, pc, #4	; (adr r2, 8010b64 <UART_SetConfig+0x1ac>)
 8010b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b64:	08010b7d 	.word	0x08010b7d
 8010b68:	08010b85 	.word	0x08010b85
 8010b6c:	08010b8d 	.word	0x08010b8d
 8010b70:	08010b95 	.word	0x08010b95
 8010b74:	08010b9d 	.word	0x08010b9d
 8010b78:	08010ba5 	.word	0x08010ba5
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b82:	e1ec      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010b84:	2304      	movs	r3, #4
 8010b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b8a:	e1e8      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010b8c:	2308      	movs	r3, #8
 8010b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b92:	e1e4      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010b94:	2310      	movs	r3, #16
 8010b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b9a:	e1e0      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010b9c:	2320      	movs	r3, #32
 8010b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ba2:	e1dc      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010ba4:	2340      	movs	r3, #64	; 0x40
 8010ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010baa:	e1d8      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010bac:	2380      	movs	r3, #128	; 0x80
 8010bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bb2:	e1d4      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	4a4f      	ldr	r2, [pc, #316]	; (8010cf8 <UART_SetConfig+0x340>)
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d130      	bne.n	8010c20 <UART_SetConfig+0x268>
 8010bbe:	4b4c      	ldr	r3, [pc, #304]	; (8010cf0 <UART_SetConfig+0x338>)
 8010bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bc2:	f003 0307 	and.w	r3, r3, #7
 8010bc6:	2b05      	cmp	r3, #5
 8010bc8:	d826      	bhi.n	8010c18 <UART_SetConfig+0x260>
 8010bca:	a201      	add	r2, pc, #4	; (adr r2, 8010bd0 <UART_SetConfig+0x218>)
 8010bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bd0:	08010be9 	.word	0x08010be9
 8010bd4:	08010bf1 	.word	0x08010bf1
 8010bd8:	08010bf9 	.word	0x08010bf9
 8010bdc:	08010c01 	.word	0x08010c01
 8010be0:	08010c09 	.word	0x08010c09
 8010be4:	08010c11 	.word	0x08010c11
 8010be8:	2300      	movs	r3, #0
 8010bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bee:	e1b6      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010bf0:	2304      	movs	r3, #4
 8010bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bf6:	e1b2      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010bf8:	2308      	movs	r3, #8
 8010bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bfe:	e1ae      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010c00:	2310      	movs	r3, #16
 8010c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c06:	e1aa      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010c08:	2320      	movs	r3, #32
 8010c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c0e:	e1a6      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010c10:	2340      	movs	r3, #64	; 0x40
 8010c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c16:	e1a2      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010c18:	2380      	movs	r3, #128	; 0x80
 8010c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c1e:	e19e      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	4a35      	ldr	r2, [pc, #212]	; (8010cfc <UART_SetConfig+0x344>)
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d130      	bne.n	8010c8c <UART_SetConfig+0x2d4>
 8010c2a:	4b31      	ldr	r3, [pc, #196]	; (8010cf0 <UART_SetConfig+0x338>)
 8010c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c2e:	f003 0307 	and.w	r3, r3, #7
 8010c32:	2b05      	cmp	r3, #5
 8010c34:	d826      	bhi.n	8010c84 <UART_SetConfig+0x2cc>
 8010c36:	a201      	add	r2, pc, #4	; (adr r2, 8010c3c <UART_SetConfig+0x284>)
 8010c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c3c:	08010c55 	.word	0x08010c55
 8010c40:	08010c5d 	.word	0x08010c5d
 8010c44:	08010c65 	.word	0x08010c65
 8010c48:	08010c6d 	.word	0x08010c6d
 8010c4c:	08010c75 	.word	0x08010c75
 8010c50:	08010c7d 	.word	0x08010c7d
 8010c54:	2300      	movs	r3, #0
 8010c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c5a:	e180      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010c5c:	2304      	movs	r3, #4
 8010c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c62:	e17c      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010c64:	2308      	movs	r3, #8
 8010c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c6a:	e178      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010c6c:	2310      	movs	r3, #16
 8010c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c72:	e174      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010c74:	2320      	movs	r3, #32
 8010c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c7a:	e170      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010c7c:	2340      	movs	r3, #64	; 0x40
 8010c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c82:	e16c      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010c84:	2380      	movs	r3, #128	; 0x80
 8010c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c8a:	e168      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4a1b      	ldr	r2, [pc, #108]	; (8010d00 <UART_SetConfig+0x348>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d142      	bne.n	8010d1c <UART_SetConfig+0x364>
 8010c96:	4b16      	ldr	r3, [pc, #88]	; (8010cf0 <UART_SetConfig+0x338>)
 8010c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c9a:	f003 0307 	and.w	r3, r3, #7
 8010c9e:	2b05      	cmp	r3, #5
 8010ca0:	d838      	bhi.n	8010d14 <UART_SetConfig+0x35c>
 8010ca2:	a201      	add	r2, pc, #4	; (adr r2, 8010ca8 <UART_SetConfig+0x2f0>)
 8010ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ca8:	08010cc1 	.word	0x08010cc1
 8010cac:	08010cc9 	.word	0x08010cc9
 8010cb0:	08010cd1 	.word	0x08010cd1
 8010cb4:	08010cd9 	.word	0x08010cd9
 8010cb8:	08010d05 	.word	0x08010d05
 8010cbc:	08010d0d 	.word	0x08010d0d
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cc6:	e14a      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010cc8:	2304      	movs	r3, #4
 8010cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cce:	e146      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010cd0:	2308      	movs	r3, #8
 8010cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cd6:	e142      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010cd8:	2310      	movs	r3, #16
 8010cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cde:	e13e      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010ce0:	cfff69f3 	.word	0xcfff69f3
 8010ce4:	58000c00 	.word	0x58000c00
 8010ce8:	11fff4ff 	.word	0x11fff4ff
 8010cec:	40011000 	.word	0x40011000
 8010cf0:	58024400 	.word	0x58024400
 8010cf4:	40004400 	.word	0x40004400
 8010cf8:	40004800 	.word	0x40004800
 8010cfc:	40004c00 	.word	0x40004c00
 8010d00:	40005000 	.word	0x40005000
 8010d04:	2320      	movs	r3, #32
 8010d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0a:	e128      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010d0c:	2340      	movs	r3, #64	; 0x40
 8010d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d12:	e124      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010d14:	2380      	movs	r3, #128	; 0x80
 8010d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d1a:	e120      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	4acb      	ldr	r2, [pc, #812]	; (8011050 <UART_SetConfig+0x698>)
 8010d22:	4293      	cmp	r3, r2
 8010d24:	d176      	bne.n	8010e14 <UART_SetConfig+0x45c>
 8010d26:	4bcb      	ldr	r3, [pc, #812]	; (8011054 <UART_SetConfig+0x69c>)
 8010d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010d2e:	2b28      	cmp	r3, #40	; 0x28
 8010d30:	d86c      	bhi.n	8010e0c <UART_SetConfig+0x454>
 8010d32:	a201      	add	r2, pc, #4	; (adr r2, 8010d38 <UART_SetConfig+0x380>)
 8010d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d38:	08010ddd 	.word	0x08010ddd
 8010d3c:	08010e0d 	.word	0x08010e0d
 8010d40:	08010e0d 	.word	0x08010e0d
 8010d44:	08010e0d 	.word	0x08010e0d
 8010d48:	08010e0d 	.word	0x08010e0d
 8010d4c:	08010e0d 	.word	0x08010e0d
 8010d50:	08010e0d 	.word	0x08010e0d
 8010d54:	08010e0d 	.word	0x08010e0d
 8010d58:	08010de5 	.word	0x08010de5
 8010d5c:	08010e0d 	.word	0x08010e0d
 8010d60:	08010e0d 	.word	0x08010e0d
 8010d64:	08010e0d 	.word	0x08010e0d
 8010d68:	08010e0d 	.word	0x08010e0d
 8010d6c:	08010e0d 	.word	0x08010e0d
 8010d70:	08010e0d 	.word	0x08010e0d
 8010d74:	08010e0d 	.word	0x08010e0d
 8010d78:	08010ded 	.word	0x08010ded
 8010d7c:	08010e0d 	.word	0x08010e0d
 8010d80:	08010e0d 	.word	0x08010e0d
 8010d84:	08010e0d 	.word	0x08010e0d
 8010d88:	08010e0d 	.word	0x08010e0d
 8010d8c:	08010e0d 	.word	0x08010e0d
 8010d90:	08010e0d 	.word	0x08010e0d
 8010d94:	08010e0d 	.word	0x08010e0d
 8010d98:	08010df5 	.word	0x08010df5
 8010d9c:	08010e0d 	.word	0x08010e0d
 8010da0:	08010e0d 	.word	0x08010e0d
 8010da4:	08010e0d 	.word	0x08010e0d
 8010da8:	08010e0d 	.word	0x08010e0d
 8010dac:	08010e0d 	.word	0x08010e0d
 8010db0:	08010e0d 	.word	0x08010e0d
 8010db4:	08010e0d 	.word	0x08010e0d
 8010db8:	08010dfd 	.word	0x08010dfd
 8010dbc:	08010e0d 	.word	0x08010e0d
 8010dc0:	08010e0d 	.word	0x08010e0d
 8010dc4:	08010e0d 	.word	0x08010e0d
 8010dc8:	08010e0d 	.word	0x08010e0d
 8010dcc:	08010e0d 	.word	0x08010e0d
 8010dd0:	08010e0d 	.word	0x08010e0d
 8010dd4:	08010e0d 	.word	0x08010e0d
 8010dd8:	08010e05 	.word	0x08010e05
 8010ddc:	2301      	movs	r3, #1
 8010dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de2:	e0bc      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010de4:	2304      	movs	r3, #4
 8010de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dea:	e0b8      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010dec:	2308      	movs	r3, #8
 8010dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df2:	e0b4      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010df4:	2310      	movs	r3, #16
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfa:	e0b0      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010dfc:	2320      	movs	r3, #32
 8010dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e02:	e0ac      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010e04:	2340      	movs	r3, #64	; 0x40
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0a:	e0a8      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010e0c:	2380      	movs	r3, #128	; 0x80
 8010e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e12:	e0a4      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	4a8f      	ldr	r2, [pc, #572]	; (8011058 <UART_SetConfig+0x6a0>)
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	d130      	bne.n	8010e80 <UART_SetConfig+0x4c8>
 8010e1e:	4b8d      	ldr	r3, [pc, #564]	; (8011054 <UART_SetConfig+0x69c>)
 8010e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e22:	f003 0307 	and.w	r3, r3, #7
 8010e26:	2b05      	cmp	r3, #5
 8010e28:	d826      	bhi.n	8010e78 <UART_SetConfig+0x4c0>
 8010e2a:	a201      	add	r2, pc, #4	; (adr r2, 8010e30 <UART_SetConfig+0x478>)
 8010e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e30:	08010e49 	.word	0x08010e49
 8010e34:	08010e51 	.word	0x08010e51
 8010e38:	08010e59 	.word	0x08010e59
 8010e3c:	08010e61 	.word	0x08010e61
 8010e40:	08010e69 	.word	0x08010e69
 8010e44:	08010e71 	.word	0x08010e71
 8010e48:	2300      	movs	r3, #0
 8010e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e4e:	e086      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010e50:	2304      	movs	r3, #4
 8010e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e56:	e082      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010e58:	2308      	movs	r3, #8
 8010e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5e:	e07e      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010e60:	2310      	movs	r3, #16
 8010e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e66:	e07a      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010e68:	2320      	movs	r3, #32
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e076      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010e70:	2340      	movs	r3, #64	; 0x40
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e072      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010e78:	2380      	movs	r3, #128	; 0x80
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7e:	e06e      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	4a75      	ldr	r2, [pc, #468]	; (801105c <UART_SetConfig+0x6a4>)
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d130      	bne.n	8010eec <UART_SetConfig+0x534>
 8010e8a:	4b72      	ldr	r3, [pc, #456]	; (8011054 <UART_SetConfig+0x69c>)
 8010e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e8e:	f003 0307 	and.w	r3, r3, #7
 8010e92:	2b05      	cmp	r3, #5
 8010e94:	d826      	bhi.n	8010ee4 <UART_SetConfig+0x52c>
 8010e96:	a201      	add	r2, pc, #4	; (adr r2, 8010e9c <UART_SetConfig+0x4e4>)
 8010e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e9c:	08010eb5 	.word	0x08010eb5
 8010ea0:	08010ebd 	.word	0x08010ebd
 8010ea4:	08010ec5 	.word	0x08010ec5
 8010ea8:	08010ecd 	.word	0x08010ecd
 8010eac:	08010ed5 	.word	0x08010ed5
 8010eb0:	08010edd 	.word	0x08010edd
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eba:	e050      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010ebc:	2304      	movs	r3, #4
 8010ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec2:	e04c      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010ec4:	2308      	movs	r3, #8
 8010ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eca:	e048      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010ecc:	2310      	movs	r3, #16
 8010ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed2:	e044      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010ed4:	2320      	movs	r3, #32
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eda:	e040      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010edc:	2340      	movs	r3, #64	; 0x40
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee2:	e03c      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010ee4:	2380      	movs	r3, #128	; 0x80
 8010ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eea:	e038      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	4a5b      	ldr	r2, [pc, #364]	; (8011060 <UART_SetConfig+0x6a8>)
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	d130      	bne.n	8010f58 <UART_SetConfig+0x5a0>
 8010ef6:	4b57      	ldr	r3, [pc, #348]	; (8011054 <UART_SetConfig+0x69c>)
 8010ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010efa:	f003 0307 	and.w	r3, r3, #7
 8010efe:	2b05      	cmp	r3, #5
 8010f00:	d826      	bhi.n	8010f50 <UART_SetConfig+0x598>
 8010f02:	a201      	add	r2, pc, #4	; (adr r2, 8010f08 <UART_SetConfig+0x550>)
 8010f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f08:	08010f21 	.word	0x08010f21
 8010f0c:	08010f29 	.word	0x08010f29
 8010f10:	08010f31 	.word	0x08010f31
 8010f14:	08010f39 	.word	0x08010f39
 8010f18:	08010f41 	.word	0x08010f41
 8010f1c:	08010f49 	.word	0x08010f49
 8010f20:	2302      	movs	r3, #2
 8010f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f26:	e01a      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010f28:	2304      	movs	r3, #4
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2e:	e016      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010f30:	2308      	movs	r3, #8
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f36:	e012      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010f38:	2310      	movs	r3, #16
 8010f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f3e:	e00e      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010f40:	2320      	movs	r3, #32
 8010f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f46:	e00a      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010f48:	2340      	movs	r3, #64	; 0x40
 8010f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f4e:	e006      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010f50:	2380      	movs	r3, #128	; 0x80
 8010f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f56:	e002      	b.n	8010f5e <UART_SetConfig+0x5a6>
 8010f58:	2380      	movs	r3, #128	; 0x80
 8010f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	4a3f      	ldr	r2, [pc, #252]	; (8011060 <UART_SetConfig+0x6a8>)
 8010f64:	4293      	cmp	r3, r2
 8010f66:	f040 80f8 	bne.w	801115a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010f6a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010f6e:	2b20      	cmp	r3, #32
 8010f70:	dc46      	bgt.n	8011000 <UART_SetConfig+0x648>
 8010f72:	2b02      	cmp	r3, #2
 8010f74:	f2c0 8082 	blt.w	801107c <UART_SetConfig+0x6c4>
 8010f78:	3b02      	subs	r3, #2
 8010f7a:	2b1e      	cmp	r3, #30
 8010f7c:	d87e      	bhi.n	801107c <UART_SetConfig+0x6c4>
 8010f7e:	a201      	add	r2, pc, #4	; (adr r2, 8010f84 <UART_SetConfig+0x5cc>)
 8010f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f84:	08011007 	.word	0x08011007
 8010f88:	0801107d 	.word	0x0801107d
 8010f8c:	0801100f 	.word	0x0801100f
 8010f90:	0801107d 	.word	0x0801107d
 8010f94:	0801107d 	.word	0x0801107d
 8010f98:	0801107d 	.word	0x0801107d
 8010f9c:	0801101f 	.word	0x0801101f
 8010fa0:	0801107d 	.word	0x0801107d
 8010fa4:	0801107d 	.word	0x0801107d
 8010fa8:	0801107d 	.word	0x0801107d
 8010fac:	0801107d 	.word	0x0801107d
 8010fb0:	0801107d 	.word	0x0801107d
 8010fb4:	0801107d 	.word	0x0801107d
 8010fb8:	0801107d 	.word	0x0801107d
 8010fbc:	0801102f 	.word	0x0801102f
 8010fc0:	0801107d 	.word	0x0801107d
 8010fc4:	0801107d 	.word	0x0801107d
 8010fc8:	0801107d 	.word	0x0801107d
 8010fcc:	0801107d 	.word	0x0801107d
 8010fd0:	0801107d 	.word	0x0801107d
 8010fd4:	0801107d 	.word	0x0801107d
 8010fd8:	0801107d 	.word	0x0801107d
 8010fdc:	0801107d 	.word	0x0801107d
 8010fe0:	0801107d 	.word	0x0801107d
 8010fe4:	0801107d 	.word	0x0801107d
 8010fe8:	0801107d 	.word	0x0801107d
 8010fec:	0801107d 	.word	0x0801107d
 8010ff0:	0801107d 	.word	0x0801107d
 8010ff4:	0801107d 	.word	0x0801107d
 8010ff8:	0801107d 	.word	0x0801107d
 8010ffc:	0801106f 	.word	0x0801106f
 8011000:	2b40      	cmp	r3, #64	; 0x40
 8011002:	d037      	beq.n	8011074 <UART_SetConfig+0x6bc>
 8011004:	e03a      	b.n	801107c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011006:	f7fa ff43 	bl	800be90 <HAL_RCCEx_GetD3PCLK1Freq>
 801100a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801100c:	e03c      	b.n	8011088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011012:	4618      	mov	r0, r3
 8011014:	f7fa ff52 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801101a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801101c:	e034      	b.n	8011088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801101e:	f107 0318 	add.w	r3, r7, #24
 8011022:	4618      	mov	r0, r3
 8011024:	f7fb f89e 	bl	800c164 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801102c:	e02c      	b.n	8011088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801102e:	4b09      	ldr	r3, [pc, #36]	; (8011054 <UART_SetConfig+0x69c>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	f003 0320 	and.w	r3, r3, #32
 8011036:	2b00      	cmp	r3, #0
 8011038:	d016      	beq.n	8011068 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801103a:	4b06      	ldr	r3, [pc, #24]	; (8011054 <UART_SetConfig+0x69c>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	08db      	lsrs	r3, r3, #3
 8011040:	f003 0303 	and.w	r3, r3, #3
 8011044:	4a07      	ldr	r2, [pc, #28]	; (8011064 <UART_SetConfig+0x6ac>)
 8011046:	fa22 f303 	lsr.w	r3, r2, r3
 801104a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801104c:	e01c      	b.n	8011088 <UART_SetConfig+0x6d0>
 801104e:	bf00      	nop
 8011050:	40011400 	.word	0x40011400
 8011054:	58024400 	.word	0x58024400
 8011058:	40007800 	.word	0x40007800
 801105c:	40007c00 	.word	0x40007c00
 8011060:	58000c00 	.word	0x58000c00
 8011064:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011068:	4b9d      	ldr	r3, [pc, #628]	; (80112e0 <UART_SetConfig+0x928>)
 801106a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801106c:	e00c      	b.n	8011088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801106e:	4b9d      	ldr	r3, [pc, #628]	; (80112e4 <UART_SetConfig+0x92c>)
 8011070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011072:	e009      	b.n	8011088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801107a:	e005      	b.n	8011088 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801107c:	2300      	movs	r3, #0
 801107e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011080:	2301      	movs	r3, #1
 8011082:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011086:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801108a:	2b00      	cmp	r3, #0
 801108c:	f000 81de 	beq.w	801144c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011094:	4a94      	ldr	r2, [pc, #592]	; (80112e8 <UART_SetConfig+0x930>)
 8011096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801109a:	461a      	mov	r2, r3
 801109c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801109e:	fbb3 f3f2 	udiv	r3, r3, r2
 80110a2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	685a      	ldr	r2, [r3, #4]
 80110a8:	4613      	mov	r3, r2
 80110aa:	005b      	lsls	r3, r3, #1
 80110ac:	4413      	add	r3, r2
 80110ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d305      	bcc.n	80110c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80110ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110bc:	429a      	cmp	r2, r3
 80110be:	d903      	bls.n	80110c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80110c0:	2301      	movs	r3, #1
 80110c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80110c6:	e1c1      	b.n	801144c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ca:	2200      	movs	r2, #0
 80110cc:	60bb      	str	r3, [r7, #8]
 80110ce:	60fa      	str	r2, [r7, #12]
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d4:	4a84      	ldr	r2, [pc, #528]	; (80112e8 <UART_SetConfig+0x930>)
 80110d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110da:	b29b      	uxth	r3, r3
 80110dc:	2200      	movs	r2, #0
 80110de:	603b      	str	r3, [r7, #0]
 80110e0:	607a      	str	r2, [r7, #4]
 80110e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80110ea:	f7ef f8f5 	bl	80002d8 <__aeabi_uldivmod>
 80110ee:	4602      	mov	r2, r0
 80110f0:	460b      	mov	r3, r1
 80110f2:	4610      	mov	r0, r2
 80110f4:	4619      	mov	r1, r3
 80110f6:	f04f 0200 	mov.w	r2, #0
 80110fa:	f04f 0300 	mov.w	r3, #0
 80110fe:	020b      	lsls	r3, r1, #8
 8011100:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011104:	0202      	lsls	r2, r0, #8
 8011106:	6979      	ldr	r1, [r7, #20]
 8011108:	6849      	ldr	r1, [r1, #4]
 801110a:	0849      	lsrs	r1, r1, #1
 801110c:	2000      	movs	r0, #0
 801110e:	460c      	mov	r4, r1
 8011110:	4605      	mov	r5, r0
 8011112:	eb12 0804 	adds.w	r8, r2, r4
 8011116:	eb43 0905 	adc.w	r9, r3, r5
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	685b      	ldr	r3, [r3, #4]
 801111e:	2200      	movs	r2, #0
 8011120:	469a      	mov	sl, r3
 8011122:	4693      	mov	fp, r2
 8011124:	4652      	mov	r2, sl
 8011126:	465b      	mov	r3, fp
 8011128:	4640      	mov	r0, r8
 801112a:	4649      	mov	r1, r9
 801112c:	f7ef f8d4 	bl	80002d8 <__aeabi_uldivmod>
 8011130:	4602      	mov	r2, r0
 8011132:	460b      	mov	r3, r1
 8011134:	4613      	mov	r3, r2
 8011136:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801113a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801113e:	d308      	bcc.n	8011152 <UART_SetConfig+0x79a>
 8011140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011146:	d204      	bcs.n	8011152 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801114e:	60da      	str	r2, [r3, #12]
 8011150:	e17c      	b.n	801144c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011152:	2301      	movs	r3, #1
 8011154:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011158:	e178      	b.n	801144c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	69db      	ldr	r3, [r3, #28]
 801115e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011162:	f040 80c5 	bne.w	80112f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011166:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801116a:	2b20      	cmp	r3, #32
 801116c:	dc48      	bgt.n	8011200 <UART_SetConfig+0x848>
 801116e:	2b00      	cmp	r3, #0
 8011170:	db7b      	blt.n	801126a <UART_SetConfig+0x8b2>
 8011172:	2b20      	cmp	r3, #32
 8011174:	d879      	bhi.n	801126a <UART_SetConfig+0x8b2>
 8011176:	a201      	add	r2, pc, #4	; (adr r2, 801117c <UART_SetConfig+0x7c4>)
 8011178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801117c:	08011207 	.word	0x08011207
 8011180:	0801120f 	.word	0x0801120f
 8011184:	0801126b 	.word	0x0801126b
 8011188:	0801126b 	.word	0x0801126b
 801118c:	08011217 	.word	0x08011217
 8011190:	0801126b 	.word	0x0801126b
 8011194:	0801126b 	.word	0x0801126b
 8011198:	0801126b 	.word	0x0801126b
 801119c:	08011227 	.word	0x08011227
 80111a0:	0801126b 	.word	0x0801126b
 80111a4:	0801126b 	.word	0x0801126b
 80111a8:	0801126b 	.word	0x0801126b
 80111ac:	0801126b 	.word	0x0801126b
 80111b0:	0801126b 	.word	0x0801126b
 80111b4:	0801126b 	.word	0x0801126b
 80111b8:	0801126b 	.word	0x0801126b
 80111bc:	08011237 	.word	0x08011237
 80111c0:	0801126b 	.word	0x0801126b
 80111c4:	0801126b 	.word	0x0801126b
 80111c8:	0801126b 	.word	0x0801126b
 80111cc:	0801126b 	.word	0x0801126b
 80111d0:	0801126b 	.word	0x0801126b
 80111d4:	0801126b 	.word	0x0801126b
 80111d8:	0801126b 	.word	0x0801126b
 80111dc:	0801126b 	.word	0x0801126b
 80111e0:	0801126b 	.word	0x0801126b
 80111e4:	0801126b 	.word	0x0801126b
 80111e8:	0801126b 	.word	0x0801126b
 80111ec:	0801126b 	.word	0x0801126b
 80111f0:	0801126b 	.word	0x0801126b
 80111f4:	0801126b 	.word	0x0801126b
 80111f8:	0801126b 	.word	0x0801126b
 80111fc:	0801125d 	.word	0x0801125d
 8011200:	2b40      	cmp	r3, #64	; 0x40
 8011202:	d02e      	beq.n	8011262 <UART_SetConfig+0x8aa>
 8011204:	e031      	b.n	801126a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011206:	f7f9 f9ff 	bl	800a608 <HAL_RCC_GetPCLK1Freq>
 801120a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801120c:	e033      	b.n	8011276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801120e:	f7f9 fa11 	bl	800a634 <HAL_RCC_GetPCLK2Freq>
 8011212:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011214:	e02f      	b.n	8011276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801121a:	4618      	mov	r0, r3
 801121c:	f7fa fe4e 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011224:	e027      	b.n	8011276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011226:	f107 0318 	add.w	r3, r7, #24
 801122a:	4618      	mov	r0, r3
 801122c:	f7fa ff9a 	bl	800c164 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011230:	69fb      	ldr	r3, [r7, #28]
 8011232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011234:	e01f      	b.n	8011276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011236:	4b2d      	ldr	r3, [pc, #180]	; (80112ec <UART_SetConfig+0x934>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f003 0320 	and.w	r3, r3, #32
 801123e:	2b00      	cmp	r3, #0
 8011240:	d009      	beq.n	8011256 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011242:	4b2a      	ldr	r3, [pc, #168]	; (80112ec <UART_SetConfig+0x934>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	08db      	lsrs	r3, r3, #3
 8011248:	f003 0303 	and.w	r3, r3, #3
 801124c:	4a24      	ldr	r2, [pc, #144]	; (80112e0 <UART_SetConfig+0x928>)
 801124e:	fa22 f303 	lsr.w	r3, r2, r3
 8011252:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011254:	e00f      	b.n	8011276 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011256:	4b22      	ldr	r3, [pc, #136]	; (80112e0 <UART_SetConfig+0x928>)
 8011258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801125a:	e00c      	b.n	8011276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801125c:	4b21      	ldr	r3, [pc, #132]	; (80112e4 <UART_SetConfig+0x92c>)
 801125e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011260:	e009      	b.n	8011276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011268:	e005      	b.n	8011276 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801126a:	2300      	movs	r3, #0
 801126c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801126e:	2301      	movs	r3, #1
 8011270:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011274:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011278:	2b00      	cmp	r3, #0
 801127a:	f000 80e7 	beq.w	801144c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011282:	4a19      	ldr	r2, [pc, #100]	; (80112e8 <UART_SetConfig+0x930>)
 8011284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011288:	461a      	mov	r2, r3
 801128a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801128c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011290:	005a      	lsls	r2, r3, #1
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	685b      	ldr	r3, [r3, #4]
 8011296:	085b      	lsrs	r3, r3, #1
 8011298:	441a      	add	r2, r3
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80112a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a6:	2b0f      	cmp	r3, #15
 80112a8:	d916      	bls.n	80112d8 <UART_SetConfig+0x920>
 80112aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112b0:	d212      	bcs.n	80112d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80112b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b4:	b29b      	uxth	r3, r3
 80112b6:	f023 030f 	bic.w	r3, r3, #15
 80112ba:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80112bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112be:	085b      	lsrs	r3, r3, #1
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	f003 0307 	and.w	r3, r3, #7
 80112c6:	b29a      	uxth	r2, r3
 80112c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80112ca:	4313      	orrs	r3, r2
 80112cc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80112d4:	60da      	str	r2, [r3, #12]
 80112d6:	e0b9      	b.n	801144c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80112d8:	2301      	movs	r3, #1
 80112da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80112de:	e0b5      	b.n	801144c <UART_SetConfig+0xa94>
 80112e0:	03d09000 	.word	0x03d09000
 80112e4:	003d0900 	.word	0x003d0900
 80112e8:	080174d8 	.word	0x080174d8
 80112ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80112f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80112f4:	2b20      	cmp	r3, #32
 80112f6:	dc49      	bgt.n	801138c <UART_SetConfig+0x9d4>
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	db7c      	blt.n	80113f6 <UART_SetConfig+0xa3e>
 80112fc:	2b20      	cmp	r3, #32
 80112fe:	d87a      	bhi.n	80113f6 <UART_SetConfig+0xa3e>
 8011300:	a201      	add	r2, pc, #4	; (adr r2, 8011308 <UART_SetConfig+0x950>)
 8011302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011306:	bf00      	nop
 8011308:	08011393 	.word	0x08011393
 801130c:	0801139b 	.word	0x0801139b
 8011310:	080113f7 	.word	0x080113f7
 8011314:	080113f7 	.word	0x080113f7
 8011318:	080113a3 	.word	0x080113a3
 801131c:	080113f7 	.word	0x080113f7
 8011320:	080113f7 	.word	0x080113f7
 8011324:	080113f7 	.word	0x080113f7
 8011328:	080113b3 	.word	0x080113b3
 801132c:	080113f7 	.word	0x080113f7
 8011330:	080113f7 	.word	0x080113f7
 8011334:	080113f7 	.word	0x080113f7
 8011338:	080113f7 	.word	0x080113f7
 801133c:	080113f7 	.word	0x080113f7
 8011340:	080113f7 	.word	0x080113f7
 8011344:	080113f7 	.word	0x080113f7
 8011348:	080113c3 	.word	0x080113c3
 801134c:	080113f7 	.word	0x080113f7
 8011350:	080113f7 	.word	0x080113f7
 8011354:	080113f7 	.word	0x080113f7
 8011358:	080113f7 	.word	0x080113f7
 801135c:	080113f7 	.word	0x080113f7
 8011360:	080113f7 	.word	0x080113f7
 8011364:	080113f7 	.word	0x080113f7
 8011368:	080113f7 	.word	0x080113f7
 801136c:	080113f7 	.word	0x080113f7
 8011370:	080113f7 	.word	0x080113f7
 8011374:	080113f7 	.word	0x080113f7
 8011378:	080113f7 	.word	0x080113f7
 801137c:	080113f7 	.word	0x080113f7
 8011380:	080113f7 	.word	0x080113f7
 8011384:	080113f7 	.word	0x080113f7
 8011388:	080113e9 	.word	0x080113e9
 801138c:	2b40      	cmp	r3, #64	; 0x40
 801138e:	d02e      	beq.n	80113ee <UART_SetConfig+0xa36>
 8011390:	e031      	b.n	80113f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011392:	f7f9 f939 	bl	800a608 <HAL_RCC_GetPCLK1Freq>
 8011396:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011398:	e033      	b.n	8011402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801139a:	f7f9 f94b 	bl	800a634 <HAL_RCC_GetPCLK2Freq>
 801139e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80113a0:	e02f      	b.n	8011402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80113a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7fa fd88 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80113ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113b0:	e027      	b.n	8011402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113b2:	f107 0318 	add.w	r3, r7, #24
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7fa fed4 	bl	800c164 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80113bc:	69fb      	ldr	r3, [r7, #28]
 80113be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113c0:	e01f      	b.n	8011402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113c2:	4b2d      	ldr	r3, [pc, #180]	; (8011478 <UART_SetConfig+0xac0>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	f003 0320 	and.w	r3, r3, #32
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d009      	beq.n	80113e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80113ce:	4b2a      	ldr	r3, [pc, #168]	; (8011478 <UART_SetConfig+0xac0>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	08db      	lsrs	r3, r3, #3
 80113d4:	f003 0303 	and.w	r3, r3, #3
 80113d8:	4a28      	ldr	r2, [pc, #160]	; (801147c <UART_SetConfig+0xac4>)
 80113da:	fa22 f303 	lsr.w	r3, r2, r3
 80113de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80113e0:	e00f      	b.n	8011402 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80113e2:	4b26      	ldr	r3, [pc, #152]	; (801147c <UART_SetConfig+0xac4>)
 80113e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113e6:	e00c      	b.n	8011402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80113e8:	4b25      	ldr	r3, [pc, #148]	; (8011480 <UART_SetConfig+0xac8>)
 80113ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113ec:	e009      	b.n	8011402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80113f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113f4:	e005      	b.n	8011402 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80113f6:	2300      	movs	r3, #0
 80113f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80113fa:	2301      	movs	r3, #1
 80113fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011400:	bf00      	nop
    }

    if (pclk != 0U)
 8011402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011404:	2b00      	cmp	r3, #0
 8011406:	d021      	beq.n	801144c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801140c:	4a1d      	ldr	r2, [pc, #116]	; (8011484 <UART_SetConfig+0xacc>)
 801140e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011412:	461a      	mov	r2, r3
 8011414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011416:	fbb3 f2f2 	udiv	r2, r3, r2
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	085b      	lsrs	r3, r3, #1
 8011420:	441a      	add	r2, r3
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	fbb2 f3f3 	udiv	r3, r2, r3
 801142a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801142c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801142e:	2b0f      	cmp	r3, #15
 8011430:	d909      	bls.n	8011446 <UART_SetConfig+0xa8e>
 8011432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011438:	d205      	bcs.n	8011446 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801143a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801143c:	b29a      	uxth	r2, r3
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	60da      	str	r2, [r3, #12]
 8011444:	e002      	b.n	801144c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011446:	2301      	movs	r3, #1
 8011448:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	2201      	movs	r2, #1
 8011450:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	2201      	movs	r2, #1
 8011458:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	2200      	movs	r2, #0
 8011460:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	2200      	movs	r2, #0
 8011466:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8011468:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801146c:	4618      	mov	r0, r3
 801146e:	3748      	adds	r7, #72	; 0x48
 8011470:	46bd      	mov	sp, r7
 8011472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011476:	bf00      	nop
 8011478:	58024400 	.word	0x58024400
 801147c:	03d09000 	.word	0x03d09000
 8011480:	003d0900 	.word	0x003d0900
 8011484:	080174d8 	.word	0x080174d8

08011488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011488:	b480      	push	{r7}
 801148a:	b083      	sub	sp, #12
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011494:	f003 0301 	and.w	r3, r3, #1
 8011498:	2b00      	cmp	r3, #0
 801149a:	d00a      	beq.n	80114b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	430a      	orrs	r2, r1
 80114b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114b6:	f003 0302 	and.w	r3, r3, #2
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d00a      	beq.n	80114d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	430a      	orrs	r2, r1
 80114d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114d8:	f003 0304 	and.w	r3, r3, #4
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d00a      	beq.n	80114f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	430a      	orrs	r2, r1
 80114f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114fa:	f003 0308 	and.w	r3, r3, #8
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d00a      	beq.n	8011518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	430a      	orrs	r2, r1
 8011516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801151c:	f003 0310 	and.w	r3, r3, #16
 8011520:	2b00      	cmp	r3, #0
 8011522:	d00a      	beq.n	801153a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	689b      	ldr	r3, [r3, #8]
 801152a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	430a      	orrs	r2, r1
 8011538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801153e:	f003 0320 	and.w	r3, r3, #32
 8011542:	2b00      	cmp	r3, #0
 8011544:	d00a      	beq.n	801155c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	689b      	ldr	r3, [r3, #8]
 801154c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	430a      	orrs	r2, r1
 801155a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011564:	2b00      	cmp	r3, #0
 8011566:	d01a      	beq.n	801159e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	430a      	orrs	r2, r1
 801157c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011586:	d10a      	bne.n	801159e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	430a      	orrs	r2, r1
 801159c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d00a      	beq.n	80115c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	685b      	ldr	r3, [r3, #4]
 80115b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	430a      	orrs	r2, r1
 80115be:	605a      	str	r2, [r3, #4]
  }
}
 80115c0:	bf00      	nop
 80115c2:	370c      	adds	r7, #12
 80115c4:	46bd      	mov	sp, r7
 80115c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ca:	4770      	bx	lr

080115cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b086      	sub	sp, #24
 80115d0:	af02      	add	r7, sp, #8
 80115d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2200      	movs	r2, #0
 80115d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80115dc:	f7f1 fae0 	bl	8002ba0 <HAL_GetTick>
 80115e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	f003 0308 	and.w	r3, r3, #8
 80115ec:	2b08      	cmp	r3, #8
 80115ee:	d10e      	bne.n	801160e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80115f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80115f4:	9300      	str	r3, [sp, #0]
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	2200      	movs	r2, #0
 80115fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f000 f82f 	bl	8011662 <UART_WaitOnFlagUntilTimeout>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d001      	beq.n	801160e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801160a:	2303      	movs	r3, #3
 801160c:	e025      	b.n	801165a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	f003 0304 	and.w	r3, r3, #4
 8011618:	2b04      	cmp	r3, #4
 801161a:	d10e      	bne.n	801163a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801161c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011620:	9300      	str	r3, [sp, #0]
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	2200      	movs	r2, #0
 8011626:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f000 f819 	bl	8011662 <UART_WaitOnFlagUntilTimeout>
 8011630:	4603      	mov	r3, r0
 8011632:	2b00      	cmp	r3, #0
 8011634:	d001      	beq.n	801163a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011636:	2303      	movs	r3, #3
 8011638:	e00f      	b.n	801165a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2220      	movs	r2, #32
 801163e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2220      	movs	r2, #32
 8011646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2200      	movs	r2, #0
 801164e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2200      	movs	r2, #0
 8011654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011658:	2300      	movs	r3, #0
}
 801165a:	4618      	mov	r0, r3
 801165c:	3710      	adds	r7, #16
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}

08011662 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011662:	b580      	push	{r7, lr}
 8011664:	b09c      	sub	sp, #112	; 0x70
 8011666:	af00      	add	r7, sp, #0
 8011668:	60f8      	str	r0, [r7, #12]
 801166a:	60b9      	str	r1, [r7, #8]
 801166c:	603b      	str	r3, [r7, #0]
 801166e:	4613      	mov	r3, r2
 8011670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011672:	e0a9      	b.n	80117c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801167a:	f000 80a5 	beq.w	80117c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801167e:	f7f1 fa8f 	bl	8002ba0 <HAL_GetTick>
 8011682:	4602      	mov	r2, r0
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	1ad3      	subs	r3, r2, r3
 8011688:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801168a:	429a      	cmp	r2, r3
 801168c:	d302      	bcc.n	8011694 <UART_WaitOnFlagUntilTimeout+0x32>
 801168e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011690:	2b00      	cmp	r3, #0
 8011692:	d140      	bne.n	8011716 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801169a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801169c:	e853 3f00 	ldrex	r3, [r3]
 80116a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80116a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80116a8:	667b      	str	r3, [r7, #100]	; 0x64
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	461a      	mov	r2, r3
 80116b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80116b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80116b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80116b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80116ba:	e841 2300 	strex	r3, r2, [r1]
 80116be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80116c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d1e6      	bne.n	8011694 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	3308      	adds	r3, #8
 80116cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116d0:	e853 3f00 	ldrex	r3, [r3]
 80116d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80116d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d8:	f023 0301 	bic.w	r3, r3, #1
 80116dc:	663b      	str	r3, [r7, #96]	; 0x60
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	3308      	adds	r3, #8
 80116e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80116e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80116ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116ee:	e841 2300 	strex	r3, r2, [r1]
 80116f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80116f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d1e5      	bne.n	80116c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	2220      	movs	r2, #32
 80116fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	2220      	movs	r2, #32
 8011706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	2200      	movs	r2, #0
 801170e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8011712:	2303      	movs	r3, #3
 8011714:	e069      	b.n	80117ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	f003 0304 	and.w	r3, r3, #4
 8011720:	2b00      	cmp	r3, #0
 8011722:	d051      	beq.n	80117c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	69db      	ldr	r3, [r3, #28]
 801172a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801172e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011732:	d149      	bne.n	80117c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801173c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011746:	e853 3f00 	ldrex	r3, [r3]
 801174a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801174e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011752:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	461a      	mov	r2, r3
 801175a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801175c:	637b      	str	r3, [r7, #52]	; 0x34
 801175e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011764:	e841 2300 	strex	r3, r2, [r1]
 8011768:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801176a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801176c:	2b00      	cmp	r3, #0
 801176e:	d1e6      	bne.n	801173e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	3308      	adds	r3, #8
 8011776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	e853 3f00 	ldrex	r3, [r3]
 801177e:	613b      	str	r3, [r7, #16]
   return(result);
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	f023 0301 	bic.w	r3, r3, #1
 8011786:	66bb      	str	r3, [r7, #104]	; 0x68
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	3308      	adds	r3, #8
 801178e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011790:	623a      	str	r2, [r7, #32]
 8011792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011794:	69f9      	ldr	r1, [r7, #28]
 8011796:	6a3a      	ldr	r2, [r7, #32]
 8011798:	e841 2300 	strex	r3, r2, [r1]
 801179c:	61bb      	str	r3, [r7, #24]
   return(result);
 801179e:	69bb      	ldr	r3, [r7, #24]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d1e5      	bne.n	8011770 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	2220      	movs	r2, #32
 80117a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	2220      	movs	r2, #32
 80117b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2220      	movs	r2, #32
 80117b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2200      	movs	r2, #0
 80117c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80117c4:	2303      	movs	r3, #3
 80117c6:	e010      	b.n	80117ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	69da      	ldr	r2, [r3, #28]
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	4013      	ands	r3, r2
 80117d2:	68ba      	ldr	r2, [r7, #8]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	bf0c      	ite	eq
 80117d8:	2301      	moveq	r3, #1
 80117da:	2300      	movne	r3, #0
 80117dc:	b2db      	uxtb	r3, r3
 80117de:	461a      	mov	r2, r3
 80117e0:	79fb      	ldrb	r3, [r7, #7]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	f43f af46 	beq.w	8011674 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80117e8:	2300      	movs	r3, #0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3770      	adds	r7, #112	; 0x70
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
	...

080117f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80117f4:	b480      	push	{r7}
 80117f6:	b095      	sub	sp, #84	; 0x54
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011804:	e853 3f00 	ldrex	r3, [r3]
 8011808:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801180c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011810:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	461a      	mov	r2, r3
 8011818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801181a:	643b      	str	r3, [r7, #64]	; 0x40
 801181c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801181e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011820:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011822:	e841 2300 	strex	r3, r2, [r1]
 8011826:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182a:	2b00      	cmp	r3, #0
 801182c:	d1e6      	bne.n	80117fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	3308      	adds	r3, #8
 8011834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011836:	6a3b      	ldr	r3, [r7, #32]
 8011838:	e853 3f00 	ldrex	r3, [r3]
 801183c:	61fb      	str	r3, [r7, #28]
   return(result);
 801183e:	69fa      	ldr	r2, [r7, #28]
 8011840:	4b1e      	ldr	r3, [pc, #120]	; (80118bc <UART_EndRxTransfer+0xc8>)
 8011842:	4013      	ands	r3, r2
 8011844:	64bb      	str	r3, [r7, #72]	; 0x48
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	3308      	adds	r3, #8
 801184c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801184e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011850:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011856:	e841 2300 	strex	r3, r2, [r1]
 801185a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185e:	2b00      	cmp	r3, #0
 8011860:	d1e5      	bne.n	801182e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011866:	2b01      	cmp	r3, #1
 8011868:	d118      	bne.n	801189c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	e853 3f00 	ldrex	r3, [r3]
 8011876:	60bb      	str	r3, [r7, #8]
   return(result);
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	f023 0310 	bic.w	r3, r3, #16
 801187e:	647b      	str	r3, [r7, #68]	; 0x44
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	461a      	mov	r2, r3
 8011886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011888:	61bb      	str	r3, [r7, #24]
 801188a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801188c:	6979      	ldr	r1, [r7, #20]
 801188e:	69ba      	ldr	r2, [r7, #24]
 8011890:	e841 2300 	strex	r3, r2, [r1]
 8011894:	613b      	str	r3, [r7, #16]
   return(result);
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d1e6      	bne.n	801186a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2220      	movs	r2, #32
 80118a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2200      	movs	r2, #0
 80118a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2200      	movs	r2, #0
 80118ae:	671a      	str	r2, [r3, #112]	; 0x70
}
 80118b0:	bf00      	nop
 80118b2:	3754      	adds	r7, #84	; 0x54
 80118b4:	46bd      	mov	sp, r7
 80118b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ba:	4770      	bx	lr
 80118bc:	effffffe 	.word	0xeffffffe

080118c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b084      	sub	sp, #16
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	2200      	movs	r2, #0
 80118d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	2200      	movs	r2, #0
 80118da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80118de:	68f8      	ldr	r0, [r7, #12]
 80118e0:	f7ff f854 	bl	801098c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80118e4:	bf00      	nop
 80118e6:	3710      	adds	r7, #16
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b088      	sub	sp, #32
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	e853 3f00 	ldrex	r3, [r3]
 8011900:	60bb      	str	r3, [r7, #8]
   return(result);
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011908:	61fb      	str	r3, [r7, #28]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	461a      	mov	r2, r3
 8011910:	69fb      	ldr	r3, [r7, #28]
 8011912:	61bb      	str	r3, [r7, #24]
 8011914:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011916:	6979      	ldr	r1, [r7, #20]
 8011918:	69ba      	ldr	r2, [r7, #24]
 801191a:	e841 2300 	strex	r3, r2, [r1]
 801191e:	613b      	str	r3, [r7, #16]
   return(result);
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d1e6      	bne.n	80118f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2220      	movs	r2, #32
 801192a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2200      	movs	r2, #0
 8011932:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f7ff f81f 	bl	8010978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801193a:	bf00      	nop
 801193c:	3720      	adds	r7, #32
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}

08011942 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011942:	b480      	push	{r7}
 8011944:	b083      	sub	sp, #12
 8011946:	af00      	add	r7, sp, #0
 8011948:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801194a:	bf00      	nop
 801194c:	370c      	adds	r7, #12
 801194e:	46bd      	mov	sp, r7
 8011950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011954:	4770      	bx	lr

08011956 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011956:	b480      	push	{r7}
 8011958:	b083      	sub	sp, #12
 801195a:	af00      	add	r7, sp, #0
 801195c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801195e:	bf00      	nop
 8011960:	370c      	adds	r7, #12
 8011962:	46bd      	mov	sp, r7
 8011964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011968:	4770      	bx	lr

0801196a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801196a:	b480      	push	{r7}
 801196c:	b083      	sub	sp, #12
 801196e:	af00      	add	r7, sp, #0
 8011970:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011972:	bf00      	nop
 8011974:	370c      	adds	r7, #12
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr

0801197e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801197e:	b480      	push	{r7}
 8011980:	b085      	sub	sp, #20
 8011982:	af00      	add	r7, sp, #0
 8011984:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801198c:	2b01      	cmp	r3, #1
 801198e:	d101      	bne.n	8011994 <HAL_UARTEx_DisableFifoMode+0x16>
 8011990:	2302      	movs	r3, #2
 8011992:	e027      	b.n	80119e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2201      	movs	r2, #1
 8011998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2224      	movs	r2, #36	; 0x24
 80119a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	681a      	ldr	r2, [r3, #0]
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	f022 0201 	bic.w	r2, r2, #1
 80119ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80119c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2200      	movs	r2, #0
 80119c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	68fa      	ldr	r2, [r7, #12]
 80119d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2220      	movs	r2, #32
 80119d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2200      	movs	r2, #0
 80119de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80119e2:	2300      	movs	r3, #0
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	3714      	adds	r7, #20
 80119e8:	46bd      	mov	sp, r7
 80119ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ee:	4770      	bx	lr

080119f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b084      	sub	sp, #16
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d101      	bne.n	8011a08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011a04:	2302      	movs	r3, #2
 8011a06:	e02d      	b.n	8011a64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2224      	movs	r2, #36	; 0x24
 8011a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	681a      	ldr	r2, [r3, #0]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	f022 0201 	bic.w	r2, r2, #1
 8011a2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	689b      	ldr	r3, [r3, #8]
 8011a36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	683a      	ldr	r2, [r7, #0]
 8011a40:	430a      	orrs	r2, r1
 8011a42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f000 f84f 	bl	8011ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	68fa      	ldr	r2, [r7, #12]
 8011a50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2220      	movs	r2, #32
 8011a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011a62:	2300      	movs	r3, #0
}
 8011a64:	4618      	mov	r0, r3
 8011a66:	3710      	adds	r7, #16
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}

08011a6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b084      	sub	sp, #16
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011a7c:	2b01      	cmp	r3, #1
 8011a7e:	d101      	bne.n	8011a84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011a80:	2302      	movs	r3, #2
 8011a82:	e02d      	b.n	8011ae0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2201      	movs	r2, #1
 8011a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2224      	movs	r2, #36	; 0x24
 8011a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	681a      	ldr	r2, [r3, #0]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	f022 0201 	bic.w	r2, r2, #1
 8011aaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	689b      	ldr	r3, [r3, #8]
 8011ab2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	683a      	ldr	r2, [r7, #0]
 8011abc:	430a      	orrs	r2, r1
 8011abe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f000 f811 	bl	8011ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	68fa      	ldr	r2, [r7, #12]
 8011acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2220      	movs	r2, #32
 8011ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011ade:	2300      	movs	r3, #0
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3710      	adds	r7, #16
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b085      	sub	sp, #20
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d108      	bne.n	8011b0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2201      	movs	r2, #1
 8011afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2201      	movs	r2, #1
 8011b04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011b08:	e031      	b.n	8011b6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011b0a:	2310      	movs	r3, #16
 8011b0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011b0e:	2310      	movs	r3, #16
 8011b10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	689b      	ldr	r3, [r3, #8]
 8011b18:	0e5b      	lsrs	r3, r3, #25
 8011b1a:	b2db      	uxtb	r3, r3
 8011b1c:	f003 0307 	and.w	r3, r3, #7
 8011b20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	689b      	ldr	r3, [r3, #8]
 8011b28:	0f5b      	lsrs	r3, r3, #29
 8011b2a:	b2db      	uxtb	r3, r3
 8011b2c:	f003 0307 	and.w	r3, r3, #7
 8011b30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011b32:	7bbb      	ldrb	r3, [r7, #14]
 8011b34:	7b3a      	ldrb	r2, [r7, #12]
 8011b36:	4911      	ldr	r1, [pc, #68]	; (8011b7c <UARTEx_SetNbDataToProcess+0x94>)
 8011b38:	5c8a      	ldrb	r2, [r1, r2]
 8011b3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011b3e:	7b3a      	ldrb	r2, [r7, #12]
 8011b40:	490f      	ldr	r1, [pc, #60]	; (8011b80 <UARTEx_SetNbDataToProcess+0x98>)
 8011b42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b48:	b29a      	uxth	r2, r3
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b50:	7bfb      	ldrb	r3, [r7, #15]
 8011b52:	7b7a      	ldrb	r2, [r7, #13]
 8011b54:	4909      	ldr	r1, [pc, #36]	; (8011b7c <UARTEx_SetNbDataToProcess+0x94>)
 8011b56:	5c8a      	ldrb	r2, [r1, r2]
 8011b58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011b5c:	7b7a      	ldrb	r2, [r7, #13]
 8011b5e:	4908      	ldr	r1, [pc, #32]	; (8011b80 <UARTEx_SetNbDataToProcess+0x98>)
 8011b60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b66:	b29a      	uxth	r2, r3
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011b6e:	bf00      	nop
 8011b70:	3714      	adds	r7, #20
 8011b72:	46bd      	mov	sp, r7
 8011b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b78:	4770      	bx	lr
 8011b7a:	bf00      	nop
 8011b7c:	080174f0 	.word	0x080174f0
 8011b80:	080174f8 	.word	0x080174f8

08011b84 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011b84:	b480      	push	{r7}
 8011b86:	b083      	sub	sp, #12
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
 8011b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d121      	bne.n	8011bda <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681a      	ldr	r2, [r3, #0]
 8011b9a:	4b27      	ldr	r3, [pc, #156]	; (8011c38 <FMC_SDRAM_Init+0xb4>)
 8011b9c:	4013      	ands	r3, r2
 8011b9e:	683a      	ldr	r2, [r7, #0]
 8011ba0:	6851      	ldr	r1, [r2, #4]
 8011ba2:	683a      	ldr	r2, [r7, #0]
 8011ba4:	6892      	ldr	r2, [r2, #8]
 8011ba6:	4311      	orrs	r1, r2
 8011ba8:	683a      	ldr	r2, [r7, #0]
 8011baa:	68d2      	ldr	r2, [r2, #12]
 8011bac:	4311      	orrs	r1, r2
 8011bae:	683a      	ldr	r2, [r7, #0]
 8011bb0:	6912      	ldr	r2, [r2, #16]
 8011bb2:	4311      	orrs	r1, r2
 8011bb4:	683a      	ldr	r2, [r7, #0]
 8011bb6:	6952      	ldr	r2, [r2, #20]
 8011bb8:	4311      	orrs	r1, r2
 8011bba:	683a      	ldr	r2, [r7, #0]
 8011bbc:	6992      	ldr	r2, [r2, #24]
 8011bbe:	4311      	orrs	r1, r2
 8011bc0:	683a      	ldr	r2, [r7, #0]
 8011bc2:	69d2      	ldr	r2, [r2, #28]
 8011bc4:	4311      	orrs	r1, r2
 8011bc6:	683a      	ldr	r2, [r7, #0]
 8011bc8:	6a12      	ldr	r2, [r2, #32]
 8011bca:	4311      	orrs	r1, r2
 8011bcc:	683a      	ldr	r2, [r7, #0]
 8011bce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011bd0:	430a      	orrs	r2, r1
 8011bd2:	431a      	orrs	r2, r3
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	601a      	str	r2, [r3, #0]
 8011bd8:	e026      	b.n	8011c28 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	69d9      	ldr	r1, [r3, #28]
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	6a1b      	ldr	r3, [r3, #32]
 8011bea:	4319      	orrs	r1, r3
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf0:	430b      	orrs	r3, r1
 8011bf2:	431a      	orrs	r2, r3
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	685a      	ldr	r2, [r3, #4]
 8011bfc:	4b0e      	ldr	r3, [pc, #56]	; (8011c38 <FMC_SDRAM_Init+0xb4>)
 8011bfe:	4013      	ands	r3, r2
 8011c00:	683a      	ldr	r2, [r7, #0]
 8011c02:	6851      	ldr	r1, [r2, #4]
 8011c04:	683a      	ldr	r2, [r7, #0]
 8011c06:	6892      	ldr	r2, [r2, #8]
 8011c08:	4311      	orrs	r1, r2
 8011c0a:	683a      	ldr	r2, [r7, #0]
 8011c0c:	68d2      	ldr	r2, [r2, #12]
 8011c0e:	4311      	orrs	r1, r2
 8011c10:	683a      	ldr	r2, [r7, #0]
 8011c12:	6912      	ldr	r2, [r2, #16]
 8011c14:	4311      	orrs	r1, r2
 8011c16:	683a      	ldr	r2, [r7, #0]
 8011c18:	6952      	ldr	r2, [r2, #20]
 8011c1a:	4311      	orrs	r1, r2
 8011c1c:	683a      	ldr	r2, [r7, #0]
 8011c1e:	6992      	ldr	r2, [r2, #24]
 8011c20:	430a      	orrs	r2, r1
 8011c22:	431a      	orrs	r2, r3
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8011c28:	2300      	movs	r3, #0
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	370c      	adds	r7, #12
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop
 8011c38:	ffff8000 	.word	0xffff8000

08011c3c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011c3c:	b480      	push	{r7}
 8011c3e:	b085      	sub	sp, #20
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	60f8      	str	r0, [r7, #12]
 8011c44:	60b9      	str	r1, [r7, #8]
 8011c46:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d128      	bne.n	8011ca0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	689b      	ldr	r3, [r3, #8]
 8011c52:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	1e59      	subs	r1, r3, #1
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	3b01      	subs	r3, #1
 8011c62:	011b      	lsls	r3, r3, #4
 8011c64:	4319      	orrs	r1, r3
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	689b      	ldr	r3, [r3, #8]
 8011c6a:	3b01      	subs	r3, #1
 8011c6c:	021b      	lsls	r3, r3, #8
 8011c6e:	4319      	orrs	r1, r3
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	68db      	ldr	r3, [r3, #12]
 8011c74:	3b01      	subs	r3, #1
 8011c76:	031b      	lsls	r3, r3, #12
 8011c78:	4319      	orrs	r1, r3
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	691b      	ldr	r3, [r3, #16]
 8011c7e:	3b01      	subs	r3, #1
 8011c80:	041b      	lsls	r3, r3, #16
 8011c82:	4319      	orrs	r1, r3
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	695b      	ldr	r3, [r3, #20]
 8011c88:	3b01      	subs	r3, #1
 8011c8a:	051b      	lsls	r3, r3, #20
 8011c8c:	4319      	orrs	r1, r3
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	699b      	ldr	r3, [r3, #24]
 8011c92:	3b01      	subs	r3, #1
 8011c94:	061b      	lsls	r3, r3, #24
 8011c96:	430b      	orrs	r3, r1
 8011c98:	431a      	orrs	r2, r3
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	609a      	str	r2, [r3, #8]
 8011c9e:	e02d      	b.n	8011cfc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	689a      	ldr	r2, [r3, #8]
 8011ca4:	4b19      	ldr	r3, [pc, #100]	; (8011d0c <FMC_SDRAM_Timing_Init+0xd0>)
 8011ca6:	4013      	ands	r3, r2
 8011ca8:	68ba      	ldr	r2, [r7, #8]
 8011caa:	68d2      	ldr	r2, [r2, #12]
 8011cac:	3a01      	subs	r2, #1
 8011cae:	0311      	lsls	r1, r2, #12
 8011cb0:	68ba      	ldr	r2, [r7, #8]
 8011cb2:	6952      	ldr	r2, [r2, #20]
 8011cb4:	3a01      	subs	r2, #1
 8011cb6:	0512      	lsls	r2, r2, #20
 8011cb8:	430a      	orrs	r2, r1
 8011cba:	431a      	orrs	r2, r3
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	68db      	ldr	r3, [r3, #12]
 8011cc4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	1e59      	subs	r1, r3, #1
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	685b      	ldr	r3, [r3, #4]
 8011cd2:	3b01      	subs	r3, #1
 8011cd4:	011b      	lsls	r3, r3, #4
 8011cd6:	4319      	orrs	r1, r3
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	689b      	ldr	r3, [r3, #8]
 8011cdc:	3b01      	subs	r3, #1
 8011cde:	021b      	lsls	r3, r3, #8
 8011ce0:	4319      	orrs	r1, r3
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	691b      	ldr	r3, [r3, #16]
 8011ce6:	3b01      	subs	r3, #1
 8011ce8:	041b      	lsls	r3, r3, #16
 8011cea:	4319      	orrs	r1, r3
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	699b      	ldr	r3, [r3, #24]
 8011cf0:	3b01      	subs	r3, #1
 8011cf2:	061b      	lsls	r3, r3, #24
 8011cf4:	430b      	orrs	r3, r1
 8011cf6:	431a      	orrs	r2, r3
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8011cfc:	2300      	movs	r3, #0
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	3714      	adds	r7, #20
 8011d02:	46bd      	mov	sp, r7
 8011d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d08:	4770      	bx	lr
 8011d0a:	bf00      	nop
 8011d0c:	ff0f0fff 	.word	0xff0f0fff

08011d10 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011d10:	b084      	sub	sp, #16
 8011d12:	b480      	push	{r7}
 8011d14:	b085      	sub	sp, #20
 8011d16:	af00      	add	r7, sp, #0
 8011d18:	6078      	str	r0, [r7, #4]
 8011d1a:	f107 001c 	add.w	r0, r7, #28
 8011d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011d22:	2300      	movs	r3, #0
 8011d24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011d26:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011d28:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011d2a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011d2e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011d32:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011d36:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011d38:	68fa      	ldr	r2, [r7, #12]
 8011d3a:	4313      	orrs	r3, r2
 8011d3c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	685a      	ldr	r2, [r3, #4]
 8011d42:	4b07      	ldr	r3, [pc, #28]	; (8011d60 <SDMMC_Init+0x50>)
 8011d44:	4013      	ands	r3, r2
 8011d46:	68fa      	ldr	r2, [r7, #12]
 8011d48:	431a      	orrs	r2, r3
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011d4e:	2300      	movs	r3, #0
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3714      	adds	r7, #20
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	b004      	add	sp, #16
 8011d5c:	4770      	bx	lr
 8011d5e:	bf00      	nop
 8011d60:	ffc02c00 	.word	0xffc02c00

08011d64 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011d64:	b480      	push	{r7}
 8011d66:	b083      	sub	sp, #12
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	370c      	adds	r7, #12
 8011d76:	46bd      	mov	sp, r7
 8011d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7c:	4770      	bx	lr

08011d7e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011d7e:	b480      	push	{r7}
 8011d80:	b083      	sub	sp, #12
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]
 8011d86:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	681a      	ldr	r2, [r3, #0]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011d92:	2300      	movs	r3, #0
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	370c      	adds	r7, #12
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr

08011da0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011da0:	b480      	push	{r7}
 8011da2:	b083      	sub	sp, #12
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	f043 0203 	orr.w	r2, r3, #3
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011db4:	2300      	movs	r3, #0
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	370c      	adds	r7, #12
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc0:	4770      	bx	lr

08011dc2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011dc2:	b480      	push	{r7}
 8011dc4:	b083      	sub	sp, #12
 8011dc6:	af00      	add	r7, sp, #0
 8011dc8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	f003 0303 	and.w	r3, r3, #3
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	370c      	adds	r7, #12
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ddc:	4770      	bx	lr
	...

08011de0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011de0:	b480      	push	{r7}
 8011de2:	b085      	sub	sp, #20
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011dea:	2300      	movs	r3, #0
 8011dec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	681a      	ldr	r2, [r3, #0]
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011dfe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011e04:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011e0a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011e0c:	68fa      	ldr	r2, [r7, #12]
 8011e0e:	4313      	orrs	r3, r2
 8011e10:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	68da      	ldr	r2, [r3, #12]
 8011e16:	4b06      	ldr	r3, [pc, #24]	; (8011e30 <SDMMC_SendCommand+0x50>)
 8011e18:	4013      	ands	r3, r2
 8011e1a:	68fa      	ldr	r2, [r7, #12]
 8011e1c:	431a      	orrs	r2, r3
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011e22:	2300      	movs	r3, #0
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3714      	adds	r7, #20
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr
 8011e30:	fffee0c0 	.word	0xfffee0c0

08011e34 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011e34:	b480      	push	{r7}
 8011e36:	b083      	sub	sp, #12
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	691b      	ldr	r3, [r3, #16]
 8011e40:	b2db      	uxtb	r3, r3
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	370c      	adds	r7, #12
 8011e46:	46bd      	mov	sp, r7
 8011e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4c:	4770      	bx	lr

08011e4e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011e4e:	b480      	push	{r7}
 8011e50:	b085      	sub	sp, #20
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	6078      	str	r0, [r7, #4]
 8011e56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	3314      	adds	r3, #20
 8011e5c:	461a      	mov	r2, r3
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	4413      	add	r3, r2
 8011e62:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	681b      	ldr	r3, [r3, #0]
}
 8011e68:	4618      	mov	r0, r3
 8011e6a:	3714      	adds	r7, #20
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e72:	4770      	bx	lr

08011e74 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011e74:	b480      	push	{r7}
 8011e76:	b085      	sub	sp, #20
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011e7e:	2300      	movs	r3, #0
 8011e80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	681a      	ldr	r2, [r3, #0]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	685a      	ldr	r2, [r3, #4]
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011e9a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011ea0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011ea6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011ea8:	68fa      	ldr	r2, [r7, #12]
 8011eaa:	4313      	orrs	r3, r2
 8011eac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	431a      	orrs	r2, r3
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011ebe:	2300      	movs	r3, #0

}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3714      	adds	r7, #20
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eca:	4770      	bx	lr

08011ecc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b088      	sub	sp, #32
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011eda:	2310      	movs	r3, #16
 8011edc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ee2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011eec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011eee:	f107 0308 	add.w	r3, r7, #8
 8011ef2:	4619      	mov	r1, r3
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f7ff ff73 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8011efe:	2110      	movs	r1, #16
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f000 fa5f 	bl	80123c4 <SDMMC_GetCmdResp1>
 8011f06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f08:	69fb      	ldr	r3, [r7, #28]
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3720      	adds	r7, #32
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}

08011f12 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011f12:	b580      	push	{r7, lr}
 8011f14:	b088      	sub	sp, #32
 8011f16:	af00      	add	r7, sp, #0
 8011f18:	6078      	str	r0, [r7, #4]
 8011f1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011f20:	2311      	movs	r3, #17
 8011f22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f34:	f107 0308 	add.w	r3, r7, #8
 8011f38:	4619      	mov	r1, r3
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f7ff ff50 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f44:	2111      	movs	r1, #17
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f000 fa3c 	bl	80123c4 <SDMMC_GetCmdResp1>
 8011f4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f4e:	69fb      	ldr	r3, [r7, #28]
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	3720      	adds	r7, #32
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b088      	sub	sp, #32
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011f66:	2312      	movs	r3, #18
 8011f68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f70:	2300      	movs	r3, #0
 8011f72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f7a:	f107 0308 	add.w	r3, r7, #8
 8011f7e:	4619      	mov	r1, r3
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f7ff ff2d 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f8a:	2112      	movs	r1, #18
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	f000 fa19 	bl	80123c4 <SDMMC_GetCmdResp1>
 8011f92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f94:	69fb      	ldr	r3, [r7, #28]
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	3720      	adds	r7, #32
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}

08011f9e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011f9e:	b580      	push	{r7, lr}
 8011fa0:	b088      	sub	sp, #32
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	6078      	str	r0, [r7, #4]
 8011fa6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011fac:	2318      	movs	r3, #24
 8011fae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fc0:	f107 0308 	add.w	r3, r7, #8
 8011fc4:	4619      	mov	r1, r3
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f7ff ff0a 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fd0:	2118      	movs	r1, #24
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f000 f9f6 	bl	80123c4 <SDMMC_GetCmdResp1>
 8011fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fda:	69fb      	ldr	r3, [r7, #28]
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3720      	adds	r7, #32
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b088      	sub	sp, #32
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011ff2:	2319      	movs	r3, #25
 8011ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012004:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012006:	f107 0308 	add.w	r3, r7, #8
 801200a:	4619      	mov	r1, r3
 801200c:	6878      	ldr	r0, [r7, #4]
 801200e:	f7ff fee7 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012012:	f241 3288 	movw	r2, #5000	; 0x1388
 8012016:	2119      	movs	r1, #25
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f000 f9d3 	bl	80123c4 <SDMMC_GetCmdResp1>
 801201e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012020:	69fb      	ldr	r3, [r7, #28]
}
 8012022:	4618      	mov	r0, r3
 8012024:	3720      	adds	r7, #32
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
	...

0801202c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b088      	sub	sp, #32
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012034:	2300      	movs	r3, #0
 8012036:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012038:	230c      	movs	r3, #12
 801203a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801203c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012040:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012042:	2300      	movs	r3, #0
 8012044:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801204a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	68db      	ldr	r3, [r3, #12]
 8012050:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012064:	f107 0308 	add.w	r3, r7, #8
 8012068:	4619      	mov	r1, r3
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f7ff feb8 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012070:	4a0b      	ldr	r2, [pc, #44]	; (80120a0 <SDMMC_CmdStopTransfer+0x74>)
 8012072:	210c      	movs	r1, #12
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f000 f9a5 	bl	80123c4 <SDMMC_GetCmdResp1>
 801207a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012088:	69fb      	ldr	r3, [r7, #28]
 801208a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801208e:	d101      	bne.n	8012094 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012090:	2300      	movs	r3, #0
 8012092:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012094:	69fb      	ldr	r3, [r7, #28]
}
 8012096:	4618      	mov	r0, r3
 8012098:	3720      	adds	r7, #32
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	05f5e100 	.word	0x05f5e100

080120a4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b088      	sub	sp, #32
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80120b2:	2307      	movs	r3, #7
 80120b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120bc:	2300      	movs	r3, #0
 80120be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120c6:	f107 0308 	add.w	r3, r7, #8
 80120ca:	4619      	mov	r1, r3
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f7ff fe87 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80120d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80120d6:	2107      	movs	r1, #7
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f000 f973 	bl	80123c4 <SDMMC_GetCmdResp1>
 80120de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120e0:	69fb      	ldr	r3, [r7, #28]
}
 80120e2:	4618      	mov	r0, r3
 80120e4:	3720      	adds	r7, #32
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}

080120ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80120ea:	b580      	push	{r7, lr}
 80120ec:	b088      	sub	sp, #32
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80120f2:	2300      	movs	r3, #0
 80120f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80120f6:	2300      	movs	r3, #0
 80120f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80120fa:	2300      	movs	r3, #0
 80120fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120fe:	2300      	movs	r3, #0
 8012100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012106:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012108:	f107 0308 	add.w	r3, r7, #8
 801210c:	4619      	mov	r1, r3
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f7ff fe66 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f000 fb97 	bl	8012848 <SDMMC_GetCmdError>
 801211a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801211c:	69fb      	ldr	r3, [r7, #28]
}
 801211e:	4618      	mov	r0, r3
 8012120:	3720      	adds	r7, #32
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}

08012126 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012126:	b580      	push	{r7, lr}
 8012128:	b088      	sub	sp, #32
 801212a:	af00      	add	r7, sp, #0
 801212c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801212e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012134:	2308      	movs	r3, #8
 8012136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012138:	f44f 7380 	mov.w	r3, #256	; 0x100
 801213c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801213e:	2300      	movs	r3, #0
 8012140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012146:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012148:	f107 0308 	add.w	r3, r7, #8
 801214c:	4619      	mov	r1, r3
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7ff fe46 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f000 fb29 	bl	80127ac <SDMMC_GetCmdResp7>
 801215a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801215c:	69fb      	ldr	r3, [r7, #28]
}
 801215e:	4618      	mov	r0, r3
 8012160:	3720      	adds	r7, #32
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}

08012166 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012166:	b580      	push	{r7, lr}
 8012168:	b088      	sub	sp, #32
 801216a:	af00      	add	r7, sp, #0
 801216c:	6078      	str	r0, [r7, #4]
 801216e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012174:	2337      	movs	r3, #55	; 0x37
 8012176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012178:	f44f 7380 	mov.w	r3, #256	; 0x100
 801217c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801217e:	2300      	movs	r3, #0
 8012180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012186:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012188:	f107 0308 	add.w	r3, r7, #8
 801218c:	4619      	mov	r1, r3
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f7ff fe26 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012194:	f241 3288 	movw	r2, #5000	; 0x1388
 8012198:	2137      	movs	r1, #55	; 0x37
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f000 f912 	bl	80123c4 <SDMMC_GetCmdResp1>
 80121a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121a2:	69fb      	ldr	r3, [r7, #28]
}
 80121a4:	4618      	mov	r0, r3
 80121a6:	3720      	adds	r7, #32
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}

080121ac <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b088      	sub	sp, #32
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
 80121b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80121ba:	2329      	movs	r3, #41	; 0x29
 80121bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121c4:	2300      	movs	r3, #0
 80121c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121ce:	f107 0308 	add.w	r3, r7, #8
 80121d2:	4619      	mov	r1, r3
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f7ff fe03 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f000 fa2e 	bl	801263c <SDMMC_GetCmdResp3>
 80121e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121e2:	69fb      	ldr	r3, [r7, #28]
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3720      	adds	r7, #32
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}

080121ec <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b088      	sub	sp, #32
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80121fa:	2306      	movs	r3, #6
 80121fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012202:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012204:	2300      	movs	r3, #0
 8012206:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801220c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801220e:	f107 0308 	add.w	r3, r7, #8
 8012212:	4619      	mov	r1, r3
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f7ff fde3 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801221a:	f241 3288 	movw	r2, #5000	; 0x1388
 801221e:	2106      	movs	r1, #6
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f000 f8cf 	bl	80123c4 <SDMMC_GetCmdResp1>
 8012226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012228:	69fb      	ldr	r3, [r7, #28]
}
 801222a:	4618      	mov	r0, r3
 801222c:	3720      	adds	r7, #32
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}

08012232 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012232:	b580      	push	{r7, lr}
 8012234:	b088      	sub	sp, #32
 8012236:	af00      	add	r7, sp, #0
 8012238:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801223a:	2300      	movs	r3, #0
 801223c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801223e:	2333      	movs	r3, #51	; 0x33
 8012240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012246:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012248:	2300      	movs	r3, #0
 801224a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801224c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012250:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012252:	f107 0308 	add.w	r3, r7, #8
 8012256:	4619      	mov	r1, r3
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f7ff fdc1 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012262:	2133      	movs	r1, #51	; 0x33
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f000 f8ad 	bl	80123c4 <SDMMC_GetCmdResp1>
 801226a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801226c:	69fb      	ldr	r3, [r7, #28]
}
 801226e:	4618      	mov	r0, r3
 8012270:	3720      	adds	r7, #32
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}

08012276 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012276:	b580      	push	{r7, lr}
 8012278:	b088      	sub	sp, #32
 801227a:	af00      	add	r7, sp, #0
 801227c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801227e:	2300      	movs	r3, #0
 8012280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012282:	2302      	movs	r3, #2
 8012284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012286:	f44f 7340 	mov.w	r3, #768	; 0x300
 801228a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801228c:	2300      	movs	r3, #0
 801228e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012294:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012296:	f107 0308 	add.w	r3, r7, #8
 801229a:	4619      	mov	r1, r3
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f7ff fd9f 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f000 f980 	bl	80125a8 <SDMMC_GetCmdResp2>
 80122a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122aa:	69fb      	ldr	r3, [r7, #28]
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3720      	adds	r7, #32
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b088      	sub	sp, #32
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
 80122bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80122c2:	2309      	movs	r3, #9
 80122c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80122c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80122ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122cc:	2300      	movs	r3, #0
 80122ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122d6:	f107 0308 	add.w	r3, r7, #8
 80122da:	4619      	mov	r1, r3
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f7ff fd7f 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f000 f960 	bl	80125a8 <SDMMC_GetCmdResp2>
 80122e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122ea:	69fb      	ldr	r3, [r7, #28]
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	3720      	adds	r7, #32
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b088      	sub	sp, #32
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80122fe:	2300      	movs	r3, #0
 8012300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012302:	2303      	movs	r3, #3
 8012304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012306:	f44f 7380 	mov.w	r3, #256	; 0x100
 801230a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801230c:	2300      	movs	r3, #0
 801230e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012314:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012316:	f107 0308 	add.w	r3, r7, #8
 801231a:	4619      	mov	r1, r3
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f7ff fd5f 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012322:	683a      	ldr	r2, [r7, #0]
 8012324:	2103      	movs	r1, #3
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f000 f9c8 	bl	80126bc <SDMMC_GetCmdResp6>
 801232c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801232e:	69fb      	ldr	r3, [r7, #28]
}
 8012330:	4618      	mov	r0, r3
 8012332:	3720      	adds	r7, #32
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b088      	sub	sp, #32
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012346:	230d      	movs	r3, #13
 8012348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801234a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801234e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012350:	2300      	movs	r3, #0
 8012352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012358:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801235a:	f107 0308 	add.w	r3, r7, #8
 801235e:	4619      	mov	r1, r3
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f7ff fd3d 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012366:	f241 3288 	movw	r2, #5000	; 0x1388
 801236a:	210d      	movs	r1, #13
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f000 f829 	bl	80123c4 <SDMMC_GetCmdResp1>
 8012372:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012374:	69fb      	ldr	r3, [r7, #28]
}
 8012376:	4618      	mov	r0, r3
 8012378:	3720      	adds	r7, #32
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}

0801237e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801237e:	b580      	push	{r7, lr}
 8012380:	b088      	sub	sp, #32
 8012382:	af00      	add	r7, sp, #0
 8012384:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012386:	2300      	movs	r3, #0
 8012388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801238a:	230d      	movs	r3, #13
 801238c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801238e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012392:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012394:	2300      	movs	r3, #0
 8012396:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801239c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801239e:	f107 0308 	add.w	r3, r7, #8
 80123a2:	4619      	mov	r1, r3
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f7ff fd1b 	bl	8011de0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80123aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80123ae:	210d      	movs	r1, #13
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	f000 f807 	bl	80123c4 <SDMMC_GetCmdResp1>
 80123b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123b8:	69fb      	ldr	r3, [r7, #28]
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3720      	adds	r7, #32
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
	...

080123c4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b088      	sub	sp, #32
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	60f8      	str	r0, [r7, #12]
 80123cc:	460b      	mov	r3, r1
 80123ce:	607a      	str	r2, [r7, #4]
 80123d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80123d2:	4b70      	ldr	r3, [pc, #448]	; (8012594 <SDMMC_GetCmdResp1+0x1d0>)
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	4a70      	ldr	r2, [pc, #448]	; (8012598 <SDMMC_GetCmdResp1+0x1d4>)
 80123d8:	fba2 2303 	umull	r2, r3, r2, r3
 80123dc:	0a5a      	lsrs	r2, r3, #9
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	fb02 f303 	mul.w	r3, r2, r3
 80123e4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	1e5a      	subs	r2, r3, #1
 80123ea:	61fa      	str	r2, [r7, #28]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d102      	bne.n	80123f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80123f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80123f4:	e0c9      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123fa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80123fc:	69ba      	ldr	r2, [r7, #24]
 80123fe:	4b67      	ldr	r3, [pc, #412]	; (801259c <SDMMC_GetCmdResp1+0x1d8>)
 8012400:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012402:	2b00      	cmp	r3, #0
 8012404:	d0ef      	beq.n	80123e6 <SDMMC_GetCmdResp1+0x22>
 8012406:	69bb      	ldr	r3, [r7, #24]
 8012408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801240c:	2b00      	cmp	r3, #0
 801240e:	d1ea      	bne.n	80123e6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012414:	f003 0304 	and.w	r3, r3, #4
 8012418:	2b00      	cmp	r3, #0
 801241a:	d004      	beq.n	8012426 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	2204      	movs	r2, #4
 8012420:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012422:	2304      	movs	r3, #4
 8012424:	e0b1      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801242a:	f003 0301 	and.w	r3, r3, #1
 801242e:	2b00      	cmp	r3, #0
 8012430:	d004      	beq.n	801243c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	2201      	movs	r2, #1
 8012436:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012438:	2301      	movs	r3, #1
 801243a:	e0a6      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	4a58      	ldr	r2, [pc, #352]	; (80125a0 <SDMMC_GetCmdResp1+0x1dc>)
 8012440:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012442:	68f8      	ldr	r0, [r7, #12]
 8012444:	f7ff fcf6 	bl	8011e34 <SDMMC_GetCommandResponse>
 8012448:	4603      	mov	r3, r0
 801244a:	461a      	mov	r2, r3
 801244c:	7afb      	ldrb	r3, [r7, #11]
 801244e:	4293      	cmp	r3, r2
 8012450:	d001      	beq.n	8012456 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012452:	2301      	movs	r3, #1
 8012454:	e099      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012456:	2100      	movs	r1, #0
 8012458:	68f8      	ldr	r0, [r7, #12]
 801245a:	f7ff fcf8 	bl	8011e4e <SDMMC_GetResponse>
 801245e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012460:	697a      	ldr	r2, [r7, #20]
 8012462:	4b50      	ldr	r3, [pc, #320]	; (80125a4 <SDMMC_GetCmdResp1+0x1e0>)
 8012464:	4013      	ands	r3, r2
 8012466:	2b00      	cmp	r3, #0
 8012468:	d101      	bne.n	801246e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801246a:	2300      	movs	r3, #0
 801246c:	e08d      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	2b00      	cmp	r3, #0
 8012472:	da02      	bge.n	801247a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012474:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012478:	e087      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012480:	2b00      	cmp	r3, #0
 8012482:	d001      	beq.n	8012488 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012484:	2340      	movs	r3, #64	; 0x40
 8012486:	e080      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012488:	697b      	ldr	r3, [r7, #20]
 801248a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801248e:	2b00      	cmp	r3, #0
 8012490:	d001      	beq.n	8012496 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012492:	2380      	movs	r3, #128	; 0x80
 8012494:	e079      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801249c:	2b00      	cmp	r3, #0
 801249e:	d002      	beq.n	80124a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80124a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124a4:	e071      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d002      	beq.n	80124b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80124b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124b4:	e069      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80124b6:	697b      	ldr	r3, [r7, #20]
 80124b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d002      	beq.n	80124c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80124c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124c4:	e061      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d002      	beq.n	80124d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80124d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80124d4:	e059      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d002      	beq.n	80124e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80124e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124e4:	e051      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d002      	beq.n	80124f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80124f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80124f4:	e049      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80124f6:	697b      	ldr	r3, [r7, #20]
 80124f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d002      	beq.n	8012506 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012500:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012504:	e041      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801250c:	2b00      	cmp	r3, #0
 801250e:	d002      	beq.n	8012516 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012514:	e039      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801251c:	2b00      	cmp	r3, #0
 801251e:	d002      	beq.n	8012526 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012524:	e031      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801252c:	2b00      	cmp	r3, #0
 801252e:	d002      	beq.n	8012536 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012530:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012534:	e029      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801253c:	2b00      	cmp	r3, #0
 801253e:	d002      	beq.n	8012546 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012540:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012544:	e021      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801254c:	2b00      	cmp	r3, #0
 801254e:	d002      	beq.n	8012556 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012550:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012554:	e019      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801255c:	2b00      	cmp	r3, #0
 801255e:	d002      	beq.n	8012566 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012560:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012564:	e011      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801256c:	2b00      	cmp	r3, #0
 801256e:	d002      	beq.n	8012576 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012570:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012574:	e009      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	f003 0308 	and.w	r3, r3, #8
 801257c:	2b00      	cmp	r3, #0
 801257e:	d002      	beq.n	8012586 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012580:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012584:	e001      	b.n	801258a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801258a:	4618      	mov	r0, r3
 801258c:	3720      	adds	r7, #32
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}
 8012592:	bf00      	nop
 8012594:	20000000 	.word	0x20000000
 8012598:	10624dd3 	.word	0x10624dd3
 801259c:	00200045 	.word	0x00200045
 80125a0:	002000c5 	.word	0x002000c5
 80125a4:	fdffe008 	.word	0xfdffe008

080125a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80125a8:	b480      	push	{r7}
 80125aa:	b085      	sub	sp, #20
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80125b0:	4b1f      	ldr	r3, [pc, #124]	; (8012630 <SDMMC_GetCmdResp2+0x88>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	4a1f      	ldr	r2, [pc, #124]	; (8012634 <SDMMC_GetCmdResp2+0x8c>)
 80125b6:	fba2 2303 	umull	r2, r3, r2, r3
 80125ba:	0a5b      	lsrs	r3, r3, #9
 80125bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80125c0:	fb02 f303 	mul.w	r3, r2, r3
 80125c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	1e5a      	subs	r2, r3, #1
 80125ca:	60fa      	str	r2, [r7, #12]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d102      	bne.n	80125d6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80125d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80125d4:	e026      	b.n	8012624 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125da:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d0ef      	beq.n	80125c6 <SDMMC_GetCmdResp2+0x1e>
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d1ea      	bne.n	80125c6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125f4:	f003 0304 	and.w	r3, r3, #4
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d004      	beq.n	8012606 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	2204      	movs	r2, #4
 8012600:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012602:	2304      	movs	r3, #4
 8012604:	e00e      	b.n	8012624 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801260a:	f003 0301 	and.w	r3, r3, #1
 801260e:	2b00      	cmp	r3, #0
 8012610:	d004      	beq.n	801261c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2201      	movs	r2, #1
 8012616:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012618:	2301      	movs	r3, #1
 801261a:	e003      	b.n	8012624 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	4a06      	ldr	r2, [pc, #24]	; (8012638 <SDMMC_GetCmdResp2+0x90>)
 8012620:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012622:	2300      	movs	r3, #0
}
 8012624:	4618      	mov	r0, r3
 8012626:	3714      	adds	r7, #20
 8012628:	46bd      	mov	sp, r7
 801262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262e:	4770      	bx	lr
 8012630:	20000000 	.word	0x20000000
 8012634:	10624dd3 	.word	0x10624dd3
 8012638:	002000c5 	.word	0x002000c5

0801263c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801263c:	b480      	push	{r7}
 801263e:	b085      	sub	sp, #20
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012644:	4b1a      	ldr	r3, [pc, #104]	; (80126b0 <SDMMC_GetCmdResp3+0x74>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	4a1a      	ldr	r2, [pc, #104]	; (80126b4 <SDMMC_GetCmdResp3+0x78>)
 801264a:	fba2 2303 	umull	r2, r3, r2, r3
 801264e:	0a5b      	lsrs	r3, r3, #9
 8012650:	f241 3288 	movw	r2, #5000	; 0x1388
 8012654:	fb02 f303 	mul.w	r3, r2, r3
 8012658:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	1e5a      	subs	r2, r3, #1
 801265e:	60fa      	str	r2, [r7, #12]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d102      	bne.n	801266a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012664:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012668:	e01b      	b.n	80126a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801266e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012676:	2b00      	cmp	r3, #0
 8012678:	d0ef      	beq.n	801265a <SDMMC_GetCmdResp3+0x1e>
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012680:	2b00      	cmp	r3, #0
 8012682:	d1ea      	bne.n	801265a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012688:	f003 0304 	and.w	r3, r3, #4
 801268c:	2b00      	cmp	r3, #0
 801268e:	d004      	beq.n	801269a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2204      	movs	r2, #4
 8012694:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012696:	2304      	movs	r3, #4
 8012698:	e003      	b.n	80126a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	4a06      	ldr	r2, [pc, #24]	; (80126b8 <SDMMC_GetCmdResp3+0x7c>)
 801269e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80126a0:	2300      	movs	r3, #0
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	3714      	adds	r7, #20
 80126a6:	46bd      	mov	sp, r7
 80126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ac:	4770      	bx	lr
 80126ae:	bf00      	nop
 80126b0:	20000000 	.word	0x20000000
 80126b4:	10624dd3 	.word	0x10624dd3
 80126b8:	002000c5 	.word	0x002000c5

080126bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b088      	sub	sp, #32
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	60f8      	str	r0, [r7, #12]
 80126c4:	460b      	mov	r3, r1
 80126c6:	607a      	str	r2, [r7, #4]
 80126c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80126ca:	4b35      	ldr	r3, [pc, #212]	; (80127a0 <SDMMC_GetCmdResp6+0xe4>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	4a35      	ldr	r2, [pc, #212]	; (80127a4 <SDMMC_GetCmdResp6+0xe8>)
 80126d0:	fba2 2303 	umull	r2, r3, r2, r3
 80126d4:	0a5b      	lsrs	r3, r3, #9
 80126d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80126da:	fb02 f303 	mul.w	r3, r2, r3
 80126de:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	1e5a      	subs	r2, r3, #1
 80126e4:	61fa      	str	r2, [r7, #28]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d102      	bne.n	80126f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80126ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80126ee:	e052      	b.n	8012796 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126f4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80126f6:	69bb      	ldr	r3, [r7, #24]
 80126f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d0ef      	beq.n	80126e0 <SDMMC_GetCmdResp6+0x24>
 8012700:	69bb      	ldr	r3, [r7, #24]
 8012702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012706:	2b00      	cmp	r3, #0
 8012708:	d1ea      	bne.n	80126e0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801270e:	f003 0304 	and.w	r3, r3, #4
 8012712:	2b00      	cmp	r3, #0
 8012714:	d004      	beq.n	8012720 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	2204      	movs	r2, #4
 801271a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801271c:	2304      	movs	r3, #4
 801271e:	e03a      	b.n	8012796 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012724:	f003 0301 	and.w	r3, r3, #1
 8012728:	2b00      	cmp	r3, #0
 801272a:	d004      	beq.n	8012736 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	2201      	movs	r2, #1
 8012730:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012732:	2301      	movs	r3, #1
 8012734:	e02f      	b.n	8012796 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012736:	68f8      	ldr	r0, [r7, #12]
 8012738:	f7ff fb7c 	bl	8011e34 <SDMMC_GetCommandResponse>
 801273c:	4603      	mov	r3, r0
 801273e:	461a      	mov	r2, r3
 8012740:	7afb      	ldrb	r3, [r7, #11]
 8012742:	4293      	cmp	r3, r2
 8012744:	d001      	beq.n	801274a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012746:	2301      	movs	r3, #1
 8012748:	e025      	b.n	8012796 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	4a16      	ldr	r2, [pc, #88]	; (80127a8 <SDMMC_GetCmdResp6+0xec>)
 801274e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012750:	2100      	movs	r1, #0
 8012752:	68f8      	ldr	r0, [r7, #12]
 8012754:	f7ff fb7b 	bl	8011e4e <SDMMC_GetResponse>
 8012758:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012760:	2b00      	cmp	r3, #0
 8012762:	d106      	bne.n	8012772 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	0c1b      	lsrs	r3, r3, #16
 8012768:	b29a      	uxth	r2, r3
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801276e:	2300      	movs	r3, #0
 8012770:	e011      	b.n	8012796 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012778:	2b00      	cmp	r3, #0
 801277a:	d002      	beq.n	8012782 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801277c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012780:	e009      	b.n	8012796 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012782:	697b      	ldr	r3, [r7, #20]
 8012784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012788:	2b00      	cmp	r3, #0
 801278a:	d002      	beq.n	8012792 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801278c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012790:	e001      	b.n	8012796 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012796:	4618      	mov	r0, r3
 8012798:	3720      	adds	r7, #32
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
 801279e:	bf00      	nop
 80127a0:	20000000 	.word	0x20000000
 80127a4:	10624dd3 	.word	0x10624dd3
 80127a8:	002000c5 	.word	0x002000c5

080127ac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80127ac:	b480      	push	{r7}
 80127ae:	b085      	sub	sp, #20
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80127b4:	4b22      	ldr	r3, [pc, #136]	; (8012840 <SDMMC_GetCmdResp7+0x94>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	4a22      	ldr	r2, [pc, #136]	; (8012844 <SDMMC_GetCmdResp7+0x98>)
 80127ba:	fba2 2303 	umull	r2, r3, r2, r3
 80127be:	0a5b      	lsrs	r3, r3, #9
 80127c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80127c4:	fb02 f303 	mul.w	r3, r2, r3
 80127c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	1e5a      	subs	r2, r3, #1
 80127ce:	60fa      	str	r2, [r7, #12]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d102      	bne.n	80127da <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80127d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127d8:	e02c      	b.n	8012834 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127de:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d0ef      	beq.n	80127ca <SDMMC_GetCmdResp7+0x1e>
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d1ea      	bne.n	80127ca <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127f8:	f003 0304 	and.w	r3, r3, #4
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d004      	beq.n	801280a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2204      	movs	r2, #4
 8012804:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012806:	2304      	movs	r3, #4
 8012808:	e014      	b.n	8012834 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801280e:	f003 0301 	and.w	r3, r3, #1
 8012812:	2b00      	cmp	r3, #0
 8012814:	d004      	beq.n	8012820 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	2201      	movs	r2, #1
 801281a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801281c:	2301      	movs	r3, #1
 801281e:	e009      	b.n	8012834 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012828:	2b00      	cmp	r3, #0
 801282a:	d002      	beq.n	8012832 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2240      	movs	r2, #64	; 0x40
 8012830:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012832:	2300      	movs	r3, #0

}
 8012834:	4618      	mov	r0, r3
 8012836:	3714      	adds	r7, #20
 8012838:	46bd      	mov	sp, r7
 801283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283e:	4770      	bx	lr
 8012840:	20000000 	.word	0x20000000
 8012844:	10624dd3 	.word	0x10624dd3

08012848 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012848:	b480      	push	{r7}
 801284a:	b085      	sub	sp, #20
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012850:	4b11      	ldr	r3, [pc, #68]	; (8012898 <SDMMC_GetCmdError+0x50>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	4a11      	ldr	r2, [pc, #68]	; (801289c <SDMMC_GetCmdError+0x54>)
 8012856:	fba2 2303 	umull	r2, r3, r2, r3
 801285a:	0a5b      	lsrs	r3, r3, #9
 801285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012860:	fb02 f303 	mul.w	r3, r2, r3
 8012864:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	1e5a      	subs	r2, r3, #1
 801286a:	60fa      	str	r2, [r7, #12]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d102      	bne.n	8012876 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012870:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012874:	e009      	b.n	801288a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801287e:	2b00      	cmp	r3, #0
 8012880:	d0f1      	beq.n	8012866 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	4a06      	ldr	r2, [pc, #24]	; (80128a0 <SDMMC_GetCmdError+0x58>)
 8012886:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012888:	2300      	movs	r3, #0
}
 801288a:	4618      	mov	r0, r3
 801288c:	3714      	adds	r7, #20
 801288e:	46bd      	mov	sp, r7
 8012890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012894:	4770      	bx	lr
 8012896:	bf00      	nop
 8012898:	20000000 	.word	0x20000000
 801289c:	10624dd3 	.word	0x10624dd3
 80128a0:	002000c5 	.word	0x002000c5

080128a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80128a4:	b084      	sub	sp, #16
 80128a6:	b580      	push	{r7, lr}
 80128a8:	b084      	sub	sp, #16
 80128aa:	af00      	add	r7, sp, #0
 80128ac:	6078      	str	r0, [r7, #4]
 80128ae:	f107 001c 	add.w	r0, r7, #28
 80128b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80128b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b8:	2b01      	cmp	r3, #1
 80128ba:	d120      	bne.n	80128fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	68da      	ldr	r2, [r3, #12]
 80128cc:	4b2a      	ldr	r3, [pc, #168]	; (8012978 <USB_CoreInit+0xd4>)
 80128ce:	4013      	ands	r3, r2
 80128d0:	687a      	ldr	r2, [r7, #4]
 80128d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	68db      	ldr	r3, [r3, #12]
 80128d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80128e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128e2:	2b01      	cmp	r3, #1
 80128e4:	d105      	bne.n	80128f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	68db      	ldr	r3, [r3, #12]
 80128ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f001 fc04 	bl	8014100 <USB_CoreReset>
 80128f8:	4603      	mov	r3, r0
 80128fa:	73fb      	strb	r3, [r7, #15]
 80128fc:	e01a      	b.n	8012934 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	68db      	ldr	r3, [r3, #12]
 8012902:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f001 fbf8 	bl	8014100 <USB_CoreReset>
 8012910:	4603      	mov	r3, r0
 8012912:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012916:	2b00      	cmp	r3, #0
 8012918:	d106      	bne.n	8012928 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801291e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	639a      	str	r2, [r3, #56]	; 0x38
 8012926:	e005      	b.n	8012934 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801292c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012936:	2b01      	cmp	r3, #1
 8012938:	d116      	bne.n	8012968 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801293e:	b29a      	uxth	r2, r3
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012948:	4b0c      	ldr	r3, [pc, #48]	; (801297c <USB_CoreInit+0xd8>)
 801294a:	4313      	orrs	r3, r2
 801294c:	687a      	ldr	r2, [r7, #4]
 801294e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	689b      	ldr	r3, [r3, #8]
 8012954:	f043 0206 	orr.w	r2, r3, #6
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	689b      	ldr	r3, [r3, #8]
 8012960:	f043 0220 	orr.w	r2, r3, #32
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012968:	7bfb      	ldrb	r3, [r7, #15]
}
 801296a:	4618      	mov	r0, r3
 801296c:	3710      	adds	r7, #16
 801296e:	46bd      	mov	sp, r7
 8012970:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012974:	b004      	add	sp, #16
 8012976:	4770      	bx	lr
 8012978:	ffbdffbf 	.word	0xffbdffbf
 801297c:	03ee0000 	.word	0x03ee0000

08012980 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012980:	b480      	push	{r7}
 8012982:	b087      	sub	sp, #28
 8012984:	af00      	add	r7, sp, #0
 8012986:	60f8      	str	r0, [r7, #12]
 8012988:	60b9      	str	r1, [r7, #8]
 801298a:	4613      	mov	r3, r2
 801298c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801298e:	79fb      	ldrb	r3, [r7, #7]
 8012990:	2b02      	cmp	r3, #2
 8012992:	d165      	bne.n	8012a60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	4a41      	ldr	r2, [pc, #260]	; (8012a9c <USB_SetTurnaroundTime+0x11c>)
 8012998:	4293      	cmp	r3, r2
 801299a:	d906      	bls.n	80129aa <USB_SetTurnaroundTime+0x2a>
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	4a40      	ldr	r2, [pc, #256]	; (8012aa0 <USB_SetTurnaroundTime+0x120>)
 80129a0:	4293      	cmp	r3, r2
 80129a2:	d202      	bcs.n	80129aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80129a4:	230f      	movs	r3, #15
 80129a6:	617b      	str	r3, [r7, #20]
 80129a8:	e062      	b.n	8012a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	4a3c      	ldr	r2, [pc, #240]	; (8012aa0 <USB_SetTurnaroundTime+0x120>)
 80129ae:	4293      	cmp	r3, r2
 80129b0:	d306      	bcc.n	80129c0 <USB_SetTurnaroundTime+0x40>
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	4a3b      	ldr	r2, [pc, #236]	; (8012aa4 <USB_SetTurnaroundTime+0x124>)
 80129b6:	4293      	cmp	r3, r2
 80129b8:	d202      	bcs.n	80129c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80129ba:	230e      	movs	r3, #14
 80129bc:	617b      	str	r3, [r7, #20]
 80129be:	e057      	b.n	8012a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	4a38      	ldr	r2, [pc, #224]	; (8012aa4 <USB_SetTurnaroundTime+0x124>)
 80129c4:	4293      	cmp	r3, r2
 80129c6:	d306      	bcc.n	80129d6 <USB_SetTurnaroundTime+0x56>
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	4a37      	ldr	r2, [pc, #220]	; (8012aa8 <USB_SetTurnaroundTime+0x128>)
 80129cc:	4293      	cmp	r3, r2
 80129ce:	d202      	bcs.n	80129d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80129d0:	230d      	movs	r3, #13
 80129d2:	617b      	str	r3, [r7, #20]
 80129d4:	e04c      	b.n	8012a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	4a33      	ldr	r2, [pc, #204]	; (8012aa8 <USB_SetTurnaroundTime+0x128>)
 80129da:	4293      	cmp	r3, r2
 80129dc:	d306      	bcc.n	80129ec <USB_SetTurnaroundTime+0x6c>
 80129de:	68bb      	ldr	r3, [r7, #8]
 80129e0:	4a32      	ldr	r2, [pc, #200]	; (8012aac <USB_SetTurnaroundTime+0x12c>)
 80129e2:	4293      	cmp	r3, r2
 80129e4:	d802      	bhi.n	80129ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80129e6:	230c      	movs	r3, #12
 80129e8:	617b      	str	r3, [r7, #20]
 80129ea:	e041      	b.n	8012a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	4a2f      	ldr	r2, [pc, #188]	; (8012aac <USB_SetTurnaroundTime+0x12c>)
 80129f0:	4293      	cmp	r3, r2
 80129f2:	d906      	bls.n	8012a02 <USB_SetTurnaroundTime+0x82>
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	4a2e      	ldr	r2, [pc, #184]	; (8012ab0 <USB_SetTurnaroundTime+0x130>)
 80129f8:	4293      	cmp	r3, r2
 80129fa:	d802      	bhi.n	8012a02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80129fc:	230b      	movs	r3, #11
 80129fe:	617b      	str	r3, [r7, #20]
 8012a00:	e036      	b.n	8012a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	4a2a      	ldr	r2, [pc, #168]	; (8012ab0 <USB_SetTurnaroundTime+0x130>)
 8012a06:	4293      	cmp	r3, r2
 8012a08:	d906      	bls.n	8012a18 <USB_SetTurnaroundTime+0x98>
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	4a29      	ldr	r2, [pc, #164]	; (8012ab4 <USB_SetTurnaroundTime+0x134>)
 8012a0e:	4293      	cmp	r3, r2
 8012a10:	d802      	bhi.n	8012a18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012a12:	230a      	movs	r3, #10
 8012a14:	617b      	str	r3, [r7, #20]
 8012a16:	e02b      	b.n	8012a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	4a26      	ldr	r2, [pc, #152]	; (8012ab4 <USB_SetTurnaroundTime+0x134>)
 8012a1c:	4293      	cmp	r3, r2
 8012a1e:	d906      	bls.n	8012a2e <USB_SetTurnaroundTime+0xae>
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	4a25      	ldr	r2, [pc, #148]	; (8012ab8 <USB_SetTurnaroundTime+0x138>)
 8012a24:	4293      	cmp	r3, r2
 8012a26:	d202      	bcs.n	8012a2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012a28:	2309      	movs	r3, #9
 8012a2a:	617b      	str	r3, [r7, #20]
 8012a2c:	e020      	b.n	8012a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	4a21      	ldr	r2, [pc, #132]	; (8012ab8 <USB_SetTurnaroundTime+0x138>)
 8012a32:	4293      	cmp	r3, r2
 8012a34:	d306      	bcc.n	8012a44 <USB_SetTurnaroundTime+0xc4>
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	4a20      	ldr	r2, [pc, #128]	; (8012abc <USB_SetTurnaroundTime+0x13c>)
 8012a3a:	4293      	cmp	r3, r2
 8012a3c:	d802      	bhi.n	8012a44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012a3e:	2308      	movs	r3, #8
 8012a40:	617b      	str	r3, [r7, #20]
 8012a42:	e015      	b.n	8012a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	4a1d      	ldr	r2, [pc, #116]	; (8012abc <USB_SetTurnaroundTime+0x13c>)
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	d906      	bls.n	8012a5a <USB_SetTurnaroundTime+0xda>
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	4a1c      	ldr	r2, [pc, #112]	; (8012ac0 <USB_SetTurnaroundTime+0x140>)
 8012a50:	4293      	cmp	r3, r2
 8012a52:	d202      	bcs.n	8012a5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012a54:	2307      	movs	r3, #7
 8012a56:	617b      	str	r3, [r7, #20]
 8012a58:	e00a      	b.n	8012a70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012a5a:	2306      	movs	r3, #6
 8012a5c:	617b      	str	r3, [r7, #20]
 8012a5e:	e007      	b.n	8012a70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012a60:	79fb      	ldrb	r3, [r7, #7]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d102      	bne.n	8012a6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012a66:	2309      	movs	r3, #9
 8012a68:	617b      	str	r3, [r7, #20]
 8012a6a:	e001      	b.n	8012a70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012a6c:	2309      	movs	r3, #9
 8012a6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	68db      	ldr	r3, [r3, #12]
 8012a74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	68da      	ldr	r2, [r3, #12]
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	029b      	lsls	r3, r3, #10
 8012a84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012a88:	431a      	orrs	r2, r3
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012a8e:	2300      	movs	r3, #0
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	371c      	adds	r7, #28
 8012a94:	46bd      	mov	sp, r7
 8012a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9a:	4770      	bx	lr
 8012a9c:	00d8acbf 	.word	0x00d8acbf
 8012aa0:	00e4e1c0 	.word	0x00e4e1c0
 8012aa4:	00f42400 	.word	0x00f42400
 8012aa8:	01067380 	.word	0x01067380
 8012aac:	011a499f 	.word	0x011a499f
 8012ab0:	01312cff 	.word	0x01312cff
 8012ab4:	014ca43f 	.word	0x014ca43f
 8012ab8:	016e3600 	.word	0x016e3600
 8012abc:	01a6ab1f 	.word	0x01a6ab1f
 8012ac0:	01e84800 	.word	0x01e84800

08012ac4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	b083      	sub	sp, #12
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	689b      	ldr	r3, [r3, #8]
 8012ad0:	f043 0201 	orr.w	r2, r3, #1
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012ad8:	2300      	movs	r3, #0
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	370c      	adds	r7, #12
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae4:	4770      	bx	lr

08012ae6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012ae6:	b480      	push	{r7}
 8012ae8:	b083      	sub	sp, #12
 8012aea:	af00      	add	r7, sp, #0
 8012aec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	689b      	ldr	r3, [r3, #8]
 8012af2:	f023 0201 	bic.w	r2, r3, #1
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012afa:	2300      	movs	r3, #0
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	370c      	adds	r7, #12
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr

08012b08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b084      	sub	sp, #16
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	460b      	mov	r3, r1
 8012b12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012b14:	2300      	movs	r3, #0
 8012b16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	68db      	ldr	r3, [r3, #12]
 8012b1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012b24:	78fb      	ldrb	r3, [r7, #3]
 8012b26:	2b01      	cmp	r3, #1
 8012b28:	d115      	bne.n	8012b56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012b36:	2001      	movs	r0, #1
 8012b38:	f7f0 f83e 	bl	8002bb8 <HAL_Delay>
      ms++;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	3301      	adds	r3, #1
 8012b40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	f001 fa4b 	bl	8013fde <USB_GetMode>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	2b01      	cmp	r3, #1
 8012b4c:	d01e      	beq.n	8012b8c <USB_SetCurrentMode+0x84>
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	2b31      	cmp	r3, #49	; 0x31
 8012b52:	d9f0      	bls.n	8012b36 <USB_SetCurrentMode+0x2e>
 8012b54:	e01a      	b.n	8012b8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012b56:	78fb      	ldrb	r3, [r7, #3]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d115      	bne.n	8012b88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	68db      	ldr	r3, [r3, #12]
 8012b60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012b68:	2001      	movs	r0, #1
 8012b6a:	f7f0 f825 	bl	8002bb8 <HAL_Delay>
      ms++;
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	3301      	adds	r3, #1
 8012b72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f001 fa32 	bl	8013fde <USB_GetMode>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d005      	beq.n	8012b8c <USB_SetCurrentMode+0x84>
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2b31      	cmp	r3, #49	; 0x31
 8012b84:	d9f0      	bls.n	8012b68 <USB_SetCurrentMode+0x60>
 8012b86:	e001      	b.n	8012b8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012b88:	2301      	movs	r3, #1
 8012b8a:	e005      	b.n	8012b98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	2b32      	cmp	r3, #50	; 0x32
 8012b90:	d101      	bne.n	8012b96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012b92:	2301      	movs	r3, #1
 8012b94:	e000      	b.n	8012b98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012b96:	2300      	movs	r3, #0
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3710      	adds	r7, #16
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}

08012ba0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012ba0:	b084      	sub	sp, #16
 8012ba2:	b580      	push	{r7, lr}
 8012ba4:	b086      	sub	sp, #24
 8012ba6:	af00      	add	r7, sp, #0
 8012ba8:	6078      	str	r0, [r7, #4]
 8012baa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012bba:	2300      	movs	r3, #0
 8012bbc:	613b      	str	r3, [r7, #16]
 8012bbe:	e009      	b.n	8012bd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012bc0:	687a      	ldr	r2, [r7, #4]
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	3340      	adds	r3, #64	; 0x40
 8012bc6:	009b      	lsls	r3, r3, #2
 8012bc8:	4413      	add	r3, r2
 8012bca:	2200      	movs	r2, #0
 8012bcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	3301      	adds	r3, #1
 8012bd2:	613b      	str	r3, [r7, #16]
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	2b0e      	cmp	r3, #14
 8012bd8:	d9f2      	bls.n	8012bc0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d11c      	bne.n	8012c1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012be6:	685b      	ldr	r3, [r3, #4]
 8012be8:	68fa      	ldr	r2, [r7, #12]
 8012bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012bee:	f043 0302 	orr.w	r3, r3, #2
 8012bf2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bf8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	601a      	str	r2, [r3, #0]
 8012c18:	e005      	b.n	8012c26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	2300      	movs	r3, #0
 8012c30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c38:	4619      	mov	r1, r3
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c40:	461a      	mov	r2, r3
 8012c42:	680b      	ldr	r3, [r1, #0]
 8012c44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	d10c      	bne.n	8012c66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d104      	bne.n	8012c5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012c52:	2100      	movs	r1, #0
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f000 f965 	bl	8012f24 <USB_SetDevSpeed>
 8012c5a:	e008      	b.n	8012c6e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012c5c:	2101      	movs	r1, #1
 8012c5e:	6878      	ldr	r0, [r7, #4]
 8012c60:	f000 f960 	bl	8012f24 <USB_SetDevSpeed>
 8012c64:	e003      	b.n	8012c6e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012c66:	2103      	movs	r1, #3
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f000 f95b 	bl	8012f24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012c6e:	2110      	movs	r1, #16
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f000 f8f3 	bl	8012e5c <USB_FlushTxFifo>
 8012c76:	4603      	mov	r3, r0
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d001      	beq.n	8012c80 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012c7c:	2301      	movs	r3, #1
 8012c7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f000 f91f 	bl	8012ec4 <USB_FlushRxFifo>
 8012c86:	4603      	mov	r3, r0
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d001      	beq.n	8012c90 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c96:	461a      	mov	r2, r3
 8012c98:	2300      	movs	r3, #0
 8012c9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cae:	461a      	mov	r2, r3
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	613b      	str	r3, [r7, #16]
 8012cb8:	e043      	b.n	8012d42 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012cba:	693b      	ldr	r3, [r7, #16]
 8012cbc:	015a      	lsls	r2, r3, #5
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012cd0:	d118      	bne.n	8012d04 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012cd2:	693b      	ldr	r3, [r7, #16]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d10a      	bne.n	8012cee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	015a      	lsls	r2, r3, #5
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	4413      	add	r3, r2
 8012ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ce4:	461a      	mov	r2, r3
 8012ce6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012cea:	6013      	str	r3, [r2, #0]
 8012cec:	e013      	b.n	8012d16 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	015a      	lsls	r2, r3, #5
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	4413      	add	r3, r2
 8012cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cfa:	461a      	mov	r2, r3
 8012cfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012d00:	6013      	str	r3, [r2, #0]
 8012d02:	e008      	b.n	8012d16 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	015a      	lsls	r2, r3, #5
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	4413      	add	r3, r2
 8012d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d10:	461a      	mov	r2, r3
 8012d12:	2300      	movs	r3, #0
 8012d14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012d16:	693b      	ldr	r3, [r7, #16]
 8012d18:	015a      	lsls	r2, r3, #5
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d22:	461a      	mov	r2, r3
 8012d24:	2300      	movs	r3, #0
 8012d26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	015a      	lsls	r2, r3, #5
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	4413      	add	r3, r2
 8012d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d34:	461a      	mov	r2, r3
 8012d36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012d3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012d3c:	693b      	ldr	r3, [r7, #16]
 8012d3e:	3301      	adds	r3, #1
 8012d40:	613b      	str	r3, [r7, #16]
 8012d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d44:	693a      	ldr	r2, [r7, #16]
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d3b7      	bcc.n	8012cba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	613b      	str	r3, [r7, #16]
 8012d4e:	e043      	b.n	8012dd8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012d50:	693b      	ldr	r3, [r7, #16]
 8012d52:	015a      	lsls	r2, r3, #5
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	4413      	add	r3, r2
 8012d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d66:	d118      	bne.n	8012d9a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d10a      	bne.n	8012d84 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	015a      	lsls	r2, r3, #5
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	4413      	add	r3, r2
 8012d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012d80:	6013      	str	r3, [r2, #0]
 8012d82:	e013      	b.n	8012dac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	015a      	lsls	r2, r3, #5
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	4413      	add	r3, r2
 8012d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d90:	461a      	mov	r2, r3
 8012d92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012d96:	6013      	str	r3, [r2, #0]
 8012d98:	e008      	b.n	8012dac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012d9a:	693b      	ldr	r3, [r7, #16]
 8012d9c:	015a      	lsls	r2, r3, #5
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	4413      	add	r3, r2
 8012da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012da6:	461a      	mov	r2, r3
 8012da8:	2300      	movs	r3, #0
 8012daa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012dac:	693b      	ldr	r3, [r7, #16]
 8012dae:	015a      	lsls	r2, r3, #5
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	4413      	add	r3, r2
 8012db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012db8:	461a      	mov	r2, r3
 8012dba:	2300      	movs	r3, #0
 8012dbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	015a      	lsls	r2, r3, #5
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dca:	461a      	mov	r2, r3
 8012dcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012dd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012dd2:	693b      	ldr	r3, [r7, #16]
 8012dd4:	3301      	adds	r3, #1
 8012dd6:	613b      	str	r3, [r7, #16]
 8012dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dda:	693a      	ldr	r2, [r7, #16]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d3b7      	bcc.n	8012d50 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012de6:	691b      	ldr	r3, [r3, #16]
 8012de8:	68fa      	ldr	r2, [r7, #12]
 8012dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012df2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2200      	movs	r2, #0
 8012df8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012e00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d105      	bne.n	8012e14 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	699b      	ldr	r3, [r3, #24]
 8012e0c:	f043 0210 	orr.w	r2, r3, #16
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	699a      	ldr	r2, [r3, #24]
 8012e18:	4b0e      	ldr	r3, [pc, #56]	; (8012e54 <USB_DevInit+0x2b4>)
 8012e1a:	4313      	orrs	r3, r2
 8012e1c:	687a      	ldr	r2, [r7, #4]
 8012e1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d005      	beq.n	8012e32 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	699b      	ldr	r3, [r3, #24]
 8012e2a:	f043 0208 	orr.w	r2, r3, #8
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e34:	2b01      	cmp	r3, #1
 8012e36:	d105      	bne.n	8012e44 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	699a      	ldr	r2, [r3, #24]
 8012e3c:	4b06      	ldr	r3, [pc, #24]	; (8012e58 <USB_DevInit+0x2b8>)
 8012e3e:	4313      	orrs	r3, r2
 8012e40:	687a      	ldr	r2, [r7, #4]
 8012e42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	3718      	adds	r7, #24
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012e50:	b004      	add	sp, #16
 8012e52:	4770      	bx	lr
 8012e54:	803c3800 	.word	0x803c3800
 8012e58:	40000004 	.word	0x40000004

08012e5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012e5c:	b480      	push	{r7}
 8012e5e:	b085      	sub	sp, #20
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	6078      	str	r0, [r7, #4]
 8012e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012e66:	2300      	movs	r3, #0
 8012e68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	3301      	adds	r3, #1
 8012e6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	4a13      	ldr	r2, [pc, #76]	; (8012ec0 <USB_FlushTxFifo+0x64>)
 8012e74:	4293      	cmp	r3, r2
 8012e76:	d901      	bls.n	8012e7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012e78:	2303      	movs	r3, #3
 8012e7a:	e01b      	b.n	8012eb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	691b      	ldr	r3, [r3, #16]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	daf2      	bge.n	8012e6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012e84:	2300      	movs	r3, #0
 8012e86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	019b      	lsls	r3, r3, #6
 8012e8c:	f043 0220 	orr.w	r2, r3, #32
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	3301      	adds	r3, #1
 8012e98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	4a08      	ldr	r2, [pc, #32]	; (8012ec0 <USB_FlushTxFifo+0x64>)
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	d901      	bls.n	8012ea6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012ea2:	2303      	movs	r3, #3
 8012ea4:	e006      	b.n	8012eb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	691b      	ldr	r3, [r3, #16]
 8012eaa:	f003 0320 	and.w	r3, r3, #32
 8012eae:	2b20      	cmp	r3, #32
 8012eb0:	d0f0      	beq.n	8012e94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012eb2:	2300      	movs	r3, #0
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3714      	adds	r7, #20
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebe:	4770      	bx	lr
 8012ec0:	00030d40 	.word	0x00030d40

08012ec4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b085      	sub	sp, #20
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	3301      	adds	r3, #1
 8012ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	4a11      	ldr	r2, [pc, #68]	; (8012f20 <USB_FlushRxFifo+0x5c>)
 8012eda:	4293      	cmp	r3, r2
 8012edc:	d901      	bls.n	8012ee2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012ede:	2303      	movs	r3, #3
 8012ee0:	e018      	b.n	8012f14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	691b      	ldr	r3, [r3, #16]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	daf2      	bge.n	8012ed0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012eea:	2300      	movs	r3, #0
 8012eec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2210      	movs	r2, #16
 8012ef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	4a08      	ldr	r2, [pc, #32]	; (8012f20 <USB_FlushRxFifo+0x5c>)
 8012efe:	4293      	cmp	r3, r2
 8012f00:	d901      	bls.n	8012f06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012f02:	2303      	movs	r3, #3
 8012f04:	e006      	b.n	8012f14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	691b      	ldr	r3, [r3, #16]
 8012f0a:	f003 0310 	and.w	r3, r3, #16
 8012f0e:	2b10      	cmp	r3, #16
 8012f10:	d0f0      	beq.n	8012ef4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012f12:	2300      	movs	r3, #0
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3714      	adds	r7, #20
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1e:	4770      	bx	lr
 8012f20:	00030d40 	.word	0x00030d40

08012f24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012f24:	b480      	push	{r7}
 8012f26:	b085      	sub	sp, #20
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	460b      	mov	r3, r1
 8012f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f3a:	681a      	ldr	r2, [r3, #0]
 8012f3c:	78fb      	ldrb	r3, [r7, #3]
 8012f3e:	68f9      	ldr	r1, [r7, #12]
 8012f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f44:	4313      	orrs	r3, r2
 8012f46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012f48:	2300      	movs	r3, #0
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3714      	adds	r7, #20
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f54:	4770      	bx	lr

08012f56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012f56:	b480      	push	{r7}
 8012f58:	b087      	sub	sp, #28
 8012f5a:	af00      	add	r7, sp, #0
 8012f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f68:	689b      	ldr	r3, [r3, #8]
 8012f6a:	f003 0306 	and.w	r3, r3, #6
 8012f6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d102      	bne.n	8012f7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012f76:	2300      	movs	r3, #0
 8012f78:	75fb      	strb	r3, [r7, #23]
 8012f7a:	e00a      	b.n	8012f92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	2b02      	cmp	r3, #2
 8012f80:	d002      	beq.n	8012f88 <USB_GetDevSpeed+0x32>
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	2b06      	cmp	r3, #6
 8012f86:	d102      	bne.n	8012f8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012f88:	2302      	movs	r3, #2
 8012f8a:	75fb      	strb	r3, [r7, #23]
 8012f8c:	e001      	b.n	8012f92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012f8e:	230f      	movs	r3, #15
 8012f90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	371c      	adds	r7, #28
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9e:	4770      	bx	lr

08012fa0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	b085      	sub	sp, #20
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	785b      	ldrb	r3, [r3, #1]
 8012fb8:	2b01      	cmp	r3, #1
 8012fba:	d139      	bne.n	8013030 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fc2:	69da      	ldr	r2, [r3, #28]
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	781b      	ldrb	r3, [r3, #0]
 8012fc8:	f003 030f 	and.w	r3, r3, #15
 8012fcc:	2101      	movs	r1, #1
 8012fce:	fa01 f303 	lsl.w	r3, r1, r3
 8012fd2:	b29b      	uxth	r3, r3
 8012fd4:	68f9      	ldr	r1, [r7, #12]
 8012fd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012fda:	4313      	orrs	r3, r2
 8012fdc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	015a      	lsls	r2, r3, #5
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	4413      	add	r3, r2
 8012fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d153      	bne.n	801309c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	015a      	lsls	r2, r3, #5
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	4413      	add	r3, r2
 8012ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013000:	681a      	ldr	r2, [r3, #0]
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	68db      	ldr	r3, [r3, #12]
 8013006:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	791b      	ldrb	r3, [r3, #4]
 801300e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013010:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	059b      	lsls	r3, r3, #22
 8013016:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013018:	431a      	orrs	r2, r3
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	0159      	lsls	r1, r3, #5
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	440b      	add	r3, r1
 8013022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013026:	4619      	mov	r1, r3
 8013028:	4b20      	ldr	r3, [pc, #128]	; (80130ac <USB_ActivateEndpoint+0x10c>)
 801302a:	4313      	orrs	r3, r2
 801302c:	600b      	str	r3, [r1, #0]
 801302e:	e035      	b.n	801309c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013036:	69da      	ldr	r2, [r3, #28]
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	f003 030f 	and.w	r3, r3, #15
 8013040:	2101      	movs	r1, #1
 8013042:	fa01 f303 	lsl.w	r3, r1, r3
 8013046:	041b      	lsls	r3, r3, #16
 8013048:	68f9      	ldr	r1, [r7, #12]
 801304a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801304e:	4313      	orrs	r3, r2
 8013050:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	015a      	lsls	r2, r3, #5
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	4413      	add	r3, r2
 801305a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013064:	2b00      	cmp	r3, #0
 8013066:	d119      	bne.n	801309c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013068:	68bb      	ldr	r3, [r7, #8]
 801306a:	015a      	lsls	r2, r3, #5
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	4413      	add	r3, r2
 8013070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013074:	681a      	ldr	r2, [r3, #0]
 8013076:	683b      	ldr	r3, [r7, #0]
 8013078:	68db      	ldr	r3, [r3, #12]
 801307a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801307e:	683b      	ldr	r3, [r7, #0]
 8013080:	791b      	ldrb	r3, [r3, #4]
 8013082:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013084:	430b      	orrs	r3, r1
 8013086:	431a      	orrs	r2, r3
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	0159      	lsls	r1, r3, #5
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	440b      	add	r3, r1
 8013090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013094:	4619      	mov	r1, r3
 8013096:	4b05      	ldr	r3, [pc, #20]	; (80130ac <USB_ActivateEndpoint+0x10c>)
 8013098:	4313      	orrs	r3, r2
 801309a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801309c:	2300      	movs	r3, #0
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3714      	adds	r7, #20
 80130a2:	46bd      	mov	sp, r7
 80130a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a8:	4770      	bx	lr
 80130aa:	bf00      	nop
 80130ac:	10008000 	.word	0x10008000

080130b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80130b0:	b480      	push	{r7}
 80130b2:	b085      	sub	sp, #20
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
 80130b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	785b      	ldrb	r3, [r3, #1]
 80130c8:	2b01      	cmp	r3, #1
 80130ca:	d161      	bne.n	8013190 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80130cc:	68bb      	ldr	r3, [r7, #8]
 80130ce:	015a      	lsls	r2, r3, #5
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	4413      	add	r3, r2
 80130d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80130de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80130e2:	d11f      	bne.n	8013124 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	015a      	lsls	r2, r3, #5
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	4413      	add	r3, r2
 80130ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	68ba      	ldr	r2, [r7, #8]
 80130f4:	0151      	lsls	r1, r2, #5
 80130f6:	68fa      	ldr	r2, [r7, #12]
 80130f8:	440a      	add	r2, r1
 80130fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013102:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	015a      	lsls	r2, r3, #5
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	4413      	add	r3, r2
 801310c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	68ba      	ldr	r2, [r7, #8]
 8013114:	0151      	lsls	r1, r2, #5
 8013116:	68fa      	ldr	r2, [r7, #12]
 8013118:	440a      	add	r2, r1
 801311a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801311e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013122:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801312a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	f003 030f 	and.w	r3, r3, #15
 8013134:	2101      	movs	r1, #1
 8013136:	fa01 f303 	lsl.w	r3, r1, r3
 801313a:	b29b      	uxth	r3, r3
 801313c:	43db      	mvns	r3, r3
 801313e:	68f9      	ldr	r1, [r7, #12]
 8013140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013144:	4013      	ands	r3, r2
 8013146:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801314e:	69da      	ldr	r2, [r3, #28]
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	f003 030f 	and.w	r3, r3, #15
 8013158:	2101      	movs	r1, #1
 801315a:	fa01 f303 	lsl.w	r3, r1, r3
 801315e:	b29b      	uxth	r3, r3
 8013160:	43db      	mvns	r3, r3
 8013162:	68f9      	ldr	r1, [r7, #12]
 8013164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013168:	4013      	ands	r3, r2
 801316a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	015a      	lsls	r2, r3, #5
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	4413      	add	r3, r2
 8013174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013178:	681a      	ldr	r2, [r3, #0]
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	0159      	lsls	r1, r3, #5
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	440b      	add	r3, r1
 8013182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013186:	4619      	mov	r1, r3
 8013188:	4b35      	ldr	r3, [pc, #212]	; (8013260 <USB_DeactivateEndpoint+0x1b0>)
 801318a:	4013      	ands	r3, r2
 801318c:	600b      	str	r3, [r1, #0]
 801318e:	e060      	b.n	8013252 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	015a      	lsls	r2, r3, #5
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	4413      	add	r3, r2
 8013198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80131a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80131a6:	d11f      	bne.n	80131e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	015a      	lsls	r2, r3, #5
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	4413      	add	r3, r2
 80131b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	68ba      	ldr	r2, [r7, #8]
 80131b8:	0151      	lsls	r1, r2, #5
 80131ba:	68fa      	ldr	r2, [r7, #12]
 80131bc:	440a      	add	r2, r1
 80131be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80131c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80131c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	015a      	lsls	r2, r3, #5
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	4413      	add	r3, r2
 80131d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	68ba      	ldr	r2, [r7, #8]
 80131d8:	0151      	lsls	r1, r2, #5
 80131da:	68fa      	ldr	r2, [r7, #12]
 80131dc:	440a      	add	r2, r1
 80131de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80131e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80131e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	f003 030f 	and.w	r3, r3, #15
 80131f8:	2101      	movs	r1, #1
 80131fa:	fa01 f303 	lsl.w	r3, r1, r3
 80131fe:	041b      	lsls	r3, r3, #16
 8013200:	43db      	mvns	r3, r3
 8013202:	68f9      	ldr	r1, [r7, #12]
 8013204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013208:	4013      	ands	r3, r2
 801320a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013212:	69da      	ldr	r2, [r3, #28]
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	781b      	ldrb	r3, [r3, #0]
 8013218:	f003 030f 	and.w	r3, r3, #15
 801321c:	2101      	movs	r1, #1
 801321e:	fa01 f303 	lsl.w	r3, r1, r3
 8013222:	041b      	lsls	r3, r3, #16
 8013224:	43db      	mvns	r3, r3
 8013226:	68f9      	ldr	r1, [r7, #12]
 8013228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801322c:	4013      	ands	r3, r2
 801322e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	015a      	lsls	r2, r3, #5
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	4413      	add	r3, r2
 8013238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801323c:	681a      	ldr	r2, [r3, #0]
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	0159      	lsls	r1, r3, #5
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	440b      	add	r3, r1
 8013246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801324a:	4619      	mov	r1, r3
 801324c:	4b05      	ldr	r3, [pc, #20]	; (8013264 <USB_DeactivateEndpoint+0x1b4>)
 801324e:	4013      	ands	r3, r2
 8013250:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013252:	2300      	movs	r3, #0
}
 8013254:	4618      	mov	r0, r3
 8013256:	3714      	adds	r7, #20
 8013258:	46bd      	mov	sp, r7
 801325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325e:	4770      	bx	lr
 8013260:	ec337800 	.word	0xec337800
 8013264:	eff37800 	.word	0xeff37800

08013268 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b08a      	sub	sp, #40	; 0x28
 801326c:	af02      	add	r7, sp, #8
 801326e:	60f8      	str	r0, [r7, #12]
 8013270:	60b9      	str	r1, [r7, #8]
 8013272:	4613      	mov	r3, r2
 8013274:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	781b      	ldrb	r3, [r3, #0]
 801327e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013280:	68bb      	ldr	r3, [r7, #8]
 8013282:	785b      	ldrb	r3, [r3, #1]
 8013284:	2b01      	cmp	r3, #1
 8013286:	f040 8163 	bne.w	8013550 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	699b      	ldr	r3, [r3, #24]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d132      	bne.n	80132f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013292:	69bb      	ldr	r3, [r7, #24]
 8013294:	015a      	lsls	r2, r3, #5
 8013296:	69fb      	ldr	r3, [r7, #28]
 8013298:	4413      	add	r3, r2
 801329a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801329e:	691a      	ldr	r2, [r3, #16]
 80132a0:	69bb      	ldr	r3, [r7, #24]
 80132a2:	0159      	lsls	r1, r3, #5
 80132a4:	69fb      	ldr	r3, [r7, #28]
 80132a6:	440b      	add	r3, r1
 80132a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132ac:	4619      	mov	r1, r3
 80132ae:	4ba5      	ldr	r3, [pc, #660]	; (8013544 <USB_EPStartXfer+0x2dc>)
 80132b0:	4013      	ands	r3, r2
 80132b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	015a      	lsls	r2, r3, #5
 80132b8:	69fb      	ldr	r3, [r7, #28]
 80132ba:	4413      	add	r3, r2
 80132bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132c0:	691b      	ldr	r3, [r3, #16]
 80132c2:	69ba      	ldr	r2, [r7, #24]
 80132c4:	0151      	lsls	r1, r2, #5
 80132c6:	69fa      	ldr	r2, [r7, #28]
 80132c8:	440a      	add	r2, r1
 80132ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80132d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80132d4:	69bb      	ldr	r3, [r7, #24]
 80132d6:	015a      	lsls	r2, r3, #5
 80132d8:	69fb      	ldr	r3, [r7, #28]
 80132da:	4413      	add	r3, r2
 80132dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132e0:	691a      	ldr	r2, [r3, #16]
 80132e2:	69bb      	ldr	r3, [r7, #24]
 80132e4:	0159      	lsls	r1, r3, #5
 80132e6:	69fb      	ldr	r3, [r7, #28]
 80132e8:	440b      	add	r3, r1
 80132ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132ee:	4619      	mov	r1, r3
 80132f0:	4b95      	ldr	r3, [pc, #596]	; (8013548 <USB_EPStartXfer+0x2e0>)
 80132f2:	4013      	ands	r3, r2
 80132f4:	610b      	str	r3, [r1, #16]
 80132f6:	e074      	b.n	80133e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80132f8:	69bb      	ldr	r3, [r7, #24]
 80132fa:	015a      	lsls	r2, r3, #5
 80132fc:	69fb      	ldr	r3, [r7, #28]
 80132fe:	4413      	add	r3, r2
 8013300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013304:	691a      	ldr	r2, [r3, #16]
 8013306:	69bb      	ldr	r3, [r7, #24]
 8013308:	0159      	lsls	r1, r3, #5
 801330a:	69fb      	ldr	r3, [r7, #28]
 801330c:	440b      	add	r3, r1
 801330e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013312:	4619      	mov	r1, r3
 8013314:	4b8c      	ldr	r3, [pc, #560]	; (8013548 <USB_EPStartXfer+0x2e0>)
 8013316:	4013      	ands	r3, r2
 8013318:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801331a:	69bb      	ldr	r3, [r7, #24]
 801331c:	015a      	lsls	r2, r3, #5
 801331e:	69fb      	ldr	r3, [r7, #28]
 8013320:	4413      	add	r3, r2
 8013322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013326:	691a      	ldr	r2, [r3, #16]
 8013328:	69bb      	ldr	r3, [r7, #24]
 801332a:	0159      	lsls	r1, r3, #5
 801332c:	69fb      	ldr	r3, [r7, #28]
 801332e:	440b      	add	r3, r1
 8013330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013334:	4619      	mov	r1, r3
 8013336:	4b83      	ldr	r3, [pc, #524]	; (8013544 <USB_EPStartXfer+0x2dc>)
 8013338:	4013      	ands	r3, r2
 801333a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801333c:	69bb      	ldr	r3, [r7, #24]
 801333e:	015a      	lsls	r2, r3, #5
 8013340:	69fb      	ldr	r3, [r7, #28]
 8013342:	4413      	add	r3, r2
 8013344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013348:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	6999      	ldr	r1, [r3, #24]
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	68db      	ldr	r3, [r3, #12]
 8013352:	440b      	add	r3, r1
 8013354:	1e59      	subs	r1, r3, #1
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	68db      	ldr	r3, [r3, #12]
 801335a:	fbb1 f3f3 	udiv	r3, r1, r3
 801335e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013360:	4b7a      	ldr	r3, [pc, #488]	; (801354c <USB_EPStartXfer+0x2e4>)
 8013362:	400b      	ands	r3, r1
 8013364:	69b9      	ldr	r1, [r7, #24]
 8013366:	0148      	lsls	r0, r1, #5
 8013368:	69f9      	ldr	r1, [r7, #28]
 801336a:	4401      	add	r1, r0
 801336c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013370:	4313      	orrs	r3, r2
 8013372:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	015a      	lsls	r2, r3, #5
 8013378:	69fb      	ldr	r3, [r7, #28]
 801337a:	4413      	add	r3, r2
 801337c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013380:	691a      	ldr	r2, [r3, #16]
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	699b      	ldr	r3, [r3, #24]
 8013386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801338a:	69b9      	ldr	r1, [r7, #24]
 801338c:	0148      	lsls	r0, r1, #5
 801338e:	69f9      	ldr	r1, [r7, #28]
 8013390:	4401      	add	r1, r0
 8013392:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013396:	4313      	orrs	r3, r2
 8013398:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	791b      	ldrb	r3, [r3, #4]
 801339e:	2b01      	cmp	r3, #1
 80133a0:	d11f      	bne.n	80133e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80133a2:	69bb      	ldr	r3, [r7, #24]
 80133a4:	015a      	lsls	r2, r3, #5
 80133a6:	69fb      	ldr	r3, [r7, #28]
 80133a8:	4413      	add	r3, r2
 80133aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133ae:	691b      	ldr	r3, [r3, #16]
 80133b0:	69ba      	ldr	r2, [r7, #24]
 80133b2:	0151      	lsls	r1, r2, #5
 80133b4:	69fa      	ldr	r2, [r7, #28]
 80133b6:	440a      	add	r2, r1
 80133b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80133c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	015a      	lsls	r2, r3, #5
 80133c6:	69fb      	ldr	r3, [r7, #28]
 80133c8:	4413      	add	r3, r2
 80133ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133ce:	691b      	ldr	r3, [r3, #16]
 80133d0:	69ba      	ldr	r2, [r7, #24]
 80133d2:	0151      	lsls	r1, r2, #5
 80133d4:	69fa      	ldr	r2, [r7, #28]
 80133d6:	440a      	add	r2, r1
 80133d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80133e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80133e2:	79fb      	ldrb	r3, [r7, #7]
 80133e4:	2b01      	cmp	r3, #1
 80133e6:	d14b      	bne.n	8013480 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	695b      	ldr	r3, [r3, #20]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d009      	beq.n	8013404 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80133f0:	69bb      	ldr	r3, [r7, #24]
 80133f2:	015a      	lsls	r2, r3, #5
 80133f4:	69fb      	ldr	r3, [r7, #28]
 80133f6:	4413      	add	r3, r2
 80133f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133fc:	461a      	mov	r2, r3
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	695b      	ldr	r3, [r3, #20]
 8013402:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013404:	68bb      	ldr	r3, [r7, #8]
 8013406:	791b      	ldrb	r3, [r3, #4]
 8013408:	2b01      	cmp	r3, #1
 801340a:	d128      	bne.n	801345e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801340c:	69fb      	ldr	r3, [r7, #28]
 801340e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013412:	689b      	ldr	r3, [r3, #8]
 8013414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013418:	2b00      	cmp	r3, #0
 801341a:	d110      	bne.n	801343e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801341c:	69bb      	ldr	r3, [r7, #24]
 801341e:	015a      	lsls	r2, r3, #5
 8013420:	69fb      	ldr	r3, [r7, #28]
 8013422:	4413      	add	r3, r2
 8013424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	69ba      	ldr	r2, [r7, #24]
 801342c:	0151      	lsls	r1, r2, #5
 801342e:	69fa      	ldr	r2, [r7, #28]
 8013430:	440a      	add	r2, r1
 8013432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013436:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801343a:	6013      	str	r3, [r2, #0]
 801343c:	e00f      	b.n	801345e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801343e:	69bb      	ldr	r3, [r7, #24]
 8013440:	015a      	lsls	r2, r3, #5
 8013442:	69fb      	ldr	r3, [r7, #28]
 8013444:	4413      	add	r3, r2
 8013446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	69ba      	ldr	r2, [r7, #24]
 801344e:	0151      	lsls	r1, r2, #5
 8013450:	69fa      	ldr	r2, [r7, #28]
 8013452:	440a      	add	r2, r1
 8013454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801345c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801345e:	69bb      	ldr	r3, [r7, #24]
 8013460:	015a      	lsls	r2, r3, #5
 8013462:	69fb      	ldr	r3, [r7, #28]
 8013464:	4413      	add	r3, r2
 8013466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	69ba      	ldr	r2, [r7, #24]
 801346e:	0151      	lsls	r1, r2, #5
 8013470:	69fa      	ldr	r2, [r7, #28]
 8013472:	440a      	add	r2, r1
 8013474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013478:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801347c:	6013      	str	r3, [r2, #0]
 801347e:	e137      	b.n	80136f0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013480:	69bb      	ldr	r3, [r7, #24]
 8013482:	015a      	lsls	r2, r3, #5
 8013484:	69fb      	ldr	r3, [r7, #28]
 8013486:	4413      	add	r3, r2
 8013488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	69ba      	ldr	r2, [r7, #24]
 8013490:	0151      	lsls	r1, r2, #5
 8013492:	69fa      	ldr	r2, [r7, #28]
 8013494:	440a      	add	r2, r1
 8013496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801349a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801349e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	791b      	ldrb	r3, [r3, #4]
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	d015      	beq.n	80134d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80134a8:	68bb      	ldr	r3, [r7, #8]
 80134aa:	699b      	ldr	r3, [r3, #24]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	f000 811f 	beq.w	80136f0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80134b2:	69fb      	ldr	r3, [r7, #28]
 80134b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80134ba:	68bb      	ldr	r3, [r7, #8]
 80134bc:	781b      	ldrb	r3, [r3, #0]
 80134be:	f003 030f 	and.w	r3, r3, #15
 80134c2:	2101      	movs	r1, #1
 80134c4:	fa01 f303 	lsl.w	r3, r1, r3
 80134c8:	69f9      	ldr	r1, [r7, #28]
 80134ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80134ce:	4313      	orrs	r3, r2
 80134d0:	634b      	str	r3, [r1, #52]	; 0x34
 80134d2:	e10d      	b.n	80136f0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80134d4:	69fb      	ldr	r3, [r7, #28]
 80134d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134da:	689b      	ldr	r3, [r3, #8]
 80134dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d110      	bne.n	8013506 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80134e4:	69bb      	ldr	r3, [r7, #24]
 80134e6:	015a      	lsls	r2, r3, #5
 80134e8:	69fb      	ldr	r3, [r7, #28]
 80134ea:	4413      	add	r3, r2
 80134ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	69ba      	ldr	r2, [r7, #24]
 80134f4:	0151      	lsls	r1, r2, #5
 80134f6:	69fa      	ldr	r2, [r7, #28]
 80134f8:	440a      	add	r2, r1
 80134fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013502:	6013      	str	r3, [r2, #0]
 8013504:	e00f      	b.n	8013526 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013506:	69bb      	ldr	r3, [r7, #24]
 8013508:	015a      	lsls	r2, r3, #5
 801350a:	69fb      	ldr	r3, [r7, #28]
 801350c:	4413      	add	r3, r2
 801350e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	69ba      	ldr	r2, [r7, #24]
 8013516:	0151      	lsls	r1, r2, #5
 8013518:	69fa      	ldr	r2, [r7, #28]
 801351a:	440a      	add	r2, r1
 801351c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013524:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	6919      	ldr	r1, [r3, #16]
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	781a      	ldrb	r2, [r3, #0]
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	699b      	ldr	r3, [r3, #24]
 8013532:	b298      	uxth	r0, r3
 8013534:	79fb      	ldrb	r3, [r7, #7]
 8013536:	9300      	str	r3, [sp, #0]
 8013538:	4603      	mov	r3, r0
 801353a:	68f8      	ldr	r0, [r7, #12]
 801353c:	f000 faea 	bl	8013b14 <USB_WritePacket>
 8013540:	e0d6      	b.n	80136f0 <USB_EPStartXfer+0x488>
 8013542:	bf00      	nop
 8013544:	e007ffff 	.word	0xe007ffff
 8013548:	fff80000 	.word	0xfff80000
 801354c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013550:	69bb      	ldr	r3, [r7, #24]
 8013552:	015a      	lsls	r2, r3, #5
 8013554:	69fb      	ldr	r3, [r7, #28]
 8013556:	4413      	add	r3, r2
 8013558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801355c:	691a      	ldr	r2, [r3, #16]
 801355e:	69bb      	ldr	r3, [r7, #24]
 8013560:	0159      	lsls	r1, r3, #5
 8013562:	69fb      	ldr	r3, [r7, #28]
 8013564:	440b      	add	r3, r1
 8013566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801356a:	4619      	mov	r1, r3
 801356c:	4b63      	ldr	r3, [pc, #396]	; (80136fc <USB_EPStartXfer+0x494>)
 801356e:	4013      	ands	r3, r2
 8013570:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013572:	69bb      	ldr	r3, [r7, #24]
 8013574:	015a      	lsls	r2, r3, #5
 8013576:	69fb      	ldr	r3, [r7, #28]
 8013578:	4413      	add	r3, r2
 801357a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801357e:	691a      	ldr	r2, [r3, #16]
 8013580:	69bb      	ldr	r3, [r7, #24]
 8013582:	0159      	lsls	r1, r3, #5
 8013584:	69fb      	ldr	r3, [r7, #28]
 8013586:	440b      	add	r3, r1
 8013588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801358c:	4619      	mov	r1, r3
 801358e:	4b5c      	ldr	r3, [pc, #368]	; (8013700 <USB_EPStartXfer+0x498>)
 8013590:	4013      	ands	r3, r2
 8013592:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	699b      	ldr	r3, [r3, #24]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d123      	bne.n	80135e4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	015a      	lsls	r2, r3, #5
 80135a0:	69fb      	ldr	r3, [r7, #28]
 80135a2:	4413      	add	r3, r2
 80135a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135a8:	691a      	ldr	r2, [r3, #16]
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	68db      	ldr	r3, [r3, #12]
 80135ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80135b2:	69b9      	ldr	r1, [r7, #24]
 80135b4:	0148      	lsls	r0, r1, #5
 80135b6:	69f9      	ldr	r1, [r7, #28]
 80135b8:	4401      	add	r1, r0
 80135ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80135be:	4313      	orrs	r3, r2
 80135c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80135c2:	69bb      	ldr	r3, [r7, #24]
 80135c4:	015a      	lsls	r2, r3, #5
 80135c6:	69fb      	ldr	r3, [r7, #28]
 80135c8:	4413      	add	r3, r2
 80135ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135ce:	691b      	ldr	r3, [r3, #16]
 80135d0:	69ba      	ldr	r2, [r7, #24]
 80135d2:	0151      	lsls	r1, r2, #5
 80135d4:	69fa      	ldr	r2, [r7, #28]
 80135d6:	440a      	add	r2, r1
 80135d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80135e0:	6113      	str	r3, [r2, #16]
 80135e2:	e037      	b.n	8013654 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	699a      	ldr	r2, [r3, #24]
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	68db      	ldr	r3, [r3, #12]
 80135ec:	4413      	add	r3, r2
 80135ee:	1e5a      	subs	r2, r3, #1
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	68db      	ldr	r3, [r3, #12]
 80135f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80135f8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	68db      	ldr	r3, [r3, #12]
 80135fe:	8afa      	ldrh	r2, [r7, #22]
 8013600:	fb03 f202 	mul.w	r2, r3, r2
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013608:	69bb      	ldr	r3, [r7, #24]
 801360a:	015a      	lsls	r2, r3, #5
 801360c:	69fb      	ldr	r3, [r7, #28]
 801360e:	4413      	add	r3, r2
 8013610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013614:	691a      	ldr	r2, [r3, #16]
 8013616:	8afb      	ldrh	r3, [r7, #22]
 8013618:	04d9      	lsls	r1, r3, #19
 801361a:	4b3a      	ldr	r3, [pc, #232]	; (8013704 <USB_EPStartXfer+0x49c>)
 801361c:	400b      	ands	r3, r1
 801361e:	69b9      	ldr	r1, [r7, #24]
 8013620:	0148      	lsls	r0, r1, #5
 8013622:	69f9      	ldr	r1, [r7, #28]
 8013624:	4401      	add	r1, r0
 8013626:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801362a:	4313      	orrs	r3, r2
 801362c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801362e:	69bb      	ldr	r3, [r7, #24]
 8013630:	015a      	lsls	r2, r3, #5
 8013632:	69fb      	ldr	r3, [r7, #28]
 8013634:	4413      	add	r3, r2
 8013636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801363a:	691a      	ldr	r2, [r3, #16]
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	69db      	ldr	r3, [r3, #28]
 8013640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013644:	69b9      	ldr	r1, [r7, #24]
 8013646:	0148      	lsls	r0, r1, #5
 8013648:	69f9      	ldr	r1, [r7, #28]
 801364a:	4401      	add	r1, r0
 801364c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013650:	4313      	orrs	r3, r2
 8013652:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013654:	79fb      	ldrb	r3, [r7, #7]
 8013656:	2b01      	cmp	r3, #1
 8013658:	d10d      	bne.n	8013676 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	691b      	ldr	r3, [r3, #16]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d009      	beq.n	8013676 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	6919      	ldr	r1, [r3, #16]
 8013666:	69bb      	ldr	r3, [r7, #24]
 8013668:	015a      	lsls	r2, r3, #5
 801366a:	69fb      	ldr	r3, [r7, #28]
 801366c:	4413      	add	r3, r2
 801366e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013672:	460a      	mov	r2, r1
 8013674:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	791b      	ldrb	r3, [r3, #4]
 801367a:	2b01      	cmp	r3, #1
 801367c:	d128      	bne.n	80136d0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801367e:	69fb      	ldr	r3, [r7, #28]
 8013680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013684:	689b      	ldr	r3, [r3, #8]
 8013686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801368a:	2b00      	cmp	r3, #0
 801368c:	d110      	bne.n	80136b0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	015a      	lsls	r2, r3, #5
 8013692:	69fb      	ldr	r3, [r7, #28]
 8013694:	4413      	add	r3, r2
 8013696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	69ba      	ldr	r2, [r7, #24]
 801369e:	0151      	lsls	r1, r2, #5
 80136a0:	69fa      	ldr	r2, [r7, #28]
 80136a2:	440a      	add	r2, r1
 80136a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80136ac:	6013      	str	r3, [r2, #0]
 80136ae:	e00f      	b.n	80136d0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80136b0:	69bb      	ldr	r3, [r7, #24]
 80136b2:	015a      	lsls	r2, r3, #5
 80136b4:	69fb      	ldr	r3, [r7, #28]
 80136b6:	4413      	add	r3, r2
 80136b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	69ba      	ldr	r2, [r7, #24]
 80136c0:	0151      	lsls	r1, r2, #5
 80136c2:	69fa      	ldr	r2, [r7, #28]
 80136c4:	440a      	add	r2, r1
 80136c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80136d0:	69bb      	ldr	r3, [r7, #24]
 80136d2:	015a      	lsls	r2, r3, #5
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	4413      	add	r3, r2
 80136d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	69ba      	ldr	r2, [r7, #24]
 80136e0:	0151      	lsls	r1, r2, #5
 80136e2:	69fa      	ldr	r2, [r7, #28]
 80136e4:	440a      	add	r2, r1
 80136e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80136ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80136f0:	2300      	movs	r3, #0
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3720      	adds	r7, #32
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	bf00      	nop
 80136fc:	fff80000 	.word	0xfff80000
 8013700:	e007ffff 	.word	0xe007ffff
 8013704:	1ff80000 	.word	0x1ff80000

08013708 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013708:	b480      	push	{r7}
 801370a:	b087      	sub	sp, #28
 801370c:	af00      	add	r7, sp, #0
 801370e:	60f8      	str	r0, [r7, #12]
 8013710:	60b9      	str	r1, [r7, #8]
 8013712:	4613      	mov	r3, r2
 8013714:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	781b      	ldrb	r3, [r3, #0]
 801371e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	785b      	ldrb	r3, [r3, #1]
 8013724:	2b01      	cmp	r3, #1
 8013726:	f040 80ce 	bne.w	80138c6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	699b      	ldr	r3, [r3, #24]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d132      	bne.n	8013798 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013732:	693b      	ldr	r3, [r7, #16]
 8013734:	015a      	lsls	r2, r3, #5
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	4413      	add	r3, r2
 801373a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801373e:	691a      	ldr	r2, [r3, #16]
 8013740:	693b      	ldr	r3, [r7, #16]
 8013742:	0159      	lsls	r1, r3, #5
 8013744:	697b      	ldr	r3, [r7, #20]
 8013746:	440b      	add	r3, r1
 8013748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801374c:	4619      	mov	r1, r3
 801374e:	4b9a      	ldr	r3, [pc, #616]	; (80139b8 <USB_EP0StartXfer+0x2b0>)
 8013750:	4013      	ands	r3, r2
 8013752:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	015a      	lsls	r2, r3, #5
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	4413      	add	r3, r2
 801375c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013760:	691b      	ldr	r3, [r3, #16]
 8013762:	693a      	ldr	r2, [r7, #16]
 8013764:	0151      	lsls	r1, r2, #5
 8013766:	697a      	ldr	r2, [r7, #20]
 8013768:	440a      	add	r2, r1
 801376a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801376e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013772:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	015a      	lsls	r2, r3, #5
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	4413      	add	r3, r2
 801377c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013780:	691a      	ldr	r2, [r3, #16]
 8013782:	693b      	ldr	r3, [r7, #16]
 8013784:	0159      	lsls	r1, r3, #5
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	440b      	add	r3, r1
 801378a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801378e:	4619      	mov	r1, r3
 8013790:	4b8a      	ldr	r3, [pc, #552]	; (80139bc <USB_EP0StartXfer+0x2b4>)
 8013792:	4013      	ands	r3, r2
 8013794:	610b      	str	r3, [r1, #16]
 8013796:	e04e      	b.n	8013836 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	015a      	lsls	r2, r3, #5
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	4413      	add	r3, r2
 80137a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137a4:	691a      	ldr	r2, [r3, #16]
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	0159      	lsls	r1, r3, #5
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	440b      	add	r3, r1
 80137ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137b2:	4619      	mov	r1, r3
 80137b4:	4b81      	ldr	r3, [pc, #516]	; (80139bc <USB_EP0StartXfer+0x2b4>)
 80137b6:	4013      	ands	r3, r2
 80137b8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80137ba:	693b      	ldr	r3, [r7, #16]
 80137bc:	015a      	lsls	r2, r3, #5
 80137be:	697b      	ldr	r3, [r7, #20]
 80137c0:	4413      	add	r3, r2
 80137c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137c6:	691a      	ldr	r2, [r3, #16]
 80137c8:	693b      	ldr	r3, [r7, #16]
 80137ca:	0159      	lsls	r1, r3, #5
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	440b      	add	r3, r1
 80137d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137d4:	4619      	mov	r1, r3
 80137d6:	4b78      	ldr	r3, [pc, #480]	; (80139b8 <USB_EP0StartXfer+0x2b0>)
 80137d8:	4013      	ands	r3, r2
 80137da:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	699a      	ldr	r2, [r3, #24]
 80137e0:	68bb      	ldr	r3, [r7, #8]
 80137e2:	68db      	ldr	r3, [r3, #12]
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d903      	bls.n	80137f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	68da      	ldr	r2, [r3, #12]
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80137f0:	693b      	ldr	r3, [r7, #16]
 80137f2:	015a      	lsls	r2, r3, #5
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	4413      	add	r3, r2
 80137f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137fc:	691b      	ldr	r3, [r3, #16]
 80137fe:	693a      	ldr	r2, [r7, #16]
 8013800:	0151      	lsls	r1, r2, #5
 8013802:	697a      	ldr	r2, [r7, #20]
 8013804:	440a      	add	r2, r1
 8013806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801380a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801380e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013810:	693b      	ldr	r3, [r7, #16]
 8013812:	015a      	lsls	r2, r3, #5
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	4413      	add	r3, r2
 8013818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801381c:	691a      	ldr	r2, [r3, #16]
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	699b      	ldr	r3, [r3, #24]
 8013822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013826:	6939      	ldr	r1, [r7, #16]
 8013828:	0148      	lsls	r0, r1, #5
 801382a:	6979      	ldr	r1, [r7, #20]
 801382c:	4401      	add	r1, r0
 801382e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013832:	4313      	orrs	r3, r2
 8013834:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013836:	79fb      	ldrb	r3, [r7, #7]
 8013838:	2b01      	cmp	r3, #1
 801383a:	d11e      	bne.n	801387a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	695b      	ldr	r3, [r3, #20]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d009      	beq.n	8013858 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013844:	693b      	ldr	r3, [r7, #16]
 8013846:	015a      	lsls	r2, r3, #5
 8013848:	697b      	ldr	r3, [r7, #20]
 801384a:	4413      	add	r3, r2
 801384c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013850:	461a      	mov	r2, r3
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	695b      	ldr	r3, [r3, #20]
 8013856:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	015a      	lsls	r2, r3, #5
 801385c:	697b      	ldr	r3, [r7, #20]
 801385e:	4413      	add	r3, r2
 8013860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	693a      	ldr	r2, [r7, #16]
 8013868:	0151      	lsls	r1, r2, #5
 801386a:	697a      	ldr	r2, [r7, #20]
 801386c:	440a      	add	r2, r1
 801386e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013872:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013876:	6013      	str	r3, [r2, #0]
 8013878:	e097      	b.n	80139aa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	015a      	lsls	r2, r3, #5
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	4413      	add	r3, r2
 8013882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	693a      	ldr	r2, [r7, #16]
 801388a:	0151      	lsls	r1, r2, #5
 801388c:	697a      	ldr	r2, [r7, #20]
 801388e:	440a      	add	r2, r1
 8013890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013894:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013898:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	699b      	ldr	r3, [r3, #24]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	f000 8083 	beq.w	80139aa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80138a4:	697b      	ldr	r3, [r7, #20]
 80138a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80138ac:	68bb      	ldr	r3, [r7, #8]
 80138ae:	781b      	ldrb	r3, [r3, #0]
 80138b0:	f003 030f 	and.w	r3, r3, #15
 80138b4:	2101      	movs	r1, #1
 80138b6:	fa01 f303 	lsl.w	r3, r1, r3
 80138ba:	6979      	ldr	r1, [r7, #20]
 80138bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80138c0:	4313      	orrs	r3, r2
 80138c2:	634b      	str	r3, [r1, #52]	; 0x34
 80138c4:	e071      	b.n	80139aa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	015a      	lsls	r2, r3, #5
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	4413      	add	r3, r2
 80138ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138d2:	691a      	ldr	r2, [r3, #16]
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	0159      	lsls	r1, r3, #5
 80138d8:	697b      	ldr	r3, [r7, #20]
 80138da:	440b      	add	r3, r1
 80138dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138e0:	4619      	mov	r1, r3
 80138e2:	4b36      	ldr	r3, [pc, #216]	; (80139bc <USB_EP0StartXfer+0x2b4>)
 80138e4:	4013      	ands	r3, r2
 80138e6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	015a      	lsls	r2, r3, #5
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	4413      	add	r3, r2
 80138f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138f4:	691a      	ldr	r2, [r3, #16]
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	0159      	lsls	r1, r3, #5
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	440b      	add	r3, r1
 80138fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013902:	4619      	mov	r1, r3
 8013904:	4b2c      	ldr	r3, [pc, #176]	; (80139b8 <USB_EP0StartXfer+0x2b0>)
 8013906:	4013      	ands	r3, r2
 8013908:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	699b      	ldr	r3, [r3, #24]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d003      	beq.n	801391a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	68da      	ldr	r2, [r3, #12]
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	68da      	ldr	r2, [r3, #12]
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	015a      	lsls	r2, r3, #5
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	4413      	add	r3, r2
 801392a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801392e:	691b      	ldr	r3, [r3, #16]
 8013930:	693a      	ldr	r2, [r7, #16]
 8013932:	0151      	lsls	r1, r2, #5
 8013934:	697a      	ldr	r2, [r7, #20]
 8013936:	440a      	add	r2, r1
 8013938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801393c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013940:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	015a      	lsls	r2, r3, #5
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	4413      	add	r3, r2
 801394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801394e:	691a      	ldr	r2, [r3, #16]
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	69db      	ldr	r3, [r3, #28]
 8013954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013958:	6939      	ldr	r1, [r7, #16]
 801395a:	0148      	lsls	r0, r1, #5
 801395c:	6979      	ldr	r1, [r7, #20]
 801395e:	4401      	add	r1, r0
 8013960:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013964:	4313      	orrs	r3, r2
 8013966:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8013968:	79fb      	ldrb	r3, [r7, #7]
 801396a:	2b01      	cmp	r3, #1
 801396c:	d10d      	bne.n	801398a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801396e:	68bb      	ldr	r3, [r7, #8]
 8013970:	691b      	ldr	r3, [r3, #16]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d009      	beq.n	801398a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	6919      	ldr	r1, [r3, #16]
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	015a      	lsls	r2, r3, #5
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	4413      	add	r3, r2
 8013982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013986:	460a      	mov	r2, r1
 8013988:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	015a      	lsls	r2, r3, #5
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	4413      	add	r3, r2
 8013992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	693a      	ldr	r2, [r7, #16]
 801399a:	0151      	lsls	r1, r2, #5
 801399c:	697a      	ldr	r2, [r7, #20]
 801399e:	440a      	add	r2, r1
 80139a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80139a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80139aa:	2300      	movs	r3, #0
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	371c      	adds	r7, #28
 80139b0:	46bd      	mov	sp, r7
 80139b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b6:	4770      	bx	lr
 80139b8:	e007ffff 	.word	0xe007ffff
 80139bc:	fff80000 	.word	0xfff80000

080139c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80139c0:	b480      	push	{r7}
 80139c2:	b087      	sub	sp, #28
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80139ca:	2300      	movs	r3, #0
 80139cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80139ce:	2300      	movs	r3, #0
 80139d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80139d6:	683b      	ldr	r3, [r7, #0]
 80139d8:	785b      	ldrb	r3, [r3, #1]
 80139da:	2b01      	cmp	r3, #1
 80139dc:	d14a      	bne.n	8013a74 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	015a      	lsls	r2, r3, #5
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	4413      	add	r3, r2
 80139e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139f6:	f040 8086 	bne.w	8013b06 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	015a      	lsls	r2, r3, #5
 8013a00:	693b      	ldr	r3, [r7, #16]
 8013a02:	4413      	add	r3, r2
 8013a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	683a      	ldr	r2, [r7, #0]
 8013a0c:	7812      	ldrb	r2, [r2, #0]
 8013a0e:	0151      	lsls	r1, r2, #5
 8013a10:	693a      	ldr	r2, [r7, #16]
 8013a12:	440a      	add	r2, r1
 8013a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a1c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	781b      	ldrb	r3, [r3, #0]
 8013a22:	015a      	lsls	r2, r3, #5
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	4413      	add	r3, r2
 8013a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	683a      	ldr	r2, [r7, #0]
 8013a30:	7812      	ldrb	r2, [r2, #0]
 8013a32:	0151      	lsls	r1, r2, #5
 8013a34:	693a      	ldr	r2, [r7, #16]
 8013a36:	440a      	add	r2, r1
 8013a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	3301      	adds	r3, #1
 8013a46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8013a4e:	4293      	cmp	r3, r2
 8013a50:	d902      	bls.n	8013a58 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013a52:	2301      	movs	r3, #1
 8013a54:	75fb      	strb	r3, [r7, #23]
          break;
 8013a56:	e056      	b.n	8013b06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	781b      	ldrb	r3, [r3, #0]
 8013a5c:	015a      	lsls	r2, r3, #5
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	4413      	add	r3, r2
 8013a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a70:	d0e7      	beq.n	8013a42 <USB_EPStopXfer+0x82>
 8013a72:	e048      	b.n	8013b06 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	781b      	ldrb	r3, [r3, #0]
 8013a78:	015a      	lsls	r2, r3, #5
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	4413      	add	r3, r2
 8013a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a8c:	d13b      	bne.n	8013b06 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	781b      	ldrb	r3, [r3, #0]
 8013a92:	015a      	lsls	r2, r3, #5
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	4413      	add	r3, r2
 8013a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	683a      	ldr	r2, [r7, #0]
 8013aa0:	7812      	ldrb	r2, [r2, #0]
 8013aa2:	0151      	lsls	r1, r2, #5
 8013aa4:	693a      	ldr	r2, [r7, #16]
 8013aa6:	440a      	add	r2, r1
 8013aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013aac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013ab0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013ab2:	683b      	ldr	r3, [r7, #0]
 8013ab4:	781b      	ldrb	r3, [r3, #0]
 8013ab6:	015a      	lsls	r2, r3, #5
 8013ab8:	693b      	ldr	r3, [r7, #16]
 8013aba:	4413      	add	r3, r2
 8013abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	683a      	ldr	r2, [r7, #0]
 8013ac4:	7812      	ldrb	r2, [r2, #0]
 8013ac6:	0151      	lsls	r1, r2, #5
 8013ac8:	693a      	ldr	r2, [r7, #16]
 8013aca:	440a      	add	r2, r1
 8013acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ad0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ad4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	3301      	adds	r3, #1
 8013ada:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	f242 7210 	movw	r2, #10000	; 0x2710
 8013ae2:	4293      	cmp	r3, r2
 8013ae4:	d902      	bls.n	8013aec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013ae6:	2301      	movs	r3, #1
 8013ae8:	75fb      	strb	r3, [r7, #23]
          break;
 8013aea:	e00c      	b.n	8013b06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	781b      	ldrb	r3, [r3, #0]
 8013af0:	015a      	lsls	r2, r3, #5
 8013af2:	693b      	ldr	r3, [r7, #16]
 8013af4:	4413      	add	r3, r2
 8013af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b04:	d0e7      	beq.n	8013ad6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b08:	4618      	mov	r0, r3
 8013b0a:	371c      	adds	r7, #28
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b12:	4770      	bx	lr

08013b14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013b14:	b480      	push	{r7}
 8013b16:	b089      	sub	sp, #36	; 0x24
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	60f8      	str	r0, [r7, #12]
 8013b1c:	60b9      	str	r1, [r7, #8]
 8013b1e:	4611      	mov	r1, r2
 8013b20:	461a      	mov	r2, r3
 8013b22:	460b      	mov	r3, r1
 8013b24:	71fb      	strb	r3, [r7, #7]
 8013b26:	4613      	mov	r3, r2
 8013b28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013b32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d123      	bne.n	8013b82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013b3a:	88bb      	ldrh	r3, [r7, #4]
 8013b3c:	3303      	adds	r3, #3
 8013b3e:	089b      	lsrs	r3, r3, #2
 8013b40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013b42:	2300      	movs	r3, #0
 8013b44:	61bb      	str	r3, [r7, #24]
 8013b46:	e018      	b.n	8013b7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013b48:	79fb      	ldrb	r3, [r7, #7]
 8013b4a:	031a      	lsls	r2, r3, #12
 8013b4c:	697b      	ldr	r3, [r7, #20]
 8013b4e:	4413      	add	r3, r2
 8013b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b54:	461a      	mov	r2, r3
 8013b56:	69fb      	ldr	r3, [r7, #28]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013b5c:	69fb      	ldr	r3, [r7, #28]
 8013b5e:	3301      	adds	r3, #1
 8013b60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b62:	69fb      	ldr	r3, [r7, #28]
 8013b64:	3301      	adds	r3, #1
 8013b66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	3301      	adds	r3, #1
 8013b6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b6e:	69fb      	ldr	r3, [r7, #28]
 8013b70:	3301      	adds	r3, #1
 8013b72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013b74:	69bb      	ldr	r3, [r7, #24]
 8013b76:	3301      	adds	r3, #1
 8013b78:	61bb      	str	r3, [r7, #24]
 8013b7a:	69ba      	ldr	r2, [r7, #24]
 8013b7c:	693b      	ldr	r3, [r7, #16]
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d3e2      	bcc.n	8013b48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013b82:	2300      	movs	r3, #0
}
 8013b84:	4618      	mov	r0, r3
 8013b86:	3724      	adds	r7, #36	; 0x24
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8e:	4770      	bx	lr

08013b90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013b90:	b480      	push	{r7}
 8013b92:	b08b      	sub	sp, #44	; 0x2c
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	60f8      	str	r0, [r7, #12]
 8013b98:	60b9      	str	r1, [r7, #8]
 8013b9a:	4613      	mov	r3, r2
 8013b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013ba6:	88fb      	ldrh	r3, [r7, #6]
 8013ba8:	089b      	lsrs	r3, r3, #2
 8013baa:	b29b      	uxth	r3, r3
 8013bac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013bae:	88fb      	ldrh	r3, [r7, #6]
 8013bb0:	f003 0303 	and.w	r3, r3, #3
 8013bb4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	623b      	str	r3, [r7, #32]
 8013bba:	e014      	b.n	8013be6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013bbc:	69bb      	ldr	r3, [r7, #24]
 8013bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013bc2:	681a      	ldr	r2, [r3, #0]
 8013bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8013bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bca:	3301      	adds	r3, #1
 8013bcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd0:	3301      	adds	r3, #1
 8013bd2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd6:	3301      	adds	r3, #1
 8013bd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bdc:	3301      	adds	r3, #1
 8013bde:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013be0:	6a3b      	ldr	r3, [r7, #32]
 8013be2:	3301      	adds	r3, #1
 8013be4:	623b      	str	r3, [r7, #32]
 8013be6:	6a3a      	ldr	r2, [r7, #32]
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	d3e6      	bcc.n	8013bbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013bee:	8bfb      	ldrh	r3, [r7, #30]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d01e      	beq.n	8013c32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013bf8:	69bb      	ldr	r3, [r7, #24]
 8013bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013bfe:	461a      	mov	r2, r3
 8013c00:	f107 0310 	add.w	r3, r7, #16
 8013c04:	6812      	ldr	r2, [r2, #0]
 8013c06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013c08:	693a      	ldr	r2, [r7, #16]
 8013c0a:	6a3b      	ldr	r3, [r7, #32]
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	00db      	lsls	r3, r3, #3
 8013c10:	fa22 f303 	lsr.w	r3, r2, r3
 8013c14:	b2da      	uxtb	r2, r3
 8013c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c18:	701a      	strb	r2, [r3, #0]
      i++;
 8013c1a:	6a3b      	ldr	r3, [r7, #32]
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8013c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c22:	3301      	adds	r3, #1
 8013c24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013c26:	8bfb      	ldrh	r3, [r7, #30]
 8013c28:	3b01      	subs	r3, #1
 8013c2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013c2c:	8bfb      	ldrh	r3, [r7, #30]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d1ea      	bne.n	8013c08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	372c      	adds	r7, #44	; 0x2c
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3e:	4770      	bx	lr

08013c40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c40:	b480      	push	{r7}
 8013c42:	b085      	sub	sp, #20
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
 8013c48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	781b      	ldrb	r3, [r3, #0]
 8013c52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	785b      	ldrb	r3, [r3, #1]
 8013c58:	2b01      	cmp	r3, #1
 8013c5a:	d12c      	bne.n	8013cb6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	015a      	lsls	r2, r3, #5
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	4413      	add	r3, r2
 8013c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	db12      	blt.n	8013c94 <USB_EPSetStall+0x54>
 8013c6e:	68bb      	ldr	r3, [r7, #8]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d00f      	beq.n	8013c94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	015a      	lsls	r2, r3, #5
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	4413      	add	r3, r2
 8013c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	68ba      	ldr	r2, [r7, #8]
 8013c84:	0151      	lsls	r1, r2, #5
 8013c86:	68fa      	ldr	r2, [r7, #12]
 8013c88:	440a      	add	r2, r1
 8013c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013c92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013c94:	68bb      	ldr	r3, [r7, #8]
 8013c96:	015a      	lsls	r2, r3, #5
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	4413      	add	r3, r2
 8013c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	68ba      	ldr	r2, [r7, #8]
 8013ca4:	0151      	lsls	r1, r2, #5
 8013ca6:	68fa      	ldr	r2, [r7, #12]
 8013ca8:	440a      	add	r2, r1
 8013caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013cb2:	6013      	str	r3, [r2, #0]
 8013cb4:	e02b      	b.n	8013d0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	015a      	lsls	r2, r3, #5
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	4413      	add	r3, r2
 8013cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	db12      	blt.n	8013cee <USB_EPSetStall+0xae>
 8013cc8:	68bb      	ldr	r3, [r7, #8]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d00f      	beq.n	8013cee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013cce:	68bb      	ldr	r3, [r7, #8]
 8013cd0:	015a      	lsls	r2, r3, #5
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	4413      	add	r3, r2
 8013cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	68ba      	ldr	r2, [r7, #8]
 8013cde:	0151      	lsls	r1, r2, #5
 8013ce0:	68fa      	ldr	r2, [r7, #12]
 8013ce2:	440a      	add	r2, r1
 8013ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ce8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013cec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013cee:	68bb      	ldr	r3, [r7, #8]
 8013cf0:	015a      	lsls	r2, r3, #5
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	4413      	add	r3, r2
 8013cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	68ba      	ldr	r2, [r7, #8]
 8013cfe:	0151      	lsls	r1, r2, #5
 8013d00:	68fa      	ldr	r2, [r7, #12]
 8013d02:	440a      	add	r2, r1
 8013d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013d0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013d0e:	2300      	movs	r3, #0
}
 8013d10:	4618      	mov	r0, r3
 8013d12:	3714      	adds	r7, #20
 8013d14:	46bd      	mov	sp, r7
 8013d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1a:	4770      	bx	lr

08013d1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013d1c:	b480      	push	{r7}
 8013d1e:	b085      	sub	sp, #20
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
 8013d24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	781b      	ldrb	r3, [r3, #0]
 8013d2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	785b      	ldrb	r3, [r3, #1]
 8013d34:	2b01      	cmp	r3, #1
 8013d36:	d128      	bne.n	8013d8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	015a      	lsls	r2, r3, #5
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	4413      	add	r3, r2
 8013d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	68ba      	ldr	r2, [r7, #8]
 8013d48:	0151      	lsls	r1, r2, #5
 8013d4a:	68fa      	ldr	r2, [r7, #12]
 8013d4c:	440a      	add	r2, r1
 8013d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d58:	683b      	ldr	r3, [r7, #0]
 8013d5a:	791b      	ldrb	r3, [r3, #4]
 8013d5c:	2b03      	cmp	r3, #3
 8013d5e:	d003      	beq.n	8013d68 <USB_EPClearStall+0x4c>
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	791b      	ldrb	r3, [r3, #4]
 8013d64:	2b02      	cmp	r3, #2
 8013d66:	d138      	bne.n	8013dda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	015a      	lsls	r2, r3, #5
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	4413      	add	r3, r2
 8013d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	68ba      	ldr	r2, [r7, #8]
 8013d78:	0151      	lsls	r1, r2, #5
 8013d7a:	68fa      	ldr	r2, [r7, #12]
 8013d7c:	440a      	add	r2, r1
 8013d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d86:	6013      	str	r3, [r2, #0]
 8013d88:	e027      	b.n	8013dda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013d8a:	68bb      	ldr	r3, [r7, #8]
 8013d8c:	015a      	lsls	r2, r3, #5
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	4413      	add	r3, r2
 8013d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	68ba      	ldr	r2, [r7, #8]
 8013d9a:	0151      	lsls	r1, r2, #5
 8013d9c:	68fa      	ldr	r2, [r7, #12]
 8013d9e:	440a      	add	r2, r1
 8013da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013da4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013da8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	791b      	ldrb	r3, [r3, #4]
 8013dae:	2b03      	cmp	r3, #3
 8013db0:	d003      	beq.n	8013dba <USB_EPClearStall+0x9e>
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	791b      	ldrb	r3, [r3, #4]
 8013db6:	2b02      	cmp	r3, #2
 8013db8:	d10f      	bne.n	8013dda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	015a      	lsls	r2, r3, #5
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	4413      	add	r3, r2
 8013dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	68ba      	ldr	r2, [r7, #8]
 8013dca:	0151      	lsls	r1, r2, #5
 8013dcc:	68fa      	ldr	r2, [r7, #12]
 8013dce:	440a      	add	r2, r1
 8013dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013dd8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013dda:	2300      	movs	r3, #0
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3714      	adds	r7, #20
 8013de0:	46bd      	mov	sp, r7
 8013de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de6:	4770      	bx	lr

08013de8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013de8:	b480      	push	{r7}
 8013dea:	b085      	sub	sp, #20
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
 8013df0:	460b      	mov	r3, r1
 8013df2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	68fa      	ldr	r2, [r7, #12]
 8013e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013e0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e12:	681a      	ldr	r2, [r3, #0]
 8013e14:	78fb      	ldrb	r3, [r7, #3]
 8013e16:	011b      	lsls	r3, r3, #4
 8013e18:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013e1c:	68f9      	ldr	r1, [r7, #12]
 8013e1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e22:	4313      	orrs	r3, r2
 8013e24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013e26:	2300      	movs	r3, #0
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3714      	adds	r7, #20
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e32:	4770      	bx	lr

08013e34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e34:	b480      	push	{r7}
 8013e36:	b085      	sub	sp, #20
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	68fa      	ldr	r2, [r7, #12]
 8013e4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e4e:	f023 0303 	bic.w	r3, r3, #3
 8013e52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e5a:	685b      	ldr	r3, [r3, #4]
 8013e5c:	68fa      	ldr	r2, [r7, #12]
 8013e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e62:	f023 0302 	bic.w	r3, r3, #2
 8013e66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e68:	2300      	movs	r3, #0
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	3714      	adds	r7, #20
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e74:	4770      	bx	lr

08013e76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e76:	b480      	push	{r7}
 8013e78:	b085      	sub	sp, #20
 8013e7a:	af00      	add	r7, sp, #0
 8013e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	68fa      	ldr	r2, [r7, #12]
 8013e8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e90:	f023 0303 	bic.w	r3, r3, #3
 8013e94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e9c:	685b      	ldr	r3, [r3, #4]
 8013e9e:	68fa      	ldr	r2, [r7, #12]
 8013ea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013ea4:	f043 0302 	orr.w	r3, r3, #2
 8013ea8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013eaa:	2300      	movs	r3, #0
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3714      	adds	r7, #20
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb6:	4770      	bx	lr

08013eb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013eb8:	b480      	push	{r7}
 8013eba:	b085      	sub	sp, #20
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	695b      	ldr	r3, [r3, #20]
 8013ec4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	699b      	ldr	r3, [r3, #24]
 8013eca:	68fa      	ldr	r2, [r7, #12]
 8013ecc:	4013      	ands	r3, r2
 8013ece:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
}
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	3714      	adds	r7, #20
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013edc:	4770      	bx	lr

08013ede <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013ede:	b480      	push	{r7}
 8013ee0:	b085      	sub	sp, #20
 8013ee2:	af00      	add	r7, sp, #0
 8013ee4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ef0:	699b      	ldr	r3, [r3, #24]
 8013ef2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013efa:	69db      	ldr	r3, [r3, #28]
 8013efc:	68ba      	ldr	r2, [r7, #8]
 8013efe:	4013      	ands	r3, r2
 8013f00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	0c1b      	lsrs	r3, r3, #16
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	3714      	adds	r7, #20
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f10:	4770      	bx	lr

08013f12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013f12:	b480      	push	{r7}
 8013f14:	b085      	sub	sp, #20
 8013f16:	af00      	add	r7, sp, #0
 8013f18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f24:	699b      	ldr	r3, [r3, #24]
 8013f26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f2e:	69db      	ldr	r3, [r3, #28]
 8013f30:	68ba      	ldr	r2, [r7, #8]
 8013f32:	4013      	ands	r3, r2
 8013f34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	b29b      	uxth	r3, r3
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3714      	adds	r7, #20
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f44:	4770      	bx	lr

08013f46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f46:	b480      	push	{r7}
 8013f48:	b085      	sub	sp, #20
 8013f4a:	af00      	add	r7, sp, #0
 8013f4c:	6078      	str	r0, [r7, #4]
 8013f4e:	460b      	mov	r3, r1
 8013f50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013f56:	78fb      	ldrb	r3, [r7, #3]
 8013f58:	015a      	lsls	r2, r3, #5
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	4413      	add	r3, r2
 8013f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f62:	689b      	ldr	r3, [r3, #8]
 8013f64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f6c:	695b      	ldr	r3, [r3, #20]
 8013f6e:	68ba      	ldr	r2, [r7, #8]
 8013f70:	4013      	ands	r3, r2
 8013f72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013f74:	68bb      	ldr	r3, [r7, #8]
}
 8013f76:	4618      	mov	r0, r3
 8013f78:	3714      	adds	r7, #20
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f80:	4770      	bx	lr

08013f82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f82:	b480      	push	{r7}
 8013f84:	b087      	sub	sp, #28
 8013f86:	af00      	add	r7, sp, #0
 8013f88:	6078      	str	r0, [r7, #4]
 8013f8a:	460b      	mov	r3, r1
 8013f8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013f92:	697b      	ldr	r3, [r7, #20]
 8013f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f98:	691b      	ldr	r3, [r3, #16]
 8013f9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fa4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013fa6:	78fb      	ldrb	r3, [r7, #3]
 8013fa8:	f003 030f 	and.w	r3, r3, #15
 8013fac:	68fa      	ldr	r2, [r7, #12]
 8013fae:	fa22 f303 	lsr.w	r3, r2, r3
 8013fb2:	01db      	lsls	r3, r3, #7
 8013fb4:	b2db      	uxtb	r3, r3
 8013fb6:	693a      	ldr	r2, [r7, #16]
 8013fb8:	4313      	orrs	r3, r2
 8013fba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013fbc:	78fb      	ldrb	r3, [r7, #3]
 8013fbe:	015a      	lsls	r2, r3, #5
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	4413      	add	r3, r2
 8013fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fc8:	689b      	ldr	r3, [r3, #8]
 8013fca:	693a      	ldr	r2, [r7, #16]
 8013fcc:	4013      	ands	r3, r2
 8013fce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013fd0:	68bb      	ldr	r3, [r7, #8]
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	371c      	adds	r7, #28
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fdc:	4770      	bx	lr

08013fde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013fde:	b480      	push	{r7}
 8013fe0:	b083      	sub	sp, #12
 8013fe2:	af00      	add	r7, sp, #0
 8013fe4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	695b      	ldr	r3, [r3, #20]
 8013fea:	f003 0301 	and.w	r3, r3, #1
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	370c      	adds	r7, #12
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff8:	4770      	bx	lr
	...

08013ffc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013ffc:	b480      	push	{r7}
 8013ffe:	b085      	sub	sp, #20
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801400e:	681a      	ldr	r2, [r3, #0]
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014016:	4619      	mov	r1, r3
 8014018:	4b09      	ldr	r3, [pc, #36]	; (8014040 <USB_ActivateSetup+0x44>)
 801401a:	4013      	ands	r3, r2
 801401c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014024:	685b      	ldr	r3, [r3, #4]
 8014026:	68fa      	ldr	r2, [r7, #12]
 8014028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801402c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014030:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014032:	2300      	movs	r3, #0
}
 8014034:	4618      	mov	r0, r3
 8014036:	3714      	adds	r7, #20
 8014038:	46bd      	mov	sp, r7
 801403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403e:	4770      	bx	lr
 8014040:	fffff800 	.word	0xfffff800

08014044 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014044:	b480      	push	{r7}
 8014046:	b087      	sub	sp, #28
 8014048:	af00      	add	r7, sp, #0
 801404a:	60f8      	str	r0, [r7, #12]
 801404c:	460b      	mov	r3, r1
 801404e:	607a      	str	r2, [r7, #4]
 8014050:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	333c      	adds	r3, #60	; 0x3c
 801405a:	3304      	adds	r3, #4
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014060:	693b      	ldr	r3, [r7, #16]
 8014062:	4a26      	ldr	r2, [pc, #152]	; (80140fc <USB_EP0_OutStart+0xb8>)
 8014064:	4293      	cmp	r3, r2
 8014066:	d90a      	bls.n	801407e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014068:	697b      	ldr	r3, [r7, #20]
 801406a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014078:	d101      	bne.n	801407e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801407a:	2300      	movs	r3, #0
 801407c:	e037      	b.n	80140ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014084:	461a      	mov	r2, r3
 8014086:	2300      	movs	r3, #0
 8014088:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014090:	691b      	ldr	r3, [r3, #16]
 8014092:	697a      	ldr	r2, [r7, #20]
 8014094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801409c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801409e:	697b      	ldr	r3, [r7, #20]
 80140a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140a4:	691b      	ldr	r3, [r3, #16]
 80140a6:	697a      	ldr	r2, [r7, #20]
 80140a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140ac:	f043 0318 	orr.w	r3, r3, #24
 80140b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140b8:	691b      	ldr	r3, [r3, #16]
 80140ba:	697a      	ldr	r2, [r7, #20]
 80140bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80140c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80140c6:	7afb      	ldrb	r3, [r7, #11]
 80140c8:	2b01      	cmp	r3, #1
 80140ca:	d10f      	bne.n	80140ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140d2:	461a      	mov	r2, r3
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	697a      	ldr	r2, [r7, #20]
 80140e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80140ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80140ec:	2300      	movs	r3, #0
}
 80140ee:	4618      	mov	r0, r3
 80140f0:	371c      	adds	r7, #28
 80140f2:	46bd      	mov	sp, r7
 80140f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f8:	4770      	bx	lr
 80140fa:	bf00      	nop
 80140fc:	4f54300a 	.word	0x4f54300a

08014100 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014100:	b480      	push	{r7}
 8014102:	b085      	sub	sp, #20
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014108:	2300      	movs	r3, #0
 801410a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	3301      	adds	r3, #1
 8014110:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	4a13      	ldr	r2, [pc, #76]	; (8014164 <USB_CoreReset+0x64>)
 8014116:	4293      	cmp	r3, r2
 8014118:	d901      	bls.n	801411e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801411a:	2303      	movs	r3, #3
 801411c:	e01b      	b.n	8014156 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	691b      	ldr	r3, [r3, #16]
 8014122:	2b00      	cmp	r3, #0
 8014124:	daf2      	bge.n	801410c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014126:	2300      	movs	r3, #0
 8014128:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	691b      	ldr	r3, [r3, #16]
 801412e:	f043 0201 	orr.w	r2, r3, #1
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	3301      	adds	r3, #1
 801413a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	4a09      	ldr	r2, [pc, #36]	; (8014164 <USB_CoreReset+0x64>)
 8014140:	4293      	cmp	r3, r2
 8014142:	d901      	bls.n	8014148 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014144:	2303      	movs	r3, #3
 8014146:	e006      	b.n	8014156 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	691b      	ldr	r3, [r3, #16]
 801414c:	f003 0301 	and.w	r3, r3, #1
 8014150:	2b01      	cmp	r3, #1
 8014152:	d0f0      	beq.n	8014136 <USB_CoreReset+0x36>

  return HAL_OK;
 8014154:	2300      	movs	r3, #0
}
 8014156:	4618      	mov	r0, r3
 8014158:	3714      	adds	r7, #20
 801415a:	46bd      	mov	sp, r7
 801415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014160:	4770      	bx	lr
 8014162:	bf00      	nop
 8014164:	00030d40 	.word	0x00030d40

08014168 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801416c:	4904      	ldr	r1, [pc, #16]	; (8014180 <MX_FATFS_Init+0x18>)
 801416e:	4805      	ldr	r0, [pc, #20]	; (8014184 <MX_FATFS_Init+0x1c>)
 8014170:	f002 f96e 	bl	8016450 <FATFS_LinkDriver>
 8014174:	4603      	mov	r3, r0
 8014176:	461a      	mov	r2, r3
 8014178:	4b03      	ldr	r3, [pc, #12]	; (8014188 <MX_FATFS_Init+0x20>)
 801417a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801417c:	bf00      	nop
 801417e:	bd80      	pop	{r7, pc}
 8014180:	20001e00 	.word	0x20001e00
 8014184:	08017500 	.word	0x08017500
 8014188:	20001dfc 	.word	0x20001dfc

0801418c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014192:	2300      	movs	r3, #0
 8014194:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014196:	f000 f89b 	bl	80142d0 <BSP_SD_IsDetected>
 801419a:	4603      	mov	r3, r0
 801419c:	2b01      	cmp	r3, #1
 801419e:	d001      	beq.n	80141a4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80141a0:	2302      	movs	r3, #2
 80141a2:	e012      	b.n	80141ca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80141a4:	480b      	ldr	r0, [pc, #44]	; (80141d4 <BSP_SD_Init+0x48>)
 80141a6:	f7f9 fb2a 	bl	800d7fe <HAL_SD_Init>
 80141aa:	4603      	mov	r3, r0
 80141ac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80141ae:	79fb      	ldrb	r3, [r7, #7]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d109      	bne.n	80141c8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80141b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80141b8:	4806      	ldr	r0, [pc, #24]	; (80141d4 <BSP_SD_Init+0x48>)
 80141ba:	f7fa fba1 	bl	800e900 <HAL_SD_ConfigWideBusOperation>
 80141be:	4603      	mov	r3, r0
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d001      	beq.n	80141c8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80141c4:	2301      	movs	r3, #1
 80141c6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80141c8:	79fb      	ldrb	r3, [r7, #7]
}
 80141ca:	4618      	mov	r0, r3
 80141cc:	3708      	adds	r7, #8
 80141ce:	46bd      	mov	sp, r7
 80141d0:	bd80      	pop	{r7, pc}
 80141d2:	bf00      	nop
 80141d4:	20001ba0 	.word	0x20001ba0

080141d8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b088      	sub	sp, #32
 80141dc:	af02      	add	r7, sp, #8
 80141de:	60f8      	str	r0, [r7, #12]
 80141e0:	60b9      	str	r1, [r7, #8]
 80141e2:	607a      	str	r2, [r7, #4]
 80141e4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80141e6:	2300      	movs	r3, #0
 80141e8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	9300      	str	r3, [sp, #0]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	68ba      	ldr	r2, [r7, #8]
 80141f2:	68f9      	ldr	r1, [r7, #12]
 80141f4:	4806      	ldr	r0, [pc, #24]	; (8014210 <BSP_SD_ReadBlocks+0x38>)
 80141f6:	f7f9 fc1b 	bl	800da30 <HAL_SD_ReadBlocks>
 80141fa:	4603      	mov	r3, r0
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d001      	beq.n	8014204 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8014200:	2301      	movs	r3, #1
 8014202:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014204:	7dfb      	ldrb	r3, [r7, #23]
}
 8014206:	4618      	mov	r0, r3
 8014208:	3718      	adds	r7, #24
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	20001ba0 	.word	0x20001ba0

08014214 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b088      	sub	sp, #32
 8014218:	af02      	add	r7, sp, #8
 801421a:	60f8      	str	r0, [r7, #12]
 801421c:	60b9      	str	r1, [r7, #8]
 801421e:	607a      	str	r2, [r7, #4]
 8014220:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8014222:	2300      	movs	r3, #0
 8014224:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	9300      	str	r3, [sp, #0]
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	68ba      	ldr	r2, [r7, #8]
 801422e:	68f9      	ldr	r1, [r7, #12]
 8014230:	4806      	ldr	r0, [pc, #24]	; (801424c <BSP_SD_WriteBlocks+0x38>)
 8014232:	f7f9 fd87 	bl	800dd44 <HAL_SD_WriteBlocks>
 8014236:	4603      	mov	r3, r0
 8014238:	2b00      	cmp	r3, #0
 801423a:	d001      	beq.n	8014240 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 801423c:	2301      	movs	r3, #1
 801423e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014240:	7dfb      	ldrb	r3, [r7, #23]
}
 8014242:	4618      	mov	r0, r3
 8014244:	3718      	adds	r7, #24
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}
 801424a:	bf00      	nop
 801424c:	20001ba0 	.word	0x20001ba0

08014250 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014254:	4805      	ldr	r0, [pc, #20]	; (801426c <BSP_SD_GetCardState+0x1c>)
 8014256:	f7fa fc65 	bl	800eb24 <HAL_SD_GetCardState>
 801425a:	4603      	mov	r3, r0
 801425c:	2b04      	cmp	r3, #4
 801425e:	bf14      	ite	ne
 8014260:	2301      	movne	r3, #1
 8014262:	2300      	moveq	r3, #0
 8014264:	b2db      	uxtb	r3, r3
}
 8014266:	4618      	mov	r0, r3
 8014268:	bd80      	pop	{r7, pc}
 801426a:	bf00      	nop
 801426c:	20001ba0 	.word	0x20001ba0

08014270 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014270:	b580      	push	{r7, lr}
 8014272:	b082      	sub	sp, #8
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8014278:	6879      	ldr	r1, [r7, #4]
 801427a:	4803      	ldr	r0, [pc, #12]	; (8014288 <BSP_SD_GetCardInfo+0x18>)
 801427c:	f7fa fb14 	bl	800e8a8 <HAL_SD_GetCardInfo>
}
 8014280:	bf00      	nop
 8014282:	3708      	adds	r7, #8
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}
 8014288:	20001ba0 	.word	0x20001ba0

0801428c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014294:	f000 f80e 	bl	80142b4 <BSP_SD_WriteCpltCallback>
}
 8014298:	bf00      	nop
 801429a:	3708      	adds	r7, #8
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}

080142a0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b082      	sub	sp, #8
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80142a8:	f000 f80b 	bl	80142c2 <BSP_SD_ReadCpltCallback>
}
 80142ac:	bf00      	nop
 80142ae:	3708      	adds	r7, #8
 80142b0:	46bd      	mov	sp, r7
 80142b2:	bd80      	pop	{r7, pc}

080142b4 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80142b4:	b480      	push	{r7}
 80142b6:	af00      	add	r7, sp, #0

}
 80142b8:	bf00      	nop
 80142ba:	46bd      	mov	sp, r7
 80142bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c0:	4770      	bx	lr

080142c2 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80142c2:	b480      	push	{r7}
 80142c4:	af00      	add	r7, sp, #0

}
 80142c6:	bf00      	nop
 80142c8:	46bd      	mov	sp, r7
 80142ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ce:	4770      	bx	lr

080142d0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80142d0:	b480      	push	{r7}
 80142d2:	b083      	sub	sp, #12
 80142d4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80142d6:	2301      	movs	r3, #1
 80142d8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 80142da:	79fb      	ldrb	r3, [r7, #7]
 80142dc:	b2db      	uxtb	r3, r3
}
 80142de:	4618      	mov	r0, r3
 80142e0:	370c      	adds	r7, #12
 80142e2:	46bd      	mov	sp, r7
 80142e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e8:	4770      	bx	lr
	...

080142ec <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b082      	sub	sp, #8
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	4603      	mov	r3, r0
 80142f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80142f6:	4b0b      	ldr	r3, [pc, #44]	; (8014324 <SD_CheckStatus+0x38>)
 80142f8:	2201      	movs	r2, #1
 80142fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80142fc:	f7ff ffa8 	bl	8014250 <BSP_SD_GetCardState>
 8014300:	4603      	mov	r3, r0
 8014302:	2b00      	cmp	r3, #0
 8014304:	d107      	bne.n	8014316 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014306:	4b07      	ldr	r3, [pc, #28]	; (8014324 <SD_CheckStatus+0x38>)
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	b2db      	uxtb	r3, r3
 801430c:	f023 0301 	bic.w	r3, r3, #1
 8014310:	b2da      	uxtb	r2, r3
 8014312:	4b04      	ldr	r3, [pc, #16]	; (8014324 <SD_CheckStatus+0x38>)
 8014314:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014316:	4b03      	ldr	r3, [pc, #12]	; (8014324 <SD_CheckStatus+0x38>)
 8014318:	781b      	ldrb	r3, [r3, #0]
 801431a:	b2db      	uxtb	r3, r3
}
 801431c:	4618      	mov	r0, r3
 801431e:	3708      	adds	r7, #8
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}
 8014324:	2000000d 	.word	0x2000000d

08014328 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b082      	sub	sp, #8
 801432c:	af00      	add	r7, sp, #0
 801432e:	4603      	mov	r3, r0
 8014330:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8014332:	4b0b      	ldr	r3, [pc, #44]	; (8014360 <SD_initialize+0x38>)
 8014334:	2201      	movs	r2, #1
 8014336:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014338:	f7ff ff28 	bl	801418c <BSP_SD_Init>
 801433c:	4603      	mov	r3, r0
 801433e:	2b00      	cmp	r3, #0
 8014340:	d107      	bne.n	8014352 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8014342:	79fb      	ldrb	r3, [r7, #7]
 8014344:	4618      	mov	r0, r3
 8014346:	f7ff ffd1 	bl	80142ec <SD_CheckStatus>
 801434a:	4603      	mov	r3, r0
 801434c:	461a      	mov	r2, r3
 801434e:	4b04      	ldr	r3, [pc, #16]	; (8014360 <SD_initialize+0x38>)
 8014350:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014352:	4b03      	ldr	r3, [pc, #12]	; (8014360 <SD_initialize+0x38>)
 8014354:	781b      	ldrb	r3, [r3, #0]
 8014356:	b2db      	uxtb	r3, r3
}
 8014358:	4618      	mov	r0, r3
 801435a:	3708      	adds	r7, #8
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}
 8014360:	2000000d 	.word	0x2000000d

08014364 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b082      	sub	sp, #8
 8014368:	af00      	add	r7, sp, #0
 801436a:	4603      	mov	r3, r0
 801436c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801436e:	79fb      	ldrb	r3, [r7, #7]
 8014370:	4618      	mov	r0, r3
 8014372:	f7ff ffbb 	bl	80142ec <SD_CheckStatus>
 8014376:	4603      	mov	r3, r0
}
 8014378:	4618      	mov	r0, r3
 801437a:	3708      	adds	r7, #8
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}

08014380 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b086      	sub	sp, #24
 8014384:	af00      	add	r7, sp, #0
 8014386:	60b9      	str	r1, [r7, #8]
 8014388:	607a      	str	r2, [r7, #4]
 801438a:	603b      	str	r3, [r7, #0]
 801438c:	4603      	mov	r3, r0
 801438e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014390:	2301      	movs	r3, #1
 8014392:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8014394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014398:	683a      	ldr	r2, [r7, #0]
 801439a:	6879      	ldr	r1, [r7, #4]
 801439c:	68b8      	ldr	r0, [r7, #8]
 801439e:	f7ff ff1b 	bl	80141d8 <BSP_SD_ReadBlocks>
 80143a2:	4603      	mov	r3, r0
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d107      	bne.n	80143b8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80143a8:	bf00      	nop
 80143aa:	f7ff ff51 	bl	8014250 <BSP_SD_GetCardState>
 80143ae:	4603      	mov	r3, r0
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d1fa      	bne.n	80143aa <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80143b4:	2300      	movs	r3, #0
 80143b6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80143b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80143ba:	4618      	mov	r0, r3
 80143bc:	3718      	adds	r7, #24
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}

080143c2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80143c2:	b580      	push	{r7, lr}
 80143c4:	b086      	sub	sp, #24
 80143c6:	af00      	add	r7, sp, #0
 80143c8:	60b9      	str	r1, [r7, #8]
 80143ca:	607a      	str	r2, [r7, #4]
 80143cc:	603b      	str	r3, [r7, #0]
 80143ce:	4603      	mov	r3, r0
 80143d0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80143d2:	2301      	movs	r3, #1
 80143d4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80143d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80143da:	683a      	ldr	r2, [r7, #0]
 80143dc:	6879      	ldr	r1, [r7, #4]
 80143de:	68b8      	ldr	r0, [r7, #8]
 80143e0:	f7ff ff18 	bl	8014214 <BSP_SD_WriteBlocks>
 80143e4:	4603      	mov	r3, r0
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d107      	bne.n	80143fa <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80143ea:	bf00      	nop
 80143ec:	f7ff ff30 	bl	8014250 <BSP_SD_GetCardState>
 80143f0:	4603      	mov	r3, r0
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d1fa      	bne.n	80143ec <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80143f6:	2300      	movs	r3, #0
 80143f8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80143fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80143fc:	4618      	mov	r0, r3
 80143fe:	3718      	adds	r7, #24
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}

08014404 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b08c      	sub	sp, #48	; 0x30
 8014408:	af00      	add	r7, sp, #0
 801440a:	4603      	mov	r3, r0
 801440c:	603a      	str	r2, [r7, #0]
 801440e:	71fb      	strb	r3, [r7, #7]
 8014410:	460b      	mov	r3, r1
 8014412:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014414:	2301      	movs	r3, #1
 8014416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801441a:	4b25      	ldr	r3, [pc, #148]	; (80144b0 <SD_ioctl+0xac>)
 801441c:	781b      	ldrb	r3, [r3, #0]
 801441e:	b2db      	uxtb	r3, r3
 8014420:	f003 0301 	and.w	r3, r3, #1
 8014424:	2b00      	cmp	r3, #0
 8014426:	d001      	beq.n	801442c <SD_ioctl+0x28>
 8014428:	2303      	movs	r3, #3
 801442a:	e03c      	b.n	80144a6 <SD_ioctl+0xa2>

  switch (cmd)
 801442c:	79bb      	ldrb	r3, [r7, #6]
 801442e:	2b03      	cmp	r3, #3
 8014430:	d834      	bhi.n	801449c <SD_ioctl+0x98>
 8014432:	a201      	add	r2, pc, #4	; (adr r2, 8014438 <SD_ioctl+0x34>)
 8014434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014438:	08014449 	.word	0x08014449
 801443c:	08014451 	.word	0x08014451
 8014440:	08014469 	.word	0x08014469
 8014444:	08014483 	.word	0x08014483
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014448:	2300      	movs	r3, #0
 801444a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801444e:	e028      	b.n	80144a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014450:	f107 0308 	add.w	r3, r7, #8
 8014454:	4618      	mov	r0, r3
 8014456:	f7ff ff0b 	bl	8014270 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801445a:	6a3a      	ldr	r2, [r7, #32]
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014460:	2300      	movs	r3, #0
 8014462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014466:	e01c      	b.n	80144a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014468:	f107 0308 	add.w	r3, r7, #8
 801446c:	4618      	mov	r0, r3
 801446e:	f7ff feff 	bl	8014270 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014474:	b29a      	uxth	r2, r3
 8014476:	683b      	ldr	r3, [r7, #0]
 8014478:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801447a:	2300      	movs	r3, #0
 801447c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014480:	e00f      	b.n	80144a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014482:	f107 0308 	add.w	r3, r7, #8
 8014486:	4618      	mov	r0, r3
 8014488:	f7ff fef2 	bl	8014270 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801448e:	0a5a      	lsrs	r2, r3, #9
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014494:	2300      	movs	r3, #0
 8014496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801449a:	e002      	b.n	80144a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801449c:	2304      	movs	r3, #4
 801449e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80144a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80144a6:	4618      	mov	r0, r3
 80144a8:	3730      	adds	r7, #48	; 0x30
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bd80      	pop	{r7, pc}
 80144ae:	bf00      	nop
 80144b0:	2000000d 	.word	0x2000000d

080144b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b084      	sub	sp, #16
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	460b      	mov	r3, r1
 80144be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80144c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80144c4:	f002 fcc8 	bl	8016e58 <USBD_static_malloc>
 80144c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d109      	bne.n	80144e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	32b0      	adds	r2, #176	; 0xb0
 80144da:	2100      	movs	r1, #0
 80144dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80144e0:	2302      	movs	r3, #2
 80144e2:	e0d4      	b.n	801468e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80144e4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80144e8:	2100      	movs	r1, #0
 80144ea:	68f8      	ldr	r0, [r7, #12]
 80144ec:	f002 ffb0 	bl	8017450 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	32b0      	adds	r2, #176	; 0xb0
 80144fa:	68f9      	ldr	r1, [r7, #12]
 80144fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	32b0      	adds	r2, #176	; 0xb0
 801450a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	7c1b      	ldrb	r3, [r3, #16]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d138      	bne.n	801458e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801451c:	4b5e      	ldr	r3, [pc, #376]	; (8014698 <USBD_CDC_Init+0x1e4>)
 801451e:	7819      	ldrb	r1, [r3, #0]
 8014520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014524:	2202      	movs	r2, #2
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	f002 fb73 	bl	8016c12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801452c:	4b5a      	ldr	r3, [pc, #360]	; (8014698 <USBD_CDC_Init+0x1e4>)
 801452e:	781b      	ldrb	r3, [r3, #0]
 8014530:	f003 020f 	and.w	r2, r3, #15
 8014534:	6879      	ldr	r1, [r7, #4]
 8014536:	4613      	mov	r3, r2
 8014538:	009b      	lsls	r3, r3, #2
 801453a:	4413      	add	r3, r2
 801453c:	009b      	lsls	r3, r3, #2
 801453e:	440b      	add	r3, r1
 8014540:	3324      	adds	r3, #36	; 0x24
 8014542:	2201      	movs	r2, #1
 8014544:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014546:	4b55      	ldr	r3, [pc, #340]	; (801469c <USBD_CDC_Init+0x1e8>)
 8014548:	7819      	ldrb	r1, [r3, #0]
 801454a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801454e:	2202      	movs	r2, #2
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f002 fb5e 	bl	8016c12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014556:	4b51      	ldr	r3, [pc, #324]	; (801469c <USBD_CDC_Init+0x1e8>)
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	f003 020f 	and.w	r2, r3, #15
 801455e:	6879      	ldr	r1, [r7, #4]
 8014560:	4613      	mov	r3, r2
 8014562:	009b      	lsls	r3, r3, #2
 8014564:	4413      	add	r3, r2
 8014566:	009b      	lsls	r3, r3, #2
 8014568:	440b      	add	r3, r1
 801456a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801456e:	2201      	movs	r2, #1
 8014570:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014572:	4b4b      	ldr	r3, [pc, #300]	; (80146a0 <USBD_CDC_Init+0x1ec>)
 8014574:	781b      	ldrb	r3, [r3, #0]
 8014576:	f003 020f 	and.w	r2, r3, #15
 801457a:	6879      	ldr	r1, [r7, #4]
 801457c:	4613      	mov	r3, r2
 801457e:	009b      	lsls	r3, r3, #2
 8014580:	4413      	add	r3, r2
 8014582:	009b      	lsls	r3, r3, #2
 8014584:	440b      	add	r3, r1
 8014586:	3326      	adds	r3, #38	; 0x26
 8014588:	2210      	movs	r2, #16
 801458a:	801a      	strh	r2, [r3, #0]
 801458c:	e035      	b.n	80145fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801458e:	4b42      	ldr	r3, [pc, #264]	; (8014698 <USBD_CDC_Init+0x1e4>)
 8014590:	7819      	ldrb	r1, [r3, #0]
 8014592:	2340      	movs	r3, #64	; 0x40
 8014594:	2202      	movs	r2, #2
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f002 fb3b 	bl	8016c12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801459c:	4b3e      	ldr	r3, [pc, #248]	; (8014698 <USBD_CDC_Init+0x1e4>)
 801459e:	781b      	ldrb	r3, [r3, #0]
 80145a0:	f003 020f 	and.w	r2, r3, #15
 80145a4:	6879      	ldr	r1, [r7, #4]
 80145a6:	4613      	mov	r3, r2
 80145a8:	009b      	lsls	r3, r3, #2
 80145aa:	4413      	add	r3, r2
 80145ac:	009b      	lsls	r3, r3, #2
 80145ae:	440b      	add	r3, r1
 80145b0:	3324      	adds	r3, #36	; 0x24
 80145b2:	2201      	movs	r2, #1
 80145b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80145b6:	4b39      	ldr	r3, [pc, #228]	; (801469c <USBD_CDC_Init+0x1e8>)
 80145b8:	7819      	ldrb	r1, [r3, #0]
 80145ba:	2340      	movs	r3, #64	; 0x40
 80145bc:	2202      	movs	r2, #2
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f002 fb27 	bl	8016c12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80145c4:	4b35      	ldr	r3, [pc, #212]	; (801469c <USBD_CDC_Init+0x1e8>)
 80145c6:	781b      	ldrb	r3, [r3, #0]
 80145c8:	f003 020f 	and.w	r2, r3, #15
 80145cc:	6879      	ldr	r1, [r7, #4]
 80145ce:	4613      	mov	r3, r2
 80145d0:	009b      	lsls	r3, r3, #2
 80145d2:	4413      	add	r3, r2
 80145d4:	009b      	lsls	r3, r3, #2
 80145d6:	440b      	add	r3, r1
 80145d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80145dc:	2201      	movs	r2, #1
 80145de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80145e0:	4b2f      	ldr	r3, [pc, #188]	; (80146a0 <USBD_CDC_Init+0x1ec>)
 80145e2:	781b      	ldrb	r3, [r3, #0]
 80145e4:	f003 020f 	and.w	r2, r3, #15
 80145e8:	6879      	ldr	r1, [r7, #4]
 80145ea:	4613      	mov	r3, r2
 80145ec:	009b      	lsls	r3, r3, #2
 80145ee:	4413      	add	r3, r2
 80145f0:	009b      	lsls	r3, r3, #2
 80145f2:	440b      	add	r3, r1
 80145f4:	3326      	adds	r3, #38	; 0x26
 80145f6:	2210      	movs	r2, #16
 80145f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80145fa:	4b29      	ldr	r3, [pc, #164]	; (80146a0 <USBD_CDC_Init+0x1ec>)
 80145fc:	7819      	ldrb	r1, [r3, #0]
 80145fe:	2308      	movs	r3, #8
 8014600:	2203      	movs	r2, #3
 8014602:	6878      	ldr	r0, [r7, #4]
 8014604:	f002 fb05 	bl	8016c12 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014608:	4b25      	ldr	r3, [pc, #148]	; (80146a0 <USBD_CDC_Init+0x1ec>)
 801460a:	781b      	ldrb	r3, [r3, #0]
 801460c:	f003 020f 	and.w	r2, r3, #15
 8014610:	6879      	ldr	r1, [r7, #4]
 8014612:	4613      	mov	r3, r2
 8014614:	009b      	lsls	r3, r3, #2
 8014616:	4413      	add	r3, r2
 8014618:	009b      	lsls	r3, r3, #2
 801461a:	440b      	add	r3, r1
 801461c:	3324      	adds	r3, #36	; 0x24
 801461e:	2201      	movs	r2, #1
 8014620:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	2200      	movs	r2, #0
 8014626:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014630:	687a      	ldr	r2, [r7, #4]
 8014632:	33b0      	adds	r3, #176	; 0xb0
 8014634:	009b      	lsls	r3, r3, #2
 8014636:	4413      	add	r3, r2
 8014638:	685b      	ldr	r3, [r3, #4]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	2200      	movs	r2, #0
 8014642:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	2200      	movs	r2, #0
 801464a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014654:	2b00      	cmp	r3, #0
 8014656:	d101      	bne.n	801465c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014658:	2302      	movs	r3, #2
 801465a:	e018      	b.n	801468e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	7c1b      	ldrb	r3, [r3, #16]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d10a      	bne.n	801467a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014664:	4b0d      	ldr	r3, [pc, #52]	; (801469c <USBD_CDC_Init+0x1e8>)
 8014666:	7819      	ldrb	r1, [r3, #0]
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801466e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014672:	6878      	ldr	r0, [r7, #4]
 8014674:	f002 fbbc 	bl	8016df0 <USBD_LL_PrepareReceive>
 8014678:	e008      	b.n	801468c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801467a:	4b08      	ldr	r3, [pc, #32]	; (801469c <USBD_CDC_Init+0x1e8>)
 801467c:	7819      	ldrb	r1, [r3, #0]
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014684:	2340      	movs	r3, #64	; 0x40
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f002 fbb2 	bl	8016df0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801468c:	2300      	movs	r3, #0
}
 801468e:	4618      	mov	r0, r3
 8014690:	3710      	adds	r7, #16
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	20000097 	.word	0x20000097
 801469c:	20000098 	.word	0x20000098
 80146a0:	20000099 	.word	0x20000099

080146a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b082      	sub	sp, #8
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	460b      	mov	r3, r1
 80146ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80146b0:	4b3a      	ldr	r3, [pc, #232]	; (801479c <USBD_CDC_DeInit+0xf8>)
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	4619      	mov	r1, r3
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f002 fad1 	bl	8016c5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80146bc:	4b37      	ldr	r3, [pc, #220]	; (801479c <USBD_CDC_DeInit+0xf8>)
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	f003 020f 	and.w	r2, r3, #15
 80146c4:	6879      	ldr	r1, [r7, #4]
 80146c6:	4613      	mov	r3, r2
 80146c8:	009b      	lsls	r3, r3, #2
 80146ca:	4413      	add	r3, r2
 80146cc:	009b      	lsls	r3, r3, #2
 80146ce:	440b      	add	r3, r1
 80146d0:	3324      	adds	r3, #36	; 0x24
 80146d2:	2200      	movs	r2, #0
 80146d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80146d6:	4b32      	ldr	r3, [pc, #200]	; (80147a0 <USBD_CDC_DeInit+0xfc>)
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	4619      	mov	r1, r3
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f002 fabe 	bl	8016c5e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80146e2:	4b2f      	ldr	r3, [pc, #188]	; (80147a0 <USBD_CDC_DeInit+0xfc>)
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	f003 020f 	and.w	r2, r3, #15
 80146ea:	6879      	ldr	r1, [r7, #4]
 80146ec:	4613      	mov	r3, r2
 80146ee:	009b      	lsls	r3, r3, #2
 80146f0:	4413      	add	r3, r2
 80146f2:	009b      	lsls	r3, r3, #2
 80146f4:	440b      	add	r3, r1
 80146f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80146fa:	2200      	movs	r2, #0
 80146fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80146fe:	4b29      	ldr	r3, [pc, #164]	; (80147a4 <USBD_CDC_DeInit+0x100>)
 8014700:	781b      	ldrb	r3, [r3, #0]
 8014702:	4619      	mov	r1, r3
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f002 faaa 	bl	8016c5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801470a:	4b26      	ldr	r3, [pc, #152]	; (80147a4 <USBD_CDC_DeInit+0x100>)
 801470c:	781b      	ldrb	r3, [r3, #0]
 801470e:	f003 020f 	and.w	r2, r3, #15
 8014712:	6879      	ldr	r1, [r7, #4]
 8014714:	4613      	mov	r3, r2
 8014716:	009b      	lsls	r3, r3, #2
 8014718:	4413      	add	r3, r2
 801471a:	009b      	lsls	r3, r3, #2
 801471c:	440b      	add	r3, r1
 801471e:	3324      	adds	r3, #36	; 0x24
 8014720:	2200      	movs	r2, #0
 8014722:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014724:	4b1f      	ldr	r3, [pc, #124]	; (80147a4 <USBD_CDC_DeInit+0x100>)
 8014726:	781b      	ldrb	r3, [r3, #0]
 8014728:	f003 020f 	and.w	r2, r3, #15
 801472c:	6879      	ldr	r1, [r7, #4]
 801472e:	4613      	mov	r3, r2
 8014730:	009b      	lsls	r3, r3, #2
 8014732:	4413      	add	r3, r2
 8014734:	009b      	lsls	r3, r3, #2
 8014736:	440b      	add	r3, r1
 8014738:	3326      	adds	r3, #38	; 0x26
 801473a:	2200      	movs	r2, #0
 801473c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	32b0      	adds	r2, #176	; 0xb0
 8014748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d01f      	beq.n	8014790 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014756:	687a      	ldr	r2, [r7, #4]
 8014758:	33b0      	adds	r3, #176	; 0xb0
 801475a:	009b      	lsls	r3, r3, #2
 801475c:	4413      	add	r3, r2
 801475e:	685b      	ldr	r3, [r3, #4]
 8014760:	685b      	ldr	r3, [r3, #4]
 8014762:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	32b0      	adds	r2, #176	; 0xb0
 801476e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014772:	4618      	mov	r0, r3
 8014774:	f002 fb7e 	bl	8016e74 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	32b0      	adds	r2, #176	; 0xb0
 8014782:	2100      	movs	r1, #0
 8014784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2200      	movs	r2, #0
 801478c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014790:	2300      	movs	r3, #0
}
 8014792:	4618      	mov	r0, r3
 8014794:	3708      	adds	r7, #8
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
 801479a:	bf00      	nop
 801479c:	20000097 	.word	0x20000097
 80147a0:	20000098 	.word	0x20000098
 80147a4:	20000099 	.word	0x20000099

080147a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b086      	sub	sp, #24
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
 80147b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	32b0      	adds	r2, #176	; 0xb0
 80147bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80147c2:	2300      	movs	r3, #0
 80147c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80147c6:	2300      	movs	r3, #0
 80147c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80147ca:	2300      	movs	r3, #0
 80147cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80147ce:	693b      	ldr	r3, [r7, #16]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d101      	bne.n	80147d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80147d4:	2303      	movs	r3, #3
 80147d6:	e0bf      	b.n	8014958 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d050      	beq.n	8014886 <USBD_CDC_Setup+0xde>
 80147e4:	2b20      	cmp	r3, #32
 80147e6:	f040 80af 	bne.w	8014948 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	88db      	ldrh	r3, [r3, #6]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d03a      	beq.n	8014868 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	781b      	ldrb	r3, [r3, #0]
 80147f6:	b25b      	sxtb	r3, r3
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	da1b      	bge.n	8014834 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014802:	687a      	ldr	r2, [r7, #4]
 8014804:	33b0      	adds	r3, #176	; 0xb0
 8014806:	009b      	lsls	r3, r3, #2
 8014808:	4413      	add	r3, r2
 801480a:	685b      	ldr	r3, [r3, #4]
 801480c:	689b      	ldr	r3, [r3, #8]
 801480e:	683a      	ldr	r2, [r7, #0]
 8014810:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014812:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014814:	683a      	ldr	r2, [r7, #0]
 8014816:	88d2      	ldrh	r2, [r2, #6]
 8014818:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	88db      	ldrh	r3, [r3, #6]
 801481e:	2b07      	cmp	r3, #7
 8014820:	bf28      	it	cs
 8014822:	2307      	movcs	r3, #7
 8014824:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014826:	693b      	ldr	r3, [r7, #16]
 8014828:	89fa      	ldrh	r2, [r7, #14]
 801482a:	4619      	mov	r1, r3
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	f001 fd43 	bl	80162b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014832:	e090      	b.n	8014956 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	785a      	ldrb	r2, [r3, #1]
 8014838:	693b      	ldr	r3, [r7, #16]
 801483a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	88db      	ldrh	r3, [r3, #6]
 8014842:	2b3f      	cmp	r3, #63	; 0x3f
 8014844:	d803      	bhi.n	801484e <USBD_CDC_Setup+0xa6>
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	88db      	ldrh	r3, [r3, #6]
 801484a:	b2da      	uxtb	r2, r3
 801484c:	e000      	b.n	8014850 <USBD_CDC_Setup+0xa8>
 801484e:	2240      	movs	r2, #64	; 0x40
 8014850:	693b      	ldr	r3, [r7, #16]
 8014852:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014856:	6939      	ldr	r1, [r7, #16]
 8014858:	693b      	ldr	r3, [r7, #16]
 801485a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801485e:	461a      	mov	r2, r3
 8014860:	6878      	ldr	r0, [r7, #4]
 8014862:	f001 fd55 	bl	8016310 <USBD_CtlPrepareRx>
      break;
 8014866:	e076      	b.n	8014956 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801486e:	687a      	ldr	r2, [r7, #4]
 8014870:	33b0      	adds	r3, #176	; 0xb0
 8014872:	009b      	lsls	r3, r3, #2
 8014874:	4413      	add	r3, r2
 8014876:	685b      	ldr	r3, [r3, #4]
 8014878:	689b      	ldr	r3, [r3, #8]
 801487a:	683a      	ldr	r2, [r7, #0]
 801487c:	7850      	ldrb	r0, [r2, #1]
 801487e:	2200      	movs	r2, #0
 8014880:	6839      	ldr	r1, [r7, #0]
 8014882:	4798      	blx	r3
      break;
 8014884:	e067      	b.n	8014956 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	785b      	ldrb	r3, [r3, #1]
 801488a:	2b0b      	cmp	r3, #11
 801488c:	d851      	bhi.n	8014932 <USBD_CDC_Setup+0x18a>
 801488e:	a201      	add	r2, pc, #4	; (adr r2, 8014894 <USBD_CDC_Setup+0xec>)
 8014890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014894:	080148c5 	.word	0x080148c5
 8014898:	08014941 	.word	0x08014941
 801489c:	08014933 	.word	0x08014933
 80148a0:	08014933 	.word	0x08014933
 80148a4:	08014933 	.word	0x08014933
 80148a8:	08014933 	.word	0x08014933
 80148ac:	08014933 	.word	0x08014933
 80148b0:	08014933 	.word	0x08014933
 80148b4:	08014933 	.word	0x08014933
 80148b8:	08014933 	.word	0x08014933
 80148bc:	080148ef 	.word	0x080148ef
 80148c0:	08014919 	.word	0x08014919
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148ca:	b2db      	uxtb	r3, r3
 80148cc:	2b03      	cmp	r3, #3
 80148ce:	d107      	bne.n	80148e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80148d0:	f107 030a 	add.w	r3, r7, #10
 80148d4:	2202      	movs	r2, #2
 80148d6:	4619      	mov	r1, r3
 80148d8:	6878      	ldr	r0, [r7, #4]
 80148da:	f001 fced 	bl	80162b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80148de:	e032      	b.n	8014946 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80148e0:	6839      	ldr	r1, [r7, #0]
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f001 fc77 	bl	80161d6 <USBD_CtlError>
            ret = USBD_FAIL;
 80148e8:	2303      	movs	r3, #3
 80148ea:	75fb      	strb	r3, [r7, #23]
          break;
 80148ec:	e02b      	b.n	8014946 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148f4:	b2db      	uxtb	r3, r3
 80148f6:	2b03      	cmp	r3, #3
 80148f8:	d107      	bne.n	801490a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80148fa:	f107 030d 	add.w	r3, r7, #13
 80148fe:	2201      	movs	r2, #1
 8014900:	4619      	mov	r1, r3
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	f001 fcd8 	bl	80162b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014908:	e01d      	b.n	8014946 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801490a:	6839      	ldr	r1, [r7, #0]
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f001 fc62 	bl	80161d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8014912:	2303      	movs	r3, #3
 8014914:	75fb      	strb	r3, [r7, #23]
          break;
 8014916:	e016      	b.n	8014946 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801491e:	b2db      	uxtb	r3, r3
 8014920:	2b03      	cmp	r3, #3
 8014922:	d00f      	beq.n	8014944 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014924:	6839      	ldr	r1, [r7, #0]
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	f001 fc55 	bl	80161d6 <USBD_CtlError>
            ret = USBD_FAIL;
 801492c:	2303      	movs	r3, #3
 801492e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014930:	e008      	b.n	8014944 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014932:	6839      	ldr	r1, [r7, #0]
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f001 fc4e 	bl	80161d6 <USBD_CtlError>
          ret = USBD_FAIL;
 801493a:	2303      	movs	r3, #3
 801493c:	75fb      	strb	r3, [r7, #23]
          break;
 801493e:	e002      	b.n	8014946 <USBD_CDC_Setup+0x19e>
          break;
 8014940:	bf00      	nop
 8014942:	e008      	b.n	8014956 <USBD_CDC_Setup+0x1ae>
          break;
 8014944:	bf00      	nop
      }
      break;
 8014946:	e006      	b.n	8014956 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014948:	6839      	ldr	r1, [r7, #0]
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f001 fc43 	bl	80161d6 <USBD_CtlError>
      ret = USBD_FAIL;
 8014950:	2303      	movs	r3, #3
 8014952:	75fb      	strb	r3, [r7, #23]
      break;
 8014954:	bf00      	nop
  }

  return (uint8_t)ret;
 8014956:	7dfb      	ldrb	r3, [r7, #23]
}
 8014958:	4618      	mov	r0, r3
 801495a:	3718      	adds	r7, #24
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}

08014960 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b084      	sub	sp, #16
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	460b      	mov	r3, r1
 801496a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014972:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	32b0      	adds	r2, #176	; 0xb0
 801497e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d101      	bne.n	801498a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014986:	2303      	movs	r3, #3
 8014988:	e065      	b.n	8014a56 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	32b0      	adds	r2, #176	; 0xb0
 8014994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014998:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801499a:	78fb      	ldrb	r3, [r7, #3]
 801499c:	f003 020f 	and.w	r2, r3, #15
 80149a0:	6879      	ldr	r1, [r7, #4]
 80149a2:	4613      	mov	r3, r2
 80149a4:	009b      	lsls	r3, r3, #2
 80149a6:	4413      	add	r3, r2
 80149a8:	009b      	lsls	r3, r3, #2
 80149aa:	440b      	add	r3, r1
 80149ac:	3318      	adds	r3, #24
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d02f      	beq.n	8014a14 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80149b4:	78fb      	ldrb	r3, [r7, #3]
 80149b6:	f003 020f 	and.w	r2, r3, #15
 80149ba:	6879      	ldr	r1, [r7, #4]
 80149bc:	4613      	mov	r3, r2
 80149be:	009b      	lsls	r3, r3, #2
 80149c0:	4413      	add	r3, r2
 80149c2:	009b      	lsls	r3, r3, #2
 80149c4:	440b      	add	r3, r1
 80149c6:	3318      	adds	r3, #24
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	78fb      	ldrb	r3, [r7, #3]
 80149cc:	f003 010f 	and.w	r1, r3, #15
 80149d0:	68f8      	ldr	r0, [r7, #12]
 80149d2:	460b      	mov	r3, r1
 80149d4:	00db      	lsls	r3, r3, #3
 80149d6:	440b      	add	r3, r1
 80149d8:	009b      	lsls	r3, r3, #2
 80149da:	4403      	add	r3, r0
 80149dc:	3348      	adds	r3, #72	; 0x48
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80149e4:	fb01 f303 	mul.w	r3, r1, r3
 80149e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d112      	bne.n	8014a14 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80149ee:	78fb      	ldrb	r3, [r7, #3]
 80149f0:	f003 020f 	and.w	r2, r3, #15
 80149f4:	6879      	ldr	r1, [r7, #4]
 80149f6:	4613      	mov	r3, r2
 80149f8:	009b      	lsls	r3, r3, #2
 80149fa:	4413      	add	r3, r2
 80149fc:	009b      	lsls	r3, r3, #2
 80149fe:	440b      	add	r3, r1
 8014a00:	3318      	adds	r3, #24
 8014a02:	2200      	movs	r2, #0
 8014a04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014a06:	78f9      	ldrb	r1, [r7, #3]
 8014a08:	2300      	movs	r3, #0
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	f002 f9ce 	bl	8016dae <USBD_LL_Transmit>
 8014a12:	e01f      	b.n	8014a54 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	2200      	movs	r2, #0
 8014a18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a22:	687a      	ldr	r2, [r7, #4]
 8014a24:	33b0      	adds	r3, #176	; 0xb0
 8014a26:	009b      	lsls	r3, r3, #2
 8014a28:	4413      	add	r3, r2
 8014a2a:	685b      	ldr	r3, [r3, #4]
 8014a2c:	691b      	ldr	r3, [r3, #16]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d010      	beq.n	8014a54 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a38:	687a      	ldr	r2, [r7, #4]
 8014a3a:	33b0      	adds	r3, #176	; 0xb0
 8014a3c:	009b      	lsls	r3, r3, #2
 8014a3e:	4413      	add	r3, r2
 8014a40:	685b      	ldr	r3, [r3, #4]
 8014a42:	691b      	ldr	r3, [r3, #16]
 8014a44:	68ba      	ldr	r2, [r7, #8]
 8014a46:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014a4a:	68ba      	ldr	r2, [r7, #8]
 8014a4c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014a50:	78fa      	ldrb	r2, [r7, #3]
 8014a52:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014a54:	2300      	movs	r3, #0
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	3710      	adds	r7, #16
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}

08014a5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014a5e:	b580      	push	{r7, lr}
 8014a60:	b084      	sub	sp, #16
 8014a62:	af00      	add	r7, sp, #0
 8014a64:	6078      	str	r0, [r7, #4]
 8014a66:	460b      	mov	r3, r1
 8014a68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	32b0      	adds	r2, #176	; 0xb0
 8014a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	32b0      	adds	r2, #176	; 0xb0
 8014a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d101      	bne.n	8014a90 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014a8c:	2303      	movs	r3, #3
 8014a8e:	e01a      	b.n	8014ac6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014a90:	78fb      	ldrb	r3, [r7, #3]
 8014a92:	4619      	mov	r1, r3
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	f002 f9cc 	bl	8016e32 <USBD_LL_GetRxDataSize>
 8014a9a:	4602      	mov	r2, r0
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014aa8:	687a      	ldr	r2, [r7, #4]
 8014aaa:	33b0      	adds	r3, #176	; 0xb0
 8014aac:	009b      	lsls	r3, r3, #2
 8014aae:	4413      	add	r3, r2
 8014ab0:	685b      	ldr	r3, [r3, #4]
 8014ab2:	68db      	ldr	r3, [r3, #12]
 8014ab4:	68fa      	ldr	r2, [r7, #12]
 8014ab6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014aba:	68fa      	ldr	r2, [r7, #12]
 8014abc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014ac0:	4611      	mov	r1, r2
 8014ac2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014ac4:	2300      	movs	r3, #0
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3710      	adds	r7, #16
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}

08014ace <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014ace:	b580      	push	{r7, lr}
 8014ad0:	b084      	sub	sp, #16
 8014ad2:	af00      	add	r7, sp, #0
 8014ad4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	32b0      	adds	r2, #176	; 0xb0
 8014ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ae4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d101      	bne.n	8014af0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014aec:	2303      	movs	r3, #3
 8014aee:	e025      	b.n	8014b3c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014af6:	687a      	ldr	r2, [r7, #4]
 8014af8:	33b0      	adds	r3, #176	; 0xb0
 8014afa:	009b      	lsls	r3, r3, #2
 8014afc:	4413      	add	r3, r2
 8014afe:	685b      	ldr	r3, [r3, #4]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d01a      	beq.n	8014b3a <USBD_CDC_EP0_RxReady+0x6c>
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014b0a:	2bff      	cmp	r3, #255	; 0xff
 8014b0c:	d015      	beq.n	8014b3a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b14:	687a      	ldr	r2, [r7, #4]
 8014b16:	33b0      	adds	r3, #176	; 0xb0
 8014b18:	009b      	lsls	r3, r3, #2
 8014b1a:	4413      	add	r3, r2
 8014b1c:	685b      	ldr	r3, [r3, #4]
 8014b1e:	689b      	ldr	r3, [r3, #8]
 8014b20:	68fa      	ldr	r2, [r7, #12]
 8014b22:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014b26:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014b28:	68fa      	ldr	r2, [r7, #12]
 8014b2a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014b2e:	b292      	uxth	r2, r2
 8014b30:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	22ff      	movs	r2, #255	; 0xff
 8014b36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014b3a:	2300      	movs	r3, #0
}
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	3710      	adds	r7, #16
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd80      	pop	{r7, pc}

08014b44 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b086      	sub	sp, #24
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014b4c:	2182      	movs	r1, #130	; 0x82
 8014b4e:	4818      	ldr	r0, [pc, #96]	; (8014bb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014b50:	f000 fd09 	bl	8015566 <USBD_GetEpDesc>
 8014b54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014b56:	2101      	movs	r1, #1
 8014b58:	4815      	ldr	r0, [pc, #84]	; (8014bb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014b5a:	f000 fd04 	bl	8015566 <USBD_GetEpDesc>
 8014b5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014b60:	2181      	movs	r1, #129	; 0x81
 8014b62:	4813      	ldr	r0, [pc, #76]	; (8014bb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014b64:	f000 fcff 	bl	8015566 <USBD_GetEpDesc>
 8014b68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d002      	beq.n	8014b76 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	2210      	movs	r2, #16
 8014b74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014b76:	693b      	ldr	r3, [r7, #16]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d006      	beq.n	8014b8a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014b7c:	693b      	ldr	r3, [r7, #16]
 8014b7e:	2200      	movs	r2, #0
 8014b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014b84:	711a      	strb	r2, [r3, #4]
 8014b86:	2200      	movs	r2, #0
 8014b88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d006      	beq.n	8014b9e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	2200      	movs	r2, #0
 8014b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014b98:	711a      	strb	r2, [r3, #4]
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	2243      	movs	r2, #67	; 0x43
 8014ba2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014ba4:	4b02      	ldr	r3, [pc, #8]	; (8014bb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	3718      	adds	r7, #24
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}
 8014bae:	bf00      	nop
 8014bb0:	20000054 	.word	0x20000054

08014bb4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b086      	sub	sp, #24
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014bbc:	2182      	movs	r1, #130	; 0x82
 8014bbe:	4818      	ldr	r0, [pc, #96]	; (8014c20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014bc0:	f000 fcd1 	bl	8015566 <USBD_GetEpDesc>
 8014bc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014bc6:	2101      	movs	r1, #1
 8014bc8:	4815      	ldr	r0, [pc, #84]	; (8014c20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014bca:	f000 fccc 	bl	8015566 <USBD_GetEpDesc>
 8014bce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014bd0:	2181      	movs	r1, #129	; 0x81
 8014bd2:	4813      	ldr	r0, [pc, #76]	; (8014c20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014bd4:	f000 fcc7 	bl	8015566 <USBD_GetEpDesc>
 8014bd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014bda:	697b      	ldr	r3, [r7, #20]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d002      	beq.n	8014be6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	2210      	movs	r2, #16
 8014be4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014be6:	693b      	ldr	r3, [r7, #16]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d006      	beq.n	8014bfa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014bec:	693b      	ldr	r3, [r7, #16]
 8014bee:	2200      	movs	r2, #0
 8014bf0:	711a      	strb	r2, [r3, #4]
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	f042 0202 	orr.w	r2, r2, #2
 8014bf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d006      	beq.n	8014c0e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	2200      	movs	r2, #0
 8014c04:	711a      	strb	r2, [r3, #4]
 8014c06:	2200      	movs	r2, #0
 8014c08:	f042 0202 	orr.w	r2, r2, #2
 8014c0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	2243      	movs	r2, #67	; 0x43
 8014c12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014c14:	4b02      	ldr	r3, [pc, #8]	; (8014c20 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014c16:	4618      	mov	r0, r3
 8014c18:	3718      	adds	r7, #24
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}
 8014c1e:	bf00      	nop
 8014c20:	20000054 	.word	0x20000054

08014c24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b086      	sub	sp, #24
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014c2c:	2182      	movs	r1, #130	; 0x82
 8014c2e:	4818      	ldr	r0, [pc, #96]	; (8014c90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014c30:	f000 fc99 	bl	8015566 <USBD_GetEpDesc>
 8014c34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014c36:	2101      	movs	r1, #1
 8014c38:	4815      	ldr	r0, [pc, #84]	; (8014c90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014c3a:	f000 fc94 	bl	8015566 <USBD_GetEpDesc>
 8014c3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014c40:	2181      	movs	r1, #129	; 0x81
 8014c42:	4813      	ldr	r0, [pc, #76]	; (8014c90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014c44:	f000 fc8f 	bl	8015566 <USBD_GetEpDesc>
 8014c48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014c4a:	697b      	ldr	r3, [r7, #20]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d002      	beq.n	8014c56 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014c50:	697b      	ldr	r3, [r7, #20]
 8014c52:	2210      	movs	r2, #16
 8014c54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d006      	beq.n	8014c6a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014c5c:	693b      	ldr	r3, [r7, #16]
 8014c5e:	2200      	movs	r2, #0
 8014c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014c64:	711a      	strb	r2, [r3, #4]
 8014c66:	2200      	movs	r2, #0
 8014c68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d006      	beq.n	8014c7e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	2200      	movs	r2, #0
 8014c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014c78:	711a      	strb	r2, [r3, #4]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	2243      	movs	r2, #67	; 0x43
 8014c82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014c84:	4b02      	ldr	r3, [pc, #8]	; (8014c90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014c86:	4618      	mov	r0, r3
 8014c88:	3718      	adds	r7, #24
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bd80      	pop	{r7, pc}
 8014c8e:	bf00      	nop
 8014c90:	20000054 	.word	0x20000054

08014c94 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014c94:	b480      	push	{r7}
 8014c96:	b083      	sub	sp, #12
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	220a      	movs	r2, #10
 8014ca0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014ca2:	4b03      	ldr	r3, [pc, #12]	; (8014cb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	370c      	adds	r7, #12
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cae:	4770      	bx	lr
 8014cb0:	20000010 	.word	0x20000010

08014cb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014cb4:	b480      	push	{r7}
 8014cb6:	b083      	sub	sp, #12
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d101      	bne.n	8014cc8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014cc4:	2303      	movs	r3, #3
 8014cc6:	e009      	b.n	8014cdc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014cce:	687a      	ldr	r2, [r7, #4]
 8014cd0:	33b0      	adds	r3, #176	; 0xb0
 8014cd2:	009b      	lsls	r3, r3, #2
 8014cd4:	4413      	add	r3, r2
 8014cd6:	683a      	ldr	r2, [r7, #0]
 8014cd8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014cda:	2300      	movs	r3, #0
}
 8014cdc:	4618      	mov	r0, r3
 8014cde:	370c      	adds	r7, #12
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce6:	4770      	bx	lr

08014ce8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014ce8:	b480      	push	{r7}
 8014cea:	b087      	sub	sp, #28
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	60f8      	str	r0, [r7, #12]
 8014cf0:	60b9      	str	r1, [r7, #8]
 8014cf2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	32b0      	adds	r2, #176	; 0xb0
 8014cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d02:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8014d04:	697b      	ldr	r3, [r7, #20]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d101      	bne.n	8014d0e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014d0a:	2303      	movs	r3, #3
 8014d0c:	e008      	b.n	8014d20 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014d0e:	697b      	ldr	r3, [r7, #20]
 8014d10:	68ba      	ldr	r2, [r7, #8]
 8014d12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	687a      	ldr	r2, [r7, #4]
 8014d1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014d1e:	2300      	movs	r3, #0
}
 8014d20:	4618      	mov	r0, r3
 8014d22:	371c      	adds	r7, #28
 8014d24:	46bd      	mov	sp, r7
 8014d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2a:	4770      	bx	lr

08014d2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014d2c:	b480      	push	{r7}
 8014d2e:	b085      	sub	sp, #20
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
 8014d34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	32b0      	adds	r2, #176	; 0xb0
 8014d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d101      	bne.n	8014d50 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014d4c:	2303      	movs	r3, #3
 8014d4e:	e004      	b.n	8014d5a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	683a      	ldr	r2, [r7, #0]
 8014d54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014d58:	2300      	movs	r3, #0
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3714      	adds	r7, #20
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d64:	4770      	bx	lr
	...

08014d68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b084      	sub	sp, #16
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	32b0      	adds	r2, #176	; 0xb0
 8014d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d7e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	32b0      	adds	r2, #176	; 0xb0
 8014d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d101      	bne.n	8014d96 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014d92:	2303      	movs	r3, #3
 8014d94:	e018      	b.n	8014dc8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	7c1b      	ldrb	r3, [r3, #16]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d10a      	bne.n	8014db4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014d9e:	4b0c      	ldr	r3, [pc, #48]	; (8014dd0 <USBD_CDC_ReceivePacket+0x68>)
 8014da0:	7819      	ldrb	r1, [r3, #0]
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014dac:	6878      	ldr	r0, [r7, #4]
 8014dae:	f002 f81f 	bl	8016df0 <USBD_LL_PrepareReceive>
 8014db2:	e008      	b.n	8014dc6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014db4:	4b06      	ldr	r3, [pc, #24]	; (8014dd0 <USBD_CDC_ReceivePacket+0x68>)
 8014db6:	7819      	ldrb	r1, [r3, #0]
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014dbe:	2340      	movs	r3, #64	; 0x40
 8014dc0:	6878      	ldr	r0, [r7, #4]
 8014dc2:	f002 f815 	bl	8016df0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014dc6:	2300      	movs	r3, #0
}
 8014dc8:	4618      	mov	r0, r3
 8014dca:	3710      	adds	r7, #16
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}
 8014dd0:	20000098 	.word	0x20000098

08014dd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b086      	sub	sp, #24
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	60f8      	str	r0, [r7, #12]
 8014ddc:	60b9      	str	r1, [r7, #8]
 8014dde:	4613      	mov	r3, r2
 8014de0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d101      	bne.n	8014dec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014de8:	2303      	movs	r3, #3
 8014dea:	e01f      	b.n	8014e2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	2200      	movs	r2, #0
 8014df0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	2200      	movs	r2, #0
 8014df8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014e04:	68bb      	ldr	r3, [r7, #8]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d003      	beq.n	8014e12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	68ba      	ldr	r2, [r7, #8]
 8014e0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	2201      	movs	r2, #1
 8014e16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	79fa      	ldrb	r2, [r7, #7]
 8014e1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014e20:	68f8      	ldr	r0, [r7, #12]
 8014e22:	f001 fe8b 	bl	8016b3c <USBD_LL_Init>
 8014e26:	4603      	mov	r3, r0
 8014e28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	3718      	adds	r7, #24
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}

08014e34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b084      	sub	sp, #16
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d101      	bne.n	8014e4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014e48:	2303      	movs	r3, #3
 8014e4a:	e025      	b.n	8014e98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	683a      	ldr	r2, [r7, #0]
 8014e50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	32ae      	adds	r2, #174	; 0xae
 8014e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d00f      	beq.n	8014e88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	32ae      	adds	r2, #174	; 0xae
 8014e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e78:	f107 020e 	add.w	r2, r7, #14
 8014e7c:	4610      	mov	r0, r2
 8014e7e:	4798      	blx	r3
 8014e80:	4602      	mov	r2, r0
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014e8e:	1c5a      	adds	r2, r3, #1
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014e96:	2300      	movs	r3, #0
}
 8014e98:	4618      	mov	r0, r3
 8014e9a:	3710      	adds	r7, #16
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bd80      	pop	{r7, pc}

08014ea0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b082      	sub	sp, #8
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f001 fe97 	bl	8016bdc <USBD_LL_Start>
 8014eae:	4603      	mov	r3, r0
}
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	3708      	adds	r7, #8
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}

08014eb8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014eb8:	b480      	push	{r7}
 8014eba:	b083      	sub	sp, #12
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014ec0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	370c      	adds	r7, #12
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ecc:	4770      	bx	lr

08014ece <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014ece:	b580      	push	{r7, lr}
 8014ed0:	b084      	sub	sp, #16
 8014ed2:	af00      	add	r7, sp, #0
 8014ed4:	6078      	str	r0, [r7, #4]
 8014ed6:	460b      	mov	r3, r1
 8014ed8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014eda:	2300      	movs	r3, #0
 8014edc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d009      	beq.n	8014efc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	78fa      	ldrb	r2, [r7, #3]
 8014ef2:	4611      	mov	r1, r2
 8014ef4:	6878      	ldr	r0, [r7, #4]
 8014ef6:	4798      	blx	r3
 8014ef8:	4603      	mov	r3, r0
 8014efa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	3710      	adds	r7, #16
 8014f02:	46bd      	mov	sp, r7
 8014f04:	bd80      	pop	{r7, pc}

08014f06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014f06:	b580      	push	{r7, lr}
 8014f08:	b084      	sub	sp, #16
 8014f0a:	af00      	add	r7, sp, #0
 8014f0c:	6078      	str	r0, [r7, #4]
 8014f0e:	460b      	mov	r3, r1
 8014f10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f12:	2300      	movs	r3, #0
 8014f14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f1c:	685b      	ldr	r3, [r3, #4]
 8014f1e:	78fa      	ldrb	r2, [r7, #3]
 8014f20:	4611      	mov	r1, r2
 8014f22:	6878      	ldr	r0, [r7, #4]
 8014f24:	4798      	blx	r3
 8014f26:	4603      	mov	r3, r0
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d001      	beq.n	8014f30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014f2c:	2303      	movs	r3, #3
 8014f2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f32:	4618      	mov	r0, r3
 8014f34:	3710      	adds	r7, #16
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}

08014f3a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014f3a:	b580      	push	{r7, lr}
 8014f3c:	b084      	sub	sp, #16
 8014f3e:	af00      	add	r7, sp, #0
 8014f40:	6078      	str	r0, [r7, #4]
 8014f42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f4a:	6839      	ldr	r1, [r7, #0]
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f001 f908 	bl	8016162 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	2201      	movs	r2, #1
 8014f56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014f60:	461a      	mov	r2, r3
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014f6e:	f003 031f 	and.w	r3, r3, #31
 8014f72:	2b02      	cmp	r3, #2
 8014f74:	d01a      	beq.n	8014fac <USBD_LL_SetupStage+0x72>
 8014f76:	2b02      	cmp	r3, #2
 8014f78:	d822      	bhi.n	8014fc0 <USBD_LL_SetupStage+0x86>
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d002      	beq.n	8014f84 <USBD_LL_SetupStage+0x4a>
 8014f7e:	2b01      	cmp	r3, #1
 8014f80:	d00a      	beq.n	8014f98 <USBD_LL_SetupStage+0x5e>
 8014f82:	e01d      	b.n	8014fc0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f8a:	4619      	mov	r1, r3
 8014f8c:	6878      	ldr	r0, [r7, #4]
 8014f8e:	f000 fb5f 	bl	8015650 <USBD_StdDevReq>
 8014f92:	4603      	mov	r3, r0
 8014f94:	73fb      	strb	r3, [r7, #15]
      break;
 8014f96:	e020      	b.n	8014fda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f9e:	4619      	mov	r1, r3
 8014fa0:	6878      	ldr	r0, [r7, #4]
 8014fa2:	f000 fbc7 	bl	8015734 <USBD_StdItfReq>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8014faa:	e016      	b.n	8014fda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014fb2:	4619      	mov	r1, r3
 8014fb4:	6878      	ldr	r0, [r7, #4]
 8014fb6:	f000 fc29 	bl	801580c <USBD_StdEPReq>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8014fbe:	e00c      	b.n	8014fda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014fc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014fca:	b2db      	uxtb	r3, r3
 8014fcc:	4619      	mov	r1, r3
 8014fce:	6878      	ldr	r0, [r7, #4]
 8014fd0:	f001 fe64 	bl	8016c9c <USBD_LL_StallEP>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8014fd8:	bf00      	nop
  }

  return ret;
 8014fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	3710      	adds	r7, #16
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}

08014fe4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b086      	sub	sp, #24
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	60f8      	str	r0, [r7, #12]
 8014fec:	460b      	mov	r3, r1
 8014fee:	607a      	str	r2, [r7, #4]
 8014ff0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014ff6:	7afb      	ldrb	r3, [r7, #11]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d16e      	bne.n	80150da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015002:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801500a:	2b03      	cmp	r3, #3
 801500c:	f040 8098 	bne.w	8015140 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	689a      	ldr	r2, [r3, #8]
 8015014:	693b      	ldr	r3, [r7, #16]
 8015016:	68db      	ldr	r3, [r3, #12]
 8015018:	429a      	cmp	r2, r3
 801501a:	d913      	bls.n	8015044 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801501c:	693b      	ldr	r3, [r7, #16]
 801501e:	689a      	ldr	r2, [r3, #8]
 8015020:	693b      	ldr	r3, [r7, #16]
 8015022:	68db      	ldr	r3, [r3, #12]
 8015024:	1ad2      	subs	r2, r2, r3
 8015026:	693b      	ldr	r3, [r7, #16]
 8015028:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801502a:	693b      	ldr	r3, [r7, #16]
 801502c:	68da      	ldr	r2, [r3, #12]
 801502e:	693b      	ldr	r3, [r7, #16]
 8015030:	689b      	ldr	r3, [r3, #8]
 8015032:	4293      	cmp	r3, r2
 8015034:	bf28      	it	cs
 8015036:	4613      	movcs	r3, r2
 8015038:	461a      	mov	r2, r3
 801503a:	6879      	ldr	r1, [r7, #4]
 801503c:	68f8      	ldr	r0, [r7, #12]
 801503e:	f001 f984 	bl	801634a <USBD_CtlContinueRx>
 8015042:	e07d      	b.n	8015140 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801504a:	f003 031f 	and.w	r3, r3, #31
 801504e:	2b02      	cmp	r3, #2
 8015050:	d014      	beq.n	801507c <USBD_LL_DataOutStage+0x98>
 8015052:	2b02      	cmp	r3, #2
 8015054:	d81d      	bhi.n	8015092 <USBD_LL_DataOutStage+0xae>
 8015056:	2b00      	cmp	r3, #0
 8015058:	d002      	beq.n	8015060 <USBD_LL_DataOutStage+0x7c>
 801505a:	2b01      	cmp	r3, #1
 801505c:	d003      	beq.n	8015066 <USBD_LL_DataOutStage+0x82>
 801505e:	e018      	b.n	8015092 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015060:	2300      	movs	r3, #0
 8015062:	75bb      	strb	r3, [r7, #22]
            break;
 8015064:	e018      	b.n	8015098 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801506c:	b2db      	uxtb	r3, r3
 801506e:	4619      	mov	r1, r3
 8015070:	68f8      	ldr	r0, [r7, #12]
 8015072:	f000 fa5e 	bl	8015532 <USBD_CoreFindIF>
 8015076:	4603      	mov	r3, r0
 8015078:	75bb      	strb	r3, [r7, #22]
            break;
 801507a:	e00d      	b.n	8015098 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015082:	b2db      	uxtb	r3, r3
 8015084:	4619      	mov	r1, r3
 8015086:	68f8      	ldr	r0, [r7, #12]
 8015088:	f000 fa60 	bl	801554c <USBD_CoreFindEP>
 801508c:	4603      	mov	r3, r0
 801508e:	75bb      	strb	r3, [r7, #22]
            break;
 8015090:	e002      	b.n	8015098 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015092:	2300      	movs	r3, #0
 8015094:	75bb      	strb	r3, [r7, #22]
            break;
 8015096:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015098:	7dbb      	ldrb	r3, [r7, #22]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d119      	bne.n	80150d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150a4:	b2db      	uxtb	r3, r3
 80150a6:	2b03      	cmp	r3, #3
 80150a8:	d113      	bne.n	80150d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80150aa:	7dba      	ldrb	r2, [r7, #22]
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	32ae      	adds	r2, #174	; 0xae
 80150b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150b4:	691b      	ldr	r3, [r3, #16]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d00b      	beq.n	80150d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80150ba:	7dba      	ldrb	r2, [r7, #22]
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80150c2:	7dba      	ldrb	r2, [r7, #22]
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	32ae      	adds	r2, #174	; 0xae
 80150c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150cc:	691b      	ldr	r3, [r3, #16]
 80150ce:	68f8      	ldr	r0, [r7, #12]
 80150d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80150d2:	68f8      	ldr	r0, [r7, #12]
 80150d4:	f001 f94a 	bl	801636c <USBD_CtlSendStatus>
 80150d8:	e032      	b.n	8015140 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80150da:	7afb      	ldrb	r3, [r7, #11]
 80150dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150e0:	b2db      	uxtb	r3, r3
 80150e2:	4619      	mov	r1, r3
 80150e4:	68f8      	ldr	r0, [r7, #12]
 80150e6:	f000 fa31 	bl	801554c <USBD_CoreFindEP>
 80150ea:	4603      	mov	r3, r0
 80150ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80150ee:	7dbb      	ldrb	r3, [r7, #22]
 80150f0:	2bff      	cmp	r3, #255	; 0xff
 80150f2:	d025      	beq.n	8015140 <USBD_LL_DataOutStage+0x15c>
 80150f4:	7dbb      	ldrb	r3, [r7, #22]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d122      	bne.n	8015140 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015100:	b2db      	uxtb	r3, r3
 8015102:	2b03      	cmp	r3, #3
 8015104:	d117      	bne.n	8015136 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015106:	7dba      	ldrb	r2, [r7, #22]
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	32ae      	adds	r2, #174	; 0xae
 801510c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015110:	699b      	ldr	r3, [r3, #24]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d00f      	beq.n	8015136 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015116:	7dba      	ldrb	r2, [r7, #22]
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801511e:	7dba      	ldrb	r2, [r7, #22]
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	32ae      	adds	r2, #174	; 0xae
 8015124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015128:	699b      	ldr	r3, [r3, #24]
 801512a:	7afa      	ldrb	r2, [r7, #11]
 801512c:	4611      	mov	r1, r2
 801512e:	68f8      	ldr	r0, [r7, #12]
 8015130:	4798      	blx	r3
 8015132:	4603      	mov	r3, r0
 8015134:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015136:	7dfb      	ldrb	r3, [r7, #23]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d001      	beq.n	8015140 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801513c:	7dfb      	ldrb	r3, [r7, #23]
 801513e:	e000      	b.n	8015142 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015140:	2300      	movs	r3, #0
}
 8015142:	4618      	mov	r0, r3
 8015144:	3718      	adds	r7, #24
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}

0801514a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801514a:	b580      	push	{r7, lr}
 801514c:	b086      	sub	sp, #24
 801514e:	af00      	add	r7, sp, #0
 8015150:	60f8      	str	r0, [r7, #12]
 8015152:	460b      	mov	r3, r1
 8015154:	607a      	str	r2, [r7, #4]
 8015156:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015158:	7afb      	ldrb	r3, [r7, #11]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d16f      	bne.n	801523e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	3314      	adds	r3, #20
 8015162:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801516a:	2b02      	cmp	r3, #2
 801516c:	d15a      	bne.n	8015224 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801516e:	693b      	ldr	r3, [r7, #16]
 8015170:	689a      	ldr	r2, [r3, #8]
 8015172:	693b      	ldr	r3, [r7, #16]
 8015174:	68db      	ldr	r3, [r3, #12]
 8015176:	429a      	cmp	r2, r3
 8015178:	d914      	bls.n	80151a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801517a:	693b      	ldr	r3, [r7, #16]
 801517c:	689a      	ldr	r2, [r3, #8]
 801517e:	693b      	ldr	r3, [r7, #16]
 8015180:	68db      	ldr	r3, [r3, #12]
 8015182:	1ad2      	subs	r2, r2, r3
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	689b      	ldr	r3, [r3, #8]
 801518c:	461a      	mov	r2, r3
 801518e:	6879      	ldr	r1, [r7, #4]
 8015190:	68f8      	ldr	r0, [r7, #12]
 8015192:	f001 f8ac 	bl	80162ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015196:	2300      	movs	r3, #0
 8015198:	2200      	movs	r2, #0
 801519a:	2100      	movs	r1, #0
 801519c:	68f8      	ldr	r0, [r7, #12]
 801519e:	f001 fe27 	bl	8016df0 <USBD_LL_PrepareReceive>
 80151a2:	e03f      	b.n	8015224 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	68da      	ldr	r2, [r3, #12]
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	689b      	ldr	r3, [r3, #8]
 80151ac:	429a      	cmp	r2, r3
 80151ae:	d11c      	bne.n	80151ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80151b0:	693b      	ldr	r3, [r7, #16]
 80151b2:	685a      	ldr	r2, [r3, #4]
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d316      	bcc.n	80151ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	685a      	ldr	r2, [r3, #4]
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80151c6:	429a      	cmp	r2, r3
 80151c8:	d20f      	bcs.n	80151ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80151ca:	2200      	movs	r2, #0
 80151cc:	2100      	movs	r1, #0
 80151ce:	68f8      	ldr	r0, [r7, #12]
 80151d0:	f001 f88d 	bl	80162ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	2200      	movs	r2, #0
 80151d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80151dc:	2300      	movs	r3, #0
 80151de:	2200      	movs	r2, #0
 80151e0:	2100      	movs	r1, #0
 80151e2:	68f8      	ldr	r0, [r7, #12]
 80151e4:	f001 fe04 	bl	8016df0 <USBD_LL_PrepareReceive>
 80151e8:	e01c      	b.n	8015224 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151f0:	b2db      	uxtb	r3, r3
 80151f2:	2b03      	cmp	r3, #3
 80151f4:	d10f      	bne.n	8015216 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151fc:	68db      	ldr	r3, [r3, #12]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d009      	beq.n	8015216 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	2200      	movs	r2, #0
 8015206:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015210:	68db      	ldr	r3, [r3, #12]
 8015212:	68f8      	ldr	r0, [r7, #12]
 8015214:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015216:	2180      	movs	r1, #128	; 0x80
 8015218:	68f8      	ldr	r0, [r7, #12]
 801521a:	f001 fd3f 	bl	8016c9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801521e:	68f8      	ldr	r0, [r7, #12]
 8015220:	f001 f8b7 	bl	8016392 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801522a:	2b00      	cmp	r3, #0
 801522c:	d03a      	beq.n	80152a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801522e:	68f8      	ldr	r0, [r7, #12]
 8015230:	f7ff fe42 	bl	8014eb8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	2200      	movs	r2, #0
 8015238:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801523c:	e032      	b.n	80152a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801523e:	7afb      	ldrb	r3, [r7, #11]
 8015240:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015244:	b2db      	uxtb	r3, r3
 8015246:	4619      	mov	r1, r3
 8015248:	68f8      	ldr	r0, [r7, #12]
 801524a:	f000 f97f 	bl	801554c <USBD_CoreFindEP>
 801524e:	4603      	mov	r3, r0
 8015250:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015252:	7dfb      	ldrb	r3, [r7, #23]
 8015254:	2bff      	cmp	r3, #255	; 0xff
 8015256:	d025      	beq.n	80152a4 <USBD_LL_DataInStage+0x15a>
 8015258:	7dfb      	ldrb	r3, [r7, #23]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d122      	bne.n	80152a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015264:	b2db      	uxtb	r3, r3
 8015266:	2b03      	cmp	r3, #3
 8015268:	d11c      	bne.n	80152a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801526a:	7dfa      	ldrb	r2, [r7, #23]
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	32ae      	adds	r2, #174	; 0xae
 8015270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015274:	695b      	ldr	r3, [r3, #20]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d014      	beq.n	80152a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801527a:	7dfa      	ldrb	r2, [r7, #23]
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015282:	7dfa      	ldrb	r2, [r7, #23]
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	32ae      	adds	r2, #174	; 0xae
 8015288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801528c:	695b      	ldr	r3, [r3, #20]
 801528e:	7afa      	ldrb	r2, [r7, #11]
 8015290:	4611      	mov	r1, r2
 8015292:	68f8      	ldr	r0, [r7, #12]
 8015294:	4798      	blx	r3
 8015296:	4603      	mov	r3, r0
 8015298:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801529a:	7dbb      	ldrb	r3, [r7, #22]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d001      	beq.n	80152a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80152a0:	7dbb      	ldrb	r3, [r7, #22]
 80152a2:	e000      	b.n	80152a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80152a4:	2300      	movs	r3, #0
}
 80152a6:	4618      	mov	r0, r3
 80152a8:	3718      	adds	r7, #24
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}

080152ae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80152ae:	b580      	push	{r7, lr}
 80152b0:	b084      	sub	sp, #16
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80152b6:	2300      	movs	r3, #0
 80152b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	2201      	movs	r2, #1
 80152be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	2200      	movs	r2, #0
 80152c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	2200      	movs	r2, #0
 80152ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	2200      	movs	r2, #0
 80152d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2200      	movs	r2, #0
 80152dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d014      	beq.n	8015314 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152f0:	685b      	ldr	r3, [r3, #4]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d00e      	beq.n	8015314 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152fc:	685b      	ldr	r3, [r3, #4]
 80152fe:	687a      	ldr	r2, [r7, #4]
 8015300:	6852      	ldr	r2, [r2, #4]
 8015302:	b2d2      	uxtb	r2, r2
 8015304:	4611      	mov	r1, r2
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	4798      	blx	r3
 801530a:	4603      	mov	r3, r0
 801530c:	2b00      	cmp	r3, #0
 801530e:	d001      	beq.n	8015314 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015310:	2303      	movs	r3, #3
 8015312:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015314:	2340      	movs	r3, #64	; 0x40
 8015316:	2200      	movs	r2, #0
 8015318:	2100      	movs	r1, #0
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f001 fc79 	bl	8016c12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	2201      	movs	r2, #1
 8015324:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	2240      	movs	r2, #64	; 0x40
 801532c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015330:	2340      	movs	r3, #64	; 0x40
 8015332:	2200      	movs	r2, #0
 8015334:	2180      	movs	r1, #128	; 0x80
 8015336:	6878      	ldr	r0, [r7, #4]
 8015338:	f001 fc6b 	bl	8016c12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	2201      	movs	r2, #1
 8015340:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	2240      	movs	r2, #64	; 0x40
 8015346:	621a      	str	r2, [r3, #32]

  return ret;
 8015348:	7bfb      	ldrb	r3, [r7, #15]
}
 801534a:	4618      	mov	r0, r3
 801534c:	3710      	adds	r7, #16
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}

08015352 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015352:	b480      	push	{r7}
 8015354:	b083      	sub	sp, #12
 8015356:	af00      	add	r7, sp, #0
 8015358:	6078      	str	r0, [r7, #4]
 801535a:	460b      	mov	r3, r1
 801535c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	78fa      	ldrb	r2, [r7, #3]
 8015362:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015364:	2300      	movs	r3, #0
}
 8015366:	4618      	mov	r0, r3
 8015368:	370c      	adds	r7, #12
 801536a:	46bd      	mov	sp, r7
 801536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015370:	4770      	bx	lr

08015372 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015372:	b480      	push	{r7}
 8015374:	b083      	sub	sp, #12
 8015376:	af00      	add	r7, sp, #0
 8015378:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015380:	b2da      	uxtb	r2, r3
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2204      	movs	r2, #4
 801538c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015390:	2300      	movs	r3, #0
}
 8015392:	4618      	mov	r0, r3
 8015394:	370c      	adds	r7, #12
 8015396:	46bd      	mov	sp, r7
 8015398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539c:	4770      	bx	lr

0801539e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801539e:	b480      	push	{r7}
 80153a0:	b083      	sub	sp, #12
 80153a2:	af00      	add	r7, sp, #0
 80153a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153ac:	b2db      	uxtb	r3, r3
 80153ae:	2b04      	cmp	r3, #4
 80153b0:	d106      	bne.n	80153c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80153b8:	b2da      	uxtb	r2, r3
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80153c0:	2300      	movs	r3, #0
}
 80153c2:	4618      	mov	r0, r3
 80153c4:	370c      	adds	r7, #12
 80153c6:	46bd      	mov	sp, r7
 80153c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153cc:	4770      	bx	lr

080153ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80153ce:	b580      	push	{r7, lr}
 80153d0:	b082      	sub	sp, #8
 80153d2:	af00      	add	r7, sp, #0
 80153d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153dc:	b2db      	uxtb	r3, r3
 80153de:	2b03      	cmp	r3, #3
 80153e0:	d110      	bne.n	8015404 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d00b      	beq.n	8015404 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153f2:	69db      	ldr	r3, [r3, #28]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d005      	beq.n	8015404 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153fe:	69db      	ldr	r3, [r3, #28]
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015404:	2300      	movs	r3, #0
}
 8015406:	4618      	mov	r0, r3
 8015408:	3708      	adds	r7, #8
 801540a:	46bd      	mov	sp, r7
 801540c:	bd80      	pop	{r7, pc}

0801540e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801540e:	b580      	push	{r7, lr}
 8015410:	b082      	sub	sp, #8
 8015412:	af00      	add	r7, sp, #0
 8015414:	6078      	str	r0, [r7, #4]
 8015416:	460b      	mov	r3, r1
 8015418:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	32ae      	adds	r2, #174	; 0xae
 8015424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d101      	bne.n	8015430 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801542c:	2303      	movs	r3, #3
 801542e:	e01c      	b.n	801546a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015436:	b2db      	uxtb	r3, r3
 8015438:	2b03      	cmp	r3, #3
 801543a:	d115      	bne.n	8015468 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	32ae      	adds	r2, #174	; 0xae
 8015446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801544a:	6a1b      	ldr	r3, [r3, #32]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d00b      	beq.n	8015468 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	32ae      	adds	r2, #174	; 0xae
 801545a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801545e:	6a1b      	ldr	r3, [r3, #32]
 8015460:	78fa      	ldrb	r2, [r7, #3]
 8015462:	4611      	mov	r1, r2
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015468:	2300      	movs	r3, #0
}
 801546a:	4618      	mov	r0, r3
 801546c:	3708      	adds	r7, #8
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}

08015472 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015472:	b580      	push	{r7, lr}
 8015474:	b082      	sub	sp, #8
 8015476:	af00      	add	r7, sp, #0
 8015478:	6078      	str	r0, [r7, #4]
 801547a:	460b      	mov	r3, r1
 801547c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	32ae      	adds	r2, #174	; 0xae
 8015488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d101      	bne.n	8015494 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015490:	2303      	movs	r3, #3
 8015492:	e01c      	b.n	80154ce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801549a:	b2db      	uxtb	r3, r3
 801549c:	2b03      	cmp	r3, #3
 801549e:	d115      	bne.n	80154cc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	32ae      	adds	r2, #174	; 0xae
 80154aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d00b      	beq.n	80154cc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	32ae      	adds	r2, #174	; 0xae
 80154be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154c4:	78fa      	ldrb	r2, [r7, #3]
 80154c6:	4611      	mov	r1, r2
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80154cc:	2300      	movs	r3, #0
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	3708      	adds	r7, #8
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}

080154d6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80154d6:	b480      	push	{r7}
 80154d8:	b083      	sub	sp, #12
 80154da:	af00      	add	r7, sp, #0
 80154dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80154de:	2300      	movs	r3, #0
}
 80154e0:	4618      	mov	r0, r3
 80154e2:	370c      	adds	r7, #12
 80154e4:	46bd      	mov	sp, r7
 80154e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ea:	4770      	bx	lr

080154ec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b084      	sub	sp, #16
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80154f4:	2300      	movs	r3, #0
 80154f6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2201      	movs	r2, #1
 80154fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015506:	2b00      	cmp	r3, #0
 8015508:	d00e      	beq.n	8015528 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015510:	685b      	ldr	r3, [r3, #4]
 8015512:	687a      	ldr	r2, [r7, #4]
 8015514:	6852      	ldr	r2, [r2, #4]
 8015516:	b2d2      	uxtb	r2, r2
 8015518:	4611      	mov	r1, r2
 801551a:	6878      	ldr	r0, [r7, #4]
 801551c:	4798      	blx	r3
 801551e:	4603      	mov	r3, r0
 8015520:	2b00      	cmp	r3, #0
 8015522:	d001      	beq.n	8015528 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015524:	2303      	movs	r3, #3
 8015526:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015528:	7bfb      	ldrb	r3, [r7, #15]
}
 801552a:	4618      	mov	r0, r3
 801552c:	3710      	adds	r7, #16
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}

08015532 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015532:	b480      	push	{r7}
 8015534:	b083      	sub	sp, #12
 8015536:	af00      	add	r7, sp, #0
 8015538:	6078      	str	r0, [r7, #4]
 801553a:	460b      	mov	r3, r1
 801553c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801553e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015540:	4618      	mov	r0, r3
 8015542:	370c      	adds	r7, #12
 8015544:	46bd      	mov	sp, r7
 8015546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554a:	4770      	bx	lr

0801554c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801554c:	b480      	push	{r7}
 801554e:	b083      	sub	sp, #12
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	460b      	mov	r3, r1
 8015556:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015558:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801555a:	4618      	mov	r0, r3
 801555c:	370c      	adds	r7, #12
 801555e:	46bd      	mov	sp, r7
 8015560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015564:	4770      	bx	lr

08015566 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015566:	b580      	push	{r7, lr}
 8015568:	b086      	sub	sp, #24
 801556a:	af00      	add	r7, sp, #0
 801556c:	6078      	str	r0, [r7, #4]
 801556e:	460b      	mov	r3, r1
 8015570:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801557a:	2300      	movs	r3, #0
 801557c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	885b      	ldrh	r3, [r3, #2]
 8015582:	b29a      	uxth	r2, r3
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	781b      	ldrb	r3, [r3, #0]
 8015588:	b29b      	uxth	r3, r3
 801558a:	429a      	cmp	r2, r3
 801558c:	d920      	bls.n	80155d0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	b29b      	uxth	r3, r3
 8015594:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015596:	e013      	b.n	80155c0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015598:	f107 030a 	add.w	r3, r7, #10
 801559c:	4619      	mov	r1, r3
 801559e:	6978      	ldr	r0, [r7, #20]
 80155a0:	f000 f81b 	bl	80155da <USBD_GetNextDesc>
 80155a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	785b      	ldrb	r3, [r3, #1]
 80155aa:	2b05      	cmp	r3, #5
 80155ac:	d108      	bne.n	80155c0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80155b2:	693b      	ldr	r3, [r7, #16]
 80155b4:	789b      	ldrb	r3, [r3, #2]
 80155b6:	78fa      	ldrb	r2, [r7, #3]
 80155b8:	429a      	cmp	r2, r3
 80155ba:	d008      	beq.n	80155ce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80155bc:	2300      	movs	r3, #0
 80155be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	885b      	ldrh	r3, [r3, #2]
 80155c4:	b29a      	uxth	r2, r3
 80155c6:	897b      	ldrh	r3, [r7, #10]
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d8e5      	bhi.n	8015598 <USBD_GetEpDesc+0x32>
 80155cc:	e000      	b.n	80155d0 <USBD_GetEpDesc+0x6a>
          break;
 80155ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80155d0:	693b      	ldr	r3, [r7, #16]
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3718      	adds	r7, #24
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}

080155da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80155da:	b480      	push	{r7}
 80155dc:	b085      	sub	sp, #20
 80155de:	af00      	add	r7, sp, #0
 80155e0:	6078      	str	r0, [r7, #4]
 80155e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	881a      	ldrh	r2, [r3, #0]
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	b29b      	uxth	r3, r3
 80155f2:	4413      	add	r3, r2
 80155f4:	b29a      	uxth	r2, r3
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	781b      	ldrb	r3, [r3, #0]
 80155fe:	461a      	mov	r2, r3
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	4413      	add	r3, r2
 8015604:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015606:	68fb      	ldr	r3, [r7, #12]
}
 8015608:	4618      	mov	r0, r3
 801560a:	3714      	adds	r7, #20
 801560c:	46bd      	mov	sp, r7
 801560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015612:	4770      	bx	lr

08015614 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015614:	b480      	push	{r7}
 8015616:	b087      	sub	sp, #28
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015620:	697b      	ldr	r3, [r7, #20]
 8015622:	781b      	ldrb	r3, [r3, #0]
 8015624:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	3301      	adds	r3, #1
 801562a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	781b      	ldrb	r3, [r3, #0]
 8015630:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015632:	8a3b      	ldrh	r3, [r7, #16]
 8015634:	021b      	lsls	r3, r3, #8
 8015636:	b21a      	sxth	r2, r3
 8015638:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801563c:	4313      	orrs	r3, r2
 801563e:	b21b      	sxth	r3, r3
 8015640:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015642:	89fb      	ldrh	r3, [r7, #14]
}
 8015644:	4618      	mov	r0, r3
 8015646:	371c      	adds	r7, #28
 8015648:	46bd      	mov	sp, r7
 801564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564e:	4770      	bx	lr

08015650 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b084      	sub	sp, #16
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
 8015658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801565a:	2300      	movs	r3, #0
 801565c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801565e:	683b      	ldr	r3, [r7, #0]
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015666:	2b40      	cmp	r3, #64	; 0x40
 8015668:	d005      	beq.n	8015676 <USBD_StdDevReq+0x26>
 801566a:	2b40      	cmp	r3, #64	; 0x40
 801566c:	d857      	bhi.n	801571e <USBD_StdDevReq+0xce>
 801566e:	2b00      	cmp	r3, #0
 8015670:	d00f      	beq.n	8015692 <USBD_StdDevReq+0x42>
 8015672:	2b20      	cmp	r3, #32
 8015674:	d153      	bne.n	801571e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	32ae      	adds	r2, #174	; 0xae
 8015680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015684:	689b      	ldr	r3, [r3, #8]
 8015686:	6839      	ldr	r1, [r7, #0]
 8015688:	6878      	ldr	r0, [r7, #4]
 801568a:	4798      	blx	r3
 801568c:	4603      	mov	r3, r0
 801568e:	73fb      	strb	r3, [r7, #15]
      break;
 8015690:	e04a      	b.n	8015728 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015692:	683b      	ldr	r3, [r7, #0]
 8015694:	785b      	ldrb	r3, [r3, #1]
 8015696:	2b09      	cmp	r3, #9
 8015698:	d83b      	bhi.n	8015712 <USBD_StdDevReq+0xc2>
 801569a:	a201      	add	r2, pc, #4	; (adr r2, 80156a0 <USBD_StdDevReq+0x50>)
 801569c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156a0:	080156f5 	.word	0x080156f5
 80156a4:	08015709 	.word	0x08015709
 80156a8:	08015713 	.word	0x08015713
 80156ac:	080156ff 	.word	0x080156ff
 80156b0:	08015713 	.word	0x08015713
 80156b4:	080156d3 	.word	0x080156d3
 80156b8:	080156c9 	.word	0x080156c9
 80156bc:	08015713 	.word	0x08015713
 80156c0:	080156eb 	.word	0x080156eb
 80156c4:	080156dd 	.word	0x080156dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80156c8:	6839      	ldr	r1, [r7, #0]
 80156ca:	6878      	ldr	r0, [r7, #4]
 80156cc:	f000 fa3c 	bl	8015b48 <USBD_GetDescriptor>
          break;
 80156d0:	e024      	b.n	801571c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80156d2:	6839      	ldr	r1, [r7, #0]
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	f000 fba1 	bl	8015e1c <USBD_SetAddress>
          break;
 80156da:	e01f      	b.n	801571c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80156dc:	6839      	ldr	r1, [r7, #0]
 80156de:	6878      	ldr	r0, [r7, #4]
 80156e0:	f000 fbe0 	bl	8015ea4 <USBD_SetConfig>
 80156e4:	4603      	mov	r3, r0
 80156e6:	73fb      	strb	r3, [r7, #15]
          break;
 80156e8:	e018      	b.n	801571c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80156ea:	6839      	ldr	r1, [r7, #0]
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	f000 fc83 	bl	8015ff8 <USBD_GetConfig>
          break;
 80156f2:	e013      	b.n	801571c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80156f4:	6839      	ldr	r1, [r7, #0]
 80156f6:	6878      	ldr	r0, [r7, #4]
 80156f8:	f000 fcb4 	bl	8016064 <USBD_GetStatus>
          break;
 80156fc:	e00e      	b.n	801571c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80156fe:	6839      	ldr	r1, [r7, #0]
 8015700:	6878      	ldr	r0, [r7, #4]
 8015702:	f000 fce3 	bl	80160cc <USBD_SetFeature>
          break;
 8015706:	e009      	b.n	801571c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015708:	6839      	ldr	r1, [r7, #0]
 801570a:	6878      	ldr	r0, [r7, #4]
 801570c:	f000 fd07 	bl	801611e <USBD_ClrFeature>
          break;
 8015710:	e004      	b.n	801571c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015712:	6839      	ldr	r1, [r7, #0]
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	f000 fd5e 	bl	80161d6 <USBD_CtlError>
          break;
 801571a:	bf00      	nop
      }
      break;
 801571c:	e004      	b.n	8015728 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801571e:	6839      	ldr	r1, [r7, #0]
 8015720:	6878      	ldr	r0, [r7, #4]
 8015722:	f000 fd58 	bl	80161d6 <USBD_CtlError>
      break;
 8015726:	bf00      	nop
  }

  return ret;
 8015728:	7bfb      	ldrb	r3, [r7, #15]
}
 801572a:	4618      	mov	r0, r3
 801572c:	3710      	adds	r7, #16
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop

08015734 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b084      	sub	sp, #16
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
 801573c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801573e:	2300      	movs	r3, #0
 8015740:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	781b      	ldrb	r3, [r3, #0]
 8015746:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801574a:	2b40      	cmp	r3, #64	; 0x40
 801574c:	d005      	beq.n	801575a <USBD_StdItfReq+0x26>
 801574e:	2b40      	cmp	r3, #64	; 0x40
 8015750:	d852      	bhi.n	80157f8 <USBD_StdItfReq+0xc4>
 8015752:	2b00      	cmp	r3, #0
 8015754:	d001      	beq.n	801575a <USBD_StdItfReq+0x26>
 8015756:	2b20      	cmp	r3, #32
 8015758:	d14e      	bne.n	80157f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015760:	b2db      	uxtb	r3, r3
 8015762:	3b01      	subs	r3, #1
 8015764:	2b02      	cmp	r3, #2
 8015766:	d840      	bhi.n	80157ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	889b      	ldrh	r3, [r3, #4]
 801576c:	b2db      	uxtb	r3, r3
 801576e:	2b01      	cmp	r3, #1
 8015770:	d836      	bhi.n	80157e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015772:	683b      	ldr	r3, [r7, #0]
 8015774:	889b      	ldrh	r3, [r3, #4]
 8015776:	b2db      	uxtb	r3, r3
 8015778:	4619      	mov	r1, r3
 801577a:	6878      	ldr	r0, [r7, #4]
 801577c:	f7ff fed9 	bl	8015532 <USBD_CoreFindIF>
 8015780:	4603      	mov	r3, r0
 8015782:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015784:	7bbb      	ldrb	r3, [r7, #14]
 8015786:	2bff      	cmp	r3, #255	; 0xff
 8015788:	d01d      	beq.n	80157c6 <USBD_StdItfReq+0x92>
 801578a:	7bbb      	ldrb	r3, [r7, #14]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d11a      	bne.n	80157c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015790:	7bba      	ldrb	r2, [r7, #14]
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	32ae      	adds	r2, #174	; 0xae
 8015796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801579a:	689b      	ldr	r3, [r3, #8]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d00f      	beq.n	80157c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80157a0:	7bba      	ldrb	r2, [r7, #14]
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80157a8:	7bba      	ldrb	r2, [r7, #14]
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	32ae      	adds	r2, #174	; 0xae
 80157ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157b2:	689b      	ldr	r3, [r3, #8]
 80157b4:	6839      	ldr	r1, [r7, #0]
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	4798      	blx	r3
 80157ba:	4603      	mov	r3, r0
 80157bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80157be:	e004      	b.n	80157ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80157c0:	2303      	movs	r3, #3
 80157c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80157c4:	e001      	b.n	80157ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80157c6:	2303      	movs	r3, #3
 80157c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80157ca:	683b      	ldr	r3, [r7, #0]
 80157cc:	88db      	ldrh	r3, [r3, #6]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d110      	bne.n	80157f4 <USBD_StdItfReq+0xc0>
 80157d2:	7bfb      	ldrb	r3, [r7, #15]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d10d      	bne.n	80157f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f000 fdc7 	bl	801636c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80157de:	e009      	b.n	80157f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80157e0:	6839      	ldr	r1, [r7, #0]
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f000 fcf7 	bl	80161d6 <USBD_CtlError>
          break;
 80157e8:	e004      	b.n	80157f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80157ea:	6839      	ldr	r1, [r7, #0]
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f000 fcf2 	bl	80161d6 <USBD_CtlError>
          break;
 80157f2:	e000      	b.n	80157f6 <USBD_StdItfReq+0xc2>
          break;
 80157f4:	bf00      	nop
      }
      break;
 80157f6:	e004      	b.n	8015802 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80157f8:	6839      	ldr	r1, [r7, #0]
 80157fa:	6878      	ldr	r0, [r7, #4]
 80157fc:	f000 fceb 	bl	80161d6 <USBD_CtlError>
      break;
 8015800:	bf00      	nop
  }

  return ret;
 8015802:	7bfb      	ldrb	r3, [r7, #15]
}
 8015804:	4618      	mov	r0, r3
 8015806:	3710      	adds	r7, #16
 8015808:	46bd      	mov	sp, r7
 801580a:	bd80      	pop	{r7, pc}

0801580c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b084      	sub	sp, #16
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
 8015814:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015816:	2300      	movs	r3, #0
 8015818:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801581a:	683b      	ldr	r3, [r7, #0]
 801581c:	889b      	ldrh	r3, [r3, #4]
 801581e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015820:	683b      	ldr	r3, [r7, #0]
 8015822:	781b      	ldrb	r3, [r3, #0]
 8015824:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015828:	2b40      	cmp	r3, #64	; 0x40
 801582a:	d007      	beq.n	801583c <USBD_StdEPReq+0x30>
 801582c:	2b40      	cmp	r3, #64	; 0x40
 801582e:	f200 817f 	bhi.w	8015b30 <USBD_StdEPReq+0x324>
 8015832:	2b00      	cmp	r3, #0
 8015834:	d02a      	beq.n	801588c <USBD_StdEPReq+0x80>
 8015836:	2b20      	cmp	r3, #32
 8015838:	f040 817a 	bne.w	8015b30 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801583c:	7bbb      	ldrb	r3, [r7, #14]
 801583e:	4619      	mov	r1, r3
 8015840:	6878      	ldr	r0, [r7, #4]
 8015842:	f7ff fe83 	bl	801554c <USBD_CoreFindEP>
 8015846:	4603      	mov	r3, r0
 8015848:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801584a:	7b7b      	ldrb	r3, [r7, #13]
 801584c:	2bff      	cmp	r3, #255	; 0xff
 801584e:	f000 8174 	beq.w	8015b3a <USBD_StdEPReq+0x32e>
 8015852:	7b7b      	ldrb	r3, [r7, #13]
 8015854:	2b00      	cmp	r3, #0
 8015856:	f040 8170 	bne.w	8015b3a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801585a:	7b7a      	ldrb	r2, [r7, #13]
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015862:	7b7a      	ldrb	r2, [r7, #13]
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	32ae      	adds	r2, #174	; 0xae
 8015868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801586c:	689b      	ldr	r3, [r3, #8]
 801586e:	2b00      	cmp	r3, #0
 8015870:	f000 8163 	beq.w	8015b3a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015874:	7b7a      	ldrb	r2, [r7, #13]
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	32ae      	adds	r2, #174	; 0xae
 801587a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801587e:	689b      	ldr	r3, [r3, #8]
 8015880:	6839      	ldr	r1, [r7, #0]
 8015882:	6878      	ldr	r0, [r7, #4]
 8015884:	4798      	blx	r3
 8015886:	4603      	mov	r3, r0
 8015888:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801588a:	e156      	b.n	8015b3a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801588c:	683b      	ldr	r3, [r7, #0]
 801588e:	785b      	ldrb	r3, [r3, #1]
 8015890:	2b03      	cmp	r3, #3
 8015892:	d008      	beq.n	80158a6 <USBD_StdEPReq+0x9a>
 8015894:	2b03      	cmp	r3, #3
 8015896:	f300 8145 	bgt.w	8015b24 <USBD_StdEPReq+0x318>
 801589a:	2b00      	cmp	r3, #0
 801589c:	f000 809b 	beq.w	80159d6 <USBD_StdEPReq+0x1ca>
 80158a0:	2b01      	cmp	r3, #1
 80158a2:	d03c      	beq.n	801591e <USBD_StdEPReq+0x112>
 80158a4:	e13e      	b.n	8015b24 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158ac:	b2db      	uxtb	r3, r3
 80158ae:	2b02      	cmp	r3, #2
 80158b0:	d002      	beq.n	80158b8 <USBD_StdEPReq+0xac>
 80158b2:	2b03      	cmp	r3, #3
 80158b4:	d016      	beq.n	80158e4 <USBD_StdEPReq+0xd8>
 80158b6:	e02c      	b.n	8015912 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80158b8:	7bbb      	ldrb	r3, [r7, #14]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d00d      	beq.n	80158da <USBD_StdEPReq+0xce>
 80158be:	7bbb      	ldrb	r3, [r7, #14]
 80158c0:	2b80      	cmp	r3, #128	; 0x80
 80158c2:	d00a      	beq.n	80158da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80158c4:	7bbb      	ldrb	r3, [r7, #14]
 80158c6:	4619      	mov	r1, r3
 80158c8:	6878      	ldr	r0, [r7, #4]
 80158ca:	f001 f9e7 	bl	8016c9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80158ce:	2180      	movs	r1, #128	; 0x80
 80158d0:	6878      	ldr	r0, [r7, #4]
 80158d2:	f001 f9e3 	bl	8016c9c <USBD_LL_StallEP>
 80158d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80158d8:	e020      	b.n	801591c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80158da:	6839      	ldr	r1, [r7, #0]
 80158dc:	6878      	ldr	r0, [r7, #4]
 80158de:	f000 fc7a 	bl	80161d6 <USBD_CtlError>
              break;
 80158e2:	e01b      	b.n	801591c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80158e4:	683b      	ldr	r3, [r7, #0]
 80158e6:	885b      	ldrh	r3, [r3, #2]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d10e      	bne.n	801590a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80158ec:	7bbb      	ldrb	r3, [r7, #14]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d00b      	beq.n	801590a <USBD_StdEPReq+0xfe>
 80158f2:	7bbb      	ldrb	r3, [r7, #14]
 80158f4:	2b80      	cmp	r3, #128	; 0x80
 80158f6:	d008      	beq.n	801590a <USBD_StdEPReq+0xfe>
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	88db      	ldrh	r3, [r3, #6]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d104      	bne.n	801590a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015900:	7bbb      	ldrb	r3, [r7, #14]
 8015902:	4619      	mov	r1, r3
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f001 f9c9 	bl	8016c9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801590a:	6878      	ldr	r0, [r7, #4]
 801590c:	f000 fd2e 	bl	801636c <USBD_CtlSendStatus>

              break;
 8015910:	e004      	b.n	801591c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015912:	6839      	ldr	r1, [r7, #0]
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	f000 fc5e 	bl	80161d6 <USBD_CtlError>
              break;
 801591a:	bf00      	nop
          }
          break;
 801591c:	e107      	b.n	8015b2e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015924:	b2db      	uxtb	r3, r3
 8015926:	2b02      	cmp	r3, #2
 8015928:	d002      	beq.n	8015930 <USBD_StdEPReq+0x124>
 801592a:	2b03      	cmp	r3, #3
 801592c:	d016      	beq.n	801595c <USBD_StdEPReq+0x150>
 801592e:	e04b      	b.n	80159c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015930:	7bbb      	ldrb	r3, [r7, #14]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d00d      	beq.n	8015952 <USBD_StdEPReq+0x146>
 8015936:	7bbb      	ldrb	r3, [r7, #14]
 8015938:	2b80      	cmp	r3, #128	; 0x80
 801593a:	d00a      	beq.n	8015952 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801593c:	7bbb      	ldrb	r3, [r7, #14]
 801593e:	4619      	mov	r1, r3
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f001 f9ab 	bl	8016c9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015946:	2180      	movs	r1, #128	; 0x80
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	f001 f9a7 	bl	8016c9c <USBD_LL_StallEP>
 801594e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015950:	e040      	b.n	80159d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015952:	6839      	ldr	r1, [r7, #0]
 8015954:	6878      	ldr	r0, [r7, #4]
 8015956:	f000 fc3e 	bl	80161d6 <USBD_CtlError>
              break;
 801595a:	e03b      	b.n	80159d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	885b      	ldrh	r3, [r3, #2]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d136      	bne.n	80159d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015964:	7bbb      	ldrb	r3, [r7, #14]
 8015966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801596a:	2b00      	cmp	r3, #0
 801596c:	d004      	beq.n	8015978 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801596e:	7bbb      	ldrb	r3, [r7, #14]
 8015970:	4619      	mov	r1, r3
 8015972:	6878      	ldr	r0, [r7, #4]
 8015974:	f001 f9b1 	bl	8016cda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015978:	6878      	ldr	r0, [r7, #4]
 801597a:	f000 fcf7 	bl	801636c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801597e:	7bbb      	ldrb	r3, [r7, #14]
 8015980:	4619      	mov	r1, r3
 8015982:	6878      	ldr	r0, [r7, #4]
 8015984:	f7ff fde2 	bl	801554c <USBD_CoreFindEP>
 8015988:	4603      	mov	r3, r0
 801598a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801598c:	7b7b      	ldrb	r3, [r7, #13]
 801598e:	2bff      	cmp	r3, #255	; 0xff
 8015990:	d01f      	beq.n	80159d2 <USBD_StdEPReq+0x1c6>
 8015992:	7b7b      	ldrb	r3, [r7, #13]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d11c      	bne.n	80159d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015998:	7b7a      	ldrb	r2, [r7, #13]
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80159a0:	7b7a      	ldrb	r2, [r7, #13]
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	32ae      	adds	r2, #174	; 0xae
 80159a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159aa:	689b      	ldr	r3, [r3, #8]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d010      	beq.n	80159d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80159b0:	7b7a      	ldrb	r2, [r7, #13]
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	32ae      	adds	r2, #174	; 0xae
 80159b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159ba:	689b      	ldr	r3, [r3, #8]
 80159bc:	6839      	ldr	r1, [r7, #0]
 80159be:	6878      	ldr	r0, [r7, #4]
 80159c0:	4798      	blx	r3
 80159c2:	4603      	mov	r3, r0
 80159c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80159c6:	e004      	b.n	80159d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80159c8:	6839      	ldr	r1, [r7, #0]
 80159ca:	6878      	ldr	r0, [r7, #4]
 80159cc:	f000 fc03 	bl	80161d6 <USBD_CtlError>
              break;
 80159d0:	e000      	b.n	80159d4 <USBD_StdEPReq+0x1c8>
              break;
 80159d2:	bf00      	nop
          }
          break;
 80159d4:	e0ab      	b.n	8015b2e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159dc:	b2db      	uxtb	r3, r3
 80159de:	2b02      	cmp	r3, #2
 80159e0:	d002      	beq.n	80159e8 <USBD_StdEPReq+0x1dc>
 80159e2:	2b03      	cmp	r3, #3
 80159e4:	d032      	beq.n	8015a4c <USBD_StdEPReq+0x240>
 80159e6:	e097      	b.n	8015b18 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159e8:	7bbb      	ldrb	r3, [r7, #14]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d007      	beq.n	80159fe <USBD_StdEPReq+0x1f2>
 80159ee:	7bbb      	ldrb	r3, [r7, #14]
 80159f0:	2b80      	cmp	r3, #128	; 0x80
 80159f2:	d004      	beq.n	80159fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80159f4:	6839      	ldr	r1, [r7, #0]
 80159f6:	6878      	ldr	r0, [r7, #4]
 80159f8:	f000 fbed 	bl	80161d6 <USBD_CtlError>
                break;
 80159fc:	e091      	b.n	8015b22 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80159fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	da0b      	bge.n	8015a1e <USBD_StdEPReq+0x212>
 8015a06:	7bbb      	ldrb	r3, [r7, #14]
 8015a08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a0c:	4613      	mov	r3, r2
 8015a0e:	009b      	lsls	r3, r3, #2
 8015a10:	4413      	add	r3, r2
 8015a12:	009b      	lsls	r3, r3, #2
 8015a14:	3310      	adds	r3, #16
 8015a16:	687a      	ldr	r2, [r7, #4]
 8015a18:	4413      	add	r3, r2
 8015a1a:	3304      	adds	r3, #4
 8015a1c:	e00b      	b.n	8015a36 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015a1e:	7bbb      	ldrb	r3, [r7, #14]
 8015a20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a24:	4613      	mov	r3, r2
 8015a26:	009b      	lsls	r3, r3, #2
 8015a28:	4413      	add	r3, r2
 8015a2a:	009b      	lsls	r3, r3, #2
 8015a2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015a30:	687a      	ldr	r2, [r7, #4]
 8015a32:	4413      	add	r3, r2
 8015a34:	3304      	adds	r3, #4
 8015a36:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015a38:	68bb      	ldr	r3, [r7, #8]
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015a3e:	68bb      	ldr	r3, [r7, #8]
 8015a40:	2202      	movs	r2, #2
 8015a42:	4619      	mov	r1, r3
 8015a44:	6878      	ldr	r0, [r7, #4]
 8015a46:	f000 fc37 	bl	80162b8 <USBD_CtlSendData>
              break;
 8015a4a:	e06a      	b.n	8015b22 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015a4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	da11      	bge.n	8015a78 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015a54:	7bbb      	ldrb	r3, [r7, #14]
 8015a56:	f003 020f 	and.w	r2, r3, #15
 8015a5a:	6879      	ldr	r1, [r7, #4]
 8015a5c:	4613      	mov	r3, r2
 8015a5e:	009b      	lsls	r3, r3, #2
 8015a60:	4413      	add	r3, r2
 8015a62:	009b      	lsls	r3, r3, #2
 8015a64:	440b      	add	r3, r1
 8015a66:	3324      	adds	r3, #36	; 0x24
 8015a68:	881b      	ldrh	r3, [r3, #0]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d117      	bne.n	8015a9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015a6e:	6839      	ldr	r1, [r7, #0]
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	f000 fbb0 	bl	80161d6 <USBD_CtlError>
                  break;
 8015a76:	e054      	b.n	8015b22 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015a78:	7bbb      	ldrb	r3, [r7, #14]
 8015a7a:	f003 020f 	and.w	r2, r3, #15
 8015a7e:	6879      	ldr	r1, [r7, #4]
 8015a80:	4613      	mov	r3, r2
 8015a82:	009b      	lsls	r3, r3, #2
 8015a84:	4413      	add	r3, r2
 8015a86:	009b      	lsls	r3, r3, #2
 8015a88:	440b      	add	r3, r1
 8015a8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015a8e:	881b      	ldrh	r3, [r3, #0]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d104      	bne.n	8015a9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015a94:	6839      	ldr	r1, [r7, #0]
 8015a96:	6878      	ldr	r0, [r7, #4]
 8015a98:	f000 fb9d 	bl	80161d6 <USBD_CtlError>
                  break;
 8015a9c:	e041      	b.n	8015b22 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	da0b      	bge.n	8015abe <USBD_StdEPReq+0x2b2>
 8015aa6:	7bbb      	ldrb	r3, [r7, #14]
 8015aa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015aac:	4613      	mov	r3, r2
 8015aae:	009b      	lsls	r3, r3, #2
 8015ab0:	4413      	add	r3, r2
 8015ab2:	009b      	lsls	r3, r3, #2
 8015ab4:	3310      	adds	r3, #16
 8015ab6:	687a      	ldr	r2, [r7, #4]
 8015ab8:	4413      	add	r3, r2
 8015aba:	3304      	adds	r3, #4
 8015abc:	e00b      	b.n	8015ad6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015abe:	7bbb      	ldrb	r3, [r7, #14]
 8015ac0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ac4:	4613      	mov	r3, r2
 8015ac6:	009b      	lsls	r3, r3, #2
 8015ac8:	4413      	add	r3, r2
 8015aca:	009b      	lsls	r3, r3, #2
 8015acc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015ad0:	687a      	ldr	r2, [r7, #4]
 8015ad2:	4413      	add	r3, r2
 8015ad4:	3304      	adds	r3, #4
 8015ad6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015ad8:	7bbb      	ldrb	r3, [r7, #14]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d002      	beq.n	8015ae4 <USBD_StdEPReq+0x2d8>
 8015ade:	7bbb      	ldrb	r3, [r7, #14]
 8015ae0:	2b80      	cmp	r3, #128	; 0x80
 8015ae2:	d103      	bne.n	8015aec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	601a      	str	r2, [r3, #0]
 8015aea:	e00e      	b.n	8015b0a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015aec:	7bbb      	ldrb	r3, [r7, #14]
 8015aee:	4619      	mov	r1, r3
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f001 f911 	bl	8016d18 <USBD_LL_IsStallEP>
 8015af6:	4603      	mov	r3, r0
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d003      	beq.n	8015b04 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015afc:	68bb      	ldr	r3, [r7, #8]
 8015afe:	2201      	movs	r2, #1
 8015b00:	601a      	str	r2, [r3, #0]
 8015b02:	e002      	b.n	8015b0a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015b04:	68bb      	ldr	r3, [r7, #8]
 8015b06:	2200      	movs	r2, #0
 8015b08:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	2202      	movs	r2, #2
 8015b0e:	4619      	mov	r1, r3
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	f000 fbd1 	bl	80162b8 <USBD_CtlSendData>
              break;
 8015b16:	e004      	b.n	8015b22 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015b18:	6839      	ldr	r1, [r7, #0]
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f000 fb5b 	bl	80161d6 <USBD_CtlError>
              break;
 8015b20:	bf00      	nop
          }
          break;
 8015b22:	e004      	b.n	8015b2e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015b24:	6839      	ldr	r1, [r7, #0]
 8015b26:	6878      	ldr	r0, [r7, #4]
 8015b28:	f000 fb55 	bl	80161d6 <USBD_CtlError>
          break;
 8015b2c:	bf00      	nop
      }
      break;
 8015b2e:	e005      	b.n	8015b3c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015b30:	6839      	ldr	r1, [r7, #0]
 8015b32:	6878      	ldr	r0, [r7, #4]
 8015b34:	f000 fb4f 	bl	80161d6 <USBD_CtlError>
      break;
 8015b38:	e000      	b.n	8015b3c <USBD_StdEPReq+0x330>
      break;
 8015b3a:	bf00      	nop
  }

  return ret;
 8015b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b3e:	4618      	mov	r0, r3
 8015b40:	3710      	adds	r7, #16
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}
	...

08015b48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b084      	sub	sp, #16
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015b52:	2300      	movs	r3, #0
 8015b54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015b56:	2300      	movs	r3, #0
 8015b58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	885b      	ldrh	r3, [r3, #2]
 8015b62:	0a1b      	lsrs	r3, r3, #8
 8015b64:	b29b      	uxth	r3, r3
 8015b66:	3b01      	subs	r3, #1
 8015b68:	2b06      	cmp	r3, #6
 8015b6a:	f200 8128 	bhi.w	8015dbe <USBD_GetDescriptor+0x276>
 8015b6e:	a201      	add	r2, pc, #4	; (adr r2, 8015b74 <USBD_GetDescriptor+0x2c>)
 8015b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b74:	08015b91 	.word	0x08015b91
 8015b78:	08015ba9 	.word	0x08015ba9
 8015b7c:	08015be9 	.word	0x08015be9
 8015b80:	08015dbf 	.word	0x08015dbf
 8015b84:	08015dbf 	.word	0x08015dbf
 8015b88:	08015d5f 	.word	0x08015d5f
 8015b8c:	08015d8b 	.word	0x08015d8b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	687a      	ldr	r2, [r7, #4]
 8015b9a:	7c12      	ldrb	r2, [r2, #16]
 8015b9c:	f107 0108 	add.w	r1, r7, #8
 8015ba0:	4610      	mov	r0, r2
 8015ba2:	4798      	blx	r3
 8015ba4:	60f8      	str	r0, [r7, #12]
      break;
 8015ba6:	e112      	b.n	8015dce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	7c1b      	ldrb	r3, [r3, #16]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d10d      	bne.n	8015bcc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bb8:	f107 0208 	add.w	r2, r7, #8
 8015bbc:	4610      	mov	r0, r2
 8015bbe:	4798      	blx	r3
 8015bc0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	3301      	adds	r3, #1
 8015bc6:	2202      	movs	r2, #2
 8015bc8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015bca:	e100      	b.n	8015dce <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bd4:	f107 0208 	add.w	r2, r7, #8
 8015bd8:	4610      	mov	r0, r2
 8015bda:	4798      	blx	r3
 8015bdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	3301      	adds	r3, #1
 8015be2:	2202      	movs	r2, #2
 8015be4:	701a      	strb	r2, [r3, #0]
      break;
 8015be6:	e0f2      	b.n	8015dce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015be8:	683b      	ldr	r3, [r7, #0]
 8015bea:	885b      	ldrh	r3, [r3, #2]
 8015bec:	b2db      	uxtb	r3, r3
 8015bee:	2b05      	cmp	r3, #5
 8015bf0:	f200 80ac 	bhi.w	8015d4c <USBD_GetDescriptor+0x204>
 8015bf4:	a201      	add	r2, pc, #4	; (adr r2, 8015bfc <USBD_GetDescriptor+0xb4>)
 8015bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bfa:	bf00      	nop
 8015bfc:	08015c15 	.word	0x08015c15
 8015c00:	08015c49 	.word	0x08015c49
 8015c04:	08015c7d 	.word	0x08015c7d
 8015c08:	08015cb1 	.word	0x08015cb1
 8015c0c:	08015ce5 	.word	0x08015ce5
 8015c10:	08015d19 	.word	0x08015d19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c1a:	685b      	ldr	r3, [r3, #4]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d00b      	beq.n	8015c38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c26:	685b      	ldr	r3, [r3, #4]
 8015c28:	687a      	ldr	r2, [r7, #4]
 8015c2a:	7c12      	ldrb	r2, [r2, #16]
 8015c2c:	f107 0108 	add.w	r1, r7, #8
 8015c30:	4610      	mov	r0, r2
 8015c32:	4798      	blx	r3
 8015c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c36:	e091      	b.n	8015d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c38:	6839      	ldr	r1, [r7, #0]
 8015c3a:	6878      	ldr	r0, [r7, #4]
 8015c3c:	f000 facb 	bl	80161d6 <USBD_CtlError>
            err++;
 8015c40:	7afb      	ldrb	r3, [r7, #11]
 8015c42:	3301      	adds	r3, #1
 8015c44:	72fb      	strb	r3, [r7, #11]
          break;
 8015c46:	e089      	b.n	8015d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c4e:	689b      	ldr	r3, [r3, #8]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d00b      	beq.n	8015c6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c5a:	689b      	ldr	r3, [r3, #8]
 8015c5c:	687a      	ldr	r2, [r7, #4]
 8015c5e:	7c12      	ldrb	r2, [r2, #16]
 8015c60:	f107 0108 	add.w	r1, r7, #8
 8015c64:	4610      	mov	r0, r2
 8015c66:	4798      	blx	r3
 8015c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c6a:	e077      	b.n	8015d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c6c:	6839      	ldr	r1, [r7, #0]
 8015c6e:	6878      	ldr	r0, [r7, #4]
 8015c70:	f000 fab1 	bl	80161d6 <USBD_CtlError>
            err++;
 8015c74:	7afb      	ldrb	r3, [r7, #11]
 8015c76:	3301      	adds	r3, #1
 8015c78:	72fb      	strb	r3, [r7, #11]
          break;
 8015c7a:	e06f      	b.n	8015d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c82:	68db      	ldr	r3, [r3, #12]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d00b      	beq.n	8015ca0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c8e:	68db      	ldr	r3, [r3, #12]
 8015c90:	687a      	ldr	r2, [r7, #4]
 8015c92:	7c12      	ldrb	r2, [r2, #16]
 8015c94:	f107 0108 	add.w	r1, r7, #8
 8015c98:	4610      	mov	r0, r2
 8015c9a:	4798      	blx	r3
 8015c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c9e:	e05d      	b.n	8015d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ca0:	6839      	ldr	r1, [r7, #0]
 8015ca2:	6878      	ldr	r0, [r7, #4]
 8015ca4:	f000 fa97 	bl	80161d6 <USBD_CtlError>
            err++;
 8015ca8:	7afb      	ldrb	r3, [r7, #11]
 8015caa:	3301      	adds	r3, #1
 8015cac:	72fb      	strb	r3, [r7, #11]
          break;
 8015cae:	e055      	b.n	8015d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cb6:	691b      	ldr	r3, [r3, #16]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d00b      	beq.n	8015cd4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cc2:	691b      	ldr	r3, [r3, #16]
 8015cc4:	687a      	ldr	r2, [r7, #4]
 8015cc6:	7c12      	ldrb	r2, [r2, #16]
 8015cc8:	f107 0108 	add.w	r1, r7, #8
 8015ccc:	4610      	mov	r0, r2
 8015cce:	4798      	blx	r3
 8015cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cd2:	e043      	b.n	8015d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015cd4:	6839      	ldr	r1, [r7, #0]
 8015cd6:	6878      	ldr	r0, [r7, #4]
 8015cd8:	f000 fa7d 	bl	80161d6 <USBD_CtlError>
            err++;
 8015cdc:	7afb      	ldrb	r3, [r7, #11]
 8015cde:	3301      	adds	r3, #1
 8015ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8015ce2:	e03b      	b.n	8015d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cea:	695b      	ldr	r3, [r3, #20]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d00b      	beq.n	8015d08 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cf6:	695b      	ldr	r3, [r3, #20]
 8015cf8:	687a      	ldr	r2, [r7, #4]
 8015cfa:	7c12      	ldrb	r2, [r2, #16]
 8015cfc:	f107 0108 	add.w	r1, r7, #8
 8015d00:	4610      	mov	r0, r2
 8015d02:	4798      	blx	r3
 8015d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d06:	e029      	b.n	8015d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d08:	6839      	ldr	r1, [r7, #0]
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	f000 fa63 	bl	80161d6 <USBD_CtlError>
            err++;
 8015d10:	7afb      	ldrb	r3, [r7, #11]
 8015d12:	3301      	adds	r3, #1
 8015d14:	72fb      	strb	r3, [r7, #11]
          break;
 8015d16:	e021      	b.n	8015d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d1e:	699b      	ldr	r3, [r3, #24]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d00b      	beq.n	8015d3c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d2a:	699b      	ldr	r3, [r3, #24]
 8015d2c:	687a      	ldr	r2, [r7, #4]
 8015d2e:	7c12      	ldrb	r2, [r2, #16]
 8015d30:	f107 0108 	add.w	r1, r7, #8
 8015d34:	4610      	mov	r0, r2
 8015d36:	4798      	blx	r3
 8015d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d3a:	e00f      	b.n	8015d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d3c:	6839      	ldr	r1, [r7, #0]
 8015d3e:	6878      	ldr	r0, [r7, #4]
 8015d40:	f000 fa49 	bl	80161d6 <USBD_CtlError>
            err++;
 8015d44:	7afb      	ldrb	r3, [r7, #11]
 8015d46:	3301      	adds	r3, #1
 8015d48:	72fb      	strb	r3, [r7, #11]
          break;
 8015d4a:	e007      	b.n	8015d5c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015d4c:	6839      	ldr	r1, [r7, #0]
 8015d4e:	6878      	ldr	r0, [r7, #4]
 8015d50:	f000 fa41 	bl	80161d6 <USBD_CtlError>
          err++;
 8015d54:	7afb      	ldrb	r3, [r7, #11]
 8015d56:	3301      	adds	r3, #1
 8015d58:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015d5a:	bf00      	nop
      }
      break;
 8015d5c:	e037      	b.n	8015dce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	7c1b      	ldrb	r3, [r3, #16]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d109      	bne.n	8015d7a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d6e:	f107 0208 	add.w	r2, r7, #8
 8015d72:	4610      	mov	r0, r2
 8015d74:	4798      	blx	r3
 8015d76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d78:	e029      	b.n	8015dce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015d7a:	6839      	ldr	r1, [r7, #0]
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f000 fa2a 	bl	80161d6 <USBD_CtlError>
        err++;
 8015d82:	7afb      	ldrb	r3, [r7, #11]
 8015d84:	3301      	adds	r3, #1
 8015d86:	72fb      	strb	r3, [r7, #11]
      break;
 8015d88:	e021      	b.n	8015dce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	7c1b      	ldrb	r3, [r3, #16]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d10d      	bne.n	8015dae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d9a:	f107 0208 	add.w	r2, r7, #8
 8015d9e:	4610      	mov	r0, r2
 8015da0:	4798      	blx	r3
 8015da2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	3301      	adds	r3, #1
 8015da8:	2207      	movs	r2, #7
 8015daa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015dac:	e00f      	b.n	8015dce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015dae:	6839      	ldr	r1, [r7, #0]
 8015db0:	6878      	ldr	r0, [r7, #4]
 8015db2:	f000 fa10 	bl	80161d6 <USBD_CtlError>
        err++;
 8015db6:	7afb      	ldrb	r3, [r7, #11]
 8015db8:	3301      	adds	r3, #1
 8015dba:	72fb      	strb	r3, [r7, #11]
      break;
 8015dbc:	e007      	b.n	8015dce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015dbe:	6839      	ldr	r1, [r7, #0]
 8015dc0:	6878      	ldr	r0, [r7, #4]
 8015dc2:	f000 fa08 	bl	80161d6 <USBD_CtlError>
      err++;
 8015dc6:	7afb      	ldrb	r3, [r7, #11]
 8015dc8:	3301      	adds	r3, #1
 8015dca:	72fb      	strb	r3, [r7, #11]
      break;
 8015dcc:	bf00      	nop
  }

  if (err != 0U)
 8015dce:	7afb      	ldrb	r3, [r7, #11]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d11e      	bne.n	8015e12 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015dd4:	683b      	ldr	r3, [r7, #0]
 8015dd6:	88db      	ldrh	r3, [r3, #6]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d016      	beq.n	8015e0a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015ddc:	893b      	ldrh	r3, [r7, #8]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d00e      	beq.n	8015e00 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015de2:	683b      	ldr	r3, [r7, #0]
 8015de4:	88da      	ldrh	r2, [r3, #6]
 8015de6:	893b      	ldrh	r3, [r7, #8]
 8015de8:	4293      	cmp	r3, r2
 8015dea:	bf28      	it	cs
 8015dec:	4613      	movcs	r3, r2
 8015dee:	b29b      	uxth	r3, r3
 8015df0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015df2:	893b      	ldrh	r3, [r7, #8]
 8015df4:	461a      	mov	r2, r3
 8015df6:	68f9      	ldr	r1, [r7, #12]
 8015df8:	6878      	ldr	r0, [r7, #4]
 8015dfa:	f000 fa5d 	bl	80162b8 <USBD_CtlSendData>
 8015dfe:	e009      	b.n	8015e14 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015e00:	6839      	ldr	r1, [r7, #0]
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f000 f9e7 	bl	80161d6 <USBD_CtlError>
 8015e08:	e004      	b.n	8015e14 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015e0a:	6878      	ldr	r0, [r7, #4]
 8015e0c:	f000 faae 	bl	801636c <USBD_CtlSendStatus>
 8015e10:	e000      	b.n	8015e14 <USBD_GetDescriptor+0x2cc>
    return;
 8015e12:	bf00      	nop
  }
}
 8015e14:	3710      	adds	r7, #16
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}
 8015e1a:	bf00      	nop

08015e1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b084      	sub	sp, #16
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
 8015e24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	889b      	ldrh	r3, [r3, #4]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d131      	bne.n	8015e92 <USBD_SetAddress+0x76>
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	88db      	ldrh	r3, [r3, #6]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d12d      	bne.n	8015e92 <USBD_SetAddress+0x76>
 8015e36:	683b      	ldr	r3, [r7, #0]
 8015e38:	885b      	ldrh	r3, [r3, #2]
 8015e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8015e3c:	d829      	bhi.n	8015e92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015e3e:	683b      	ldr	r3, [r7, #0]
 8015e40:	885b      	ldrh	r3, [r3, #2]
 8015e42:	b2db      	uxtb	r3, r3
 8015e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e50:	b2db      	uxtb	r3, r3
 8015e52:	2b03      	cmp	r3, #3
 8015e54:	d104      	bne.n	8015e60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015e56:	6839      	ldr	r1, [r7, #0]
 8015e58:	6878      	ldr	r0, [r7, #4]
 8015e5a:	f000 f9bc 	bl	80161d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e5e:	e01d      	b.n	8015e9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	7bfa      	ldrb	r2, [r7, #15]
 8015e64:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015e68:	7bfb      	ldrb	r3, [r7, #15]
 8015e6a:	4619      	mov	r1, r3
 8015e6c:	6878      	ldr	r0, [r7, #4]
 8015e6e:	f000 ff7f 	bl	8016d70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015e72:	6878      	ldr	r0, [r7, #4]
 8015e74:	f000 fa7a 	bl	801636c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015e78:	7bfb      	ldrb	r3, [r7, #15]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d004      	beq.n	8015e88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	2202      	movs	r2, #2
 8015e82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e86:	e009      	b.n	8015e9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2201      	movs	r2, #1
 8015e8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e90:	e004      	b.n	8015e9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015e92:	6839      	ldr	r1, [r7, #0]
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f000 f99e 	bl	80161d6 <USBD_CtlError>
  }
}
 8015e9a:	bf00      	nop
 8015e9c:	bf00      	nop
 8015e9e:	3710      	adds	r7, #16
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}

08015ea4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b084      	sub	sp, #16
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
 8015eac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015eae:	2300      	movs	r3, #0
 8015eb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	885b      	ldrh	r3, [r3, #2]
 8015eb6:	b2da      	uxtb	r2, r3
 8015eb8:	4b4e      	ldr	r3, [pc, #312]	; (8015ff4 <USBD_SetConfig+0x150>)
 8015eba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015ebc:	4b4d      	ldr	r3, [pc, #308]	; (8015ff4 <USBD_SetConfig+0x150>)
 8015ebe:	781b      	ldrb	r3, [r3, #0]
 8015ec0:	2b01      	cmp	r3, #1
 8015ec2:	d905      	bls.n	8015ed0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015ec4:	6839      	ldr	r1, [r7, #0]
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	f000 f985 	bl	80161d6 <USBD_CtlError>
    return USBD_FAIL;
 8015ecc:	2303      	movs	r3, #3
 8015ece:	e08c      	b.n	8015fea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ed6:	b2db      	uxtb	r3, r3
 8015ed8:	2b02      	cmp	r3, #2
 8015eda:	d002      	beq.n	8015ee2 <USBD_SetConfig+0x3e>
 8015edc:	2b03      	cmp	r3, #3
 8015ede:	d029      	beq.n	8015f34 <USBD_SetConfig+0x90>
 8015ee0:	e075      	b.n	8015fce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015ee2:	4b44      	ldr	r3, [pc, #272]	; (8015ff4 <USBD_SetConfig+0x150>)
 8015ee4:	781b      	ldrb	r3, [r3, #0]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d020      	beq.n	8015f2c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015eea:	4b42      	ldr	r3, [pc, #264]	; (8015ff4 <USBD_SetConfig+0x150>)
 8015eec:	781b      	ldrb	r3, [r3, #0]
 8015eee:	461a      	mov	r2, r3
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015ef4:	4b3f      	ldr	r3, [pc, #252]	; (8015ff4 <USBD_SetConfig+0x150>)
 8015ef6:	781b      	ldrb	r3, [r3, #0]
 8015ef8:	4619      	mov	r1, r3
 8015efa:	6878      	ldr	r0, [r7, #4]
 8015efc:	f7fe ffe7 	bl	8014ece <USBD_SetClassConfig>
 8015f00:	4603      	mov	r3, r0
 8015f02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015f04:	7bfb      	ldrb	r3, [r7, #15]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d008      	beq.n	8015f1c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015f0a:	6839      	ldr	r1, [r7, #0]
 8015f0c:	6878      	ldr	r0, [r7, #4]
 8015f0e:	f000 f962 	bl	80161d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	2202      	movs	r2, #2
 8015f16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f1a:	e065      	b.n	8015fe8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f000 fa25 	bl	801636c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	2203      	movs	r2, #3
 8015f26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015f2a:	e05d      	b.n	8015fe8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f000 fa1d 	bl	801636c <USBD_CtlSendStatus>
      break;
 8015f32:	e059      	b.n	8015fe8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015f34:	4b2f      	ldr	r3, [pc, #188]	; (8015ff4 <USBD_SetConfig+0x150>)
 8015f36:	781b      	ldrb	r3, [r3, #0]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d112      	bne.n	8015f62 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	2202      	movs	r2, #2
 8015f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015f44:	4b2b      	ldr	r3, [pc, #172]	; (8015ff4 <USBD_SetConfig+0x150>)
 8015f46:	781b      	ldrb	r3, [r3, #0]
 8015f48:	461a      	mov	r2, r3
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015f4e:	4b29      	ldr	r3, [pc, #164]	; (8015ff4 <USBD_SetConfig+0x150>)
 8015f50:	781b      	ldrb	r3, [r3, #0]
 8015f52:	4619      	mov	r1, r3
 8015f54:	6878      	ldr	r0, [r7, #4]
 8015f56:	f7fe ffd6 	bl	8014f06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f000 fa06 	bl	801636c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f60:	e042      	b.n	8015fe8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015f62:	4b24      	ldr	r3, [pc, #144]	; (8015ff4 <USBD_SetConfig+0x150>)
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	461a      	mov	r2, r3
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	685b      	ldr	r3, [r3, #4]
 8015f6c:	429a      	cmp	r2, r3
 8015f6e:	d02a      	beq.n	8015fc6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	685b      	ldr	r3, [r3, #4]
 8015f74:	b2db      	uxtb	r3, r3
 8015f76:	4619      	mov	r1, r3
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f7fe ffc4 	bl	8014f06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015f7e:	4b1d      	ldr	r3, [pc, #116]	; (8015ff4 <USBD_SetConfig+0x150>)
 8015f80:	781b      	ldrb	r3, [r3, #0]
 8015f82:	461a      	mov	r2, r3
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015f88:	4b1a      	ldr	r3, [pc, #104]	; (8015ff4 <USBD_SetConfig+0x150>)
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	4619      	mov	r1, r3
 8015f8e:	6878      	ldr	r0, [r7, #4]
 8015f90:	f7fe ff9d 	bl	8014ece <USBD_SetClassConfig>
 8015f94:	4603      	mov	r3, r0
 8015f96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015f98:	7bfb      	ldrb	r3, [r7, #15]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d00f      	beq.n	8015fbe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015f9e:	6839      	ldr	r1, [r7, #0]
 8015fa0:	6878      	ldr	r0, [r7, #4]
 8015fa2:	f000 f918 	bl	80161d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	685b      	ldr	r3, [r3, #4]
 8015faa:	b2db      	uxtb	r3, r3
 8015fac:	4619      	mov	r1, r3
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f7fe ffa9 	bl	8014f06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	2202      	movs	r2, #2
 8015fb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015fbc:	e014      	b.n	8015fe8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015fbe:	6878      	ldr	r0, [r7, #4]
 8015fc0:	f000 f9d4 	bl	801636c <USBD_CtlSendStatus>
      break;
 8015fc4:	e010      	b.n	8015fe8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015fc6:	6878      	ldr	r0, [r7, #4]
 8015fc8:	f000 f9d0 	bl	801636c <USBD_CtlSendStatus>
      break;
 8015fcc:	e00c      	b.n	8015fe8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015fce:	6839      	ldr	r1, [r7, #0]
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	f000 f900 	bl	80161d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015fd6:	4b07      	ldr	r3, [pc, #28]	; (8015ff4 <USBD_SetConfig+0x150>)
 8015fd8:	781b      	ldrb	r3, [r3, #0]
 8015fda:	4619      	mov	r1, r3
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	f7fe ff92 	bl	8014f06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015fe2:	2303      	movs	r3, #3
 8015fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8015fe6:	bf00      	nop
  }

  return ret;
 8015fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fea:	4618      	mov	r0, r3
 8015fec:	3710      	adds	r7, #16
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}
 8015ff2:	bf00      	nop
 8015ff4:	20001e04 	.word	0x20001e04

08015ff8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b082      	sub	sp, #8
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
 8016000:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016002:	683b      	ldr	r3, [r7, #0]
 8016004:	88db      	ldrh	r3, [r3, #6]
 8016006:	2b01      	cmp	r3, #1
 8016008:	d004      	beq.n	8016014 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801600a:	6839      	ldr	r1, [r7, #0]
 801600c:	6878      	ldr	r0, [r7, #4]
 801600e:	f000 f8e2 	bl	80161d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016012:	e023      	b.n	801605c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801601a:	b2db      	uxtb	r3, r3
 801601c:	2b02      	cmp	r3, #2
 801601e:	dc02      	bgt.n	8016026 <USBD_GetConfig+0x2e>
 8016020:	2b00      	cmp	r3, #0
 8016022:	dc03      	bgt.n	801602c <USBD_GetConfig+0x34>
 8016024:	e015      	b.n	8016052 <USBD_GetConfig+0x5a>
 8016026:	2b03      	cmp	r3, #3
 8016028:	d00b      	beq.n	8016042 <USBD_GetConfig+0x4a>
 801602a:	e012      	b.n	8016052 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2200      	movs	r2, #0
 8016030:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	3308      	adds	r3, #8
 8016036:	2201      	movs	r2, #1
 8016038:	4619      	mov	r1, r3
 801603a:	6878      	ldr	r0, [r7, #4]
 801603c:	f000 f93c 	bl	80162b8 <USBD_CtlSendData>
        break;
 8016040:	e00c      	b.n	801605c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	3304      	adds	r3, #4
 8016046:	2201      	movs	r2, #1
 8016048:	4619      	mov	r1, r3
 801604a:	6878      	ldr	r0, [r7, #4]
 801604c:	f000 f934 	bl	80162b8 <USBD_CtlSendData>
        break;
 8016050:	e004      	b.n	801605c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016052:	6839      	ldr	r1, [r7, #0]
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f000 f8be 	bl	80161d6 <USBD_CtlError>
        break;
 801605a:	bf00      	nop
}
 801605c:	bf00      	nop
 801605e:	3708      	adds	r7, #8
 8016060:	46bd      	mov	sp, r7
 8016062:	bd80      	pop	{r7, pc}

08016064 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b082      	sub	sp, #8
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
 801606c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016074:	b2db      	uxtb	r3, r3
 8016076:	3b01      	subs	r3, #1
 8016078:	2b02      	cmp	r3, #2
 801607a:	d81e      	bhi.n	80160ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801607c:	683b      	ldr	r3, [r7, #0]
 801607e:	88db      	ldrh	r3, [r3, #6]
 8016080:	2b02      	cmp	r3, #2
 8016082:	d004      	beq.n	801608e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016084:	6839      	ldr	r1, [r7, #0]
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	f000 f8a5 	bl	80161d6 <USBD_CtlError>
        break;
 801608c:	e01a      	b.n	80160c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	2201      	movs	r2, #1
 8016092:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801609a:	2b00      	cmp	r3, #0
 801609c:	d005      	beq.n	80160aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	68db      	ldr	r3, [r3, #12]
 80160a2:	f043 0202 	orr.w	r2, r3, #2
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	330c      	adds	r3, #12
 80160ae:	2202      	movs	r2, #2
 80160b0:	4619      	mov	r1, r3
 80160b2:	6878      	ldr	r0, [r7, #4]
 80160b4:	f000 f900 	bl	80162b8 <USBD_CtlSendData>
      break;
 80160b8:	e004      	b.n	80160c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80160ba:	6839      	ldr	r1, [r7, #0]
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f000 f88a 	bl	80161d6 <USBD_CtlError>
      break;
 80160c2:	bf00      	nop
  }
}
 80160c4:	bf00      	nop
 80160c6:	3708      	adds	r7, #8
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd80      	pop	{r7, pc}

080160cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b082      	sub	sp, #8
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
 80160d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	885b      	ldrh	r3, [r3, #2]
 80160da:	2b01      	cmp	r3, #1
 80160dc:	d107      	bne.n	80160ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	2201      	movs	r2, #1
 80160e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f000 f940 	bl	801636c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80160ec:	e013      	b.n	8016116 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80160ee:	683b      	ldr	r3, [r7, #0]
 80160f0:	885b      	ldrh	r3, [r3, #2]
 80160f2:	2b02      	cmp	r3, #2
 80160f4:	d10b      	bne.n	801610e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	889b      	ldrh	r3, [r3, #4]
 80160fa:	0a1b      	lsrs	r3, r3, #8
 80160fc:	b29b      	uxth	r3, r3
 80160fe:	b2da      	uxtb	r2, r3
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016106:	6878      	ldr	r0, [r7, #4]
 8016108:	f000 f930 	bl	801636c <USBD_CtlSendStatus>
}
 801610c:	e003      	b.n	8016116 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801610e:	6839      	ldr	r1, [r7, #0]
 8016110:	6878      	ldr	r0, [r7, #4]
 8016112:	f000 f860 	bl	80161d6 <USBD_CtlError>
}
 8016116:	bf00      	nop
 8016118:	3708      	adds	r7, #8
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}

0801611e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801611e:	b580      	push	{r7, lr}
 8016120:	b082      	sub	sp, #8
 8016122:	af00      	add	r7, sp, #0
 8016124:	6078      	str	r0, [r7, #4]
 8016126:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801612e:	b2db      	uxtb	r3, r3
 8016130:	3b01      	subs	r3, #1
 8016132:	2b02      	cmp	r3, #2
 8016134:	d80b      	bhi.n	801614e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	885b      	ldrh	r3, [r3, #2]
 801613a:	2b01      	cmp	r3, #1
 801613c:	d10c      	bne.n	8016158 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	2200      	movs	r2, #0
 8016142:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	f000 f910 	bl	801636c <USBD_CtlSendStatus>
      }
      break;
 801614c:	e004      	b.n	8016158 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801614e:	6839      	ldr	r1, [r7, #0]
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f000 f840 	bl	80161d6 <USBD_CtlError>
      break;
 8016156:	e000      	b.n	801615a <USBD_ClrFeature+0x3c>
      break;
 8016158:	bf00      	nop
  }
}
 801615a:	bf00      	nop
 801615c:	3708      	adds	r7, #8
 801615e:	46bd      	mov	sp, r7
 8016160:	bd80      	pop	{r7, pc}

08016162 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016162:	b580      	push	{r7, lr}
 8016164:	b084      	sub	sp, #16
 8016166:	af00      	add	r7, sp, #0
 8016168:	6078      	str	r0, [r7, #4]
 801616a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	781a      	ldrb	r2, [r3, #0]
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	3301      	adds	r3, #1
 801617c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	781a      	ldrb	r2, [r3, #0]
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	3301      	adds	r3, #1
 801618a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801618c:	68f8      	ldr	r0, [r7, #12]
 801618e:	f7ff fa41 	bl	8015614 <SWAPBYTE>
 8016192:	4603      	mov	r3, r0
 8016194:	461a      	mov	r2, r3
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	3301      	adds	r3, #1
 801619e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	3301      	adds	r3, #1
 80161a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80161a6:	68f8      	ldr	r0, [r7, #12]
 80161a8:	f7ff fa34 	bl	8015614 <SWAPBYTE>
 80161ac:	4603      	mov	r3, r0
 80161ae:	461a      	mov	r2, r3
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	3301      	adds	r3, #1
 80161b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	3301      	adds	r3, #1
 80161be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80161c0:	68f8      	ldr	r0, [r7, #12]
 80161c2:	f7ff fa27 	bl	8015614 <SWAPBYTE>
 80161c6:	4603      	mov	r3, r0
 80161c8:	461a      	mov	r2, r3
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	80da      	strh	r2, [r3, #6]
}
 80161ce:	bf00      	nop
 80161d0:	3710      	adds	r7, #16
 80161d2:	46bd      	mov	sp, r7
 80161d4:	bd80      	pop	{r7, pc}

080161d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161d6:	b580      	push	{r7, lr}
 80161d8:	b082      	sub	sp, #8
 80161da:	af00      	add	r7, sp, #0
 80161dc:	6078      	str	r0, [r7, #4]
 80161de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80161e0:	2180      	movs	r1, #128	; 0x80
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f000 fd5a 	bl	8016c9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80161e8:	2100      	movs	r1, #0
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f000 fd56 	bl	8016c9c <USBD_LL_StallEP>
}
 80161f0:	bf00      	nop
 80161f2:	3708      	adds	r7, #8
 80161f4:	46bd      	mov	sp, r7
 80161f6:	bd80      	pop	{r7, pc}

080161f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b086      	sub	sp, #24
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	60f8      	str	r0, [r7, #12]
 8016200:	60b9      	str	r1, [r7, #8]
 8016202:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016204:	2300      	movs	r3, #0
 8016206:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	2b00      	cmp	r3, #0
 801620c:	d036      	beq.n	801627c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016212:	6938      	ldr	r0, [r7, #16]
 8016214:	f000 f836 	bl	8016284 <USBD_GetLen>
 8016218:	4603      	mov	r3, r0
 801621a:	3301      	adds	r3, #1
 801621c:	b29b      	uxth	r3, r3
 801621e:	005b      	lsls	r3, r3, #1
 8016220:	b29a      	uxth	r2, r3
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016226:	7dfb      	ldrb	r3, [r7, #23]
 8016228:	68ba      	ldr	r2, [r7, #8]
 801622a:	4413      	add	r3, r2
 801622c:	687a      	ldr	r2, [r7, #4]
 801622e:	7812      	ldrb	r2, [r2, #0]
 8016230:	701a      	strb	r2, [r3, #0]
  idx++;
 8016232:	7dfb      	ldrb	r3, [r7, #23]
 8016234:	3301      	adds	r3, #1
 8016236:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016238:	7dfb      	ldrb	r3, [r7, #23]
 801623a:	68ba      	ldr	r2, [r7, #8]
 801623c:	4413      	add	r3, r2
 801623e:	2203      	movs	r2, #3
 8016240:	701a      	strb	r2, [r3, #0]
  idx++;
 8016242:	7dfb      	ldrb	r3, [r7, #23]
 8016244:	3301      	adds	r3, #1
 8016246:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016248:	e013      	b.n	8016272 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801624a:	7dfb      	ldrb	r3, [r7, #23]
 801624c:	68ba      	ldr	r2, [r7, #8]
 801624e:	4413      	add	r3, r2
 8016250:	693a      	ldr	r2, [r7, #16]
 8016252:	7812      	ldrb	r2, [r2, #0]
 8016254:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016256:	693b      	ldr	r3, [r7, #16]
 8016258:	3301      	adds	r3, #1
 801625a:	613b      	str	r3, [r7, #16]
    idx++;
 801625c:	7dfb      	ldrb	r3, [r7, #23]
 801625e:	3301      	adds	r3, #1
 8016260:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016262:	7dfb      	ldrb	r3, [r7, #23]
 8016264:	68ba      	ldr	r2, [r7, #8]
 8016266:	4413      	add	r3, r2
 8016268:	2200      	movs	r2, #0
 801626a:	701a      	strb	r2, [r3, #0]
    idx++;
 801626c:	7dfb      	ldrb	r3, [r7, #23]
 801626e:	3301      	adds	r3, #1
 8016270:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016272:	693b      	ldr	r3, [r7, #16]
 8016274:	781b      	ldrb	r3, [r3, #0]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d1e7      	bne.n	801624a <USBD_GetString+0x52>
 801627a:	e000      	b.n	801627e <USBD_GetString+0x86>
    return;
 801627c:	bf00      	nop
  }
}
 801627e:	3718      	adds	r7, #24
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}

08016284 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016284:	b480      	push	{r7}
 8016286:	b085      	sub	sp, #20
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801628c:	2300      	movs	r3, #0
 801628e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016294:	e005      	b.n	80162a2 <USBD_GetLen+0x1e>
  {
    len++;
 8016296:	7bfb      	ldrb	r3, [r7, #15]
 8016298:	3301      	adds	r3, #1
 801629a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801629c:	68bb      	ldr	r3, [r7, #8]
 801629e:	3301      	adds	r3, #1
 80162a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80162a2:	68bb      	ldr	r3, [r7, #8]
 80162a4:	781b      	ldrb	r3, [r3, #0]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d1f5      	bne.n	8016296 <USBD_GetLen+0x12>
  }

  return len;
 80162aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	3714      	adds	r7, #20
 80162b0:	46bd      	mov	sp, r7
 80162b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b6:	4770      	bx	lr

080162b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b084      	sub	sp, #16
 80162bc:	af00      	add	r7, sp, #0
 80162be:	60f8      	str	r0, [r7, #12]
 80162c0:	60b9      	str	r1, [r7, #8]
 80162c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	2202      	movs	r2, #2
 80162c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	687a      	ldr	r2, [r7, #4]
 80162d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	687a      	ldr	r2, [r7, #4]
 80162d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	68ba      	ldr	r2, [r7, #8]
 80162dc:	2100      	movs	r1, #0
 80162de:	68f8      	ldr	r0, [r7, #12]
 80162e0:	f000 fd65 	bl	8016dae <USBD_LL_Transmit>

  return USBD_OK;
 80162e4:	2300      	movs	r3, #0
}
 80162e6:	4618      	mov	r0, r3
 80162e8:	3710      	adds	r7, #16
 80162ea:	46bd      	mov	sp, r7
 80162ec:	bd80      	pop	{r7, pc}

080162ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80162ee:	b580      	push	{r7, lr}
 80162f0:	b084      	sub	sp, #16
 80162f2:	af00      	add	r7, sp, #0
 80162f4:	60f8      	str	r0, [r7, #12]
 80162f6:	60b9      	str	r1, [r7, #8]
 80162f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	68ba      	ldr	r2, [r7, #8]
 80162fe:	2100      	movs	r1, #0
 8016300:	68f8      	ldr	r0, [r7, #12]
 8016302:	f000 fd54 	bl	8016dae <USBD_LL_Transmit>

  return USBD_OK;
 8016306:	2300      	movs	r3, #0
}
 8016308:	4618      	mov	r0, r3
 801630a:	3710      	adds	r7, #16
 801630c:	46bd      	mov	sp, r7
 801630e:	bd80      	pop	{r7, pc}

08016310 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b084      	sub	sp, #16
 8016314:	af00      	add	r7, sp, #0
 8016316:	60f8      	str	r0, [r7, #12]
 8016318:	60b9      	str	r1, [r7, #8]
 801631a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	2203      	movs	r2, #3
 8016320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	687a      	ldr	r2, [r7, #4]
 8016328:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	687a      	ldr	r2, [r7, #4]
 8016330:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	68ba      	ldr	r2, [r7, #8]
 8016338:	2100      	movs	r1, #0
 801633a:	68f8      	ldr	r0, [r7, #12]
 801633c:	f000 fd58 	bl	8016df0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016340:	2300      	movs	r3, #0
}
 8016342:	4618      	mov	r0, r3
 8016344:	3710      	adds	r7, #16
 8016346:	46bd      	mov	sp, r7
 8016348:	bd80      	pop	{r7, pc}

0801634a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801634a:	b580      	push	{r7, lr}
 801634c:	b084      	sub	sp, #16
 801634e:	af00      	add	r7, sp, #0
 8016350:	60f8      	str	r0, [r7, #12]
 8016352:	60b9      	str	r1, [r7, #8]
 8016354:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	68ba      	ldr	r2, [r7, #8]
 801635a:	2100      	movs	r1, #0
 801635c:	68f8      	ldr	r0, [r7, #12]
 801635e:	f000 fd47 	bl	8016df0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016362:	2300      	movs	r3, #0
}
 8016364:	4618      	mov	r0, r3
 8016366:	3710      	adds	r7, #16
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}

0801636c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b082      	sub	sp, #8
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	2204      	movs	r2, #4
 8016378:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801637c:	2300      	movs	r3, #0
 801637e:	2200      	movs	r2, #0
 8016380:	2100      	movs	r1, #0
 8016382:	6878      	ldr	r0, [r7, #4]
 8016384:	f000 fd13 	bl	8016dae <USBD_LL_Transmit>

  return USBD_OK;
 8016388:	2300      	movs	r3, #0
}
 801638a:	4618      	mov	r0, r3
 801638c:	3708      	adds	r7, #8
 801638e:	46bd      	mov	sp, r7
 8016390:	bd80      	pop	{r7, pc}

08016392 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016392:	b580      	push	{r7, lr}
 8016394:	b082      	sub	sp, #8
 8016396:	af00      	add	r7, sp, #0
 8016398:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2205      	movs	r2, #5
 801639e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80163a2:	2300      	movs	r3, #0
 80163a4:	2200      	movs	r2, #0
 80163a6:	2100      	movs	r1, #0
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f000 fd21 	bl	8016df0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80163ae:	2300      	movs	r3, #0
}
 80163b0:	4618      	mov	r0, r3
 80163b2:	3708      	adds	r7, #8
 80163b4:	46bd      	mov	sp, r7
 80163b6:	bd80      	pop	{r7, pc}

080163b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80163b8:	b480      	push	{r7}
 80163ba:	b087      	sub	sp, #28
 80163bc:	af00      	add	r7, sp, #0
 80163be:	60f8      	str	r0, [r7, #12]
 80163c0:	60b9      	str	r1, [r7, #8]
 80163c2:	4613      	mov	r3, r2
 80163c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80163c6:	2301      	movs	r3, #1
 80163c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80163ca:	2300      	movs	r3, #0
 80163cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80163ce:	4b1f      	ldr	r3, [pc, #124]	; (801644c <FATFS_LinkDriverEx+0x94>)
 80163d0:	7a5b      	ldrb	r3, [r3, #9]
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d131      	bne.n	801643c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80163d8:	4b1c      	ldr	r3, [pc, #112]	; (801644c <FATFS_LinkDriverEx+0x94>)
 80163da:	7a5b      	ldrb	r3, [r3, #9]
 80163dc:	b2db      	uxtb	r3, r3
 80163de:	461a      	mov	r2, r3
 80163e0:	4b1a      	ldr	r3, [pc, #104]	; (801644c <FATFS_LinkDriverEx+0x94>)
 80163e2:	2100      	movs	r1, #0
 80163e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80163e6:	4b19      	ldr	r3, [pc, #100]	; (801644c <FATFS_LinkDriverEx+0x94>)
 80163e8:	7a5b      	ldrb	r3, [r3, #9]
 80163ea:	b2db      	uxtb	r3, r3
 80163ec:	4a17      	ldr	r2, [pc, #92]	; (801644c <FATFS_LinkDriverEx+0x94>)
 80163ee:	009b      	lsls	r3, r3, #2
 80163f0:	4413      	add	r3, r2
 80163f2:	68fa      	ldr	r2, [r7, #12]
 80163f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80163f6:	4b15      	ldr	r3, [pc, #84]	; (801644c <FATFS_LinkDriverEx+0x94>)
 80163f8:	7a5b      	ldrb	r3, [r3, #9]
 80163fa:	b2db      	uxtb	r3, r3
 80163fc:	461a      	mov	r2, r3
 80163fe:	4b13      	ldr	r3, [pc, #76]	; (801644c <FATFS_LinkDriverEx+0x94>)
 8016400:	4413      	add	r3, r2
 8016402:	79fa      	ldrb	r2, [r7, #7]
 8016404:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016406:	4b11      	ldr	r3, [pc, #68]	; (801644c <FATFS_LinkDriverEx+0x94>)
 8016408:	7a5b      	ldrb	r3, [r3, #9]
 801640a:	b2db      	uxtb	r3, r3
 801640c:	1c5a      	adds	r2, r3, #1
 801640e:	b2d1      	uxtb	r1, r2
 8016410:	4a0e      	ldr	r2, [pc, #56]	; (801644c <FATFS_LinkDriverEx+0x94>)
 8016412:	7251      	strb	r1, [r2, #9]
 8016414:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016416:	7dbb      	ldrb	r3, [r7, #22]
 8016418:	3330      	adds	r3, #48	; 0x30
 801641a:	b2da      	uxtb	r2, r3
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	3301      	adds	r3, #1
 8016424:	223a      	movs	r2, #58	; 0x3a
 8016426:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016428:	68bb      	ldr	r3, [r7, #8]
 801642a:	3302      	adds	r3, #2
 801642c:	222f      	movs	r2, #47	; 0x2f
 801642e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016430:	68bb      	ldr	r3, [r7, #8]
 8016432:	3303      	adds	r3, #3
 8016434:	2200      	movs	r2, #0
 8016436:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016438:	2300      	movs	r3, #0
 801643a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801643c:	7dfb      	ldrb	r3, [r7, #23]
}
 801643e:	4618      	mov	r0, r3
 8016440:	371c      	adds	r7, #28
 8016442:	46bd      	mov	sp, r7
 8016444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016448:	4770      	bx	lr
 801644a:	bf00      	nop
 801644c:	20001e08 	.word	0x20001e08

08016450 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b082      	sub	sp, #8
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
 8016458:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801645a:	2200      	movs	r2, #0
 801645c:	6839      	ldr	r1, [r7, #0]
 801645e:	6878      	ldr	r0, [r7, #4]
 8016460:	f7ff ffaa 	bl	80163b8 <FATFS_LinkDriverEx>
 8016464:	4603      	mov	r3, r0
}
 8016466:	4618      	mov	r0, r3
 8016468:	3708      	adds	r7, #8
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}
	...

08016470 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016474:	2200      	movs	r2, #0
 8016476:	4913      	ldr	r1, [pc, #76]	; (80164c4 <MX_USB_DEVICE_Init+0x54>)
 8016478:	4813      	ldr	r0, [pc, #76]	; (80164c8 <MX_USB_DEVICE_Init+0x58>)
 801647a:	f7fe fcab 	bl	8014dd4 <USBD_Init>
 801647e:	4603      	mov	r3, r0
 8016480:	2b00      	cmp	r3, #0
 8016482:	d001      	beq.n	8016488 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016484:	f7eb f99a 	bl	80017bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016488:	4910      	ldr	r1, [pc, #64]	; (80164cc <MX_USB_DEVICE_Init+0x5c>)
 801648a:	480f      	ldr	r0, [pc, #60]	; (80164c8 <MX_USB_DEVICE_Init+0x58>)
 801648c:	f7fe fcd2 	bl	8014e34 <USBD_RegisterClass>
 8016490:	4603      	mov	r3, r0
 8016492:	2b00      	cmp	r3, #0
 8016494:	d001      	beq.n	801649a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016496:	f7eb f991 	bl	80017bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801649a:	490d      	ldr	r1, [pc, #52]	; (80164d0 <MX_USB_DEVICE_Init+0x60>)
 801649c:	480a      	ldr	r0, [pc, #40]	; (80164c8 <MX_USB_DEVICE_Init+0x58>)
 801649e:	f7fe fc09 	bl	8014cb4 <USBD_CDC_RegisterInterface>
 80164a2:	4603      	mov	r3, r0
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d001      	beq.n	80164ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80164a8:	f7eb f988 	bl	80017bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80164ac:	4806      	ldr	r0, [pc, #24]	; (80164c8 <MX_USB_DEVICE_Init+0x58>)
 80164ae:	f7fe fcf7 	bl	8014ea0 <USBD_Start>
 80164b2:	4603      	mov	r3, r0
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d001      	beq.n	80164bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80164b8:	f7eb f980 	bl	80017bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80164bc:	f7f3 f84c 	bl	8009558 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80164c0:	bf00      	nop
 80164c2:	bd80      	pop	{r7, pc}
 80164c4:	200000b0 	.word	0x200000b0
 80164c8:	20001e14 	.word	0x20001e14
 80164cc:	2000001c 	.word	0x2000001c
 80164d0:	2000009c 	.word	0x2000009c

080164d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80164d8:	2200      	movs	r2, #0
 80164da:	4905      	ldr	r1, [pc, #20]	; (80164f0 <CDC_Init_FS+0x1c>)
 80164dc:	4805      	ldr	r0, [pc, #20]	; (80164f4 <CDC_Init_FS+0x20>)
 80164de:	f7fe fc03 	bl	8014ce8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80164e2:	4905      	ldr	r1, [pc, #20]	; (80164f8 <CDC_Init_FS+0x24>)
 80164e4:	4803      	ldr	r0, [pc, #12]	; (80164f4 <CDC_Init_FS+0x20>)
 80164e6:	f7fe fc21 	bl	8014d2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80164ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80164ec:	4618      	mov	r0, r3
 80164ee:	bd80      	pop	{r7, pc}
 80164f0:	200028f0 	.word	0x200028f0
 80164f4:	20001e14 	.word	0x20001e14
 80164f8:	200020f0 	.word	0x200020f0

080164fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80164fc:	b480      	push	{r7}
 80164fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016500:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016502:	4618      	mov	r0, r3
 8016504:	46bd      	mov	sp, r7
 8016506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650a:	4770      	bx	lr

0801650c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801650c:	b480      	push	{r7}
 801650e:	b083      	sub	sp, #12
 8016510:	af00      	add	r7, sp, #0
 8016512:	4603      	mov	r3, r0
 8016514:	6039      	str	r1, [r7, #0]
 8016516:	71fb      	strb	r3, [r7, #7]
 8016518:	4613      	mov	r3, r2
 801651a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801651c:	79fb      	ldrb	r3, [r7, #7]
 801651e:	2b23      	cmp	r3, #35	; 0x23
 8016520:	d84a      	bhi.n	80165b8 <CDC_Control_FS+0xac>
 8016522:	a201      	add	r2, pc, #4	; (adr r2, 8016528 <CDC_Control_FS+0x1c>)
 8016524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016528:	080165b9 	.word	0x080165b9
 801652c:	080165b9 	.word	0x080165b9
 8016530:	080165b9 	.word	0x080165b9
 8016534:	080165b9 	.word	0x080165b9
 8016538:	080165b9 	.word	0x080165b9
 801653c:	080165b9 	.word	0x080165b9
 8016540:	080165b9 	.word	0x080165b9
 8016544:	080165b9 	.word	0x080165b9
 8016548:	080165b9 	.word	0x080165b9
 801654c:	080165b9 	.word	0x080165b9
 8016550:	080165b9 	.word	0x080165b9
 8016554:	080165b9 	.word	0x080165b9
 8016558:	080165b9 	.word	0x080165b9
 801655c:	080165b9 	.word	0x080165b9
 8016560:	080165b9 	.word	0x080165b9
 8016564:	080165b9 	.word	0x080165b9
 8016568:	080165b9 	.word	0x080165b9
 801656c:	080165b9 	.word	0x080165b9
 8016570:	080165b9 	.word	0x080165b9
 8016574:	080165b9 	.word	0x080165b9
 8016578:	080165b9 	.word	0x080165b9
 801657c:	080165b9 	.word	0x080165b9
 8016580:	080165b9 	.word	0x080165b9
 8016584:	080165b9 	.word	0x080165b9
 8016588:	080165b9 	.word	0x080165b9
 801658c:	080165b9 	.word	0x080165b9
 8016590:	080165b9 	.word	0x080165b9
 8016594:	080165b9 	.word	0x080165b9
 8016598:	080165b9 	.word	0x080165b9
 801659c:	080165b9 	.word	0x080165b9
 80165a0:	080165b9 	.word	0x080165b9
 80165a4:	080165b9 	.word	0x080165b9
 80165a8:	080165b9 	.word	0x080165b9
 80165ac:	080165b9 	.word	0x080165b9
 80165b0:	080165b9 	.word	0x080165b9
 80165b4:	080165b9 	.word	0x080165b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80165b8:	bf00      	nop
  }

  return (USBD_OK);
 80165ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80165bc:	4618      	mov	r0, r3
 80165be:	370c      	adds	r7, #12
 80165c0:	46bd      	mov	sp, r7
 80165c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c6:	4770      	bx	lr

080165c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b082      	sub	sp, #8
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
 80165d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80165d2:	6879      	ldr	r1, [r7, #4]
 80165d4:	4805      	ldr	r0, [pc, #20]	; (80165ec <CDC_Receive_FS+0x24>)
 80165d6:	f7fe fba9 	bl	8014d2c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80165da:	4804      	ldr	r0, [pc, #16]	; (80165ec <CDC_Receive_FS+0x24>)
 80165dc:	f7fe fbc4 	bl	8014d68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80165e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3708      	adds	r7, #8
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}
 80165ea:	bf00      	nop
 80165ec:	20001e14 	.word	0x20001e14

080165f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80165f0:	b480      	push	{r7}
 80165f2:	b087      	sub	sp, #28
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	60f8      	str	r0, [r7, #12]
 80165f8:	60b9      	str	r1, [r7, #8]
 80165fa:	4613      	mov	r3, r2
 80165fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80165fe:	2300      	movs	r3, #0
 8016600:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016602:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016606:	4618      	mov	r0, r3
 8016608:	371c      	adds	r7, #28
 801660a:	46bd      	mov	sp, r7
 801660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016610:	4770      	bx	lr
	...

08016614 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016614:	b480      	push	{r7}
 8016616:	b083      	sub	sp, #12
 8016618:	af00      	add	r7, sp, #0
 801661a:	4603      	mov	r3, r0
 801661c:	6039      	str	r1, [r7, #0]
 801661e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016620:	683b      	ldr	r3, [r7, #0]
 8016622:	2212      	movs	r2, #18
 8016624:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016626:	4b03      	ldr	r3, [pc, #12]	; (8016634 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016628:	4618      	mov	r0, r3
 801662a:	370c      	adds	r7, #12
 801662c:	46bd      	mov	sp, r7
 801662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016632:	4770      	bx	lr
 8016634:	200000cc 	.word	0x200000cc

08016638 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016638:	b480      	push	{r7}
 801663a:	b083      	sub	sp, #12
 801663c:	af00      	add	r7, sp, #0
 801663e:	4603      	mov	r3, r0
 8016640:	6039      	str	r1, [r7, #0]
 8016642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016644:	683b      	ldr	r3, [r7, #0]
 8016646:	2204      	movs	r2, #4
 8016648:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801664a:	4b03      	ldr	r3, [pc, #12]	; (8016658 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801664c:	4618      	mov	r0, r3
 801664e:	370c      	adds	r7, #12
 8016650:	46bd      	mov	sp, r7
 8016652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016656:	4770      	bx	lr
 8016658:	200000e0 	.word	0x200000e0

0801665c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b082      	sub	sp, #8
 8016660:	af00      	add	r7, sp, #0
 8016662:	4603      	mov	r3, r0
 8016664:	6039      	str	r1, [r7, #0]
 8016666:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016668:	79fb      	ldrb	r3, [r7, #7]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d105      	bne.n	801667a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801666e:	683a      	ldr	r2, [r7, #0]
 8016670:	4907      	ldr	r1, [pc, #28]	; (8016690 <USBD_FS_ProductStrDescriptor+0x34>)
 8016672:	4808      	ldr	r0, [pc, #32]	; (8016694 <USBD_FS_ProductStrDescriptor+0x38>)
 8016674:	f7ff fdc0 	bl	80161f8 <USBD_GetString>
 8016678:	e004      	b.n	8016684 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801667a:	683a      	ldr	r2, [r7, #0]
 801667c:	4904      	ldr	r1, [pc, #16]	; (8016690 <USBD_FS_ProductStrDescriptor+0x34>)
 801667e:	4805      	ldr	r0, [pc, #20]	; (8016694 <USBD_FS_ProductStrDescriptor+0x38>)
 8016680:	f7ff fdba 	bl	80161f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016684:	4b02      	ldr	r3, [pc, #8]	; (8016690 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016686:	4618      	mov	r0, r3
 8016688:	3708      	adds	r7, #8
 801668a:	46bd      	mov	sp, r7
 801668c:	bd80      	pop	{r7, pc}
 801668e:	bf00      	nop
 8016690:	200030f0 	.word	0x200030f0
 8016694:	08017478 	.word	0x08017478

08016698 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b082      	sub	sp, #8
 801669c:	af00      	add	r7, sp, #0
 801669e:	4603      	mov	r3, r0
 80166a0:	6039      	str	r1, [r7, #0]
 80166a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80166a4:	683a      	ldr	r2, [r7, #0]
 80166a6:	4904      	ldr	r1, [pc, #16]	; (80166b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80166a8:	4804      	ldr	r0, [pc, #16]	; (80166bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80166aa:	f7ff fda5 	bl	80161f8 <USBD_GetString>
  return USBD_StrDesc;
 80166ae:	4b02      	ldr	r3, [pc, #8]	; (80166b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80166b0:	4618      	mov	r0, r3
 80166b2:	3708      	adds	r7, #8
 80166b4:	46bd      	mov	sp, r7
 80166b6:	bd80      	pop	{r7, pc}
 80166b8:	200030f0 	.word	0x200030f0
 80166bc:	08017490 	.word	0x08017490

080166c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b082      	sub	sp, #8
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	4603      	mov	r3, r0
 80166c8:	6039      	str	r1, [r7, #0]
 80166ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80166cc:	683b      	ldr	r3, [r7, #0]
 80166ce:	221a      	movs	r2, #26
 80166d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80166d2:	f000 f843 	bl	801675c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80166d6:	4b02      	ldr	r3, [pc, #8]	; (80166e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80166d8:	4618      	mov	r0, r3
 80166da:	3708      	adds	r7, #8
 80166dc:	46bd      	mov	sp, r7
 80166de:	bd80      	pop	{r7, pc}
 80166e0:	200000e4 	.word	0x200000e4

080166e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b082      	sub	sp, #8
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	4603      	mov	r3, r0
 80166ec:	6039      	str	r1, [r7, #0]
 80166ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80166f0:	79fb      	ldrb	r3, [r7, #7]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d105      	bne.n	8016702 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80166f6:	683a      	ldr	r2, [r7, #0]
 80166f8:	4907      	ldr	r1, [pc, #28]	; (8016718 <USBD_FS_ConfigStrDescriptor+0x34>)
 80166fa:	4808      	ldr	r0, [pc, #32]	; (801671c <USBD_FS_ConfigStrDescriptor+0x38>)
 80166fc:	f7ff fd7c 	bl	80161f8 <USBD_GetString>
 8016700:	e004      	b.n	801670c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016702:	683a      	ldr	r2, [r7, #0]
 8016704:	4904      	ldr	r1, [pc, #16]	; (8016718 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016706:	4805      	ldr	r0, [pc, #20]	; (801671c <USBD_FS_ConfigStrDescriptor+0x38>)
 8016708:	f7ff fd76 	bl	80161f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801670c:	4b02      	ldr	r3, [pc, #8]	; (8016718 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801670e:	4618      	mov	r0, r3
 8016710:	3708      	adds	r7, #8
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}
 8016716:	bf00      	nop
 8016718:	200030f0 	.word	0x200030f0
 801671c:	080174a4 	.word	0x080174a4

08016720 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b082      	sub	sp, #8
 8016724:	af00      	add	r7, sp, #0
 8016726:	4603      	mov	r3, r0
 8016728:	6039      	str	r1, [r7, #0]
 801672a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801672c:	79fb      	ldrb	r3, [r7, #7]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d105      	bne.n	801673e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016732:	683a      	ldr	r2, [r7, #0]
 8016734:	4907      	ldr	r1, [pc, #28]	; (8016754 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016736:	4808      	ldr	r0, [pc, #32]	; (8016758 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016738:	f7ff fd5e 	bl	80161f8 <USBD_GetString>
 801673c:	e004      	b.n	8016748 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801673e:	683a      	ldr	r2, [r7, #0]
 8016740:	4904      	ldr	r1, [pc, #16]	; (8016754 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016742:	4805      	ldr	r0, [pc, #20]	; (8016758 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016744:	f7ff fd58 	bl	80161f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016748:	4b02      	ldr	r3, [pc, #8]	; (8016754 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801674a:	4618      	mov	r0, r3
 801674c:	3708      	adds	r7, #8
 801674e:	46bd      	mov	sp, r7
 8016750:	bd80      	pop	{r7, pc}
 8016752:	bf00      	nop
 8016754:	200030f0 	.word	0x200030f0
 8016758:	080174b0 	.word	0x080174b0

0801675c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b084      	sub	sp, #16
 8016760:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016762:	4b0f      	ldr	r3, [pc, #60]	; (80167a0 <Get_SerialNum+0x44>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016768:	4b0e      	ldr	r3, [pc, #56]	; (80167a4 <Get_SerialNum+0x48>)
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801676e:	4b0e      	ldr	r3, [pc, #56]	; (80167a8 <Get_SerialNum+0x4c>)
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016774:	68fa      	ldr	r2, [r7, #12]
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	4413      	add	r3, r2
 801677a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d009      	beq.n	8016796 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016782:	2208      	movs	r2, #8
 8016784:	4909      	ldr	r1, [pc, #36]	; (80167ac <Get_SerialNum+0x50>)
 8016786:	68f8      	ldr	r0, [r7, #12]
 8016788:	f000 f814 	bl	80167b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801678c:	2204      	movs	r2, #4
 801678e:	4908      	ldr	r1, [pc, #32]	; (80167b0 <Get_SerialNum+0x54>)
 8016790:	68b8      	ldr	r0, [r7, #8]
 8016792:	f000 f80f 	bl	80167b4 <IntToUnicode>
  }
}
 8016796:	bf00      	nop
 8016798:	3710      	adds	r7, #16
 801679a:	46bd      	mov	sp, r7
 801679c:	bd80      	pop	{r7, pc}
 801679e:	bf00      	nop
 80167a0:	1ff1e800 	.word	0x1ff1e800
 80167a4:	1ff1e804 	.word	0x1ff1e804
 80167a8:	1ff1e808 	.word	0x1ff1e808
 80167ac:	200000e6 	.word	0x200000e6
 80167b0:	200000f6 	.word	0x200000f6

080167b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80167b4:	b480      	push	{r7}
 80167b6:	b087      	sub	sp, #28
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	60f8      	str	r0, [r7, #12]
 80167bc:	60b9      	str	r1, [r7, #8]
 80167be:	4613      	mov	r3, r2
 80167c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80167c2:	2300      	movs	r3, #0
 80167c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80167c6:	2300      	movs	r3, #0
 80167c8:	75fb      	strb	r3, [r7, #23]
 80167ca:	e027      	b.n	801681c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	0f1b      	lsrs	r3, r3, #28
 80167d0:	2b09      	cmp	r3, #9
 80167d2:	d80b      	bhi.n	80167ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	0f1b      	lsrs	r3, r3, #28
 80167d8:	b2da      	uxtb	r2, r3
 80167da:	7dfb      	ldrb	r3, [r7, #23]
 80167dc:	005b      	lsls	r3, r3, #1
 80167de:	4619      	mov	r1, r3
 80167e0:	68bb      	ldr	r3, [r7, #8]
 80167e2:	440b      	add	r3, r1
 80167e4:	3230      	adds	r2, #48	; 0x30
 80167e6:	b2d2      	uxtb	r2, r2
 80167e8:	701a      	strb	r2, [r3, #0]
 80167ea:	e00a      	b.n	8016802 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	0f1b      	lsrs	r3, r3, #28
 80167f0:	b2da      	uxtb	r2, r3
 80167f2:	7dfb      	ldrb	r3, [r7, #23]
 80167f4:	005b      	lsls	r3, r3, #1
 80167f6:	4619      	mov	r1, r3
 80167f8:	68bb      	ldr	r3, [r7, #8]
 80167fa:	440b      	add	r3, r1
 80167fc:	3237      	adds	r2, #55	; 0x37
 80167fe:	b2d2      	uxtb	r2, r2
 8016800:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	011b      	lsls	r3, r3, #4
 8016806:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016808:	7dfb      	ldrb	r3, [r7, #23]
 801680a:	005b      	lsls	r3, r3, #1
 801680c:	3301      	adds	r3, #1
 801680e:	68ba      	ldr	r2, [r7, #8]
 8016810:	4413      	add	r3, r2
 8016812:	2200      	movs	r2, #0
 8016814:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016816:	7dfb      	ldrb	r3, [r7, #23]
 8016818:	3301      	adds	r3, #1
 801681a:	75fb      	strb	r3, [r7, #23]
 801681c:	7dfa      	ldrb	r2, [r7, #23]
 801681e:	79fb      	ldrb	r3, [r7, #7]
 8016820:	429a      	cmp	r2, r3
 8016822:	d3d3      	bcc.n	80167cc <IntToUnicode+0x18>
  }
}
 8016824:	bf00      	nop
 8016826:	bf00      	nop
 8016828:	371c      	adds	r7, #28
 801682a:	46bd      	mov	sp, r7
 801682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016830:	4770      	bx	lr
	...

08016834 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b0b8      	sub	sp, #224	; 0xe0
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801683c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8016840:	2200      	movs	r2, #0
 8016842:	601a      	str	r2, [r3, #0]
 8016844:	605a      	str	r2, [r3, #4]
 8016846:	609a      	str	r2, [r3, #8]
 8016848:	60da      	str	r2, [r3, #12]
 801684a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801684c:	f107 0310 	add.w	r3, r7, #16
 8016850:	22bc      	movs	r2, #188	; 0xbc
 8016852:	2100      	movs	r1, #0
 8016854:	4618      	mov	r0, r3
 8016856:	f000 fdfb 	bl	8017450 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	4a3b      	ldr	r2, [pc, #236]	; (801694c <HAL_PCD_MspInit+0x118>)
 8016860:	4293      	cmp	r3, r2
 8016862:	d16e      	bne.n	8016942 <HAL_PCD_MspInit+0x10e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016864:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016868:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801686a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801686e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016872:	f107 0310 	add.w	r3, r7, #16
 8016876:	4618      	mov	r0, r3
 8016878:	f7f3 fef2 	bl	800a660 <HAL_RCCEx_PeriphCLKConfig>
 801687c:	4603      	mov	r3, r0
 801687e:	2b00      	cmp	r3, #0
 8016880:	d001      	beq.n	8016886 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8016882:	f7ea ff9b 	bl	80017bc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016886:	f7f2 fe67 	bl	8009558 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801688a:	4b31      	ldr	r3, [pc, #196]	; (8016950 <HAL_PCD_MspInit+0x11c>)
 801688c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016890:	4a2f      	ldr	r2, [pc, #188]	; (8016950 <HAL_PCD_MspInit+0x11c>)
 8016892:	f043 0301 	orr.w	r3, r3, #1
 8016896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801689a:	4b2d      	ldr	r3, [pc, #180]	; (8016950 <HAL_PCD_MspInit+0x11c>)
 801689c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80168a0:	f003 0301 	and.w	r3, r3, #1
 80168a4:	60fb      	str	r3, [r7, #12]
 80168a6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80168a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80168ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80168b0:	2302      	movs	r3, #2
 80168b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80168b6:	2300      	movs	r3, #0
 80168b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80168bc:	2300      	movs	r3, #0
 80168be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80168c2:	230a      	movs	r3, #10
 80168c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80168c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80168cc:	4619      	mov	r1, r3
 80168ce:	4821      	ldr	r0, [pc, #132]	; (8016954 <HAL_PCD_MspInit+0x120>)
 80168d0:	f7f0 fc6c 	bl	80071ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80168d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80168d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80168dc:	2300      	movs	r3, #0
 80168de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80168e2:	2300      	movs	r3, #0
 80168e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80168e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80168ec:	4619      	mov	r1, r3
 80168ee:	4819      	ldr	r0, [pc, #100]	; (8016954 <HAL_PCD_MspInit+0x120>)
 80168f0:	f7f0 fc5c 	bl	80071ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80168f4:	4b16      	ldr	r3, [pc, #88]	; (8016950 <HAL_PCD_MspInit+0x11c>)
 80168f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80168fa:	4a15      	ldr	r2, [pc, #84]	; (8016950 <HAL_PCD_MspInit+0x11c>)
 80168fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016900:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016904:	4b12      	ldr	r3, [pc, #72]	; (8016950 <HAL_PCD_MspInit+0x11c>)
 8016906:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801690a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801690e:	60bb      	str	r3, [r7, #8]
 8016910:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 8016912:	2200      	movs	r2, #0
 8016914:	2100      	movs	r1, #0
 8016916:	2062      	movs	r0, #98	; 0x62
 8016918:	f7ed fae5 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 801691c:	2062      	movs	r0, #98	; 0x62
 801691e:	f7ed fafc 	bl	8003f1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 8016922:	2200      	movs	r2, #0
 8016924:	2100      	movs	r1, #0
 8016926:	2063      	movs	r0, #99	; 0x63
 8016928:	f7ed fadd 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 801692c:	2063      	movs	r0, #99	; 0x63
 801692e:	f7ed faf4 	bl	8003f1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016932:	2200      	movs	r2, #0
 8016934:	2100      	movs	r1, #0
 8016936:	2065      	movs	r0, #101	; 0x65
 8016938:	f7ed fad5 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801693c:	2065      	movs	r0, #101	; 0x65
 801693e:	f7ed faec 	bl	8003f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016942:	bf00      	nop
 8016944:	37e0      	adds	r7, #224	; 0xe0
 8016946:	46bd      	mov	sp, r7
 8016948:	bd80      	pop	{r7, pc}
 801694a:	bf00      	nop
 801694c:	40080000 	.word	0x40080000
 8016950:	58024400 	.word	0x58024400
 8016954:	58020000 	.word	0x58020000

08016958 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b082      	sub	sp, #8
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801696c:	4619      	mov	r1, r3
 801696e:	4610      	mov	r0, r2
 8016970:	f7fe fae3 	bl	8014f3a <USBD_LL_SetupStage>
}
 8016974:	bf00      	nop
 8016976:	3708      	adds	r7, #8
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}

0801697c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b082      	sub	sp, #8
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
 8016984:	460b      	mov	r3, r1
 8016986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801698e:	78fa      	ldrb	r2, [r7, #3]
 8016990:	6879      	ldr	r1, [r7, #4]
 8016992:	4613      	mov	r3, r2
 8016994:	00db      	lsls	r3, r3, #3
 8016996:	4413      	add	r3, r2
 8016998:	009b      	lsls	r3, r3, #2
 801699a:	440b      	add	r3, r1
 801699c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80169a0:	681a      	ldr	r2, [r3, #0]
 80169a2:	78fb      	ldrb	r3, [r7, #3]
 80169a4:	4619      	mov	r1, r3
 80169a6:	f7fe fb1d 	bl	8014fe4 <USBD_LL_DataOutStage>
}
 80169aa:	bf00      	nop
 80169ac:	3708      	adds	r7, #8
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}

080169b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169b2:	b580      	push	{r7, lr}
 80169b4:	b082      	sub	sp, #8
 80169b6:	af00      	add	r7, sp, #0
 80169b8:	6078      	str	r0, [r7, #4]
 80169ba:	460b      	mov	r3, r1
 80169bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80169c4:	78fa      	ldrb	r2, [r7, #3]
 80169c6:	6879      	ldr	r1, [r7, #4]
 80169c8:	4613      	mov	r3, r2
 80169ca:	00db      	lsls	r3, r3, #3
 80169cc:	4413      	add	r3, r2
 80169ce:	009b      	lsls	r3, r3, #2
 80169d0:	440b      	add	r3, r1
 80169d2:	334c      	adds	r3, #76	; 0x4c
 80169d4:	681a      	ldr	r2, [r3, #0]
 80169d6:	78fb      	ldrb	r3, [r7, #3]
 80169d8:	4619      	mov	r1, r3
 80169da:	f7fe fbb6 	bl	801514a <USBD_LL_DataInStage>
}
 80169de:	bf00      	nop
 80169e0:	3708      	adds	r7, #8
 80169e2:	46bd      	mov	sp, r7
 80169e4:	bd80      	pop	{r7, pc}

080169e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169e6:	b580      	push	{r7, lr}
 80169e8:	b082      	sub	sp, #8
 80169ea:	af00      	add	r7, sp, #0
 80169ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80169f4:	4618      	mov	r0, r3
 80169f6:	f7fe fcea 	bl	80153ce <USBD_LL_SOF>
}
 80169fa:	bf00      	nop
 80169fc:	3708      	adds	r7, #8
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bd80      	pop	{r7, pc}

08016a02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a02:	b580      	push	{r7, lr}
 8016a04:	b084      	sub	sp, #16
 8016a06:	af00      	add	r7, sp, #0
 8016a08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016a0a:	2301      	movs	r3, #1
 8016a0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	68db      	ldr	r3, [r3, #12]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d102      	bne.n	8016a1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016a16:	2300      	movs	r3, #0
 8016a18:	73fb      	strb	r3, [r7, #15]
 8016a1a:	e008      	b.n	8016a2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	68db      	ldr	r3, [r3, #12]
 8016a20:	2b02      	cmp	r3, #2
 8016a22:	d102      	bne.n	8016a2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016a24:	2301      	movs	r3, #1
 8016a26:	73fb      	strb	r3, [r7, #15]
 8016a28:	e001      	b.n	8016a2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016a2a:	f7ea fec7 	bl	80017bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a34:	7bfa      	ldrb	r2, [r7, #15]
 8016a36:	4611      	mov	r1, r2
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f7fe fc8a 	bl	8015352 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7fe fc32 	bl	80152ae <USBD_LL_Reset>
}
 8016a4a:	bf00      	nop
 8016a4c:	3710      	adds	r7, #16
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}
	...

08016a54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b082      	sub	sp, #8
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a62:	4618      	mov	r0, r3
 8016a64:	f7fe fc85 	bl	8015372 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	687a      	ldr	r2, [r7, #4]
 8016a74:	6812      	ldr	r2, [r2, #0]
 8016a76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016a7a:	f043 0301 	orr.w	r3, r3, #1
 8016a7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	6a1b      	ldr	r3, [r3, #32]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d005      	beq.n	8016a94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016a88:	4b04      	ldr	r3, [pc, #16]	; (8016a9c <HAL_PCD_SuspendCallback+0x48>)
 8016a8a:	691b      	ldr	r3, [r3, #16]
 8016a8c:	4a03      	ldr	r2, [pc, #12]	; (8016a9c <HAL_PCD_SuspendCallback+0x48>)
 8016a8e:	f043 0306 	orr.w	r3, r3, #6
 8016a92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016a94:	bf00      	nop
 8016a96:	3708      	adds	r7, #8
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}
 8016a9c:	e000ed00 	.word	0xe000ed00

08016aa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b082      	sub	sp, #8
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016aae:	4618      	mov	r0, r3
 8016ab0:	f7fe fc75 	bl	801539e <USBD_LL_Resume>
}
 8016ab4:	bf00      	nop
 8016ab6:	3708      	adds	r7, #8
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	bd80      	pop	{r7, pc}

08016abc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b082      	sub	sp, #8
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
 8016ac4:	460b      	mov	r3, r1
 8016ac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ace:	78fa      	ldrb	r2, [r7, #3]
 8016ad0:	4611      	mov	r1, r2
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f7fe fccd 	bl	8015472 <USBD_LL_IsoOUTIncomplete>
}
 8016ad8:	bf00      	nop
 8016ada:	3708      	adds	r7, #8
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}

08016ae0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b082      	sub	sp, #8
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
 8016ae8:	460b      	mov	r3, r1
 8016aea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016af2:	78fa      	ldrb	r2, [r7, #3]
 8016af4:	4611      	mov	r1, r2
 8016af6:	4618      	mov	r0, r3
 8016af8:	f7fe fc89 	bl	801540e <USBD_LL_IsoINIncomplete>
}
 8016afc:	bf00      	nop
 8016afe:	3708      	adds	r7, #8
 8016b00:	46bd      	mov	sp, r7
 8016b02:	bd80      	pop	{r7, pc}

08016b04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b082      	sub	sp, #8
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b12:	4618      	mov	r0, r3
 8016b14:	f7fe fcdf 	bl	80154d6 <USBD_LL_DevConnected>
}
 8016b18:	bf00      	nop
 8016b1a:	3708      	adds	r7, #8
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	bd80      	pop	{r7, pc}

08016b20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b082      	sub	sp, #8
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f7fe fcdc 	bl	80154ec <USBD_LL_DevDisconnected>
}
 8016b34:	bf00      	nop
 8016b36:	3708      	adds	r7, #8
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}

08016b3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b082      	sub	sp, #8
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d13e      	bne.n	8016bca <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016b4c:	4a21      	ldr	r2, [pc, #132]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	4a1f      	ldr	r2, [pc, #124]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016b58:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016b5c:	4b1d      	ldr	r3, [pc, #116]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016b5e:	4a1e      	ldr	r2, [pc, #120]	; (8016bd8 <USBD_LL_Init+0x9c>)
 8016b60:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8016b62:	4b1c      	ldr	r3, [pc, #112]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016b64:	2209      	movs	r2, #9
 8016b66:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016b68:	4b1a      	ldr	r3, [pc, #104]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016b6a:	2202      	movs	r2, #2
 8016b6c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016b6e:	4b19      	ldr	r3, [pc, #100]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016b70:	2200      	movs	r2, #0
 8016b72:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016b74:	4b17      	ldr	r3, [pc, #92]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016b76:	2202      	movs	r2, #2
 8016b78:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016b7a:	4b16      	ldr	r3, [pc, #88]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016b80:	4b14      	ldr	r3, [pc, #80]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016b82:	2200      	movs	r2, #0
 8016b84:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016b86:	4b13      	ldr	r3, [pc, #76]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016b88:	2200      	movs	r2, #0
 8016b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8016b8c:	4b11      	ldr	r3, [pc, #68]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016b8e:	2200      	movs	r2, #0
 8016b90:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8016b92:	4b10      	ldr	r3, [pc, #64]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016b94:	2201      	movs	r2, #1
 8016b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016b98:	4b0e      	ldr	r3, [pc, #56]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016b9e:	480d      	ldr	r0, [pc, #52]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016ba0:	f7f1 f9ca 	bl	8007f38 <HAL_PCD_Init>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d001      	beq.n	8016bae <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016baa:	f7ea fe07 	bl	80017bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016bae:	2180      	movs	r1, #128	; 0x80
 8016bb0:	4808      	ldr	r0, [pc, #32]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016bb2:	f7f2 fc56 	bl	8009462 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016bb6:	2240      	movs	r2, #64	; 0x40
 8016bb8:	2100      	movs	r1, #0
 8016bba:	4806      	ldr	r0, [pc, #24]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016bbc:	f7f2 fc0a 	bl	80093d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016bc0:	2280      	movs	r2, #128	; 0x80
 8016bc2:	2101      	movs	r1, #1
 8016bc4:	4803      	ldr	r0, [pc, #12]	; (8016bd4 <USBD_LL_Init+0x98>)
 8016bc6:	f7f2 fc05 	bl	80093d4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8016bca:	2300      	movs	r3, #0
}
 8016bcc:	4618      	mov	r0, r3
 8016bce:	3708      	adds	r7, #8
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	bd80      	pop	{r7, pc}
 8016bd4:	200032f0 	.word	0x200032f0
 8016bd8:	40080000 	.word	0x40080000

08016bdc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b084      	sub	sp, #16
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016be4:	2300      	movs	r3, #0
 8016be6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016be8:	2300      	movs	r3, #0
 8016bea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	f7f1 fac4 	bl	8008180 <HAL_PCD_Start>
 8016bf8:	4603      	mov	r3, r0
 8016bfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bfc:	7bfb      	ldrb	r3, [r7, #15]
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f000 f942 	bl	8016e88 <USBD_Get_USB_Status>
 8016c04:	4603      	mov	r3, r0
 8016c06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c08:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	3710      	adds	r7, #16
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd80      	pop	{r7, pc}

08016c12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016c12:	b580      	push	{r7, lr}
 8016c14:	b084      	sub	sp, #16
 8016c16:	af00      	add	r7, sp, #0
 8016c18:	6078      	str	r0, [r7, #4]
 8016c1a:	4608      	mov	r0, r1
 8016c1c:	4611      	mov	r1, r2
 8016c1e:	461a      	mov	r2, r3
 8016c20:	4603      	mov	r3, r0
 8016c22:	70fb      	strb	r3, [r7, #3]
 8016c24:	460b      	mov	r3, r1
 8016c26:	70bb      	strb	r3, [r7, #2]
 8016c28:	4613      	mov	r3, r2
 8016c2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c30:	2300      	movs	r3, #0
 8016c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016c3a:	78bb      	ldrb	r3, [r7, #2]
 8016c3c:	883a      	ldrh	r2, [r7, #0]
 8016c3e:	78f9      	ldrb	r1, [r7, #3]
 8016c40:	f7f1 ffc2 	bl	8008bc8 <HAL_PCD_EP_Open>
 8016c44:	4603      	mov	r3, r0
 8016c46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c48:	7bfb      	ldrb	r3, [r7, #15]
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f000 f91c 	bl	8016e88 <USBD_Get_USB_Status>
 8016c50:	4603      	mov	r3, r0
 8016c52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c56:	4618      	mov	r0, r3
 8016c58:	3710      	adds	r7, #16
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd80      	pop	{r7, pc}

08016c5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c5e:	b580      	push	{r7, lr}
 8016c60:	b084      	sub	sp, #16
 8016c62:	af00      	add	r7, sp, #0
 8016c64:	6078      	str	r0, [r7, #4]
 8016c66:	460b      	mov	r3, r1
 8016c68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c78:	78fa      	ldrb	r2, [r7, #3]
 8016c7a:	4611      	mov	r1, r2
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f7f2 f80b 	bl	8008c98 <HAL_PCD_EP_Close>
 8016c82:	4603      	mov	r3, r0
 8016c84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c86:	7bfb      	ldrb	r3, [r7, #15]
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f000 f8fd 	bl	8016e88 <USBD_Get_USB_Status>
 8016c8e:	4603      	mov	r3, r0
 8016c90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c92:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c94:	4618      	mov	r0, r3
 8016c96:	3710      	adds	r7, #16
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	bd80      	pop	{r7, pc}

08016c9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b084      	sub	sp, #16
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
 8016ca4:	460b      	mov	r3, r1
 8016ca6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ca8:	2300      	movs	r3, #0
 8016caa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cac:	2300      	movs	r3, #0
 8016cae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016cb6:	78fa      	ldrb	r2, [r7, #3]
 8016cb8:	4611      	mov	r1, r2
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7f2 f8e3 	bl	8008e86 <HAL_PCD_EP_SetStall>
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cc4:	7bfb      	ldrb	r3, [r7, #15]
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f000 f8de 	bl	8016e88 <USBD_Get_USB_Status>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016cd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	3710      	adds	r7, #16
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd80      	pop	{r7, pc}

08016cda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cda:	b580      	push	{r7, lr}
 8016cdc:	b084      	sub	sp, #16
 8016cde:	af00      	add	r7, sp, #0
 8016ce0:	6078      	str	r0, [r7, #4]
 8016ce2:	460b      	mov	r3, r1
 8016ce4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cea:	2300      	movs	r3, #0
 8016cec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016cf4:	78fa      	ldrb	r2, [r7, #3]
 8016cf6:	4611      	mov	r1, r2
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	f7f2 f928 	bl	8008f4e <HAL_PCD_EP_ClrStall>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d02:	7bfb      	ldrb	r3, [r7, #15]
 8016d04:	4618      	mov	r0, r3
 8016d06:	f000 f8bf 	bl	8016e88 <USBD_Get_USB_Status>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d10:	4618      	mov	r0, r3
 8016d12:	3710      	adds	r7, #16
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}

08016d18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d18:	b480      	push	{r7}
 8016d1a:	b085      	sub	sp, #20
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
 8016d20:	460b      	mov	r3, r1
 8016d22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	da0b      	bge.n	8016d4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016d34:	78fb      	ldrb	r3, [r7, #3]
 8016d36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016d3a:	68f9      	ldr	r1, [r7, #12]
 8016d3c:	4613      	mov	r3, r2
 8016d3e:	00db      	lsls	r3, r3, #3
 8016d40:	4413      	add	r3, r2
 8016d42:	009b      	lsls	r3, r3, #2
 8016d44:	440b      	add	r3, r1
 8016d46:	333e      	adds	r3, #62	; 0x3e
 8016d48:	781b      	ldrb	r3, [r3, #0]
 8016d4a:	e00b      	b.n	8016d64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016d4c:	78fb      	ldrb	r3, [r7, #3]
 8016d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016d52:	68f9      	ldr	r1, [r7, #12]
 8016d54:	4613      	mov	r3, r2
 8016d56:	00db      	lsls	r3, r3, #3
 8016d58:	4413      	add	r3, r2
 8016d5a:	009b      	lsls	r3, r3, #2
 8016d5c:	440b      	add	r3, r1
 8016d5e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016d62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016d64:	4618      	mov	r0, r3
 8016d66:	3714      	adds	r7, #20
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d6e:	4770      	bx	lr

08016d70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b084      	sub	sp, #16
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
 8016d78:	460b      	mov	r3, r1
 8016d7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d80:	2300      	movs	r3, #0
 8016d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d8a:	78fa      	ldrb	r2, [r7, #3]
 8016d8c:	4611      	mov	r1, r2
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f7f1 fef5 	bl	8008b7e <HAL_PCD_SetAddress>
 8016d94:	4603      	mov	r3, r0
 8016d96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d98:	7bfb      	ldrb	r3, [r7, #15]
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f000 f874 	bl	8016e88 <USBD_Get_USB_Status>
 8016da0:	4603      	mov	r3, r0
 8016da2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016da6:	4618      	mov	r0, r3
 8016da8:	3710      	adds	r7, #16
 8016daa:	46bd      	mov	sp, r7
 8016dac:	bd80      	pop	{r7, pc}

08016dae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016dae:	b580      	push	{r7, lr}
 8016db0:	b086      	sub	sp, #24
 8016db2:	af00      	add	r7, sp, #0
 8016db4:	60f8      	str	r0, [r7, #12]
 8016db6:	607a      	str	r2, [r7, #4]
 8016db8:	603b      	str	r3, [r7, #0]
 8016dba:	460b      	mov	r3, r1
 8016dbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016dcc:	7af9      	ldrb	r1, [r7, #11]
 8016dce:	683b      	ldr	r3, [r7, #0]
 8016dd0:	687a      	ldr	r2, [r7, #4]
 8016dd2:	f7f2 f80e 	bl	8008df2 <HAL_PCD_EP_Transmit>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dda:	7dfb      	ldrb	r3, [r7, #23]
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f000 f853 	bl	8016e88 <USBD_Get_USB_Status>
 8016de2:	4603      	mov	r3, r0
 8016de4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016de6:	7dbb      	ldrb	r3, [r7, #22]
}
 8016de8:	4618      	mov	r0, r3
 8016dea:	3718      	adds	r7, #24
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}

08016df0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b086      	sub	sp, #24
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	60f8      	str	r0, [r7, #12]
 8016df8:	607a      	str	r2, [r7, #4]
 8016dfa:	603b      	str	r3, [r7, #0]
 8016dfc:	460b      	mov	r3, r1
 8016dfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e00:	2300      	movs	r3, #0
 8016e02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e04:	2300      	movs	r3, #0
 8016e06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016e0e:	7af9      	ldrb	r1, [r7, #11]
 8016e10:	683b      	ldr	r3, [r7, #0]
 8016e12:	687a      	ldr	r2, [r7, #4]
 8016e14:	f7f1 ff8a 	bl	8008d2c <HAL_PCD_EP_Receive>
 8016e18:	4603      	mov	r3, r0
 8016e1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e1c:	7dfb      	ldrb	r3, [r7, #23]
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f000 f832 	bl	8016e88 <USBD_Get_USB_Status>
 8016e24:	4603      	mov	r3, r0
 8016e26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016e28:	7dbb      	ldrb	r3, [r7, #22]
}
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	3718      	adds	r7, #24
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	bd80      	pop	{r7, pc}

08016e32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e32:	b580      	push	{r7, lr}
 8016e34:	b082      	sub	sp, #8
 8016e36:	af00      	add	r7, sp, #0
 8016e38:	6078      	str	r0, [r7, #4]
 8016e3a:	460b      	mov	r3, r1
 8016e3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e44:	78fa      	ldrb	r2, [r7, #3]
 8016e46:	4611      	mov	r1, r2
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f7f1 ffba 	bl	8008dc2 <HAL_PCD_EP_GetRxCount>
 8016e4e:	4603      	mov	r3, r0
}
 8016e50:	4618      	mov	r0, r3
 8016e52:	3708      	adds	r7, #8
 8016e54:	46bd      	mov	sp, r7
 8016e56:	bd80      	pop	{r7, pc}

08016e58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016e58:	b480      	push	{r7}
 8016e5a:	b083      	sub	sp, #12
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016e60:	4b03      	ldr	r3, [pc, #12]	; (8016e70 <USBD_static_malloc+0x18>)
}
 8016e62:	4618      	mov	r0, r3
 8016e64:	370c      	adds	r7, #12
 8016e66:	46bd      	mov	sp, r7
 8016e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e6c:	4770      	bx	lr
 8016e6e:	bf00      	nop
 8016e70:	200037fc 	.word	0x200037fc

08016e74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016e74:	b480      	push	{r7}
 8016e76:	b083      	sub	sp, #12
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]

}
 8016e7c:	bf00      	nop
 8016e7e:	370c      	adds	r7, #12
 8016e80:	46bd      	mov	sp, r7
 8016e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e86:	4770      	bx	lr

08016e88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016e88:	b480      	push	{r7}
 8016e8a:	b085      	sub	sp, #20
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	4603      	mov	r3, r0
 8016e90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e92:	2300      	movs	r3, #0
 8016e94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016e96:	79fb      	ldrb	r3, [r7, #7]
 8016e98:	2b03      	cmp	r3, #3
 8016e9a:	d817      	bhi.n	8016ecc <USBD_Get_USB_Status+0x44>
 8016e9c:	a201      	add	r2, pc, #4	; (adr r2, 8016ea4 <USBD_Get_USB_Status+0x1c>)
 8016e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ea2:	bf00      	nop
 8016ea4:	08016eb5 	.word	0x08016eb5
 8016ea8:	08016ebb 	.word	0x08016ebb
 8016eac:	08016ec1 	.word	0x08016ec1
 8016eb0:	08016ec7 	.word	0x08016ec7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8016eb8:	e00b      	b.n	8016ed2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016eba:	2303      	movs	r3, #3
 8016ebc:	73fb      	strb	r3, [r7, #15]
    break;
 8016ebe:	e008      	b.n	8016ed2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016ec0:	2301      	movs	r3, #1
 8016ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8016ec4:	e005      	b.n	8016ed2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016ec6:	2303      	movs	r3, #3
 8016ec8:	73fb      	strb	r3, [r7, #15]
    break;
 8016eca:	e002      	b.n	8016ed2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016ecc:	2303      	movs	r3, #3
 8016ece:	73fb      	strb	r3, [r7, #15]
    break;
 8016ed0:	bf00      	nop
  }
  return usb_status;
 8016ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	3714      	adds	r7, #20
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ede:	4770      	bx	lr

08016ee0 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 8016ee0:	b590      	push	{r4, r7, lr}
 8016ee2:	b087      	sub	sp, #28
 8016ee4:	af02      	add	r7, sp, #8
 8016ee6:	60f8      	str	r0, [r7, #12]
 8016ee8:	60b9      	str	r1, [r7, #8]
 8016eea:	607a      	str	r2, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	685c      	ldr	r4, [r3, #4]
 8016ef0:	2010      	movs	r0, #16
 8016ef2:	f000 f8f8 	bl	80170e6 <mpool_align>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	6363      	str	r3, [r4, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	68fa      	ldr	r2, [r7, #12]
 8016efe:	609a      	str	r2, [r3, #8]
    pool->usize  = 0;
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	2200      	movs	r2, #0
 8016f04:	60da      	str	r2, [r3, #12]
    pool->msize  = size;
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	68ba      	ldr	r2, [r7, #8]
 8016f0a:	611a      	str	r2, [r3, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	6898      	ldr	r0, [r3, #8]
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	691a      	ldr	r2, [r3, #16]
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	685b      	ldr	r3, [r3, #4]
 8016f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f1a:	1ad2      	subs	r2, r2, r3
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	685b      	ldr	r3, [r3, #4]
 8016f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f22:	9300      	str	r3, [sp, #0]
 8016f24:	4613      	mov	r3, r2
 8016f26:	2200      	movs	r2, #0
 8016f28:	2100      	movs	r1, #0
 8016f2a:	f000 f8ea 	bl	8017102 <create_node>
 8016f2e:	4602      	mov	r2, r0
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	615a      	str	r2, [r3, #20]
    {
        memory[i+leaf.header_size]=0;
    }
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}
 8016f34:	bf00      	nop
 8016f36:	3714      	adds	r7, #20
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	bd90      	pop	{r4, r7, pc}

08016f3c <leaf_pool_init>:

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b084      	sub	sp, #16
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	60f8      	str	r0, [r7, #12]
 8016f44:	60b9      	str	r1, [r7, #8]
 8016f46:	607a      	str	r2, [r7, #4]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	331c      	adds	r3, #28
 8016f4c:	461a      	mov	r2, r3
 8016f4e:	6879      	ldr	r1, [r7, #4]
 8016f50:	68b8      	ldr	r0, [r7, #8]
 8016f52:	f7ff ffc5 	bl	8016ee0 <mpool_create>
    
    leaf->mempool = &leaf->_internal_mempool;
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	f103 021c 	add.w	r2, r3, #28
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	619a      	str	r2, [r3, #24]
}
 8016f60:	bf00      	nop
 8016f62:	3710      	adds	r7, #16
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bd80      	pop	{r7, pc}

08016f68 <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
{
 8016f68:	b590      	push	{r4, r7, lr}
 8016f6a:	b08d      	sub	sp, #52	; 0x34
 8016f6c:	af02      	add	r7, sp, #8
 8016f6e:	6078      	str	r0, [r7, #4]
 8016f70:	6039      	str	r1, [r7, #0]
    pool->leaf->allocCount++;
 8016f72:	683b      	ldr	r3, [r7, #0]
 8016f74:	685b      	ldr	r3, [r3, #4]
 8016f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016f78:	3201      	adds	r2, #1
 8016f7a:	649a      	str	r2, [r3, #72]	; 0x48
        memset(temp, 0, asize);
    }
    return temp;
#else
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	695b      	ldr	r3, [r3, #20]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d116      	bne.n	8016fb2 <mpool_alloc+0x4a>
    {
        if ((pool->msize - pool->usize) > asize)
 8016f84:	683b      	ldr	r3, [r7, #0]
 8016f86:	691a      	ldr	r2, [r3, #16]
 8016f88:	683b      	ldr	r3, [r7, #0]
 8016f8a:	68db      	ldr	r3, [r3, #12]
 8016f8c:	1ad3      	subs	r3, r2, r3
 8016f8e:	687a      	ldr	r2, [r7, #4]
 8016f90:	429a      	cmp	r2, r3
 8016f92:	d206      	bcs.n	8016fa2 <mpool_alloc+0x3a>
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8016f94:	683b      	ldr	r3, [r7, #0]
 8016f96:	685b      	ldr	r3, [r3, #4]
 8016f98:	2101      	movs	r1, #1
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f000 fa1c 	bl	80173d8 <LEAF_internalErrorCallback>
 8016fa0:	e005      	b.n	8016fae <mpool_alloc+0x46>
        }
        else
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8016fa2:	683b      	ldr	r3, [r7, #0]
 8016fa4:	685b      	ldr	r3, [r3, #4]
 8016fa6:	2100      	movs	r1, #0
 8016fa8:	4618      	mov	r0, r3
 8016faa:	f000 fa15 	bl	80173d8 <LEAF_internalErrorCallback>
        }
        return NULL;
 8016fae:	2300      	movs	r3, #0
 8016fb0:	e095      	b.n	80170de <mpool_alloc+0x176>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 8016fb2:	6878      	ldr	r0, [r7, #4]
 8016fb4:	f000 f897 	bl	80170e6 <mpool_align>
 8016fb8:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 8016fba:	683b      	ldr	r3, [r7, #0]
 8016fbc:	695b      	ldr	r3, [r3, #20]
 8016fbe:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 8016fc0:	e01c      	b.n	8016ffc <mpool_alloc+0x94>
    {
        node_to_alloc = node_to_alloc->next;
 8016fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc4:	685b      	ldr	r3, [r3, #4]
 8016fc6:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 8016fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d116      	bne.n	8016ffc <mpool_alloc+0x94>
        {
            if ((pool->msize - pool->usize) > asize)
 8016fce:	683b      	ldr	r3, [r7, #0]
 8016fd0:	691a      	ldr	r2, [r3, #16]
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	68db      	ldr	r3, [r3, #12]
 8016fd6:	1ad3      	subs	r3, r2, r3
 8016fd8:	687a      	ldr	r2, [r7, #4]
 8016fda:	429a      	cmp	r2, r3
 8016fdc:	d206      	bcs.n	8016fec <mpool_alloc+0x84>
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8016fde:	683b      	ldr	r3, [r7, #0]
 8016fe0:	685b      	ldr	r3, [r3, #4]
 8016fe2:	2101      	movs	r1, #1
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	f000 f9f7 	bl	80173d8 <LEAF_internalErrorCallback>
 8016fea:	e005      	b.n	8016ff8 <mpool_alloc+0x90>
            }
            else
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8016fec:	683b      	ldr	r3, [r7, #0]
 8016fee:	685b      	ldr	r3, [r3, #4]
 8016ff0:	2100      	movs	r1, #0
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f000 f9f0 	bl	80173d8 <LEAF_internalErrorCallback>
            }
            return NULL;
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	e070      	b.n	80170de <mpool_alloc+0x176>
    while (node_to_alloc->size < size_to_alloc)
 8016ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ffe:	68db      	ldr	r3, [r3, #12]
 8017000:	69ba      	ldr	r2, [r7, #24]
 8017002:	429a      	cmp	r2, r3
 8017004:	d8dd      	bhi.n	8016fc2 <mpool_alloc+0x5a>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8017006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017008:	68da      	ldr	r2, [r3, #12]
 801700a:	69bb      	ldr	r3, [r7, #24]
 801700c:	1ad3      	subs	r3, r2, r3
 801700e:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 8017010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017012:	69ba      	ldr	r2, [r7, #24]
 8017014:	60da      	str	r2, [r3, #12]
    if (leftover > pool->leaf->header_size)
 8017016:	683b      	ldr	r3, [r7, #0]
 8017018:	685b      	ldr	r3, [r3, #4]
 801701a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801701c:	697a      	ldr	r2, [r7, #20]
 801701e:	429a      	cmp	r2, r3
 8017020:	d924      	bls.n	801706c <mpool_alloc+0x104>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8017022:	683b      	ldr	r3, [r7, #0]
 8017024:	689b      	ldr	r3, [r3, #8]
 8017026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017028:	1ad3      	subs	r3, r2, r3
 801702a:	613b      	str	r3, [r7, #16]
        offset += pool->leaf->header_size + node_to_alloc->size;
 801702c:	683b      	ldr	r3, [r7, #0]
 801702e:	685b      	ldr	r3, [r3, #4]
 8017030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017034:	68db      	ldr	r3, [r3, #12]
 8017036:	441a      	add	r2, r3
 8017038:	693b      	ldr	r3, [r7, #16]
 801703a:	4413      	add	r3, r2
 801703c:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	689a      	ldr	r2, [r3, #8]
 8017042:	693b      	ldr	r3, [r7, #16]
 8017044:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 8017046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017048:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 801704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801704c:	689c      	ldr	r4, [r3, #8]
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	685b      	ldr	r3, [r3, #4]
 8017052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        new_node = create_node(&pool->mpool[offset],
 8017054:	697a      	ldr	r2, [r7, #20]
 8017056:	1ad2      	subs	r2, r2, r3
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8017058:	683b      	ldr	r3, [r7, #0]
 801705a:	685b      	ldr	r3, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 801705c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801705e:	9300      	str	r3, [sp, #0]
 8017060:	4613      	mov	r3, r2
 8017062:	4622      	mov	r2, r4
 8017064:	f000 f84d 	bl	8017102 <create_node>
 8017068:	6238      	str	r0, [r7, #32]
 801706a:	e008      	b.n	801707e <mpool_alloc+0x116>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 801706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801706e:	68da      	ldr	r2, [r3, #12]
 8017070:	697b      	ldr	r3, [r7, #20]
 8017072:	441a      	add	r2, r3
 8017074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017076:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 8017078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801707a:	685b      	ldr	r3, [r3, #4]
 801707c:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 801707e:	683b      	ldr	r3, [r7, #0]
 8017080:	695b      	ldr	r3, [r3, #20]
 8017082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017084:	429a      	cmp	r2, r3
 8017086:	d102      	bne.n	801708e <mpool_alloc+0x126>
    {
        pool->head = new_node;
 8017088:	683b      	ldr	r3, [r7, #0]
 801708a:	6a3a      	ldr	r2, [r7, #32]
 801708c:	615a      	str	r2, [r3, #20]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 801708e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017090:	f000 f855 	bl	801713e <delink_node>
    
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8017094:	683b      	ldr	r3, [r7, #0]
 8017096:	68da      	ldr	r2, [r3, #12]
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	685b      	ldr	r3, [r3, #4]
 801709c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170a0:	68db      	ldr	r3, [r3, #12]
 80170a2:	440b      	add	r3, r1
 80170a4:	441a      	add	r2, r3
 80170a6:	683b      	ldr	r3, [r7, #0]
 80170a8:	60da      	str	r2, [r3, #12]
    
    if (pool->leaf->clearOnAllocation > 0)
 80170aa:	683b      	ldr	r3, [r7, #0]
 80170ac:	685b      	ldr	r3, [r3, #4]
 80170ae:	695b      	ldr	r3, [r3, #20]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	dd12      	ble.n	80170da <mpool_alloc+0x172>
    {
        char* new_pool = (char*)node_to_alloc->pool;
 80170b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80170ba:	2300      	movs	r3, #0
 80170bc:	61fb      	str	r3, [r7, #28]
 80170be:	e007      	b.n	80170d0 <mpool_alloc+0x168>
 80170c0:	69fb      	ldr	r3, [r7, #28]
 80170c2:	68fa      	ldr	r2, [r7, #12]
 80170c4:	4413      	add	r3, r2
 80170c6:	2200      	movs	r2, #0
 80170c8:	701a      	strb	r2, [r3, #0]
 80170ca:	69fb      	ldr	r3, [r7, #28]
 80170cc:	3301      	adds	r3, #1
 80170ce:	61fb      	str	r3, [r7, #28]
 80170d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170d2:	68da      	ldr	r2, [r3, #12]
 80170d4:	69fb      	ldr	r3, [r7, #28]
 80170d6:	429a      	cmp	r2, r3
 80170d8:	d8f2      	bhi.n	80170c0 <mpool_alloc+0x158>
    }
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 80170da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170dc:	681b      	ldr	r3, [r3, #0]
#endif
}
 80170de:	4618      	mov	r0, r3
 80170e0:	372c      	adds	r7, #44	; 0x2c
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bd90      	pop	{r4, r7, pc}

080170e6 <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 80170e6:	b480      	push	{r7}
 80170e8:	b083      	sub	sp, #12
 80170ea:	af00      	add	r7, sp, #0
 80170ec:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	3307      	adds	r3, #7
 80170f2:	f023 0307 	bic.w	r3, r3, #7
}
 80170f6:	4618      	mov	r0, r3
 80170f8:	370c      	adds	r7, #12
 80170fa:	46bd      	mov	sp, r7
 80170fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017100:	4770      	bx	lr

08017102 <create_node>:

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
 8017102:	b480      	push	{r7}
 8017104:	b087      	sub	sp, #28
 8017106:	af00      	add	r7, sp, #0
 8017108:	60f8      	str	r0, [r7, #12]
 801710a:	60b9      	str	r1, [r7, #8]
 801710c:	607a      	str	r2, [r7, #4]
 801710e:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	617b      	str	r3, [r7, #20]
    node->pool = block_location + header_size;
 8017114:	68fa      	ldr	r2, [r7, #12]
 8017116:	6a3b      	ldr	r3, [r7, #32]
 8017118:	441a      	add	r2, r3
 801711a:	697b      	ldr	r3, [r7, #20]
 801711c:	601a      	str	r2, [r3, #0]
    node->next = next;
 801711e:	697b      	ldr	r3, [r7, #20]
 8017120:	68ba      	ldr	r2, [r7, #8]
 8017122:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	687a      	ldr	r2, [r7, #4]
 8017128:	609a      	str	r2, [r3, #8]
    node->size = size;
 801712a:	697b      	ldr	r3, [r7, #20]
 801712c:	683a      	ldr	r2, [r7, #0]
 801712e:	60da      	str	r2, [r3, #12]
    
    return node;
 8017130:	697b      	ldr	r3, [r7, #20]
}
 8017132:	4618      	mov	r0, r3
 8017134:	371c      	adds	r7, #28
 8017136:	46bd      	mov	sp, r7
 8017138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801713c:	4770      	bx	lr

0801713e <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 801713e:	b480      	push	{r7}
 8017140:	b083      	sub	sp, #12
 8017142:	af00      	add	r7, sp, #0
 8017144:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	685b      	ldr	r3, [r3, #4]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d004      	beq.n	8017158 <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	685b      	ldr	r3, [r3, #4]
 8017152:	687a      	ldr	r2, [r7, #4]
 8017154:	6892      	ldr	r2, [r2, #8]
 8017156:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	689b      	ldr	r3, [r3, #8]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d004      	beq.n	801716a <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	689b      	ldr	r3, [r3, #8]
 8017164:	687a      	ldr	r2, [r7, #4]
 8017166:	6852      	ldr	r2, [r2, #4]
 8017168:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	2200      	movs	r2, #0
 801716e:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	2200      	movs	r2, #0
 8017174:	609a      	str	r2, [r3, #8]
}
 8017176:	bf00      	nop
 8017178:	370c      	adds	r7, #12
 801717a:	46bd      	mov	sp, r7
 801717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017180:	4770      	bx	lr

08017182 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 8017182:	b580      	push	{r7, lr}
 8017184:	b084      	sub	sp, #16
 8017186:	af00      	add	r7, sp, #0
 8017188:	60f8      	str	r0, [r7, #12]
 801718a:	60b9      	str	r1, [r7, #8]
 801718c:	607a      	str	r2, [r7, #4]
 801718e:	603b      	str	r3, [r7, #0]
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
 8017190:	683b      	ldr	r3, [r7, #0]
 8017192:	3318      	adds	r3, #24
 8017194:	687a      	ldr	r2, [r7, #4]
 8017196:	68b9      	ldr	r1, [r7, #8]
 8017198:	68f8      	ldr	r0, [r7, #12]
 801719a:	f000 f804 	bl	80171a6 <tMempool_initToPool>
}
 801719e:	bf00      	nop
 80171a0:	3710      	adds	r7, #16
 80171a2:	46bd      	mov	sp, r7
 80171a4:	bd80      	pop	{r7, pc}

080171a6 <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 80171a6:	b580      	push	{r7, lr}
 80171a8:	b086      	sub	sp, #24
 80171aa:	af00      	add	r7, sp, #0
 80171ac:	60f8      	str	r0, [r7, #12]
 80171ae:	60b9      	str	r1, [r7, #8]
 80171b0:	607a      	str	r2, [r7, #4]
 80171b2:	603b      	str	r3, [r7, #0]
    _tMempool* mm = *mem;
 80171b4:	683b      	ldr	r3, [r7, #0]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	617b      	str	r3, [r7, #20]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80171ba:	6979      	ldr	r1, [r7, #20]
 80171bc:	2018      	movs	r0, #24
 80171be:	f7ff fed3 	bl	8016f68 <mpool_alloc>
 80171c2:	4602      	mov	r2, r0
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	601a      	str	r2, [r3, #0]
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	613b      	str	r3, [r7, #16]
    m->leaf = mm->leaf;
 80171ce:	697b      	ldr	r3, [r7, #20]
 80171d0:	685a      	ldr	r2, [r3, #4]
 80171d2:	693b      	ldr	r3, [r7, #16]
 80171d4:	605a      	str	r2, [r3, #4]
    
    mpool_create (memory, size, m);
 80171d6:	693a      	ldr	r2, [r7, #16]
 80171d8:	6879      	ldr	r1, [r7, #4]
 80171da:	68b8      	ldr	r0, [r7, #8]
 80171dc:	f7ff fe80 	bl	8016ee0 <mpool_create>
}
 80171e0:	bf00      	nop
 80171e2:	3718      	adds	r7, #24
 80171e4:	46bd      	mov	sp, r7
 80171e6:	bd80      	pop	{r7, pc}

080171e8 <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b086      	sub	sp, #24
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
 80171f0:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	617b      	str	r3, [r7, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80171f8:	6979      	ldr	r1, [r7, #20]
 80171fa:	2018      	movs	r0, #24
 80171fc:	f7ff feb4 	bl	8016f68 <mpool_alloc>
 8017200:	4602      	mov	r2, r0
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	601a      	str	r2, [r3, #0]
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	613b      	str	r3, [r7, #16]
    c->mempool = m;
 801720c:	693b      	ldr	r3, [r7, #16]
 801720e:	697a      	ldr	r2, [r7, #20]
 8017210:	601a      	str	r2, [r3, #0]
    LEAF* leaf = c->mempool->leaf;
 8017212:	693b      	ldr	r3, [r7, #16]
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	685b      	ldr	r3, [r3, #4]
 8017218:	60fb      	str	r3, [r7, #12]
    
    c->inc      =  0;
 801721a:	693b      	ldr	r3, [r7, #16]
 801721c:	2200      	movs	r2, #0
 801721e:	609a      	str	r2, [r3, #8]
    c->phase    =  0;
 8017220:	693b      	ldr	r3, [r7, #16]
 8017222:	2200      	movs	r2, #0
 8017224:	605a      	str	r2, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	edd3 7a01 	vldr	s15, [r3, #4]
 801722c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 801724c <tCycle_initToPool+0x64>
 8017230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017234:	693b      	ldr	r3, [r7, #16]
 8017236:	edc3 7a04 	vstr	s15, [r3, #16]
    c->mask = SINE_TABLE_SIZE - 1;
 801723a:	693b      	ldr	r3, [r7, #16]
 801723c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8017240:	615a      	str	r2, [r3, #20]
}
 8017242:	bf00      	nop
 8017244:	3718      	adds	r7, #24
 8017246:	46bd      	mov	sp, r7
 8017248:	bd80      	pop	{r7, pc}
 801724a:	bf00      	nop
 801724c:	4f800000 	.word	0x4f800000

08017250 <tCycle_tick>:
    mpool_free((char*)c, c->mempool);
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
 8017250:	b480      	push	{r7}
 8017252:	b089      	sub	sp, #36	; 0x24
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
    _tCycle* c = *cy;
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	61fb      	str	r3, [r7, #28]
    uint32_t idx;
    float samp0;
    float samp1;
    
    // Phasor increment
    c->phase += c->inc;
 801725e:	69fb      	ldr	r3, [r7, #28]
 8017260:	685b      	ldr	r3, [r3, #4]
 8017262:	69fa      	ldr	r2, [r7, #28]
 8017264:	6892      	ldr	r2, [r2, #8]
 8017266:	441a      	add	r2, r3
 8017268:	69fb      	ldr	r3, [r7, #28]
 801726a:	605a      	str	r2, [r3, #4]
    // Wavetable synthesis
    idx = c->phase >> 21;
 801726c:	69fb      	ldr	r3, [r7, #28]
 801726e:	685b      	ldr	r3, [r3, #4]
 8017270:	0d5b      	lsrs	r3, r3, #21
 8017272:	61bb      	str	r3, [r7, #24]
    tempFrac = (c->phase & 2097151);
 8017274:	69fb      	ldr	r3, [r7, #28]
 8017276:	685b      	ldr	r3, [r3, #4]
 8017278:	f3c3 0314 	ubfx	r3, r3, #0, #21
 801727c:	617b      	str	r3, [r7, #20]
    
    samp0 = __leaf_table_sinewave[idx];
 801727e:	4a17      	ldr	r2, [pc, #92]	; (80172dc <tCycle_tick+0x8c>)
 8017280:	69bb      	ldr	r3, [r7, #24]
 8017282:	009b      	lsls	r3, r3, #2
 8017284:	4413      	add	r3, r2
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	613b      	str	r3, [r7, #16]
    idx = (idx + 1) & c->mask;
 801728a:	69bb      	ldr	r3, [r7, #24]
 801728c:	1c5a      	adds	r2, r3, #1
 801728e:	69fb      	ldr	r3, [r7, #28]
 8017290:	695b      	ldr	r3, [r3, #20]
 8017292:	4013      	ands	r3, r2
 8017294:	61bb      	str	r3, [r7, #24]
    samp1 = __leaf_table_sinewave[idx];
 8017296:	4a11      	ldr	r2, [pc, #68]	; (80172dc <tCycle_tick+0x8c>)
 8017298:	69bb      	ldr	r3, [r7, #24]
 801729a:	009b      	lsls	r3, r3, #2
 801729c:	4413      	add	r3, r2
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	60fb      	str	r3, [r7, #12]
    
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 (2097151 is the 21 bits after the 11 bits that represent the main index)
 80172a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80172a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80172aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80172ae:	697b      	ldr	r3, [r7, #20]
 80172b0:	ee07 3a90 	vmov	s15, r3
 80172b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80172b8:	eddf 6a09 	vldr	s13, [pc, #36]	; 80172e0 <tCycle_tick+0x90>
 80172bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80172c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80172c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80172c8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80172cc:	eeb0 0a67 	vmov.f32	s0, s15
 80172d0:	3724      	adds	r7, #36	; 0x24
 80172d2:	46bd      	mov	sp, r7
 80172d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d8:	4770      	bx	lr
 80172da:	bf00      	nop
 80172dc:	08017514 	.word	0x08017514
 80172e0:	35000004 	.word	0x35000004

080172e4 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, float freq)
{
 80172e4:	b480      	push	{r7}
 80172e6:	b085      	sub	sp, #20
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	6078      	str	r0, [r7, #4]
 80172ec:	ed87 0a00 	vstr	s0, [r7]
    _tCycle* c = *cy;
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	60fb      	str	r3, [r7, #12]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	683a      	ldr	r2, [r7, #0]
 80172fa:	60da      	str	r2, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8017302:	edd7 7a00 	vldr	s15, [r7]
 8017306:	ee67 7a27 	vmul.f32	s15, s14, s15
 801730a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801730e:	ee17 2a90 	vmov	r2, s15
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	609a      	str	r2, [r3, #8]
}
 8017316:	bf00      	nop
 8017318:	3714      	adds	r7, #20
 801731a:	46bd      	mov	sp, r7
 801731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017320:	4770      	bx	lr
	...

08017324 <LEAF_init>:
#include "../leaf.h"

#endif

void LEAF_init(LEAF* const leaf, float sr, char* memory, size_t memorysize, float(*random)(void))
{
 8017324:	b580      	push	{r7, lr}
 8017326:	b088      	sub	sp, #32
 8017328:	af00      	add	r7, sp, #0
 801732a:	6178      	str	r0, [r7, #20]
 801732c:	ed87 0a04 	vstr	s0, [r7, #16]
 8017330:	60f9      	str	r1, [r7, #12]
 8017332:	60ba      	str	r2, [r7, #8]
 8017334:	607b      	str	r3, [r7, #4]
    leaf->_internal_mempool.leaf = leaf;
 8017336:	697b      	ldr	r3, [r7, #20]
 8017338:	697a      	ldr	r2, [r7, #20]
 801733a:	621a      	str	r2, [r3, #32]
    leaf_pool_init(leaf, memory, memorysize);
 801733c:	68ba      	ldr	r2, [r7, #8]
 801733e:	68f9      	ldr	r1, [r7, #12]
 8017340:	6978      	ldr	r0, [r7, #20]
 8017342:	f7ff fdfb 	bl	8016f3c <leaf_pool_init>
    
    leaf->sampleRate = sr;
 8017346:	697b      	ldr	r3, [r7, #20]
 8017348:	693a      	ldr	r2, [r7, #16]
 801734a:	601a      	str	r2, [r3, #0]
    
    leaf->invSampleRate = 1.0f/sr;
 801734c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017350:	ed97 7a04 	vldr	s14, [r7, #16]
 8017354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017358:	697b      	ldr	r3, [r7, #20]
 801735a:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801735e:	697b      	ldr	r3, [r7, #20]
 8017360:	edd3 7a01 	vldr	s15, [r3, #4]
 8017364:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80173b8 <LEAF_init+0x94>
 8017368:	ee67 7a87 	vmul.f32	s15, s15, s14
 801736c:	697b      	ldr	r3, [r7, #20]
 801736e:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf->random = random;
 8017372:	697b      	ldr	r3, [r7, #20]
 8017374:	687a      	ldr	r2, [r7, #4]
 8017376:	611a      	str	r2, [r3, #16]
    
    leaf->clearOnAllocation = 0;
 8017378:	697b      	ldr	r3, [r7, #20]
 801737a:	2200      	movs	r2, #0
 801737c:	615a      	str	r2, [r3, #20]
    
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 801737e:	697b      	ldr	r3, [r7, #20]
 8017380:	4a0e      	ldr	r2, [pc, #56]	; (80173bc <LEAF_init+0x98>)
 8017382:	639a      	str	r2, [r3, #56]	; 0x38
    
    for (int i = 0; i < LEAFErrorNil; ++i)
 8017384:	2300      	movs	r3, #0
 8017386:	61fb      	str	r3, [r7, #28]
 8017388:	e009      	b.n	801739e <LEAF_init+0x7a>
        leaf->errorState[i] = 0;
 801738a:	697a      	ldr	r2, [r7, #20]
 801738c:	69fb      	ldr	r3, [r7, #28]
 801738e:	330e      	adds	r3, #14
 8017390:	009b      	lsls	r3, r3, #2
 8017392:	4413      	add	r3, r2
 8017394:	2200      	movs	r2, #0
 8017396:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 8017398:	69fb      	ldr	r3, [r7, #28]
 801739a:	3301      	adds	r3, #1
 801739c:	61fb      	str	r3, [r7, #28]
 801739e:	69fb      	ldr	r3, [r7, #28]
 80173a0:	2b02      	cmp	r3, #2
 80173a2:	ddf2      	ble.n	801738a <LEAF_init+0x66>
    
    leaf->allocCount = 0;
 80173a4:	697b      	ldr	r3, [r7, #20]
 80173a6:	2200      	movs	r2, #0
 80173a8:	649a      	str	r2, [r3, #72]	; 0x48
    
    leaf->freeCount = 0;
 80173aa:	697b      	ldr	r3, [r7, #20]
 80173ac:	2200      	movs	r2, #0
 80173ae:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80173b0:	bf00      	nop
 80173b2:	3720      	adds	r7, #32
 80173b4:	46bd      	mov	sp, r7
 80173b6:	bd80      	pop	{r7, pc}
 80173b8:	40c90fdb 	.word	0x40c90fdb
 80173bc:	080173c1 	.word	0x080173c1

080173c0 <LEAF_defaultErrorCallback>:
{
    return leaf->sampleRate;
}

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 80173c0:	b480      	push	{r7}
 80173c2:	b083      	sub	sp, #12
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	6078      	str	r0, [r7, #4]
 80173c8:	460b      	mov	r3, r1
 80173ca:	70fb      	strb	r3, [r7, #3]
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 80173cc:	bf00      	nop
 80173ce:	370c      	adds	r7, #12
 80173d0:	46bd      	mov	sp, r7
 80173d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d6:	4770      	bx	lr

080173d8 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 80173d8:	b580      	push	{r7, lr}
 80173da:	b082      	sub	sp, #8
 80173dc:	af00      	add	r7, sp, #0
 80173de:	6078      	str	r0, [r7, #4]
 80173e0:	460b      	mov	r3, r1
 80173e2:	70fb      	strb	r3, [r7, #3]
    leaf->errorState[whichone] = 1;
 80173e4:	78fb      	ldrb	r3, [r7, #3]
 80173e6:	687a      	ldr	r2, [r7, #4]
 80173e8:	330e      	adds	r3, #14
 80173ea:	009b      	lsls	r3, r3, #2
 80173ec:	4413      	add	r3, r2
 80173ee:	2201      	movs	r2, #1
 80173f0:	605a      	str	r2, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173f6:	78fa      	ldrb	r2, [r7, #3]
 80173f8:	4611      	mov	r1, r2
 80173fa:	6878      	ldr	r0, [r7, #4]
 80173fc:	4798      	blx	r3
}
 80173fe:	bf00      	nop
 8017400:	3708      	adds	r7, #8
 8017402:	46bd      	mov	sp, r7
 8017404:	bd80      	pop	{r7, pc}
	...

08017408 <__libc_init_array>:
 8017408:	b570      	push	{r4, r5, r6, lr}
 801740a:	4d0d      	ldr	r5, [pc, #52]	; (8017440 <__libc_init_array+0x38>)
 801740c:	4c0d      	ldr	r4, [pc, #52]	; (8017444 <__libc_init_array+0x3c>)
 801740e:	1b64      	subs	r4, r4, r5
 8017410:	10a4      	asrs	r4, r4, #2
 8017412:	2600      	movs	r6, #0
 8017414:	42a6      	cmp	r6, r4
 8017416:	d109      	bne.n	801742c <__libc_init_array+0x24>
 8017418:	4d0b      	ldr	r5, [pc, #44]	; (8017448 <__libc_init_array+0x40>)
 801741a:	4c0c      	ldr	r4, [pc, #48]	; (801744c <__libc_init_array+0x44>)
 801741c:	f000 f820 	bl	8017460 <_init>
 8017420:	1b64      	subs	r4, r4, r5
 8017422:	10a4      	asrs	r4, r4, #2
 8017424:	2600      	movs	r6, #0
 8017426:	42a6      	cmp	r6, r4
 8017428:	d105      	bne.n	8017436 <__libc_init_array+0x2e>
 801742a:	bd70      	pop	{r4, r5, r6, pc}
 801742c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017430:	4798      	blx	r3
 8017432:	3601      	adds	r6, #1
 8017434:	e7ee      	b.n	8017414 <__libc_init_array+0xc>
 8017436:	f855 3b04 	ldr.w	r3, [r5], #4
 801743a:	4798      	blx	r3
 801743c:	3601      	adds	r6, #1
 801743e:	e7f2      	b.n	8017426 <__libc_init_array+0x1e>
 8017440:	0801951c 	.word	0x0801951c
 8017444:	0801951c 	.word	0x0801951c
 8017448:	0801951c 	.word	0x0801951c
 801744c:	08019520 	.word	0x08019520

08017450 <memset>:
 8017450:	4402      	add	r2, r0
 8017452:	4603      	mov	r3, r0
 8017454:	4293      	cmp	r3, r2
 8017456:	d100      	bne.n	801745a <memset+0xa>
 8017458:	4770      	bx	lr
 801745a:	f803 1b01 	strb.w	r1, [r3], #1
 801745e:	e7f9      	b.n	8017454 <memset+0x4>

08017460 <_init>:
 8017460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017462:	bf00      	nop
 8017464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017466:	bc08      	pop	{r3}
 8017468:	469e      	mov	lr, r3
 801746a:	4770      	bx	lr

0801746c <_fini>:
 801746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801746e:	bf00      	nop
 8017470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017472:	bc08      	pop	{r3}
 8017474:	469e      	mov	lr, r3
 8017476:	4770      	bx	lr
