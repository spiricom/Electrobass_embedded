
Electrobass_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eba8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009188  0800ee40  0800ee40  0001ee40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08017fc8  08017fc8  00027fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08017fcc  08017fcc  00027fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08017fd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001980  20000074  08018044  00030074  2**2
                  ALLOC
  7 ._user_heap_stack 00006004  200019f4  08018044  000319f4  2**0
                  ALLOC
  8 .RAM_D1       0007a120  24000000  24000000  00040000  2**5
                  ALLOC
  9 .RAM_D2       00000440  30000000  30000000  00040000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002d912  00000000  00000000  000300a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006018  00000000  00000000  0005d9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002260  00000000  00000000  000639d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002020  00000000  00000000  00065c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003fc84  00000000  00000000  00067c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00031ad5  00000000  00000000  000a78d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016d101  00000000  00000000  000d93a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  002464aa  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009090  00000000  00000000  002464fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000074 	.word	0x20000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ee28 	.word	0x0800ee28

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000078 	.word	0x20000078
 80002d4:	0800ee28 	.word	0x0800ee28

080002d8 <audio_init>:

tMempool smallPool;
tMempool largePool;

void audio_init(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 80002e2:	4b23      	ldr	r3, [pc, #140]	; (8000370 <audio_init+0x98>)
 80002e4:	4a23      	ldr	r2, [pc, #140]	; (8000374 <audio_init+0x9c>)
 80002e6:	4924      	ldr	r1, [pc, #144]	; (8000378 <audio_init+0xa0>)
 80002e8:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800037c <audio_init+0xa4>
 80002ec:	4824      	ldr	r0, [pc, #144]	; (8000380 <audio_init+0xa8>)
 80002ee:	f00e fc0d 	bl	800eb0c <LEAF_init>
	tMempool_init (&smallPool, smallMemory, SMALL_MEM_SIZE, &leaf);
 80002f2:	4b23      	ldr	r3, [pc, #140]	; (8000380 <audio_init+0xa8>)
 80002f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80002f8:	4922      	ldr	r1, [pc, #136]	; (8000384 <audio_init+0xac>)
 80002fa:	4823      	ldr	r0, [pc, #140]	; (8000388 <audio_init+0xb0>)
 80002fc:	f00d fdd9 	bl	800deb2 <tMempool_init>
	//tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);
	tMBSaw_initToPool(&myOsc, &smallPool);
 8000300:	4921      	ldr	r1, [pc, #132]	; (8000388 <audio_init+0xb0>)
 8000302:	4822      	ldr	r0, [pc, #136]	; (800038c <audio_init+0xb4>)
 8000304:	f00e f9ca 	bl	800e69c <tMBSaw_initToPool>
	tMBSaw_setFreq(&myOsc, 440.0f);
 8000308:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8000390 <audio_init+0xb8>
 800030c:	481f      	ldr	r0, [pc, #124]	; (800038c <audio_init+0xb4>)
 800030e:	f00e fbea 	bl	800eae6 <tMBSaw_setFreq>
	tSimplePoly_init(&poly, 1, &leaf);
 8000312:	4a1b      	ldr	r2, [pc, #108]	; (8000380 <audio_init+0xa8>)
 8000314:	2101      	movs	r1, #1
 8000316:	481f      	ldr	r0, [pc, #124]	; (8000394 <audio_init+0xbc>)
 8000318:	f00d ff54 	bl	800e1c4 <tSimplePoly_init>
	HAL_Delay(10);
 800031c:	200a      	movs	r0, #10
 800031e:	f001 ff25 	bl	800216c <HAL_Delay>
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8000322:	2300      	movs	r3, #0
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	e007      	b.n	8000338 <audio_init+0x60>
	{
		audioOutBuffer[i] = 0;
 8000328:	4a1b      	ldr	r2, [pc, #108]	; (8000398 <audio_init+0xc0>)
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	2100      	movs	r1, #0
 800032e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	3301      	adds	r3, #1
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	2b7f      	cmp	r3, #127	; 0x7f
 800033c:	ddf4      	ble.n	8000328 <audio_init+0x50>
	}
	HAL_Delay(1);
 800033e:	2001      	movs	r0, #1
 8000340:	f001 ff14 	bl	800216c <HAL_Delay>
	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8000344:	2280      	movs	r2, #128	; 0x80
 8000346:	4914      	ldr	r1, [pc, #80]	; (8000398 <audio_init+0xc0>)
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	f009 fa0d 	bl	8009768 <HAL_SAI_Transmit_DMA>
 800034e:	4603      	mov	r3, r0
 8000350:	461a      	mov	r2, r3
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <audio_init+0xc4>)
 8000354:	701a      	strb	r2, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8000356:	2280      	movs	r2, #128	; 0x80
 8000358:	4911      	ldr	r1, [pc, #68]	; (80003a0 <audio_init+0xc8>)
 800035a:	6838      	ldr	r0, [r7, #0]
 800035c:	f009 faba 	bl	80098d4 <HAL_SAI_Receive_DMA>
 8000360:	4603      	mov	r3, r0
 8000362:	461a      	mov	r2, r3
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <audio_init+0xcc>)
 8000366:	701a      	strb	r2, [r3, #0]
}
 8000368:	bf00      	nop
 800036a:	3710      	adds	r7, #16
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	080012dd 	.word	0x080012dd
 8000374:	0007a120 	.word	0x0007a120
 8000378:	24000000 	.word	0x24000000
 800037c:	473b8000 	.word	0x473b8000
 8000380:	2000142c 	.word	0x2000142c
 8000384:	200000a4 	.word	0x200000a4
 8000388:	2000147c 	.word	0x2000147c
 800038c:	20000098 	.word	0x20000098
 8000390:	43dc0000 	.word	0x43dc0000
 8000394:	2000009c 	.word	0x2000009c
 8000398:	30000000 	.word	0x30000000
 800039c:	20000090 	.word	0x20000090
 80003a0:	30000200 	.word	0x30000200
 80003a4:	20000091 	.word	0x20000091

080003a8 <audioFrame>:


void audioFrame(uint16_t buffer_offset)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	80fb      	strh	r3, [r7, #6]
	int i;
	int32_t current_sample = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 80003b6:	2300      	movs	r3, #0
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	e02b      	b.n	8000414 <audioFrame+0x6c>
	{
		if ((i & 1) == 0)
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d11c      	bne.n	8000400 <audioFrame+0x58>
		{
			current_sample = (int32_t)(audioTickL((float) (audioInBuffer[buffer_offset + i] * INV_TWO_TO_23)) * TWO_TO_23);
 80003c6:	88fa      	ldrh	r2, [r7, #6]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	4413      	add	r3, r2
 80003cc:	4a15      	ldr	r2, [pc, #84]	; (8000424 <audioFrame+0x7c>)
 80003ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d2:	ee07 3a90 	vmov	s15, r3
 80003d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003da:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000428 <audioFrame+0x80>
 80003de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003e2:	eeb0 0a67 	vmov.f32	s0, s15
 80003e6:	f000 f825 	bl	8000434 <audioTickL>
 80003ea:	eef0 7a40 	vmov.f32	s15, s0
 80003ee:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800042c <audioFrame+0x84>
 80003f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80003fa:	ee17 3a90 	vmov	r3, s15
 80003fe:	60bb      	str	r3, [r7, #8]
		else
		{
			//current_sample = (int32_t)(audioTickL((float) (audioInBuffer[buffer_offset + i] * INV_TWO_TO_23)) * TWO_TO_23);
		}

		audioOutBuffer[buffer_offset + i] = current_sample;
 8000400:	88fa      	ldrh	r2, [r7, #6]
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	4413      	add	r3, r2
 8000406:	490a      	ldr	r1, [pc, #40]	; (8000430 <audioFrame+0x88>)
 8000408:	68ba      	ldr	r2, [r7, #8]
 800040a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	3301      	adds	r3, #1
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	2b3f      	cmp	r3, #63	; 0x3f
 8000418:	ddd0      	ble.n	80003bc <audioFrame+0x14>
	}

}
 800041a:	bf00      	nop
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	30000200 	.word	0x30000200
 8000428:	34000000 	.word	0x34000000
 800042c:	4b000000 	.word	0x4b000000
 8000430:	30000000 	.word	0x30000000

08000434 <audioTickL>:


float audioTickL(float audioIn)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	ed87 0a01 	vstr	s0, [r7, #4]

	sample = 0.0f;
 800043e:	4b31      	ldr	r3, [pc, #196]	; (8000504 <audioTickL+0xd0>)
 8000440:	f04f 0200 	mov.w	r2, #0
 8000444:	601a      	str	r2, [r3, #0]


	tMBSaw_setFreq(&myOsc, mtof(bend + (float)tSimplePoly_getPitch(&poly, 0)));
 8000446:	2100      	movs	r1, #0
 8000448:	482f      	ldr	r0, [pc, #188]	; (8000508 <audioTickL+0xd4>)
 800044a:	f00e f8fb 	bl	800e644 <tSimplePoly_getPitch>
 800044e:	ee07 0a90 	vmov	s15, r0
 8000452:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000456:	4b2d      	ldr	r3, [pc, #180]	; (800050c <audioTickL+0xd8>)
 8000458:	edd3 7a00 	vldr	s15, [r3]
 800045c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000460:	eeb0 0a67 	vmov.f32	s0, s15
 8000464:	f00d fa72 	bl	800d94c <mtof>
 8000468:	eef0 7a40 	vmov.f32	s15, s0
 800046c:	eeb0 0a67 	vmov.f32	s0, s15
 8000470:	4827      	ldr	r0, [pc, #156]	; (8000510 <audioTickL+0xdc>)
 8000472:	f00e fb38 	bl	800eae6 <tMBSaw_setFreq>
	uint8_t vel = tSimplePoly_getVelocity(&poly, 0);
 8000476:	2100      	movs	r1, #0
 8000478:	4823      	ldr	r0, [pc, #140]	; (8000508 <audioTickL+0xd4>)
 800047a:	f00e f8f9 	bl	800e670 <tSimplePoly_getVelocity>
 800047e:	4603      	mov	r3, r0
 8000480:	73fb      	strb	r3, [r7, #15]
	sample += tMBSaw_tick(&myOsc); // tick the oscillator
 8000482:	4823      	ldr	r0, [pc, #140]	; (8000510 <audioTickL+0xdc>)
 8000484:	f00e f95a 	bl	800e73c <tMBSaw_tick>
 8000488:	eeb0 7a40 	vmov.f32	s14, s0
 800048c:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <audioTickL+0xd0>)
 800048e:	edd3 7a00 	vldr	s15, [r3]
 8000492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000496:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <audioTickL+0xd0>)
 8000498:	edc3 7a00 	vstr	s15, [r3]
	//sample *= ((float)vel) / 127.0f;
	float velocity = (float) vel / 127.0f;
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	ee07 3a90 	vmov	s15, r3
 80004a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004a6:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000514 <audioTickL+0xe0>
 80004aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80004ae:	edc7 7a02 	vstr	s15, [r7, #8]
    velocity = ((0.007685533519034f*velocity*127.f) + 0.0239372430f);
 80004b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80004b6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000518 <audioTickL+0xe4>
 80004ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004be:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000514 <audioTickL+0xe0>
 80004c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004c6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800051c <audioTickL+0xe8>
 80004ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80004ce:	edc7 7a02 	vstr	s15, [r7, #8]
    velocity = velocity * velocity;
 80004d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80004d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80004da:	edc7 7a02 	vstr	s15, [r7, #8]
    sample *= velocity;
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <audioTickL+0xd0>)
 80004e0:	ed93 7a00 	vldr	s14, [r3]
 80004e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80004e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <audioTickL+0xd0>)
 80004ee:	edc3 7a00 	vstr	s15, [r3]
	//sample *= ((float)vel) / 127.0f;;
	//sample *= 0.33f; // drop the gain because we've got three full volume sine waves summing here

	return sample;
 80004f2:	4b04      	ldr	r3, [pc, #16]	; (8000504 <audioTickL+0xd0>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	ee07 3a90 	vmov	s15, r3
}
 80004fa:	eeb0 0a67 	vmov.f32	s0, s15
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000094 	.word	0x20000094
 8000508:	2000009c 	.word	0x2000009c
 800050c:	200000a0 	.word	0x200000a0
 8000510:	20000098 	.word	0x20000098
 8000514:	42fe0000 	.word	0x42fe0000
 8000518:	3bfbd6ee 	.word	0x3bfbd6ee
 800051c:	3cc41809 	.word	0x3cc41809

08000520 <sendNoteOn>:



void sendNoteOn(uint8_t note, uint8_t velocity)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	460a      	mov	r2, r1
 800052a:	71fb      	strb	r3, [r7, #7]
 800052c:	4613      	mov	r3, r2
 800052e:	71bb      	strb	r3, [r7, #6]
	if (velocity > 0)
 8000530:	79bb      	ldrb	r3, [r7, #6]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d006      	beq.n	8000544 <sendNoteOn+0x24>
	{
		tSimplePoly_noteOn(&poly, note, velocity);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	79ba      	ldrb	r2, [r7, #6]
 800053a:	4619      	mov	r1, r3
 800053c:	4806      	ldr	r0, [pc, #24]	; (8000558 <sendNoteOn+0x38>)
 800053e:	f00d febf 	bl	800e2c0 <tSimplePoly_noteOn>
	}
	else
	{
		tSimplePoly_noteOff(&poly, note);
	}
}
 8000542:	e004      	b.n	800054e <sendNoteOn+0x2e>
		tSimplePoly_noteOff(&poly, note);
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	4619      	mov	r1, r3
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <sendNoteOn+0x38>)
 800054a:	f00d ffd9 	bl	800e500 <tSimplePoly_noteOff>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	2000009c 	.word	0x2000009c

0800055c <sendCtrl>:
void sendCtrl(uint8_t value, uint8_t ctrl)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	460a      	mov	r2, r1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	4613      	mov	r3, r2
 800056a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <sendCtrl+0x20>)
 8000570:	f004 ff2d 	bl	80053ce <HAL_GPIO_TogglePin>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	58020800 	.word	0x58020800

08000580 <sendPitchBend>:
void sendPitchBend(uint8_t value, uint8_t ctrl)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
	int bendInt = value + (ctrl << 7);
 8000590:	79fa      	ldrb	r2, [r7, #7]
 8000592:	79bb      	ldrb	r3, [r7, #6]
 8000594:	01db      	lsls	r3, r3, #7
 8000596:	4413      	add	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
	bendInt = bendInt - 8192;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80005a0:	60fb      	str	r3, [r7, #12]
	bend = bendInt * 0.002929866324849f; //divide by (16383 / 48 semitones)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	ee07 3a90 	vmov	s15, r3
 80005a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ac:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80005c8 <sendPitchBend+0x48>
 80005b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <sendPitchBend+0x4c>)
 80005b6:	edc3 7a00 	vstr	s15, [r3]

}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	3b400300 	.word	0x3b400300
 80005cc:	200000a0 	.word	0x200000a0

080005d0 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	audioFrame(HALF_BUFFER_SIZE);
 80005d8:	2040      	movs	r0, #64	; 0x40
 80005da:	f7ff fee5 	bl	80003a8 <audioFrame>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
	audioFrame(0);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f7ff feda 	bl	80003a8 <audioFrame>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <codec_init>:
    CODEC_RATE_44K_44K = 0x08 << 2,
};


void codec_init(I2C_HandleTypeDef* i2c)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]

    // Determine dev_address
    // I2C Driver knows to shift the address
    int dev_addr = W8731_ADDR_0;
 8000604:	231a      	movs	r3, #26
 8000606:	617b      	str	r3, [r7, #20]

    int res;
    // Reset
    res = WriteControlRegister(i2c, CODEC_REG_RESET, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	210f      	movs	r1, #15
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 f853 	bl	80006b8 <WriteControlRegister>
 8000612:	6138      	str	r0, [r7, #16]

    // Set Line Inputs to 0DB
    res = WriteControlRegister(i2c, CODEC_REG_LEFT_LINE_IN, CODEC_INPUT_0_DB);
 8000614:	2217      	movs	r2, #23
 8000616:	2100      	movs	r1, #0
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f84d 	bl	80006b8 <WriteControlRegister>
 800061e:	6138      	str	r0, [r7, #16]

    res = WriteControlRegister(i2c, CODEC_REG_RIGHT_LINE_IN, CODEC_INPUT_0_DB);
 8000620:	2217      	movs	r2, #23
 8000622:	2101      	movs	r1, #1
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f847 	bl	80006b8 <WriteControlRegister>
 800062a:	6138      	str	r0, [r7, #16]

    // Set Headphone To Mute (and disable?)
    res = WriteControlRegister(i2c, CODEC_REG_LEFT_HEADPHONES_OUT,
 800062c:	2200      	movs	r2, #0
 800062e:	2102      	movs	r1, #2
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 f841 	bl	80006b8 <WriteControlRegister>
 8000636:	6138      	str	r0, [r7, #16]
                               CODEC_HEADPHONES_MUTE);

    res = WriteControlRegister(i2c, CODEC_REG_RIGHT_HEADPHONES_OUT,
 8000638:	2200      	movs	r2, #0
 800063a:	2103      	movs	r1, #3
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f000 f83b 	bl	80006b8 <WriteControlRegister>
 8000642:	6138      	str	r0, [r7, #16]
                               CODEC_HEADPHONES_MUTE);


    // Analog and Digital Routing
    res = WriteControlRegister(i2c, CODEC_REG_ANALOGUE_ROUTING,
 8000644:	2212      	movs	r2, #18
 8000646:	2104      	movs	r1, #4
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f835 	bl	80006b8 <WriteControlRegister>
 800064e:	6138      	str	r0, [r7, #16]
                               CODEC_MIC_MUTE | CODEC_ADC_LINE
                                   | CODEC_OUTPUT_DAC_ENABLE);


    res = WriteControlRegister(i2c, CODEC_REG_DIGITAL_ROUTING,
 8000650:	2200      	movs	r2, #0
 8000652:	2105      	movs	r1, #5
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 f82f 	bl	80006b8 <WriteControlRegister>
 800065a:	6138      	str	r0, [r7, #16]
                               CODEC_DEEMPHASIS_NONE);


    // Configure power management
    uint8_t power_down_reg = CODEC_POWER_DOWN_MIC | CODEC_POWER_DOWN_CLOCK_OUTPUT;
 800065c:	2342      	movs	r3, #66	; 0x42
 800065e:	73fb      	strb	r3, [r7, #15]

    power_down_reg |= CODEC_POWER_DOWN_OSCILLATOR;
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	f043 0320 	orr.w	r3, r3, #32
 8000666:	73fb      	strb	r3, [r7, #15]
    res = WriteControlRegister(i2c, CODEC_REG_POWER_MANAGEMENT, power_down_reg);
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	b29b      	uxth	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	2106      	movs	r1, #6
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f821 	bl	80006b8 <WriteControlRegister>
 8000676:	6138      	str	r0, [r7, #16]


    // Digital Format
    uint8_t format_byte;
    format_byte = (MSB_FIRST_LJ) | (WL_BITS_24);
 8000678:	2309      	movs	r3, #9
 800067a:	73bb      	strb	r3, [r7, #14]
    format_byte |= CODEC_FORMAT_SLAVE;
    res = WriteControlRegister(i2c, CODEC_REG_DIGITAL_FORMAT, format_byte);
 800067c:	7bbb      	ldrb	r3, [r7, #14]
 800067e:	b29b      	uxth	r3, r3
 8000680:	461a      	mov	r2, r3
 8000682:	2107      	movs	r1, #7
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f817 	bl	80006b8 <WriteControlRegister>
 800068a:	6138      	str	r0, [r7, #16]


    // samplerate
    // TODO: add support for other samplerates
    res = WriteControlRegister(i2c, CODEC_REG_SAMPLE_RATE, CODEC_RATE_48K_48K);
 800068c:	2200      	movs	r2, #0
 800068e:	2108      	movs	r1, #8
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f811 	bl	80006b8 <WriteControlRegister>
 8000696:	6138      	str	r0, [r7, #16]


    res = WriteControlRegister(i2c, CODEC_REG_ACTIVE, 0x00);
 8000698:	2200      	movs	r2, #0
 800069a:	2109      	movs	r1, #9
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 f80b 	bl	80006b8 <WriteControlRegister>
 80006a2:	6138      	str	r0, [r7, #16]


    // Enable
    res = WriteControlRegister(i2c, CODEC_REG_ACTIVE, 0x01);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2109      	movs	r1, #9
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 f805 	bl	80006b8 <WriteControlRegister>
 80006ae:	6138      	str	r0, [r7, #16]

}
 80006b0:	bf00      	nop
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <WriteControlRegister>:

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af02      	add	r7, sp, #8
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
 80006c4:	4613      	mov	r3, r2
 80006c6:	803b      	strh	r3, [r7, #0]
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	b25a      	sxtb	r2, r3
 80006ce:	883b      	ldrh	r3, [r7, #0]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	73fb      	strb	r3, [r7, #15]
    uint8_t byte_2  = data & 0xff;
 80006e2:	883b      	ldrh	r3, [r7, #0]
 80006e4:	73bb      	strb	r3, [r7, #14]
    uint8_t buff[2] = {byte_1, byte_2};
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	723b      	strb	r3, [r7, #8]
 80006ea:	7bbb      	ldrb	r3, [r7, #14]
 80006ec:	727b      	strb	r3, [r7, #9]
    uint8_t result = HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
 80006ee:	f107 0208 	add.w	r2, r7, #8
 80006f2:	23fa      	movs	r3, #250	; 0xfa
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2302      	movs	r3, #2
 80006f8:	2134      	movs	r1, #52	; 0x34
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f004 ff12 	bl	8005524 <HAL_I2C_Master_Transmit>
 8000700:	4603      	mov	r3, r0
 8000702:	737b      	strb	r3, [r7, #13]
                                              2, 250);

    HAL_Delay(10);
 8000704:	200a      	movs	r0, #10
 8000706:	f001 fd31 	bl	800216c <HAL_Delay>
    return 1;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2224      	movs	r2, #36	; 0x24
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f00e fa9d 	bl	800ec60 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_DAC1_Init+0x70>)
 8000728:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_DAC1_Init+0x74>)
 800072a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800072c:	4815      	ldr	r0, [pc, #84]	; (8000784 <MX_DAC1_Init+0x70>)
 800072e:	f001 fed9 	bl	80024e4 <HAL_DAC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000738:	f000 fee2 	bl	8001500 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8000740:	2302      	movs	r3, #2
 8000742:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000748:	2301      	movs	r3, #1
 800074a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	4619      	mov	r1, r3
 8000756:	480b      	ldr	r0, [pc, #44]	; (8000784 <MX_DAC1_Init+0x70>)
 8000758:	f001 fee6 	bl	8002528 <HAL_DAC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000762:	f000 fecd 	bl	8001500 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2210      	movs	r2, #16
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_DAC1_Init+0x70>)
 800076e:	f001 fedb 	bl	8002528 <HAL_DAC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000778:	f000 fec2 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	; 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20001480 	.word	0x20001480
 8000788:	40007400 	.word	0x40007400

0800078c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a18      	ldr	r2, [pc, #96]	; (800080c <HAL_DAC_MspInit+0x80>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d129      	bne.n	8000802 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_DAC_MspInit+0x84>)
 80007b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80007b4:	4a16      	ldr	r2, [pc, #88]	; (8000810 <HAL_DAC_MspInit+0x84>)
 80007b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_DAC_MspInit+0x84>)
 80007c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80007c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <HAL_DAC_MspInit+0x84>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <HAL_DAC_MspInit+0x84>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <HAL_DAC_MspInit+0x84>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007ea:	2330      	movs	r3, #48	; 0x30
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ee:	2303      	movs	r3, #3
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <HAL_DAC_MspInit+0x88>)
 80007fe:	f004 fc05 	bl	800500c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40007400 	.word	0x40007400
 8000810:	58024400 	.word	0x58024400
 8000814:	58020000 	.word	0x58020000

08000818 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_DMA_Init+0x7c>)
 8000820:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000824:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <MX_DMA_Init+0x7c>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_DMA_Init+0x7c>)
 8000830:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	200c      	movs	r0, #12
 8000842:	f001 fd9e 	bl	8002382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000846:	200c      	movs	r0, #12
 8000848:	f001 fdb5 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	200d      	movs	r0, #13
 8000852:	f001 fd96 	bl	8002382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000856:	200d      	movs	r0, #13
 8000858:	f001 fdad 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2100      	movs	r1, #0
 8000860:	2011      	movs	r0, #17
 8000862:	f001 fd8e 	bl	8002382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000866:	2011      	movs	r0, #17
 8000868:	f001 fda5 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	202f      	movs	r0, #47	; 0x2f
 8000872:	f001 fd86 	bl	8002382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000876:	202f      	movs	r0, #47	; 0x2f
 8000878:	f001 fd9d 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	2066      	movs	r0, #102	; 0x66
 8000882:	f001 fd7e 	bl	8002382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8000886:	2066      	movs	r0, #102	; 0x66
 8000888:	f001 fd95 	bl	80023b6 <HAL_NVIC_EnableIRQ>

}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	58024400 	.word	0x58024400

08000898 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]
 80008ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_FMC_Init+0x94>)
 80008b2:	4a1f      	ldr	r2, [pc, #124]	; (8000930 <MX_FMC_Init+0x98>)
 80008b4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_FMC_Init+0x94>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_FMC_Init+0x94>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_FMC_Init+0x94>)
 80008c4:	2208      	movs	r2, #8
 80008c6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_FMC_Init+0x94>)
 80008ca:	2220      	movs	r2, #32
 80008cc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_FMC_Init+0x94>)
 80008d0:	2240      	movs	r2, #64	; 0x40
 80008d2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_FMC_Init+0x94>)
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_FMC_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_FMC_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_FMC_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_FMC_Init+0x94>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80008f2:	2310      	movs	r3, #16
 80008f4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80008f6:	2310      	movs	r3, #16
 80008f8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80008fa:	2310      	movs	r3, #16
 80008fc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80008fe:	2310      	movs	r3, #16
 8000900:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000902:	2310      	movs	r3, #16
 8000904:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000906:	2310      	movs	r3, #16
 8000908:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800090a:	2310      	movs	r3, #16
 800090c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <MX_FMC_Init+0x94>)
 8000914:	f00b f906 	bl	800bb24 <HAL_SDRAM_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800091e:	f000 fdef 	bl	8001500 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000922:	bf00      	nop
 8000924:	3720      	adds	r7, #32
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20001494 	.word	0x20001494
 8000930:	52004140 	.word	0x52004140

08000934 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000948:	4b3d      	ldr	r3, [pc, #244]	; (8000a40 <HAL_FMC_MspInit+0x10c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d172      	bne.n	8000a36 <HAL_FMC_MspInit+0x102>
    return;
  }
  FMC_Initialized = 1;
 8000950:	4b3b      	ldr	r3, [pc, #236]	; (8000a40 <HAL_FMC_MspInit+0x10c>)
 8000952:	2201      	movs	r2, #1
 8000954:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000956:	4b3b      	ldr	r3, [pc, #236]	; (8000a44 <HAL_FMC_MspInit+0x110>)
 8000958:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800095c:	4a39      	ldr	r2, [pc, #228]	; (8000a44 <HAL_FMC_MspInit+0x110>)
 800095e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000962:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000966:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <HAL_FMC_MspInit+0x110>)
 8000968:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800096c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
 8000974:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000978:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000986:	230c      	movs	r3, #12
 8000988:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4619      	mov	r1, r3
 800098e:	482e      	ldr	r0, [pc, #184]	; (8000a48 <HAL_FMC_MspInit+0x114>)
 8000990:	f004 fb3c 	bl	800500c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000994:	f248 1337 	movw	r3, #33079	; 0x8137
 8000998:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a6:	230c      	movs	r3, #12
 80009a8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	4827      	ldr	r0, [pc, #156]	; (8000a4c <HAL_FMC_MspInit+0x118>)
 80009b0:	f004 fb2c 	bl	800500c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80009b4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009b8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009c6:	230c      	movs	r3, #12
 80009c8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4820      	ldr	r0, [pc, #128]	; (8000a50 <HAL_FMC_MspInit+0x11c>)
 80009d0:	f004 fb1c 	bl	800500c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 80009d4:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80009d8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_1
                          |GPIO_PIN_10|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009e6:	230c      	movs	r3, #12
 80009e8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4819      	ldr	r0, [pc, #100]	; (8000a54 <HAL_FMC_MspInit+0x120>)
 80009f0:	f004 fb0c 	bl	800500c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 80009f4:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80009f8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_11
                          |GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a06:	230c      	movs	r3, #12
 8000a08:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4812      	ldr	r0, [pc, #72]	; (8000a58 <HAL_FMC_MspInit+0x124>)
 8000a10:	f004 fafc 	bl	800500c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8000a14:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a18:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a26:	230c      	movs	r3, #12
 8000a28:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <HAL_FMC_MspInit+0x128>)
 8000a30:	f004 faec 	bl	800500c <HAL_GPIO_Init>
 8000a34:	e000      	b.n	8000a38 <HAL_FMC_MspInit+0x104>
    return;
 8000a36:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200014c8 	.word	0x200014c8
 8000a44:	58024400 	.word	0x58024400
 8000a48:	58021000 	.word	0x58021000
 8000a4c:	58021800 	.word	0x58021800
 8000a50:	58020c00 	.word	0x58020c00
 8000a54:	58022000 	.word	0x58022000
 8000a58:	58021c00 	.word	0x58021c00
 8000a5c:	58021400 	.word	0x58021400

08000a60 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000a68:	f7ff ff64 	bl	8000934 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8a:	4b8a      	ldr	r3, [pc, #552]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	4a88      	ldr	r2, [pc, #544]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9a:	4b86      	ldr	r3, [pc, #536]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	623b      	str	r3, [r7, #32]
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b82      	ldr	r3, [pc, #520]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	4a81      	ldr	r2, [pc, #516]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab8:	4b7e      	ldr	r3, [pc, #504]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	61fb      	str	r3, [r7, #28]
 8000ac4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac6:	4b7b      	ldr	r3, [pc, #492]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4a79      	ldr	r2, [pc, #484]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4b77      	ldr	r3, [pc, #476]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae4:	4b73      	ldr	r3, [pc, #460]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4a72      	ldr	r2, [pc, #456]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4b6f      	ldr	r3, [pc, #444]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b6c      	ldr	r3, [pc, #432]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a6a      	ldr	r2, [pc, #424]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b68      	ldr	r3, [pc, #416]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b64      	ldr	r3, [pc, #400]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	4a63      	ldr	r2, [pc, #396]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b30:	4b60      	ldr	r3, [pc, #384]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b3e:	4b5d      	ldr	r3, [pc, #372]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	4a5b      	ldr	r2, [pc, #364]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4e:	4b59      	ldr	r3, [pc, #356]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5c:	4b55      	ldr	r3, [pc, #340]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	4a54      	ldr	r2, [pc, #336]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6c:	4b51      	ldr	r3, [pc, #324]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7a:	4b4e      	ldr	r3, [pc, #312]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	4a4c      	ldr	r2, [pc, #304]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b82:	f043 0320 	orr.w	r3, r3, #32
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8a:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	f003 0320 	and.w	r3, r3, #32
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2180      	movs	r1, #128	; 0x80
 8000b9c:	4846      	ldr	r0, [pc, #280]	; (8000cb8 <MX_GPIO_Init+0x244>)
 8000b9e:	f004 fbfd 	bl	800539c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG14 PG13 PG12 PG9
                           PG7 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
 8000ba2:	f247 2388 	movw	r3, #29320	; 0x7288
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4841      	ldr	r0, [pc, #260]	; (8000cbc <MX_GPIO_Init+0x248>)
 8000bb8:	f004 fa28 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD4
                           PD3 PD13 PD12 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000bbc:	f643 03f8 	movw	r3, #14584	; 0x38f8
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	483b      	ldr	r0, [pc, #236]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000bd2:	f004 fa1b 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 PA0 PA2
                           PA6 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 8000bd6:	f649 73cd 	movw	r3, #40909	; 0x9fcd
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_2
                          |GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4836      	ldr	r0, [pc, #216]	; (8000cc4 <MX_GPIO_Init+0x250>)
 8000bec:	f004 fa0e 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB6 PB2 PB12
                           PB13 PB1 PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_2|GPIO_PIN_12
 8000bf0:	f243 43c7 	movw	r3, #13511	; 0x34c7
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	4830      	ldr	r0, [pc, #192]	; (8000cc8 <MX_GPIO_Init+0x254>)
 8000c06:	f004 fa01 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8000c0a:	f24e 037f 	movw	r3, #57471	; 0xe07f
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c10:	2303      	movs	r3, #3
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4826      	ldr	r0, [pc, #152]	; (8000cb8 <MX_GPIO_Init+0x244>)
 8000c20:	f004 f9f4 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000c24:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	4824      	ldr	r0, [pc, #144]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000c3a:	f004 f9e7 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4818      	ldr	r0, [pc, #96]	; (8000cb8 <MX_GPIO_Init+0x244>)
 8000c56:	f004 f9d9 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c5a:	23c0      	movs	r3, #192	; 0xc0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <MX_GPIO_Init+0x25c>)
 8000c6e:	f004 f9cd 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c72:	2302      	movs	r3, #2
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <MX_GPIO_Init+0x250>)
 8000c86:	f004 f9c1 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000c8a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <MX_GPIO_Init+0x254>)
 8000ca8:	f004 f9b0 	bl	800500c <HAL_GPIO_Init>

}
 8000cac:	bf00      	nop
 8000cae:	3738      	adds	r7, #56	; 0x38
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	58020800 	.word	0x58020800
 8000cbc:	58021800 	.word	0x58021800
 8000cc0:	58020c00 	.word	0x58020c00
 8000cc4:	58020000 	.word	0x58020000
 8000cc8:	58020400 	.word	0x58020400
 8000ccc:	58022000 	.word	0x58022000
 8000cd0:	58021c00 	.word	0x58021c00

08000cd4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000cda:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <MX_I2C1_Init+0x78>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30B00F2D;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <MX_I2C1_Init+0x7c>)
 8000ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d0e:	480e      	ldr	r0, [pc, #56]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d10:	f004 fb78 	bl	8005404 <HAL_I2C_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d1a:	f000 fbf1 	bl	8001500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d22:	f004 fef1 	bl	8005b08 <HAL_I2CEx_ConfigAnalogFilter>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d2c:	f000 fbe8 	bl	8001500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d30:	2100      	movs	r1, #0
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d34:	f004 ff33 	bl	8005b9e <HAL_I2CEx_ConfigDigitalFilter>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d3e:	f000 fbdf 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200014cc 	.word	0x200014cc
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	30b00f2d 	.word	0x30b00f2d

08000d54 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <MX_I2C2_Init+0x78>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d60:	4a1b      	ldr	r2, [pc, #108]	; (8000dd0 <MX_I2C2_Init+0x7c>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d8e:	480e      	ldr	r0, [pc, #56]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d90:	f004 fb38 	bl	8005404 <HAL_I2C_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d9a:	f000 fbb1 	bl	8001500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000da2:	f004 feb1 	bl	8005b08 <HAL_I2CEx_ConfigAnalogFilter>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000dac:	f000 fba8 	bl	8001500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000db0:	2100      	movs	r1, #0
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000db4:	f004 fef3 	bl	8005b9e <HAL_I2CEx_ConfigDigitalFilter>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dbe:	f000 fb9f 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20001518 	.word	0x20001518
 8000dcc:	40005800 	.word	0x40005800
 8000dd0:	00b03fdb 	.word	0x00b03fdb

08000dd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b0bc      	sub	sp, #240	; 0xf0
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	22bc      	movs	r2, #188	; 0xbc
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f00d ff33 	bl	800ec60 <memset>
  if(i2cHandle->Instance==I2C1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a5b      	ldr	r2, [pc, #364]	; (8000f6c <HAL_I2C_MspInit+0x198>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d143      	bne.n	8000e8c <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e04:	2308      	movs	r3, #8
 8000e06:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0e:	f107 0320 	add.w	r3, r7, #32
 8000e12:	4618      	mov	r0, r3
 8000e14:	f005 ff92 	bl	8006d3c <HAL_RCCEx_PeriphCLKConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e1e:	f000 fb6f 	bl	8001500 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b53      	ldr	r3, [pc, #332]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	4a51      	ldr	r2, [pc, #324]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e32:	4b4f      	ldr	r3, [pc, #316]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e48:	2312      	movs	r3, #18
 8000e4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e64:	4619      	mov	r1, r3
 8000e66:	4843      	ldr	r0, [pc, #268]	; (8000f74 <HAL_I2C_MspInit+0x1a0>)
 8000e68:	f004 f8d0 	bl	800500c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e6c:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000e6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e72:	4a3f      	ldr	r2, [pc, #252]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e7c:	4b3c      	ldr	r3, [pc, #240]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e8a:	e06b      	b.n	8000f64 <HAL_I2C_MspInit+0x190>
  else if(i2cHandle->Instance==I2C2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a39      	ldr	r2, [pc, #228]	; (8000f78 <HAL_I2C_MspInit+0x1a4>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d166      	bne.n	8000f64 <HAL_I2C_MspInit+0x190>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e96:	2308      	movs	r3, #8
 8000e98:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea0:	f107 0320 	add.w	r3, r7, #32
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f005 ff49 	bl	8006d3c <HAL_RCCEx_PeriphCLKConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 8000eb0:	f000 fb26 	bl	8001500 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	4a2d      	ldr	r2, [pc, #180]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	4a25      	ldr	r2, [pc, #148]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee2:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef6:	2312      	movs	r3, #18
 8000ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f02:	2301      	movs	r3, #1
 8000f04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f0e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f12:	4619      	mov	r1, r3
 8000f14:	4819      	ldr	r0, [pc, #100]	; (8000f7c <HAL_I2C_MspInit+0x1a8>)
 8000f16:	f004 f879 	bl	800500c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f22:	2312      	movs	r3, #18
 8000f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f34:	2304      	movs	r3, #4
 8000f36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <HAL_I2C_MspInit+0x1a0>)
 8000f42:	f004 f863 	bl	800500c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f4c:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000f4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_I2C_MspInit+0x19c>)
 8000f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	bf00      	nop
 8000f66:	37f0      	adds	r7, #240	; 0xf0
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	58024400 	.word	0x58024400
 8000f74:	58020400 	.word	0x58020400
 8000f78:	40005800 	.word	0x40005800
 8000f7c:	58021c00 	.word	0x58021c00

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  MPU_Conf();
 8000f86:	f000 f9c9 	bl	800131c <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f8a:	4b4f      	ldr	r3, [pc, #316]	; (80010c8 <main+0x148>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d11b      	bne.n	8000fce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f96:	f3bf 8f4f 	dsb	sy
}
 8000f9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f9c:	f3bf 8f6f 	isb	sy
}
 8000fa0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fa2:	4b49      	ldr	r3, [pc, #292]	; (80010c8 <main+0x148>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000faa:	f3bf 8f4f 	dsb	sy
}
 8000fae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fb0:	f3bf 8f6f 	isb	sy
}
 8000fb4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fb6:	4b44      	ldr	r3, [pc, #272]	; (80010c8 <main+0x148>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	4a43      	ldr	r2, [pc, #268]	; (80010c8 <main+0x148>)
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc2:	f3bf 8f4f 	dsb	sy
}
 8000fc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fc8:	f3bf 8f6f 	isb	sy
}
 8000fcc:	e000      	b.n	8000fd0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000fd0:	4b3d      	ldr	r3, [pc, #244]	; (80010c8 <main+0x148>)
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d138      	bne.n	800104e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <main+0x148>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe4:	f3bf 8f4f 	dsb	sy
}
 8000fe8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000fea:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <main+0x148>)
 8000fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ff0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	0b5b      	lsrs	r3, r3, #13
 8000ff6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ffa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	08db      	lsrs	r3, r3, #3
 8001000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001004:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	015a      	lsls	r2, r3, #5
 800100a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800100e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001014:	492c      	ldr	r1, [pc, #176]	; (80010c8 <main+0x148>)
 8001016:	4313      	orrs	r3, r2
 8001018:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1ef      	bne.n	8001006 <main+0x86>
    } while(sets-- != 0U);
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1e5a      	subs	r2, r3, #1
 800102a:	60ba      	str	r2, [r7, #8]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1e5      	bne.n	8000ffc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001030:	f3bf 8f4f 	dsb	sy
}
 8001034:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <main+0x148>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <main+0x148>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001042:	f3bf 8f4f 	dsb	sy
}
 8001046:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001048:	f3bf 8f6f 	isb	sy
}
 800104c:	e000      	b.n	8001050 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800104e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001050:	f000 fffa 	bl	8002048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001054:	f000 f846 	bl	80010e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001058:	f000 f8fc 	bl	8001254 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105c:	f7ff fd0a 	bl	8000a74 <MX_GPIO_Init>
  MX_DMA_Init();
 8001060:	f7ff fbda 	bl	8000818 <MX_DMA_Init>
  MX_DAC1_Init();
 8001064:	f7ff fb56 	bl	8000714 <MX_DAC1_Init>
  MX_FMC_Init();
 8001068:	f7ff fc16 	bl	8000898 <MX_FMC_Init>
  MX_I2C2_Init();
 800106c:	f7ff fe72 	bl	8000d54 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001070:	f000 fa4c 	bl	800150c <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001074:	f000 fb66 	bl	8001744 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8001078:	f000 fcbc 	bl	80019f4 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800107c:	f000 fd4c 	bl	8001b18 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001080:	f7ff fe28 	bl	8000cd4 <MX_I2C1_Init>
  MX_RNG_Init();
 8001084:	f000 fb10 	bl	80016a8 <MX_RNG_Init>
  MX_FATFS_Init();
 8001088:	f00c fa44 	bl	800d514 <MX_FATFS_Init>
  return __builtin_arm_get_fpscr();
 800108c:	eef1 3a10 	vmrs	r3, fpscr
  /* USER CODE BEGIN 2 */

  uint32_t tempFPURegisterVal = __get_FPSCR();
 8001090:	617b      	str	r3, [r7, #20]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	613b      	str	r3, [r7, #16]
  __builtin_arm_set_fpscr(fpscr);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	eee1 3a10 	vmsr	fpscr, r3
}
 80010a4:	bf00      	nop
  __set_FPSCR(tempFPURegisterVal);

  codec_init(&hi2c2);
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <main+0x14c>)
 80010a8:	f7ff faa8 	bl	80005fc <codec_init>

  audio_init(&hsai_BlockB1, &hsai_BlockA1);
 80010ac:	4908      	ldr	r1, [pc, #32]	; (80010d0 <main+0x150>)
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <main+0x154>)
 80010b0:	f7ff f912 	bl	80002d8 <audio_init>

  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_TX, SPI_RX, 32);
 80010b4:	2320      	movs	r3, #32
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <main+0x158>)
 80010b8:	4908      	ldr	r1, [pc, #32]	; (80010dc <main+0x15c>)
 80010ba:	4809      	ldr	r0, [pc, #36]	; (80010e0 <main+0x160>)
 80010bc:	f00a fe74 	bl	800bda8 <HAL_SPI_TransmitReceive_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
	  HAL_Delay(100);
 80010c0:	2064      	movs	r0, #100	; 0x64
 80010c2:	f001 f853 	bl	800216c <HAL_Delay>
 80010c6:	e7fb      	b.n	80010c0 <main+0x140>
 80010c8:	e000ed00 	.word	0xe000ed00
 80010cc:	20001518 	.word	0x20001518
 80010d0:	200015c4 	.word	0x200015c4
 80010d4:	2000165c 	.word	0x2000165c
 80010d8:	30000420 	.word	0x30000420
 80010dc:	30000400 	.word	0x30000400
 80010e0:	20001864 	.word	0x20001864

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b09e      	sub	sp, #120	; 0x78
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ee:	224c      	movs	r2, #76	; 0x4c
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f00d fdb4 	bl	800ec60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2220      	movs	r2, #32
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00d fdad 	bl	800ec60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001106:	2002      	movs	r0, #2
 8001108:	f004 fd96 	bl	8005c38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	4b4d      	ldr	r3, [pc, #308]	; (8001248 <SystemClock_Config+0x164>)
 8001112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001114:	4a4c      	ldr	r2, [pc, #304]	; (8001248 <SystemClock_Config+0x164>)
 8001116:	f023 0301 	bic.w	r3, r3, #1
 800111a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800111c:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <SystemClock_Config+0x164>)
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <SystemClock_Config+0x168>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a48      	ldr	r2, [pc, #288]	; (800124c <SystemClock_Config+0x168>)
 800112c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001130:	6193      	str	r3, [r2, #24]
 8001132:	4b46      	ldr	r3, [pc, #280]	; (800124c <SystemClock_Config+0x168>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800113e:	bf00      	nop
 8001140:	4b42      	ldr	r3, [pc, #264]	; (800124c <SystemClock_Config+0x168>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800114c:	d1f8      	bne.n	8001140 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	4b40      	ldr	r3, [pc, #256]	; (8001250 <SystemClock_Config+0x16c>)
 8001150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001154:	4a3e      	ldr	r2, [pc, #248]	; (8001250 <SystemClock_Config+0x16c>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800115e:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <SystemClock_Config+0x16c>)
 8001160:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	4b36      	ldr	r3, [pc, #216]	; (800124c <SystemClock_Config+0x168>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a35      	ldr	r2, [pc, #212]	; (800124c <SystemClock_Config+0x168>)
 8001176:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b33      	ldr	r3, [pc, #204]	; (800124c <SystemClock_Config+0x168>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <SystemClock_Config+0x164>)
 8001188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118a:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <SystemClock_Config+0x164>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <SystemClock_Config+0x164>)
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800119e:	bf00      	nop
 80011a0:	4b2a      	ldr	r3, [pc, #168]	; (800124c <SystemClock_Config+0x168>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011ac:	d1f8      	bne.n	80011a0 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80011ae:	4b28      	ldr	r3, [pc, #160]	; (8001250 <SystemClock_Config+0x16c>)
 80011b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b2:	f023 0303 	bic.w	r3, r3, #3
 80011b6:	4a26      	ldr	r2, [pc, #152]	; (8001250 <SystemClock_Config+0x16c>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80011be:	2321      	movs	r3, #33	; 0x21
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011cc:	2302      	movs	r3, #2
 80011ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d0:	2302      	movs	r3, #2
 80011d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80011d8:	233c      	movs	r3, #60	; 0x3c
 80011da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011dc:	2302      	movs	r3, #2
 80011de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80011e0:	2306      	movs	r3, #6
 80011e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 8;
 80011e4:	2308      	movs	r3, #8
 80011e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011e8:	230c      	movs	r3, #12
 80011ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f8:	4618      	mov	r0, r3
 80011fa:	f004 fe11 	bl	8005e20 <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8001204:	f000 f97c 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	233f      	movs	r3, #63	; 0x3f
 800120a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	2303      	movs	r3, #3
 800120e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001214:	2308      	movs	r3, #8
 8001216:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001218:	2340      	movs	r3, #64	; 0x40
 800121a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800121c:	2340      	movs	r3, #64	; 0x40
 800121e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001226:	2340      	movs	r3, #64	; 0x40
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	2104      	movs	r1, #4
 8001230:	4618      	mov	r0, r3
 8001232:	f005 fa23 	bl	800667c <HAL_RCC_ClockConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x15c>
  {
    Error_Handler();
 800123c:	f000 f960 	bl	8001500 <Error_Handler>
  }
}
 8001240:	bf00      	nop
 8001242:	3778      	adds	r7, #120	; 0x78
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	58000400 	.word	0x58000400
 800124c:	58024800 	.word	0x58024800
 8001250:	58024400 	.word	0x58024400

08001254 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b0b0      	sub	sp, #192	; 0xc0
 8001258:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	22bc      	movs	r2, #188	; 0xbc
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f00d fcfd 	bl	800ec60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <PeriphCommonClock_Config+0x84>)
 8001268:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800126e:	230c      	movs	r3, #12
 8001270:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001272:	2308      	movs	r3, #8
 8001274:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001276:	2302      	movs	r3, #2
 8001278:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800127a:	2302      	movs	r3, #2
 800127c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800127e:	23c0      	movs	r3, #192	; 0xc0
 8001280:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8001286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 800128c:	2301      	movs	r3, #1
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001290:	230c      	movs	r3, #12
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 4;
 8001294:	2304      	movs	r3, #4
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
 8001298:	2308      	movs	r3, #8
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 16;
 800129c:	2310      	movs	r3, #16
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80012a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
 80012aa:	f640 1338 	movw	r3, #2360	; 0x938
 80012ae:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80012b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b8:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 80012ba:	2302      	movs	r3, #2
 80012bc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4618      	mov	r0, r3
 80012c2:	f005 fd3b 	bl	8006d3c <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <PeriphCommonClock_Config+0x7c>
  {
    Error_Handler();
 80012cc:	f000 f918 	bl	8001500 <Error_Handler>
  }
}
 80012d0:	bf00      	nop
 80012d2:	37c0      	adds	r7, #192	; 0xc0
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	01010100 	.word	0x01010100

080012dc <randomNumber>:

/* USER CODE BEGIN 4 */
float randomNumber(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	480b      	ldr	r0, [pc, #44]	; (8001314 <randomNumber+0x38>)
 80012e8:	f007 ff16 	bl	8009118 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001318 <randomNumber+0x3c>
 80012fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fe:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	ee07 3a90 	vmov	s15, r3
}
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200015b0 	.word	0x200015b0
 8001318:	2f80000d 	.word	0x2f80000d

0800131c <MPU_Conf>:

void MPU_Conf(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 8001322:	f001 f863 	bl	80023ec <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001326:	2301      	movs	r3, #1
 8001328:	703b      	strb	r3, [r7, #0]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800132a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800132e:	607b      	str	r3, [r7, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001330:	2311      	movs	r3, #17
 8001332:	723b      	strb	r3, [r7, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001334:	2303      	movs	r3, #3
 8001336:	72fb      	strb	r3, [r7, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001338:	2301      	movs	r3, #1
 800133a:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	737b      	strb	r3, [r7, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001348:	2300      	movs	r3, #0
 800134a:	707b      	strb	r3, [r7, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 800134c:	2300      	movs	r3, #0
 800134e:	727b      	strb	r3, [r7, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001350:	2301      	movs	r3, #1
 8001352:	733b      	strb	r3, [r7, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001354:	463b      	mov	r3, r7
 8001356:	4618      	mov	r0, r3
 8001358:	f001 f880 	bl	800245c <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800135c:	2301      	movs	r3, #1
 800135e:	703b      	strb	r3, [r7, #0]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 8001360:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001364:	607b      	str	r3, [r7, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001366:	230f      	movs	r3, #15
 8001368:	723b      	strb	r3, [r7, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800136a:	2303      	movs	r3, #3
 800136c:	72fb      	strb	r3, [r7, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800136e:	2301      	movs	r3, #1
 8001370:	72bb      	strb	r3, [r7, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001372:	2301      	movs	r3, #1
 8001374:	73bb      	strb	r3, [r7, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001376:	2301      	movs	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800137a:	2301      	movs	r3, #1
 800137c:	737b      	strb	r3, [r7, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800137e:	2301      	movs	r3, #1
 8001380:	707b      	strb	r3, [r7, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 8001382:	2300      	movs	r3, #0
 8001384:	727b      	strb	r3, [r7, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	733b      	strb	r3, [r7, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800138a:	463b      	mov	r3, r7
 800138c:	4618      	mov	r0, r3
 800138e:	f001 f865 	bl	800245c <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001392:	2004      	movs	r0, #4
 8001394:	f001 f842 	bl	800241c <HAL_MPU_Enable>
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_SPI_TxRxCpltCallback>:



void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	//spiBuffer = 1;
    uint8_t offset = 16;
 80013a8:	2310      	movs	r3, #16
 80013aa:	73bb      	strb	r3, [r7, #14]
    if (SPI_RX[offset] == 1)
 80013ac:	7bbb      	ldrb	r3, [r7, #14]
 80013ae:	4a26      	ldr	r2, [pc, #152]	; (8001448 <HAL_SPI_TxRxCpltCallback+0xa8>)
 80013b0:	5cd3      	ldrb	r3, [r2, r3]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d144      	bne.n	8001440 <HAL_SPI_TxRxCpltCallback+0xa0>
    {
    	//got a change!
    	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80013b6:	2180      	movs	r1, #128	; 0x80
 80013b8:	4824      	ldr	r0, [pc, #144]	; (800144c <HAL_SPI_TxRxCpltCallback+0xac>)
 80013ba:	f004 f808 	bl	80053ce <HAL_GPIO_TogglePin>

    	 uint8_t currentByte = offset+1;
 80013be:	7bbb      	ldrb	r3, [r7, #14]
 80013c0:	3301      	adds	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]

    	 while (SPI_RX[currentByte] != 0)
 80013c4:	e037      	b.n	8001436 <HAL_SPI_TxRxCpltCallback+0x96>
    	 {
			 if (SPI_RX[currentByte] == 0x90)
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4a1f      	ldr	r2, [pc, #124]	; (8001448 <HAL_SPI_TxRxCpltCallback+0xa8>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	2b90      	cmp	r3, #144	; 0x90
 80013ce:	d10c      	bne.n	80013ea <HAL_SPI_TxRxCpltCallback+0x4a>
			 {
				 sendNoteOn(SPI_RX[currentByte+1], SPI_RX[currentByte+2]);
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <HAL_SPI_TxRxCpltCallback+0xa8>)
 80013d6:	5cd2      	ldrb	r2, [r2, r3]
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	3302      	adds	r3, #2
 80013dc:	491a      	ldr	r1, [pc, #104]	; (8001448 <HAL_SPI_TxRxCpltCallback+0xa8>)
 80013de:	5ccb      	ldrb	r3, [r1, r3]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4610      	mov	r0, r2
 80013e4:	f7ff f89c 	bl	8000520 <sendNoteOn>
 80013e8:	e022      	b.n	8001430 <HAL_SPI_TxRxCpltCallback+0x90>
			 }
			 else if (SPI_RX[currentByte] == 0xb0)
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	4a16      	ldr	r2, [pc, #88]	; (8001448 <HAL_SPI_TxRxCpltCallback+0xa8>)
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	2bb0      	cmp	r3, #176	; 0xb0
 80013f2:	d10c      	bne.n	800140e <HAL_SPI_TxRxCpltCallback+0x6e>
			 {
				 sendCtrl(SPI_RX[currentByte+1], SPI_RX[currentByte+2]);
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a13      	ldr	r2, [pc, #76]	; (8001448 <HAL_SPI_TxRxCpltCallback+0xa8>)
 80013fa:	5cd2      	ldrb	r2, [r2, r3]
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	3302      	adds	r3, #2
 8001400:	4911      	ldr	r1, [pc, #68]	; (8001448 <HAL_SPI_TxRxCpltCallback+0xa8>)
 8001402:	5ccb      	ldrb	r3, [r1, r3]
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f7ff f8a8 	bl	800055c <sendCtrl>
 800140c:	e010      	b.n	8001430 <HAL_SPI_TxRxCpltCallback+0x90>
			 }
			 else if (SPI_RX[currentByte] == 0xe0)
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <HAL_SPI_TxRxCpltCallback+0xa8>)
 8001412:	5cd3      	ldrb	r3, [r2, r3]
 8001414:	2be0      	cmp	r3, #224	; 0xe0
 8001416:	d10b      	bne.n	8001430 <HAL_SPI_TxRxCpltCallback+0x90>
			 {
				 sendPitchBend(SPI_RX[currentByte+1], SPI_RX[currentByte+2]);
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	3301      	adds	r3, #1
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800141e:	5cd2      	ldrb	r2, [r2, r3]
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	3302      	adds	r3, #2
 8001424:	4908      	ldr	r1, [pc, #32]	; (8001448 <HAL_SPI_TxRxCpltCallback+0xa8>)
 8001426:	5ccb      	ldrb	r3, [r1, r3]
 8001428:	4619      	mov	r1, r3
 800142a:	4610      	mov	r0, r2
 800142c:	f7ff f8a8 	bl	8000580 <sendPitchBend>
			 }
			 currentByte = currentByte+3;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3303      	adds	r3, #3
 8001434:	73fb      	strb	r3, [r7, #15]
    	 while (SPI_RX[currentByte] != 0)
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	4a03      	ldr	r2, [pc, #12]	; (8001448 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800143a:	5cd3      	ldrb	r3, [r2, r3]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1c2      	bne.n	80013c6 <HAL_SPI_TxRxCpltCallback+0x26>
    	 }

    }
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	30000420 	.word	0x30000420
 800144c:	58020800 	.word	0x58020800

08001450 <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	//spiBuffer = 0;
    uint8_t offset = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	73bb      	strb	r3, [r7, #14]

    if (SPI_RX[offset] == 1)
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 8001460:	5cd3      	ldrb	r3, [r2, r3]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d144      	bne.n	80014f0 <HAL_SPI_TxRxHalfCpltCallback+0xa0>
    {
    	//got a change!
    	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	4824      	ldr	r0, [pc, #144]	; (80014fc <HAL_SPI_TxRxHalfCpltCallback+0xac>)
 800146a:	f003 ffb0 	bl	80053ce <HAL_GPIO_TogglePin>
    	 uint8_t currentByte = offset+1;
 800146e:	7bbb      	ldrb	r3, [r7, #14]
 8001470:	3301      	adds	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]

    	 while (SPI_RX[currentByte] != 0)
 8001474:	e037      	b.n	80014e6 <HAL_SPI_TxRxHalfCpltCallback+0x96>
    	 {
			 if (SPI_RX[currentByte] == 0x90)
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 800147a:	5cd3      	ldrb	r3, [r2, r3]
 800147c:	2b90      	cmp	r3, #144	; 0x90
 800147e:	d10c      	bne.n	800149a <HAL_SPI_TxRxHalfCpltCallback+0x4a>
			 {
				 sendNoteOn(SPI_RX[currentByte+1], SPI_RX[currentByte+2]);
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	3301      	adds	r3, #1
 8001484:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 8001486:	5cd2      	ldrb	r2, [r2, r3]
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	3302      	adds	r3, #2
 800148c:	491a      	ldr	r1, [pc, #104]	; (80014f8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 800148e:	5ccb      	ldrb	r3, [r1, r3]
 8001490:	4619      	mov	r1, r3
 8001492:	4610      	mov	r0, r2
 8001494:	f7ff f844 	bl	8000520 <sendNoteOn>
 8001498:	e022      	b.n	80014e0 <HAL_SPI_TxRxHalfCpltCallback+0x90>
			 }
			 else if (SPI_RX[currentByte] == 0xb0)
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	4a16      	ldr	r2, [pc, #88]	; (80014f8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	2bb0      	cmp	r3, #176	; 0xb0
 80014a2:	d10c      	bne.n	80014be <HAL_SPI_TxRxHalfCpltCallback+0x6e>
			 {
				 sendCtrl(SPI_RX[currentByte+1], SPI_RX[currentByte+2]);
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	3301      	adds	r3, #1
 80014a8:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 80014aa:	5cd2      	ldrb	r2, [r2, r3]
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	3302      	adds	r3, #2
 80014b0:	4911      	ldr	r1, [pc, #68]	; (80014f8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 80014b2:	5ccb      	ldrb	r3, [r1, r3]
 80014b4:	4619      	mov	r1, r3
 80014b6:	4610      	mov	r0, r2
 80014b8:	f7ff f850 	bl	800055c <sendCtrl>
 80014bc:	e010      	b.n	80014e0 <HAL_SPI_TxRxHalfCpltCallback+0x90>
			 }
			 else if (SPI_RX[currentByte] == 0xe0)
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	2be0      	cmp	r3, #224	; 0xe0
 80014c6:	d10b      	bne.n	80014e0 <HAL_SPI_TxRxHalfCpltCallback+0x90>
			 {
				 sendPitchBend(SPI_RX[currentByte+1], SPI_RX[currentByte+2]);
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	3301      	adds	r3, #1
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 80014ce:	5cd2      	ldrb	r2, [r2, r3]
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	3302      	adds	r3, #2
 80014d4:	4908      	ldr	r1, [pc, #32]	; (80014f8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 80014d6:	5ccb      	ldrb	r3, [r1, r3]
 80014d8:	4619      	mov	r1, r3
 80014da:	4610      	mov	r0, r2
 80014dc:	f7ff f850 	bl	8000580 <sendPitchBend>
			 }
			 currentByte = currentByte+3;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	3303      	adds	r3, #3
 80014e4:	73fb      	strb	r3, [r7, #15]
    	 while (SPI_RX[currentByte] != 0)
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	4a03      	ldr	r2, [pc, #12]	; (80014f8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1c2      	bne.n	8001476 <HAL_SPI_TxRxHalfCpltCallback+0x26>
    	 }
    }
}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	30000420 	.word	0x30000420
 80014fc:	58020800 	.word	0x58020800

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>
	...

0800150c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_QUADSPI_Init+0x50>)
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <MX_QUADSPI_Init+0x54>)
 8001514:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_QUADSPI_Init+0x50>)
 8001518:	2201      	movs	r2, #1
 800151a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_QUADSPI_Init+0x50>)
 800151e:	2201      	movs	r2, #1
 8001520:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_QUADSPI_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 19;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_QUADSPI_Init+0x50>)
 800152a:	2213      	movs	r2, #19
 800152c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_QUADSPI_Init+0x50>)
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_QUADSPI_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_QUADSPI_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_QUADSPI_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_QUADSPI_Init+0x50>)
 8001548:	f004 fbb0 	bl	8005cac <HAL_QSPI_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001552:	f7ff ffd5 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20001564 	.word	0x20001564
 8001560:	52005000 	.word	0x52005000

08001564 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0ba      	sub	sp, #232	; 0xe8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800157c:	f107 0318 	add.w	r3, r7, #24
 8001580:	22bc      	movs	r2, #188	; 0xbc
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f00d fb6b 	bl	800ec60 <memset>
  if(qspiHandle->Instance==QUADSPI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a42      	ldr	r2, [pc, #264]	; (8001698 <HAL_QSPI_MspInit+0x134>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d17c      	bne.n	800168e <HAL_QSPI_MspInit+0x12a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001594:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001598:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL;
 800159a:	2310      	movs	r3, #16
 800159c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159e:	f107 0318 	add.w	r3, r7, #24
 80015a2:	4618      	mov	r0, r3
 80015a4:	f005 fbca 	bl	8006d3c <HAL_RCCEx_PeriphCLKConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_QSPI_MspInit+0x4e>
    {
      Error_Handler();
 80015ae:	f7ff ffa7 	bl	8001500 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_QSPI_MspInit+0x138>)
 80015b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80015b8:	4a38      	ldr	r2, [pc, #224]	; (800169c <HAL_QSPI_MspInit+0x138>)
 80015ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015be:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_QSPI_MspInit+0x138>)
 80015c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80015c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015d0:	4b32      	ldr	r3, [pc, #200]	; (800169c <HAL_QSPI_MspInit+0x138>)
 80015d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d6:	4a31      	ldr	r2, [pc, #196]	; (800169c <HAL_QSPI_MspInit+0x138>)
 80015d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e0:	4b2e      	ldr	r3, [pc, #184]	; (800169c <HAL_QSPI_MspInit+0x138>)
 80015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_QSPI_MspInit+0x138>)
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f4:	4a29      	ldr	r2, [pc, #164]	; (800169c <HAL_QSPI_MspInit+0x138>)
 80015f6:	f043 0320 	orr.w	r3, r3, #32
 80015fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fe:	4b27      	ldr	r3, [pc, #156]	; (800169c <HAL_QSPI_MspInit+0x138>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001604:	f003 0320 	and.w	r3, r3, #32
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800160c:	2340      	movs	r3, #64	; 0x40
 800160e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001624:	230a      	movs	r3, #10
 8001626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800162a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800162e:	4619      	mov	r1, r3
 8001630:	481b      	ldr	r0, [pc, #108]	; (80016a0 <HAL_QSPI_MspInit+0x13c>)
 8001632:	f003 fceb 	bl	800500c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 8001636:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800163a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001650:	2309      	movs	r3, #9
 8001652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001656:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800165a:	4619      	mov	r1, r3
 800165c:	4811      	ldr	r0, [pc, #68]	; (80016a4 <HAL_QSPI_MspInit+0x140>)
 800165e:	f003 fcd5 	bl	800500c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001662:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800167c:	230a      	movs	r3, #10
 800167e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001682:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001686:	4619      	mov	r1, r3
 8001688:	4806      	ldr	r0, [pc, #24]	; (80016a4 <HAL_QSPI_MspInit+0x140>)
 800168a:	f003 fcbf 	bl	800500c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800168e:	bf00      	nop
 8001690:	37e8      	adds	r7, #232	; 0xe8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	52005000 	.word	0x52005000
 800169c:	58024400 	.word	0x58024400
 80016a0:	58021800 	.word	0x58021800
 80016a4:	58021400 	.word	0x58021400

080016a8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <MX_RNG_Init+0x24>)
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <MX_RNG_Init+0x28>)
 80016b0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_RNG_Init+0x24>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_RNG_Init+0x24>)
 80016ba:	f007 fccb 	bl	8009054 <HAL_RNG_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80016c4:	f7ff ff1c 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200015b0 	.word	0x200015b0
 80016d0:	48021800 	.word	0x48021800

080016d4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0b2      	sub	sp, #200	; 0xc8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	22bc      	movs	r2, #188	; 0xbc
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f00d fabb 	bl	800ec60 <memset>
  if(rngHandle->Instance==RNG)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <HAL_RNG_MspInit+0x68>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d11e      	bne.n	8001732 <HAL_RNG_MspInit+0x5e>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80016f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	4618      	mov	r0, r3
 8001706:	f005 fb19 	bl	8006d3c <HAL_RCCEx_PeriphCLKConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001710:	f7ff fef6 	bl	8001500 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_RNG_MspInit+0x6c>)
 8001716:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800171a:	4a09      	ldr	r2, [pc, #36]	; (8001740 <HAL_RNG_MspInit+0x6c>)
 800171c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001720:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_RNG_MspInit+0x6c>)
 8001726:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800172a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001732:	bf00      	nop
 8001734:	37c8      	adds	r7, #200	; 0xc8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	48021800 	.word	0x48021800
 8001740:	58024400 	.word	0x58024400

08001744 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001748:	4b28      	ldr	r3, [pc, #160]	; (80017ec <MX_SAI1_Init+0xa8>)
 800174a:	4a29      	ldr	r2, [pc, #164]	; (80017f0 <MX_SAI1_Init+0xac>)
 800174c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <MX_SAI1_Init+0xa8>)
 8001750:	2201      	movs	r2, #1
 8001752:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001754:	4b25      	ldr	r3, [pc, #148]	; (80017ec <MX_SAI1_Init+0xa8>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <MX_SAI1_Init+0xa8>)
 800175c:	2200      	movs	r2, #0
 800175e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <MX_SAI1_Init+0xa8>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001766:	4b21      	ldr	r3, [pc, #132]	; (80017ec <MX_SAI1_Init+0xa8>)
 8001768:	2200      	movs	r2, #0
 800176a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <MX_SAI1_Init+0xa8>)
 800176e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001772:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <MX_SAI1_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <MX_SAI1_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <MX_SAI1_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001786:	2302      	movs	r3, #2
 8001788:	2202      	movs	r2, #2
 800178a:	2101      	movs	r1, #1
 800178c:	4817      	ldr	r0, [pc, #92]	; (80017ec <MX_SAI1_Init+0xa8>)
 800178e:	f007 fd19 	bl	80091c4 <HAL_SAI_InitProtocol>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_SAI1_Init+0x58>
  {
    Error_Handler();
 8001798:	f7ff feb2 	bl	8001500 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_SAI1_Init+0xb0>)
 800179e:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <MX_SAI1_Init+0xb4>)
 80017a0:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_SAI1_Init+0xb0>)
 80017a4:	2202      	movs	r2, #2
 80017a6:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_SAI1_Init+0xb0>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_SAI1_Init+0xb0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_SAI1_Init+0xb0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_SAI1_Init+0xb0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_SAI1_Init+0xb0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_SAI1_Init+0xb0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_SAI1_Init+0xb0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80017d2:	2302      	movs	r3, #2
 80017d4:	2202      	movs	r2, #2
 80017d6:	2101      	movs	r1, #1
 80017d8:	4806      	ldr	r0, [pc, #24]	; (80017f4 <MX_SAI1_Init+0xb0>)
 80017da:	f007 fcf3 	bl	80091c4 <HAL_SAI_InitProtocol>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 80017e4:	f7ff fe8c 	bl	8001500 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200015c4 	.word	0x200015c4
 80017f0:	40015804 	.word	0x40015804
 80017f4:	2000165c 	.word	0x2000165c
 80017f8:	40015824 	.word	0x40015824

080017fc <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08e      	sub	sp, #56	; 0x38
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a71      	ldr	r2, [pc, #452]	; (80019d0 <HAL_SAI_MspInit+0x1d4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d176      	bne.n	80018fc <HAL_SAI_MspInit+0x100>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800180e:	4b71      	ldr	r3, [pc, #452]	; (80019d4 <HAL_SAI_MspInit+0x1d8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10e      	bne.n	8001834 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001816:	4b70      	ldr	r3, [pc, #448]	; (80019d8 <HAL_SAI_MspInit+0x1dc>)
 8001818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800181c:	4a6e      	ldr	r2, [pc, #440]	; (80019d8 <HAL_SAI_MspInit+0x1dc>)
 800181e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001822:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001826:	4b6c      	ldr	r3, [pc, #432]	; (80019d8 <HAL_SAI_MspInit+0x1dc>)
 8001828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800182c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001834:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <HAL_SAI_MspInit+0x1d8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	4a66      	ldr	r2, [pc, #408]	; (80019d4 <HAL_SAI_MspInit+0x1d8>)
 800183c:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800183e:	2374      	movs	r3, #116	; 0x74
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184a:	2302      	movs	r3, #2
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800184e:	2306      	movs	r3, #6
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4619      	mov	r1, r3
 8001858:	4860      	ldr	r0, [pc, #384]	; (80019dc <HAL_SAI_MspInit+0x1e0>)
 800185a:	f003 fbd7 	bl	800500c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 800185e:	4b60      	ldr	r3, [pc, #384]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 8001860:	4a60      	ldr	r2, [pc, #384]	; (80019e4 <HAL_SAI_MspInit+0x1e8>)
 8001862:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001864:	4b5e      	ldr	r3, [pc, #376]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 8001866:	2257      	movs	r2, #87	; 0x57
 8001868:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800186a:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001870:	4b5b      	ldr	r3, [pc, #364]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001876:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 8001878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800187c:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800187e:	4b58      	ldr	r3, [pc, #352]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 8001880:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001884:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001886:	4b56      	ldr	r3, [pc, #344]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 8001888:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800188c:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800188e:	4b54      	ldr	r3, [pc, #336]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 8001890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001894:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001896:	4b52      	ldr	r3, [pc, #328]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 8001898:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800189c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800189e:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80018a4:	484e      	ldr	r0, [pc, #312]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 80018a6:	f000 ff6f 	bl	8002788 <HAL_DMA_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 80018b0:	f7ff fe26 	bl	8001500 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80018b4:	2306      	movs	r3, #6
 80018b6:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 80018b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018bc:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 80018c2:	2301      	movs	r3, #1
 80018c4:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4843      	ldr	r0, [pc, #268]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 80018d2:	f003 fa83 	bl	8004ddc <HAL_DMAEx_ConfigMuxSync>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_SAI_MspInit+0xe4>
    {
      Error_Handler();
 80018dc:	f7ff fe10 	bl	8001500 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a3f      	ldr	r2, [pc, #252]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 80018e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80018e8:	4a3d      	ldr	r2, [pc, #244]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a3b      	ldr	r2, [pc, #236]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 80018f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80018f6:	4a3a      	ldr	r2, [pc, #232]	; (80019e0 <HAL_SAI_MspInit+0x1e4>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a39      	ldr	r2, [pc, #228]	; (80019e8 <HAL_SAI_MspInit+0x1ec>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d160      	bne.n	80019c8 <HAL_SAI_MspInit+0x1cc>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001906:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <HAL_SAI_MspInit+0x1d8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10e      	bne.n	800192c <HAL_SAI_MspInit+0x130>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800190e:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <HAL_SAI_MspInit+0x1dc>)
 8001910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001914:	4a30      	ldr	r2, [pc, #192]	; (80019d8 <HAL_SAI_MspInit+0x1dc>)
 8001916:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800191a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800191e:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <HAL_SAI_MspInit+0x1dc>)
 8001920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800192c:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <HAL_SAI_MspInit+0x1d8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	4a28      	ldr	r2, [pc, #160]	; (80019d4 <HAL_SAI_MspInit+0x1d8>)
 8001934:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001936:	2308      	movs	r3, #8
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001942:	2302      	movs	r3, #2
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001946:	2306      	movs	r3, #6
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800194a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194e:	4619      	mov	r1, r3
 8001950:	4822      	ldr	r0, [pc, #136]	; (80019dc <HAL_SAI_MspInit+0x1e0>)
 8001952:	f003 fb5b 	bl	800500c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream2;
 8001956:	4b25      	ldr	r3, [pc, #148]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 8001958:	4a25      	ldr	r2, [pc, #148]	; (80019f0 <HAL_SAI_MspInit+0x1f4>)
 800195a:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 800195e:	2258      	movs	r2, #88	; 0x58
 8001960:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 8001964:	2240      	movs	r2, #64	; 0x40
 8001966:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001968:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800196e:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 8001970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001974:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 8001978:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800197c:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 8001980:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001984:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 8001988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198c:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 8001990:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001994:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 8001998:	2200      	movs	r2, #0
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800199c:	4813      	ldr	r0, [pc, #76]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 800199e:	f000 fef3 	bl	8002788 <HAL_DMA_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_SAI_MspInit+0x1b0>
    {
      Error_Handler();
 80019a8:	f7ff fdaa 	bl	8001500 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 80019b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 80019be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <HAL_SAI_MspInit+0x1f0>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80019c8:	bf00      	nop
 80019ca:	3738      	adds	r7, #56	; 0x38
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40015804 	.word	0x40015804
 80019d4:	200017e4 	.word	0x200017e4
 80019d8:	58024400 	.word	0x58024400
 80019dc:	58021000 	.word	0x58021000
 80019e0:	200016f4 	.word	0x200016f4
 80019e4:	40020028 	.word	0x40020028
 80019e8:	40015824 	.word	0x40015824
 80019ec:	2000176c 	.word	0x2000176c
 80019f0:	40020040 	.word	0x40020040

080019f4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <MX_SDMMC1_SD_Init+0x34>)
 80019fa:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <MX_SDMMC1_SD_Init+0x38>)
 80019fc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <MX_SDMMC1_SD_Init+0x34>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <MX_SDMMC1_SD_Init+0x34>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <MX_SDMMC1_SD_Init+0x34>)
 8001a0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a10:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <MX_SDMMC1_SD_Init+0x34>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 168;
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <MX_SDMMC1_SD_Init+0x34>)
 8001a1a:	22a8      	movs	r2, #168	; 0xa8
 8001a1c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	200017e8 	.word	0x200017e8
 8001a2c:	52007000 	.word	0x52007000

08001a30 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a2e      	ldr	r2, [pc, #184]	; (8001b08 <HAL_SD_MspInit+0xd8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d155      	bne.n	8001afe <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <HAL_SD_MspInit+0xdc>)
 8001a54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a58:	4a2c      	ldr	r2, [pc, #176]	; (8001b0c <HAL_SD_MspInit+0xdc>)
 8001a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <HAL_SD_MspInit+0xdc>)
 8001a64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <HAL_SD_MspInit+0xdc>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a76:	4a25      	ldr	r2, [pc, #148]	; (8001b0c <HAL_SD_MspInit+0xdc>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <HAL_SD_MspInit+0xdc>)
 8001a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <HAL_SD_MspInit+0xdc>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a94:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <HAL_SD_MspInit+0xdc>)
 8001a96:	f043 0308 	orr.w	r3, r3, #8
 8001a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_SD_MspInit+0xdc>)
 8001aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001aac:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001ab0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001abe:	230c      	movs	r3, #12
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4811      	ldr	r0, [pc, #68]	; (8001b10 <HAL_SD_MspInit+0xe0>)
 8001aca:	f003 fa9f 	bl	800500c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ada:	2303      	movs	r3, #3
 8001adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001ade:	230c      	movs	r3, #12
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480a      	ldr	r0, [pc, #40]	; (8001b14 <HAL_SD_MspInit+0xe4>)
 8001aea:	f003 fa8f 	bl	800500c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2031      	movs	r0, #49	; 0x31
 8001af4:	f000 fc45 	bl	8002382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001af8:	2031      	movs	r0, #49	; 0x31
 8001afa:	f000 fc5c 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	; 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	52007000 	.word	0x52007000
 8001b0c:	58024400 	.word	0x58024400
 8001b10:	58020800 	.word	0x58020800
 8001b14:	58020c00 	.word	0x58020c00

08001b18 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b1e:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <MX_SPI1_Init+0x9c>)
 8001b20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_SPI1_Init+0x98>)
 8001b9c:	f009 fffe 	bl	800bb9c <HAL_SPI_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_SPI1_Init+0x92>
  {
    Error_Handler();
 8001ba6:	f7ff fcab 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20001864 	.word	0x20001864
 8001bb4:	40013000 	.word	0x40013000

08001bb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0ba      	sub	sp, #232	; 0xe8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd0:	f107 0318 	add.w	r3, r7, #24
 8001bd4:	22bc      	movs	r2, #188	; 0xbc
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f00d f841 	bl	800ec60 <memset>
  if(spiHandle->Instance==SPI1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a73      	ldr	r2, [pc, #460]	; (8001db0 <HAL_SPI_MspInit+0x1f8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	f040 80df 	bne.w	8001da8 <HAL_SPI_MspInit+0x1f0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf4:	f107 0318 	add.w	r3, r7, #24
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f005 f89f 	bl	8006d3c <HAL_RCCEx_PeriphCLKConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001c04:	f7ff fc7c 	bl	8001500 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c08:	4b6a      	ldr	r3, [pc, #424]	; (8001db4 <HAL_SPI_MspInit+0x1fc>)
 8001c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c0e:	4a69      	ldr	r2, [pc, #420]	; (8001db4 <HAL_SPI_MspInit+0x1fc>)
 8001c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c18:	4b66      	ldr	r3, [pc, #408]	; (8001db4 <HAL_SPI_MspInit+0x1fc>)
 8001c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <HAL_SPI_MspInit+0x1fc>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2c:	4a61      	ldr	r2, [pc, #388]	; (8001db4 <HAL_SPI_MspInit+0x1fc>)
 8001c2e:	f043 0302 	orr.w	r3, r3, #2
 8001c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c36:	4b5f      	ldr	r3, [pc, #380]	; (8001db4 <HAL_SPI_MspInit+0x1fc>)
 8001c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c44:	4b5b      	ldr	r3, [pc, #364]	; (8001db4 <HAL_SPI_MspInit+0x1fc>)
 8001c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4a:	4a5a      	ldr	r2, [pc, #360]	; (8001db4 <HAL_SPI_MspInit+0x1fc>)
 8001c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c54:	4b57      	ldr	r3, [pc, #348]	; (8001db4 <HAL_SPI_MspInit+0x1fc>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
    PB5     ------> SPI1_MOSI
    PB4 (NJTRST)     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    PG10     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001c62:	2330      	movs	r3, #48	; 0x30
 8001c64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c74:	2302      	movs	r3, #2
 8001c76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c84:	4619      	mov	r1, r3
 8001c86:	484c      	ldr	r0, [pc, #304]	; (8001db8 <HAL_SPI_MspInit+0x200>)
 8001c88:	f003 f9c0 	bl	800500c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001c8c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4842      	ldr	r0, [pc, #264]	; (8001dbc <HAL_SPI_MspInit+0x204>)
 8001cb4:	f003 f9aa 	bl	800500c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream6;
 8001cb8:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001cba:	4a42      	ldr	r2, [pc, #264]	; (8001dc4 <HAL_SPI_MspInit+0x20c>)
 8001cbc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001cbe:	4b40      	ldr	r3, [pc, #256]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001cc0:	2225      	movs	r2, #37	; 0x25
 8001cc2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cc4:	4b3e      	ldr	r3, [pc, #248]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cca:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cd0:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001cd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cd8:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cde:	4b38      	ldr	r3, [pc, #224]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001ce4:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cea:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001cec:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001cee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cf2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001cf4:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001cfa:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001d00:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001d06:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001d0c:	482c      	ldr	r0, [pc, #176]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001d0e:	f000 fd3b 	bl	8002788 <HAL_DMA_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8001d18:	f7ff fbf2 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a28      	ldr	r2, [pc, #160]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001d20:	67da      	str	r2, [r3, #124]	; 0x7c
 8001d22:	4a27      	ldr	r2, [pc, #156]	; (8001dc0 <HAL_SPI_MspInit+0x208>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream7;
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d2a:	4a28      	ldr	r2, [pc, #160]	; (8001dcc <HAL_SPI_MspInit+0x214>)
 8001d2c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001d2e:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d30:	2226      	movs	r2, #38	; 0x26
 8001d32:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d34:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d36:	2240      	movs	r2, #64	; 0x40
 8001d38:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d46:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001d54:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d5a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d62:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d64:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d66:	2204      	movs	r2, #4
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d7c:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d7e:	f000 fd03 	bl	8002788 <HAL_DMA_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_SPI_MspInit+0x1d4>
    {
      Error_Handler();
 8001d88:	f7ff fbba 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d90:	679a      	str	r2, [r3, #120]	; 0x78
 8001d92:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <HAL_SPI_MspInit+0x210>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2023      	movs	r0, #35	; 0x23
 8001d9e:	f000 faf0 	bl	8002382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001da2:	2023      	movs	r0, #35	; 0x23
 8001da4:	f000 fb07 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001da8:	bf00      	nop
 8001daa:	37e8      	adds	r7, #232	; 0xe8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40013000 	.word	0x40013000
 8001db4:	58024400 	.word	0x58024400
 8001db8:	58020400 	.word	0x58020400
 8001dbc:	58021800 	.word	0x58021800
 8001dc0:	200018ec 	.word	0x200018ec
 8001dc4:	400200a0 	.word	0x400200a0
 8001dc8:	20001964 	.word	0x20001964
 8001dcc:	400200b8 	.word	0x400200b8

08001dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_MspInit+0x30>)
 8001dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ddc:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_MspInit+0x30>)
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_MspInit+0x30>)
 8001de8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	58024400 	.word	0x58024400

08001e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <NMI_Handler+0x4>

08001e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <HardFault_Handler+0x4>

08001e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <MemManage_Handler+0x4>

08001e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1a:	e7fe      	b.n	8001e1a <BusFault_Handler+0x4>

08001e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <UsageFault_Handler+0x4>

08001e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e50:	f000 f96c 	bl	800212c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <DMA1_Stream1_IRQHandler+0x10>)
 8001e5e:	f001 fc9f 	bl	80037a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200016f4 	.word	0x200016f4

08001e6c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <DMA1_Stream2_IRQHandler+0x10>)
 8001e72:	f001 fc95 	bl	80037a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000176c 	.word	0x2000176c

08001e80 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <DMA1_Stream6_IRQHandler+0x10>)
 8001e86:	f001 fc8b 	bl	80037a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200018ec 	.word	0x200018ec

08001e94 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <SPI1_IRQHandler+0x10>)
 8001e9a:	f00a f95b 	bl	800c154 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20001864 	.word	0x20001864

08001ea8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <DMA1_Stream7_IRQHandler+0x10>)
 8001eae:	f001 fc77 	bl	80037a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20001964 	.word	0x20001964

08001ebc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <SDMMC1_IRQHandler+0x10>)
 8001ec2:	f008 fc3b 	bl	800a73c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200017e8 	.word	0x200017e8

08001ed0 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <DMAMUX1_OVR_IRQHandler+0x10>)
 8001ed6:	f003 f847 	bl	8004f68 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200016f4 	.word	0x200016f4

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ee8:	f000 f826 	bl	8001f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eee:	490d      	ldr	r1, [pc, #52]	; (8001f24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f04:	4c0a      	ldr	r4, [pc, #40]	; (8001f30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f12:	f00c fe73 	bl	800ebfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7ff f833 	bl	8000f80 <main>
  bx  lr
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001f28:	08017fd0 	.word	0x08017fd0
  ldr r2, =_sbss
 8001f2c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001f30:	200019f4 	.word	0x200019f4

08001f34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC3_IRQHandler>
	...

08001f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f3c:	4b37      	ldr	r3, [pc, #220]	; (800201c <SystemInit+0xe4>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f42:	4a36      	ldr	r2, [pc, #216]	; (800201c <SystemInit+0xe4>)
 8001f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f4c:	4b34      	ldr	r3, [pc, #208]	; (8002020 <SystemInit+0xe8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	2b06      	cmp	r3, #6
 8001f56:	d807      	bhi.n	8001f68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f58:	4b31      	ldr	r3, [pc, #196]	; (8002020 <SystemInit+0xe8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 030f 	bic.w	r3, r3, #15
 8001f60:	4a2f      	ldr	r2, [pc, #188]	; (8002020 <SystemInit+0xe8>)
 8001f62:	f043 0307 	orr.w	r3, r3, #7
 8001f66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f68:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <SystemInit+0xec>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a2d      	ldr	r2, [pc, #180]	; (8002024 <SystemInit+0xec>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <SystemInit+0xec>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <SystemInit+0xec>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4929      	ldr	r1, [pc, #164]	; (8002024 <SystemInit+0xec>)
 8001f80:	4b29      	ldr	r3, [pc, #164]	; (8002028 <SystemInit+0xf0>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <SystemInit+0xe8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f92:	4b23      	ldr	r3, [pc, #140]	; (8002020 <SystemInit+0xe8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 030f 	bic.w	r3, r3, #15
 8001f9a:	4a21      	ldr	r2, [pc, #132]	; (8002020 <SystemInit+0xe8>)
 8001f9c:	f043 0307 	orr.w	r3, r3, #7
 8001fa0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <SystemInit+0xec>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <SystemInit+0xec>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <SystemInit+0xec>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <SystemInit+0xec>)
 8001fb6:	4a1d      	ldr	r2, [pc, #116]	; (800202c <SystemInit+0xf4>)
 8001fb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <SystemInit+0xec>)
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <SystemInit+0xf8>)
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <SystemInit+0xec>)
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <SystemInit+0xfc>)
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <SystemInit+0xec>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <SystemInit+0xec>)
 8001fce:	4a19      	ldr	r2, [pc, #100]	; (8002034 <SystemInit+0xfc>)
 8001fd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <SystemInit+0xec>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <SystemInit+0xec>)
 8001fda:	4a16      	ldr	r2, [pc, #88]	; (8002034 <SystemInit+0xfc>)
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <SystemInit+0xec>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <SystemInit+0xec>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0e      	ldr	r2, [pc, #56]	; (8002024 <SystemInit+0xec>)
 8001fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <SystemInit+0xec>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <SystemInit+0x100>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <SystemInit+0x104>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002002:	d202      	bcs.n	800200a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <SystemInit+0x108>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <SystemInit+0x10c>)
 800200c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002010:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00
 8002020:	52002000 	.word	0x52002000
 8002024:	58024400 	.word	0x58024400
 8002028:	eaf6ed7f 	.word	0xeaf6ed7f
 800202c:	02020200 	.word	0x02020200
 8002030:	01ff0000 	.word	0x01ff0000
 8002034:	01010280 	.word	0x01010280
 8002038:	5c001000 	.word	0x5c001000
 800203c:	ffff0000 	.word	0xffff0000
 8002040:	51008108 	.word	0x51008108
 8002044:	52004000 	.word	0x52004000

08002048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204e:	2003      	movs	r0, #3
 8002050:	f000 f98c 	bl	800236c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002054:	f004 fcc8 	bl	80069e8 <HAL_RCC_GetSysClockFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_Init+0x68>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	4913      	ldr	r1, [pc, #76]	; (80020b4 <HAL_Init+0x6c>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_Init+0x68>)
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <HAL_Init+0x6c>)
 800207c:	5cd3      	ldrb	r3, [r2, r3]
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <HAL_Init+0x70>)
 800208a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <HAL_Init+0x74>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002092:	2000      	movs	r0, #0
 8002094:	f000 f814 	bl	80020c0 <HAL_InitTick>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e002      	b.n	80020a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020a2:	f7ff fe95 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	58024400 	.word	0x58024400
 80020b4:	0800ee40 	.word	0x0800ee40
 80020b8:	20000004 	.word	0x20000004
 80020bc:	20000000 	.word	0x20000000

080020c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_InitTick+0x60>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e021      	b.n	8002118 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_InitTick+0x64>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_InitTick+0x60>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f971 	bl	80023d2 <HAL_SYSTICK_Config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00e      	b.n	8002118 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b0f      	cmp	r3, #15
 80020fe:	d80a      	bhi.n	8002116 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002100:	2200      	movs	r2, #0
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002108:	f000 f93b 	bl	8002382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <HAL_InitTick+0x68>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e000      	b.n	8002118 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	2000000c 	.word	0x2000000c
 8002124:	20000000 	.word	0x20000000
 8002128:	20000008 	.word	0x20000008

0800212c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_IncTick+0x20>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x24>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_IncTick+0x24>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	2000000c 	.word	0x2000000c
 8002150:	200019dc 	.word	0x200019dc

08002154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return uwTick;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_GetTick+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	200019dc 	.word	0x200019dc

0800216c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff ffee 	bl	8002154 <HAL_GetTick>
 8002178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002184:	d005      	beq.n	8002192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_Delay+0x44>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002192:	bf00      	nop
 8002194:	f7ff ffde 	bl	8002154 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d8f7      	bhi.n	8002194 <HAL_Delay+0x28>
  {
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000000c 	.word	0x2000000c

080021b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_GetREVID+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0c1b      	lsrs	r3, r3, #16
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	5c001000 	.word	0x5c001000

080021cc <__NVIC_SetPriorityGrouping>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <__NVIC_SetPriorityGrouping+0x40>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e8:	4013      	ands	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <__NVIC_SetPriorityGrouping+0x44>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fa:	4a04      	ldr	r2, [pc, #16]	; (800220c <__NVIC_SetPriorityGrouping+0x40>)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	60d3      	str	r3, [r2, #12]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00
 8002210:	05fa0000 	.word	0x05fa0000

08002214 <__NVIC_GetPriorityGrouping>:
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <__NVIC_GetPriorityGrouping+0x18>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	f003 0307 	and.w	r3, r3, #7
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_EnableIRQ>:
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800223a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800223e:	2b00      	cmp	r3, #0
 8002240:	db0b      	blt.n	800225a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	4907      	ldr	r1, [pc, #28]	; (8002268 <__NVIC_EnableIRQ+0x38>)
 800224a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	2001      	movs	r0, #1
 8002252:	fa00 f202 	lsl.w	r2, r0, r2
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e100 	.word	0xe000e100

0800226c <__NVIC_SetPriority>:
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db0a      	blt.n	8002296 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	490c      	ldr	r1, [pc, #48]	; (80022b8 <__NVIC_SetPriority+0x4c>)
 8002286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002294:	e00a      	b.n	80022ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <__NVIC_SetPriority+0x50>)
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3b04      	subs	r3, #4
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	761a      	strb	r2, [r3, #24]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <NVIC_EncodePriority>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f1c3 0307 	rsb	r3, r3, #7
 80022da:	2b04      	cmp	r3, #4
 80022dc:	bf28      	it	cs
 80022de:	2304      	movcs	r3, #4
 80022e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d902      	bls.n	80022f0 <NVIC_EncodePriority+0x30>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3b03      	subs	r3, #3
 80022ee:	e000      	b.n	80022f2 <NVIC_EncodePriority+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002308:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	4313      	orrs	r3, r2
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	; 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002338:	d301      	bcc.n	800233e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233a:	2301      	movs	r3, #1
 800233c:	e00f      	b.n	800235e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233e:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <SysTick_Config+0x40>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002346:	210f      	movs	r1, #15
 8002348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800234c:	f7ff ff8e 	bl	800226c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <SysTick_Config+0x40>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <SysTick_Config+0x40>)
 8002358:	2207      	movs	r2, #7
 800235a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	e000e010 	.word	0xe000e010

0800236c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff29 	bl	80021cc <__NVIC_SetPriorityGrouping>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002390:	f7ff ff40 	bl	8002214 <__NVIC_GetPriorityGrouping>
 8002394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7ff ff90 	bl	80022c0 <NVIC_EncodePriority>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff5f 	bl	800226c <__NVIC_SetPriority>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff33 	bl	8002230 <__NVIC_EnableIRQ>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffa4 	bl	8002328 <SysTick_Config>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80023f0:	f3bf 8f5f 	dmb	sy
}
 80023f4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <HAL_MPU_Disable+0x28>)
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	4a06      	ldr	r2, [pc, #24]	; (8002414 <HAL_MPU_Disable+0x28>)
 80023fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002400:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_MPU_Disable+0x2c>)
 8002404:	2200      	movs	r2, #0
 8002406:	605a      	str	r2, [r3, #4]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000ed00 	.word	0xe000ed00
 8002418:	e000ed90 	.word	0xe000ed90

0800241c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002424:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <HAL_MPU_Enable+0x38>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_MPU_Enable+0x3c>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_MPU_Enable+0x3c>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800243a:	f3bf 8f4f 	dsb	sy
}
 800243e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002440:	f3bf 8f6f 	isb	sy
}
 8002444:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000ed90 	.word	0xe000ed90
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	785a      	ldrb	r2, [r3, #1]
 8002468:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <HAL_MPU_ConfigRegion+0x84>)
 800246a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d029      	beq.n	80024c8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002474:	4a1a      	ldr	r2, [pc, #104]	; (80024e0 <HAL_MPU_ConfigRegion+0x84>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7b1b      	ldrb	r3, [r3, #12]
 8002480:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7adb      	ldrb	r3, [r3, #11]
 8002486:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002488:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7a9b      	ldrb	r3, [r3, #10]
 800248e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002490:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7b5b      	ldrb	r3, [r3, #13]
 8002496:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002498:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7b9b      	ldrb	r3, [r3, #14]
 800249e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7bdb      	ldrb	r3, [r3, #15]
 80024a6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7a5b      	ldrb	r3, [r3, #9]
 80024ae:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7a1b      	ldrb	r3, [r3, #8]
 80024b6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024b8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	7812      	ldrb	r2, [r2, #0]
 80024be:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024c0:	4a07      	ldr	r2, [pc, #28]	; (80024e0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024c2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024c4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80024c6:	e005      	b.n	80024d4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_MPU_ConfigRegion+0x84>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <HAL_MPU_ConfigRegion+0x84>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed90 	.word	0xe000ed90

080024e4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e014      	b.n	8002520 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	791b      	ldrb	r3, [r3, #4]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe f940 	bl	800078c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	795b      	ldrb	r3, [r3, #5]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_DAC_ConfigChannel+0x18>
 800253c:	2302      	movs	r3, #2
 800253e:	e11d      	b.n	800277c <HAL_DAC_ConfigChannel+0x254>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2202      	movs	r2, #2
 800254a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d174      	bne.n	800263e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002554:	f7ff fdfe 	bl	8002154 <HAL_GetTick>
 8002558:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d134      	bne.n	80025ca <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002560:	e011      	b.n	8002586 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002562:	f7ff fdf7 	bl	8002154 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d90a      	bls.n	8002586 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	f043 0208 	orr.w	r2, r3, #8
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2203      	movs	r2, #3
 8002580:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e0fa      	b.n	800277c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800258c:	4b7d      	ldr	r3, [pc, #500]	; (8002784 <HAL_DAC_ConfigChannel+0x25c>)
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e6      	bne.n	8002562 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002594:	2001      	movs	r0, #1
 8002596:	f7ff fde9 	bl	800216c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	6992      	ldr	r2, [r2, #24]
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
 80025a4:	e01e      	b.n	80025e4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80025a6:	f7ff fdd5 	bl	8002154 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d90a      	bls.n	80025ca <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f043 0208 	orr.w	r2, r3, #8
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2203      	movs	r2, #3
 80025c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e0d8      	b.n	800277c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	dbe8      	blt.n	80025a6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80025d4:	2001      	movs	r0, #1
 80025d6:	f7ff fdc9 	bl	800216c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	6992      	ldr	r2, [r2, #24]
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	ea02 0103 	and.w	r1, r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	409a      	lsls	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	21ff      	movs	r1, #255	; 0xff
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	ea02 0103 	and.w	r1, r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	6a1a      	ldr	r2, [r3, #32]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	409a      	lsls	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d11d      	bne.n	8002682 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	221f      	movs	r2, #31
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4013      	ands	r3, r2
 8002660:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002688:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2207      	movs	r2, #7
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	4013      	ands	r3, r2
 800269c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d102      	bne.n	80026ac <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	e00f      	b.n	80026cc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d102      	bne.n	80026ba <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80026b4:	2301      	movs	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	e008      	b.n	80026cc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e001      	b.n	80026cc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6819      	ldr	r1, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	400a      	ands	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	4013      	ands	r3, r2
 8002730:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6819      	ldr	r1, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	22c0      	movs	r2, #192	; 0xc0
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43da      	mvns	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	400a      	ands	r2, r1
 800276c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20008000 	.word	0x20008000

08002788 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff fce0 	bl	8002154 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e316      	b.n	8002dce <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a66      	ldr	r2, [pc, #408]	; (8002940 <HAL_DMA_Init+0x1b8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d04a      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a65      	ldr	r2, [pc, #404]	; (8002944 <HAL_DMA_Init+0x1bc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d045      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a63      	ldr	r2, [pc, #396]	; (8002948 <HAL_DMA_Init+0x1c0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d040      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a62      	ldr	r2, [pc, #392]	; (800294c <HAL_DMA_Init+0x1c4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d03b      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a60      	ldr	r2, [pc, #384]	; (8002950 <HAL_DMA_Init+0x1c8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d036      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a5f      	ldr	r2, [pc, #380]	; (8002954 <HAL_DMA_Init+0x1cc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d031      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5d      	ldr	r2, [pc, #372]	; (8002958 <HAL_DMA_Init+0x1d0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d02c      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a5c      	ldr	r2, [pc, #368]	; (800295c <HAL_DMA_Init+0x1d4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d027      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5a      	ldr	r2, [pc, #360]	; (8002960 <HAL_DMA_Init+0x1d8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d022      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a59      	ldr	r2, [pc, #356]	; (8002964 <HAL_DMA_Init+0x1dc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d01d      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a57      	ldr	r2, [pc, #348]	; (8002968 <HAL_DMA_Init+0x1e0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d018      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a56      	ldr	r2, [pc, #344]	; (800296c <HAL_DMA_Init+0x1e4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a54      	ldr	r2, [pc, #336]	; (8002970 <HAL_DMA_Init+0x1e8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00e      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a53      	ldr	r2, [pc, #332]	; (8002974 <HAL_DMA_Init+0x1ec>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d009      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a51      	ldr	r2, [pc, #324]	; (8002978 <HAL_DMA_Init+0x1f0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d004      	beq.n	8002840 <HAL_DMA_Init+0xb8>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a50      	ldr	r2, [pc, #320]	; (800297c <HAL_DMA_Init+0x1f4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d101      	bne.n	8002844 <HAL_DMA_Init+0xbc>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <HAL_DMA_Init+0xbe>
 8002844:	2300      	movs	r3, #0
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 813b 	beq.w	8002ac2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a37      	ldr	r2, [pc, #220]	; (8002940 <HAL_DMA_Init+0x1b8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d04a      	beq.n	80028fc <HAL_DMA_Init+0x174>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a36      	ldr	r2, [pc, #216]	; (8002944 <HAL_DMA_Init+0x1bc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d045      	beq.n	80028fc <HAL_DMA_Init+0x174>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a34      	ldr	r2, [pc, #208]	; (8002948 <HAL_DMA_Init+0x1c0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d040      	beq.n	80028fc <HAL_DMA_Init+0x174>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a33      	ldr	r2, [pc, #204]	; (800294c <HAL_DMA_Init+0x1c4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d03b      	beq.n	80028fc <HAL_DMA_Init+0x174>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a31      	ldr	r2, [pc, #196]	; (8002950 <HAL_DMA_Init+0x1c8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d036      	beq.n	80028fc <HAL_DMA_Init+0x174>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a30      	ldr	r2, [pc, #192]	; (8002954 <HAL_DMA_Init+0x1cc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d031      	beq.n	80028fc <HAL_DMA_Init+0x174>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2e      	ldr	r2, [pc, #184]	; (8002958 <HAL_DMA_Init+0x1d0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d02c      	beq.n	80028fc <HAL_DMA_Init+0x174>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2d      	ldr	r2, [pc, #180]	; (800295c <HAL_DMA_Init+0x1d4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d027      	beq.n	80028fc <HAL_DMA_Init+0x174>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2b      	ldr	r2, [pc, #172]	; (8002960 <HAL_DMA_Init+0x1d8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d022      	beq.n	80028fc <HAL_DMA_Init+0x174>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2a      	ldr	r2, [pc, #168]	; (8002964 <HAL_DMA_Init+0x1dc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d01d      	beq.n	80028fc <HAL_DMA_Init+0x174>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a28      	ldr	r2, [pc, #160]	; (8002968 <HAL_DMA_Init+0x1e0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d018      	beq.n	80028fc <HAL_DMA_Init+0x174>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a27      	ldr	r2, [pc, #156]	; (800296c <HAL_DMA_Init+0x1e4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d013      	beq.n	80028fc <HAL_DMA_Init+0x174>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a25      	ldr	r2, [pc, #148]	; (8002970 <HAL_DMA_Init+0x1e8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00e      	beq.n	80028fc <HAL_DMA_Init+0x174>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a24      	ldr	r2, [pc, #144]	; (8002974 <HAL_DMA_Init+0x1ec>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d009      	beq.n	80028fc <HAL_DMA_Init+0x174>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <HAL_DMA_Init+0x1f0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d004      	beq.n	80028fc <HAL_DMA_Init+0x174>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <HAL_DMA_Init+0x1f4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d108      	bne.n	800290e <HAL_DMA_Init+0x186>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	e007      	b.n	800291e <HAL_DMA_Init+0x196>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0201 	bic.w	r2, r2, #1
 800291c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800291e:	e02f      	b.n	8002980 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002920:	f7ff fc18 	bl	8002154 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b05      	cmp	r3, #5
 800292c:	d928      	bls.n	8002980 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2203      	movs	r2, #3
 8002938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e246      	b.n	8002dce <HAL_DMA_Init+0x646>
 8002940:	40020010 	.word	0x40020010
 8002944:	40020028 	.word	0x40020028
 8002948:	40020040 	.word	0x40020040
 800294c:	40020058 	.word	0x40020058
 8002950:	40020070 	.word	0x40020070
 8002954:	40020088 	.word	0x40020088
 8002958:	400200a0 	.word	0x400200a0
 800295c:	400200b8 	.word	0x400200b8
 8002960:	40020410 	.word	0x40020410
 8002964:	40020428 	.word	0x40020428
 8002968:	40020440 	.word	0x40020440
 800296c:	40020458 	.word	0x40020458
 8002970:	40020470 	.word	0x40020470
 8002974:	40020488 	.word	0x40020488
 8002978:	400204a0 	.word	0x400204a0
 800297c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1c8      	bne.n	8002920 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4b83      	ldr	r3, [pc, #524]	; (8002ba8 <HAL_DMA_Init+0x420>)
 800299a:	4013      	ands	r3, r2
 800299c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80029a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d107      	bne.n	80029e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	4313      	orrs	r3, r2
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80029e4:	4b71      	ldr	r3, [pc, #452]	; (8002bac <HAL_DMA_Init+0x424>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b71      	ldr	r3, [pc, #452]	; (8002bb0 <HAL_DMA_Init+0x428>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f0:	d328      	bcc.n	8002a44 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b28      	cmp	r3, #40	; 0x28
 80029f8:	d903      	bls.n	8002a02 <HAL_DMA_Init+0x27a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b2e      	cmp	r3, #46	; 0x2e
 8002a00:	d917      	bls.n	8002a32 <HAL_DMA_Init+0x2aa>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b3e      	cmp	r3, #62	; 0x3e
 8002a08:	d903      	bls.n	8002a12 <HAL_DMA_Init+0x28a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b42      	cmp	r3, #66	; 0x42
 8002a10:	d90f      	bls.n	8002a32 <HAL_DMA_Init+0x2aa>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b46      	cmp	r3, #70	; 0x46
 8002a18:	d903      	bls.n	8002a22 <HAL_DMA_Init+0x29a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b48      	cmp	r3, #72	; 0x48
 8002a20:	d907      	bls.n	8002a32 <HAL_DMA_Init+0x2aa>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b4e      	cmp	r3, #78	; 0x4e
 8002a28:	d905      	bls.n	8002a36 <HAL_DMA_Init+0x2ae>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b52      	cmp	r3, #82	; 0x52
 8002a30:	d801      	bhi.n	8002a36 <HAL_DMA_Init+0x2ae>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_DMA_Init+0x2b0>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a42:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f023 0307 	bic.w	r3, r3, #7
 8002a5a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d117      	bne.n	8002a9e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00e      	beq.n	8002a9e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f002 f821 	bl	8004ac8 <DMA_CheckFifoParam>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2240      	movs	r2, #64	; 0x40
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e197      	b.n	8002dce <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f001 ff5c 	bl	8004964 <DMA_CalcBaseAndBitshift>
 8002aac:	4603      	mov	r3, r0
 8002aae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	223f      	movs	r2, #63	; 0x3f
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	e0cd      	b.n	8002c5e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a3b      	ldr	r2, [pc, #236]	; (8002bb4 <HAL_DMA_Init+0x42c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d022      	beq.n	8002b12 <HAL_DMA_Init+0x38a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a39      	ldr	r2, [pc, #228]	; (8002bb8 <HAL_DMA_Init+0x430>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01d      	beq.n	8002b12 <HAL_DMA_Init+0x38a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a38      	ldr	r2, [pc, #224]	; (8002bbc <HAL_DMA_Init+0x434>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d018      	beq.n	8002b12 <HAL_DMA_Init+0x38a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a36      	ldr	r2, [pc, #216]	; (8002bc0 <HAL_DMA_Init+0x438>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_DMA_Init+0x38a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a35      	ldr	r2, [pc, #212]	; (8002bc4 <HAL_DMA_Init+0x43c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00e      	beq.n	8002b12 <HAL_DMA_Init+0x38a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a33      	ldr	r2, [pc, #204]	; (8002bc8 <HAL_DMA_Init+0x440>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d009      	beq.n	8002b12 <HAL_DMA_Init+0x38a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a32      	ldr	r2, [pc, #200]	; (8002bcc <HAL_DMA_Init+0x444>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d004      	beq.n	8002b12 <HAL_DMA_Init+0x38a>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a30      	ldr	r2, [pc, #192]	; (8002bd0 <HAL_DMA_Init+0x448>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <HAL_DMA_Init+0x38e>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <HAL_DMA_Init+0x390>
 8002b16:	2300      	movs	r3, #0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8097 	beq.w	8002c4c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <HAL_DMA_Init+0x42c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d021      	beq.n	8002b6c <HAL_DMA_Init+0x3e4>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <HAL_DMA_Init+0x430>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d01c      	beq.n	8002b6c <HAL_DMA_Init+0x3e4>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a21      	ldr	r2, [pc, #132]	; (8002bbc <HAL_DMA_Init+0x434>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d017      	beq.n	8002b6c <HAL_DMA_Init+0x3e4>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <HAL_DMA_Init+0x438>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d012      	beq.n	8002b6c <HAL_DMA_Init+0x3e4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <HAL_DMA_Init+0x43c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00d      	beq.n	8002b6c <HAL_DMA_Init+0x3e4>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1c      	ldr	r2, [pc, #112]	; (8002bc8 <HAL_DMA_Init+0x440>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d008      	beq.n	8002b6c <HAL_DMA_Init+0x3e4>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <HAL_DMA_Init+0x444>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d003      	beq.n	8002b6c <HAL_DMA_Init+0x3e4>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <HAL_DMA_Init+0x448>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <HAL_DMA_Init+0x44c>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b40      	cmp	r3, #64	; 0x40
 8002b94:	d020      	beq.n	8002bd8 <HAL_DMA_Init+0x450>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b80      	cmp	r3, #128	; 0x80
 8002b9c:	d102      	bne.n	8002ba4 <HAL_DMA_Init+0x41c>
 8002b9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ba2:	e01a      	b.n	8002bda <HAL_DMA_Init+0x452>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e018      	b.n	8002bda <HAL_DMA_Init+0x452>
 8002ba8:	fe10803f 	.word	0xfe10803f
 8002bac:	5c001000 	.word	0x5c001000
 8002bb0:	ffff0000 	.word	0xffff0000
 8002bb4:	58025408 	.word	0x58025408
 8002bb8:	5802541c 	.word	0x5802541c
 8002bbc:	58025430 	.word	0x58025430
 8002bc0:	58025444 	.word	0x58025444
 8002bc4:	58025458 	.word	0x58025458
 8002bc8:	5802546c 	.word	0x5802546c
 8002bcc:	58025480 	.word	0x58025480
 8002bd0:	58025494 	.word	0x58025494
 8002bd4:	fffe000f 	.word	0xfffe000f
 8002bd8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68d2      	ldr	r2, [r2, #12]
 8002bde:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002be0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002be8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002bf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bf8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c08:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b6e      	ldr	r3, [pc, #440]	; (8002dd8 <HAL_DMA_Init+0x650>)
 8002c20:	4413      	add	r3, r2
 8002c22:	4a6e      	ldr	r2, [pc, #440]	; (8002ddc <HAL_DMA_Init+0x654>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	009a      	lsls	r2, r3, #2
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f001 fe97 	bl	8004964 <DMA_CalcBaseAndBitshift>
 8002c36:	4603      	mov	r3, r0
 8002c38:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2201      	movs	r2, #1
 8002c44:	409a      	lsls	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	e008      	b.n	8002c5e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2203      	movs	r2, #3
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0b7      	b.n	8002dce <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a5f      	ldr	r2, [pc, #380]	; (8002de0 <HAL_DMA_Init+0x658>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d072      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a5d      	ldr	r2, [pc, #372]	; (8002de4 <HAL_DMA_Init+0x65c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d06d      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a5c      	ldr	r2, [pc, #368]	; (8002de8 <HAL_DMA_Init+0x660>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d068      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a5a      	ldr	r2, [pc, #360]	; (8002dec <HAL_DMA_Init+0x664>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d063      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a59      	ldr	r2, [pc, #356]	; (8002df0 <HAL_DMA_Init+0x668>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d05e      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a57      	ldr	r2, [pc, #348]	; (8002df4 <HAL_DMA_Init+0x66c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d059      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a56      	ldr	r2, [pc, #344]	; (8002df8 <HAL_DMA_Init+0x670>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d054      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a54      	ldr	r2, [pc, #336]	; (8002dfc <HAL_DMA_Init+0x674>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d04f      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a53      	ldr	r2, [pc, #332]	; (8002e00 <HAL_DMA_Init+0x678>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d04a      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a51      	ldr	r2, [pc, #324]	; (8002e04 <HAL_DMA_Init+0x67c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d045      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a50      	ldr	r2, [pc, #320]	; (8002e08 <HAL_DMA_Init+0x680>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d040      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a4e      	ldr	r2, [pc, #312]	; (8002e0c <HAL_DMA_Init+0x684>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d03b      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a4d      	ldr	r2, [pc, #308]	; (8002e10 <HAL_DMA_Init+0x688>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d036      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a4b      	ldr	r2, [pc, #300]	; (8002e14 <HAL_DMA_Init+0x68c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d031      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a4a      	ldr	r2, [pc, #296]	; (8002e18 <HAL_DMA_Init+0x690>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d02c      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a48      	ldr	r2, [pc, #288]	; (8002e1c <HAL_DMA_Init+0x694>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d027      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a47      	ldr	r2, [pc, #284]	; (8002e20 <HAL_DMA_Init+0x698>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d022      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a45      	ldr	r2, [pc, #276]	; (8002e24 <HAL_DMA_Init+0x69c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01d      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a44      	ldr	r2, [pc, #272]	; (8002e28 <HAL_DMA_Init+0x6a0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d018      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a42      	ldr	r2, [pc, #264]	; (8002e2c <HAL_DMA_Init+0x6a4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a41      	ldr	r2, [pc, #260]	; (8002e30 <HAL_DMA_Init+0x6a8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00e      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a3f      	ldr	r2, [pc, #252]	; (8002e34 <HAL_DMA_Init+0x6ac>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d009      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a3e      	ldr	r2, [pc, #248]	; (8002e38 <HAL_DMA_Init+0x6b0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_DMA_Init+0x5c6>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a3c      	ldr	r2, [pc, #240]	; (8002e3c <HAL_DMA_Init+0x6b4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d101      	bne.n	8002d52 <HAL_DMA_Init+0x5ca>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_DMA_Init+0x5cc>
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d032      	beq.n	8002dbe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f001 ff31 	bl	8004bc0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b80      	cmp	r3, #128	; 0x80
 8002d64:	d102      	bne.n	8002d6c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d80:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d010      	beq.n	8002dac <HAL_DMA_Init+0x624>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d80c      	bhi.n	8002dac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f001 ffae 	bl	8004cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	e008      	b.n	8002dbe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	a7fdabf8 	.word	0xa7fdabf8
 8002ddc:	cccccccd 	.word	0xcccccccd
 8002de0:	40020010 	.word	0x40020010
 8002de4:	40020028 	.word	0x40020028
 8002de8:	40020040 	.word	0x40020040
 8002dec:	40020058 	.word	0x40020058
 8002df0:	40020070 	.word	0x40020070
 8002df4:	40020088 	.word	0x40020088
 8002df8:	400200a0 	.word	0x400200a0
 8002dfc:	400200b8 	.word	0x400200b8
 8002e00:	40020410 	.word	0x40020410
 8002e04:	40020428 	.word	0x40020428
 8002e08:	40020440 	.word	0x40020440
 8002e0c:	40020458 	.word	0x40020458
 8002e10:	40020470 	.word	0x40020470
 8002e14:	40020488 	.word	0x40020488
 8002e18:	400204a0 	.word	0x400204a0
 8002e1c:	400204b8 	.word	0x400204b8
 8002e20:	58025408 	.word	0x58025408
 8002e24:	5802541c 	.word	0x5802541c
 8002e28:	58025430 	.word	0x58025430
 8002e2c:	58025444 	.word	0x58025444
 8002e30:	58025458 	.word	0x58025458
 8002e34:	5802546c 	.word	0x5802546c
 8002e38:	58025480 	.word	0x58025480
 8002e3c:	58025494 	.word	0x58025494

08002e40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e226      	b.n	80032aa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_DMA_Start_IT+0x2a>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e21f      	b.n	80032aa <HAL_DMA_Start_IT+0x46a>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	f040 820a 	bne.w	8003294 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a68      	ldr	r2, [pc, #416]	; (8003034 <HAL_DMA_Start_IT+0x1f4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d04a      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a66      	ldr	r2, [pc, #408]	; (8003038 <HAL_DMA_Start_IT+0x1f8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d045      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a65      	ldr	r2, [pc, #404]	; (800303c <HAL_DMA_Start_IT+0x1fc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d040      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a63      	ldr	r2, [pc, #396]	; (8003040 <HAL_DMA_Start_IT+0x200>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d03b      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a62      	ldr	r2, [pc, #392]	; (8003044 <HAL_DMA_Start_IT+0x204>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d036      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a60      	ldr	r2, [pc, #384]	; (8003048 <HAL_DMA_Start_IT+0x208>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d031      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a5f      	ldr	r2, [pc, #380]	; (800304c <HAL_DMA_Start_IT+0x20c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d02c      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a5d      	ldr	r2, [pc, #372]	; (8003050 <HAL_DMA_Start_IT+0x210>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d027      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a5c      	ldr	r2, [pc, #368]	; (8003054 <HAL_DMA_Start_IT+0x214>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d022      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a5a      	ldr	r2, [pc, #360]	; (8003058 <HAL_DMA_Start_IT+0x218>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01d      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a59      	ldr	r2, [pc, #356]	; (800305c <HAL_DMA_Start_IT+0x21c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d018      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a57      	ldr	r2, [pc, #348]	; (8003060 <HAL_DMA_Start_IT+0x220>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a56      	ldr	r2, [pc, #344]	; (8003064 <HAL_DMA_Start_IT+0x224>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00e      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a54      	ldr	r2, [pc, #336]	; (8003068 <HAL_DMA_Start_IT+0x228>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d009      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a53      	ldr	r2, [pc, #332]	; (800306c <HAL_DMA_Start_IT+0x22c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d004      	beq.n	8002f2e <HAL_DMA_Start_IT+0xee>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a51      	ldr	r2, [pc, #324]	; (8003070 <HAL_DMA_Start_IT+0x230>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d108      	bne.n	8002f40 <HAL_DMA_Start_IT+0x100>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e007      	b.n	8002f50 <HAL_DMA_Start_IT+0x110>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f001 fb58 	bl	800460c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a34      	ldr	r2, [pc, #208]	; (8003034 <HAL_DMA_Start_IT+0x1f4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d04a      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a33      	ldr	r2, [pc, #204]	; (8003038 <HAL_DMA_Start_IT+0x1f8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d045      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a31      	ldr	r2, [pc, #196]	; (800303c <HAL_DMA_Start_IT+0x1fc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d040      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a30      	ldr	r2, [pc, #192]	; (8003040 <HAL_DMA_Start_IT+0x200>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d03b      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a2e      	ldr	r2, [pc, #184]	; (8003044 <HAL_DMA_Start_IT+0x204>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d036      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a2d      	ldr	r2, [pc, #180]	; (8003048 <HAL_DMA_Start_IT+0x208>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d031      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a2b      	ldr	r2, [pc, #172]	; (800304c <HAL_DMA_Start_IT+0x20c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d02c      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2a      	ldr	r2, [pc, #168]	; (8003050 <HAL_DMA_Start_IT+0x210>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d027      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a28      	ldr	r2, [pc, #160]	; (8003054 <HAL_DMA_Start_IT+0x214>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d022      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a27      	ldr	r2, [pc, #156]	; (8003058 <HAL_DMA_Start_IT+0x218>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d01d      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a25      	ldr	r2, [pc, #148]	; (800305c <HAL_DMA_Start_IT+0x21c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d018      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a24      	ldr	r2, [pc, #144]	; (8003060 <HAL_DMA_Start_IT+0x220>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d013      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a22      	ldr	r2, [pc, #136]	; (8003064 <HAL_DMA_Start_IT+0x224>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00e      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a21      	ldr	r2, [pc, #132]	; (8003068 <HAL_DMA_Start_IT+0x228>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d009      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1f      	ldr	r2, [pc, #124]	; (800306c <HAL_DMA_Start_IT+0x22c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <HAL_DMA_Start_IT+0x1bc>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <HAL_DMA_Start_IT+0x230>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <HAL_DMA_Start_IT+0x1c0>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_DMA_Start_IT+0x1c2>
 8003000:	2300      	movs	r3, #0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d036      	beq.n	8003074 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 021e 	bic.w	r2, r3, #30
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0216 	orr.w	r2, r2, #22
 8003018:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d03e      	beq.n	80030a0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0208 	orr.w	r2, r2, #8
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e035      	b.n	80030a0 <HAL_DMA_Start_IT+0x260>
 8003034:	40020010 	.word	0x40020010
 8003038:	40020028 	.word	0x40020028
 800303c:	40020040 	.word	0x40020040
 8003040:	40020058 	.word	0x40020058
 8003044:	40020070 	.word	0x40020070
 8003048:	40020088 	.word	0x40020088
 800304c:	400200a0 	.word	0x400200a0
 8003050:	400200b8 	.word	0x400200b8
 8003054:	40020410 	.word	0x40020410
 8003058:	40020428 	.word	0x40020428
 800305c:	40020440 	.word	0x40020440
 8003060:	40020458 	.word	0x40020458
 8003064:	40020470 	.word	0x40020470
 8003068:	40020488 	.word	0x40020488
 800306c:	400204a0 	.word	0x400204a0
 8003070:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 020e 	bic.w	r2, r3, #14
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 020a 	orr.w	r2, r2, #10
 8003086:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0204 	orr.w	r2, r2, #4
 800309e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a83      	ldr	r2, [pc, #524]	; (80032b4 <HAL_DMA_Start_IT+0x474>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d072      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a82      	ldr	r2, [pc, #520]	; (80032b8 <HAL_DMA_Start_IT+0x478>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d06d      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a80      	ldr	r2, [pc, #512]	; (80032bc <HAL_DMA_Start_IT+0x47c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d068      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7f      	ldr	r2, [pc, #508]	; (80032c0 <HAL_DMA_Start_IT+0x480>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d063      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a7d      	ldr	r2, [pc, #500]	; (80032c4 <HAL_DMA_Start_IT+0x484>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d05e      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7c      	ldr	r2, [pc, #496]	; (80032c8 <HAL_DMA_Start_IT+0x488>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d059      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a7a      	ldr	r2, [pc, #488]	; (80032cc <HAL_DMA_Start_IT+0x48c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d054      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a79      	ldr	r2, [pc, #484]	; (80032d0 <HAL_DMA_Start_IT+0x490>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d04f      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a77      	ldr	r2, [pc, #476]	; (80032d4 <HAL_DMA_Start_IT+0x494>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d04a      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a76      	ldr	r2, [pc, #472]	; (80032d8 <HAL_DMA_Start_IT+0x498>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d045      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a74      	ldr	r2, [pc, #464]	; (80032dc <HAL_DMA_Start_IT+0x49c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d040      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a73      	ldr	r2, [pc, #460]	; (80032e0 <HAL_DMA_Start_IT+0x4a0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d03b      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a71      	ldr	r2, [pc, #452]	; (80032e4 <HAL_DMA_Start_IT+0x4a4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d036      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a70      	ldr	r2, [pc, #448]	; (80032e8 <HAL_DMA_Start_IT+0x4a8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d031      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a6e      	ldr	r2, [pc, #440]	; (80032ec <HAL_DMA_Start_IT+0x4ac>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d02c      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a6d      	ldr	r2, [pc, #436]	; (80032f0 <HAL_DMA_Start_IT+0x4b0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d027      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a6b      	ldr	r2, [pc, #428]	; (80032f4 <HAL_DMA_Start_IT+0x4b4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d022      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a6a      	ldr	r2, [pc, #424]	; (80032f8 <HAL_DMA_Start_IT+0x4b8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d01d      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a68      	ldr	r2, [pc, #416]	; (80032fc <HAL_DMA_Start_IT+0x4bc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d018      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a67      	ldr	r2, [pc, #412]	; (8003300 <HAL_DMA_Start_IT+0x4c0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a65      	ldr	r2, [pc, #404]	; (8003304 <HAL_DMA_Start_IT+0x4c4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00e      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a64      	ldr	r2, [pc, #400]	; (8003308 <HAL_DMA_Start_IT+0x4c8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d009      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a62      	ldr	r2, [pc, #392]	; (800330c <HAL_DMA_Start_IT+0x4cc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_DMA_Start_IT+0x350>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a61      	ldr	r2, [pc, #388]	; (8003310 <HAL_DMA_Start_IT+0x4d0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_DMA_Start_IT+0x354>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_DMA_Start_IT+0x356>
 8003194:	2300      	movs	r3, #0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d01a      	beq.n	80031d0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d007      	beq.n	80031d0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a37      	ldr	r2, [pc, #220]	; (80032b4 <HAL_DMA_Start_IT+0x474>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d04a      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a36      	ldr	r2, [pc, #216]	; (80032b8 <HAL_DMA_Start_IT+0x478>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d045      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a34      	ldr	r2, [pc, #208]	; (80032bc <HAL_DMA_Start_IT+0x47c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d040      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a33      	ldr	r2, [pc, #204]	; (80032c0 <HAL_DMA_Start_IT+0x480>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d03b      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a31      	ldr	r2, [pc, #196]	; (80032c4 <HAL_DMA_Start_IT+0x484>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d036      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a30      	ldr	r2, [pc, #192]	; (80032c8 <HAL_DMA_Start_IT+0x488>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d031      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2e      	ldr	r2, [pc, #184]	; (80032cc <HAL_DMA_Start_IT+0x48c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d02c      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2d      	ldr	r2, [pc, #180]	; (80032d0 <HAL_DMA_Start_IT+0x490>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d027      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a2b      	ldr	r2, [pc, #172]	; (80032d4 <HAL_DMA_Start_IT+0x494>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d022      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a2a      	ldr	r2, [pc, #168]	; (80032d8 <HAL_DMA_Start_IT+0x498>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d01d      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a28      	ldr	r2, [pc, #160]	; (80032dc <HAL_DMA_Start_IT+0x49c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d018      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a27      	ldr	r2, [pc, #156]	; (80032e0 <HAL_DMA_Start_IT+0x4a0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d013      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a25      	ldr	r2, [pc, #148]	; (80032e4 <HAL_DMA_Start_IT+0x4a4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00e      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a24      	ldr	r2, [pc, #144]	; (80032e8 <HAL_DMA_Start_IT+0x4a8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d009      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a22      	ldr	r2, [pc, #136]	; (80032ec <HAL_DMA_Start_IT+0x4ac>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <HAL_DMA_Start_IT+0x430>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <HAL_DMA_Start_IT+0x4b0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d108      	bne.n	8003282 <HAL_DMA_Start_IT+0x442>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	e012      	b.n	80032a8 <HAL_DMA_Start_IT+0x468>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0201 	orr.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e009      	b.n	80032a8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800329a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80032a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40020010 	.word	0x40020010
 80032b8:	40020028 	.word	0x40020028
 80032bc:	40020040 	.word	0x40020040
 80032c0:	40020058 	.word	0x40020058
 80032c4:	40020070 	.word	0x40020070
 80032c8:	40020088 	.word	0x40020088
 80032cc:	400200a0 	.word	0x400200a0
 80032d0:	400200b8 	.word	0x400200b8
 80032d4:	40020410 	.word	0x40020410
 80032d8:	40020428 	.word	0x40020428
 80032dc:	40020440 	.word	0x40020440
 80032e0:	40020458 	.word	0x40020458
 80032e4:	40020470 	.word	0x40020470
 80032e8:	40020488 	.word	0x40020488
 80032ec:	400204a0 	.word	0x400204a0
 80032f0:	400204b8 	.word	0x400204b8
 80032f4:	58025408 	.word	0x58025408
 80032f8:	5802541c 	.word	0x5802541c
 80032fc:	58025430 	.word	0x58025430
 8003300:	58025444 	.word	0x58025444
 8003304:	58025458 	.word	0x58025458
 8003308:	5802546c 	.word	0x5802546c
 800330c:	58025480 	.word	0x58025480
 8003310:	58025494 	.word	0x58025494

08003314 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e237      	b.n	8003796 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d004      	beq.n	800333c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2280      	movs	r2, #128	; 0x80
 8003336:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e22c      	b.n	8003796 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a5c      	ldr	r2, [pc, #368]	; (80034b4 <HAL_DMA_Abort_IT+0x1a0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d04a      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a5b      	ldr	r2, [pc, #364]	; (80034b8 <HAL_DMA_Abort_IT+0x1a4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d045      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a59      	ldr	r2, [pc, #356]	; (80034bc <HAL_DMA_Abort_IT+0x1a8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d040      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a58      	ldr	r2, [pc, #352]	; (80034c0 <HAL_DMA_Abort_IT+0x1ac>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d03b      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <HAL_DMA_Abort_IT+0x1b0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d036      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a55      	ldr	r2, [pc, #340]	; (80034c8 <HAL_DMA_Abort_IT+0x1b4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d031      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a53      	ldr	r2, [pc, #332]	; (80034cc <HAL_DMA_Abort_IT+0x1b8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d02c      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_DMA_Abort_IT+0x1bc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d027      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a50      	ldr	r2, [pc, #320]	; (80034d4 <HAL_DMA_Abort_IT+0x1c0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d022      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a4f      	ldr	r2, [pc, #316]	; (80034d8 <HAL_DMA_Abort_IT+0x1c4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d01d      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a4d      	ldr	r2, [pc, #308]	; (80034dc <HAL_DMA_Abort_IT+0x1c8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d018      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a4c      	ldr	r2, [pc, #304]	; (80034e0 <HAL_DMA_Abort_IT+0x1cc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d013      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a4a      	ldr	r2, [pc, #296]	; (80034e4 <HAL_DMA_Abort_IT+0x1d0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00e      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a49      	ldr	r2, [pc, #292]	; (80034e8 <HAL_DMA_Abort_IT+0x1d4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d009      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a47      	ldr	r2, [pc, #284]	; (80034ec <HAL_DMA_Abort_IT+0x1d8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d004      	beq.n	80033dc <HAL_DMA_Abort_IT+0xc8>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a46      	ldr	r2, [pc, #280]	; (80034f0 <HAL_DMA_Abort_IT+0x1dc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d101      	bne.n	80033e0 <HAL_DMA_Abort_IT+0xcc>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_DMA_Abort_IT+0xce>
 80033e0:	2300      	movs	r3, #0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8086 	beq.w	80034f4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2204      	movs	r2, #4
 80033ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2f      	ldr	r2, [pc, #188]	; (80034b4 <HAL_DMA_Abort_IT+0x1a0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d04a      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2e      	ldr	r2, [pc, #184]	; (80034b8 <HAL_DMA_Abort_IT+0x1a4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d045      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a2c      	ldr	r2, [pc, #176]	; (80034bc <HAL_DMA_Abort_IT+0x1a8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d040      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2b      	ldr	r2, [pc, #172]	; (80034c0 <HAL_DMA_Abort_IT+0x1ac>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d03b      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a29      	ldr	r2, [pc, #164]	; (80034c4 <HAL_DMA_Abort_IT+0x1b0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d036      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a28      	ldr	r2, [pc, #160]	; (80034c8 <HAL_DMA_Abort_IT+0x1b4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d031      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a26      	ldr	r2, [pc, #152]	; (80034cc <HAL_DMA_Abort_IT+0x1b8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d02c      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a25      	ldr	r2, [pc, #148]	; (80034d0 <HAL_DMA_Abort_IT+0x1bc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d027      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a23      	ldr	r2, [pc, #140]	; (80034d4 <HAL_DMA_Abort_IT+0x1c0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d022      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a22      	ldr	r2, [pc, #136]	; (80034d8 <HAL_DMA_Abort_IT+0x1c4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d01d      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a20      	ldr	r2, [pc, #128]	; (80034dc <HAL_DMA_Abort_IT+0x1c8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d018      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1f      	ldr	r2, [pc, #124]	; (80034e0 <HAL_DMA_Abort_IT+0x1cc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d013      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <HAL_DMA_Abort_IT+0x1d0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00e      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1c      	ldr	r2, [pc, #112]	; (80034e8 <HAL_DMA_Abort_IT+0x1d4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d009      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1a      	ldr	r2, [pc, #104]	; (80034ec <HAL_DMA_Abort_IT+0x1d8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d004      	beq.n	8003490 <HAL_DMA_Abort_IT+0x17c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <HAL_DMA_Abort_IT+0x1dc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d108      	bne.n	80034a2 <HAL_DMA_Abort_IT+0x18e>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0201 	bic.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e178      	b.n	8003794 <HAL_DMA_Abort_IT+0x480>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e16f      	b.n	8003794 <HAL_DMA_Abort_IT+0x480>
 80034b4:	40020010 	.word	0x40020010
 80034b8:	40020028 	.word	0x40020028
 80034bc:	40020040 	.word	0x40020040
 80034c0:	40020058 	.word	0x40020058
 80034c4:	40020070 	.word	0x40020070
 80034c8:	40020088 	.word	0x40020088
 80034cc:	400200a0 	.word	0x400200a0
 80034d0:	400200b8 	.word	0x400200b8
 80034d4:	40020410 	.word	0x40020410
 80034d8:	40020428 	.word	0x40020428
 80034dc:	40020440 	.word	0x40020440
 80034e0:	40020458 	.word	0x40020458
 80034e4:	40020470 	.word	0x40020470
 80034e8:	40020488 	.word	0x40020488
 80034ec:	400204a0 	.word	0x400204a0
 80034f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 020e 	bic.w	r2, r2, #14
 8003502:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a6c      	ldr	r2, [pc, #432]	; (80036bc <HAL_DMA_Abort_IT+0x3a8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d04a      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a6b      	ldr	r2, [pc, #428]	; (80036c0 <HAL_DMA_Abort_IT+0x3ac>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d045      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a69      	ldr	r2, [pc, #420]	; (80036c4 <HAL_DMA_Abort_IT+0x3b0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d040      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a68      	ldr	r2, [pc, #416]	; (80036c8 <HAL_DMA_Abort_IT+0x3b4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d03b      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a66      	ldr	r2, [pc, #408]	; (80036cc <HAL_DMA_Abort_IT+0x3b8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d036      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a65      	ldr	r2, [pc, #404]	; (80036d0 <HAL_DMA_Abort_IT+0x3bc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d031      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a63      	ldr	r2, [pc, #396]	; (80036d4 <HAL_DMA_Abort_IT+0x3c0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d02c      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a62      	ldr	r2, [pc, #392]	; (80036d8 <HAL_DMA_Abort_IT+0x3c4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d027      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a60      	ldr	r2, [pc, #384]	; (80036dc <HAL_DMA_Abort_IT+0x3c8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d022      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a5f      	ldr	r2, [pc, #380]	; (80036e0 <HAL_DMA_Abort_IT+0x3cc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d01d      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a5d      	ldr	r2, [pc, #372]	; (80036e4 <HAL_DMA_Abort_IT+0x3d0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d018      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a5c      	ldr	r2, [pc, #368]	; (80036e8 <HAL_DMA_Abort_IT+0x3d4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d013      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a5a      	ldr	r2, [pc, #360]	; (80036ec <HAL_DMA_Abort_IT+0x3d8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00e      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a59      	ldr	r2, [pc, #356]	; (80036f0 <HAL_DMA_Abort_IT+0x3dc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d009      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a57      	ldr	r2, [pc, #348]	; (80036f4 <HAL_DMA_Abort_IT+0x3e0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x290>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a56      	ldr	r2, [pc, #344]	; (80036f8 <HAL_DMA_Abort_IT+0x3e4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d108      	bne.n	80035b6 <HAL_DMA_Abort_IT+0x2a2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e007      	b.n	80035c6 <HAL_DMA_Abort_IT+0x2b2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0201 	bic.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a3c      	ldr	r2, [pc, #240]	; (80036bc <HAL_DMA_Abort_IT+0x3a8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d072      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a3a      	ldr	r2, [pc, #232]	; (80036c0 <HAL_DMA_Abort_IT+0x3ac>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d06d      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a39      	ldr	r2, [pc, #228]	; (80036c4 <HAL_DMA_Abort_IT+0x3b0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d068      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a37      	ldr	r2, [pc, #220]	; (80036c8 <HAL_DMA_Abort_IT+0x3b4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d063      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a36      	ldr	r2, [pc, #216]	; (80036cc <HAL_DMA_Abort_IT+0x3b8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d05e      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a34      	ldr	r2, [pc, #208]	; (80036d0 <HAL_DMA_Abort_IT+0x3bc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d059      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a33      	ldr	r2, [pc, #204]	; (80036d4 <HAL_DMA_Abort_IT+0x3c0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d054      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a31      	ldr	r2, [pc, #196]	; (80036d8 <HAL_DMA_Abort_IT+0x3c4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d04f      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a30      	ldr	r2, [pc, #192]	; (80036dc <HAL_DMA_Abort_IT+0x3c8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d04a      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2e      	ldr	r2, [pc, #184]	; (80036e0 <HAL_DMA_Abort_IT+0x3cc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d045      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2d      	ldr	r2, [pc, #180]	; (80036e4 <HAL_DMA_Abort_IT+0x3d0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d040      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a2b      	ldr	r2, [pc, #172]	; (80036e8 <HAL_DMA_Abort_IT+0x3d4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d03b      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a2a      	ldr	r2, [pc, #168]	; (80036ec <HAL_DMA_Abort_IT+0x3d8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d036      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a28      	ldr	r2, [pc, #160]	; (80036f0 <HAL_DMA_Abort_IT+0x3dc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d031      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a27      	ldr	r2, [pc, #156]	; (80036f4 <HAL_DMA_Abort_IT+0x3e0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d02c      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <HAL_DMA_Abort_IT+0x3e4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d027      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a24      	ldr	r2, [pc, #144]	; (80036fc <HAL_DMA_Abort_IT+0x3e8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d022      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a22      	ldr	r2, [pc, #136]	; (8003700 <HAL_DMA_Abort_IT+0x3ec>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d01d      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a21      	ldr	r2, [pc, #132]	; (8003704 <HAL_DMA_Abort_IT+0x3f0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d018      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1f      	ldr	r2, [pc, #124]	; (8003708 <HAL_DMA_Abort_IT+0x3f4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d013      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1e      	ldr	r2, [pc, #120]	; (800370c <HAL_DMA_Abort_IT+0x3f8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00e      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <HAL_DMA_Abort_IT+0x3fc>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d009      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <HAL_DMA_Abort_IT+0x400>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x3a2>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <HAL_DMA_Abort_IT+0x404>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d132      	bne.n	800371c <HAL_DMA_Abort_IT+0x408>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e031      	b.n	800371e <HAL_DMA_Abort_IT+0x40a>
 80036ba:	bf00      	nop
 80036bc:	40020010 	.word	0x40020010
 80036c0:	40020028 	.word	0x40020028
 80036c4:	40020040 	.word	0x40020040
 80036c8:	40020058 	.word	0x40020058
 80036cc:	40020070 	.word	0x40020070
 80036d0:	40020088 	.word	0x40020088
 80036d4:	400200a0 	.word	0x400200a0
 80036d8:	400200b8 	.word	0x400200b8
 80036dc:	40020410 	.word	0x40020410
 80036e0:	40020428 	.word	0x40020428
 80036e4:	40020440 	.word	0x40020440
 80036e8:	40020458 	.word	0x40020458
 80036ec:	40020470 	.word	0x40020470
 80036f0:	40020488 	.word	0x40020488
 80036f4:	400204a0 	.word	0x400204a0
 80036f8:	400204b8 	.word	0x400204b8
 80036fc:	58025408 	.word	0x58025408
 8003700:	5802541c 	.word	0x5802541c
 8003704:	58025430 	.word	0x58025430
 8003708:	58025444 	.word	0x58025444
 800370c:	58025458 	.word	0x58025458
 8003710:	5802546c 	.word	0x5802546c
 8003714:	58025480 	.word	0x58025480
 8003718:	58025494 	.word	0x58025494
 800371c:	2300      	movs	r3, #0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d028      	beq.n	8003774 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003730:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2201      	movs	r2, #1
 8003742:	409a      	lsls	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003750:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00c      	beq.n	8003774 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003768:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003772:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop

080037a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08a      	sub	sp, #40	; 0x28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037ac:	4b67      	ldr	r3, [pc, #412]	; (800394c <HAL_DMA_IRQHandler+0x1ac>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a67      	ldr	r2, [pc, #412]	; (8003950 <HAL_DMA_IRQHandler+0x1b0>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	0a9b      	lsrs	r3, r3, #10
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a5f      	ldr	r2, [pc, #380]	; (8003954 <HAL_DMA_IRQHandler+0x1b4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d04a      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a5d      	ldr	r2, [pc, #372]	; (8003958 <HAL_DMA_IRQHandler+0x1b8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d045      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a5c      	ldr	r2, [pc, #368]	; (800395c <HAL_DMA_IRQHandler+0x1bc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d040      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a5a      	ldr	r2, [pc, #360]	; (8003960 <HAL_DMA_IRQHandler+0x1c0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d03b      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a59      	ldr	r2, [pc, #356]	; (8003964 <HAL_DMA_IRQHandler+0x1c4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d036      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a57      	ldr	r2, [pc, #348]	; (8003968 <HAL_DMA_IRQHandler+0x1c8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d031      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a56      	ldr	r2, [pc, #344]	; (800396c <HAL_DMA_IRQHandler+0x1cc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d02c      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a54      	ldr	r2, [pc, #336]	; (8003970 <HAL_DMA_IRQHandler+0x1d0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d027      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a53      	ldr	r2, [pc, #332]	; (8003974 <HAL_DMA_IRQHandler+0x1d4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d022      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a51      	ldr	r2, [pc, #324]	; (8003978 <HAL_DMA_IRQHandler+0x1d8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01d      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a50      	ldr	r2, [pc, #320]	; (800397c <HAL_DMA_IRQHandler+0x1dc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d018      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a4e      	ldr	r2, [pc, #312]	; (8003980 <HAL_DMA_IRQHandler+0x1e0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a4d      	ldr	r2, [pc, #308]	; (8003984 <HAL_DMA_IRQHandler+0x1e4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00e      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a4b      	ldr	r2, [pc, #300]	; (8003988 <HAL_DMA_IRQHandler+0x1e8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a4a      	ldr	r2, [pc, #296]	; (800398c <HAL_DMA_IRQHandler+0x1ec>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_DMA_IRQHandler+0xd2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a48      	ldr	r2, [pc, #288]	; (8003990 <HAL_DMA_IRQHandler+0x1f0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_DMA_IRQHandler+0xd6>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_DMA_IRQHandler+0xd8>
 8003876:	2300      	movs	r3, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 842b 	beq.w	80040d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	2208      	movs	r2, #8
 8003888:	409a      	lsls	r2, r3
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80a2 	beq.w	80039d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2e      	ldr	r2, [pc, #184]	; (8003954 <HAL_DMA_IRQHandler+0x1b4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d04a      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2d      	ldr	r2, [pc, #180]	; (8003958 <HAL_DMA_IRQHandler+0x1b8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d045      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2b      	ldr	r2, [pc, #172]	; (800395c <HAL_DMA_IRQHandler+0x1bc>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d040      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2a      	ldr	r2, [pc, #168]	; (8003960 <HAL_DMA_IRQHandler+0x1c0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d03b      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a28      	ldr	r2, [pc, #160]	; (8003964 <HAL_DMA_IRQHandler+0x1c4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d036      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a27      	ldr	r2, [pc, #156]	; (8003968 <HAL_DMA_IRQHandler+0x1c8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d031      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a25      	ldr	r2, [pc, #148]	; (800396c <HAL_DMA_IRQHandler+0x1cc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d02c      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a24      	ldr	r2, [pc, #144]	; (8003970 <HAL_DMA_IRQHandler+0x1d0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d027      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a22      	ldr	r2, [pc, #136]	; (8003974 <HAL_DMA_IRQHandler+0x1d4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d022      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a21      	ldr	r2, [pc, #132]	; (8003978 <HAL_DMA_IRQHandler+0x1d8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d01d      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1f      	ldr	r2, [pc, #124]	; (800397c <HAL_DMA_IRQHandler+0x1dc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d018      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <HAL_DMA_IRQHandler+0x1e0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <HAL_DMA_IRQHandler+0x1e4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00e      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1b      	ldr	r2, [pc, #108]	; (8003988 <HAL_DMA_IRQHandler+0x1e8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d009      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <HAL_DMA_IRQHandler+0x1ec>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_DMA_IRQHandler+0x194>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a18      	ldr	r2, [pc, #96]	; (8003990 <HAL_DMA_IRQHandler+0x1f0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d12f      	bne.n	8003994 <HAL_DMA_IRQHandler+0x1f4>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	bf14      	ite	ne
 8003942:	2301      	movne	r3, #1
 8003944:	2300      	moveq	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	e02e      	b.n	80039a8 <HAL_DMA_IRQHandler+0x208>
 800394a:	bf00      	nop
 800394c:	20000000 	.word	0x20000000
 8003950:	1b4e81b5 	.word	0x1b4e81b5
 8003954:	40020010 	.word	0x40020010
 8003958:	40020028 	.word	0x40020028
 800395c:	40020040 	.word	0x40020040
 8003960:	40020058 	.word	0x40020058
 8003964:	40020070 	.word	0x40020070
 8003968:	40020088 	.word	0x40020088
 800396c:	400200a0 	.word	0x400200a0
 8003970:	400200b8 	.word	0x400200b8
 8003974:	40020410 	.word	0x40020410
 8003978:	40020428 	.word	0x40020428
 800397c:	40020440 	.word	0x40020440
 8003980:	40020458 	.word	0x40020458
 8003984:	40020470 	.word	0x40020470
 8003988:	40020488 	.word	0x40020488
 800398c:	400204a0 	.word	0x400204a0
 8003990:	400204b8 	.word	0x400204b8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d015      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0204 	bic.w	r2, r2, #4
 80039ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2208      	movs	r2, #8
 80039c6:	409a      	lsls	r2, r3
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	f043 0201 	orr.w	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	fa22 f303 	lsr.w	r3, r2, r3
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d06e      	beq.n	8003acc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a69      	ldr	r2, [pc, #420]	; (8003b98 <HAL_DMA_IRQHandler+0x3f8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d04a      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a67      	ldr	r2, [pc, #412]	; (8003b9c <HAL_DMA_IRQHandler+0x3fc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d045      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a66      	ldr	r2, [pc, #408]	; (8003ba0 <HAL_DMA_IRQHandler+0x400>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d040      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a64      	ldr	r2, [pc, #400]	; (8003ba4 <HAL_DMA_IRQHandler+0x404>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d03b      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a63      	ldr	r2, [pc, #396]	; (8003ba8 <HAL_DMA_IRQHandler+0x408>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d036      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a61      	ldr	r2, [pc, #388]	; (8003bac <HAL_DMA_IRQHandler+0x40c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d031      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a60      	ldr	r2, [pc, #384]	; (8003bb0 <HAL_DMA_IRQHandler+0x410>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d02c      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a5e      	ldr	r2, [pc, #376]	; (8003bb4 <HAL_DMA_IRQHandler+0x414>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d027      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a5d      	ldr	r2, [pc, #372]	; (8003bb8 <HAL_DMA_IRQHandler+0x418>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d022      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a5b      	ldr	r2, [pc, #364]	; (8003bbc <HAL_DMA_IRQHandler+0x41c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01d      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a5a      	ldr	r2, [pc, #360]	; (8003bc0 <HAL_DMA_IRQHandler+0x420>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d018      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_DMA_IRQHandler+0x424>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a57      	ldr	r2, [pc, #348]	; (8003bc8 <HAL_DMA_IRQHandler+0x428>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00e      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a55      	ldr	r2, [pc, #340]	; (8003bcc <HAL_DMA_IRQHandler+0x42c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a54      	ldr	r2, [pc, #336]	; (8003bd0 <HAL_DMA_IRQHandler+0x430>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x2ee>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a52      	ldr	r2, [pc, #328]	; (8003bd4 <HAL_DMA_IRQHandler+0x434>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10a      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x304>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	e003      	b.n	8003aac <HAL_DMA_IRQHandler+0x30c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00d      	beq.n	8003acc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2201      	movs	r2, #1
 8003aba:	409a      	lsls	r2, r3
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac4:	f043 0202 	orr.w	r2, r3, #2
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 808f 	beq.w	8003c00 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a2c      	ldr	r2, [pc, #176]	; (8003b98 <HAL_DMA_IRQHandler+0x3f8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d04a      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2a      	ldr	r2, [pc, #168]	; (8003b9c <HAL_DMA_IRQHandler+0x3fc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d045      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a29      	ldr	r2, [pc, #164]	; (8003ba0 <HAL_DMA_IRQHandler+0x400>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d040      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a27      	ldr	r2, [pc, #156]	; (8003ba4 <HAL_DMA_IRQHandler+0x404>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d03b      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a26      	ldr	r2, [pc, #152]	; (8003ba8 <HAL_DMA_IRQHandler+0x408>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d036      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a24      	ldr	r2, [pc, #144]	; (8003bac <HAL_DMA_IRQHandler+0x40c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d031      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <HAL_DMA_IRQHandler+0x410>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d02c      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <HAL_DMA_IRQHandler+0x414>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d027      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a20      	ldr	r2, [pc, #128]	; (8003bb8 <HAL_DMA_IRQHandler+0x418>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d022      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <HAL_DMA_IRQHandler+0x41c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01d      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <HAL_DMA_IRQHandler+0x420>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d018      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1b      	ldr	r2, [pc, #108]	; (8003bc4 <HAL_DMA_IRQHandler+0x424>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1a      	ldr	r2, [pc, #104]	; (8003bc8 <HAL_DMA_IRQHandler+0x428>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00e      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <HAL_DMA_IRQHandler+0x42c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d009      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a17      	ldr	r2, [pc, #92]	; (8003bd0 <HAL_DMA_IRQHandler+0x430>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d004      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x3e2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <HAL_DMA_IRQHandler+0x434>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d12a      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x438>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e023      	b.n	8003be0 <HAL_DMA_IRQHandler+0x440>
 8003b98:	40020010 	.word	0x40020010
 8003b9c:	40020028 	.word	0x40020028
 8003ba0:	40020040 	.word	0x40020040
 8003ba4:	40020058 	.word	0x40020058
 8003ba8:	40020070 	.word	0x40020070
 8003bac:	40020088 	.word	0x40020088
 8003bb0:	400200a0 	.word	0x400200a0
 8003bb4:	400200b8 	.word	0x400200b8
 8003bb8:	40020410 	.word	0x40020410
 8003bbc:	40020428 	.word	0x40020428
 8003bc0:	40020440 	.word	0x40020440
 8003bc4:	40020458 	.word	0x40020458
 8003bc8:	40020470 	.word	0x40020470
 8003bcc:	40020488 	.word	0x40020488
 8003bd0:	400204a0 	.word	0x400204a0
 8003bd4:	400204b8 	.word	0x400204b8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2300      	movs	r3, #0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00d      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	2204      	movs	r2, #4
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	f043 0204 	orr.w	r2, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2210      	movs	r2, #16
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80a6 	beq.w	8003d62 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a85      	ldr	r2, [pc, #532]	; (8003e30 <HAL_DMA_IRQHandler+0x690>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d04a      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a83      	ldr	r2, [pc, #524]	; (8003e34 <HAL_DMA_IRQHandler+0x694>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d045      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a82      	ldr	r2, [pc, #520]	; (8003e38 <HAL_DMA_IRQHandler+0x698>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d040      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a80      	ldr	r2, [pc, #512]	; (8003e3c <HAL_DMA_IRQHandler+0x69c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d03b      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7f      	ldr	r2, [pc, #508]	; (8003e40 <HAL_DMA_IRQHandler+0x6a0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d036      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a7d      	ldr	r2, [pc, #500]	; (8003e44 <HAL_DMA_IRQHandler+0x6a4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d031      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a7c      	ldr	r2, [pc, #496]	; (8003e48 <HAL_DMA_IRQHandler+0x6a8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d02c      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a7a      	ldr	r2, [pc, #488]	; (8003e4c <HAL_DMA_IRQHandler+0x6ac>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d027      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a79      	ldr	r2, [pc, #484]	; (8003e50 <HAL_DMA_IRQHandler+0x6b0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d022      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a77      	ldr	r2, [pc, #476]	; (8003e54 <HAL_DMA_IRQHandler+0x6b4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01d      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a76      	ldr	r2, [pc, #472]	; (8003e58 <HAL_DMA_IRQHandler+0x6b8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d018      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a74      	ldr	r2, [pc, #464]	; (8003e5c <HAL_DMA_IRQHandler+0x6bc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d013      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a73      	ldr	r2, [pc, #460]	; (8003e60 <HAL_DMA_IRQHandler+0x6c0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00e      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a71      	ldr	r2, [pc, #452]	; (8003e64 <HAL_DMA_IRQHandler+0x6c4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d009      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a70      	ldr	r2, [pc, #448]	; (8003e68 <HAL_DMA_IRQHandler+0x6c8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d004      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x516>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a6e      	ldr	r2, [pc, #440]	; (8003e6c <HAL_DMA_IRQHandler+0x6cc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d10a      	bne.n	8003ccc <HAL_DMA_IRQHandler+0x52c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf14      	ite	ne
 8003cc4:	2301      	movne	r3, #1
 8003cc6:	2300      	moveq	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e009      	b.n	8003ce0 <HAL_DMA_IRQHandler+0x540>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bf14      	ite	ne
 8003cda:	2301      	movne	r3, #1
 8003cdc:	2300      	moveq	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d03e      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2210      	movs	r2, #16
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d018      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d108      	bne.n	8003d22 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d024      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
 8003d20:	e01f      	b.n	8003d62 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01b      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	4798      	blx	r3
 8003d32:	e016      	b.n	8003d62 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d107      	bne.n	8003d52 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0208 	bic.w	r2, r2, #8
 8003d50:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8110 	beq.w	8003f98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a2c      	ldr	r2, [pc, #176]	; (8003e30 <HAL_DMA_IRQHandler+0x690>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d04a      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <HAL_DMA_IRQHandler+0x694>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d045      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a29      	ldr	r2, [pc, #164]	; (8003e38 <HAL_DMA_IRQHandler+0x698>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d040      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a28      	ldr	r2, [pc, #160]	; (8003e3c <HAL_DMA_IRQHandler+0x69c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d03b      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <HAL_DMA_IRQHandler+0x6a0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d036      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a25      	ldr	r2, [pc, #148]	; (8003e44 <HAL_DMA_IRQHandler+0x6a4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d031      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a23      	ldr	r2, [pc, #140]	; (8003e48 <HAL_DMA_IRQHandler+0x6a8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d02c      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <HAL_DMA_IRQHandler+0x6ac>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d027      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a20      	ldr	r2, [pc, #128]	; (8003e50 <HAL_DMA_IRQHandler+0x6b0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d022      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <HAL_DMA_IRQHandler+0x6b4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d01d      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <HAL_DMA_IRQHandler+0x6b8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d018      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <HAL_DMA_IRQHandler+0x6bc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d013      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <HAL_DMA_IRQHandler+0x6c0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00e      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <HAL_DMA_IRQHandler+0x6c4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d009      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <HAL_DMA_IRQHandler+0x6c8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d004      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x678>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a16      	ldr	r2, [pc, #88]	; (8003e6c <HAL_DMA_IRQHandler+0x6cc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d12b      	bne.n	8003e70 <HAL_DMA_IRQHandler+0x6d0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	bf14      	ite	ne
 8003e26:	2301      	movne	r3, #1
 8003e28:	2300      	moveq	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	e02a      	b.n	8003e84 <HAL_DMA_IRQHandler+0x6e4>
 8003e2e:	bf00      	nop
 8003e30:	40020010 	.word	0x40020010
 8003e34:	40020028 	.word	0x40020028
 8003e38:	40020040 	.word	0x40020040
 8003e3c:	40020058 	.word	0x40020058
 8003e40:	40020070 	.word	0x40020070
 8003e44:	40020088 	.word	0x40020088
 8003e48:	400200a0 	.word	0x400200a0
 8003e4c:	400200b8 	.word	0x400200b8
 8003e50:	40020410 	.word	0x40020410
 8003e54:	40020428 	.word	0x40020428
 8003e58:	40020440 	.word	0x40020440
 8003e5c:	40020458 	.word	0x40020458
 8003e60:	40020470 	.word	0x40020470
 8003e64:	40020488 	.word	0x40020488
 8003e68:	400204a0 	.word	0x400204a0
 8003e6c:	400204b8 	.word	0x400204b8
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bf14      	ite	ne
 8003e7e:	2301      	movne	r3, #1
 8003e80:	2300      	moveq	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8087 	beq.w	8003f98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	2220      	movs	r2, #32
 8003e94:	409a      	lsls	r2, r3
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d139      	bne.n	8003f1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0216 	bic.w	r2, r2, #22
 8003eb4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <HAL_DMA_IRQHandler+0x736>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0208 	bic.w	r2, r2, #8
 8003ee4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	f003 031f 	and.w	r3, r3, #31
 8003eee:	223f      	movs	r2, #63	; 0x3f
 8003ef0:	409a      	lsls	r2, r3
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 834a 	beq.w	80045a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4798      	blx	r3
          }
          return;
 8003f18:	e344      	b.n	80045a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d018      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d108      	bne.n	8003f48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d02c      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
 8003f46:	e027      	b.n	8003f98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d023      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
 8003f58:	e01e      	b.n	8003f98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10f      	bne.n	8003f88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0210 	bic.w	r2, r2, #16
 8003f76:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8306 	beq.w	80045ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8088 	beq.w	80040c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a7a      	ldr	r2, [pc, #488]	; (80041a8 <HAL_DMA_IRQHandler+0xa08>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d04a      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a79      	ldr	r2, [pc, #484]	; (80041ac <HAL_DMA_IRQHandler+0xa0c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d045      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a77      	ldr	r2, [pc, #476]	; (80041b0 <HAL_DMA_IRQHandler+0xa10>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d040      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a76      	ldr	r2, [pc, #472]	; (80041b4 <HAL_DMA_IRQHandler+0xa14>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d03b      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a74      	ldr	r2, [pc, #464]	; (80041b8 <HAL_DMA_IRQHandler+0xa18>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d036      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a73      	ldr	r2, [pc, #460]	; (80041bc <HAL_DMA_IRQHandler+0xa1c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d031      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a71      	ldr	r2, [pc, #452]	; (80041c0 <HAL_DMA_IRQHandler+0xa20>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d02c      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a70      	ldr	r2, [pc, #448]	; (80041c4 <HAL_DMA_IRQHandler+0xa24>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d027      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a6e      	ldr	r2, [pc, #440]	; (80041c8 <HAL_DMA_IRQHandler+0xa28>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d022      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a6d      	ldr	r2, [pc, #436]	; (80041cc <HAL_DMA_IRQHandler+0xa2c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d01d      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a6b      	ldr	r2, [pc, #428]	; (80041d0 <HAL_DMA_IRQHandler+0xa30>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d018      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a6a      	ldr	r2, [pc, #424]	; (80041d4 <HAL_DMA_IRQHandler+0xa34>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a68      	ldr	r2, [pc, #416]	; (80041d8 <HAL_DMA_IRQHandler+0xa38>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00e      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a67      	ldr	r2, [pc, #412]	; (80041dc <HAL_DMA_IRQHandler+0xa3c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d009      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a65      	ldr	r2, [pc, #404]	; (80041e0 <HAL_DMA_IRQHandler+0xa40>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d004      	beq.n	8004058 <HAL_DMA_IRQHandler+0x8b8>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a64      	ldr	r2, [pc, #400]	; (80041e4 <HAL_DMA_IRQHandler+0xa44>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d108      	bne.n	800406a <HAL_DMA_IRQHandler+0x8ca>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	e007      	b.n	800407a <HAL_DMA_IRQHandler+0x8da>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0201 	bic.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3301      	adds	r3, #1
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004082:	429a      	cmp	r2, r3
 8004084:	d307      	bcc.n	8004096 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f2      	bne.n	800407a <HAL_DMA_IRQHandler+0x8da>
 8004094:	e000      	b.n	8004098 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004096:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d004      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2203      	movs	r2, #3
 80040aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80040ae:	e003      	b.n	80040b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8272 	beq.w	80045ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
 80040d2:	e26c      	b.n	80045ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a43      	ldr	r2, [pc, #268]	; (80041e8 <HAL_DMA_IRQHandler+0xa48>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d022      	beq.n	8004124 <HAL_DMA_IRQHandler+0x984>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a42      	ldr	r2, [pc, #264]	; (80041ec <HAL_DMA_IRQHandler+0xa4c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d01d      	beq.n	8004124 <HAL_DMA_IRQHandler+0x984>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a40      	ldr	r2, [pc, #256]	; (80041f0 <HAL_DMA_IRQHandler+0xa50>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d018      	beq.n	8004124 <HAL_DMA_IRQHandler+0x984>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a3f      	ldr	r2, [pc, #252]	; (80041f4 <HAL_DMA_IRQHandler+0xa54>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <HAL_DMA_IRQHandler+0x984>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a3d      	ldr	r2, [pc, #244]	; (80041f8 <HAL_DMA_IRQHandler+0xa58>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <HAL_DMA_IRQHandler+0x984>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a3c      	ldr	r2, [pc, #240]	; (80041fc <HAL_DMA_IRQHandler+0xa5c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d009      	beq.n	8004124 <HAL_DMA_IRQHandler+0x984>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a3a      	ldr	r2, [pc, #232]	; (8004200 <HAL_DMA_IRQHandler+0xa60>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_DMA_IRQHandler+0x984>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a39      	ldr	r2, [pc, #228]	; (8004204 <HAL_DMA_IRQHandler+0xa64>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d101      	bne.n	8004128 <HAL_DMA_IRQHandler+0x988>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_DMA_IRQHandler+0x98a>
 8004128:	2300      	movs	r3, #0
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 823f 	beq.w	80045ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2204      	movs	r2, #4
 8004142:	409a      	lsls	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80cd 	beq.w	80042e8 <HAL_DMA_IRQHandler+0xb48>
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80c7 	beq.w	80042e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415e:	f003 031f 	and.w	r3, r3, #31
 8004162:	2204      	movs	r2, #4
 8004164:	409a      	lsls	r2, r3
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d049      	beq.n	8004208 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8210 	beq.w	80045a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004190:	e20a      	b.n	80045a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8206 	beq.w	80045a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041a4:	e200      	b.n	80045a8 <HAL_DMA_IRQHandler+0xe08>
 80041a6:	bf00      	nop
 80041a8:	40020010 	.word	0x40020010
 80041ac:	40020028 	.word	0x40020028
 80041b0:	40020040 	.word	0x40020040
 80041b4:	40020058 	.word	0x40020058
 80041b8:	40020070 	.word	0x40020070
 80041bc:	40020088 	.word	0x40020088
 80041c0:	400200a0 	.word	0x400200a0
 80041c4:	400200b8 	.word	0x400200b8
 80041c8:	40020410 	.word	0x40020410
 80041cc:	40020428 	.word	0x40020428
 80041d0:	40020440 	.word	0x40020440
 80041d4:	40020458 	.word	0x40020458
 80041d8:	40020470 	.word	0x40020470
 80041dc:	40020488 	.word	0x40020488
 80041e0:	400204a0 	.word	0x400204a0
 80041e4:	400204b8 	.word	0x400204b8
 80041e8:	58025408 	.word	0x58025408
 80041ec:	5802541c 	.word	0x5802541c
 80041f0:	58025430 	.word	0x58025430
 80041f4:	58025444 	.word	0x58025444
 80041f8:	58025458 	.word	0x58025458
 80041fc:	5802546c 	.word	0x5802546c
 8004200:	58025480 	.word	0x58025480
 8004204:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	d160      	bne.n	80042d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7f      	ldr	r2, [pc, #508]	; (8004414 <HAL_DMA_IRQHandler+0xc74>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d04a      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a7d      	ldr	r2, [pc, #500]	; (8004418 <HAL_DMA_IRQHandler+0xc78>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d045      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a7c      	ldr	r2, [pc, #496]	; (800441c <HAL_DMA_IRQHandler+0xc7c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d040      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a7a      	ldr	r2, [pc, #488]	; (8004420 <HAL_DMA_IRQHandler+0xc80>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d03b      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a79      	ldr	r2, [pc, #484]	; (8004424 <HAL_DMA_IRQHandler+0xc84>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d036      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a77      	ldr	r2, [pc, #476]	; (8004428 <HAL_DMA_IRQHandler+0xc88>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d031      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a76      	ldr	r2, [pc, #472]	; (800442c <HAL_DMA_IRQHandler+0xc8c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d02c      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a74      	ldr	r2, [pc, #464]	; (8004430 <HAL_DMA_IRQHandler+0xc90>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d027      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a73      	ldr	r2, [pc, #460]	; (8004434 <HAL_DMA_IRQHandler+0xc94>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d022      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a71      	ldr	r2, [pc, #452]	; (8004438 <HAL_DMA_IRQHandler+0xc98>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01d      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a70      	ldr	r2, [pc, #448]	; (800443c <HAL_DMA_IRQHandler+0xc9c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d018      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a6e      	ldr	r2, [pc, #440]	; (8004440 <HAL_DMA_IRQHandler+0xca0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a6d      	ldr	r2, [pc, #436]	; (8004444 <HAL_DMA_IRQHandler+0xca4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00e      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a6b      	ldr	r2, [pc, #428]	; (8004448 <HAL_DMA_IRQHandler+0xca8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d009      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a6a      	ldr	r2, [pc, #424]	; (800444c <HAL_DMA_IRQHandler+0xcac>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d004      	beq.n	80042b2 <HAL_DMA_IRQHandler+0xb12>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a68      	ldr	r2, [pc, #416]	; (8004450 <HAL_DMA_IRQHandler+0xcb0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d108      	bne.n	80042c4 <HAL_DMA_IRQHandler+0xb24>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0208 	bic.w	r2, r2, #8
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e007      	b.n	80042d4 <HAL_DMA_IRQHandler+0xb34>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0204 	bic.w	r2, r2, #4
 80042d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8165 	beq.w	80045a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042e6:	e15f      	b.n	80045a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	2202      	movs	r2, #2
 80042f2:	409a      	lsls	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80c5 	beq.w	8004488 <HAL_DMA_IRQHandler+0xce8>
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80bf 	beq.w	8004488 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2202      	movs	r2, #2
 8004314:	409a      	lsls	r2, r3
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d018      	beq.n	8004356 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 813a 	beq.w	80045ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004340:	e134      	b.n	80045ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8130 	beq.w	80045ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004354:	e12a      	b.n	80045ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	f040 8089 	bne.w	8004474 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a2b      	ldr	r2, [pc, #172]	; (8004414 <HAL_DMA_IRQHandler+0xc74>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d04a      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a29      	ldr	r2, [pc, #164]	; (8004418 <HAL_DMA_IRQHandler+0xc78>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d045      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a28      	ldr	r2, [pc, #160]	; (800441c <HAL_DMA_IRQHandler+0xc7c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d040      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a26      	ldr	r2, [pc, #152]	; (8004420 <HAL_DMA_IRQHandler+0xc80>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d03b      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a25      	ldr	r2, [pc, #148]	; (8004424 <HAL_DMA_IRQHandler+0xc84>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d036      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a23      	ldr	r2, [pc, #140]	; (8004428 <HAL_DMA_IRQHandler+0xc88>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d031      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a22      	ldr	r2, [pc, #136]	; (800442c <HAL_DMA_IRQHandler+0xc8c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d02c      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a20      	ldr	r2, [pc, #128]	; (8004430 <HAL_DMA_IRQHandler+0xc90>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d027      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1f      	ldr	r2, [pc, #124]	; (8004434 <HAL_DMA_IRQHandler+0xc94>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d022      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1d      	ldr	r2, [pc, #116]	; (8004438 <HAL_DMA_IRQHandler+0xc98>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01d      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1c      	ldr	r2, [pc, #112]	; (800443c <HAL_DMA_IRQHandler+0xc9c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d018      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1a      	ldr	r2, [pc, #104]	; (8004440 <HAL_DMA_IRQHandler+0xca0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a19      	ldr	r2, [pc, #100]	; (8004444 <HAL_DMA_IRQHandler+0xca4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00e      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a17      	ldr	r2, [pc, #92]	; (8004448 <HAL_DMA_IRQHandler+0xca8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d009      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a16      	ldr	r2, [pc, #88]	; (800444c <HAL_DMA_IRQHandler+0xcac>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d004      	beq.n	8004402 <HAL_DMA_IRQHandler+0xc62>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a14      	ldr	r2, [pc, #80]	; (8004450 <HAL_DMA_IRQHandler+0xcb0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d128      	bne.n	8004454 <HAL_DMA_IRQHandler+0xcb4>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0214 	bic.w	r2, r2, #20
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e027      	b.n	8004464 <HAL_DMA_IRQHandler+0xcc4>
 8004414:	40020010 	.word	0x40020010
 8004418:	40020028 	.word	0x40020028
 800441c:	40020040 	.word	0x40020040
 8004420:	40020058 	.word	0x40020058
 8004424:	40020070 	.word	0x40020070
 8004428:	40020088 	.word	0x40020088
 800442c:	400200a0 	.word	0x400200a0
 8004430:	400200b8 	.word	0x400200b8
 8004434:	40020410 	.word	0x40020410
 8004438:	40020428 	.word	0x40020428
 800443c:	40020440 	.word	0x40020440
 8004440:	40020458 	.word	0x40020458
 8004444:	40020470 	.word	0x40020470
 8004448:	40020488 	.word	0x40020488
 800444c:	400204a0 	.word	0x400204a0
 8004450:	400204b8 	.word	0x400204b8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 020a 	bic.w	r2, r2, #10
 8004462:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8097 	beq.w	80045ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004486:	e091      	b.n	80045ac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	2208      	movs	r2, #8
 8004492:	409a      	lsls	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 8088 	beq.w	80045ae <HAL_DMA_IRQHandler+0xe0e>
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 8082 	beq.w	80045ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a41      	ldr	r2, [pc, #260]	; (80045b4 <HAL_DMA_IRQHandler+0xe14>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d04a      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a3f      	ldr	r2, [pc, #252]	; (80045b8 <HAL_DMA_IRQHandler+0xe18>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d045      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a3e      	ldr	r2, [pc, #248]	; (80045bc <HAL_DMA_IRQHandler+0xe1c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d040      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a3c      	ldr	r2, [pc, #240]	; (80045c0 <HAL_DMA_IRQHandler+0xe20>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d03b      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a3b      	ldr	r2, [pc, #236]	; (80045c4 <HAL_DMA_IRQHandler+0xe24>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d036      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a39      	ldr	r2, [pc, #228]	; (80045c8 <HAL_DMA_IRQHandler+0xe28>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d031      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a38      	ldr	r2, [pc, #224]	; (80045cc <HAL_DMA_IRQHandler+0xe2c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d02c      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a36      	ldr	r2, [pc, #216]	; (80045d0 <HAL_DMA_IRQHandler+0xe30>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d027      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a35      	ldr	r2, [pc, #212]	; (80045d4 <HAL_DMA_IRQHandler+0xe34>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d022      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a33      	ldr	r2, [pc, #204]	; (80045d8 <HAL_DMA_IRQHandler+0xe38>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01d      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a32      	ldr	r2, [pc, #200]	; (80045dc <HAL_DMA_IRQHandler+0xe3c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d018      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a30      	ldr	r2, [pc, #192]	; (80045e0 <HAL_DMA_IRQHandler+0xe40>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2f      	ldr	r2, [pc, #188]	; (80045e4 <HAL_DMA_IRQHandler+0xe44>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a2d      	ldr	r2, [pc, #180]	; (80045e8 <HAL_DMA_IRQHandler+0xe48>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a2c      	ldr	r2, [pc, #176]	; (80045ec <HAL_DMA_IRQHandler+0xe4c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_DMA_IRQHandler+0xdaa>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a2a      	ldr	r2, [pc, #168]	; (80045f0 <HAL_DMA_IRQHandler+0xe50>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d108      	bne.n	800455c <HAL_DMA_IRQHandler+0xdbc>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 021c 	bic.w	r2, r2, #28
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e007      	b.n	800456c <HAL_DMA_IRQHandler+0xdcc>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 020e 	bic.w	r2, r2, #14
 800456a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	f003 031f 	and.w	r3, r3, #31
 8004574:	2201      	movs	r2, #1
 8004576:	409a      	lsls	r2, r3
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	4798      	blx	r3
 80045a2:	e004      	b.n	80045ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80045a4:	bf00      	nop
 80045a6:	e002      	b.n	80045ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045a8:	bf00      	nop
 80045aa:	e000      	b.n	80045ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80045ae:	3728      	adds	r7, #40	; 0x28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40020010 	.word	0x40020010
 80045b8:	40020028 	.word	0x40020028
 80045bc:	40020040 	.word	0x40020040
 80045c0:	40020058 	.word	0x40020058
 80045c4:	40020070 	.word	0x40020070
 80045c8:	40020088 	.word	0x40020088
 80045cc:	400200a0 	.word	0x400200a0
 80045d0:	400200b8 	.word	0x400200b8
 80045d4:	40020410 	.word	0x40020410
 80045d8:	40020428 	.word	0x40020428
 80045dc:	40020440 	.word	0x40020440
 80045e0:	40020458 	.word	0x40020458
 80045e4:	40020470 	.word	0x40020470
 80045e8:	40020488 	.word	0x40020488
 80045ec:	400204a0 	.word	0x400204a0
 80045f0:	400204b8 	.word	0x400204b8

080045f4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004624:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a7f      	ldr	r2, [pc, #508]	; (8004828 <DMA_SetConfig+0x21c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d072      	beq.n	8004716 <DMA_SetConfig+0x10a>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a7d      	ldr	r2, [pc, #500]	; (800482c <DMA_SetConfig+0x220>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d06d      	beq.n	8004716 <DMA_SetConfig+0x10a>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a7c      	ldr	r2, [pc, #496]	; (8004830 <DMA_SetConfig+0x224>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d068      	beq.n	8004716 <DMA_SetConfig+0x10a>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a7a      	ldr	r2, [pc, #488]	; (8004834 <DMA_SetConfig+0x228>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d063      	beq.n	8004716 <DMA_SetConfig+0x10a>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a79      	ldr	r2, [pc, #484]	; (8004838 <DMA_SetConfig+0x22c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d05e      	beq.n	8004716 <DMA_SetConfig+0x10a>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a77      	ldr	r2, [pc, #476]	; (800483c <DMA_SetConfig+0x230>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d059      	beq.n	8004716 <DMA_SetConfig+0x10a>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a76      	ldr	r2, [pc, #472]	; (8004840 <DMA_SetConfig+0x234>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d054      	beq.n	8004716 <DMA_SetConfig+0x10a>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a74      	ldr	r2, [pc, #464]	; (8004844 <DMA_SetConfig+0x238>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d04f      	beq.n	8004716 <DMA_SetConfig+0x10a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a73      	ldr	r2, [pc, #460]	; (8004848 <DMA_SetConfig+0x23c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d04a      	beq.n	8004716 <DMA_SetConfig+0x10a>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a71      	ldr	r2, [pc, #452]	; (800484c <DMA_SetConfig+0x240>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d045      	beq.n	8004716 <DMA_SetConfig+0x10a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a70      	ldr	r2, [pc, #448]	; (8004850 <DMA_SetConfig+0x244>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d040      	beq.n	8004716 <DMA_SetConfig+0x10a>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a6e      	ldr	r2, [pc, #440]	; (8004854 <DMA_SetConfig+0x248>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d03b      	beq.n	8004716 <DMA_SetConfig+0x10a>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a6d      	ldr	r2, [pc, #436]	; (8004858 <DMA_SetConfig+0x24c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d036      	beq.n	8004716 <DMA_SetConfig+0x10a>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a6b      	ldr	r2, [pc, #428]	; (800485c <DMA_SetConfig+0x250>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d031      	beq.n	8004716 <DMA_SetConfig+0x10a>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a6a      	ldr	r2, [pc, #424]	; (8004860 <DMA_SetConfig+0x254>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d02c      	beq.n	8004716 <DMA_SetConfig+0x10a>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a68      	ldr	r2, [pc, #416]	; (8004864 <DMA_SetConfig+0x258>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d027      	beq.n	8004716 <DMA_SetConfig+0x10a>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a67      	ldr	r2, [pc, #412]	; (8004868 <DMA_SetConfig+0x25c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d022      	beq.n	8004716 <DMA_SetConfig+0x10a>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a65      	ldr	r2, [pc, #404]	; (800486c <DMA_SetConfig+0x260>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01d      	beq.n	8004716 <DMA_SetConfig+0x10a>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a64      	ldr	r2, [pc, #400]	; (8004870 <DMA_SetConfig+0x264>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d018      	beq.n	8004716 <DMA_SetConfig+0x10a>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a62      	ldr	r2, [pc, #392]	; (8004874 <DMA_SetConfig+0x268>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <DMA_SetConfig+0x10a>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a61      	ldr	r2, [pc, #388]	; (8004878 <DMA_SetConfig+0x26c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <DMA_SetConfig+0x10a>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a5f      	ldr	r2, [pc, #380]	; (800487c <DMA_SetConfig+0x270>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d009      	beq.n	8004716 <DMA_SetConfig+0x10a>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a5e      	ldr	r2, [pc, #376]	; (8004880 <DMA_SetConfig+0x274>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <DMA_SetConfig+0x10a>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a5c      	ldr	r2, [pc, #368]	; (8004884 <DMA_SetConfig+0x278>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <DMA_SetConfig+0x10e>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <DMA_SetConfig+0x110>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00d      	beq.n	800473c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004728:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d004      	beq.n	800473c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800473a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a39      	ldr	r2, [pc, #228]	; (8004828 <DMA_SetConfig+0x21c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d04a      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a38      	ldr	r2, [pc, #224]	; (800482c <DMA_SetConfig+0x220>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d045      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a36      	ldr	r2, [pc, #216]	; (8004830 <DMA_SetConfig+0x224>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d040      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a35      	ldr	r2, [pc, #212]	; (8004834 <DMA_SetConfig+0x228>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d03b      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a33      	ldr	r2, [pc, #204]	; (8004838 <DMA_SetConfig+0x22c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d036      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a32      	ldr	r2, [pc, #200]	; (800483c <DMA_SetConfig+0x230>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d031      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a30      	ldr	r2, [pc, #192]	; (8004840 <DMA_SetConfig+0x234>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d02c      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a2f      	ldr	r2, [pc, #188]	; (8004844 <DMA_SetConfig+0x238>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d027      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a2d      	ldr	r2, [pc, #180]	; (8004848 <DMA_SetConfig+0x23c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d022      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a2c      	ldr	r2, [pc, #176]	; (800484c <DMA_SetConfig+0x240>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d01d      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a2a      	ldr	r2, [pc, #168]	; (8004850 <DMA_SetConfig+0x244>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d018      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a29      	ldr	r2, [pc, #164]	; (8004854 <DMA_SetConfig+0x248>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d013      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a27      	ldr	r2, [pc, #156]	; (8004858 <DMA_SetConfig+0x24c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00e      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a26      	ldr	r2, [pc, #152]	; (800485c <DMA_SetConfig+0x250>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d009      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a24      	ldr	r2, [pc, #144]	; (8004860 <DMA_SetConfig+0x254>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <DMA_SetConfig+0x1d0>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a23      	ldr	r2, [pc, #140]	; (8004864 <DMA_SetConfig+0x258>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d101      	bne.n	80047e0 <DMA_SetConfig+0x1d4>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <DMA_SetConfig+0x1d6>
 80047e0:	2300      	movs	r3, #0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d059      	beq.n	800489a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	223f      	movs	r2, #63	; 0x3f
 80047f0:	409a      	lsls	r2, r3
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004804:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b40      	cmp	r3, #64	; 0x40
 8004814:	d138      	bne.n	8004888 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004826:	e086      	b.n	8004936 <DMA_SetConfig+0x32a>
 8004828:	40020010 	.word	0x40020010
 800482c:	40020028 	.word	0x40020028
 8004830:	40020040 	.word	0x40020040
 8004834:	40020058 	.word	0x40020058
 8004838:	40020070 	.word	0x40020070
 800483c:	40020088 	.word	0x40020088
 8004840:	400200a0 	.word	0x400200a0
 8004844:	400200b8 	.word	0x400200b8
 8004848:	40020410 	.word	0x40020410
 800484c:	40020428 	.word	0x40020428
 8004850:	40020440 	.word	0x40020440
 8004854:	40020458 	.word	0x40020458
 8004858:	40020470 	.word	0x40020470
 800485c:	40020488 	.word	0x40020488
 8004860:	400204a0 	.word	0x400204a0
 8004864:	400204b8 	.word	0x400204b8
 8004868:	58025408 	.word	0x58025408
 800486c:	5802541c 	.word	0x5802541c
 8004870:	58025430 	.word	0x58025430
 8004874:	58025444 	.word	0x58025444
 8004878:	58025458 	.word	0x58025458
 800487c:	5802546c 	.word	0x5802546c
 8004880:	58025480 	.word	0x58025480
 8004884:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	60da      	str	r2, [r3, #12]
}
 8004898:	e04d      	b.n	8004936 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a29      	ldr	r2, [pc, #164]	; (8004944 <DMA_SetConfig+0x338>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d022      	beq.n	80048ea <DMA_SetConfig+0x2de>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a27      	ldr	r2, [pc, #156]	; (8004948 <DMA_SetConfig+0x33c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d01d      	beq.n	80048ea <DMA_SetConfig+0x2de>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a26      	ldr	r2, [pc, #152]	; (800494c <DMA_SetConfig+0x340>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d018      	beq.n	80048ea <DMA_SetConfig+0x2de>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a24      	ldr	r2, [pc, #144]	; (8004950 <DMA_SetConfig+0x344>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <DMA_SetConfig+0x2de>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a23      	ldr	r2, [pc, #140]	; (8004954 <DMA_SetConfig+0x348>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d00e      	beq.n	80048ea <DMA_SetConfig+0x2de>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a21      	ldr	r2, [pc, #132]	; (8004958 <DMA_SetConfig+0x34c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d009      	beq.n	80048ea <DMA_SetConfig+0x2de>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a20      	ldr	r2, [pc, #128]	; (800495c <DMA_SetConfig+0x350>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d004      	beq.n	80048ea <DMA_SetConfig+0x2de>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <DMA_SetConfig+0x354>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d101      	bne.n	80048ee <DMA_SetConfig+0x2e2>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <DMA_SetConfig+0x2e4>
 80048ee:	2300      	movs	r3, #0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d020      	beq.n	8004936 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f8:	f003 031f 	and.w	r3, r3, #31
 80048fc:	2201      	movs	r2, #1
 80048fe:	409a      	lsls	r2, r3
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d108      	bne.n	8004926 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	60da      	str	r2, [r3, #12]
}
 8004924:	e007      	b.n	8004936 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	60da      	str	r2, [r3, #12]
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	58025408 	.word	0x58025408
 8004948:	5802541c 	.word	0x5802541c
 800494c:	58025430 	.word	0x58025430
 8004950:	58025444 	.word	0x58025444
 8004954:	58025458 	.word	0x58025458
 8004958:	5802546c 	.word	0x5802546c
 800495c:	58025480 	.word	0x58025480
 8004960:	58025494 	.word	0x58025494

08004964 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a42      	ldr	r2, [pc, #264]	; (8004a7c <DMA_CalcBaseAndBitshift+0x118>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d04a      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a41      	ldr	r2, [pc, #260]	; (8004a80 <DMA_CalcBaseAndBitshift+0x11c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d045      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a3f      	ldr	r2, [pc, #252]	; (8004a84 <DMA_CalcBaseAndBitshift+0x120>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d040      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a3e      	ldr	r2, [pc, #248]	; (8004a88 <DMA_CalcBaseAndBitshift+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d03b      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a3c      	ldr	r2, [pc, #240]	; (8004a8c <DMA_CalcBaseAndBitshift+0x128>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d036      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a3b      	ldr	r2, [pc, #236]	; (8004a90 <DMA_CalcBaseAndBitshift+0x12c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d031      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a39      	ldr	r2, [pc, #228]	; (8004a94 <DMA_CalcBaseAndBitshift+0x130>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d02c      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a38      	ldr	r2, [pc, #224]	; (8004a98 <DMA_CalcBaseAndBitshift+0x134>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d027      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a36      	ldr	r2, [pc, #216]	; (8004a9c <DMA_CalcBaseAndBitshift+0x138>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d022      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a35      	ldr	r2, [pc, #212]	; (8004aa0 <DMA_CalcBaseAndBitshift+0x13c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d01d      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a33      	ldr	r2, [pc, #204]	; (8004aa4 <DMA_CalcBaseAndBitshift+0x140>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d018      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a32      	ldr	r2, [pc, #200]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x144>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d013      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a30      	ldr	r2, [pc, #192]	; (8004aac <DMA_CalcBaseAndBitshift+0x148>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00e      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a2f      	ldr	r2, [pc, #188]	; (8004ab0 <DMA_CalcBaseAndBitshift+0x14c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d009      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a2d      	ldr	r2, [pc, #180]	; (8004ab4 <DMA_CalcBaseAndBitshift+0x150>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xa8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2c      	ldr	r2, [pc, #176]	; (8004ab8 <DMA_CalcBaseAndBitshift+0x154>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d101      	bne.n	8004a10 <DMA_CalcBaseAndBitshift+0xac>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <DMA_CalcBaseAndBitshift+0xae>
 8004a10:	2300      	movs	r3, #0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d024      	beq.n	8004a60 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	3b10      	subs	r3, #16
 8004a1e:	4a27      	ldr	r2, [pc, #156]	; (8004abc <DMA_CalcBaseAndBitshift+0x158>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	4a24      	ldr	r2, [pc, #144]	; (8004ac0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004a30:	5cd3      	ldrb	r3, [r2, r3]
 8004a32:	461a      	mov	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d908      	bls.n	8004a50 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	4b1f      	ldr	r3, [pc, #124]	; (8004ac4 <DMA_CalcBaseAndBitshift+0x160>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	1d1a      	adds	r2, r3, #4
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	659a      	str	r2, [r3, #88]	; 0x58
 8004a4e:	e00d      	b.n	8004a6c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <DMA_CalcBaseAndBitshift+0x160>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a5e:	e005      	b.n	8004a6c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	40020010 	.word	0x40020010
 8004a80:	40020028 	.word	0x40020028
 8004a84:	40020040 	.word	0x40020040
 8004a88:	40020058 	.word	0x40020058
 8004a8c:	40020070 	.word	0x40020070
 8004a90:	40020088 	.word	0x40020088
 8004a94:	400200a0 	.word	0x400200a0
 8004a98:	400200b8 	.word	0x400200b8
 8004a9c:	40020410 	.word	0x40020410
 8004aa0:	40020428 	.word	0x40020428
 8004aa4:	40020440 	.word	0x40020440
 8004aa8:	40020458 	.word	0x40020458
 8004aac:	40020470 	.word	0x40020470
 8004ab0:	40020488 	.word	0x40020488
 8004ab4:	400204a0 	.word	0x400204a0
 8004ab8:	400204b8 	.word	0x400204b8
 8004abc:	aaaaaaab 	.word	0xaaaaaaab
 8004ac0:	0800ee50 	.word	0x0800ee50
 8004ac4:	fffffc00 	.word	0xfffffc00

08004ac8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d120      	bne.n	8004b1e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d858      	bhi.n	8004b96 <DMA_CheckFifoParam+0xce>
 8004ae4:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <DMA_CheckFifoParam+0x24>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b0f 	.word	0x08004b0f
 8004af4:	08004afd 	.word	0x08004afd
 8004af8:	08004b97 	.word	0x08004b97
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d048      	beq.n	8004b9a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b0c:	e045      	b.n	8004b9a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b16:	d142      	bne.n	8004b9e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b1c:	e03f      	b.n	8004b9e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b26:	d123      	bne.n	8004b70 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d838      	bhi.n	8004ba2 <DMA_CheckFifoParam+0xda>
 8004b30:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <DMA_CheckFifoParam+0x70>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b49 	.word	0x08004b49
 8004b3c:	08004b4f 	.word	0x08004b4f
 8004b40:	08004b49 	.word	0x08004b49
 8004b44:	08004b61 	.word	0x08004b61
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73fb      	strb	r3, [r7, #15]
        break;
 8004b4c:	e030      	b.n	8004bb0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d025      	beq.n	8004ba6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b5e:	e022      	b.n	8004ba6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b68:	d11f      	bne.n	8004baa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b6e:	e01c      	b.n	8004baa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d902      	bls.n	8004b7e <DMA_CheckFifoParam+0xb6>
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d003      	beq.n	8004b84 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b7c:	e018      	b.n	8004bb0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	73fb      	strb	r3, [r7, #15]
        break;
 8004b82:	e015      	b.n	8004bb0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00e      	beq.n	8004bae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
    break;
 8004b94:	e00b      	b.n	8004bae <DMA_CheckFifoParam+0xe6>
        break;
 8004b96:	bf00      	nop
 8004b98:	e00a      	b.n	8004bb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004b9a:	bf00      	nop
 8004b9c:	e008      	b.n	8004bb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004b9e:	bf00      	nop
 8004ba0:	e006      	b.n	8004bb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ba2:	bf00      	nop
 8004ba4:	e004      	b.n	8004bb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e002      	b.n	8004bb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004baa:	bf00      	nop
 8004bac:	e000      	b.n	8004bb0 <DMA_CheckFifoParam+0xe8>
    break;
 8004bae:	bf00      	nop
    }
  }

  return status;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop

08004bc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a38      	ldr	r2, [pc, #224]	; (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d022      	beq.n	8004c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a36      	ldr	r2, [pc, #216]	; (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01d      	beq.n	8004c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a35      	ldr	r2, [pc, #212]	; (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d018      	beq.n	8004c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a33      	ldr	r2, [pc, #204]	; (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d013      	beq.n	8004c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a32      	ldr	r2, [pc, #200]	; (8004cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00e      	beq.n	8004c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a30      	ldr	r2, [pc, #192]	; (8004cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d009      	beq.n	8004c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a2f      	ldr	r2, [pc, #188]	; (8004ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d004      	beq.n	8004c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a2d      	ldr	r2, [pc, #180]	; (8004cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d101      	bne.n	8004c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c22:	2300      	movs	r3, #0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01a      	beq.n	8004c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	3b08      	subs	r3, #8
 8004c30:	4a28      	ldr	r2, [pc, #160]	; (8004cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	091b      	lsrs	r3, r3, #4
 8004c38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4b26      	ldr	r3, [pc, #152]	; (8004cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	461a      	mov	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a24      	ldr	r2, [pc, #144]	; (8004cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c4c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 031f 	and.w	r3, r3, #31
 8004c54:	2201      	movs	r2, #1
 8004c56:	409a      	lsls	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c5c:	e024      	b.n	8004ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	3b10      	subs	r3, #16
 8004c66:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c68:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6c:	091b      	lsrs	r3, r3, #4
 8004c6e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d806      	bhi.n	8004c86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d902      	bls.n	8004c86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3308      	adds	r3, #8
 8004c84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4b18      	ldr	r3, [pc, #96]	; (8004cec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	461a      	mov	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a16      	ldr	r2, [pc, #88]	; (8004cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c98:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	409a      	lsls	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	58025408 	.word	0x58025408
 8004cb8:	5802541c 	.word	0x5802541c
 8004cbc:	58025430 	.word	0x58025430
 8004cc0:	58025444 	.word	0x58025444
 8004cc4:	58025458 	.word	0x58025458
 8004cc8:	5802546c 	.word	0x5802546c
 8004ccc:	58025480 	.word	0x58025480
 8004cd0:	58025494 	.word	0x58025494
 8004cd4:	cccccccd 	.word	0xcccccccd
 8004cd8:	16009600 	.word	0x16009600
 8004cdc:	58025880 	.word	0x58025880
 8004ce0:	aaaaaaab 	.word	0xaaaaaaab
 8004ce4:	400204b8 	.word	0x400204b8
 8004ce8:	4002040f 	.word	0x4002040f
 8004cec:	10008200 	.word	0x10008200
 8004cf0:	40020880 	.word	0x40020880

08004cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d04a      	beq.n	8004da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d847      	bhi.n	8004da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a25      	ldr	r2, [pc, #148]	; (8004dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d022      	beq.n	8004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a24      	ldr	r2, [pc, #144]	; (8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d01d      	beq.n	8004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a22      	ldr	r2, [pc, #136]	; (8004db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d018      	beq.n	8004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a21      	ldr	r2, [pc, #132]	; (8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d013      	beq.n	8004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1f      	ldr	r2, [pc, #124]	; (8004dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00e      	beq.n	8004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1e      	ldr	r2, [pc, #120]	; (8004dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d009      	beq.n	8004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d004      	beq.n	8004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1b      	ldr	r2, [pc, #108]	; (8004dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d101      	bne.n	8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d64:	2300      	movs	r3, #0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4b17      	ldr	r3, [pc, #92]	; (8004dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	461a      	mov	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d7c:	671a      	str	r2, [r3, #112]	; 0x70
 8004d7e:	e009      	b.n	8004d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	461a      	mov	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a11      	ldr	r2, [pc, #68]	; (8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d92:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	2201      	movs	r2, #1
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	58025408 	.word	0x58025408
 8004db0:	5802541c 	.word	0x5802541c
 8004db4:	58025430 	.word	0x58025430
 8004db8:	58025444 	.word	0x58025444
 8004dbc:	58025458 	.word	0x58025458
 8004dc0:	5802546c 	.word	0x5802546c
 8004dc4:	58025480 	.word	0x58025480
 8004dc8:	58025494 	.word	0x58025494
 8004dcc:	1600963f 	.word	0x1600963f
 8004dd0:	58025940 	.word	0x58025940
 8004dd4:	1000823f 	.word	0x1000823f
 8004dd8:	40020940 	.word	0x40020940

08004ddc <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	7a1b      	ldrb	r3, [r3, #8]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d155      	bne.n	8004ea2 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a4b      	ldr	r2, [pc, #300]	; (8004f28 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d049      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a49      	ldr	r2, [pc, #292]	; (8004f2c <HAL_DMAEx_ConfigMuxSync+0x150>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d044      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a48      	ldr	r2, [pc, #288]	; (8004f30 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d03f      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a46      	ldr	r2, [pc, #280]	; (8004f34 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d03a      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a45      	ldr	r2, [pc, #276]	; (8004f38 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d035      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a43      	ldr	r2, [pc, #268]	; (8004f3c <HAL_DMAEx_ConfigMuxSync+0x160>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d030      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a42      	ldr	r2, [pc, #264]	; (8004f40 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d02b      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a40      	ldr	r2, [pc, #256]	; (8004f44 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d026      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a3f      	ldr	r2, [pc, #252]	; (8004f48 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d021      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a3d      	ldr	r2, [pc, #244]	; (8004f4c <HAL_DMAEx_ConfigMuxSync+0x170>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01c      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a3c      	ldr	r2, [pc, #240]	; (8004f50 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d017      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a3a      	ldr	r2, [pc, #232]	; (8004f54 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d012      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a39      	ldr	r2, [pc, #228]	; (8004f58 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00d      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a37      	ldr	r2, [pc, #220]	; (8004f5c <HAL_DMAEx_ConfigMuxSync+0x180>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d008      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a36      	ldr	r2, [pc, #216]	; (8004f60 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d003      	beq.n	8004e94 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a34      	ldr	r2, [pc, #208]	; (8004f64 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d131      	bne.n	8004f12 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_DMAEx_ConfigMuxSync+0xe0>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e02f      	b.n	8004f1c <HAL_DMAEx_ConfigMuxSync+0x140>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ece:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8004ed2:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	b2d9      	uxtb	r1, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	061a      	lsls	r2, r3, #24
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	04db      	lsls	r3, r3, #19
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	7a1b      	ldrb	r3, [r3, #8]
 8004ef2:	041b      	lsls	r3, r3, #16
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	7a5b      	ldrb	r3, [r3, #9]
 8004efa:	025b      	lsls	r3, r3, #9
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f02:	430a      	orrs	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e004      	b.n	8004f1c <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
  }
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	40020010 	.word	0x40020010
 8004f2c:	40020028 	.word	0x40020028
 8004f30:	40020040 	.word	0x40020040
 8004f34:	40020058 	.word	0x40020058
 8004f38:	40020070 	.word	0x40020070
 8004f3c:	40020088 	.word	0x40020088
 8004f40:	400200a0 	.word	0x400200a0
 8004f44:	400200b8 	.word	0x400200b8
 8004f48:	40020410 	.word	0x40020410
 8004f4c:	40020428 	.word	0x40020428
 8004f50:	40020440 	.word	0x40020440
 8004f54:	40020458 	.word	0x40020458
 8004f58:	40020470 	.word	0x40020470
 8004f5c:	40020488 	.word	0x40020488
 8004f60:	400204a0 	.word	0x400204a0
 8004f64:	400204b8 	.word	0x400204b8

08004f68 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01a      	beq.n	8004fb6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f98:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d022      	beq.n	8005004 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d01a      	beq.n	8005004 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fdc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fe6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
      }
    }
  }
}
 8005004:	bf00      	nop
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800500c:	b480      	push	{r7}
 800500e:	b089      	sub	sp, #36	; 0x24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800501a:	4b89      	ldr	r3, [pc, #548]	; (8005240 <HAL_GPIO_Init+0x234>)
 800501c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800501e:	e194      	b.n	800534a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	2101      	movs	r1, #1
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	4013      	ands	r3, r2
 800502e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 8186 	beq.w	8005344 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	2b01      	cmp	r3, #1
 8005042:	d005      	beq.n	8005050 <HAL_GPIO_Init+0x44>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d130      	bne.n	80050b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	2203      	movs	r2, #3
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	43db      	mvns	r3, r3
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	4013      	ands	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005086:	2201      	movs	r2, #1
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	43db      	mvns	r3, r3
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	4013      	ands	r3, r2
 8005094:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	f003 0201 	and.w	r2, r3, #1
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d017      	beq.n	80050ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	2203      	movs	r2, #3
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	43db      	mvns	r3, r3
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4013      	ands	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d123      	bne.n	8005142 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	08da      	lsrs	r2, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3208      	adds	r2, #8
 8005102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	220f      	movs	r2, #15
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	43db      	mvns	r3, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4013      	ands	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4313      	orrs	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	08da      	lsrs	r2, r3, #3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3208      	adds	r2, #8
 800513c:	69b9      	ldr	r1, [r7, #24]
 800513e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	2203      	movs	r2, #3
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43db      	mvns	r3, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4013      	ands	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f003 0203 	and.w	r2, r3, #3
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4313      	orrs	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 80e0 	beq.w	8005344 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005184:	4b2f      	ldr	r3, [pc, #188]	; (8005244 <HAL_GPIO_Init+0x238>)
 8005186:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800518a:	4a2e      	ldr	r2, [pc, #184]	; (8005244 <HAL_GPIO_Init+0x238>)
 800518c:	f043 0302 	orr.w	r3, r3, #2
 8005190:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005194:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <HAL_GPIO_Init+0x238>)
 8005196:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051a2:	4a29      	ldr	r2, [pc, #164]	; (8005248 <HAL_GPIO_Init+0x23c>)
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	089b      	lsrs	r3, r3, #2
 80051a8:	3302      	adds	r3, #2
 80051aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	220f      	movs	r2, #15
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	43db      	mvns	r3, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4013      	ands	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a20      	ldr	r2, [pc, #128]	; (800524c <HAL_GPIO_Init+0x240>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d052      	beq.n	8005274 <HAL_GPIO_Init+0x268>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1f      	ldr	r2, [pc, #124]	; (8005250 <HAL_GPIO_Init+0x244>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d031      	beq.n	800523a <HAL_GPIO_Init+0x22e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <HAL_GPIO_Init+0x248>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d02b      	beq.n	8005236 <HAL_GPIO_Init+0x22a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <HAL_GPIO_Init+0x24c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d025      	beq.n	8005232 <HAL_GPIO_Init+0x226>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a1c      	ldr	r2, [pc, #112]	; (800525c <HAL_GPIO_Init+0x250>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01f      	beq.n	800522e <HAL_GPIO_Init+0x222>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <HAL_GPIO_Init+0x254>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d019      	beq.n	800522a <HAL_GPIO_Init+0x21e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a1a      	ldr	r2, [pc, #104]	; (8005264 <HAL_GPIO_Init+0x258>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <HAL_GPIO_Init+0x21a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a19      	ldr	r2, [pc, #100]	; (8005268 <HAL_GPIO_Init+0x25c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00d      	beq.n	8005222 <HAL_GPIO_Init+0x216>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a18      	ldr	r2, [pc, #96]	; (800526c <HAL_GPIO_Init+0x260>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d007      	beq.n	800521e <HAL_GPIO_Init+0x212>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a17      	ldr	r2, [pc, #92]	; (8005270 <HAL_GPIO_Init+0x264>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d101      	bne.n	800521a <HAL_GPIO_Init+0x20e>
 8005216:	2309      	movs	r3, #9
 8005218:	e02d      	b.n	8005276 <HAL_GPIO_Init+0x26a>
 800521a:	230a      	movs	r3, #10
 800521c:	e02b      	b.n	8005276 <HAL_GPIO_Init+0x26a>
 800521e:	2308      	movs	r3, #8
 8005220:	e029      	b.n	8005276 <HAL_GPIO_Init+0x26a>
 8005222:	2307      	movs	r3, #7
 8005224:	e027      	b.n	8005276 <HAL_GPIO_Init+0x26a>
 8005226:	2306      	movs	r3, #6
 8005228:	e025      	b.n	8005276 <HAL_GPIO_Init+0x26a>
 800522a:	2305      	movs	r3, #5
 800522c:	e023      	b.n	8005276 <HAL_GPIO_Init+0x26a>
 800522e:	2304      	movs	r3, #4
 8005230:	e021      	b.n	8005276 <HAL_GPIO_Init+0x26a>
 8005232:	2303      	movs	r3, #3
 8005234:	e01f      	b.n	8005276 <HAL_GPIO_Init+0x26a>
 8005236:	2302      	movs	r3, #2
 8005238:	e01d      	b.n	8005276 <HAL_GPIO_Init+0x26a>
 800523a:	2301      	movs	r3, #1
 800523c:	e01b      	b.n	8005276 <HAL_GPIO_Init+0x26a>
 800523e:	bf00      	nop
 8005240:	58000080 	.word	0x58000080
 8005244:	58024400 	.word	0x58024400
 8005248:	58000400 	.word	0x58000400
 800524c:	58020000 	.word	0x58020000
 8005250:	58020400 	.word	0x58020400
 8005254:	58020800 	.word	0x58020800
 8005258:	58020c00 	.word	0x58020c00
 800525c:	58021000 	.word	0x58021000
 8005260:	58021400 	.word	0x58021400
 8005264:	58021800 	.word	0x58021800
 8005268:	58021c00 	.word	0x58021c00
 800526c:	58022000 	.word	0x58022000
 8005270:	58022400 	.word	0x58022400
 8005274:	2300      	movs	r3, #0
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	f002 0203 	and.w	r2, r2, #3
 800527c:	0092      	lsls	r2, r2, #2
 800527e:	4093      	lsls	r3, r2
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	4313      	orrs	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005286:	4938      	ldr	r1, [pc, #224]	; (8005368 <HAL_GPIO_Init+0x35c>)
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	089b      	lsrs	r3, r3, #2
 800528c:	3302      	adds	r3, #2
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	43db      	mvns	r3, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	4013      	ands	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80052ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80052c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	43db      	mvns	r3, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	4013      	ands	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80052e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	43db      	mvns	r3, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4013      	ands	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	43db      	mvns	r3, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4013      	ands	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	3301      	adds	r3, #1
 8005348:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	fa22 f303 	lsr.w	r3, r2, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	f47f ae63 	bne.w	8005020 <HAL_GPIO_Init+0x14>
  }
}
 800535a:	bf00      	nop
 800535c:	bf00      	nop
 800535e:	3724      	adds	r7, #36	; 0x24
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	58000400 	.word	0x58000400

0800536c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	887b      	ldrh	r3, [r7, #2]
 800537e:	4013      	ands	r3, r2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
 8005388:	e001      	b.n	800538e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800538e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	807b      	strh	r3, [r7, #2]
 80053a8:	4613      	mov	r3, r2
 80053aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053ac:	787b      	ldrb	r3, [r7, #1]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053b2:	887a      	ldrh	r2, [r7, #2]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80053b8:	e003      	b.n	80053c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80053ba:	887b      	ldrh	r3, [r7, #2]
 80053bc:	041a      	lsls	r2, r3, #16
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	619a      	str	r2, [r3, #24]
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053e0:	887a      	ldrh	r2, [r7, #2]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4013      	ands	r3, r2
 80053e6:	041a      	lsls	r2, r3, #16
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	43d9      	mvns	r1, r3
 80053ec:	887b      	ldrh	r3, [r7, #2]
 80053ee:	400b      	ands	r3, r1
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	619a      	str	r2, [r3, #24]
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e07f      	b.n	8005516 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fb fcd2 	bl	8000dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2224      	movs	r2, #36	; 0x24
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005454:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005464:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d107      	bne.n	800547e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	e006      	b.n	800548c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800548a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b02      	cmp	r3, #2
 8005492:	d104      	bne.n	800549e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800549c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6859      	ldr	r1, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <HAL_I2C_Init+0x11c>)
 80054aa:	430b      	orrs	r3, r1
 80054ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69d9      	ldr	r1, [r3, #28]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1a      	ldr	r2, [r3, #32]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0201 	orr.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	02008000 	.word	0x02008000

08005524 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af02      	add	r7, sp, #8
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	461a      	mov	r2, r3
 8005530:	460b      	mov	r3, r1
 8005532:	817b      	strh	r3, [r7, #10]
 8005534:	4613      	mov	r3, r2
 8005536:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b20      	cmp	r3, #32
 8005542:	f040 80da 	bne.w	80056fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_I2C_Master_Transmit+0x30>
 8005550:	2302      	movs	r3, #2
 8005552:	e0d3      	b.n	80056fc <HAL_I2C_Master_Transmit+0x1d8>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800555c:	f7fc fdfa 	bl	8002154 <HAL_GetTick>
 8005560:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	2319      	movs	r3, #25
 8005568:	2201      	movs	r2, #1
 800556a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f8f0 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e0be      	b.n	80056fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2221      	movs	r2, #33	; 0x21
 8005582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2210      	movs	r2, #16
 800558a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	893a      	ldrh	r2, [r7, #8]
 800559e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2bff      	cmp	r3, #255	; 0xff
 80055ae:	d90e      	bls.n	80055ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	22ff      	movs	r2, #255	; 0xff
 80055b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	8979      	ldrh	r1, [r7, #10]
 80055be:	4b51      	ldr	r3, [pc, #324]	; (8005704 <HAL_I2C_Master_Transmit+0x1e0>)
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 fa6c 	bl	8005aa4 <I2C_TransferConfig>
 80055cc:	e06c      	b.n	80056a8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	8979      	ldrh	r1, [r7, #10]
 80055e0:	4b48      	ldr	r3, [pc, #288]	; (8005704 <HAL_I2C_Master_Transmit+0x1e0>)
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 fa5b 	bl	8005aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80055ee:	e05b      	b.n	80056a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	6a39      	ldr	r1, [r7, #32]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f8ed 	bl	80057d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e07b      	b.n	80056fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	781a      	ldrb	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561e:	b29b      	uxth	r3, r3
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d034      	beq.n	80056a8 <HAL_I2C_Master_Transmit+0x184>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005642:	2b00      	cmp	r3, #0
 8005644:	d130      	bne.n	80056a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	2200      	movs	r2, #0
 800564e:	2180      	movs	r1, #128	; 0x80
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f87f 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e04d      	b.n	80056fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005664:	b29b      	uxth	r3, r3
 8005666:	2bff      	cmp	r3, #255	; 0xff
 8005668:	d90e      	bls.n	8005688 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	22ff      	movs	r2, #255	; 0xff
 800566e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005674:	b2da      	uxtb	r2, r3
 8005676:	8979      	ldrh	r1, [r7, #10]
 8005678:	2300      	movs	r3, #0
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fa0f 	bl	8005aa4 <I2C_TransferConfig>
 8005686:	e00f      	b.n	80056a8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005696:	b2da      	uxtb	r2, r3
 8005698:	8979      	ldrh	r1, [r7, #10]
 800569a:	2300      	movs	r3, #0
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f9fe 	bl	8005aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d19e      	bne.n	80055f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	6a39      	ldr	r1, [r7, #32]
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f8cc 	bl	8005854 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e01a      	b.n	80056fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2220      	movs	r2, #32
 80056cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6859      	ldr	r1, [r3, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <HAL_I2C_Master_Transmit+0x1e4>)
 80056da:	400b      	ands	r3, r1
 80056dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	e000      	b.n	80056fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80056fa:	2302      	movs	r3, #2
  }
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	80002000 	.word	0x80002000
 8005708:	fe00e800 	.word	0xfe00e800

0800570c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b02      	cmp	r3, #2
 8005720:	d103      	bne.n	800572a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2200      	movs	r2, #0
 8005728:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d007      	beq.n	8005748 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	619a      	str	r2, [r3, #24]
  }
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	4613      	mov	r3, r2
 8005762:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005764:	e022      	b.n	80057ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800576c:	d01e      	beq.n	80057ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576e:	f7fc fcf1 	bl	8002154 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d302      	bcc.n	8005784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d113      	bne.n	80057ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005788:	f043 0220 	orr.w	r2, r3, #32
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e00f      	b.n	80057cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	4013      	ands	r3, r2
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	bf0c      	ite	eq
 80057bc:	2301      	moveq	r3, #1
 80057be:	2300      	movne	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d0cd      	beq.n	8005766 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057e0:	e02c      	b.n	800583c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f870 	bl	80058cc <I2C_IsErrorOccurred>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e02a      	b.n	800584c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057fc:	d01e      	beq.n	800583c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fe:	f7fc fca9 	bl	8002154 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	429a      	cmp	r2, r3
 800580c:	d302      	bcc.n	8005814 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d113      	bne.n	800583c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005818:	f043 0220 	orr.w	r2, r3, #32
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e007      	b.n	800584c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b02      	cmp	r3, #2
 8005848:	d1cb      	bne.n	80057e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005860:	e028      	b.n	80058b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 f830 	bl	80058cc <I2C_IsErrorOccurred>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e026      	b.n	80058c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005876:	f7fc fc6d 	bl	8002154 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	429a      	cmp	r2, r3
 8005884:	d302      	bcc.n	800588c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d113      	bne.n	80058b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005890:	f043 0220 	orr.w	r2, r3, #32
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e007      	b.n	80058c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d1cf      	bne.n	8005862 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08a      	sub	sp, #40	; 0x28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d075      	beq.n	80059e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2210      	movs	r2, #16
 80058fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005900:	e056      	b.n	80059b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005908:	d052      	beq.n	80059b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800590a:	f7fc fc23 	bl	8002154 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	429a      	cmp	r2, r3
 8005918:	d302      	bcc.n	8005920 <I2C_IsErrorOccurred+0x54>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d147      	bne.n	80059b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800592a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005932:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800593e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005942:	d12e      	bne.n	80059a2 <I2C_IsErrorOccurred+0xd6>
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800594a:	d02a      	beq.n	80059a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800594c:	7cfb      	ldrb	r3, [r7, #19]
 800594e:	2b20      	cmp	r3, #32
 8005950:	d027      	beq.n	80059a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005960:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005962:	f7fc fbf7 	bl	8002154 <HAL_GetTick>
 8005966:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005968:	e01b      	b.n	80059a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800596a:	f7fc fbf3 	bl	8002154 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b19      	cmp	r3, #25
 8005976:	d914      	bls.n	80059a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597c:	f043 0220 	orr.w	r2, r3, #32
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d1dc      	bne.n	800596a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d003      	beq.n	80059c6 <I2C_IsErrorOccurred+0xfa>
 80059be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d09d      	beq.n	8005902 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80059c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d103      	bne.n	80059d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2220      	movs	r2, #32
 80059d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	f043 0304 	orr.w	r3, r3, #4
 80059dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00b      	beq.n	8005a0e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00b      	beq.n	8005a30 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	f043 0308 	orr.w	r3, r3, #8
 8005a1e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00b      	beq.n	8005a52 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	f043 0302 	orr.w	r3, r3, #2
 8005a40:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005a52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d01c      	beq.n	8005a94 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7ff fe56 	bl	800570c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6859      	ldr	r1, [r3, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	; (8005aa0 <I2C_IsErrorOccurred+0x1d4>)
 8005a6c:	400b      	ands	r3, r1
 8005a6e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	431a      	orrs	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3728      	adds	r7, #40	; 0x28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	fe00e800 	.word	0xfe00e800

08005aa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	607b      	str	r3, [r7, #4]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	817b      	strh	r3, [r7, #10]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ab6:	897b      	ldrh	r3, [r7, #10]
 8005ab8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005abc:	7a7b      	ldrb	r3, [r7, #9]
 8005abe:	041b      	lsls	r3, r3, #16
 8005ac0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ac4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ad2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	0d5b      	lsrs	r3, r3, #21
 8005ade:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005ae2:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <I2C_TransferConfig+0x60>)
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	ea02 0103 	and.w	r1, r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	03ff63ff 	.word	0x03ff63ff

08005b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d138      	bne.n	8005b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e032      	b.n	8005b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2224      	movs	r2, #36	; 0x24
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0201 	bic.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6819      	ldr	r1, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e000      	b.n	8005b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b90:	2302      	movs	r3, #2
  }
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d139      	bne.n	8005c28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e033      	b.n	8005c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2224      	movs	r2, #36	; 0x24
 8005bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0201 	bic.w	r2, r2, #1
 8005be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005bf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e000      	b.n	8005c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c28:	2302      	movs	r3, #2
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005c40:	4b19      	ldr	r3, [pc, #100]	; (8005ca8 <HAL_PWREx_ConfigSupply+0x70>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d00a      	beq.n	8005c62 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c4c:	4b16      	ldr	r3, [pc, #88]	; (8005ca8 <HAL_PWREx_ConfigSupply+0x70>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d001      	beq.n	8005c5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e01f      	b.n	8005c9e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e01d      	b.n	8005c9e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c62:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <HAL_PWREx_ConfigSupply+0x70>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f023 0207 	bic.w	r2, r3, #7
 8005c6a:	490f      	ldr	r1, [pc, #60]	; (8005ca8 <HAL_PWREx_ConfigSupply+0x70>)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c72:	f7fc fa6f 	bl	8002154 <HAL_GetTick>
 8005c76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c78:	e009      	b.n	8005c8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c7a:	f7fc fa6b 	bl	8002154 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c88:	d901      	bls.n	8005c8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e007      	b.n	8005c9e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c8e:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <HAL_PWREx_ConfigSupply+0x70>)
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9a:	d1ee      	bne.n	8005c7a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	58024800 	.word	0x58024800

08005cac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af02      	add	r7, sp, #8
 8005cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005cb4:	f7fc fa4e 	bl	8002154 <HAL_GetTick>
 8005cb8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e05f      	b.n	8005d84 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d107      	bne.n	8005ce0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7fb fc47 	bl	8001564 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005cd6:	f241 3188 	movw	r1, #5000	; 0x1388
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f85a 	bl	8005d94 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	021a      	lsls	r2, r3, #8
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	2120      	movs	r1, #32
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f852 	bl	8005db0 <QSPI_WaitFlagStateUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005d10:	7afb      	ldrb	r3, [r7, #11]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d135      	bne.n	8005d82 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <HAL_QSPI_Init+0xe0>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6852      	ldr	r2, [r2, #4]
 8005d24:	0611      	lsls	r1, r2, #24
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	68d2      	ldr	r2, [r2, #12]
 8005d2a:	4311      	orrs	r1, r2
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	69d2      	ldr	r2, [r2, #28]
 8005d30:	4311      	orrs	r1, r2
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6a12      	ldr	r2, [r2, #32]
 8005d36:	4311      	orrs	r1, r2
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	4b12      	ldr	r3, [pc, #72]	; (8005d90 <HAL_QSPI_Init+0xe4>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6912      	ldr	r2, [r2, #16]
 8005d4e:	0411      	lsls	r1, r2, #16
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6952      	ldr	r2, [r2, #20]
 8005d54:	4311      	orrs	r1, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6992      	ldr	r2, [r2, #24]
 8005d5a:	4311      	orrs	r1, r2
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6812      	ldr	r2, [r2, #0]
 8005d60:	430b      	orrs	r3, r1
 8005d62:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0201 	orr.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005d82:	7afb      	ldrb	r3, [r7, #11]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	00ffff2f 	.word	0x00ffff2f
 8005d90:	ffe0f8fe 	.word	0xffe0f8fe

08005d94 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005dc0:	e01a      	b.n	8005df8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc8:	d016      	beq.n	8005df8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dca:	f7fc f9c3 	bl	8002154 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d302      	bcc.n	8005de0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10b      	bne.n	8005df8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2204      	movs	r2, #4
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dec:	f043 0201 	orr.w	r2, r3, #1
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e00e      	b.n	8005e16 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	bf14      	ite	ne
 8005e06:	2301      	movne	r3, #1
 8005e08:	2300      	moveq	r3, #0
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d1d6      	bne.n	8005dc2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
	...

08005e20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08c      	sub	sp, #48	; 0x30
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d102      	bne.n	8005e34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f000 bc1d 	b.w	800666e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8087 	beq.w	8005f50 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e42:	4b99      	ldr	r3, [pc, #612]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e4c:	4b96      	ldr	r3, [pc, #600]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e54:	2b10      	cmp	r3, #16
 8005e56:	d007      	beq.n	8005e68 <HAL_RCC_OscConfig+0x48>
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	2b18      	cmp	r3, #24
 8005e5c:	d110      	bne.n	8005e80 <HAL_RCC_OscConfig+0x60>
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d10b      	bne.n	8005e80 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e68:	4b8f      	ldr	r3, [pc, #572]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d06c      	beq.n	8005f4e <HAL_RCC_OscConfig+0x12e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d168      	bne.n	8005f4e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e3f6      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e88:	d106      	bne.n	8005e98 <HAL_RCC_OscConfig+0x78>
 8005e8a:	4b87      	ldr	r3, [pc, #540]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a86      	ldr	r2, [pc, #536]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e02e      	b.n	8005ef6 <HAL_RCC_OscConfig+0xd6>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10c      	bne.n	8005eba <HAL_RCC_OscConfig+0x9a>
 8005ea0:	4b81      	ldr	r3, [pc, #516]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a80      	ldr	r2, [pc, #512]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	4b7e      	ldr	r3, [pc, #504]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a7d      	ldr	r2, [pc, #500]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	e01d      	b.n	8005ef6 <HAL_RCC_OscConfig+0xd6>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ec2:	d10c      	bne.n	8005ede <HAL_RCC_OscConfig+0xbe>
 8005ec4:	4b78      	ldr	r3, [pc, #480]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a77      	ldr	r2, [pc, #476]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005eca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	4b75      	ldr	r3, [pc, #468]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a74      	ldr	r2, [pc, #464]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	e00b      	b.n	8005ef6 <HAL_RCC_OscConfig+0xd6>
 8005ede:	4b72      	ldr	r3, [pc, #456]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a71      	ldr	r2, [pc, #452]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	4b6f      	ldr	r3, [pc, #444]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a6e      	ldr	r2, [pc, #440]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ef4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d013      	beq.n	8005f26 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efe:	f7fc f929 	bl	8002154 <HAL_GetTick>
 8005f02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f04:	e008      	b.n	8005f18 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f06:	f7fc f925 	bl	8002154 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b64      	cmp	r3, #100	; 0x64
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e3aa      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f18:	4b63      	ldr	r3, [pc, #396]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0f0      	beq.n	8005f06 <HAL_RCC_OscConfig+0xe6>
 8005f24:	e014      	b.n	8005f50 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f26:	f7fc f915 	bl	8002154 <HAL_GetTick>
 8005f2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f2e:	f7fc f911 	bl	8002154 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b64      	cmp	r3, #100	; 0x64
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e396      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f40:	4b59      	ldr	r3, [pc, #356]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1f0      	bne.n	8005f2e <HAL_RCC_OscConfig+0x10e>
 8005f4c:	e000      	b.n	8005f50 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 80cb 	beq.w	80060f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f5e:	4b52      	ldr	r3, [pc, #328]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f66:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f68:	4b4f      	ldr	r3, [pc, #316]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d007      	beq.n	8005f84 <HAL_RCC_OscConfig+0x164>
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	2b18      	cmp	r3, #24
 8005f78:	d156      	bne.n	8006028 <HAL_RCC_OscConfig+0x208>
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d151      	bne.n	8006028 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f84:	4b48      	ldr	r3, [pc, #288]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <HAL_RCC_OscConfig+0x17c>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e368      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f9c:	4b42      	ldr	r3, [pc, #264]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f023 0219 	bic.w	r2, r3, #25
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	493f      	ldr	r1, [pc, #252]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fae:	f7fc f8d1 	bl	8002154 <HAL_GetTick>
 8005fb2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fb6:	f7fc f8cd 	bl	8002154 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e352      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fc8:	4b37      	ldr	r3, [pc, #220]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0f0      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fd4:	f7fc f8ee 	bl	80021b4 <HAL_GetREVID>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d817      	bhi.n	8006012 <HAL_RCC_OscConfig+0x1f2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b40      	cmp	r3, #64	; 0x40
 8005fe8:	d108      	bne.n	8005ffc <HAL_RCC_OscConfig+0x1dc>
 8005fea:	4b2f      	ldr	r3, [pc, #188]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ff2:	4a2d      	ldr	r2, [pc, #180]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ffa:	e07b      	b.n	80060f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ffc:	4b2a      	ldr	r3, [pc, #168]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	031b      	lsls	r3, r3, #12
 800600a:	4927      	ldr	r1, [pc, #156]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 800600c:	4313      	orrs	r3, r2
 800600e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006010:	e070      	b.n	80060f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006012:	4b25      	ldr	r3, [pc, #148]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	061b      	lsls	r3, r3, #24
 8006020:	4921      	ldr	r1, [pc, #132]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8006022:	4313      	orrs	r3, r2
 8006024:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006026:	e065      	b.n	80060f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d048      	beq.n	80060c2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006030:	4b1d      	ldr	r3, [pc, #116]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f023 0219 	bic.w	r2, r3, #25
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	491a      	ldr	r1, [pc, #104]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 800603e:	4313      	orrs	r3, r2
 8006040:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006042:	f7fc f887 	bl	8002154 <HAL_GetTick>
 8006046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006048:	e008      	b.n	800605c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800604a:	f7fc f883 	bl	8002154 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e308      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800605c:	4b12      	ldr	r3, [pc, #72]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0f0      	beq.n	800604a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006068:	f7fc f8a4 	bl	80021b4 <HAL_GetREVID>
 800606c:	4603      	mov	r3, r0
 800606e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006072:	4293      	cmp	r3, r2
 8006074:	d81a      	bhi.n	80060ac <HAL_RCC_OscConfig+0x28c>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b40      	cmp	r3, #64	; 0x40
 800607c:	d108      	bne.n	8006090 <HAL_RCC_OscConfig+0x270>
 800607e:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006086:	4a08      	ldr	r2, [pc, #32]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8006088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800608c:	6053      	str	r3, [r2, #4]
 800608e:	e031      	b.n	80060f4 <HAL_RCC_OscConfig+0x2d4>
 8006090:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	031b      	lsls	r3, r3, #12
 800609e:	4902      	ldr	r1, [pc, #8]	; (80060a8 <HAL_RCC_OscConfig+0x288>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	604b      	str	r3, [r1, #4]
 80060a4:	e026      	b.n	80060f4 <HAL_RCC_OscConfig+0x2d4>
 80060a6:	bf00      	nop
 80060a8:	58024400 	.word	0x58024400
 80060ac:	4b9a      	ldr	r3, [pc, #616]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	061b      	lsls	r3, r3, #24
 80060ba:	4997      	ldr	r1, [pc, #604]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	604b      	str	r3, [r1, #4]
 80060c0:	e018      	b.n	80060f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060c2:	4b95      	ldr	r3, [pc, #596]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a94      	ldr	r2, [pc, #592]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 80060c8:	f023 0301 	bic.w	r3, r3, #1
 80060cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ce:	f7fc f841 	bl	8002154 <HAL_GetTick>
 80060d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060d4:	e008      	b.n	80060e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060d6:	f7fc f83d 	bl	8002154 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e2c2      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060e8:	4b8b      	ldr	r3, [pc, #556]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1f0      	bne.n	80060d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80a9 	beq.w	8006254 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006102:	4b85      	ldr	r3, [pc, #532]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800610a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800610c:	4b82      	ldr	r3, [pc, #520]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	2b08      	cmp	r3, #8
 8006116:	d007      	beq.n	8006128 <HAL_RCC_OscConfig+0x308>
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	2b18      	cmp	r3, #24
 800611c:	d13a      	bne.n	8006194 <HAL_RCC_OscConfig+0x374>
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f003 0303 	and.w	r3, r3, #3
 8006124:	2b01      	cmp	r3, #1
 8006126:	d135      	bne.n	8006194 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006128:	4b7b      	ldr	r3, [pc, #492]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006130:	2b00      	cmp	r3, #0
 8006132:	d005      	beq.n	8006140 <HAL_RCC_OscConfig+0x320>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	2b80      	cmp	r3, #128	; 0x80
 800613a:	d001      	beq.n	8006140 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e296      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006140:	f7fc f838 	bl	80021b4 <HAL_GetREVID>
 8006144:	4603      	mov	r3, r0
 8006146:	f241 0203 	movw	r2, #4099	; 0x1003
 800614a:	4293      	cmp	r3, r2
 800614c:	d817      	bhi.n	800617e <HAL_RCC_OscConfig+0x35e>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	2b20      	cmp	r3, #32
 8006154:	d108      	bne.n	8006168 <HAL_RCC_OscConfig+0x348>
 8006156:	4b70      	ldr	r3, [pc, #448]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800615e:	4a6e      	ldr	r2, [pc, #440]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 8006160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006164:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006166:	e075      	b.n	8006254 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006168:	4b6b      	ldr	r3, [pc, #428]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	069b      	lsls	r3, r3, #26
 8006176:	4968      	ldr	r1, [pc, #416]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 8006178:	4313      	orrs	r3, r2
 800617a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800617c:	e06a      	b.n	8006254 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800617e:	4b66      	ldr	r3, [pc, #408]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	061b      	lsls	r3, r3, #24
 800618c:	4962      	ldr	r1, [pc, #392]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 800618e:	4313      	orrs	r3, r2
 8006190:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006192:	e05f      	b.n	8006254 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d042      	beq.n	8006222 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800619c:	4b5e      	ldr	r3, [pc, #376]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a5d      	ldr	r2, [pc, #372]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 80061a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a8:	f7fb ffd4 	bl	8002154 <HAL_GetTick>
 80061ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80061b0:	f7fb ffd0 	bl	8002154 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e255      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061c2:	4b55      	ldr	r3, [pc, #340]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0f0      	beq.n	80061b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061ce:	f7fb fff1 	bl	80021b4 <HAL_GetREVID>
 80061d2:	4603      	mov	r3, r0
 80061d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80061d8:	4293      	cmp	r3, r2
 80061da:	d817      	bhi.n	800620c <HAL_RCC_OscConfig+0x3ec>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	d108      	bne.n	80061f6 <HAL_RCC_OscConfig+0x3d6>
 80061e4:	4b4c      	ldr	r3, [pc, #304]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80061ec:	4a4a      	ldr	r2, [pc, #296]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 80061ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061f2:	6053      	str	r3, [r2, #4]
 80061f4:	e02e      	b.n	8006254 <HAL_RCC_OscConfig+0x434>
 80061f6:	4b48      	ldr	r3, [pc, #288]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	069b      	lsls	r3, r3, #26
 8006204:	4944      	ldr	r1, [pc, #272]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 8006206:	4313      	orrs	r3, r2
 8006208:	604b      	str	r3, [r1, #4]
 800620a:	e023      	b.n	8006254 <HAL_RCC_OscConfig+0x434>
 800620c:	4b42      	ldr	r3, [pc, #264]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	061b      	lsls	r3, r3, #24
 800621a:	493f      	ldr	r1, [pc, #252]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 800621c:	4313      	orrs	r3, r2
 800621e:	60cb      	str	r3, [r1, #12]
 8006220:	e018      	b.n	8006254 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006222:	4b3d      	ldr	r3, [pc, #244]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a3c      	ldr	r2, [pc, #240]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 8006228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622e:	f7fb ff91 	bl	8002154 <HAL_GetTick>
 8006232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006236:	f7fb ff8d 	bl	8002154 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e212      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006248:	4b33      	ldr	r3, [pc, #204]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f0      	bne.n	8006236 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d036      	beq.n	80062ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d019      	beq.n	800629c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006268:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 800626a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800626c:	4a2a      	ldr	r2, [pc, #168]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006274:	f7fb ff6e 	bl	8002154 <HAL_GetTick>
 8006278:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800627c:	f7fb ff6a 	bl	8002154 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e1ef      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800628e:	4b22      	ldr	r3, [pc, #136]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 8006290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f0      	beq.n	800627c <HAL_RCC_OscConfig+0x45c>
 800629a:	e018      	b.n	80062ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800629c:	4b1e      	ldr	r3, [pc, #120]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 800629e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a0:	4a1d      	ldr	r2, [pc, #116]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 80062a2:	f023 0301 	bic.w	r3, r3, #1
 80062a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a8:	f7fb ff54 	bl	8002154 <HAL_GetTick>
 80062ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062b0:	f7fb ff50 	bl	8002154 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e1d5      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062c2:	4b15      	ldr	r3, [pc, #84]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 80062c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f0      	bne.n	80062b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d039      	beq.n	800634e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d01c      	beq.n	800631c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062e2:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a0c      	ldr	r2, [pc, #48]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 80062e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062ee:	f7fb ff31 	bl	8002154 <HAL_GetTick>
 80062f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80062f6:	f7fb ff2d 	bl	8002154 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e1b2      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006308:	4b03      	ldr	r3, [pc, #12]	; (8006318 <HAL_RCC_OscConfig+0x4f8>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f0      	beq.n	80062f6 <HAL_RCC_OscConfig+0x4d6>
 8006314:	e01b      	b.n	800634e <HAL_RCC_OscConfig+0x52e>
 8006316:	bf00      	nop
 8006318:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800631c:	4b9b      	ldr	r3, [pc, #620]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a9a      	ldr	r2, [pc, #616]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006322:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006326:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006328:	f7fb ff14 	bl	8002154 <HAL_GetTick>
 800632c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006330:	f7fb ff10 	bl	8002154 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e195      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006342:	4b92      	ldr	r3, [pc, #584]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 8081 	beq.w	800645e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800635c:	4b8c      	ldr	r3, [pc, #560]	; (8006590 <HAL_RCC_OscConfig+0x770>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a8b      	ldr	r2, [pc, #556]	; (8006590 <HAL_RCC_OscConfig+0x770>)
 8006362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006366:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006368:	f7fb fef4 	bl	8002154 <HAL_GetTick>
 800636c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006370:	f7fb fef0 	bl	8002154 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b64      	cmp	r3, #100	; 0x64
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e175      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006382:	4b83      	ldr	r3, [pc, #524]	; (8006590 <HAL_RCC_OscConfig+0x770>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0f0      	beq.n	8006370 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d106      	bne.n	80063a4 <HAL_RCC_OscConfig+0x584>
 8006396:	4b7d      	ldr	r3, [pc, #500]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639a:	4a7c      	ldr	r2, [pc, #496]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 800639c:	f043 0301 	orr.w	r3, r3, #1
 80063a0:	6713      	str	r3, [r2, #112]	; 0x70
 80063a2:	e02d      	b.n	8006400 <HAL_RCC_OscConfig+0x5e0>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10c      	bne.n	80063c6 <HAL_RCC_OscConfig+0x5a6>
 80063ac:	4b77      	ldr	r3, [pc, #476]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80063ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b0:	4a76      	ldr	r2, [pc, #472]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80063b2:	f023 0301 	bic.w	r3, r3, #1
 80063b6:	6713      	str	r3, [r2, #112]	; 0x70
 80063b8:	4b74      	ldr	r3, [pc, #464]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80063ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063bc:	4a73      	ldr	r2, [pc, #460]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80063be:	f023 0304 	bic.w	r3, r3, #4
 80063c2:	6713      	str	r3, [r2, #112]	; 0x70
 80063c4:	e01c      	b.n	8006400 <HAL_RCC_OscConfig+0x5e0>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2b05      	cmp	r3, #5
 80063cc:	d10c      	bne.n	80063e8 <HAL_RCC_OscConfig+0x5c8>
 80063ce:	4b6f      	ldr	r3, [pc, #444]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80063d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d2:	4a6e      	ldr	r2, [pc, #440]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80063d4:	f043 0304 	orr.w	r3, r3, #4
 80063d8:	6713      	str	r3, [r2, #112]	; 0x70
 80063da:	4b6c      	ldr	r3, [pc, #432]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80063dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063de:	4a6b      	ldr	r2, [pc, #428]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80063e0:	f043 0301 	orr.w	r3, r3, #1
 80063e4:	6713      	str	r3, [r2, #112]	; 0x70
 80063e6:	e00b      	b.n	8006400 <HAL_RCC_OscConfig+0x5e0>
 80063e8:	4b68      	ldr	r3, [pc, #416]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80063ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ec:	4a67      	ldr	r2, [pc, #412]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80063ee:	f023 0301 	bic.w	r3, r3, #1
 80063f2:	6713      	str	r3, [r2, #112]	; 0x70
 80063f4:	4b65      	ldr	r3, [pc, #404]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80063f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f8:	4a64      	ldr	r2, [pc, #400]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80063fa:	f023 0304 	bic.w	r3, r3, #4
 80063fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d015      	beq.n	8006434 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006408:	f7fb fea4 	bl	8002154 <HAL_GetTick>
 800640c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800640e:	e00a      	b.n	8006426 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006410:	f7fb fea0 	bl	8002154 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	f241 3288 	movw	r2, #5000	; 0x1388
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e123      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006426:	4b59      	ldr	r3, [pc, #356]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0ee      	beq.n	8006410 <HAL_RCC_OscConfig+0x5f0>
 8006432:	e014      	b.n	800645e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006434:	f7fb fe8e 	bl	8002154 <HAL_GetTick>
 8006438:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800643a:	e00a      	b.n	8006452 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800643c:	f7fb fe8a 	bl	8002154 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	f241 3288 	movw	r2, #5000	; 0x1388
 800644a:	4293      	cmp	r3, r2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e10d      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006452:	4b4e      	ldr	r3, [pc, #312]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1ee      	bne.n	800643c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 8102 	beq.w	800666c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006468:	4b48      	ldr	r3, [pc, #288]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006470:	2b18      	cmp	r3, #24
 8006472:	f000 80bd 	beq.w	80065f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	2b02      	cmp	r3, #2
 800647c:	f040 809e 	bne.w	80065bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006480:	4b42      	ldr	r3, [pc, #264]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a41      	ldr	r2, [pc, #260]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800648a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648c:	f7fb fe62 	bl	8002154 <HAL_GetTick>
 8006490:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006494:	f7fb fe5e 	bl	8002154 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e0e3      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064a6:	4b39      	ldr	r3, [pc, #228]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f0      	bne.n	8006494 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064b2:	4b36      	ldr	r3, [pc, #216]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80064b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064b6:	4b37      	ldr	r3, [pc, #220]	; (8006594 <HAL_RCC_OscConfig+0x774>)
 80064b8:	4013      	ands	r3, r2
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80064c2:	0112      	lsls	r2, r2, #4
 80064c4:	430a      	orrs	r2, r1
 80064c6:	4931      	ldr	r1, [pc, #196]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	628b      	str	r3, [r1, #40]	; 0x28
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d0:	3b01      	subs	r3, #1
 80064d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064da:	3b01      	subs	r3, #1
 80064dc:	025b      	lsls	r3, r3, #9
 80064de:	b29b      	uxth	r3, r3
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	3b01      	subs	r3, #1
 80064e8:	041b      	lsls	r3, r3, #16
 80064ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f4:	3b01      	subs	r3, #1
 80064f6:	061b      	lsls	r3, r3, #24
 80064f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064fc:	4923      	ldr	r1, [pc, #140]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006502:	4b22      	ldr	r3, [pc, #136]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006506:	4a21      	ldr	r2, [pc, #132]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800650e:	4b1f      	ldr	r3, [pc, #124]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006512:	4b21      	ldr	r3, [pc, #132]	; (8006598 <HAL_RCC_OscConfig+0x778>)
 8006514:	4013      	ands	r3, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800651a:	00d2      	lsls	r2, r2, #3
 800651c:	491b      	ldr	r1, [pc, #108]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 800651e:	4313      	orrs	r3, r2
 8006520:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006522:	4b1a      	ldr	r3, [pc, #104]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	f023 020c 	bic.w	r2, r3, #12
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	4917      	ldr	r1, [pc, #92]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006530:	4313      	orrs	r3, r2
 8006532:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006534:	4b15      	ldr	r3, [pc, #84]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	f023 0202 	bic.w	r2, r3, #2
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006540:	4912      	ldr	r1, [pc, #72]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006542:	4313      	orrs	r3, r2
 8006544:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006546:	4b11      	ldr	r3, [pc, #68]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	4a10      	ldr	r2, [pc, #64]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 800654c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006550:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006552:	4b0e      	ldr	r3, [pc, #56]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	4a0d      	ldr	r2, [pc, #52]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800655c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800655e:	4b0b      	ldr	r3, [pc, #44]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	4a0a      	ldr	r2, [pc, #40]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006568:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800656a:	4b08      	ldr	r3, [pc, #32]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	4a07      	ldr	r2, [pc, #28]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006576:	4b05      	ldr	r3, [pc, #20]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a04      	ldr	r2, [pc, #16]	; (800658c <HAL_RCC_OscConfig+0x76c>)
 800657c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006582:	f7fb fde7 	bl	8002154 <HAL_GetTick>
 8006586:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006588:	e011      	b.n	80065ae <HAL_RCC_OscConfig+0x78e>
 800658a:	bf00      	nop
 800658c:	58024400 	.word	0x58024400
 8006590:	58024800 	.word	0x58024800
 8006594:	fffffc0c 	.word	0xfffffc0c
 8006598:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800659c:	f7fb fdda 	bl	8002154 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e05f      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065ae:	4b32      	ldr	r3, [pc, #200]	; (8006678 <HAL_RCC_OscConfig+0x858>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0x77c>
 80065ba:	e057      	b.n	800666c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065bc:	4b2e      	ldr	r3, [pc, #184]	; (8006678 <HAL_RCC_OscConfig+0x858>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a2d      	ldr	r2, [pc, #180]	; (8006678 <HAL_RCC_OscConfig+0x858>)
 80065c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c8:	f7fb fdc4 	bl	8002154 <HAL_GetTick>
 80065cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065d0:	f7fb fdc0 	bl	8002154 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e045      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065e2:	4b25      	ldr	r3, [pc, #148]	; (8006678 <HAL_RCC_OscConfig+0x858>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f0      	bne.n	80065d0 <HAL_RCC_OscConfig+0x7b0>
 80065ee:	e03d      	b.n	800666c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065f0:	4b21      	ldr	r3, [pc, #132]	; (8006678 <HAL_RCC_OscConfig+0x858>)
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065f6:	4b20      	ldr	r3, [pc, #128]	; (8006678 <HAL_RCC_OscConfig+0x858>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	2b01      	cmp	r3, #1
 8006602:	d031      	beq.n	8006668 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f003 0203 	and.w	r2, r3, #3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800660e:	429a      	cmp	r2, r3
 8006610:	d12a      	bne.n	8006668 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	091b      	lsrs	r3, r3, #4
 8006616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800661e:	429a      	cmp	r2, r3
 8006620:	d122      	bne.n	8006668 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800662e:	429a      	cmp	r2, r3
 8006630:	d11a      	bne.n	8006668 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	0a5b      	lsrs	r3, r3, #9
 8006636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006640:	429a      	cmp	r2, r3
 8006642:	d111      	bne.n	8006668 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	0c1b      	lsrs	r3, r3, #16
 8006648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006652:	429a      	cmp	r2, r3
 8006654:	d108      	bne.n	8006668 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	0e1b      	lsrs	r3, r3, #24
 800665a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006662:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006664:	429a      	cmp	r2, r3
 8006666:	d001      	beq.n	800666c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e000      	b.n	800666e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3730      	adds	r7, #48	; 0x30
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	58024400 	.word	0x58024400

0800667c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e19c      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006690:	4b8a      	ldr	r3, [pc, #552]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 030f 	and.w	r3, r3, #15
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d910      	bls.n	80066c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800669e:	4b87      	ldr	r3, [pc, #540]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f023 020f 	bic.w	r2, r3, #15
 80066a6:	4985      	ldr	r1, [pc, #532]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ae:	4b83      	ldr	r3, [pc, #524]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d001      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e184      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d010      	beq.n	80066ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	4b7b      	ldr	r3, [pc, #492]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066d8:	429a      	cmp	r2, r3
 80066da:	d908      	bls.n	80066ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80066dc:	4b78      	ldr	r3, [pc, #480]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	4975      	ldr	r1, [pc, #468]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0308 	and.w	r3, r3, #8
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d010      	beq.n	800671c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695a      	ldr	r2, [r3, #20]
 80066fe:	4b70      	ldr	r3, [pc, #448]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006706:	429a      	cmp	r2, r3
 8006708:	d908      	bls.n	800671c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800670a:	4b6d      	ldr	r3, [pc, #436]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	496a      	ldr	r1, [pc, #424]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006718:	4313      	orrs	r3, r2
 800671a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0310 	and.w	r3, r3, #16
 8006724:	2b00      	cmp	r3, #0
 8006726:	d010      	beq.n	800674a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	4b64      	ldr	r3, [pc, #400]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006734:	429a      	cmp	r2, r3
 8006736:	d908      	bls.n	800674a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006738:	4b61      	ldr	r3, [pc, #388]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	495e      	ldr	r1, [pc, #376]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006746:	4313      	orrs	r3, r2
 8006748:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0320 	and.w	r3, r3, #32
 8006752:	2b00      	cmp	r3, #0
 8006754:	d010      	beq.n	8006778 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69da      	ldr	r2, [r3, #28]
 800675a:	4b59      	ldr	r3, [pc, #356]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006762:	429a      	cmp	r2, r3
 8006764:	d908      	bls.n	8006778 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006766:	4b56      	ldr	r3, [pc, #344]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	4953      	ldr	r1, [pc, #332]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006774:	4313      	orrs	r3, r2
 8006776:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d010      	beq.n	80067a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	4b4d      	ldr	r3, [pc, #308]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	429a      	cmp	r2, r3
 8006792:	d908      	bls.n	80067a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006794:	4b4a      	ldr	r3, [pc, #296]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f023 020f 	bic.w	r2, r3, #15
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	4947      	ldr	r1, [pc, #284]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d055      	beq.n	800685e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80067b2:	4b43      	ldr	r3, [pc, #268]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	4940      	ldr	r1, [pc, #256]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d107      	bne.n	80067dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067cc:	4b3c      	ldr	r3, [pc, #240]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d121      	bne.n	800681c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e0f6      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d107      	bne.n	80067f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067e4:	4b36      	ldr	r3, [pc, #216]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d115      	bne.n	800681c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e0ea      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d107      	bne.n	800680c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067fc:	4b30      	ldr	r3, [pc, #192]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006804:	2b00      	cmp	r3, #0
 8006806:	d109      	bne.n	800681c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e0de      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800680c:	4b2c      	ldr	r3, [pc, #176]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e0d6      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800681c:	4b28      	ldr	r3, [pc, #160]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f023 0207 	bic.w	r2, r3, #7
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	4925      	ldr	r1, [pc, #148]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800682a:	4313      	orrs	r3, r2
 800682c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682e:	f7fb fc91 	bl	8002154 <HAL_GetTick>
 8006832:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006834:	e00a      	b.n	800684c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006836:	f7fb fc8d 	bl	8002154 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	f241 3288 	movw	r2, #5000	; 0x1388
 8006844:	4293      	cmp	r3, r2
 8006846:	d901      	bls.n	800684c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e0be      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800684c:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	429a      	cmp	r2, r3
 800685c:	d1eb      	bne.n	8006836 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d010      	beq.n	800688c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	429a      	cmp	r2, r3
 8006878:	d208      	bcs.n	800688c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800687a:	4b11      	ldr	r3, [pc, #68]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f023 020f 	bic.w	r2, r3, #15
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	490e      	ldr	r1, [pc, #56]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006888:	4313      	orrs	r3, r2
 800688a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d214      	bcs.n	80068c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689a:	4b08      	ldr	r3, [pc, #32]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f023 020f 	bic.w	r2, r3, #15
 80068a2:	4906      	ldr	r1, [pc, #24]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068aa:	4b04      	ldr	r3, [pc, #16]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d005      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e086      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
 80068bc:	52002000 	.word	0x52002000
 80068c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d010      	beq.n	80068f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	4b3f      	ldr	r3, [pc, #252]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068dc:	429a      	cmp	r2, r3
 80068de:	d208      	bcs.n	80068f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068e0:	4b3c      	ldr	r3, [pc, #240]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	4939      	ldr	r1, [pc, #228]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d010      	beq.n	8006920 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	4b34      	ldr	r3, [pc, #208]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800690a:	429a      	cmp	r2, r3
 800690c:	d208      	bcs.n	8006920 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800690e:	4b31      	ldr	r3, [pc, #196]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	492e      	ldr	r1, [pc, #184]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800691c:	4313      	orrs	r3, r2
 800691e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0310 	and.w	r3, r3, #16
 8006928:	2b00      	cmp	r3, #0
 800692a:	d010      	beq.n	800694e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699a      	ldr	r2, [r3, #24]
 8006930:	4b28      	ldr	r3, [pc, #160]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006938:	429a      	cmp	r2, r3
 800693a:	d208      	bcs.n	800694e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800693c:	4b25      	ldr	r3, [pc, #148]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	4922      	ldr	r1, [pc, #136]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800694a:	4313      	orrs	r3, r2
 800694c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	d010      	beq.n	800697c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	4b1d      	ldr	r3, [pc, #116]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006966:	429a      	cmp	r2, r3
 8006968:	d208      	bcs.n	800697c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800696a:	4b1a      	ldr	r3, [pc, #104]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	4917      	ldr	r1, [pc, #92]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006978:	4313      	orrs	r3, r2
 800697a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800697c:	f000 f834 	bl	80069e8 <HAL_RCC_GetSysClockFreq>
 8006980:	4602      	mov	r2, r0
 8006982:	4b14      	ldr	r3, [pc, #80]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	0a1b      	lsrs	r3, r3, #8
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	4912      	ldr	r1, [pc, #72]	; (80069d8 <HAL_RCC_ClockConfig+0x35c>)
 800698e:	5ccb      	ldrb	r3, [r1, r3]
 8006990:	f003 031f 	and.w	r3, r3, #31
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
 8006998:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800699a:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	4a0d      	ldr	r2, [pc, #52]	; (80069d8 <HAL_RCC_ClockConfig+0x35c>)
 80069a4:	5cd3      	ldrb	r3, [r2, r3]
 80069a6:	f003 031f 	and.w	r3, r3, #31
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
 80069b0:	4a0a      	ldr	r2, [pc, #40]	; (80069dc <HAL_RCC_ClockConfig+0x360>)
 80069b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069b4:	4a0a      	ldr	r2, [pc, #40]	; (80069e0 <HAL_RCC_ClockConfig+0x364>)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80069ba:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <HAL_RCC_ClockConfig+0x368>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fb fb7e 	bl	80020c0 <HAL_InitTick>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	58024400 	.word	0x58024400
 80069d8:	0800ee40 	.word	0x0800ee40
 80069dc:	20000004 	.word	0x20000004
 80069e0:	20000000 	.word	0x20000000
 80069e4:	20000008 	.word	0x20000008

080069e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b089      	sub	sp, #36	; 0x24
 80069ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069ee:	4bb3      	ldr	r3, [pc, #716]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069f6:	2b18      	cmp	r3, #24
 80069f8:	f200 8155 	bhi.w	8006ca6 <HAL_RCC_GetSysClockFreq+0x2be>
 80069fc:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <HAL_RCC_GetSysClockFreq+0x1c>)
 80069fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a02:	bf00      	nop
 8006a04:	08006a69 	.word	0x08006a69
 8006a08:	08006ca7 	.word	0x08006ca7
 8006a0c:	08006ca7 	.word	0x08006ca7
 8006a10:	08006ca7 	.word	0x08006ca7
 8006a14:	08006ca7 	.word	0x08006ca7
 8006a18:	08006ca7 	.word	0x08006ca7
 8006a1c:	08006ca7 	.word	0x08006ca7
 8006a20:	08006ca7 	.word	0x08006ca7
 8006a24:	08006a8f 	.word	0x08006a8f
 8006a28:	08006ca7 	.word	0x08006ca7
 8006a2c:	08006ca7 	.word	0x08006ca7
 8006a30:	08006ca7 	.word	0x08006ca7
 8006a34:	08006ca7 	.word	0x08006ca7
 8006a38:	08006ca7 	.word	0x08006ca7
 8006a3c:	08006ca7 	.word	0x08006ca7
 8006a40:	08006ca7 	.word	0x08006ca7
 8006a44:	08006a95 	.word	0x08006a95
 8006a48:	08006ca7 	.word	0x08006ca7
 8006a4c:	08006ca7 	.word	0x08006ca7
 8006a50:	08006ca7 	.word	0x08006ca7
 8006a54:	08006ca7 	.word	0x08006ca7
 8006a58:	08006ca7 	.word	0x08006ca7
 8006a5c:	08006ca7 	.word	0x08006ca7
 8006a60:	08006ca7 	.word	0x08006ca7
 8006a64:	08006a9b 	.word	0x08006a9b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a68:	4b94      	ldr	r3, [pc, #592]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d009      	beq.n	8006a88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a74:	4b91      	ldr	r3, [pc, #580]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	08db      	lsrs	r3, r3, #3
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	4a90      	ldr	r2, [pc, #576]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a80:	fa22 f303 	lsr.w	r3, r2, r3
 8006a84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006a86:	e111      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a88:	4b8d      	ldr	r3, [pc, #564]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a8a:	61bb      	str	r3, [r7, #24]
    break;
 8006a8c:	e10e      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006a8e:	4b8d      	ldr	r3, [pc, #564]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a90:	61bb      	str	r3, [r7, #24]
    break;
 8006a92:	e10b      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006a94:	4b8c      	ldr	r3, [pc, #560]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006a96:	61bb      	str	r3, [r7, #24]
    break;
 8006a98:	e108      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a9a:	4b88      	ldr	r3, [pc, #544]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006aa4:	4b85      	ldr	r3, [pc, #532]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa8:	091b      	lsrs	r3, r3, #4
 8006aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ab0:	4b82      	ldr	r3, [pc, #520]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006aba:	4b80      	ldr	r3, [pc, #512]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abe:	08db      	lsrs	r3, r3, #3
 8006ac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	fb02 f303 	mul.w	r3, r2, r3
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80e1 	beq.w	8006ca0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	f000 8083 	beq.w	8006bec <HAL_RCC_GetSysClockFreq+0x204>
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	f200 80a1 	bhi.w	8006c30 <HAL_RCC_GetSysClockFreq+0x248>
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <HAL_RCC_GetSysClockFreq+0x114>
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d056      	beq.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006afa:	e099      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006afc:	4b6f      	ldr	r3, [pc, #444]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d02d      	beq.n	8006b64 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b08:	4b6c      	ldr	r3, [pc, #432]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	08db      	lsrs	r3, r3, #3
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	4a6b      	ldr	r2, [pc, #428]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b14:	fa22 f303 	lsr.w	r3, r2, r3
 8006b18:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	ee07 3a90 	vmov	s15, r3
 8006b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b32:	4b62      	ldr	r3, [pc, #392]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3a:	ee07 3a90 	vmov	s15, r3
 8006b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b42:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b46:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006b62:	e087      	b.n	8006c74 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006cd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b76:	4b51      	ldr	r3, [pc, #324]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ba6:	e065      	b.n	8006c74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006cd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bba:	4b40      	ldr	r3, [pc, #256]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bca:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bea:	e043      	b.n	8006c74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006cd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfe:	4b2f      	ldr	r3, [pc, #188]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c2e:	e021      	b.n	8006c74 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006cd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c42:	4b1e      	ldr	r3, [pc, #120]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c72:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006c74:	4b11      	ldr	r3, [pc, #68]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c78:	0a5b      	lsrs	r3, r3, #9
 8006c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c7e:	3301      	adds	r3, #1
 8006c80:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	ee07 3a90 	vmov	s15, r3
 8006c88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c98:	ee17 3a90 	vmov	r3, s15
 8006c9c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006c9e:	e005      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61bb      	str	r3, [r7, #24]
    break;
 8006ca4:	e002      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006ca6:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ca8:	61bb      	str	r3, [r7, #24]
    break;
 8006caa:	bf00      	nop
  }

  return sysclockfreq;
 8006cac:	69bb      	ldr	r3, [r7, #24]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3724      	adds	r7, #36	; 0x24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	58024400 	.word	0x58024400
 8006cc0:	03d09000 	.word	0x03d09000
 8006cc4:	003d0900 	.word	0x003d0900
 8006cc8:	00f42400 	.word	0x00f42400
 8006ccc:	46000000 	.word	0x46000000
 8006cd0:	4c742400 	.word	0x4c742400
 8006cd4:	4a742400 	.word	0x4a742400
 8006cd8:	4b742400 	.word	0x4b742400

08006cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ce2:	f7ff fe81 	bl	80069e8 <HAL_RCC_GetSysClockFreq>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	4b10      	ldr	r3, [pc, #64]	; (8006d2c <HAL_RCC_GetHCLKFreq+0x50>)
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	0a1b      	lsrs	r3, r3, #8
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	490f      	ldr	r1, [pc, #60]	; (8006d30 <HAL_RCC_GetHCLKFreq+0x54>)
 8006cf4:	5ccb      	ldrb	r3, [r1, r3]
 8006cf6:	f003 031f 	and.w	r3, r3, #31
 8006cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d00:	4b0a      	ldr	r3, [pc, #40]	; (8006d2c <HAL_RCC_GetHCLKFreq+0x50>)
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	f003 030f 	and.w	r3, r3, #15
 8006d08:	4a09      	ldr	r2, [pc, #36]	; (8006d30 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d0a:	5cd3      	ldrb	r3, [r2, r3]
 8006d0c:	f003 031f 	and.w	r3, r3, #31
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	fa22 f303 	lsr.w	r3, r2, r3
 8006d16:	4a07      	ldr	r2, [pc, #28]	; (8006d34 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d1a:	4a07      	ldr	r2, [pc, #28]	; (8006d38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d20:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d22:	681b      	ldr	r3, [r3, #0]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	58024400 	.word	0x58024400
 8006d30:	0800ee40 	.word	0x0800ee40
 8006d34:	20000004 	.word	0x20000004
 8006d38:	20000000 	.word	0x20000000

08006d3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d44:	2300      	movs	r3, #0
 8006d46:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d48:	2300      	movs	r3, #0
 8006d4a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d03f      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d60:	d02a      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006d62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d66:	d824      	bhi.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006d68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d6c:	d018      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d72:	d81e      	bhi.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006d78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d7c:	d007      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006d7e:	e018      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d80:	4ba3      	ldr	r3, [pc, #652]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	4aa2      	ldr	r2, [pc, #648]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d8c:	e015      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3304      	adds	r3, #4
 8006d92:	2102      	movs	r1, #2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 fff9 	bl	8008d8c <RCCEx_PLL2_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d9e:	e00c      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3324      	adds	r3, #36	; 0x24
 8006da4:	2102      	movs	r1, #2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f002 f8a2 	bl	8008ef0 <RCCEx_PLL3_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006db0:	e003      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	75fb      	strb	r3, [r7, #23]
      break;
 8006db6:	e000      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d109      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006dc0:	4b93      	ldr	r3, [pc, #588]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dcc:	4990      	ldr	r1, [pc, #576]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	650b      	str	r3, [r1, #80]	; 0x50
 8006dd2:	e001      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d03d      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	d826      	bhi.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e09 	.word	0x08006e09
 8006df8:	08006e17 	.word	0x08006e17
 8006dfc:	08006e29 	.word	0x08006e29
 8006e00:	08006e41 	.word	0x08006e41
 8006e04:	08006e41 	.word	0x08006e41
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e08:	4b81      	ldr	r3, [pc, #516]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	4a80      	ldr	r2, [pc, #512]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e14:	e015      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 ffb5 	bl	8008d8c <RCCEx_PLL2_Config>
 8006e22:	4603      	mov	r3, r0
 8006e24:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e26:	e00c      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3324      	adds	r3, #36	; 0x24
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f002 f85e 	bl	8008ef0 <RCCEx_PLL3_Config>
 8006e34:	4603      	mov	r3, r0
 8006e36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e38:	e003      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e3e:	e000      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d109      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e48:	4b71      	ldr	r3, [pc, #452]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4c:	f023 0207 	bic.w	r2, r3, #7
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e54:	496e      	ldr	r1, [pc, #440]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	650b      	str	r3, [r1, #80]	; 0x50
 8006e5a:	e001      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
 8006e5e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d042      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e74:	d02b      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7a:	d825      	bhi.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006e7c:	2bc0      	cmp	r3, #192	; 0xc0
 8006e7e:	d028      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e80:	2bc0      	cmp	r3, #192	; 0xc0
 8006e82:	d821      	bhi.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006e84:	2b80      	cmp	r3, #128	; 0x80
 8006e86:	d016      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006e88:	2b80      	cmp	r3, #128	; 0x80
 8006e8a:	d81d      	bhi.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006e90:	2b40      	cmp	r3, #64	; 0x40
 8006e92:	d007      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006e94:	e018      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e96:	4b5e      	ldr	r3, [pc, #376]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9a:	4a5d      	ldr	r2, [pc, #372]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ea2:	e017      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f001 ff6e 	bl	8008d8c <RCCEx_PLL2_Config>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006eb4:	e00e      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3324      	adds	r3, #36	; 0x24
 8006eba:	2100      	movs	r1, #0
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f002 f817 	bl	8008ef0 <RCCEx_PLL3_Config>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ec6:	e005      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	75fb      	strb	r3, [r7, #23]
      break;
 8006ecc:	e002      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006ece:	bf00      	nop
 8006ed0:	e000      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d109      	bne.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006eda:	4b4d      	ldr	r3, [pc, #308]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ede:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee6:	494a      	ldr	r1, [pc, #296]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	650b      	str	r3, [r1, #80]	; 0x50
 8006eec:	e001      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d049      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f08:	d030      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006f0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f0e:	d82a      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f14:	d02c      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006f16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f1a:	d824      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f20:	d018      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f26:	d81e      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006f2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f30:	d007      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006f32:	e018      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f34:	4b36      	ldr	r3, [pc, #216]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	4a35      	ldr	r2, [pc, #212]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f40:	e017      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3304      	adds	r3, #4
 8006f46:	2100      	movs	r1, #0
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 ff1f 	bl	8008d8c <RCCEx_PLL2_Config>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f52:	e00e      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3324      	adds	r3, #36	; 0x24
 8006f58:	2100      	movs	r1, #0
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f001 ffc8 	bl	8008ef0 <RCCEx_PLL3_Config>
 8006f60:	4603      	mov	r3, r0
 8006f62:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f64:	e005      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6a:	e002      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006f6c:	bf00      	nop
 8006f6e:	e000      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f78:	4b25      	ldr	r3, [pc, #148]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f86:	4922      	ldr	r1, [pc, #136]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	658b      	str	r3, [r1, #88]	; 0x58
 8006f8c:	e001      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
 8006f90:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d04b      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fa8:	d030      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006faa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fae:	d82a      	bhi.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006fb0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006fb4:	d02e      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006fb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006fba:	d824      	bhi.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006fbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fc0:	d018      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fc6:	d81e      	bhi.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fd0:	d007      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006fd2:	e018      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd4:	4b0e      	ldr	r3, [pc, #56]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd8:	4a0d      	ldr	r2, [pc, #52]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fe0:	e019      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f001 fecf 	bl	8008d8c <RCCEx_PLL2_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006ff2:	e010      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	3324      	adds	r3, #36	; 0x24
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 ff78 	bl	8008ef0 <RCCEx_PLL3_Config>
 8007000:	4603      	mov	r3, r0
 8007002:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007004:	e007      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	75fb      	strb	r3, [r7, #23]
      break;
 800700a:	e004      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800700c:	bf00      	nop
 800700e:	e002      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007010:	58024400 	.word	0x58024400
      break;
 8007014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10a      	bne.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800701c:	4b99      	ldr	r3, [pc, #612]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800701e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007020:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800702a:	4996      	ldr	r1, [pc, #600]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800702c:	4313      	orrs	r3, r2
 800702e:	658b      	str	r3, [r1, #88]	; 0x58
 8007030:	e001      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007032:	7dfb      	ldrb	r3, [r7, #23]
 8007034:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d032      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007046:	2b30      	cmp	r3, #48	; 0x30
 8007048:	d01c      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800704a:	2b30      	cmp	r3, #48	; 0x30
 800704c:	d817      	bhi.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800704e:	2b20      	cmp	r3, #32
 8007050:	d00c      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007052:	2b20      	cmp	r3, #32
 8007054:	d813      	bhi.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d016      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800705a:	2b10      	cmp	r3, #16
 800705c:	d10f      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800705e:	4b89      	ldr	r3, [pc, #548]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	4a88      	ldr	r2, [pc, #544]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007068:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800706a:	e00e      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3304      	adds	r3, #4
 8007070:	2102      	movs	r1, #2
 8007072:	4618      	mov	r0, r3
 8007074:	f001 fe8a 	bl	8008d8c <RCCEx_PLL2_Config>
 8007078:	4603      	mov	r3, r0
 800707a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800707c:	e005      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	75fb      	strb	r3, [r7, #23]
      break;
 8007082:	e002      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007084:	bf00      	nop
 8007086:	e000      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d109      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007090:	4b7c      	ldr	r3, [pc, #496]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007094:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800709c:	4979      	ldr	r1, [pc, #484]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80070a2:	e001      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d047      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070bc:	d030      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80070be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070c2:	d82a      	bhi.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80070c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070c8:	d02c      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80070ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070ce:	d824      	bhi.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80070d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d4:	d018      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80070d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070da:	d81e      	bhi.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80070e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e4:	d007      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80070e6:	e018      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e8:	4b66      	ldr	r3, [pc, #408]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ec:	4a65      	ldr	r2, [pc, #404]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80070f4:	e017      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3304      	adds	r3, #4
 80070fa:	2100      	movs	r1, #0
 80070fc:	4618      	mov	r0, r3
 80070fe:	f001 fe45 	bl	8008d8c <RCCEx_PLL2_Config>
 8007102:	4603      	mov	r3, r0
 8007104:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007106:	e00e      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3324      	adds	r3, #36	; 0x24
 800710c:	2100      	movs	r1, #0
 800710e:	4618      	mov	r0, r3
 8007110:	f001 feee 	bl	8008ef0 <RCCEx_PLL3_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007118:	e005      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	75fb      	strb	r3, [r7, #23]
      break;
 800711e:	e002      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007120:	bf00      	nop
 8007122:	e000      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d109      	bne.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800712c:	4b55      	ldr	r3, [pc, #340]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800712e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007130:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007138:	4952      	ldr	r1, [pc, #328]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800713a:	4313      	orrs	r3, r2
 800713c:	650b      	str	r3, [r1, #80]	; 0x50
 800713e:	e001      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007140:	7dfb      	ldrb	r3, [r7, #23]
 8007142:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d049      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007158:	d02e      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800715a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800715e:	d828      	bhi.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007160:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007164:	d02a      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007166:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800716a:	d822      	bhi.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800716c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007170:	d026      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007172:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007176:	d81c      	bhi.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800717c:	d010      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800717e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007182:	d816      	bhi.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d01d      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800718c:	d111      	bne.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	3304      	adds	r3, #4
 8007192:	2101      	movs	r1, #1
 8007194:	4618      	mov	r0, r3
 8007196:	f001 fdf9 	bl	8008d8c <RCCEx_PLL2_Config>
 800719a:	4603      	mov	r3, r0
 800719c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800719e:	e012      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	3324      	adds	r3, #36	; 0x24
 80071a4:	2101      	movs	r1, #1
 80071a6:	4618      	mov	r0, r3
 80071a8:	f001 fea2 	bl	8008ef0 <RCCEx_PLL3_Config>
 80071ac:	4603      	mov	r3, r0
 80071ae:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80071b0:	e009      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	75fb      	strb	r3, [r7, #23]
      break;
 80071b6:	e006      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80071b8:	bf00      	nop
 80071ba:	e004      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80071bc:	bf00      	nop
 80071be:	e002      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80071c0:	bf00      	nop
 80071c2:	e000      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80071c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d109      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80071cc:	4b2d      	ldr	r3, [pc, #180]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d8:	492a      	ldr	r1, [pc, #168]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	650b      	str	r3, [r1, #80]	; 0x50
 80071de:	e001      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d04d      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071fa:	d02e      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80071fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007200:	d828      	bhi.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007206:	d02a      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800720c:	d822      	bhi.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800720e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007212:	d026      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007214:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007218:	d81c      	bhi.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800721a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800721e:	d010      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007224:	d816      	bhi.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d01d      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800722a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800722e:	d111      	bne.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3304      	adds	r3, #4
 8007234:	2101      	movs	r1, #1
 8007236:	4618      	mov	r0, r3
 8007238:	f001 fda8 	bl	8008d8c <RCCEx_PLL2_Config>
 800723c:	4603      	mov	r3, r0
 800723e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007240:	e012      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3324      	adds	r3, #36	; 0x24
 8007246:	2101      	movs	r1, #1
 8007248:	4618      	mov	r0, r3
 800724a:	f001 fe51 	bl	8008ef0 <RCCEx_PLL3_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007252:	e009      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	75fb      	strb	r3, [r7, #23]
      break;
 8007258:	e006      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800725a:	bf00      	nop
 800725c:	e004      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800725e:	bf00      	nop
 8007260:	e002      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007262:	bf00      	nop
 8007264:	e000      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10c      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800726e:	4b05      	ldr	r3, [pc, #20]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007272:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800727c:	4901      	ldr	r1, [pc, #4]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800727e:	4313      	orrs	r3, r2
 8007280:	658b      	str	r3, [r1, #88]	; 0x58
 8007282:	e003      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d02f      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800729c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a0:	d00e      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80072a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a6:	d814      	bhi.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d015      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80072ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072b0:	d10f      	bne.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072b2:	4baf      	ldr	r3, [pc, #700]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b6:	4aae      	ldr	r2, [pc, #696]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80072be:	e00c      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3304      	adds	r3, #4
 80072c4:	2101      	movs	r1, #1
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 fd60 	bl	8008d8c <RCCEx_PLL2_Config>
 80072cc:	4603      	mov	r3, r0
 80072ce:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80072d0:	e003      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	75fb      	strb	r3, [r7, #23]
      break;
 80072d6:	e000      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80072d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d109      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80072e0:	4ba3      	ldr	r3, [pc, #652]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ec:	49a0      	ldr	r1, [pc, #640]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	650b      	str	r3, [r1, #80]	; 0x50
 80072f2:	e001      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d032      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007308:	2b03      	cmp	r3, #3
 800730a:	d81b      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	0800734b 	.word	0x0800734b
 8007318:	08007325 	.word	0x08007325
 800731c:	08007333 	.word	0x08007333
 8007320:	0800734b 	.word	0x0800734b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007324:	4b92      	ldr	r3, [pc, #584]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	4a91      	ldr	r2, [pc, #580]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800732a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800732e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007330:	e00c      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3304      	adds	r3, #4
 8007336:	2102      	movs	r1, #2
 8007338:	4618      	mov	r0, r3
 800733a:	f001 fd27 	bl	8008d8c <RCCEx_PLL2_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007342:	e003      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	75fb      	strb	r3, [r7, #23]
      break;
 8007348:	e000      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800734a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800734c:	7dfb      	ldrb	r3, [r7, #23]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007352:	4b87      	ldr	r3, [pc, #540]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007356:	f023 0203 	bic.w	r2, r3, #3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735e:	4984      	ldr	r1, [pc, #528]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007360:	4313      	orrs	r3, r2
 8007362:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007364:	e001      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 8086 	beq.w	8007484 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007378:	4b7e      	ldr	r3, [pc, #504]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a7d      	ldr	r2, [pc, #500]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800737e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007382:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007384:	f7fa fee6 	bl	8002154 <HAL_GetTick>
 8007388:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800738a:	e009      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800738c:	f7fa fee2 	bl	8002154 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b64      	cmp	r3, #100	; 0x64
 8007398:	d902      	bls.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	75fb      	strb	r3, [r7, #23]
        break;
 800739e:	e005      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073a0:	4b74      	ldr	r3, [pc, #464]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0ef      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d166      	bne.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80073b2:	4b6f      	ldr	r3, [pc, #444]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073bc:	4053      	eors	r3, r2
 80073be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d013      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073c6:	4b6a      	ldr	r3, [pc, #424]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ce:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073d0:	4b67      	ldr	r3, [pc, #412]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d4:	4a66      	ldr	r2, [pc, #408]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073da:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073dc:	4b64      	ldr	r3, [pc, #400]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e0:	4a63      	ldr	r2, [pc, #396]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073e6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80073e8:	4a61      	ldr	r2, [pc, #388]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f8:	d115      	bne.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073fa:	f7fa feab 	bl	8002154 <HAL_GetTick>
 80073fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007400:	e00b      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007402:	f7fa fea7 	bl	8002154 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007410:	4293      	cmp	r3, r2
 8007412:	d902      	bls.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	75fb      	strb	r3, [r7, #23]
            break;
 8007418:	e005      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800741a:	4b55      	ldr	r3, [pc, #340]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800741c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0ed      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d126      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800743a:	d10d      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800743c:	4b4c      	ldr	r3, [pc, #304]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800744a:	0919      	lsrs	r1, r3, #4
 800744c:	4b4a      	ldr	r3, [pc, #296]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800744e:	400b      	ands	r3, r1
 8007450:	4947      	ldr	r1, [pc, #284]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007452:	4313      	orrs	r3, r2
 8007454:	610b      	str	r3, [r1, #16]
 8007456:	e005      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007458:	4b45      	ldr	r3, [pc, #276]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	4a44      	ldr	r2, [pc, #272]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800745e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007462:	6113      	str	r3, [r2, #16]
 8007464:	4b42      	ldr	r3, [pc, #264]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800746e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007472:	493f      	ldr	r1, [pc, #252]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007474:	4313      	orrs	r3, r2
 8007476:	670b      	str	r3, [r1, #112]	; 0x70
 8007478:	e004      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800747a:	7dfb      	ldrb	r3, [r7, #23]
 800747c:	75bb      	strb	r3, [r7, #22]
 800747e:	e001      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007480:	7dfb      	ldrb	r3, [r7, #23]
 8007482:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 8085 	beq.w	800759c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007496:	2b28      	cmp	r3, #40	; 0x28
 8007498:	d866      	bhi.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800749a:	a201      	add	r2, pc, #4	; (adr r2, 80074a0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	0800757d 	.word	0x0800757d
 80074a4:	08007569 	.word	0x08007569
 80074a8:	08007569 	.word	0x08007569
 80074ac:	08007569 	.word	0x08007569
 80074b0:	08007569 	.word	0x08007569
 80074b4:	08007569 	.word	0x08007569
 80074b8:	08007569 	.word	0x08007569
 80074bc:	08007569 	.word	0x08007569
 80074c0:	08007545 	.word	0x08007545
 80074c4:	08007569 	.word	0x08007569
 80074c8:	08007569 	.word	0x08007569
 80074cc:	08007569 	.word	0x08007569
 80074d0:	08007569 	.word	0x08007569
 80074d4:	08007569 	.word	0x08007569
 80074d8:	08007569 	.word	0x08007569
 80074dc:	08007569 	.word	0x08007569
 80074e0:	08007557 	.word	0x08007557
 80074e4:	08007569 	.word	0x08007569
 80074e8:	08007569 	.word	0x08007569
 80074ec:	08007569 	.word	0x08007569
 80074f0:	08007569 	.word	0x08007569
 80074f4:	08007569 	.word	0x08007569
 80074f8:	08007569 	.word	0x08007569
 80074fc:	08007569 	.word	0x08007569
 8007500:	0800757d 	.word	0x0800757d
 8007504:	08007569 	.word	0x08007569
 8007508:	08007569 	.word	0x08007569
 800750c:	08007569 	.word	0x08007569
 8007510:	08007569 	.word	0x08007569
 8007514:	08007569 	.word	0x08007569
 8007518:	08007569 	.word	0x08007569
 800751c:	08007569 	.word	0x08007569
 8007520:	0800757d 	.word	0x0800757d
 8007524:	08007569 	.word	0x08007569
 8007528:	08007569 	.word	0x08007569
 800752c:	08007569 	.word	0x08007569
 8007530:	08007569 	.word	0x08007569
 8007534:	08007569 	.word	0x08007569
 8007538:	08007569 	.word	0x08007569
 800753c:	08007569 	.word	0x08007569
 8007540:	0800757d 	.word	0x0800757d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3304      	adds	r3, #4
 8007548:	2101      	movs	r1, #1
 800754a:	4618      	mov	r0, r3
 800754c:	f001 fc1e 	bl	8008d8c <RCCEx_PLL2_Config>
 8007550:	4603      	mov	r3, r0
 8007552:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007554:	e013      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3324      	adds	r3, #36	; 0x24
 800755a:	2101      	movs	r1, #1
 800755c:	4618      	mov	r0, r3
 800755e:	f001 fcc7 	bl	8008ef0 <RCCEx_PLL3_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007566:	e00a      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	75fb      	strb	r3, [r7, #23]
      break;
 800756c:	e007      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800756e:	bf00      	nop
 8007570:	58024400 	.word	0x58024400
 8007574:	58024800 	.word	0x58024800
 8007578:	00ffffcf 	.word	0x00ffffcf
      break;
 800757c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800757e:	7dfb      	ldrb	r3, [r7, #23]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d109      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007584:	4b96      	ldr	r3, [pc, #600]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007588:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007590:	4993      	ldr	r1, [pc, #588]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007592:	4313      	orrs	r3, r2
 8007594:	654b      	str	r3, [r1, #84]	; 0x54
 8007596:	e001      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d038      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ac:	2b05      	cmp	r3, #5
 80075ae:	d821      	bhi.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80075b0:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80075b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b6:	bf00      	nop
 80075b8:	080075fb 	.word	0x080075fb
 80075bc:	080075d1 	.word	0x080075d1
 80075c0:	080075e3 	.word	0x080075e3
 80075c4:	080075fb 	.word	0x080075fb
 80075c8:	080075fb 	.word	0x080075fb
 80075cc:	080075fb 	.word	0x080075fb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3304      	adds	r3, #4
 80075d4:	2101      	movs	r1, #1
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 fbd8 	bl	8008d8c <RCCEx_PLL2_Config>
 80075dc:	4603      	mov	r3, r0
 80075de:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80075e0:	e00c      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3324      	adds	r3, #36	; 0x24
 80075e6:	2101      	movs	r1, #1
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 fc81 	bl	8008ef0 <RCCEx_PLL3_Config>
 80075ee:	4603      	mov	r3, r0
 80075f0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80075f2:	e003      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	75fb      	strb	r3, [r7, #23]
      break;
 80075f8:	e000      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80075fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d109      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007602:	4b77      	ldr	r3, [pc, #476]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007606:	f023 0207 	bic.w	r2, r3, #7
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760e:	4974      	ldr	r1, [pc, #464]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007610:	4313      	orrs	r3, r2
 8007612:	654b      	str	r3, [r1, #84]	; 0x54
 8007614:	e001      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0304 	and.w	r3, r3, #4
 8007622:	2b00      	cmp	r3, #0
 8007624:	d03a      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800762c:	2b05      	cmp	r3, #5
 800762e:	d821      	bhi.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007630:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007636:	bf00      	nop
 8007638:	0800767b 	.word	0x0800767b
 800763c:	08007651 	.word	0x08007651
 8007640:	08007663 	.word	0x08007663
 8007644:	0800767b 	.word	0x0800767b
 8007648:	0800767b 	.word	0x0800767b
 800764c:	0800767b 	.word	0x0800767b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3304      	adds	r3, #4
 8007654:	2101      	movs	r1, #1
 8007656:	4618      	mov	r0, r3
 8007658:	f001 fb98 	bl	8008d8c <RCCEx_PLL2_Config>
 800765c:	4603      	mov	r3, r0
 800765e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007660:	e00c      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3324      	adds	r3, #36	; 0x24
 8007666:	2101      	movs	r1, #1
 8007668:	4618      	mov	r0, r3
 800766a:	f001 fc41 	bl	8008ef0 <RCCEx_PLL3_Config>
 800766e:	4603      	mov	r3, r0
 8007670:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007672:	e003      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	75fb      	strb	r3, [r7, #23]
      break;
 8007678:	e000      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800767a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10a      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007682:	4b57      	ldr	r3, [pc, #348]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007686:	f023 0207 	bic.w	r2, r3, #7
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007690:	4953      	ldr	r1, [pc, #332]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007692:	4313      	orrs	r3, r2
 8007694:	658b      	str	r3, [r1, #88]	; 0x58
 8007696:	e001      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007698:	7dfb      	ldrb	r3, [r7, #23]
 800769a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0320 	and.w	r3, r3, #32
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d04b      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076b2:	d02e      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80076b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076b8:	d828      	bhi.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80076ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076be:	d02a      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80076c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c4:	d822      	bhi.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80076c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076ca:	d026      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80076cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076d0:	d81c      	bhi.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80076d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076d6:	d010      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80076d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076dc:	d816      	bhi.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d01d      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80076e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076e6:	d111      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3304      	adds	r3, #4
 80076ec:	2100      	movs	r1, #0
 80076ee:	4618      	mov	r0, r3
 80076f0:	f001 fb4c 	bl	8008d8c <RCCEx_PLL2_Config>
 80076f4:	4603      	mov	r3, r0
 80076f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80076f8:	e012      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3324      	adds	r3, #36	; 0x24
 80076fe:	2102      	movs	r1, #2
 8007700:	4618      	mov	r0, r3
 8007702:	f001 fbf5 	bl	8008ef0 <RCCEx_PLL3_Config>
 8007706:	4603      	mov	r3, r0
 8007708:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800770a:	e009      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	75fb      	strb	r3, [r7, #23]
      break;
 8007710:	e006      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007712:	bf00      	nop
 8007714:	e004      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007716:	bf00      	nop
 8007718:	e002      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800771a:	bf00      	nop
 800771c:	e000      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800771e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007720:	7dfb      	ldrb	r3, [r7, #23]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10a      	bne.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007726:	4b2e      	ldr	r3, [pc, #184]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007734:	492a      	ldr	r1, [pc, #168]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007736:	4313      	orrs	r3, r2
 8007738:	654b      	str	r3, [r1, #84]	; 0x54
 800773a:	e001      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	d04d      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007752:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007756:	d02e      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007758:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800775c:	d828      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800775e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007762:	d02a      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007768:	d822      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800776a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800776e:	d026      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007770:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007774:	d81c      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800777a:	d010      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800777c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007780:	d816      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d01d      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778a:	d111      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3304      	adds	r3, #4
 8007790:	2100      	movs	r1, #0
 8007792:	4618      	mov	r0, r3
 8007794:	f001 fafa 	bl	8008d8c <RCCEx_PLL2_Config>
 8007798:	4603      	mov	r3, r0
 800779a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800779c:	e012      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3324      	adds	r3, #36	; 0x24
 80077a2:	2102      	movs	r1, #2
 80077a4:	4618      	mov	r0, r3
 80077a6:	f001 fba3 	bl	8008ef0 <RCCEx_PLL3_Config>
 80077aa:	4603      	mov	r3, r0
 80077ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80077ae:	e009      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	75fb      	strb	r3, [r7, #23]
      break;
 80077b4:	e006      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80077b6:	bf00      	nop
 80077b8:	e004      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80077ba:	bf00      	nop
 80077bc:	e002      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80077be:	bf00      	nop
 80077c0:	e000      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80077c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077c4:	7dfb      	ldrb	r3, [r7, #23]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10c      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077ca:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077d8:	4901      	ldr	r1, [pc, #4]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	658b      	str	r3, [r1, #88]	; 0x58
 80077de:	e003      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80077e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e4:	7dfb      	ldrb	r3, [r7, #23]
 80077e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d04b      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077fe:	d02e      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007800:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007804:	d828      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800780a:	d02a      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800780c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007810:	d822      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007812:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007816:	d026      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007818:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800781c:	d81c      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800781e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007822:	d010      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007828:	d816      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d01d      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800782e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007832:	d111      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3304      	adds	r3, #4
 8007838:	2100      	movs	r1, #0
 800783a:	4618      	mov	r0, r3
 800783c:	f001 faa6 	bl	8008d8c <RCCEx_PLL2_Config>
 8007840:	4603      	mov	r3, r0
 8007842:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007844:	e012      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	3324      	adds	r3, #36	; 0x24
 800784a:	2102      	movs	r1, #2
 800784c:	4618      	mov	r0, r3
 800784e:	f001 fb4f 	bl	8008ef0 <RCCEx_PLL3_Config>
 8007852:	4603      	mov	r3, r0
 8007854:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007856:	e009      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	75fb      	strb	r3, [r7, #23]
      break;
 800785c:	e006      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800785e:	bf00      	nop
 8007860:	e004      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007862:	bf00      	nop
 8007864:	e002      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007866:	bf00      	nop
 8007868:	e000      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800786a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007872:	4b9d      	ldr	r3, [pc, #628]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007880:	4999      	ldr	r1, [pc, #612]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007882:	4313      	orrs	r3, r2
 8007884:	658b      	str	r3, [r1, #88]	; 0x58
 8007886:	e001      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007888:	7dfb      	ldrb	r3, [r7, #23]
 800788a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0308 	and.w	r3, r3, #8
 8007894:	2b00      	cmp	r3, #0
 8007896:	d01a      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800789e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a2:	d10a      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3324      	adds	r3, #36	; 0x24
 80078a8:	2102      	movs	r1, #2
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 fb20 	bl	8008ef0 <RCCEx_PLL3_Config>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80078ba:	4b8b      	ldr	r3, [pc, #556]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078c8:	4987      	ldr	r1, [pc, #540]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d01a      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e4:	d10a      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3324      	adds	r3, #36	; 0x24
 80078ea:	2102      	movs	r1, #2
 80078ec:	4618      	mov	r0, r3
 80078ee:	f001 faff 	bl	8008ef0 <RCCEx_PLL3_Config>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078fc:	4b7a      	ldr	r3, [pc, #488]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800790a:	4977      	ldr	r1, [pc, #476]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800790c:	4313      	orrs	r3, r2
 800790e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d034      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007926:	d01d      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800792c:	d817      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007936:	d009      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007938:	e011      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3304      	adds	r3, #4
 800793e:	2100      	movs	r1, #0
 8007940:	4618      	mov	r0, r3
 8007942:	f001 fa23 	bl	8008d8c <RCCEx_PLL2_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800794a:	e00c      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3324      	adds	r3, #36	; 0x24
 8007950:	2102      	movs	r1, #2
 8007952:	4618      	mov	r0, r3
 8007954:	f001 facc 	bl	8008ef0 <RCCEx_PLL3_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800795c:	e003      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	75fb      	strb	r3, [r7, #23]
      break;
 8007962:	e000      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800796c:	4b5e      	ldr	r3, [pc, #376]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800796e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007970:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800797a:	495b      	ldr	r1, [pc, #364]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800797c:	4313      	orrs	r3, r2
 800797e:	658b      	str	r3, [r1, #88]	; 0x58
 8007980:	e001      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d033      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007998:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800799c:	d01c      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800799e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079a2:	d816      	bhi.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80079a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079a8:	d003      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80079aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079ae:	d007      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80079b0:	e00f      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b2:	4b4d      	ldr	r3, [pc, #308]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b6:	4a4c      	ldr	r2, [pc, #304]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80079be:	e00c      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3324      	adds	r3, #36	; 0x24
 80079c4:	2101      	movs	r1, #1
 80079c6:	4618      	mov	r0, r3
 80079c8:	f001 fa92 	bl	8008ef0 <RCCEx_PLL3_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80079d0:	e003      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	75fb      	strb	r3, [r7, #23]
      break;
 80079d6:	e000      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80079d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079da:	7dfb      	ldrb	r3, [r7, #23]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079e0:	4b41      	ldr	r3, [pc, #260]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ee:	493e      	ldr	r1, [pc, #248]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	654b      	str	r3, [r1, #84]	; 0x54
 80079f4:	e001      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d029      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a12:	d007      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007a14:	e00f      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a16:	4b34      	ldr	r3, [pc, #208]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1a:	4a33      	ldr	r2, [pc, #204]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a22:	e00b      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3304      	adds	r3, #4
 8007a28:	2102      	movs	r1, #2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f001 f9ae 	bl	8008d8c <RCCEx_PLL2_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a34:	e002      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	75fb      	strb	r3, [r7, #23]
      break;
 8007a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a3c:	7dfb      	ldrb	r3, [r7, #23]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d109      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a42:	4b29      	ldr	r3, [pc, #164]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a4e:	4926      	ldr	r1, [pc, #152]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a50:	4313      	orrs	r3, r2
 8007a52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a54:	e001      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00a      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	3324      	adds	r3, #36	; 0x24
 8007a6a:	2102      	movs	r1, #2
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f001 fa3f 	bl	8008ef0 <RCCEx_PLL3_Config>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d033      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a90:	d017      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a96:	d811      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a9c:	d013      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa2:	d80b      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d010      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aac:	d106      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aae:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	4a0d      	ldr	r2, [pc, #52]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007aba:	e007      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac0:	e004      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007ac2:	bf00      	nop
 8007ac4:	e002      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007ac6:	bf00      	nop
 8007ac8:	e000      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10c      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ad2:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ade:	4902      	ldr	r1, [pc, #8]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	654b      	str	r3, [r1, #84]	; 0x54
 8007ae4:	e004      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007ae6:	bf00      	nop
 8007ae8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d008      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007afc:	4b31      	ldr	r3, [pc, #196]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b08:	492e      	ldr	r1, [pc, #184]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d009      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b1a:	4b2a      	ldr	r3, [pc, #168]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b28:	4926      	ldr	r1, [pc, #152]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d008      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b3a:	4b22      	ldr	r3, [pc, #136]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b46:	491f      	ldr	r1, [pc, #124]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00d      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b58:	4b1a      	ldr	r3, [pc, #104]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	4a19      	ldr	r2, [pc, #100]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b62:	6113      	str	r3, [r2, #16]
 8007b64:	4b17      	ldr	r3, [pc, #92]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007b6e:	4915      	ldr	r1, [pc, #84]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	da08      	bge.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b7c:	4b11      	ldr	r3, [pc, #68]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b88:	490e      	ldr	r1, [pc, #56]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b9a:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba8:	4906      	ldr	r1, [pc, #24]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007bae:	7dbb      	ldrb	r3, [r7, #22]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	e000      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	58024400 	.word	0x58024400

08007bc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b090      	sub	sp, #64	; 0x40
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bd6:	f040 8095 	bne.w	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007bda:	4b97      	ldr	r3, [pc, #604]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	f200 8088 	bhi.w	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007bec:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf2:	bf00      	nop
 8007bf4:	08007c09 	.word	0x08007c09
 8007bf8:	08007c31 	.word	0x08007c31
 8007bfc:	08007c59 	.word	0x08007c59
 8007c00:	08007cf5 	.word	0x08007cf5
 8007c04:	08007c81 	.word	0x08007c81
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c08:	4b8b      	ldr	r3, [pc, #556]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c14:	d108      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 ff64 	bl	8008ae8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c24:	f000 bc94 	b.w	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c2c:	f000 bc90 	b.w	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c30:	4b81      	ldr	r3, [pc, #516]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c3c:	d108      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c3e:	f107 0318 	add.w	r3, r7, #24
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fca8 	bl	8008598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c4c:	f000 bc80 	b.w	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c54:	f000 bc7c 	b.w	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c58:	4b77      	ldr	r3, [pc, #476]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c64:	d108      	bne.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c66:	f107 030c 	add.w	r3, r7, #12
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fde8 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c74:	f000 bc6c 	b.w	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c7c:	f000 bc68 	b.w	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c80:	4b6d      	ldr	r3, [pc, #436]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c88:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c8a:	4b6b      	ldr	r3, [pc, #428]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0304 	and.w	r3, r3, #4
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d10c      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d109      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c9c:	4b66      	ldr	r3, [pc, #408]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	08db      	lsrs	r3, r3, #3
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	4a65      	ldr	r2, [pc, #404]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cae:	e01f      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cb0:	4b61      	ldr	r3, [pc, #388]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cbc:	d106      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cc4:	d102      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007cc6:	4b5e      	ldr	r3, [pc, #376]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cca:	e011      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ccc:	4b5a      	ldr	r3, [pc, #360]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd8:	d106      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ce0:	d102      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007ce2:	4b58      	ldr	r3, [pc, #352]	; (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ce6:	e003      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007cec:	f000 bc30 	b.w	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007cf0:	f000 bc2e 	b.w	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007cf4:	4b54      	ldr	r3, [pc, #336]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cf8:	f000 bc2a 	b.w	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d00:	f000 bc26 	b.w	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d0a:	f040 809f 	bne.w	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007d0e:	4b4a      	ldr	r3, [pc, #296]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d12:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007d16:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d1e:	d04d      	beq.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d26:	f200 8084 	bhi.w	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	2bc0      	cmp	r3, #192	; 0xc0
 8007d2e:	d07d      	beq.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d32:	2bc0      	cmp	r3, #192	; 0xc0
 8007d34:	d87d      	bhi.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	2b80      	cmp	r3, #128	; 0x80
 8007d3a:	d02d      	beq.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	2b80      	cmp	r3, #128	; 0x80
 8007d40:	d877      	bhi.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	2b40      	cmp	r3, #64	; 0x40
 8007d4c:	d012      	beq.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8007d4e:	e070      	b.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d50:	4b39      	ldr	r3, [pc, #228]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d5c:	d107      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 fec0 	bl	8008ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d6c:	e3f0      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d72:	e3ed      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d74:	4b30      	ldr	r3, [pc, #192]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d80:	d107      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d82:	f107 0318 	add.w	r3, r7, #24
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fc06 	bl	8008598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d90:	e3de      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d96:	e3db      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d98:	4b27      	ldr	r3, [pc, #156]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007da4:	d107      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007da6:	f107 030c 	add.w	r3, r7, #12
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 fd48 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007db4:	e3cc      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dba:	e3c9      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007dbc:	4b1e      	ldr	r3, [pc, #120]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dc6:	4b1c      	ldr	r3, [pc, #112]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0304 	and.w	r3, r3, #4
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d10c      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d109      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dd8:	4b17      	ldr	r3, [pc, #92]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	08db      	lsrs	r3, r3, #3
 8007dde:	f003 0303 	and.w	r3, r3, #3
 8007de2:	4a16      	ldr	r2, [pc, #88]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007de4:	fa22 f303 	lsr.w	r3, r2, r3
 8007de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dea:	e01e      	b.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dec:	4b12      	ldr	r3, [pc, #72]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007df8:	d106      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e00:	d102      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007e02:	4b0f      	ldr	r3, [pc, #60]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e06:	e010      	b.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e08:	4b0b      	ldr	r3, [pc, #44]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e14:	d106      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e1c:	d102      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007e1e:	4b09      	ldr	r3, [pc, #36]	; (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e22:	e002      	b.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007e24:	2300      	movs	r3, #0
 8007e26:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007e28:	e392      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007e2a:	e391      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e2c:	4b06      	ldr	r3, [pc, #24]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e30:	e38e      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e36:	e38b      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007e38:	58024400 	.word	0x58024400
 8007e3c:	03d09000 	.word	0x03d09000
 8007e40:	003d0900 	.word	0x003d0900
 8007e44:	00f42400 	.word	0x00f42400
 8007e48:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e52:	f040 809c 	bne.w	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007e56:	4b9d      	ldr	r3, [pc, #628]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007e5e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e66:	d054      	beq.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8007e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e6e:	f200 808b 	bhi.w	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e78:	f000 8083 	beq.w	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e82:	f200 8081 	bhi.w	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e8c:	d02f      	beq.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e94:	d878      	bhi.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d004      	beq.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ea2:	d012      	beq.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007ea4:	e070      	b.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ea6:	4b89      	ldr	r3, [pc, #548]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007eb2:	d107      	bne.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 fe15 	bl	8008ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ec2:	e345      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ec8:	e342      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007eca:	4b80      	ldr	r3, [pc, #512]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ed6:	d107      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ed8:	f107 0318 	add.w	r3, r7, #24
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 fb5b 	bl	8008598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ee6:	e333      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eec:	e330      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007eee:	4b77      	ldr	r3, [pc, #476]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007efa:	d107      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007efc:	f107 030c 	add.w	r3, r7, #12
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 fc9d 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f0a:	e321      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f10:	e31e      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f12:	4b6e      	ldr	r3, [pc, #440]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f1a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f1c:	4b6b      	ldr	r3, [pc, #428]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0304 	and.w	r3, r3, #4
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d10c      	bne.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8007f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d109      	bne.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f2e:	4b67      	ldr	r3, [pc, #412]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	08db      	lsrs	r3, r3, #3
 8007f34:	f003 0303 	and.w	r3, r3, #3
 8007f38:	4a65      	ldr	r2, [pc, #404]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f40:	e01e      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f42:	4b62      	ldr	r3, [pc, #392]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f4e:	d106      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f56:	d102      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007f58:	4b5e      	ldr	r3, [pc, #376]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f5c:	e010      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f5e:	4b5b      	ldr	r3, [pc, #364]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f6a:	d106      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f72:	d102      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007f74:	4b58      	ldr	r3, [pc, #352]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f78:	e002      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007f7e:	e2e7      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007f80:	e2e6      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f82:	4b56      	ldr	r3, [pc, #344]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f86:	e2e3      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f8c:	e2e0      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f94:	f040 80a7 	bne.w	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007f98:	4b4c      	ldr	r3, [pc, #304]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007fa0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fa8:	d055      	beq.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fb0:	f200 8096 	bhi.w	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fba:	f000 8084 	beq.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fc4:	f200 808c 	bhi.w	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fce:	d030      	beq.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fd6:	f200 8083 	bhi.w	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d004      	beq.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fe6:	d012      	beq.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007fe8:	e07a      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fea:	4b38      	ldr	r3, [pc, #224]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ff6:	d107      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fd73 	bl	8008ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008004:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008006:	e2a3      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008008:	2300      	movs	r3, #0
 800800a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800800c:	e2a0      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800800e:	4b2f      	ldr	r3, [pc, #188]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800801a:	d107      	bne.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800801c:	f107 0318 	add.w	r3, r7, #24
 8008020:	4618      	mov	r0, r3
 8008022:	f000 fab9 	bl	8008598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800802a:	e291      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008030:	e28e      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008032:	4b26      	ldr	r3, [pc, #152]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800803a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800803e:	d107      	bne.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008040:	f107 030c 	add.w	r3, r7, #12
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fbfb 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800804e:	e27f      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008050:	2300      	movs	r3, #0
 8008052:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008054:	e27c      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008056:	4b1d      	ldr	r3, [pc, #116]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800805e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008060:	4b1a      	ldr	r3, [pc, #104]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0304 	and.w	r3, r3, #4
 8008068:	2b04      	cmp	r3, #4
 800806a:	d10c      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800806c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806e:	2b00      	cmp	r3, #0
 8008070:	d109      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008072:	4b16      	ldr	r3, [pc, #88]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	08db      	lsrs	r3, r3, #3
 8008078:	f003 0303 	and.w	r3, r3, #3
 800807c:	4a14      	ldr	r2, [pc, #80]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800807e:	fa22 f303 	lsr.w	r3, r2, r3
 8008082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008084:	e01e      	b.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008086:	4b11      	ldr	r3, [pc, #68]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800808e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008092:	d106      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800809a:	d102      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800809c:	4b0d      	ldr	r3, [pc, #52]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800809e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080a0:	e010      	b.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080a2:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080ae:	d106      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80080b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080b6:	d102      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80080b8:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80080ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080bc:	e002      	b.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80080c2:	e245      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80080c4:	e244      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80080c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ca:	e241      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80080cc:	58024400 	.word	0x58024400
 80080d0:	03d09000 	.word	0x03d09000
 80080d4:	003d0900 	.word	0x003d0900
 80080d8:	00f42400 	.word	0x00f42400
 80080dc:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e4:	e234      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ec:	f040 809c 	bne.w	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80080f0:	4b9b      	ldr	r3, [pc, #620]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80080f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80080f8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008100:	d054      	beq.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8008102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008108:	f200 808b 	bhi.w	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800810c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008112:	f000 8083 	beq.w	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008118:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800811c:	f200 8081 	bhi.w	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008126:	d02f      	beq.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800812e:	d878      	bhi.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	2b00      	cmp	r3, #0
 8008134:	d004      	beq.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8008136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813c:	d012      	beq.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800813e:	e070      	b.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008140:	4b87      	ldr	r3, [pc, #540]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800814c:	d107      	bne.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800814e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fcc8 	bl	8008ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800815c:	e1f8      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008162:	e1f5      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008164:	4b7e      	ldr	r3, [pc, #504]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800816c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008170:	d107      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008172:	f107 0318 	add.w	r3, r7, #24
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fa0e 	bl	8008598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008180:	e1e6      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008182:	2300      	movs	r3, #0
 8008184:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008186:	e1e3      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008188:	4b75      	ldr	r3, [pc, #468]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008194:	d107      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008196:	f107 030c 	add.w	r3, r7, #12
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fb50 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081a4:	e1d4      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081aa:	e1d1      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80081ac:	4b6c      	ldr	r3, [pc, #432]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80081ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081b4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081b6:	4b6a      	ldr	r3, [pc, #424]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0304 	and.w	r3, r3, #4
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d10c      	bne.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80081c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d109      	bne.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081c8:	4b65      	ldr	r3, [pc, #404]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	08db      	lsrs	r3, r3, #3
 80081ce:	f003 0303 	and.w	r3, r3, #3
 80081d2:	4a64      	ldr	r2, [pc, #400]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80081d4:	fa22 f303 	lsr.w	r3, r2, r3
 80081d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081da:	e01e      	b.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081dc:	4b60      	ldr	r3, [pc, #384]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081e8:	d106      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80081ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081f0:	d102      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80081f2:	4b5d      	ldr	r3, [pc, #372]	; (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80081f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081f6:	e010      	b.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081f8:	4b59      	ldr	r3, [pc, #356]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008204:	d106      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800820c:	d102      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800820e:	4b57      	ldr	r3, [pc, #348]	; (800836c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008212:	e002      	b.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008218:	e19a      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800821a:	e199      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800821c:	4b54      	ldr	r3, [pc, #336]	; (8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800821e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008220:	e196      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008222:	2300      	movs	r3, #0
 8008224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008226:	e193      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800822e:	d173      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008230:	4b4b      	ldr	r3, [pc, #300]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008238:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008240:	d02f      	beq.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8008242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008248:	d863      	bhi.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	2b00      	cmp	r3, #0
 800824e:	d004      	beq.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8008250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008256:	d012      	beq.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8008258:	e05b      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800825a:	4b41      	ldr	r3, [pc, #260]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008266:	d107      	bne.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008268:	f107 0318 	add.w	r3, r7, #24
 800826c:	4618      	mov	r0, r3
 800826e:	f000 f993 	bl	8008598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008276:	e16b      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800827c:	e168      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800827e:	4b38      	ldr	r3, [pc, #224]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800828a:	d107      	bne.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800828c:	f107 030c 	add.w	r3, r7, #12
 8008290:	4618      	mov	r0, r3
 8008292:	f000 fad5 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800829a:	e159      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800829c:	2300      	movs	r3, #0
 800829e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082a0:	e156      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80082a2:	4b2f      	ldr	r3, [pc, #188]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80082a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082aa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082ac:	4b2c      	ldr	r3, [pc, #176]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0304 	and.w	r3, r3, #4
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d10c      	bne.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80082b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d109      	bne.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082be:	4b28      	ldr	r3, [pc, #160]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	08db      	lsrs	r3, r3, #3
 80082c4:	f003 0303 	and.w	r3, r3, #3
 80082c8:	4a26      	ldr	r2, [pc, #152]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80082ca:	fa22 f303 	lsr.w	r3, r2, r3
 80082ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d0:	e01e      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082d2:	4b23      	ldr	r3, [pc, #140]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082de:	d106      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80082e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082e6:	d102      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80082e8:	4b1f      	ldr	r3, [pc, #124]	; (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80082ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082ec:	e010      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082ee:	4b1c      	ldr	r3, [pc, #112]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082fa:	d106      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80082fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008302:	d102      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008304:	4b19      	ldr	r3, [pc, #100]	; (800836c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008308:	e002      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800830a:	2300      	movs	r3, #0
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800830e:	e11f      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008310:	e11e      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008316:	e11b      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800831e:	d13e      	bne.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008320:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008328:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800832a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832c:	2b00      	cmp	r3, #0
 800832e:	d004      	beq.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8008330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008336:	d01d      	beq.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008338:	e02e      	b.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800833a:	4b09      	ldr	r3, [pc, #36]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008342:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008346:	d107      	bne.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800834c:	4618      	mov	r0, r3
 800834e:	f000 fbcb 	bl	8008ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008356:	e0fb      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800835c:	e0f8      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800835e:	bf00      	nop
 8008360:	58024400 	.word	0x58024400
 8008364:	03d09000 	.word	0x03d09000
 8008368:	003d0900 	.word	0x003d0900
 800836c:	00f42400 	.word	0x00f42400
 8008370:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008374:	4b79      	ldr	r3, [pc, #484]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800837c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008380:	d107      	bne.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008382:	f107 0318 	add.w	r3, r7, #24
 8008386:	4618      	mov	r0, r3
 8008388:	f000 f906 	bl	8008598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008390:	e0de      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008396:	e0db      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800839c:	e0d8      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083a4:	f040 8085 	bne.w	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80083a8:	4b6c      	ldr	r3, [pc, #432]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80083aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ac:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80083b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083b8:	d06b      	beq.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083c0:	d874      	bhi.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c8:	d056      	beq.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d0:	d86c      	bhi.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80083d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083d8:	d03b      	beq.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80083da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083e0:	d864      	bhi.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083e8:	d021      	beq.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80083ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083f0:	d85c      	bhi.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80083f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d004      	beq.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80083f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083fe:	d004      	beq.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008400:	e054      	b.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008402:	f000 f8b3 	bl	800856c <HAL_RCCEx_GetD3PCLK1Freq>
 8008406:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008408:	e0a2      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800840a:	4b54      	ldr	r3, [pc, #336]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008416:	d107      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008418:	f107 0318 	add.w	r3, r7, #24
 800841c:	4618      	mov	r0, r3
 800841e:	f000 f8bb 	bl	8008598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008426:	e093      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800842c:	e090      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800842e:	4b4b      	ldr	r3, [pc, #300]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800843a:	d107      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800843c:	f107 030c 	add.w	r3, r7, #12
 8008440:	4618      	mov	r0, r3
 8008442:	f000 f9fd 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800844a:	e081      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008450:	e07e      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008452:	4b42      	ldr	r3, [pc, #264]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0304 	and.w	r3, r3, #4
 800845a:	2b04      	cmp	r3, #4
 800845c:	d109      	bne.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800845e:	4b3f      	ldr	r3, [pc, #252]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	08db      	lsrs	r3, r3, #3
 8008464:	f003 0303 	and.w	r3, r3, #3
 8008468:	4a3d      	ldr	r2, [pc, #244]	; (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800846a:	fa22 f303 	lsr.w	r3, r2, r3
 800846e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008470:	e06e      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008476:	e06b      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008478:	4b38      	ldr	r3, [pc, #224]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008484:	d102      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8008486:	4b37      	ldr	r3, [pc, #220]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008488:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800848a:	e061      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008490:	e05e      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008492:	4b32      	ldr	r3, [pc, #200]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800849a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800849e:	d102      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 80084a0:	4b31      	ldr	r3, [pc, #196]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80084a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80084a4:	e054      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084aa:	e051      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084b0:	e04e      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084b8:	d148      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80084ba:	4b28      	ldr	r3, [pc, #160]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084c2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ca:	d02a      	beq.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084d2:	d838      	bhi.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80084da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084e0:	d00d      	beq.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80084e2:	e030      	b.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80084e4:	4b1d      	ldr	r3, [pc, #116]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084f0:	d102      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80084f2:	4b1d      	ldr	r3, [pc, #116]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80084f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80084f6:	e02b      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084fc:	e028      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084fe:	4b17      	ldr	r3, [pc, #92]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800850a:	d107      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800850c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fae9 	bl	8008ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008518:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800851a:	e019      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008520:	e016      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008522:	4b0e      	ldr	r3, [pc, #56]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800852a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800852e:	d107      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008530:	f107 0318 	add.w	r3, r7, #24
 8008534:	4618      	mov	r0, r3
 8008536:	f000 f82f 	bl	8008598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800853e:	e007      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008540:	2300      	movs	r3, #0
 8008542:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008544:	e004      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800854a:	e001      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008552:	4618      	mov	r0, r3
 8008554:	3740      	adds	r7, #64	; 0x40
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	58024400 	.word	0x58024400
 8008560:	03d09000 	.word	0x03d09000
 8008564:	003d0900 	.word	0x003d0900
 8008568:	00f42400 	.word	0x00f42400

0800856c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008570:	f7fe fbb4 	bl	8006cdc <HAL_RCC_GetHCLKFreq>
 8008574:	4602      	mov	r2, r0
 8008576:	4b06      	ldr	r3, [pc, #24]	; (8008590 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	091b      	lsrs	r3, r3, #4
 800857c:	f003 0307 	and.w	r3, r3, #7
 8008580:	4904      	ldr	r1, [pc, #16]	; (8008594 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008582:	5ccb      	ldrb	r3, [r1, r3]
 8008584:	f003 031f 	and.w	r3, r3, #31
 8008588:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800858c:	4618      	mov	r0, r3
 800858e:	bd80      	pop	{r7, pc}
 8008590:	58024400 	.word	0x58024400
 8008594:	0800ee40 	.word	0x0800ee40

08008598 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008598:	b480      	push	{r7}
 800859a:	b089      	sub	sp, #36	; 0x24
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085a0:	4ba1      	ldr	r3, [pc, #644]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a4:	f003 0303 	and.w	r3, r3, #3
 80085a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80085aa:	4b9f      	ldr	r3, [pc, #636]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ae:	0b1b      	lsrs	r3, r3, #12
 80085b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80085b6:	4b9c      	ldr	r3, [pc, #624]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ba:	091b      	lsrs	r3, r3, #4
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80085c2:	4b99      	ldr	r3, [pc, #612]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c6:	08db      	lsrs	r3, r3, #3
 80085c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	fb02 f303 	mul.w	r3, r2, r3
 80085d2:	ee07 3a90 	vmov	s15, r3
 80085d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 8111 	beq.w	8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	f000 8083 	beq.w	80086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	f200 80a1 	bhi.w	8008738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d056      	beq.n	80086b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008602:	e099      	b.n	8008738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008604:	4b88      	ldr	r3, [pc, #544]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0320 	and.w	r3, r3, #32
 800860c:	2b00      	cmp	r3, #0
 800860e:	d02d      	beq.n	800866c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008610:	4b85      	ldr	r3, [pc, #532]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	08db      	lsrs	r3, r3, #3
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	4a84      	ldr	r2, [pc, #528]	; (800882c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800861c:	fa22 f303 	lsr.w	r3, r2, r3
 8008620:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	ee07 3a90 	vmov	s15, r3
 8008628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	ee07 3a90 	vmov	s15, r3
 8008632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800863a:	4b7b      	ldr	r3, [pc, #492]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800863c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008642:	ee07 3a90 	vmov	s15, r3
 8008646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800864a:	ed97 6a03 	vldr	s12, [r7, #12]
 800864e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800865a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800865e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008666:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800866a:	e087      	b.n	800877c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	ee07 3a90 	vmov	s15, r3
 8008672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008676:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800867a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800867e:	4b6a      	ldr	r3, [pc, #424]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008686:	ee07 3a90 	vmov	s15, r3
 800868a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800868e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008692:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800869a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800869e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086ae:	e065      	b.n	800877c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	ee07 3a90 	vmov	s15, r3
 80086b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80086be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086c2:	4b59      	ldr	r3, [pc, #356]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ca:	ee07 3a90 	vmov	s15, r3
 80086ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086f2:	e043      	b.n	800877c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	ee07 3a90 	vmov	s15, r3
 80086fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800883c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008706:	4b48      	ldr	r3, [pc, #288]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800870e:	ee07 3a90 	vmov	s15, r3
 8008712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008716:	ed97 6a03 	vldr	s12, [r7, #12]
 800871a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800871e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800872a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800872e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008732:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008736:	e021      	b.n	800877c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	ee07 3a90 	vmov	s15, r3
 800873e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008742:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800874a:	4b37      	ldr	r3, [pc, #220]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800874c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008752:	ee07 3a90 	vmov	s15, r3
 8008756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800875a:	ed97 6a03 	vldr	s12, [r7, #12]
 800875e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800876a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800876e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800877a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800877c:	4b2a      	ldr	r3, [pc, #168]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800877e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008780:	0a5b      	lsrs	r3, r3, #9
 8008782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008786:	ee07 3a90 	vmov	s15, r3
 800878a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008796:	edd7 6a07 	vldr	s13, [r7, #28]
 800879a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800879e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a2:	ee17 2a90 	vmov	r2, s15
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80087aa:	4b1f      	ldr	r3, [pc, #124]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ae:	0c1b      	lsrs	r3, r3, #16
 80087b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b4:	ee07 3a90 	vmov	s15, r3
 80087b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80087c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087d0:	ee17 2a90 	vmov	r2, s15
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80087d8:	4b13      	ldr	r3, [pc, #76]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087dc:	0e1b      	lsrs	r3, r3, #24
 80087de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80087f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087fe:	ee17 2a90 	vmov	r2, s15
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008806:	e008      	b.n	800881a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	609a      	str	r2, [r3, #8]
}
 800881a:	bf00      	nop
 800881c:	3724      	adds	r7, #36	; 0x24
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	58024400 	.word	0x58024400
 800882c:	03d09000 	.word	0x03d09000
 8008830:	46000000 	.word	0x46000000
 8008834:	4c742400 	.word	0x4c742400
 8008838:	4a742400 	.word	0x4a742400
 800883c:	4b742400 	.word	0x4b742400

08008840 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008840:	b480      	push	{r7}
 8008842:	b089      	sub	sp, #36	; 0x24
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008848:	4ba1      	ldr	r3, [pc, #644]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800884a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884c:	f003 0303 	and.w	r3, r3, #3
 8008850:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008852:	4b9f      	ldr	r3, [pc, #636]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008856:	0d1b      	lsrs	r3, r3, #20
 8008858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800885c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800885e:	4b9c      	ldr	r3, [pc, #624]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	0a1b      	lsrs	r3, r3, #8
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800886a:	4b99      	ldr	r3, [pc, #612]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800886c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886e:	08db      	lsrs	r3, r3, #3
 8008870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	fb02 f303 	mul.w	r3, r2, r3
 800887a:	ee07 3a90 	vmov	s15, r3
 800887e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008882:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 8111 	beq.w	8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	2b02      	cmp	r3, #2
 8008892:	f000 8083 	beq.w	800899c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	2b02      	cmp	r3, #2
 800889a:	f200 80a1 	bhi.w	80089e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d003      	beq.n	80088ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d056      	beq.n	8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80088aa:	e099      	b.n	80089e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088ac:	4b88      	ldr	r3, [pc, #544]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0320 	and.w	r3, r3, #32
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d02d      	beq.n	8008914 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088b8:	4b85      	ldr	r3, [pc, #532]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	08db      	lsrs	r3, r3, #3
 80088be:	f003 0303 	and.w	r3, r3, #3
 80088c2:	4a84      	ldr	r2, [pc, #528]	; (8008ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80088c4:	fa22 f303 	lsr.w	r3, r2, r3
 80088c8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	ee07 3a90 	vmov	s15, r3
 80088d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088e2:	4b7b      	ldr	r3, [pc, #492]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ea:	ee07 3a90 	vmov	s15, r3
 80088ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800890a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800890e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008912:	e087      	b.n	8008a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	ee07 3a90 	vmov	s15, r3
 800891a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008926:	4b6a      	ldr	r3, [pc, #424]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800892e:	ee07 3a90 	vmov	s15, r3
 8008932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008936:	ed97 6a03 	vldr	s12, [r7, #12]
 800893a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800893e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800894a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800894e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008956:	e065      	b.n	8008a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	ee07 3a90 	vmov	s15, r3
 800895e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008962:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800896a:	4b59      	ldr	r3, [pc, #356]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800896c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008972:	ee07 3a90 	vmov	s15, r3
 8008976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800897a:	ed97 6a03 	vldr	s12, [r7, #12]
 800897e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800898a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800898e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008996:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800899a:	e043      	b.n	8008a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	ee07 3a90 	vmov	s15, r3
 80089a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80089aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ae:	4b48      	ldr	r3, [pc, #288]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089b6:	ee07 3a90 	vmov	s15, r3
 80089ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089be:	ed97 6a03 	vldr	s12, [r7, #12]
 80089c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089de:	e021      	b.n	8008a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	ee07 3a90 	vmov	s15, r3
 80089e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089f2:	4b37      	ldr	r3, [pc, #220]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089fa:	ee07 3a90 	vmov	s15, r3
 80089fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008a24:	4b2a      	ldr	r3, [pc, #168]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a28:	0a5b      	lsrs	r3, r3, #9
 8008a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a2e:	ee07 3a90 	vmov	s15, r3
 8008a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a4a:	ee17 2a90 	vmov	r2, s15
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008a52:	4b1f      	ldr	r3, [pc, #124]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a56:	0c1b      	lsrs	r3, r3, #16
 8008a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a5c:	ee07 3a90 	vmov	s15, r3
 8008a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a78:	ee17 2a90 	vmov	r2, s15
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008a80:	4b13      	ldr	r3, [pc, #76]	; (8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a84:	0e1b      	lsrs	r3, r3, #24
 8008a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aa6:	ee17 2a90 	vmov	r2, s15
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008aae:	e008      	b.n	8008ac2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	609a      	str	r2, [r3, #8]
}
 8008ac2:	bf00      	nop
 8008ac4:	3724      	adds	r7, #36	; 0x24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	58024400 	.word	0x58024400
 8008ad4:	03d09000 	.word	0x03d09000
 8008ad8:	46000000 	.word	0x46000000
 8008adc:	4c742400 	.word	0x4c742400
 8008ae0:	4a742400 	.word	0x4a742400
 8008ae4:	4b742400 	.word	0x4b742400

08008ae8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b089      	sub	sp, #36	; 0x24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008af0:	4ba0      	ldr	r3, [pc, #640]	; (8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af4:	f003 0303 	and.w	r3, r3, #3
 8008af8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008afa:	4b9e      	ldr	r3, [pc, #632]	; (8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afe:	091b      	lsrs	r3, r3, #4
 8008b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008b06:	4b9b      	ldr	r3, [pc, #620]	; (8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008b10:	4b98      	ldr	r3, [pc, #608]	; (8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b14:	08db      	lsrs	r3, r3, #3
 8008b16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	fb02 f303 	mul.w	r3, r2, r3
 8008b20:	ee07 3a90 	vmov	s15, r3
 8008b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f000 8111 	beq.w	8008d56 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	f000 8083 	beq.w	8008c42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	f200 80a1 	bhi.w	8008c86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d003      	beq.n	8008b52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d056      	beq.n	8008bfe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008b50:	e099      	b.n	8008c86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b52:	4b88      	ldr	r3, [pc, #544]	; (8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0320 	and.w	r3, r3, #32
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d02d      	beq.n	8008bba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b5e:	4b85      	ldr	r3, [pc, #532]	; (8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	08db      	lsrs	r3, r3, #3
 8008b64:	f003 0303 	and.w	r3, r3, #3
 8008b68:	4a83      	ldr	r2, [pc, #524]	; (8008d78 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b6e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	ee07 3a90 	vmov	s15, r3
 8008b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	ee07 3a90 	vmov	s15, r3
 8008b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b88:	4b7a      	ldr	r3, [pc, #488]	; (8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b90:	ee07 3a90 	vmov	s15, r3
 8008b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b98:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ba8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008bb8:	e087      	b.n	8008cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	ee07 3a90 	vmov	s15, r3
 8008bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008d80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bcc:	4b69      	ldr	r3, [pc, #420]	; (8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd4:	ee07 3a90 	vmov	s15, r3
 8008bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008be0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bfc:	e065      	b.n	8008cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	ee07 3a90 	vmov	s15, r3
 8008c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008d84 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c10:	4b58      	ldr	r3, [pc, #352]	; (8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c18:	ee07 3a90 	vmov	s15, r3
 8008c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c20:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c24:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c40:	e043      	b.n	8008cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	ee07 3a90 	vmov	s15, r3
 8008c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008d88 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c54:	4b47      	ldr	r3, [pc, #284]	; (8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5c:	ee07 3a90 	vmov	s15, r3
 8008c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c64:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c68:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c84:	e021      	b.n	8008cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	ee07 3a90 	vmov	s15, r3
 8008c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c90:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008d80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c98:	4b36      	ldr	r3, [pc, #216]	; (8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca0:	ee07 3a90 	vmov	s15, r3
 8008ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cac:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cc8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008cca:	4b2a      	ldr	r3, [pc, #168]	; (8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cce:	0a5b      	lsrs	r3, r3, #9
 8008cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cd4:	ee07 3a90 	vmov	s15, r3
 8008cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ce0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cf0:	ee17 2a90 	vmov	r2, s15
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008cf8:	4b1e      	ldr	r3, [pc, #120]	; (8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfc:	0c1b      	lsrs	r3, r3, #16
 8008cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d1e:	ee17 2a90 	vmov	r2, s15
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008d26:	4b13      	ldr	r3, [pc, #76]	; (8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2a:	0e1b      	lsrs	r3, r3, #24
 8008d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d30:	ee07 3a90 	vmov	s15, r3
 8008d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d4c:	ee17 2a90 	vmov	r2, s15
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008d54:	e008      	b.n	8008d68 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	609a      	str	r2, [r3, #8]
}
 8008d68:	bf00      	nop
 8008d6a:	3724      	adds	r7, #36	; 0x24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr
 8008d74:	58024400 	.word	0x58024400
 8008d78:	03d09000 	.word	0x03d09000
 8008d7c:	46000000 	.word	0x46000000
 8008d80:	4c742400 	.word	0x4c742400
 8008d84:	4a742400 	.word	0x4a742400
 8008d88:	4b742400 	.word	0x4b742400

08008d8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d9a:	4b53      	ldr	r3, [pc, #332]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9e:	f003 0303 	and.w	r3, r3, #3
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d101      	bne.n	8008daa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e099      	b.n	8008ede <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008daa:	4b4f      	ldr	r3, [pc, #316]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a4e      	ldr	r2, [pc, #312]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008db0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008db6:	f7f9 f9cd 	bl	8002154 <HAL_GetTick>
 8008dba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008dbc:	e008      	b.n	8008dd0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008dbe:	f7f9 f9c9 	bl	8002154 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d901      	bls.n	8008dd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e086      	b.n	8008ede <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008dd0:	4b45      	ldr	r3, [pc, #276]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1f0      	bne.n	8008dbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ddc:	4b42      	ldr	r3, [pc, #264]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	031b      	lsls	r3, r3, #12
 8008dea:	493f      	ldr	r1, [pc, #252]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008dec:	4313      	orrs	r3, r2
 8008dee:	628b      	str	r3, [r1, #40]	; 0x28
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	3b01      	subs	r3, #1
 8008df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	025b      	lsls	r3, r3, #9
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	431a      	orrs	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	041b      	lsls	r3, r3, #16
 8008e0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e12:	431a      	orrs	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	061b      	lsls	r3, r3, #24
 8008e1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e20:	4931      	ldr	r1, [pc, #196]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e22:	4313      	orrs	r3, r2
 8008e24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008e26:	4b30      	ldr	r3, [pc, #192]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	492d      	ldr	r1, [pc, #180]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e38:	4b2b      	ldr	r3, [pc, #172]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	f023 0220 	bic.w	r2, r3, #32
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	4928      	ldr	r1, [pc, #160]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008e4a:	4b27      	ldr	r3, [pc, #156]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4e:	4a26      	ldr	r2, [pc, #152]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e50:	f023 0310 	bic.w	r3, r3, #16
 8008e54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008e56:	4b24      	ldr	r3, [pc, #144]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e5a:	4b24      	ldr	r3, [pc, #144]	; (8008eec <RCCEx_PLL2_Config+0x160>)
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	69d2      	ldr	r2, [r2, #28]
 8008e62:	00d2      	lsls	r2, r2, #3
 8008e64:	4920      	ldr	r1, [pc, #128]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e66:	4313      	orrs	r3, r2
 8008e68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008e6a:	4b1f      	ldr	r3, [pc, #124]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	4a1e      	ldr	r2, [pc, #120]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e70:	f043 0310 	orr.w	r3, r3, #16
 8008e74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d106      	bne.n	8008e8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008e7c:	4b1a      	ldr	r3, [pc, #104]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e80:	4a19      	ldr	r2, [pc, #100]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e88:	e00f      	b.n	8008eaa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d106      	bne.n	8008e9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008e90:	4b15      	ldr	r3, [pc, #84]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e94:	4a14      	ldr	r2, [pc, #80]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e9c:	e005      	b.n	8008eaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008e9e:	4b12      	ldr	r3, [pc, #72]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea2:	4a11      	ldr	r2, [pc, #68]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ea8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008eaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a0e      	ldr	r2, [pc, #56]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008eb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eb6:	f7f9 f94d 	bl	8002154 <HAL_GetTick>
 8008eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ebc:	e008      	b.n	8008ed0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008ebe:	f7f9 f949 	bl	8002154 <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d901      	bls.n	8008ed0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e006      	b.n	8008ede <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ed0:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <RCCEx_PLL2_Config+0x15c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0f0      	beq.n	8008ebe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	58024400 	.word	0x58024400
 8008eec:	ffff0007 	.word	0xffff0007

08008ef0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008efe:	4b53      	ldr	r3, [pc, #332]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f02:	f003 0303 	and.w	r3, r3, #3
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d101      	bne.n	8008f0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e099      	b.n	8009042 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008f0e:	4b4f      	ldr	r3, [pc, #316]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a4e      	ldr	r2, [pc, #312]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f1a:	f7f9 f91b 	bl	8002154 <HAL_GetTick>
 8008f1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f20:	e008      	b.n	8008f34 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f22:	f7f9 f917 	bl	8002154 <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d901      	bls.n	8008f34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e086      	b.n	8009042 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f34:	4b45      	ldr	r3, [pc, #276]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1f0      	bne.n	8008f22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008f40:	4b42      	ldr	r3, [pc, #264]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	051b      	lsls	r3, r3, #20
 8008f4e:	493f      	ldr	r1, [pc, #252]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008f50:	4313      	orrs	r3, r2
 8008f52:	628b      	str	r3, [r1, #40]	; 0x28
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	025b      	lsls	r3, r3, #9
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	041b      	lsls	r3, r3, #16
 8008f72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	061b      	lsls	r3, r3, #24
 8008f80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f84:	4931      	ldr	r1, [pc, #196]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008f8a:	4b30      	ldr	r3, [pc, #192]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	492d      	ldr	r1, [pc, #180]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f9c:	4b2b      	ldr	r3, [pc, #172]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	4928      	ldr	r1, [pc, #160]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008fae:	4b27      	ldr	r3, [pc, #156]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb2:	4a26      	ldr	r2, [pc, #152]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008fba:	4b24      	ldr	r3, [pc, #144]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fbe:	4b24      	ldr	r3, [pc, #144]	; (8009050 <RCCEx_PLL3_Config+0x160>)
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	69d2      	ldr	r2, [r2, #28]
 8008fc6:	00d2      	lsls	r2, r2, #3
 8008fc8:	4920      	ldr	r1, [pc, #128]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008fce:	4b1f      	ldr	r3, [pc, #124]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd2:	4a1e      	ldr	r2, [pc, #120]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d106      	bne.n	8008fee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008fe0:	4b1a      	ldr	r3, [pc, #104]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe4:	4a19      	ldr	r2, [pc, #100]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008fe6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008fea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008fec:	e00f      	b.n	800900e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d106      	bne.n	8009002 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008ff4:	4b15      	ldr	r3, [pc, #84]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff8:	4a14      	ldr	r2, [pc, #80]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8008ffa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009000:	e005      	b.n	800900e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009002:	4b12      	ldr	r3, [pc, #72]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8009004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009006:	4a11      	ldr	r2, [pc, #68]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8009008:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800900c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800900e:	4b0f      	ldr	r3, [pc, #60]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a0e      	ldr	r2, [pc, #56]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8009014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800901a:	f7f9 f89b 	bl	8002154 <HAL_GetTick>
 800901e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009020:	e008      	b.n	8009034 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009022:	f7f9 f897 	bl	8002154 <HAL_GetTick>
 8009026:	4602      	mov	r2, r0
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	2b02      	cmp	r3, #2
 800902e:	d901      	bls.n	8009034 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e006      	b.n	8009042 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009034:	4b05      	ldr	r3, [pc, #20]	; (800904c <RCCEx_PLL3_Config+0x15c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d0f0      	beq.n	8009022 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009040:	7bfb      	ldrb	r3, [r7, #15]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	58024400 	.word	0x58024400
 8009050:	ffff0007 	.word	0xffff0007

08009054 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e054      	b.n	8009110 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	7a5b      	ldrb	r3, [r3, #9]
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	d105      	bne.n	800907c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7f8 fb2c 	bl	80016d4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2202      	movs	r2, #2
 8009080:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f023 0120 	bic.w	r1, r3, #32
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	430a      	orrs	r2, r1
 8009096:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f042 0204 	orr.w	r2, r2, #4
 80090a6:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b2:	2b40      	cmp	r3, #64	; 0x40
 80090b4:	d104      	bne.n	80090c0 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2204      	movs	r2, #4
 80090ba:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e027      	b.n	8009110 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80090c0:	f7f9 f848 	bl	8002154 <HAL_GetTick>
 80090c4:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80090c6:	e015      	b.n	80090f4 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80090c8:	f7f9 f844 	bl	8002154 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d90e      	bls.n	80090f4 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	f003 0304 	and.w	r3, r3, #4
 80090e0:	2b04      	cmp	r3, #4
 80090e2:	d107      	bne.n	80090f4 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2204      	movs	r2, #4
 80090e8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2202      	movs	r2, #2
 80090ee:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e00d      	b.n	8009110 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f003 0304 	and.w	r3, r3, #4
 80090fe:	2b04      	cmp	r3, #4
 8009100:	d0e2      	beq.n	80090c8 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	7a1b      	ldrb	r3, [r3, #8]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d101      	bne.n	8009132 <HAL_RNG_GenerateRandomNumber+0x1a>
 800912e:	2302      	movs	r3, #2
 8009130:	e044      	b.n	80091bc <HAL_RNG_GenerateRandomNumber+0xa4>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2201      	movs	r2, #1
 8009136:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	7a5b      	ldrb	r3, [r3, #9]
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b01      	cmp	r3, #1
 8009140:	d133      	bne.n	80091aa <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2202      	movs	r2, #2
 8009146:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8009148:	f7f9 f804 	bl	8002154 <HAL_GetTick>
 800914c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800914e:	e018      	b.n	8009182 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009150:	f7f9 f800 	bl	8002154 <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	2b02      	cmp	r3, #2
 800915c:	d911      	bls.n	8009182 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b01      	cmp	r3, #1
 800916a:	d00a      	beq.n	8009182 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2202      	movs	r2, #2
 8009176:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e01c      	b.n	80091bc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	2b01      	cmp	r3, #1
 800918e:	d1df      	bne.n	8009150 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691a      	ldr	r2, [r3, #16]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	725a      	strb	r2, [r3, #9]
 80091a8:	e004      	b.n	80091b4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2204      	movs	r2, #4
 80091ae:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	721a      	strb	r2, [r3, #8]

  return status;
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d904      	bls.n	80091e2 <HAL_SAI_InitProtocol+0x1e>
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	3b03      	subs	r3, #3
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d812      	bhi.n	8009206 <HAL_SAI_InitProtocol+0x42>
 80091e0:	e008      	b.n	80091f4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	68b9      	ldr	r1, [r7, #8]
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f000 fc25 	bl	8009a38 <SAI_InitI2S>
 80091ee:	4603      	mov	r3, r0
 80091f0:	75fb      	strb	r3, [r7, #23]
      break;
 80091f2:	e00b      	b.n	800920c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	68b9      	ldr	r1, [r7, #8]
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f000 fcce 	bl	8009b9c <SAI_InitPCM>
 8009200:	4603      	mov	r3, r0
 8009202:	75fb      	strb	r3, [r7, #23]
      break;
 8009204:	e002      	b.n	800920c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	75fb      	strb	r3, [r7, #23]
      break;
 800920a:	bf00      	nop
  }

  if (status == HAL_OK)
 800920c:	7dfb      	ldrb	r3, [r7, #23]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d104      	bne.n	800921c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 f808 	bl	8009228 <HAL_SAI_Init>
 8009218:	4603      	mov	r3, r0
 800921a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800921c:	7dfb      	ldrb	r3, [r7, #23]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3718      	adds	r7, #24
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b08a      	sub	sp, #40	; 0x28
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e283      	b.n	8009742 <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800923a:	f7f8 ffbb 	bl	80021b4 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009244:	2b01      	cmp	r3, #1
 8009246:	d113      	bne.n	8009270 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a94      	ldr	r2, [pc, #592]	; (80094a0 <HAL_SAI_Init+0x278>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d004      	beq.n	800925c <HAL_SAI_Init+0x34>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a93      	ldr	r2, [pc, #588]	; (80094a4 <HAL_SAI_Init+0x27c>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d107      	bne.n	800926c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009260:	2b01      	cmp	r3, #1
 8009262:	d103      	bne.n	800926c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e268      	b.n	8009742 <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a8a      	ldr	r2, [pc, #552]	; (80094a0 <HAL_SAI_Init+0x278>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d004      	beq.n	8009284 <HAL_SAI_Init+0x5c>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a8a      	ldr	r2, [pc, #552]	; (80094a8 <HAL_SAI_Init+0x280>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d102      	bne.n	800928a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8009284:	4b89      	ldr	r3, [pc, #548]	; (80094ac <HAL_SAI_Init+0x284>)
 8009286:	61bb      	str	r3, [r7, #24]
 8009288:	e028      	b.n	80092dc <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a88      	ldr	r2, [pc, #544]	; (80094b0 <HAL_SAI_Init+0x288>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d004      	beq.n	800929e <HAL_SAI_Init+0x76>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a86      	ldr	r2, [pc, #536]	; (80094b4 <HAL_SAI_Init+0x28c>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d102      	bne.n	80092a4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800929e:	4b86      	ldr	r3, [pc, #536]	; (80094b8 <HAL_SAI_Init+0x290>)
 80092a0:	61bb      	str	r3, [r7, #24]
 80092a2:	e01b      	b.n	80092dc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a84      	ldr	r2, [pc, #528]	; (80094bc <HAL_SAI_Init+0x294>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d004      	beq.n	80092b8 <HAL_SAI_Init+0x90>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a83      	ldr	r2, [pc, #524]	; (80094c0 <HAL_SAI_Init+0x298>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d102      	bne.n	80092be <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 80092b8:	4b82      	ldr	r3, [pc, #520]	; (80094c4 <HAL_SAI_Init+0x29c>)
 80092ba:	61bb      	str	r3, [r7, #24]
 80092bc:	e00e      	b.n	80092dc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a78      	ldr	r2, [pc, #480]	; (80094a4 <HAL_SAI_Init+0x27c>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d004      	beq.n	80092d2 <HAL_SAI_Init+0xaa>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a7e      	ldr	r2, [pc, #504]	; (80094c8 <HAL_SAI_Init+0x2a0>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d102      	bne.n	80092d8 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 80092d2:	4b7e      	ldr	r3, [pc, #504]	; (80094cc <HAL_SAI_Init+0x2a4>)
 80092d4:	61bb      	str	r3, [r7, #24]
 80092d6:	e001      	b.n	80092dc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e232      	b.n	8009742 <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d106      	bne.n	80092f6 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7f8 fa83 	bl	80017fc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fd0a 	bl	8009d10 <SAI_Disable>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e21d      	b.n	8009742 <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2202      	movs	r2, #2
 800930a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	2b02      	cmp	r3, #2
 8009314:	d00c      	beq.n	8009330 <HAL_SAI_Init+0x108>
 8009316:	2b02      	cmp	r3, #2
 8009318:	d80d      	bhi.n	8009336 <HAL_SAI_Init+0x10e>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d002      	beq.n	8009324 <HAL_SAI_Init+0xfc>
 800931e:	2b01      	cmp	r3, #1
 8009320:	d003      	beq.n	800932a <HAL_SAI_Init+0x102>
 8009322:	e008      	b.n	8009336 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009324:	2300      	movs	r3, #0
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009328:	e008      	b.n	800933c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800932a:	2310      	movs	r3, #16
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800932e:	e005      	b.n	800933c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009330:	2320      	movs	r3, #32
 8009332:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009334:	e002      	b.n	800933c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800933a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	2b05      	cmp	r3, #5
 8009342:	d832      	bhi.n	80093aa <HAL_SAI_Init+0x182>
 8009344:	a201      	add	r2, pc, #4	; (adr r2, 800934c <HAL_SAI_Init+0x124>)
 8009346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934a:	bf00      	nop
 800934c:	08009365 	.word	0x08009365
 8009350:	0800936b 	.word	0x0800936b
 8009354:	08009373 	.word	0x08009373
 8009358:	0800937b 	.word	0x0800937b
 800935c:	0800938b 	.word	0x0800938b
 8009360:	0800939b 	.word	0x0800939b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009364:	2300      	movs	r3, #0
 8009366:	61fb      	str	r3, [r7, #28]
      break;
 8009368:	e022      	b.n	80093b0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800936a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800936e:	61fb      	str	r3, [r7, #28]
      break;
 8009370:	e01e      	b.n	80093b0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009376:	61fb      	str	r3, [r7, #28]
      break;
 8009378:	e01a      	b.n	80093b0 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800937a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800937e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	f043 0301 	orr.w	r3, r3, #1
 8009386:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009388:	e012      	b.n	80093b0 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800938a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800938e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	f043 0302 	orr.w	r3, r3, #2
 8009396:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009398:	e00a      	b.n	80093b0 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800939a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800939e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	f043 0303 	orr.w	r3, r3, #3
 80093a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80093a8:	e002      	b.n	80093b0 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	61fb      	str	r3, [r7, #28]
      break;
 80093ae:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f000 80ba 	beq.w	8009534 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a35      	ldr	r2, [pc, #212]	; (80094a0 <HAL_SAI_Init+0x278>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d004      	beq.n	80093d8 <HAL_SAI_Init+0x1b0>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a35      	ldr	r2, [pc, #212]	; (80094a8 <HAL_SAI_Init+0x280>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d104      	bne.n	80093e2 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80093d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80093dc:	f7fe fbf4 	bl	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq>
 80093e0:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a32      	ldr	r2, [pc, #200]	; (80094b0 <HAL_SAI_Init+0x288>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d004      	beq.n	80093f6 <HAL_SAI_Init+0x1ce>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a30      	ldr	r2, [pc, #192]	; (80094b4 <HAL_SAI_Init+0x28c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d104      	bne.n	8009400 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80093f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80093fa:	f7fe fbe5 	bl	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq>
 80093fe:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a2d      	ldr	r2, [pc, #180]	; (80094bc <HAL_SAI_Init+0x294>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d004      	beq.n	8009414 <HAL_SAI_Init+0x1ec>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a2c      	ldr	r2, [pc, #176]	; (80094c0 <HAL_SAI_Init+0x298>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d104      	bne.n	800941e <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009414:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009418:	f7fe fbd6 	bl	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq>
 800941c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a20      	ldr	r2, [pc, #128]	; (80094a4 <HAL_SAI_Init+0x27c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d104      	bne.n	8009432 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009428:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800942c:	f7fe fbcc 	bl	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009430:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a24      	ldr	r2, [pc, #144]	; (80094c8 <HAL_SAI_Init+0x2a0>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d104      	bne.n	8009446 <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800943c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009440:	f7fe fbc2 	bl	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009444:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800944e:	d120      	bne.n	8009492 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009454:	2b04      	cmp	r3, #4
 8009456:	d102      	bne.n	800945e <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8009458:	2340      	movs	r3, #64	; 0x40
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	e00a      	b.n	8009474 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009462:	2b08      	cmp	r3, #8
 8009464:	d103      	bne.n	800946e <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8009466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800946a:	60fb      	str	r3, [r7, #12]
 800946c:	e002      	b.n	8009474 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009472:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009474:	697a      	ldr	r2, [r7, #20]
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	4619      	mov	r1, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	fb02 f303 	mul.w	r3, r2, r3
 800948a:	fbb1 f3f3 	udiv	r3, r1, r3
 800948e:	613b      	str	r3, [r7, #16]
 8009490:	e02f      	b.n	80094f2 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009496:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800949a:	d119      	bne.n	80094d0 <HAL_SAI_Init+0x2a8>
 800949c:	2302      	movs	r3, #2
 800949e:	e018      	b.n	80094d2 <HAL_SAI_Init+0x2aa>
 80094a0:	40015804 	.word	0x40015804
 80094a4:	58005404 	.word	0x58005404
 80094a8:	40015824 	.word	0x40015824
 80094ac:	40015800 	.word	0x40015800
 80094b0:	40015c04 	.word	0x40015c04
 80094b4:	40015c24 	.word	0x40015c24
 80094b8:	40015c00 	.word	0x40015c00
 80094bc:	40016004 	.word	0x40016004
 80094c0:	40016024 	.word	0x40016024
 80094c4:	40016000 	.word	0x40016000
 80094c8:	58005424 	.word	0x58005424
 80094cc:	58005400 	.word	0x58005400
 80094d0:	2301      	movs	r3, #1
 80094d2:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	4613      	mov	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	005b      	lsls	r3, r3, #1
 80094de:	4619      	mov	r1, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	fb02 f303 	mul.w	r3, r2, r3
 80094ea:	021b      	lsls	r3, r3, #8
 80094ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80094f0:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	4a95      	ldr	r2, [pc, #596]	; (800974c <HAL_SAI_Init+0x524>)
 80094f6:	fba2 2303 	umull	r2, r3, r2, r3
 80094fa:	08da      	lsrs	r2, r3, #3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009500:	6939      	ldr	r1, [r7, #16]
 8009502:	4b92      	ldr	r3, [pc, #584]	; (800974c <HAL_SAI_Init+0x524>)
 8009504:	fba3 2301 	umull	r2, r3, r3, r1
 8009508:	08da      	lsrs	r2, r3, #3
 800950a:	4613      	mov	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	1aca      	subs	r2, r1, r3
 8009514:	2a08      	cmp	r2, #8
 8009516:	d904      	bls.n	8009522 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951c:	1c5a      	adds	r2, r3, #1
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009526:	2b04      	cmp	r3, #4
 8009528:	d104      	bne.n	8009534 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	085a      	lsrs	r2, r3, #1
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d003      	beq.n	8009544 <HAL_SAI_Init+0x31c>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	2b02      	cmp	r3, #2
 8009542:	d109      	bne.n	8009558 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009548:	2b01      	cmp	r3, #1
 800954a:	d101      	bne.n	8009550 <HAL_SAI_Init+0x328>
 800954c:	2300      	movs	r3, #0
 800954e:	e001      	b.n	8009554 <HAL_SAI_Init+0x32c>
 8009550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009554:	623b      	str	r3, [r7, #32]
 8009556:	e008      	b.n	800956a <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800955c:	2b01      	cmp	r3, #1
 800955e:	d102      	bne.n	8009566 <HAL_SAI_Init+0x33e>
 8009560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009564:	e000      	b.n	8009568 <HAL_SAI_Init+0x340>
 8009566:	2300      	movs	r3, #0
 8009568:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800956a:	f7f8 fe23 	bl	80021b4 <HAL_GetREVID>
 800956e:	4603      	mov	r3, r0
 8009570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009574:	d331      	bcc.n	80095da <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6819      	ldr	r1, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	4b73      	ldr	r3, [pc, #460]	; (8009750 <HAL_SAI_Init+0x528>)
 8009582:	400b      	ands	r3, r1
 8009584:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	6819      	ldr	r1, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009594:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800959a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095a0:	431a      	orrs	r2, r3
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80095ae:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80095ba:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	051b      	lsls	r3, r3, #20
 80095c2:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80095c8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	430a      	orrs	r2, r1
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	e02d      	b.n	8009636 <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	6819      	ldr	r1, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	4b5b      	ldr	r3, [pc, #364]	; (8009754 <HAL_SAI_Init+0x52c>)
 80095e6:	400b      	ands	r3, r1
 80095e8:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	6819      	ldr	r1, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80095fe:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009604:	431a      	orrs	r2, r3
 8009606:	6a3b      	ldr	r3, [r7, #32]
 8009608:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009612:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800961e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009624:	051b      	lsls	r3, r3, #20
 8009626:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800962c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	430a      	orrs	r2, r1
 8009634:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6859      	ldr	r1, [r3, #4]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	4b45      	ldr	r3, [pc, #276]	; (8009758 <HAL_SAI_Init+0x530>)
 8009642:	400b      	ands	r3, r1
 8009644:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6859      	ldr	r1, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	69da      	ldr	r2, [r3, #28]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009654:	431a      	orrs	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965a:	431a      	orrs	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	430a      	orrs	r2, r1
 8009662:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6899      	ldr	r1, [r3, #8]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	4b3b      	ldr	r3, [pc, #236]	; (800975c <HAL_SAI_Init+0x534>)
 8009670:	400b      	ands	r3, r1
 8009672:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6899      	ldr	r1, [r3, #8]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009684:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800968a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009690:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009696:	3b01      	subs	r3, #1
 8009698:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800969a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	430a      	orrs	r2, r1
 80096a2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68d9      	ldr	r1, [r3, #12]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	f24f 0320 	movw	r3, #61472	; 0xf020
 80096b2:	400b      	ands	r3, r1
 80096b4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68d9      	ldr	r1, [r3, #12]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096ca:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80096cc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d2:	3b01      	subs	r3, #1
 80096d4:	021b      	lsls	r3, r3, #8
 80096d6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	430a      	orrs	r2, r1
 80096de:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a1e      	ldr	r2, [pc, #120]	; (8009760 <HAL_SAI_Init+0x538>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d004      	beq.n	80096f4 <HAL_SAI_Init+0x4cc>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a1d      	ldr	r2, [pc, #116]	; (8009764 <HAL_SAI_Init+0x53c>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d119      	bne.n	8009728 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f8:	f023 0201 	bic.w	r2, r3, #1
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009706:	2b01      	cmp	r3, #1
 8009708:	d10e      	bne.n	8009728 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009712:	3b01      	subs	r3, #1
 8009714:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009716:	431a      	orrs	r2, r3
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009720:	f043 0201 	orr.w	r2, r3, #1
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3728      	adds	r7, #40	; 0x28
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	cccccccd 	.word	0xcccccccd
 8009750:	f005c010 	.word	0xf005c010
 8009754:	f805c010 	.word	0xf805c010
 8009758:	ffff1ff0 	.word	0xffff1ff0
 800975c:	fff88000 	.word	0xfff88000
 8009760:	40015804 	.word	0x40015804
 8009764:	58005404 	.word	0x58005404

08009768 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	4613      	mov	r3, r2
 8009774:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009776:	f7f8 fced 	bl	8002154 <HAL_GetTick>
 800977a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d002      	beq.n	8009788 <HAL_SAI_Transmit_DMA+0x20>
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e098      	b.n	80098be <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b01      	cmp	r3, #1
 8009796:	f040 8091 	bne.w	80098bc <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d101      	bne.n	80097a8 <HAL_SAI_Transmit_DMA+0x40>
 80097a4:	2302      	movs	r3, #2
 80097a6:	e08a      	b.n	80098be <HAL_SAI_Transmit_DMA+0x156>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	88fa      	ldrh	r2, [r7, #6]
 80097ba:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	88fa      	ldrh	r2, [r7, #6]
 80097c2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2212      	movs	r2, #18
 80097d2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097dc:	4a3a      	ldr	r2, [pc, #232]	; (80098c8 <HAL_SAI_Transmit_DMA+0x160>)
 80097de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097e6:	4a39      	ldr	r2, [pc, #228]	; (80098cc <HAL_SAI_Transmit_DMA+0x164>)
 80097e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097f0:	4a37      	ldr	r2, [pc, #220]	; (80098d0 <HAL_SAI_Transmit_DMA+0x168>)
 80097f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097fa:	2200      	movs	r2, #0
 80097fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009808:	4619      	mov	r1, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	331c      	adds	r3, #28
 8009810:	461a      	mov	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8009818:	f7f9 fb12 	bl	8002e40 <HAL_DMA_Start_IT>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d005      	beq.n	800982e <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e047      	b.n	80098be <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800982e:	2100      	movs	r1, #0
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f000 fa35 	bl	8009ca0 <SAI_InterruptFlag>
 8009836:	4601      	mov	r1, r0
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	691a      	ldr	r2, [r3, #16]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	430a      	orrs	r2, r1
 8009844:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009854:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009856:	e015      	b.n	8009884 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8009858:	f7f8 fc7c 	bl	8002154 <HAL_GetTick>
 800985c:	4602      	mov	r2, r0
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009866:	d90d      	bls.n	8009884 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800986e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e01c      	b.n	80098be <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d0e2      	beq.n	8009858 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d107      	bne.n	80098b0 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80098ae:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	e000      	b.n	80098be <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 80098bc:	2302      	movs	r3, #2
  }
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	08009de5 	.word	0x08009de5
 80098cc:	08009d85 	.word	0x08009d85
 80098d0:	08009e7d 	.word	0x08009e7d

080098d4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	4613      	mov	r3, r2
 80098e0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <HAL_SAI_Receive_DMA+0x1a>
 80098e8:	88fb      	ldrh	r3, [r7, #6]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d101      	bne.n	80098f2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e079      	b.n	80099e6 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d172      	bne.n	80099e4 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009904:	2b01      	cmp	r3, #1
 8009906:	d101      	bne.n	800990c <HAL_SAI_Receive_DMA+0x38>
 8009908:	2302      	movs	r3, #2
 800990a:	e06c      	b.n	80099e6 <HAL_SAI_Receive_DMA+0x112>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	88fa      	ldrh	r2, [r7, #6]
 800991e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	88fa      	ldrh	r2, [r7, #6]
 8009926:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2222      	movs	r2, #34	; 0x22
 8009936:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009940:	4a2b      	ldr	r2, [pc, #172]	; (80099f0 <HAL_SAI_Receive_DMA+0x11c>)
 8009942:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800994a:	4a2a      	ldr	r2, [pc, #168]	; (80099f4 <HAL_SAI_Receive_DMA+0x120>)
 800994c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009954:	4a28      	ldr	r2, [pc, #160]	; (80099f8 <HAL_SAI_Receive_DMA+0x124>)
 8009956:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800995e:	2200      	movs	r2, #0
 8009960:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	331c      	adds	r3, #28
 800996e:	4619      	mov	r1, r3
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009974:	461a      	mov	r2, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800997c:	f7f9 fa60 	bl	8002e40 <HAL_DMA_Start_IT>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d005      	beq.n	8009992 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	e029      	b.n	80099e6 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009992:	2100      	movs	r1, #0
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 f983 	bl	8009ca0 <SAI_InterruptFlag>
 800999a:	4601      	mov	r1, r0
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	691a      	ldr	r2, [r3, #16]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	430a      	orrs	r2, r1
 80099a8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80099b8:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d107      	bne.n	80099d8 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80099d6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	e000      	b.n	80099e6 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80099e4:	2302      	movs	r3, #2
  }
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	08009e61 	.word	0x08009e61
 80099f4:	08009e01 	.word	0x08009e01
 80099f8:	08009e7d 	.word	0x08009e7d

080099fc <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d003      	beq.n	8009a66 <SAI_InitI2S+0x2e>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d103      	bne.n	8009a6e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	651a      	str	r2, [r3, #80]	; 0x50
 8009a6c:	e002      	b.n	8009a74 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2201      	movs	r2, #1
 8009a72:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009a7a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a82:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	683a      	ldr	r2, [r7, #0]
 8009a8e:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e077      	b.n	8009b8e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d107      	bne.n	8009ab4 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009ab0:	665a      	str	r2, [r3, #100]	; 0x64
 8009ab2:	e006      	b.n	8009ac2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009aba:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b03      	cmp	r3, #3
 8009ac6:	d84f      	bhi.n	8009b68 <SAI_InitI2S+0x130>
 8009ac8:	a201      	add	r2, pc, #4	; (adr r2, 8009ad0 <SAI_InitI2S+0x98>)
 8009aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ace:	bf00      	nop
 8009ad0:	08009ae1 	.word	0x08009ae1
 8009ad4:	08009b03 	.word	0x08009b03
 8009ad8:	08009b25 	.word	0x08009b25
 8009adc:	08009b47 	.word	0x08009b47
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2280      	movs	r2, #128	; 0x80
 8009ae4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	085b      	lsrs	r3, r3, #1
 8009aea:	015a      	lsls	r2, r3, #5
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	085b      	lsrs	r3, r3, #1
 8009af4:	011a      	lsls	r2, r3, #4
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2240      	movs	r2, #64	; 0x40
 8009afe:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009b00:	e035      	b.n	8009b6e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2280      	movs	r2, #128	; 0x80
 8009b06:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	085b      	lsrs	r3, r3, #1
 8009b0c:	019a      	lsls	r2, r3, #6
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	085b      	lsrs	r3, r3, #1
 8009b16:	015a      	lsls	r2, r3, #5
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2280      	movs	r2, #128	; 0x80
 8009b20:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009b22:	e024      	b.n	8009b6e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	22c0      	movs	r2, #192	; 0xc0
 8009b28:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	085b      	lsrs	r3, r3, #1
 8009b2e:	019a      	lsls	r2, r3, #6
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	085b      	lsrs	r3, r3, #1
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2280      	movs	r2, #128	; 0x80
 8009b42:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009b44:	e013      	b.n	8009b6e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	22e0      	movs	r2, #224	; 0xe0
 8009b4a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	085b      	lsrs	r3, r3, #1
 8009b50:	019a      	lsls	r2, r3, #6
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	085b      	lsrs	r3, r3, #1
 8009b5a:	015a      	lsls	r2, r3, #5
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2280      	movs	r2, #128	; 0x80
 8009b64:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009b66:	e002      	b.n	8009b6e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b6c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d10b      	bne.n	8009b8c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d102      	bne.n	8009b80 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2210      	movs	r2, #16
 8009b7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d102      	bne.n	8009b8c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2208      	movs	r2, #8
 8009b8a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	371c      	adds	r7, #28
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop

08009b9c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b087      	sub	sp, #28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
 8009ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <SAI_InitPCM+0x2e>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d103      	bne.n	8009bd2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	651a      	str	r2, [r3, #80]	; 0x50
 8009bd0:	e002      	b.n	8009bd8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009be4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009bec:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c00:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2b04      	cmp	r3, #4
 8009c06:	d103      	bne.n	8009c10 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	659a      	str	r2, [r3, #88]	; 0x58
 8009c0e:	e002      	b.n	8009c16 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	220d      	movs	r2, #13
 8009c14:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b03      	cmp	r3, #3
 8009c1a:	d837      	bhi.n	8009c8c <SAI_InitPCM+0xf0>
 8009c1c:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <SAI_InitPCM+0x88>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009c35 	.word	0x08009c35
 8009c28:	08009c4b 	.word	0x08009c4b
 8009c2c:	08009c61 	.word	0x08009c61
 8009c30:	08009c77 	.word	0x08009c77
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2280      	movs	r2, #128	; 0x80
 8009c38:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	011a      	lsls	r2, r3, #4
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2240      	movs	r2, #64	; 0x40
 8009c46:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009c48:	e023      	b.n	8009c92 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2280      	movs	r2, #128	; 0x80
 8009c4e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2280      	movs	r2, #128	; 0x80
 8009c5c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009c5e:	e018      	b.n	8009c92 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	22c0      	movs	r2, #192	; 0xc0
 8009c64:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2280      	movs	r2, #128	; 0x80
 8009c72:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009c74:	e00d      	b.n	8009c92 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	22e0      	movs	r2, #224	; 0xe0
 8009c7a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2280      	movs	r2, #128	; 0x80
 8009c88:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009c8a:	e002      	b.n	8009c92 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c90:	bf00      	nop
  }

  return status;
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	371c      	adds	r7, #28
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d103      	bne.n	8009cbe <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f043 0308 	orr.w	r3, r3, #8
 8009cbc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc2:	2b08      	cmp	r3, #8
 8009cc4:	d10b      	bne.n	8009cde <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d003      	beq.n	8009cd6 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d103      	bne.n	8009cde <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f043 0310 	orr.w	r3, r3, #16
 8009cdc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	2b03      	cmp	r3, #3
 8009ce4:	d003      	beq.n	8009cee <SAI_InterruptFlag+0x4e>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d104      	bne.n	8009cf8 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009cf4:	60fb      	str	r3, [r7, #12]
 8009cf6:	e003      	b.n	8009d00 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f043 0304 	orr.w	r3, r3, #4
 8009cfe:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8009d00:	68fb      	ldr	r3, [r7, #12]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
	...

08009d10 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009d18:	4b18      	ldr	r3, [pc, #96]	; (8009d7c <SAI_Disable+0x6c>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a18      	ldr	r2, [pc, #96]	; (8009d80 <SAI_Disable+0x70>)
 8009d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d22:	0b1b      	lsrs	r3, r3, #12
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009d3a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10a      	bne.n	8009d58 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009d52:	2303      	movs	r3, #3
 8009d54:	72fb      	strb	r3, [r7, #11]
      break;
 8009d56:	e009      	b.n	8009d6c <SAI_Disable+0x5c>
    }
    count--;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1e7      	bne.n	8009d3c <SAI_Disable+0x2c>

  return status;
 8009d6c:	7afb      	ldrb	r3, [r7, #11]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3714      	adds	r7, #20
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	20000000 	.word	0x20000000
 8009d80:	95cbec1b 	.word	0x95cbec1b

08009d84 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d90:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	69db      	ldr	r3, [r3, #28]
 8009d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d9a:	d01c      	beq.n	8009dd6 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009db2:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009db4:	2100      	movs	r1, #0
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f7ff ff72 	bl	8009ca0 <SAI_InterruptFlag>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	43d9      	mvns	r1, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	691a      	ldr	r2, [r3, #16]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	400a      	ands	r2, r1
 8009dcc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f7ff fe10 	bl	80099fc <HAL_SAI_TxCpltCallback>
#endif
}
 8009ddc:	bf00      	nop
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f7ff fe0c 	bl	8009a10 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8009df8:	bf00      	nop
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	69db      	ldr	r3, [r3, #28]
 8009e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e16:	d01c      	beq.n	8009e52 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009e26:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009e30:	2100      	movs	r1, #0
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f7ff ff34 	bl	8009ca0 <SAI_InterruptFlag>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	43d9      	mvns	r1, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	691a      	ldr	r2, [r3, #16]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	400a      	ands	r2, r1
 8009e48:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f7f6 fbbc 	bl	80005d0 <HAL_SAI_RxCpltCallback>
#endif
}
 8009e58:	bf00      	nop
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7f6 fbb9 	bl	80005e6 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8009e74:	bf00      	nop
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e88:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7fa fbb2 	bl	80045f4 <HAL_DMA_GetError>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d01d      	beq.n	8009ed2 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009eb4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f7ff ff2a 	bl	8009d10 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f7ff fda9 	bl	8009a24 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8009ed2:	bf00      	nop
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b08a      	sub	sp, #40	; 0x28
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d101      	bne.n	8009eec <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e075      	b.n	8009fd8 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d105      	bne.n	8009f04 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7f7 fd96 	bl	8001a30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2204      	movs	r2, #4
 8009f08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f867 	bl	8009fe0 <HAL_SD_InitCard>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d001      	beq.n	8009f1c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e05d      	b.n	8009fd8 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009f1c:	f107 0308 	add.w	r3, r7, #8
 8009f20:	4619      	mov	r1, r3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 ff70 	bl	800ae08 <HAL_SD_GetCardStatus>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e052      	b.n	8009fd8 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009f32:	7e3b      	ldrb	r3, [r7, #24]
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009f38:	7e7b      	ldrb	r3, [r7, #25]
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d10a      	bne.n	8009f5c <HAL_SD_Init+0x82>
 8009f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d102      	bne.n	8009f52 <HAL_SD_Init+0x78>
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d004      	beq.n	8009f5c <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f58:	659a      	str	r2, [r3, #88]	; 0x58
 8009f5a:	e00b      	b.n	8009f74 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d104      	bne.n	8009f6e <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f6a:	659a      	str	r2, [r3, #88]	; 0x58
 8009f6c:	e002      	b.n	8009f74 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 f82e 	bl	800afdc <HAL_SD_ConfigWideBusOperation>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e026      	b.n	8009fd8 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009f8a:	f7f8 f8e3 	bl	8002154 <HAL_GetTick>
 8009f8e:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009f90:	e011      	b.n	8009fb6 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f92:	f7f8 f8df 	bl	8002154 <HAL_GetTick>
 8009f96:	4602      	mov	r2, r0
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fa0:	d109      	bne.n	8009fb6 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009fa8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e010      	b.n	8009fd8 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f001 f922 	bl	800b200 <HAL_SD_GetCardState>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b04      	cmp	r3, #4
 8009fc0:	d1e7      	bne.n	8009f92 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3728      	adds	r7, #40	; 0x28
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009fe0:	b590      	push	{r4, r7, lr}
 8009fe2:	b08d      	sub	sp, #52	; 0x34
 8009fe4:	af02      	add	r7, sp, #8
 8009fe6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009fec:	2300      	movs	r3, #0
 8009fee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009ffc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a000:	f7fd fde2 	bl	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a004:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d109      	bne.n	800a020 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a01a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e06a      	b.n	800a0f6 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a022:	0a1b      	lsrs	r3, r3, #8
 800a024:	4a36      	ldr	r2, [pc, #216]	; (800a100 <HAL_SD_InitCard+0x120>)
 800a026:	fba2 2303 	umull	r2, r3, r2, r3
 800a02a:	091b      	lsrs	r3, r3, #4
 800a02c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681c      	ldr	r4, [r3, #0]
 800a032:	466a      	mov	r2, sp
 800a034:	f107 0318 	add.w	r3, r7, #24
 800a038:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a03c:	e882 0003 	stmia.w	r2, {r0, r1}
 800a040:	f107 030c 	add.w	r3, r7, #12
 800a044:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a046:	4620      	mov	r0, r4
 800a048:	f002 fc9a 	bl	800c980 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4618      	mov	r0, r3
 800a052:	f002 fcdd 	bl	800ca10 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a060:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a062:	4a28      	ldr	r2, [pc, #160]	; (800a104 <HAL_SD_InitCard+0x124>)
 800a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a066:	fbb2 f3f3 	udiv	r3, r2, r3
 800a06a:	3301      	adds	r3, #1
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7f8 f87d 	bl	800216c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 f9b2 	bl	800b3dc <SD_PowerON>
 800a078:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00b      	beq.n	800a098 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	431a      	orrs	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	e02e      	b.n	800a0f6 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f001 f8d1 	bl	800b240 <SD_InitCard>
 800a09e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00b      	beq.n	800a0be <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	431a      	orrs	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e01b      	b.n	800a0f6 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f002 fd38 	bl	800cb3c <SDMMC_CmdBlockLength>
 800a0cc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0ce:	6a3b      	ldr	r3, [r7, #32]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00f      	beq.n	800a0f4 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a0b      	ldr	r2, [pc, #44]	; (800a108 <HAL_SD_InitCard+0x128>)
 800a0da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e000      	b.n	800a0f6 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	372c      	adds	r7, #44	; 0x2c
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd90      	pop	{r4, r7, pc}
 800a0fe:	bf00      	nop
 800a100:	014f8b59 	.word	0x014f8b59
 800a104:	00012110 	.word	0x00012110
 800a108:	1fe00fff 	.word	0x1fe00fff

0800a10c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b092      	sub	sp, #72	; 0x48
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
 800a118:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a11a:	f7f8 f81b 	bl	8002154 <HAL_GetTick>
 800a11e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d107      	bne.n	800a13e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a132:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e167      	b.n	800a40e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b01      	cmp	r3, #1
 800a148:	f040 815a 	bne.w	800a400 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	441a      	add	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d907      	bls.n	800a170 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a164:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	e14e      	b.n	800a40e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2203      	movs	r2, #3
 800a174:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2200      	movs	r2, #0
 800a17e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a184:	2b01      	cmp	r3, #1
 800a186:	d002      	beq.n	800a18e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18a:	025b      	lsls	r3, r3, #9
 800a18c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a18e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a192:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	025b      	lsls	r3, r3, #9
 800a198:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a19a:	2390      	movs	r3, #144	; 0x90
 800a19c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a19e:	2302      	movs	r3, #2
 800a1a0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f107 0214 	add.w	r2, r7, #20
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f002 fc95 	bl	800cae4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68da      	ldr	r2, [r3, #12]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1c8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d90a      	bls.n	800a1e6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f002 fcf3 	bl	800cbc8 <SDMMC_CmdReadMultiBlock>
 800a1e2:	6478      	str	r0, [r7, #68]	; 0x44
 800a1e4:	e009      	b.n	800a1fa <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f002 fcc5 	bl	800cb82 <SDMMC_CmdReadSingleBlock>
 800a1f8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a1fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d012      	beq.n	800a226 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a84      	ldr	r2, [pc, #528]	; (800a418 <HAL_SD_ReadBlocks+0x30c>)
 800a206:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a20c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a20e:	431a      	orrs	r2, r3
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e0f3      	b.n	800a40e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a22a:	e058      	b.n	800a2de <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a232:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a236:	2b00      	cmp	r3, #0
 800a238:	d033      	beq.n	800a2a2 <HAL_SD_ReadBlocks+0x196>
 800a23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a23c:	2b1f      	cmp	r3, #31
 800a23e:	d930      	bls.n	800a2a2 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800a240:	2300      	movs	r3, #0
 800a242:	643b      	str	r3, [r7, #64]	; 0x40
 800a244:	e027      	b.n	800a296 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f002 fbc2 	bl	800c9d4 <SDMMC_ReadFIFO>
 800a250:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a254:	b2da      	uxtb	r2, r3
 800a256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a258:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a25c:	3301      	adds	r3, #1
 800a25e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a262:	0a1b      	lsrs	r3, r3, #8
 800a264:	b2da      	uxtb	r2, r3
 800a266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a268:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a26c:	3301      	adds	r3, #1
 800a26e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	0c1b      	lsrs	r3, r3, #16
 800a274:	b2da      	uxtb	r2, r3
 800a276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a278:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a27c:	3301      	adds	r3, #1
 800a27e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	0e1b      	lsrs	r3, r3, #24
 800a284:	b2da      	uxtb	r2, r3
 800a286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a288:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a28c:	3301      	adds	r3, #1
 800a28e:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 800a290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a292:	3301      	adds	r3, #1
 800a294:	643b      	str	r3, [r7, #64]	; 0x40
 800a296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a298:	2b07      	cmp	r3, #7
 800a29a:	d9d4      	bls.n	800a246 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a29e:	3b20      	subs	r3, #32
 800a2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800a2a2:	f7f7 ff57 	bl	8002154 <HAL_GetTick>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d902      	bls.n	800a2b8 <HAL_SD_ReadBlocks+0x1ac>
 800a2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d112      	bne.n	800a2de <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a56      	ldr	r2, [pc, #344]	; (800a418 <HAL_SD_ReadBlocks+0x30c>)
 800a2be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e097      	b.n	800a40e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d09f      	beq.n	800a22c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68da      	ldr	r2, [r3, #12]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2fa:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a306:	2b00      	cmp	r3, #0
 800a308:	d022      	beq.n	800a350 <HAL_SD_ReadBlocks+0x244>
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d91f      	bls.n	800a350 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a314:	2b03      	cmp	r3, #3
 800a316:	d01b      	beq.n	800a350 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f002 fcbd 	bl	800cc9c <SDMMC_CmdStopTransfer>
 800a322:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800a324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a326:	2b00      	cmp	r3, #0
 800a328:	d012      	beq.n	800a350 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a3a      	ldr	r2, [pc, #232]	; (800a418 <HAL_SD_ReadBlocks+0x30c>)
 800a330:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a338:	431a      	orrs	r2, r3
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2201      	movs	r2, #1
 800a342:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e05e      	b.n	800a40e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a356:	f003 0308 	and.w	r3, r3, #8
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d012      	beq.n	800a384 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a2d      	ldr	r2, [pc, #180]	; (800a418 <HAL_SD_ReadBlocks+0x30c>)
 800a364:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a36a:	f043 0208 	orr.w	r2, r3, #8
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2201      	movs	r2, #1
 800a376:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	e044      	b.n	800a40e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38a:	f003 0302 	and.w	r3, r3, #2
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d012      	beq.n	800a3b8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a20      	ldr	r2, [pc, #128]	; (800a418 <HAL_SD_ReadBlocks+0x30c>)
 800a398:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39e:	f043 0202 	orr.w	r2, r3, #2
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e02a      	b.n	800a40e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3be:	f003 0320 	and.w	r3, r3, #32
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d012      	beq.n	800a3ec <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a13      	ldr	r2, [pc, #76]	; (800a418 <HAL_SD_ReadBlocks+0x30c>)
 800a3cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d2:	f043 0220 	orr.w	r2, r3, #32
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e010      	b.n	800a40e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a0a      	ldr	r2, [pc, #40]	; (800a41c <HAL_SD_ReadBlocks+0x310>)
 800a3f2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	e006      	b.n	800a40e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a404:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
  }
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3748      	adds	r7, #72	; 0x48
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	1fe00fff 	.word	0x1fe00fff
 800a41c:	18000f3a 	.word	0x18000f3a

0800a420 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b092      	sub	sp, #72	; 0x48
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a42e:	f7f7 fe91 	bl	8002154 <HAL_GetTick>
 800a432:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d107      	bne.n	800a452 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a446:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e16b      	b.n	800a72a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	f040 815e 	bne.w	800a71c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	441a      	add	r2, r3
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a470:	429a      	cmp	r2, r3
 800a472:	d907      	bls.n	800a484 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a478:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e152      	b.n	800a72a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2203      	movs	r2, #3
 800a488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2200      	movs	r2, #0
 800a492:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d002      	beq.n	800a4a2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	025b      	lsls	r3, r3, #9
 800a4a0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4a6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	025b      	lsls	r3, r3, #9
 800a4ac:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a4ae:	2390      	movs	r3, #144	; 0x90
 800a4b0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f107 0218 	add.w	r2, r7, #24
 800a4c6:	4611      	mov	r1, r2
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f002 fb0b 	bl	800cae4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68da      	ldr	r2, [r3, #12]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4dc:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d90a      	bls.n	800a4fa <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2220      	movs	r2, #32
 800a4e8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f002 fbaf 	bl	800cc54 <SDMMC_CmdWriteMultiBlock>
 800a4f6:	6478      	str	r0, [r7, #68]	; 0x44
 800a4f8:	e009      	b.n	800a50e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2210      	movs	r2, #16
 800a4fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a506:	4618      	mov	r0, r3
 800a508:	f002 fb81 	bl	800cc0e <SDMMC_CmdWriteSingleBlock>
 800a50c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a50e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a510:	2b00      	cmp	r3, #0
 800a512:	d012      	beq.n	800a53a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a86      	ldr	r2, [pc, #536]	; (800a734 <HAL_SD_WriteBlocks+0x314>)
 800a51a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a522:	431a      	orrs	r2, r3
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	e0f7      	b.n	800a72a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800a53e:	e05c      	b.n	800a5fa <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d037      	beq.n	800a5be <HAL_SD_WriteBlocks+0x19e>
 800a54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a550:	2b1f      	cmp	r3, #31
 800a552:	d934      	bls.n	800a5be <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800a554:	2300      	movs	r3, #0
 800a556:	643b      	str	r3, [r7, #64]	; 0x40
 800a558:	e02b      	b.n	800a5b2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800a55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a562:	3301      	adds	r3, #1
 800a564:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	021a      	lsls	r2, r3, #8
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	4313      	orrs	r3, r2
 800a570:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a574:	3301      	adds	r3, #1
 800a576:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	041a      	lsls	r2, r3, #16
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	4313      	orrs	r3, r2
 800a582:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a586:	3301      	adds	r3, #1
 800a588:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	061a      	lsls	r2, r3, #24
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	4313      	orrs	r3, r2
 800a594:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a598:	3301      	adds	r3, #1
 800a59a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f107 0214 	add.w	r2, r7, #20
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f002 fa21 	bl	800c9ee <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800a5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	643b      	str	r3, [r7, #64]	; 0x40
 800a5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b4:	2b07      	cmp	r3, #7
 800a5b6:	d9d0      	bls.n	800a55a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ba:	3b20      	subs	r3, #32
 800a5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800a5be:	f7f7 fdc9 	bl	8002154 <HAL_GetTick>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d902      	bls.n	800a5d4 <HAL_SD_WriteBlocks+0x1b4>
 800a5ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d112      	bne.n	800a5fa <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a56      	ldr	r2, [pc, #344]	; (800a734 <HAL_SD_WriteBlocks+0x314>)
 800a5da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	e097      	b.n	800a72a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a600:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800a604:	2b00      	cmp	r3, #0
 800a606:	d09b      	beq.n	800a540 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68da      	ldr	r2, [r3, #12]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a616:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a61e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a622:	2b00      	cmp	r3, #0
 800a624:	d022      	beq.n	800a66c <HAL_SD_WriteBlocks+0x24c>
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d91f      	bls.n	800a66c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a630:	2b03      	cmp	r3, #3
 800a632:	d01b      	beq.n	800a66c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4618      	mov	r0, r3
 800a63a:	f002 fb2f 	bl	800cc9c <SDMMC_CmdStopTransfer>
 800a63e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800a640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a642:	2b00      	cmp	r3, #0
 800a644:	d012      	beq.n	800a66c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a3a      	ldr	r2, [pc, #232]	; (800a734 <HAL_SD_WriteBlocks+0x314>)
 800a64c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a654:	431a      	orrs	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2201      	movs	r2, #1
 800a65e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e05e      	b.n	800a72a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a672:	f003 0308 	and.w	r3, r3, #8
 800a676:	2b00      	cmp	r3, #0
 800a678:	d012      	beq.n	800a6a0 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a2d      	ldr	r2, [pc, #180]	; (800a734 <HAL_SD_WriteBlocks+0x314>)
 800a680:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a686:	f043 0208 	orr.w	r2, r3, #8
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2201      	movs	r2, #1
 800a692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e044      	b.n	800a72a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a6:	f003 0302 	and.w	r3, r3, #2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d012      	beq.n	800a6d4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a20      	ldr	r2, [pc, #128]	; (800a734 <HAL_SD_WriteBlocks+0x314>)
 800a6b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ba:	f043 0202 	orr.w	r2, r3, #2
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e02a      	b.n	800a72a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6da:	f003 0310 	and.w	r3, r3, #16
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d012      	beq.n	800a708 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a13      	ldr	r2, [pc, #76]	; (800a734 <HAL_SD_WriteBlocks+0x314>)
 800a6e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ee:	f043 0210 	orr.w	r2, r3, #16
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	e010      	b.n	800a72a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a0a      	ldr	r2, [pc, #40]	; (800a738 <HAL_SD_WriteBlocks+0x318>)
 800a70e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800a718:	2300      	movs	r3, #0
 800a71a:	e006      	b.n	800a72a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a720:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
  }
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3748      	adds	r7, #72	; 0x48
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	1fe00fff 	.word	0x1fe00fff
 800a738:	18000f3a 	.word	0x18000f3a

0800a73c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a748:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a754:	2b00      	cmp	r3, #0
 800a756:	d008      	beq.n	800a76a <HAL_SD_IRQHandler+0x2e>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f003 0308 	and.w	r3, r3, #8
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d003      	beq.n	800a76a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f001 f926 	bl	800b9b4 <SD_Read_IT>
 800a768:	e19a      	b.n	800aaa0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 80ac 	beq.w	800a8d2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a782:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	4b59      	ldr	r3, [pc, #356]	; (800a8f4 <HAL_SD_IRQHandler+0x1b8>)
 800a790:	400b      	ands	r3, r1
 800a792:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a7a2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68da      	ldr	r2, [r3, #12]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7b2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f003 0308 	and.w	r3, r3, #8
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d038      	beq.n	800a830 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f003 0302 	and.w	r3, r3, #2
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d104      	bne.n	800a7d2 <HAL_SD_IRQHandler+0x96>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f003 0320 	and.w	r3, r3, #32
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d011      	beq.n	800a7f6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f002 fa60 	bl	800cc9c <SDMMC_CmdStopTransfer>
 800a7dc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d008      	beq.n	800a7f6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f95b 	bl	800aaac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a3f      	ldr	r2, [pc, #252]	; (800a8f8 <HAL_SD_IRQHandler+0x1bc>)
 800a7fc:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	2b00      	cmp	r3, #0
 800a814:	d104      	bne.n	800a820 <HAL_SD_IRQHandler+0xe4>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f003 0302 	and.w	r3, r3, #2
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d003      	beq.n	800a828 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f002 ff13 	bl	800d64c <HAL_SD_RxCpltCallback>
 800a826:	e13b      	b.n	800aaa0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f002 ff05 	bl	800d638 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a82e:	e137      	b.n	800aaa0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a836:	2b00      	cmp	r3, #0
 800a838:	f000 8132 	beq.w	800aaa0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2200      	movs	r2, #0
 800a842:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2200      	movs	r2, #0
 800a84a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2200      	movs	r2, #0
 800a852:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f003 0302 	and.w	r3, r3, #2
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d104      	bne.n	800a868 <HAL_SD_IRQHandler+0x12c>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f003 0320 	and.w	r3, r3, #32
 800a864:	2b00      	cmp	r3, #0
 800a866:	d011      	beq.n	800a88c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f002 fa15 	bl	800cc9c <SDMMC_CmdStopTransfer>
 800a872:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d008      	beq.n	800a88c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	431a      	orrs	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f910 	bl	800aaac <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f003 0310 	and.w	r3, r3, #16
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d104      	bne.n	800a8ae <HAL_SD_IRQHandler+0x172>
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f003 0320 	and.w	r3, r3, #32
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d002      	beq.n	800a8b4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f002 fec2 	bl	800d638 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f003 0301 	and.w	r3, r3, #1
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d105      	bne.n	800a8ca <HAL_SD_IRQHandler+0x18e>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f003 0302 	and.w	r3, r3, #2
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f000 80eb 	beq.w	800aaa0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f002 febe 	bl	800d64c <HAL_SD_RxCpltCallback>
}
 800a8d0:	e0e6      	b.n	800aaa0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00d      	beq.n	800a8fc <HAL_SD_IRQHandler+0x1c0>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f003 0308 	and.w	r3, r3, #8
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d008      	beq.n	800a8fc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f001 f8a8 	bl	800ba40 <SD_Write_IT>
 800a8f0:	e0d6      	b.n	800aaa0 <HAL_SD_IRQHandler+0x364>
 800a8f2:	bf00      	nop
 800a8f4:	ffff3ec5 	.word	0xffff3ec5
 800a8f8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a902:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a906:	2b00      	cmp	r3, #0
 800a908:	f000 809d 	beq.w	800aa46 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a912:	f003 0302 	and.w	r3, r3, #2
 800a916:	2b00      	cmp	r3, #0
 800a918:	d005      	beq.n	800a926 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a91e:	f043 0202 	orr.w	r2, r3, #2
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a92c:	f003 0308 	and.w	r3, r3, #8
 800a930:	2b00      	cmp	r3, #0
 800a932:	d005      	beq.n	800a940 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a938:	f043 0208 	orr.w	r2, r3, #8
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a946:	f003 0320 	and.w	r3, r3, #32
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d005      	beq.n	800a95a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a952:	f043 0220 	orr.w	r2, r3, #32
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a960:	f003 0310 	and.w	r3, r3, #16
 800a964:	2b00      	cmp	r3, #0
 800a966:	d005      	beq.n	800a974 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96c:	f043 0210 	orr.w	r2, r3, #16
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a4b      	ldr	r2, [pc, #300]	; (800aaa8 <HAL_SD_IRQHandler+0x36c>)
 800a97a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a98a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68da      	ldr	r2, [r3, #12]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a99a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a9aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68da      	ldr	r2, [r3, #12]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a9ba:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f002 f96b 	bl	800cc9c <SDMMC_CmdStopTransfer>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9cc:	431a      	orrs	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68da      	ldr	r2, [r3, #12]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9e0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9ea:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f003 0308 	and.w	r3, r3, #8
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00a      	beq.n	800aa0c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f851 	bl	800aaac <HAL_SD_ErrorCallback>
}
 800aa0a:	e049      	b.n	800aaa0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d044      	beq.n	800aaa0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d040      	beq.n	800aaa0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800aa2c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2200      	movs	r2, #0
 800aa34:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f834 	bl	800aaac <HAL_SD_ErrorCallback>
}
 800aa44:	e02c      	b.n	800aaa0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d025      	beq.n	800aaa0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa5c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10c      	bne.n	800aa86 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f003 0320 	and.w	r3, r3, #32
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 f84a 	bl	800bb10 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800aa7c:	e010      	b.n	800aaa0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f001 f832 	bl	800bae8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800aa84:	e00c      	b.n	800aaa0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f003 0320 	and.w	r3, r3, #32
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d003      	beq.n	800aa98 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f001 f833 	bl	800bafc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800aa96:	e003      	b.n	800aaa0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f001 f81b 	bl	800bad4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800aa9e:	e7ff      	b.n	800aaa0 <HAL_SD_IRQHandler+0x364>
 800aaa0:	bf00      	nop
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	18000f3a 	.word	0x18000f3a

0800aaac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aace:	0f9b      	lsrs	r3, r3, #30
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aada:	0e9b      	lsrs	r3, r3, #26
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	f003 030f 	and.w	r3, r3, #15
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaec:	0e1b      	lsrs	r3, r3, #24
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	f003 0303 	and.w	r3, r3, #3
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aafe:	0c1b      	lsrs	r3, r3, #16
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab0a:	0a1b      	lsrs	r3, r3, #8
 800ab0c:	b2da      	uxtb	r2, r3
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab16:	b2da      	uxtb	r2, r3
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab20:	0d1b      	lsrs	r3, r3, #20
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab2c:	0c1b      	lsrs	r3, r3, #16
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	f003 030f 	and.w	r3, r3, #15
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab3e:	0bdb      	lsrs	r3, r3, #15
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	b2da      	uxtb	r2, r3
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab50:	0b9b      	lsrs	r3, r3, #14
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab62:	0b5b      	lsrs	r3, r3, #13
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	f003 0301 	and.w	r3, r3, #1
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab74:	0b1b      	lsrs	r3, r3, #12
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	f003 0301 	and.w	r3, r3, #1
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	2200      	movs	r2, #0
 800ab86:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d163      	bne.n	800ac58 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab94:	009a      	lsls	r2, r3, #2
 800ab96:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800aba0:	0f92      	lsrs	r2, r2, #30
 800aba2:	431a      	orrs	r2, r3
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abac:	0edb      	lsrs	r3, r3, #27
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	f003 0307 	and.w	r3, r3, #7
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abbe:	0e1b      	lsrs	r3, r3, #24
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	f003 0307 	and.w	r3, r3, #7
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abd0:	0d5b      	lsrs	r3, r3, #21
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	f003 0307 	and.w	r3, r3, #7
 800abd8:	b2da      	uxtb	r2, r3
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abe2:	0c9b      	lsrs	r3, r3, #18
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	f003 0307 	and.w	r3, r3, #7
 800abea:	b2da      	uxtb	r2, r3
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abf4:	0bdb      	lsrs	r3, r3, #15
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	f003 0307 	and.w	r3, r3, #7
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	1c5a      	adds	r2, r3, #1
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	7e1b      	ldrb	r3, [r3, #24]
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	f003 0307 	and.w	r3, r3, #7
 800ac16:	3302      	adds	r3, #2
 800ac18:	2201      	movs	r2, #1
 800ac1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac22:	fb03 f202 	mul.w	r2, r3, r2
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	7a1b      	ldrb	r3, [r3, #8]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	f003 030f 	and.w	r3, r3, #15
 800ac34:	2201      	movs	r2, #1
 800ac36:	409a      	lsls	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ac44:	0a52      	lsrs	r2, r2, #9
 800ac46:	fb03 f202 	mul.w	r2, r3, r2
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac54:	655a      	str	r2, [r3, #84]	; 0x54
 800ac56:	e031      	b.n	800acbc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d11d      	bne.n	800ac9c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac64:	041b      	lsls	r3, r3, #16
 800ac66:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac6e:	0c1b      	lsrs	r3, r3, #16
 800ac70:	431a      	orrs	r2, r3
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	029a      	lsls	r2, r3, #10
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac90:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	655a      	str	r2, [r3, #84]	; 0x54
 800ac9a:	e00f      	b.n	800acbc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a58      	ldr	r2, [pc, #352]	; (800ae04 <HAL_SD_GetCardCSD+0x344>)
 800aca2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	e09d      	b.n	800adf8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acc0:	0b9b      	lsrs	r3, r3, #14
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	f003 0301 	and.w	r3, r3, #1
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acd2:	09db      	lsrs	r3, r3, #7
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acda:	b2da      	uxtb	r2, r3
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acea:	b2da      	uxtb	r2, r3
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acf4:	0fdb      	lsrs	r3, r3, #31
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad00:	0f5b      	lsrs	r3, r3, #29
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	f003 0303 	and.w	r3, r3, #3
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad12:	0e9b      	lsrs	r3, r3, #26
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	f003 0307 	and.w	r3, r3, #7
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad24:	0d9b      	lsrs	r3, r3, #22
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	f003 030f 	and.w	r3, r3, #15
 800ad2c:	b2da      	uxtb	r2, r3
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad36:	0d5b      	lsrs	r3, r3, #21
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	f003 0301 	and.w	r3, r3, #1
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad52:	0c1b      	lsrs	r3, r3, #16
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad66:	0bdb      	lsrs	r3, r3, #15
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	f003 0301 	and.w	r3, r3, #1
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad7a:	0b9b      	lsrs	r3, r3, #14
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	f003 0301 	and.w	r3, r3, #1
 800ad82:	b2da      	uxtb	r2, r3
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad8e:	0b5b      	lsrs	r3, r3, #13
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	f003 0301 	and.w	r3, r3, #1
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ada2:	0b1b      	lsrs	r3, r3, #12
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adb6:	0a9b      	lsrs	r3, r3, #10
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	f003 0303 	and.w	r3, r3, #3
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adca:	0a1b      	lsrs	r3, r3, #8
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	f003 0303 	and.w	r3, r3, #3
 800add2:	b2da      	uxtb	r2, r3
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adde:	085b      	lsrs	r3, r3, #1
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ade6:	b2da      	uxtb	r2, r3
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	1fe00fff 	.word	0x1fe00fff

0800ae08 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b094      	sub	sp, #80	; 0x50
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ae12:	2300      	movs	r3, #0
 800ae14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b03      	cmp	r3, #3
 800ae22:	d101      	bne.n	800ae28 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e0a7      	b.n	800af78 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ae28:	f107 0308 	add.w	r3, r7, #8
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fb62 	bl	800b4f8 <SD_SendSDStatus>
 800ae34:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d011      	beq.n	800ae60 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a4f      	ldr	r2, [pc, #316]	; (800af80 <HAL_SD_GetCardStatus+0x178>)
 800ae42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ae5e:	e070      	b.n	800af42 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	099b      	lsrs	r3, r3, #6
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	f003 0303 	and.w	r3, r3, #3
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	095b      	lsrs	r3, r3, #5
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	f003 0301 	and.w	r3, r3, #1
 800ae7a:	b2da      	uxtb	r2, r3
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	0a1b      	lsrs	r3, r3, #8
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	0e1b      	lsrs	r3, r3, #24
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	4313      	orrs	r3, r2
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	061a      	lsls	r2, r3, #24
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	021b      	lsls	r3, r3, #8
 800aea2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aea6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	0a1b      	lsrs	r3, r3, #8
 800aeac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aeb0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	0e1b      	lsrs	r3, r3, #24
 800aeb6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	0a1b      	lsrs	r3, r3, #8
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	0d1b      	lsrs	r3, r3, #20
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	f003 030f 	and.w	r3, r3, #15
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	0c1b      	lsrs	r3, r3, #16
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	4313      	orrs	r3, r2
 800aef4:	b29a      	uxth	r2, r3
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	0a9b      	lsrs	r3, r3, #10
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af04:	b2da      	uxtb	r2, r3
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	0a1b      	lsrs	r3, r3, #8
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	f003 0303 	and.w	r3, r3, #3
 800af14:	b2da      	uxtb	r2, r3
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	091b      	lsrs	r3, r3, #4
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	f003 030f 	and.w	r3, r3, #15
 800af24:	b2da      	uxtb	r2, r3
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	f003 030f 	and.w	r3, r3, #15
 800af32:	b2da      	uxtb	r2, r3
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	0e1b      	lsrs	r3, r3, #24
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af4a:	4618      	mov	r0, r3
 800af4c:	f001 fdf6 	bl	800cb3c <SDMMC_CmdBlockLength>
 800af50:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800af52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00d      	beq.n	800af74 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a08      	ldr	r2, [pc, #32]	; (800af80 <HAL_SD_GetCardStatus+0x178>)
 800af5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af64:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800af74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3750      	adds	r7, #80	; 0x50
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	1fe00fff 	.word	0x1fe00fff

0800af84 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800afdc:	b590      	push	{r4, r7, lr}
 800afde:	b08d      	sub	sp, #52	; 0x34
 800afe0:	af02      	add	r7, sp, #8
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800afe6:	2300      	movs	r3, #0
 800afe8:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800afea:	2300      	movs	r3, #0
 800afec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2203      	movs	r2, #3
 800aff4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affc:	2b03      	cmp	r3, #3
 800affe:	d02e      	beq.n	800b05e <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b006:	d106      	bne.n	800b016 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b00c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	635a      	str	r2, [r3, #52]	; 0x34
 800b014:	e029      	b.n	800b06a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b01c:	d10a      	bne.n	800b034 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fb62 	bl	800b6e8 <SD_WideBus_Enable>
 800b024:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	431a      	orrs	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	635a      	str	r2, [r3, #52]	; 0x34
 800b032:	e01a      	b.n	800b06a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10a      	bne.n	800b050 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fb9f 	bl	800b77e <SD_WideBus_Disable>
 800b040:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	431a      	orrs	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	635a      	str	r2, [r3, #52]	; 0x34
 800b04e:	e00c      	b.n	800b06a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b054:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	635a      	str	r2, [r3, #52]	; 0x34
 800b05c:	e005      	b.n	800b06a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b062:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d007      	beq.n	800b082 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a5e      	ldr	r2, [pc, #376]	; (800b1f0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b078:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b080:	e094      	b.n	800b1ac <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b082:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b086:	f7fc fd9f 	bl	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b08a:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800b08c:	6a3b      	ldr	r3, [r7, #32]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f000 8083 	beq.w	800b19a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	695a      	ldr	r2, [r3, #20]
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	4950      	ldr	r1, [pc, #320]	; (800b1f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b0b2:	fba1 1303 	umull	r1, r3, r1, r3
 800b0b6:	0e1b      	lsrs	r3, r3, #24
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d303      	bcc.n	800b0c4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	695b      	ldr	r3, [r3, #20]
 800b0c0:	61bb      	str	r3, [r7, #24]
 800b0c2:	e05a      	b.n	800b17a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0cc:	d103      	bne.n	800b0d6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	695b      	ldr	r3, [r3, #20]
 800b0d2:	61bb      	str	r3, [r7, #24]
 800b0d4:	e051      	b.n	800b17a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0de:	d126      	bne.n	800b12e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	695b      	ldr	r3, [r3, #20]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d10e      	bne.n	800b106 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800b0e8:	6a3b      	ldr	r3, [r7, #32]
 800b0ea:	4a43      	ldr	r2, [pc, #268]	; (800b1f8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d906      	bls.n	800b0fe <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b0f0:	6a3b      	ldr	r3, [r7, #32]
 800b0f2:	4a40      	ldr	r2, [pc, #256]	; (800b1f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f8:	0e5b      	lsrs	r3, r3, #25
 800b0fa:	61bb      	str	r3, [r7, #24]
 800b0fc:	e03d      	b.n	800b17a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	695b      	ldr	r3, [r3, #20]
 800b102:	61bb      	str	r3, [r7, #24]
 800b104:	e039      	b.n	800b17a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	005b      	lsls	r3, r3, #1
 800b10c:	6a3a      	ldr	r2, [r7, #32]
 800b10e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b112:	4a39      	ldr	r2, [pc, #228]	; (800b1f8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d906      	bls.n	800b126 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b118:	6a3b      	ldr	r3, [r7, #32]
 800b11a:	4a36      	ldr	r2, [pc, #216]	; (800b1f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b11c:	fba2 2303 	umull	r2, r3, r2, r3
 800b120:	0e5b      	lsrs	r3, r3, #25
 800b122:	61bb      	str	r3, [r7, #24]
 800b124:	e029      	b.n	800b17a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	695b      	ldr	r3, [r3, #20]
 800b12a:	61bb      	str	r3, [r7, #24]
 800b12c:	e025      	b.n	800b17a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	695b      	ldr	r3, [r3, #20]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10e      	bne.n	800b154 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	4a30      	ldr	r2, [pc, #192]	; (800b1fc <HAL_SD_ConfigWideBusOperation+0x220>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d906      	bls.n	800b14c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b13e:	6a3b      	ldr	r3, [r7, #32]
 800b140:	4a2c      	ldr	r2, [pc, #176]	; (800b1f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b142:	fba2 2303 	umull	r2, r3, r2, r3
 800b146:	0e1b      	lsrs	r3, r3, #24
 800b148:	61bb      	str	r3, [r7, #24]
 800b14a:	e016      	b.n	800b17a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	61bb      	str	r3, [r7, #24]
 800b152:	e012      	b.n	800b17a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	695b      	ldr	r3, [r3, #20]
 800b158:	005b      	lsls	r3, r3, #1
 800b15a:	6a3a      	ldr	r2, [r7, #32]
 800b15c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b160:	4a26      	ldr	r2, [pc, #152]	; (800b1fc <HAL_SD_ConfigWideBusOperation+0x220>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d906      	bls.n	800b174 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	4a22      	ldr	r2, [pc, #136]	; (800b1f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b16a:	fba2 2303 	umull	r2, r3, r2, r3
 800b16e:	0e1b      	lsrs	r3, r3, #24
 800b170:	61bb      	str	r3, [r7, #24]
 800b172:	e002      	b.n	800b17a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	695b      	ldr	r3, [r3, #20]
 800b178:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681c      	ldr	r4, [r3, #0]
 800b17e:	466a      	mov	r2, sp
 800b180:	f107 0314 	add.w	r3, r7, #20
 800b184:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b188:	e882 0003 	stmia.w	r2, {r0, r1}
 800b18c:	f107 0308 	add.w	r3, r7, #8
 800b190:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b192:	4620      	mov	r0, r4
 800b194:	f001 fbf4 	bl	800c980 <SDMMC_Init>
 800b198:	e008      	b.n	800b1ac <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b19e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f001 fcc1 	bl	800cb3c <SDMMC_CmdBlockLength>
 800b1ba:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00c      	beq.n	800b1dc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a0a      	ldr	r2, [pc, #40]	; (800b1f0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b1c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1ce:	69fb      	ldr	r3, [r7, #28]
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	372c      	adds	r7, #44	; 0x2c
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd90      	pop	{r4, r7, pc}
 800b1f0:	1fe00fff 	.word	0x1fe00fff
 800b1f4:	55e63b89 	.word	0x55e63b89
 800b1f8:	02faf080 	.word	0x02faf080
 800b1fc:	017d7840 	.word	0x017d7840

0800b200 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b208:	2300      	movs	r3, #0
 800b20a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b20c:	f107 030c 	add.w	r3, r7, #12
 800b210:	4619      	mov	r1, r3
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fa40 	bl	800b698 <SD_SendStatus>
 800b218:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d005      	beq.n	800b22c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	431a      	orrs	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	0a5b      	lsrs	r3, r3, #9
 800b230:	f003 030f 	and.w	r3, r3, #15
 800b234:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b236:	693b      	ldr	r3, [r7, #16]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3718      	adds	r7, #24
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b090      	sub	sp, #64	; 0x40
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800b248:	2300      	movs	r3, #0
 800b24a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800b24c:	f7f6 ff82 	bl	8002154 <HAL_GetTick>
 800b250:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4618      	mov	r0, r3
 800b258:	f001 fbeb 	bl	800ca32 <SDMMC_GetPowerState>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d102      	bne.n	800b268 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b262:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b266:	e0b5      	b.n	800b3d4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b26c:	2b03      	cmp	r3, #3
 800b26e:	d02e      	beq.n	800b2ce <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4618      	mov	r0, r3
 800b276:	f001 fe36 	bl	800cee6 <SDMMC_CmdSendCID>
 800b27a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d001      	beq.n	800b286 <SD_InitCard+0x46>
    {
      return errorstate;
 800b282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b284:	e0a6      	b.n	800b3d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2100      	movs	r1, #0
 800b28c:	4618      	mov	r0, r3
 800b28e:	f001 fc16 	bl	800cabe <SDMMC_GetResponse>
 800b292:	4602      	mov	r2, r0
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2104      	movs	r1, #4
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f001 fc0d 	bl	800cabe <SDMMC_GetResponse>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2108      	movs	r1, #8
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f001 fc04 	bl	800cabe <SDMMC_GetResponse>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	210c      	movs	r1, #12
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f001 fbfb 	bl	800cabe <SDMMC_GetResponse>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d2:	2b03      	cmp	r3, #3
 800b2d4:	d01d      	beq.n	800b312 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800b2d6:	e019      	b.n	800b30c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f107 020a 	add.w	r2, r7, #10
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f001 fe3e 	bl	800cf64 <SDMMC_CmdSetRelAdd>
 800b2e8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800b2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d001      	beq.n	800b2f4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f2:	e06f      	b.n	800b3d4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800b2f4:	f7f6 ff2e 	bl	8002154 <HAL_GetTick>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2fc:	1ad3      	subs	r3, r2, r3
 800b2fe:	f241 3287 	movw	r2, #4999	; 0x1387
 800b302:	4293      	cmp	r3, r2
 800b304:	d902      	bls.n	800b30c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800b306:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b30a:	e063      	b.n	800b3d4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800b30c:	897b      	ldrh	r3, [r7, #10]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d0e2      	beq.n	800b2d8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b316:	2b03      	cmp	r3, #3
 800b318:	d036      	beq.n	800b388 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b31a:	897b      	ldrh	r3, [r7, #10]
 800b31c:	461a      	mov	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b32a:	041b      	lsls	r3, r3, #16
 800b32c:	4619      	mov	r1, r3
 800b32e:	4610      	mov	r0, r2
 800b330:	f001 fdf8 	bl	800cf24 <SDMMC_CmdSendCSD>
 800b334:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <SD_InitCard+0x100>
    {
      return errorstate;
 800b33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33e:	e049      	b.n	800b3d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2100      	movs	r1, #0
 800b346:	4618      	mov	r0, r3
 800b348:	f001 fbb9 	bl	800cabe <SDMMC_GetResponse>
 800b34c:	4602      	mov	r2, r0
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2104      	movs	r1, #4
 800b358:	4618      	mov	r0, r3
 800b35a:	f001 fbb0 	bl	800cabe <SDMMC_GetResponse>
 800b35e:	4602      	mov	r2, r0
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2108      	movs	r1, #8
 800b36a:	4618      	mov	r0, r3
 800b36c:	f001 fba7 	bl	800cabe <SDMMC_GetResponse>
 800b370:	4602      	mov	r2, r0
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	210c      	movs	r1, #12
 800b37c:	4618      	mov	r0, r3
 800b37e:	f001 fb9e 	bl	800cabe <SDMMC_GetResponse>
 800b382:	4602      	mov	r2, r0
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2104      	movs	r1, #4
 800b38e:	4618      	mov	r0, r3
 800b390:	f001 fb95 	bl	800cabe <SDMMC_GetResponse>
 800b394:	4603      	mov	r3, r0
 800b396:	0d1a      	lsrs	r2, r3, #20
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b39c:	f107 030c 	add.w	r3, r7, #12
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7ff fb8c 	bl	800aac0 <HAL_SD_GetCardCSD>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d002      	beq.n	800b3b4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b3b2:	e00f      	b.n	800b3d4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3bc:	041b      	lsls	r3, r3, #16
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	f001 fca7 	bl	800cd14 <SDMMC_CmdSelDesel>
 800b3c6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800b3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d001      	beq.n	800b3d2 <SD_InitCard+0x192>
  {
    return errorstate;
 800b3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d0:	e000      	b.n	800b3d4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3740      	adds	r7, #64	; 0x40
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f001 fcb0 	bl	800cd5a <SDMMC_CmdGoIdleState>
 800b3fa:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	e072      	b.n	800b4ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f001 fcc3 	bl	800cd96 <SDMMC_CmdOperCond>
 800b410:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b418:	d10d      	bne.n	800b436 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4618      	mov	r0, r3
 800b426:	f001 fc98 	bl	800cd5a <SDMMC_CmdGoIdleState>
 800b42a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d004      	beq.n	800b43c <SD_PowerON+0x60>
    {
      return errorstate;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	e05a      	b.n	800b4ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2201      	movs	r2, #1
 800b43a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b440:	2b01      	cmp	r3, #1
 800b442:	d137      	bne.n	800b4b4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2100      	movs	r1, #0
 800b44a:	4618      	mov	r0, r3
 800b44c:	f001 fcc3 	bl	800cdd6 <SDMMC_CmdAppCommand>
 800b450:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d02d      	beq.n	800b4b4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b458:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b45c:	e046      	b.n	800b4ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2100      	movs	r1, #0
 800b464:	4618      	mov	r0, r3
 800b466:	f001 fcb6 	bl	800cdd6 <SDMMC_CmdAppCommand>
 800b46a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <SD_PowerON+0x9a>
    {
      return errorstate;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	e03a      	b.n	800b4ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	491e      	ldr	r1, [pc, #120]	; (800b4f4 <SD_PowerON+0x118>)
 800b47c:	4618      	mov	r0, r3
 800b47e:	f001 fccd 	bl	800ce1c <SDMMC_CmdAppOperCommand>
 800b482:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d002      	beq.n	800b490 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b48a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b48e:	e02d      	b.n	800b4ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2100      	movs	r1, #0
 800b496:	4618      	mov	r0, r3
 800b498:	f001 fb11 	bl	800cabe <SDMMC_GetResponse>
 800b49c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	0fdb      	lsrs	r3, r3, #31
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d101      	bne.n	800b4aa <SD_PowerON+0xce>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e000      	b.n	800b4ac <SD_PowerON+0xd0>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	613b      	str	r3, [r7, #16]

    count++;
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d802      	bhi.n	800b4c4 <SD_PowerON+0xe8>
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d0cc      	beq.n	800b45e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d902      	bls.n	800b4d4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b4ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b4d2:	e00b      	b.n	800b4ec <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	c1100000 	.word	0xc1100000

0800b4f8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b08c      	sub	sp, #48	; 0x30
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b502:	f7f6 fe27 	bl	8002154 <HAL_GetTick>
 800b506:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2100      	movs	r1, #0
 800b512:	4618      	mov	r0, r3
 800b514:	f001 fad3 	bl	800cabe <SDMMC_GetResponse>
 800b518:	4603      	mov	r3, r0
 800b51a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b51e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b522:	d102      	bne.n	800b52a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b524:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b528:	e0b0      	b.n	800b68c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2140      	movs	r1, #64	; 0x40
 800b530:	4618      	mov	r0, r3
 800b532:	f001 fb03 	bl	800cb3c <SDMMC_CmdBlockLength>
 800b536:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b538:	6a3b      	ldr	r3, [r7, #32]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d005      	beq.n	800b54a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	e0a0      	b.n	800b68c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b552:	041b      	lsls	r3, r3, #16
 800b554:	4619      	mov	r1, r3
 800b556:	4610      	mov	r0, r2
 800b558:	f001 fc3d 	bl	800cdd6 <SDMMC_CmdAppCommand>
 800b55c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b55e:	6a3b      	ldr	r3, [r7, #32]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d005      	beq.n	800b570 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b56c:	6a3b      	ldr	r3, [r7, #32]
 800b56e:	e08d      	b.n	800b68c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b574:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b576:	2340      	movs	r3, #64	; 0x40
 800b578:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b57a:	2360      	movs	r3, #96	; 0x60
 800b57c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b57e:	2302      	movs	r3, #2
 800b580:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b582:	2300      	movs	r3, #0
 800b584:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b586:	2301      	movs	r3, #1
 800b588:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f107 0208 	add.w	r2, r7, #8
 800b592:	4611      	mov	r1, r2
 800b594:	4618      	mov	r0, r3
 800b596:	f001 faa5 	bl	800cae4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f001 fd25 	bl	800cfee <SDMMC_CmdStatusRegister>
 800b5a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b5a6:	6a3b      	ldr	r3, [r7, #32]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d02b      	beq.n	800b604 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b5b4:	6a3b      	ldr	r3, [r7, #32]
 800b5b6:	e069      	b.n	800b68c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d013      	beq.n	800b5ee <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5ca:	e00d      	b.n	800b5e8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f001 f9ff 	bl	800c9d4 <SDMMC_ReadFIFO>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5da:	601a      	str	r2, [r3, #0]
        pData++;
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	3304      	adds	r3, #4
 800b5e0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ea:	2b07      	cmp	r3, #7
 800b5ec:	d9ee      	bls.n	800b5cc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b5ee:	f7f6 fdb1 	bl	8002154 <HAL_GetTick>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5fc:	d102      	bne.n	800b604 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b5fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b602:	e043      	b.n	800b68c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b60a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d0d2      	beq.n	800b5b8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b618:	f003 0308 	and.w	r3, r3, #8
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b620:	2308      	movs	r3, #8
 800b622:	e033      	b.n	800b68c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b62a:	f003 0302 	and.w	r3, r3, #2
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b632:	2302      	movs	r3, #2
 800b634:	e02a      	b.n	800b68c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b63c:	f003 0320 	and.w	r3, r3, #32
 800b640:	2b00      	cmp	r3, #0
 800b642:	d017      	beq.n	800b674 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b644:	2320      	movs	r3, #32
 800b646:	e021      	b.n	800b68c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4618      	mov	r0, r3
 800b64e:	f001 f9c1 	bl	800c9d4 <SDMMC_ReadFIFO>
 800b652:	4602      	mov	r2, r0
 800b654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b656:	601a      	str	r2, [r3, #0]
    pData++;
 800b658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65a:	3304      	adds	r3, #4
 800b65c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b65e:	f7f6 fd79 	bl	8002154 <HAL_GetTick>
 800b662:	4602      	mov	r2, r0
 800b664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b66c:	d102      	bne.n	800b674 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b66e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b672:	e00b      	b.n	800b68c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b67a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1e2      	bne.n	800b648 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a03      	ldr	r2, [pc, #12]	; (800b694 <SD_SendSDStatus+0x19c>)
 800b688:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3730      	adds	r7, #48	; 0x30
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	18000f3a 	.word	0x18000f3a

0800b698 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d102      	bne.n	800b6ae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b6a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6ac:	e018      	b.n	800b6e0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6b6:	041b      	lsls	r3, r3, #16
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	f001 fc74 	bl	800cfa8 <SDMMC_CmdSendStatus>
 800b6c0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <SD_SendStatus+0x34>
  {
    return errorstate;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	e009      	b.n	800b6e0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f001 f9f3 	bl	800cabe <SDMMC_GetResponse>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	60fb      	str	r3, [r7, #12]
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	4618      	mov	r0, r3
 800b700:	f001 f9dd 	bl	800cabe <SDMMC_GetResponse>
 800b704:	4603      	mov	r3, r0
 800b706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b70a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b70e:	d102      	bne.n	800b716 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b710:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b714:	e02f      	b.n	800b776 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b716:	f107 030c 	add.w	r3, r7, #12
 800b71a:	4619      	mov	r1, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f879 	bl	800b814 <SD_FindSCR>
 800b722:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	e023      	b.n	800b776 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b734:	2b00      	cmp	r3, #0
 800b736:	d01c      	beq.n	800b772 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b740:	041b      	lsls	r3, r3, #16
 800b742:	4619      	mov	r1, r3
 800b744:	4610      	mov	r0, r2
 800b746:	f001 fb46 	bl	800cdd6 <SDMMC_CmdAppCommand>
 800b74a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	e00f      	b.n	800b776 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2102      	movs	r1, #2
 800b75c:	4618      	mov	r0, r3
 800b75e:	f001 fb7d 	bl	800ce5c <SDMMC_CmdBusWidth>
 800b762:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d001      	beq.n	800b76e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	e003      	b.n	800b776 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b76e:	2300      	movs	r3, #0
 800b770:	e001      	b.n	800b776 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b772:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b776:	4618      	mov	r0, r3
 800b778:	3718      	adds	r7, #24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b086      	sub	sp, #24
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b786:	2300      	movs	r3, #0
 800b788:	60fb      	str	r3, [r7, #12]
 800b78a:	2300      	movs	r3, #0
 800b78c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2100      	movs	r1, #0
 800b794:	4618      	mov	r0, r3
 800b796:	f001 f992 	bl	800cabe <SDMMC_GetResponse>
 800b79a:	4603      	mov	r3, r0
 800b79c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7a4:	d102      	bne.n	800b7ac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b7a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7aa:	e02f      	b.n	800b80c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b7ac:	f107 030c 	add.w	r3, r7, #12
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f82e 	bl	800b814 <SD_FindSCR>
 800b7b8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d001      	beq.n	800b7c4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	e023      	b.n	800b80c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d01c      	beq.n	800b808 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7d6:	041b      	lsls	r3, r3, #16
 800b7d8:	4619      	mov	r1, r3
 800b7da:	4610      	mov	r0, r2
 800b7dc:	f001 fafb 	bl	800cdd6 <SDMMC_CmdAppCommand>
 800b7e0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d001      	beq.n	800b7ec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	e00f      	b.n	800b80c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f001 fb32 	bl	800ce5c <SDMMC_CmdBusWidth>
 800b7f8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d001      	beq.n	800b804 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	e003      	b.n	800b80c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b804:	2300      	movs	r3, #0
 800b806:	e001      	b.n	800b80c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b808:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3718      	adds	r7, #24
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b08e      	sub	sp, #56	; 0x38
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b81e:	f7f6 fc99 	bl	8002154 <HAL_GetTick>
 800b822:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b824:	2300      	movs	r3, #0
 800b826:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b828:	2300      	movs	r3, #0
 800b82a:	60bb      	str	r3, [r7, #8]
 800b82c:	2300      	movs	r3, #0
 800b82e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2108      	movs	r1, #8
 800b83a:	4618      	mov	r0, r3
 800b83c:	f001 f97e 	bl	800cb3c <SDMMC_CmdBlockLength>
 800b840:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b844:	2b00      	cmp	r3, #0
 800b846:	d001      	beq.n	800b84c <SD_FindSCR+0x38>
  {
    return errorstate;
 800b848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84a:	e0ad      	b.n	800b9a8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b854:	041b      	lsls	r3, r3, #16
 800b856:	4619      	mov	r1, r3
 800b858:	4610      	mov	r0, r2
 800b85a:	f001 fabc 	bl	800cdd6 <SDMMC_CmdAppCommand>
 800b85e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b862:	2b00      	cmp	r3, #0
 800b864:	d001      	beq.n	800b86a <SD_FindSCR+0x56>
  {
    return errorstate;
 800b866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b868:	e09e      	b.n	800b9a8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b86a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b86e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b870:	2308      	movs	r3, #8
 800b872:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b874:	2330      	movs	r3, #48	; 0x30
 800b876:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b878:	2302      	movs	r3, #2
 800b87a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b880:	2301      	movs	r3, #1
 800b882:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f107 0210 	add.w	r2, r7, #16
 800b88c:	4611      	mov	r1, r2
 800b88e:	4618      	mov	r0, r3
 800b890:	f001 f928 	bl	800cae4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4618      	mov	r0, r3
 800b89a:	f001 fb02 	bl	800cea2 <SDMMC_CmdSendSCR>
 800b89e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d027      	beq.n	800b8f6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a8:	e07e      	b.n	800b9a8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d113      	bne.n	800b8e0 <SD_FindSCR+0xcc>
 800b8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d110      	bne.n	800b8e0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f001 f886 	bl	800c9d4 <SDMMC_ReadFIFO>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f001 f87f 	bl	800c9d4 <SDMMC_ReadFIFO>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	60fb      	str	r3, [r7, #12]
      index++;
 800b8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8dc:	3301      	adds	r3, #1
 800b8de:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b8e0:	f7f6 fc38 	bl	8002154 <HAL_GetTick>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8ee:	d102      	bne.n	800b8f6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b8f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8f4:	e058      	b.n	800b9a8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8fc:	f240 532a 	movw	r3, #1322	; 0x52a
 800b900:	4013      	ands	r3, r2
 800b902:	2b00      	cmp	r3, #0
 800b904:	d0d1      	beq.n	800b8aa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b90c:	f003 0308 	and.w	r3, r3, #8
 800b910:	2b00      	cmp	r3, #0
 800b912:	d005      	beq.n	800b920 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2208      	movs	r2, #8
 800b91a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b91c:	2308      	movs	r3, #8
 800b91e:	e043      	b.n	800b9a8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b926:	f003 0302 	and.w	r3, r3, #2
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d005      	beq.n	800b93a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2202      	movs	r2, #2
 800b934:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b936:	2302      	movs	r3, #2
 800b938:	e036      	b.n	800b9a8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b940:	f003 0320 	and.w	r3, r3, #32
 800b944:	2b00      	cmp	r3, #0
 800b946:	d005      	beq.n	800b954 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2220      	movs	r2, #32
 800b94e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b950:	2320      	movs	r3, #32
 800b952:	e029      	b.n	800b9a8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a15      	ldr	r2, [pc, #84]	; (800b9b0 <SD_FindSCR+0x19c>)
 800b95a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	061a      	lsls	r2, r3, #24
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	021b      	lsls	r3, r3, #8
 800b964:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b968:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	0a1b      	lsrs	r3, r3, #8
 800b96e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b972:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	0e1b      	lsrs	r3, r3, #24
 800b978:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97c:	601a      	str	r2, [r3, #0]
    scr++;
 800b97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b980:	3304      	adds	r3, #4
 800b982:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	061a      	lsls	r2, r3, #24
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	021b      	lsls	r3, r3, #8
 800b98c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b990:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	0a1b      	lsrs	r3, r3, #8
 800b996:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b99a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	0e1b      	lsrs	r3, r3, #24
 800b9a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3738      	adds	r7, #56	; 0x38
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	18000f3a 	.word	0x18000f3a

0800b9b4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c6:	2b1f      	cmp	r3, #31
 800b9c8:	d936      	bls.n	800ba38 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	617b      	str	r3, [r7, #20]
 800b9ce:	e027      	b.n	800ba20 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f000 fffd 	bl	800c9d4 <SDMMC_ReadFIFO>
 800b9da:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	b2da      	uxtb	r2, r3
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	0a1b      	lsrs	r3, r3, #8
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	0c1b      	lsrs	r3, r3, #16
 800b9fe:	b2da      	uxtb	r2, r3
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	3301      	adds	r3, #1
 800ba08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	0e1b      	lsrs	r3, r3, #24
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	3301      	adds	r3, #1
 800ba18:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	617b      	str	r3, [r7, #20]
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	2b07      	cmp	r3, #7
 800ba24:	d9d4      	bls.n	800b9d0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba30:	f1a3 0220 	sub.w	r2, r3, #32
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ba38:	bf00      	nop
 800ba3a:	3718      	adds	r7, #24
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b086      	sub	sp, #24
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	69db      	ldr	r3, [r3, #28]
 800ba4c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a1b      	ldr	r3, [r3, #32]
 800ba52:	2b1f      	cmp	r3, #31
 800ba54:	d93a      	bls.n	800bacc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ba56:	2300      	movs	r3, #0
 800ba58:	617b      	str	r3, [r7, #20]
 800ba5a:	e02b      	b.n	800bab4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	3301      	adds	r3, #1
 800ba66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	021a      	lsls	r2, r3, #8
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	4313      	orrs	r3, r2
 800ba72:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	3301      	adds	r3, #1
 800ba78:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	041a      	lsls	r2, r3, #16
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	061a      	lsls	r2, r3, #24
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f107 020c 	add.w	r2, r7, #12
 800baa6:	4611      	mov	r1, r2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 ffa0 	bl	800c9ee <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	3301      	adds	r3, #1
 800bab2:	617b      	str	r3, [r7, #20]
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	2b07      	cmp	r3, #7
 800bab8:	d9d0      	bls.n	800ba5c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6a1b      	ldr	r3, [r3, #32]
 800bac4:	f1a3 0220 	sub.w	r2, r3, #32
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	621a      	str	r2, [r3, #32]
  }
}
 800bacc:	bf00      	nop
 800bace:	3718      	adds	r7, #24
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800bb04:	bf00      	nop
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800bb18:	bf00      	nop
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d101      	bne.n	800bb38 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	e02b      	b.n	800bb90 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d106      	bne.n	800bb52 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7f4 ff87 	bl	8000a60 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2202      	movs	r2, #2
 800bb56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	3304      	adds	r3, #4
 800bb62:	4619      	mov	r1, r3
 800bb64:	4610      	mov	r0, r2
 800bb66:	f000 fe45 	bl	800c7f4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6818      	ldr	r0, [r3, #0]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	461a      	mov	r2, r3
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	f000 fe99 	bl	800c8ac <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800bb7a:	4b07      	ldr	r3, [pc, #28]	; (800bb98 <HAL_SDRAM_Init+0x74>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a06      	ldr	r2, [pc, #24]	; (800bb98 <HAL_SDRAM_Init+0x74>)
 800bb80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb84:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	52004000 	.word	0x52004000

0800bb9c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e0f1      	b.n	800bd92 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a78      	ldr	r2, [pc, #480]	; (800bd9c <HAL_SPI_Init+0x200>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d00f      	beq.n	800bbde <HAL_SPI_Init+0x42>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a77      	ldr	r2, [pc, #476]	; (800bda0 <HAL_SPI_Init+0x204>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d00a      	beq.n	800bbde <HAL_SPI_Init+0x42>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a75      	ldr	r2, [pc, #468]	; (800bda4 <HAL_SPI_Init+0x208>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d005      	beq.n	800bbde <HAL_SPI_Init+0x42>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	2b0f      	cmp	r3, #15
 800bbd8:	d901      	bls.n	800bbde <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e0d9      	b.n	800bd92 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fdec 	bl	800c7bc <SPI_GetPacketSize>
 800bbe4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a6c      	ldr	r2, [pc, #432]	; (800bd9c <HAL_SPI_Init+0x200>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d00c      	beq.n	800bc0a <HAL_SPI_Init+0x6e>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a6a      	ldr	r2, [pc, #424]	; (800bda0 <HAL_SPI_Init+0x204>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d007      	beq.n	800bc0a <HAL_SPI_Init+0x6e>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a69      	ldr	r2, [pc, #420]	; (800bda4 <HAL_SPI_Init+0x208>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d002      	beq.n	800bc0a <HAL_SPI_Init+0x6e>
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2b08      	cmp	r3, #8
 800bc08:	d811      	bhi.n	800bc2e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bc0e:	4a63      	ldr	r2, [pc, #396]	; (800bd9c <HAL_SPI_Init+0x200>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d009      	beq.n	800bc28 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a61      	ldr	r2, [pc, #388]	; (800bda0 <HAL_SPI_Init+0x204>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d004      	beq.n	800bc28 <HAL_SPI_Init+0x8c>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a60      	ldr	r2, [pc, #384]	; (800bda4 <HAL_SPI_Init+0x208>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d104      	bne.n	800bc32 <HAL_SPI_Init+0x96>
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2b10      	cmp	r3, #16
 800bc2c:	d901      	bls.n	800bc32 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e0af      	b.n	800bd92 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d106      	bne.n	800bc4c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7f5 ffb6 	bl	8001bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2202      	movs	r2, #2
 800bc50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f022 0201 	bic.w	r2, r2, #1
 800bc62:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bc6e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc78:	d119      	bne.n	800bcae <HAL_SPI_Init+0x112>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc82:	d103      	bne.n	800bc8c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d008      	beq.n	800bc9e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10c      	bne.n	800bcae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bc98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc9c:	d107      	bne.n	800bcae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bcac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	69da      	ldr	r2, [r3, #28]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb6:	431a      	orrs	r2, r3
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	431a      	orrs	r2, r3
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc0:	ea42 0103 	orr.w	r1, r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	68da      	ldr	r2, [r3, #12]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	430a      	orrs	r2, r1
 800bcce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	431a      	orrs	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcde:	431a      	orrs	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	431a      	orrs	r2, r3
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	431a      	orrs	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	695b      	ldr	r3, [r3, #20]
 800bcf0:	431a      	orrs	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a1b      	ldr	r3, [r3, #32]
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	431a      	orrs	r2, r3
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd02:	431a      	orrs	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	431a      	orrs	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd0e:	ea42 0103 	orr.w	r1, r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	430a      	orrs	r2, r1
 800bd1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d113      	bne.n	800bd4e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd38:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bd4c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f022 0201 	bic.w	r2, r2, #1
 800bd5c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00a      	beq.n	800bd80 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	430a      	orrs	r2, r1
 800bd7e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	40013000 	.word	0x40013000
 800bda0:	40003800 	.word	0x40003800
 800bda4:	40003c00 	.word	0x40003c00

0800bda8 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b086      	sub	sp, #24
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d101      	bne.n	800bdc8 <HAL_SPI_TransmitReceive_DMA+0x20>
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	e1b4      	b.n	800c132 <HAL_SPI_TransmitReceive_DMA+0x38a>
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bdd6:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bdde:	7dbb      	ldrb	r3, [r7, #22]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d012      	beq.n	800be0a <HAL_SPI_TransmitReceive_DMA+0x62>
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdea:	d106      	bne.n	800bdfa <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d102      	bne.n	800bdfa <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bdf4:	7dbb      	ldrb	r3, [r7, #22]
 800bdf6:	2b04      	cmp	r3, #4
 800bdf8:	d007      	beq.n	800be0a <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bdfa:	2302      	movs	r3, #2
 800bdfc:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2200      	movs	r2, #0
 800be02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800be06:	7dfb      	ldrb	r3, [r7, #23]
 800be08:	e193      	b.n	800c132 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d005      	beq.n	800be1c <HAL_SPI_TransmitReceive_DMA+0x74>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d002      	beq.n	800be1c <HAL_SPI_TransmitReceive_DMA+0x74>
 800be16:	887b      	ldrh	r3, [r7, #2]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d107      	bne.n	800be2c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2200      	movs	r2, #0
 800be24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800be28:	7dfb      	ldrb	r3, [r7, #23]
 800be2a:	e182      	b.n	800c132 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be32:	b2db      	uxtb	r3, r3
 800be34:	2b04      	cmp	r3, #4
 800be36:	d003      	beq.n	800be40 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2205      	movs	r2, #5
 800be3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2200      	movs	r2, #0
 800be44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	887a      	ldrh	r2, [r7, #2]
 800be52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	887a      	ldrh	r2, [r7, #2]
 800be5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	887a      	ldrh	r2, [r7, #2]
 800be68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	887a      	ldrh	r2, [r7, #2]
 800be70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2200      	movs	r2, #0
 800be78:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	689a      	ldr	r2, [r3, #8]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800be8e:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	2b0f      	cmp	r3, #15
 800be96:	d905      	bls.n	800bea4 <HAL_SPI_TransmitReceive_DMA+0xfc>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be9c:	699b      	ldr	r3, [r3, #24]
 800be9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bea2:	d10f      	bne.n	800bec4 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800bea8:	2b07      	cmp	r3, #7
 800beaa:	d913      	bls.n	800bed4 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beb0:	699b      	ldr	r3, [r3, #24]
 800beb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beb6:	d00d      	beq.n	800bed4 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bebc:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800bebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bec2:	d007      	beq.n	800bed4 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bed0:	7dfb      	ldrb	r3, [r7, #23]
 800bed2:	e12e      	b.n	800c132 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	2b07      	cmp	r3, #7
 800beda:	d840      	bhi.n	800bf5e <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bee6:	d109      	bne.n	800befc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800beee:	b29b      	uxth	r3, r3
 800bef0:	3301      	adds	r3, #1
 800bef2:	105b      	asrs	r3, r3, #1
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf06:	d109      	bne.n	800bf1c <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	3303      	adds	r3, #3
 800bf12:	109b      	asrs	r3, r3, #2
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf20:	699b      	ldr	r3, [r3, #24]
 800bf22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf26:	d109      	bne.n	800bf3c <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	3301      	adds	r3, #1
 800bf32:	105b      	asrs	r3, r3, #1
 800bf34:	b29a      	uxth	r2, r3
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf40:	699b      	ldr	r3, [r3, #24]
 800bf42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf46:	d12e      	bne.n	800bfa6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	3303      	adds	r3, #3
 800bf52:	109b      	asrs	r3, r3, #2
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bf5c:	e023      	b.n	800bfa6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	2b0f      	cmp	r3, #15
 800bf64:	d81f      	bhi.n	800bfa6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf6a:	699b      	ldr	r3, [r3, #24]
 800bf6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf70:	d109      	bne.n	800bf86 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	105b      	asrs	r3, r3, #1
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf8a:	699b      	ldr	r3, [r3, #24]
 800bf8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf90:	d109      	bne.n	800bfa6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	105b      	asrs	r3, r3, #1
 800bf9e:	b29a      	uxth	r2, r3
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	2b04      	cmp	r3, #4
 800bfb0:	d108      	bne.n	800bfc4 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfb6:	4a61      	ldr	r2, [pc, #388]	; (800c13c <HAL_SPI_TransmitReceive_DMA+0x394>)
 800bfb8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfbe:	4a60      	ldr	r2, [pc, #384]	; (800c140 <HAL_SPI_TransmitReceive_DMA+0x398>)
 800bfc0:	63da      	str	r2, [r3, #60]	; 0x3c
 800bfc2:	e007      	b.n	800bfd4 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfc8:	4a5e      	ldr	r2, [pc, #376]	; (800c144 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 800bfca:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfd0:	4a5d      	ldr	r2, [pc, #372]	; (800c148 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 800bfd2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfd8:	4a5c      	ldr	r2, [pc, #368]	; (800c14c <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 800bfda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	3330      	adds	r3, #48	; 0x30
 800bfee:	4619      	mov	r1, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bff4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bffc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800bffe:	f7f6 ff1f 	bl	8002e40 <HAL_DMA_Start_IT>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d013      	beq.n	800c030 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c00e:	f043 0210 	orr.w	r2, r3, #16
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800c02c:	7dfb      	ldrb	r3, [r7, #23]
 800c02e:	e080      	b.n	800c132 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	689a      	ldr	r2, [r3, #8]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c03e:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c044:	2200      	movs	r2, #0
 800c046:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c04c:	2200      	movs	r2, #0
 800c04e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c054:	2200      	movs	r2, #0
 800c056:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c05c:	2200      	movs	r2, #0
 800c05e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c068:	4619      	mov	r1, r3
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	3320      	adds	r3, #32
 800c070:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c078:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800c07a:	f7f6 fee1 	bl	8002e40 <HAL_DMA_Start_IT>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d013      	beq.n	800c0ac <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c08a:	f043 0210 	orr.w	r2, r3, #16
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800c0a8:	7dfb      	ldrb	r3, [r7, #23]
 800c0aa:	e042      	b.n	800c132 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0b0:	69db      	ldr	r3, [r3, #28]
 800c0b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0b6:	d108      	bne.n	800c0ca <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	6859      	ldr	r1, [r3, #4]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	4b23      	ldr	r3, [pc, #140]	; (800c150 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800c0c4:	400b      	ands	r3, r1
 800c0c6:	6053      	str	r3, [r2, #4]
 800c0c8:	e009      	b.n	800c0de <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	685a      	ldr	r2, [r3, #4]
 800c0d0:	4b1f      	ldr	r3, [pc, #124]	; (800c150 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	8879      	ldrh	r1, [r7, #2]
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	6812      	ldr	r2, [r2, #0]
 800c0da:	430b      	orrs	r3, r1
 800c0dc:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	689a      	ldr	r2, [r3, #8]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c0ec:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	691a      	ldr	r2, [r3, #16]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800c0fc:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f042 0201 	orr.w	r2, r2, #1
 800c10c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c116:	d107      	bne.n	800c128 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c126:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800c130:	7dfb      	ldrb	r3, [r7, #23]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3718      	adds	r7, #24
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	0800c5c9 	.word	0x0800c5c9
 800c140:	0800c53d 	.word	0x0800c53d
 800c144:	0800c5e5 	.word	0x0800c5e5
 800c148:	0800c583 	.word	0x0800c583
 800c14c:	0800c601 	.word	0x0800c601
 800c150:	ffff0000 	.word	0xffff0000

0800c154 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b08a      	sub	sp, #40	; 0x28
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	691b      	ldr	r3, [r3, #16]
 800c162:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	695b      	ldr	r3, [r3, #20]
 800c16a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c16c:	6a3a      	ldr	r2, [r7, #32]
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	4013      	ands	r3, r2
 800c172:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c17c:	2300      	movs	r3, #0
 800c17e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c186:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	3330      	adds	r3, #48	; 0x30
 800c18e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c196:	2b00      	cmp	r3, #0
 800c198:	d113      	bne.n	800c1c2 <HAL_SPI_IRQHandler+0x6e>
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	f003 0320 	and.w	r3, r3, #32
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10e      	bne.n	800c1c2 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d009      	beq.n	800c1c2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	4798      	blx	r3
    handled = 1UL;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10f      	bne.n	800c1ec <HAL_SPI_IRQHandler+0x98>
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	f003 0301 	and.w	r3, r3, #1
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00a      	beq.n	800c1ec <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d105      	bne.n	800c1ec <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	4798      	blx	r3
    handled = 1UL;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	f003 0320 	and.w	r3, r3, #32
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d10f      	bne.n	800c216 <HAL_SPI_IRQHandler+0xc2>
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	f003 0302 	and.w	r3, r3, #2
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00a      	beq.n	800c216 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c206:	2b00      	cmp	r3, #0
 800c208:	d105      	bne.n	800c216 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	4798      	blx	r3
    handled = 1UL;
 800c212:	2301      	movs	r3, #1
 800c214:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800c216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f040 815a 	bne.w	800c4d2 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	f003 0308 	and.w	r3, r3, #8
 800c224:	2b00      	cmp	r3, #0
 800c226:	f000 808b 	beq.w	800c340 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	699a      	ldr	r2, [r3, #24]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f042 0208 	orr.w	r2, r2, #8
 800c238:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	699a      	ldr	r2, [r3, #24]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f042 0210 	orr.w	r2, r2, #16
 800c248:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	699a      	ldr	r2, [r3, #24]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c258:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	691a      	ldr	r2, [r3, #16]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f022 0208 	bic.w	r2, r2, #8
 800c268:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c274:	2b00      	cmp	r3, #0
 800c276:	d13d      	bne.n	800c2f4 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c278:	e036      	b.n	800c2e8 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	2b0f      	cmp	r3, #15
 800c280:	d90b      	bls.n	800c29a <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c28a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c28c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c292:	1d1a      	adds	r2, r3, #4
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	665a      	str	r2, [r3, #100]	; 0x64
 800c298:	e01d      	b.n	800c2d6 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	2b07      	cmp	r3, #7
 800c2a0:	d90b      	bls.n	800c2ba <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	8812      	ldrh	r2, [r2, #0]
 800c2aa:	b292      	uxth	r2, r2
 800c2ac:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2b2:	1c9a      	adds	r2, r3, #2
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	665a      	str	r2, [r3, #100]	; 0x64
 800c2b8:	e00d      	b.n	800c2d6 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2c6:	7812      	ldrb	r2, [r2, #0]
 800c2c8:	b2d2      	uxtb	r2, r2
 800c2ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2d0:	1c5a      	adds	r2, r3, #1
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d1c2      	bne.n	800c27a <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f9c1 	bl	800c67c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d003      	beq.n	800c314 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 f90b 	bl	800c528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c312:	e0e3      	b.n	800c4dc <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c314:	7cfb      	ldrb	r3, [r7, #19]
 800c316:	2b05      	cmp	r3, #5
 800c318:	d103      	bne.n	800c322 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f7f5 f840 	bl	80013a0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800c320:	e0d9      	b.n	800c4d6 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c322:	7cfb      	ldrb	r3, [r7, #19]
 800c324:	2b04      	cmp	r3, #4
 800c326:	d103      	bne.n	800c330 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 f8e9 	bl	800c500 <HAL_SPI_RxCpltCallback>
    return;
 800c32e:	e0d2      	b.n	800c4d6 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c330:	7cfb      	ldrb	r3, [r7, #19]
 800c332:	2b03      	cmp	r3, #3
 800c334:	f040 80cf 	bne.w	800c4d6 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f8d7 	bl	800c4ec <HAL_SPI_TxCpltCallback>
    return;
 800c33e:	e0ca      	b.n	800c4d6 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00d      	beq.n	800c366 <HAL_SPI_IRQHandler+0x212>
 800c34a:	6a3b      	ldr	r3, [r7, #32]
 800c34c:	f003 0308 	and.w	r3, r3, #8
 800c350:	2b00      	cmp	r3, #0
 800c352:	d008      	beq.n	800c366 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	699a      	ldr	r2, [r3, #24]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c362:	619a      	str	r2, [r3, #24]

    return;
 800c364:	e0ba      	b.n	800c4dc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f000 80b5 	beq.w	800c4dc <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00f      	beq.n	800c39c <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c382:	f043 0204 	orr.w	r2, r3, #4
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	699a      	ldr	r2, [r3, #24]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c39a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00f      	beq.n	800c3c6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3ac:	f043 0201 	orr.w	r2, r3, #1
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	699a      	ldr	r2, [r3, #24]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3c4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00f      	beq.n	800c3f0 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3d6:	f043 0208 	orr.w	r2, r3, #8
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	699a      	ldr	r2, [r3, #24]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3ee:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	f003 0320 	and.w	r3, r3, #32
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00f      	beq.n	800c41a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c400:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	699a      	ldr	r2, [r3, #24]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f042 0220 	orr.w	r2, r2, #32
 800c418:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c420:	2b00      	cmp	r3, #0
 800c422:	d05a      	beq.n	800c4da <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f022 0201 	bic.w	r2, r2, #1
 800c432:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6919      	ldr	r1, [r3, #16]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	4b29      	ldr	r3, [pc, #164]	; (800c4e4 <HAL_SPI_IRQHandler+0x390>)
 800c440:	400b      	ands	r3, r1
 800c442:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c44a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c44e:	d138      	bne.n	800c4c2 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	689a      	ldr	r2, [r3, #8]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c45e:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c464:	2b00      	cmp	r3, #0
 800c466:	d013      	beq.n	800c490 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c46c:	4a1e      	ldr	r2, [pc, #120]	; (800c4e8 <HAL_SPI_IRQHandler+0x394>)
 800c46e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c474:	4618      	mov	r0, r3
 800c476:	f7f6 ff4d 	bl	8003314 <HAL_DMA_Abort_IT>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d007      	beq.n	800c490 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c486:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c494:	2b00      	cmp	r3, #0
 800c496:	d020      	beq.n	800c4da <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c49c:	4a12      	ldr	r2, [pc, #72]	; (800c4e8 <HAL_SPI_IRQHandler+0x394>)
 800c49e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7f6 ff35 	bl	8003314 <HAL_DMA_Abort_IT>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d014      	beq.n	800c4da <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c4c0:	e00b      	b.n	800c4da <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 f82c 	bl	800c528 <HAL_SPI_ErrorCallback>
    return;
 800c4d0:	e003      	b.n	800c4da <HAL_SPI_IRQHandler+0x386>
    return;
 800c4d2:	bf00      	nop
 800c4d4:	e002      	b.n	800c4dc <HAL_SPI_IRQHandler+0x388>
    return;
 800c4d6:	bf00      	nop
 800c4d8:	e000      	b.n	800c4dc <HAL_SPI_IRQHandler+0x388>
    return;
 800c4da:	bf00      	nop
  }
}
 800c4dc:	3728      	adds	r7, #40	; 0x28
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	fffffc94 	.word	0xfffffc94
 800c4e8:	0800c647 	.word	0x0800c647

0800c4ec <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c4f4:	bf00      	nop
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c508:	bf00      	nop
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c51c:	bf00      	nop
 800c51e:	370c      	adds	r7, #12
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c530:	bf00      	nop
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c548:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c550:	b2db      	uxtb	r3, r3
 800c552:	2b07      	cmp	r3, #7
 800c554:	d011      	beq.n	800c57a <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c55a:	69db      	ldr	r3, [r3, #28]
 800c55c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c560:	d103      	bne.n	800c56a <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f7ff ffcc 	bl	800c500 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800c568:	e007      	b.n	800c57a <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	691a      	ldr	r2, [r3, #16]
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f042 0208 	orr.w	r2, r2, #8
 800c578:	611a      	str	r2, [r3, #16]
}
 800c57a:	bf00      	nop
 800c57c:	3710      	adds	r7, #16
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b084      	sub	sp, #16
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c58e:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c596:	b2db      	uxtb	r3, r3
 800c598:	2b07      	cmp	r3, #7
 800c59a:	d011      	beq.n	800c5c0 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5a0:	69db      	ldr	r3, [r3, #28]
 800c5a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5a6:	d103      	bne.n	800c5b0 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f7f4 fef9 	bl	80013a0 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800c5ae:	e007      	b.n	800c5c0 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	691a      	ldr	r2, [r3, #16]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f042 0208 	orr.w	r2, r2, #8
 800c5be:	611a      	str	r2, [r3, #16]
}
 800c5c0:	bf00      	nop
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800c5d6:	68f8      	ldr	r0, [r7, #12]
 800c5d8:	f7ff ff9c 	bl	800c514 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c5dc:	bf00      	nop
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	f7f4 ff2c 	bl	8001450 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c5f8:	bf00      	nop
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c60c:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f7f7 fff0 	bl	80045f4 <HAL_DMA_GetError>
 800c614:	4603      	mov	r3, r0
 800c616:	2b02      	cmp	r3, #2
 800c618:	d011      	beq.n	800c63e <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f000 f82e 	bl	800c67c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c626:	f043 0210 	orr.w	r2, r3, #16
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f7ff ff75 	bl	800c528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800c63e:	bf00      	nop
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b084      	sub	sp, #16
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c652:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2200      	movs	r2, #0
 800c658:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f7ff ff5b 	bl	800c528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c672:	bf00      	nop
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
	...

0800c67c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	695b      	ldr	r3, [r3, #20]
 800c68a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	699a      	ldr	r2, [r3, #24]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f042 0208 	orr.w	r2, r2, #8
 800c69a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	699a      	ldr	r2, [r3, #24]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f042 0210 	orr.w	r2, r2, #16
 800c6aa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f022 0201 	bic.w	r2, r2, #1
 800c6ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6919      	ldr	r1, [r3, #16]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	4b3c      	ldr	r3, [pc, #240]	; (800c7b8 <SPI_CloseTransfer+0x13c>)
 800c6c8:	400b      	ands	r3, r1
 800c6ca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	689a      	ldr	r2, [r3, #8]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c6da:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b04      	cmp	r3, #4
 800c6e6:	d014      	beq.n	800c712 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f003 0320 	and.w	r3, r3, #32
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00f      	beq.n	800c712 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	699a      	ldr	r2, [r3, #24]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f042 0220 	orr.w	r2, r2, #32
 800c710:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	2b03      	cmp	r3, #3
 800c71c:	d014      	beq.n	800c748 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00f      	beq.n	800c748 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c72e:	f043 0204 	orr.w	r2, r3, #4
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	699a      	ldr	r2, [r3, #24]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c746:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00f      	beq.n	800c772 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c758:	f043 0201 	orr.w	r2, r3, #1
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	699a      	ldr	r2, [r3, #24]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c770:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d00f      	beq.n	800c79c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c782:	f043 0208 	orr.w	r2, r3, #8
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	699a      	ldr	r2, [r3, #24]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c79a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c7ac:	bf00      	nop
 800c7ae:	3714      	adds	r7, #20
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr
 800c7b8:	fffffc90 	.word	0xfffffc90

0800c7bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c8:	095b      	lsrs	r3, r3, #5
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	3307      	adds	r3, #7
 800c7da:	08db      	lsrs	r3, r3, #3
 800c7dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	fb02 f303 	mul.w	r3, r2, r3
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
	...

0800c7f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d121      	bne.n	800c84a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	4b27      	ldr	r3, [pc, #156]	; (800c8a8 <FMC_SDRAM_Init+0xb4>)
 800c80c:	4013      	ands	r3, r2
 800c80e:	683a      	ldr	r2, [r7, #0]
 800c810:	6851      	ldr	r1, [r2, #4]
 800c812:	683a      	ldr	r2, [r7, #0]
 800c814:	6892      	ldr	r2, [r2, #8]
 800c816:	4311      	orrs	r1, r2
 800c818:	683a      	ldr	r2, [r7, #0]
 800c81a:	68d2      	ldr	r2, [r2, #12]
 800c81c:	4311      	orrs	r1, r2
 800c81e:	683a      	ldr	r2, [r7, #0]
 800c820:	6912      	ldr	r2, [r2, #16]
 800c822:	4311      	orrs	r1, r2
 800c824:	683a      	ldr	r2, [r7, #0]
 800c826:	6952      	ldr	r2, [r2, #20]
 800c828:	4311      	orrs	r1, r2
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	6992      	ldr	r2, [r2, #24]
 800c82e:	4311      	orrs	r1, r2
 800c830:	683a      	ldr	r2, [r7, #0]
 800c832:	69d2      	ldr	r2, [r2, #28]
 800c834:	4311      	orrs	r1, r2
 800c836:	683a      	ldr	r2, [r7, #0]
 800c838:	6a12      	ldr	r2, [r2, #32]
 800c83a:	4311      	orrs	r1, r2
 800c83c:	683a      	ldr	r2, [r7, #0]
 800c83e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c840:	430a      	orrs	r2, r1
 800c842:	431a      	orrs	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	601a      	str	r2, [r3, #0]
 800c848:	e026      	b.n	800c898 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	69d9      	ldr	r1, [r3, #28]
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	6a1b      	ldr	r3, [r3, #32]
 800c85a:	4319      	orrs	r1, r3
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c860:	430b      	orrs	r3, r1
 800c862:	431a      	orrs	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	685a      	ldr	r2, [r3, #4]
 800c86c:	4b0e      	ldr	r3, [pc, #56]	; (800c8a8 <FMC_SDRAM_Init+0xb4>)
 800c86e:	4013      	ands	r3, r2
 800c870:	683a      	ldr	r2, [r7, #0]
 800c872:	6851      	ldr	r1, [r2, #4]
 800c874:	683a      	ldr	r2, [r7, #0]
 800c876:	6892      	ldr	r2, [r2, #8]
 800c878:	4311      	orrs	r1, r2
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	68d2      	ldr	r2, [r2, #12]
 800c87e:	4311      	orrs	r1, r2
 800c880:	683a      	ldr	r2, [r7, #0]
 800c882:	6912      	ldr	r2, [r2, #16]
 800c884:	4311      	orrs	r1, r2
 800c886:	683a      	ldr	r2, [r7, #0]
 800c888:	6952      	ldr	r2, [r2, #20]
 800c88a:	4311      	orrs	r1, r2
 800c88c:	683a      	ldr	r2, [r7, #0]
 800c88e:	6992      	ldr	r2, [r2, #24]
 800c890:	430a      	orrs	r2, r1
 800c892:	431a      	orrs	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	370c      	adds	r7, #12
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	ffff8000 	.word	0xffff8000

0800c8ac <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d128      	bne.n	800c910 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	1e59      	subs	r1, r3, #1
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	011b      	lsls	r3, r3, #4
 800c8d4:	4319      	orrs	r1, r3
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	021b      	lsls	r3, r3, #8
 800c8de:	4319      	orrs	r1, r3
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	031b      	lsls	r3, r3, #12
 800c8e8:	4319      	orrs	r1, r3
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	041b      	lsls	r3, r3, #16
 800c8f2:	4319      	orrs	r1, r3
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	695b      	ldr	r3, [r3, #20]
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	051b      	lsls	r3, r3, #20
 800c8fc:	4319      	orrs	r1, r3
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	699b      	ldr	r3, [r3, #24]
 800c902:	3b01      	subs	r3, #1
 800c904:	061b      	lsls	r3, r3, #24
 800c906:	430b      	orrs	r3, r1
 800c908:	431a      	orrs	r2, r3
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	609a      	str	r2, [r3, #8]
 800c90e:	e02d      	b.n	800c96c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	689a      	ldr	r2, [r3, #8]
 800c914:	4b19      	ldr	r3, [pc, #100]	; (800c97c <FMC_SDRAM_Timing_Init+0xd0>)
 800c916:	4013      	ands	r3, r2
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	68d2      	ldr	r2, [r2, #12]
 800c91c:	3a01      	subs	r2, #1
 800c91e:	0311      	lsls	r1, r2, #12
 800c920:	68ba      	ldr	r2, [r7, #8]
 800c922:	6952      	ldr	r2, [r2, #20]
 800c924:	3a01      	subs	r2, #1
 800c926:	0512      	lsls	r2, r2, #20
 800c928:	430a      	orrs	r2, r1
 800c92a:	431a      	orrs	r2, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	1e59      	subs	r1, r3, #1
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	3b01      	subs	r3, #1
 800c944:	011b      	lsls	r3, r3, #4
 800c946:	4319      	orrs	r1, r3
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	3b01      	subs	r3, #1
 800c94e:	021b      	lsls	r3, r3, #8
 800c950:	4319      	orrs	r1, r3
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	3b01      	subs	r3, #1
 800c958:	041b      	lsls	r3, r3, #16
 800c95a:	4319      	orrs	r1, r3
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	699b      	ldr	r3, [r3, #24]
 800c960:	3b01      	subs	r3, #1
 800c962:	061b      	lsls	r3, r3, #24
 800c964:	430b      	orrs	r3, r1
 800c966:	431a      	orrs	r2, r3
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3714      	adds	r7, #20
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	ff0f0fff 	.word	0xff0f0fff

0800c980 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c980:	b084      	sub	sp, #16
 800c982:	b480      	push	{r7}
 800c984:	b085      	sub	sp, #20
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	f107 001c 	add.w	r0, r7, #28
 800c98e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c992:	2300      	movs	r3, #0
 800c994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c996:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800c998:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800c99a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800c99e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800c9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800c9a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800c9a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	4b07      	ldr	r3, [pc, #28]	; (800c9d0 <SDMMC_Init+0x50>)
 800c9b4:	4013      	ands	r3, r2
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	431a      	orrs	r2, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c9be:	2300      	movs	r3, #0
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3714      	adds	r7, #20
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	b004      	add	sp, #16
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	ffc02c00 	.word	0xffc02c00

0800c9d4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	370c      	adds	r7, #12
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c9ee:	b480      	push	{r7}
 800c9f0:	b083      	sub	sp, #12
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
 800c9f6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca02:	2300      	movs	r3, #0
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f043 0203 	orr.w	r2, r3, #3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	370c      	adds	r7, #12
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr

0800ca32 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ca32:	b480      	push	{r7}
 800ca34:	b083      	sub	sp, #12
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 0303 	and.w	r3, r3, #3
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	370c      	adds	r7, #12
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
	...

0800ca50 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ca6e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ca74:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ca7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	68da      	ldr	r2, [r3, #12]
 800ca86:	4b06      	ldr	r3, [pc, #24]	; (800caa0 <SDMMC_SendCommand+0x50>)
 800ca88:	4013      	ands	r3, r2
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	431a      	orrs	r2, r3
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ca92:	2300      	movs	r3, #0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3714      	adds	r7, #20
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr
 800caa0:	fffee0c0 	.word	0xfffee0c0

0800caa4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	691b      	ldr	r3, [r3, #16]
 800cab0:	b2db      	uxtb	r3, r3
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	370c      	adds	r7, #12
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr

0800cabe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800cabe:	b480      	push	{r7}
 800cac0:	b085      	sub	sp, #20
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
 800cac6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	3314      	adds	r3, #20
 800cacc:	461a      	mov	r2, r3
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	4413      	add	r3, r2
 800cad2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3714      	adds	r7, #20
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	685a      	ldr	r2, [r3, #4]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cb0a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800cb10:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800cb16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	431a      	orrs	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cb2e:	2300      	movs	r3, #0

}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3714      	adds	r7, #20
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b088      	sub	sp, #32
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cb4a:	2310      	movs	r3, #16
 800cb4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb54:	2300      	movs	r3, #0
 800cb56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb5e:	f107 0308 	add.w	r3, r7, #8
 800cb62:	4619      	mov	r1, r3
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7ff ff73 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cb6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb6e:	2110      	movs	r1, #16
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 fa5f 	bl	800d034 <SDMMC_GetCmdResp1>
 800cb76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb78:	69fb      	ldr	r3, [r7, #28]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3720      	adds	r7, #32
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b088      	sub	sp, #32
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
 800cb8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cb90:	2311      	movs	r3, #17
 800cb92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cba2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cba4:	f107 0308 	add.w	r3, r7, #8
 800cba8:	4619      	mov	r1, r3
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7ff ff50 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cbb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbb4:	2111      	movs	r1, #17
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 fa3c 	bl	800d034 <SDMMC_GetCmdResp1>
 800cbbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbbe:	69fb      	ldr	r3, [r7, #28]
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3720      	adds	r7, #32
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b088      	sub	sp, #32
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cbd6:	2312      	movs	r3, #18
 800cbd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbda:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbe8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbea:	f107 0308 	add.w	r3, r7, #8
 800cbee:	4619      	mov	r1, r3
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f7ff ff2d 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cbf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbfa:	2112      	movs	r1, #18
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 fa19 	bl	800d034 <SDMMC_GetCmdResp1>
 800cc02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc04:	69fb      	ldr	r3, [r7, #28]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3720      	adds	r7, #32
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b088      	sub	sp, #32
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
 800cc16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cc1c:	2318      	movs	r3, #24
 800cc1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc26:	2300      	movs	r3, #0
 800cc28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc30:	f107 0308 	add.w	r3, r7, #8
 800cc34:	4619      	mov	r1, r3
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7ff ff0a 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cc3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc40:	2118      	movs	r1, #24
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 f9f6 	bl	800d034 <SDMMC_GetCmdResp1>
 800cc48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc4a:	69fb      	ldr	r3, [r7, #28]
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3720      	adds	r7, #32
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b088      	sub	sp, #32
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cc62:	2319      	movs	r3, #25
 800cc64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc66:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc76:	f107 0308 	add.w	r3, r7, #8
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7ff fee7 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cc82:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc86:	2119      	movs	r1, #25
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 f9d3 	bl	800d034 <SDMMC_GetCmdResp1>
 800cc8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc90:	69fb      	ldr	r3, [r7, #28]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3720      	adds	r7, #32
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
	...

0800cc9c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b088      	sub	sp, #32
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cca4:	2300      	movs	r3, #0
 800cca6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cca8:	230c      	movs	r3, #12
 800ccaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ccb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccba:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	68db      	ldr	r3, [r3, #12]
 800cccc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccd4:	f107 0308 	add.w	r3, r7, #8
 800ccd8:	4619      	mov	r1, r3
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7ff feb8 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cce0:	4a0b      	ldr	r2, [pc, #44]	; (800cd10 <SDMMC_CmdStopTransfer+0x74>)
 800cce2:	210c      	movs	r1, #12
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 f9a5 	bl	800d034 <SDMMC_GetCmdResp1>
 800ccea:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccfe:	d101      	bne.n	800cd04 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800cd00:	2300      	movs	r3, #0
 800cd02:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800cd04:	69fb      	ldr	r3, [r7, #28]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3720      	adds	r7, #32
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	05f5e100 	.word	0x05f5e100

0800cd14 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b088      	sub	sp, #32
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cd22:	2307      	movs	r3, #7
 800cd24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd26:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd36:	f107 0308 	add.w	r3, r7, #8
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f7ff fe87 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cd42:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd46:	2107      	movs	r1, #7
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 f973 	bl	800d034 <SDMMC_GetCmdResp1>
 800cd4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd50:	69fb      	ldr	r3, [r7, #28]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3720      	adds	r7, #32
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b088      	sub	sp, #32
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cd62:	2300      	movs	r3, #0
 800cd64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cd66:	2300      	movs	r3, #0
 800cd68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd78:	f107 0308 	add.w	r3, r7, #8
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7ff fe66 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 fb97 	bl	800d4b8 <SDMMC_GetCmdError>
 800cd8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd8c:	69fb      	ldr	r3, [r7, #28]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3720      	adds	r7, #32
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b088      	sub	sp, #32
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cd9e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cda2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cda4:	2308      	movs	r3, #8
 800cda6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cda8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdb8:	f107 0308 	add.w	r3, r7, #8
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7ff fe46 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 fb29 	bl	800d41c <SDMMC_GetCmdResp7>
 800cdca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdcc:	69fb      	ldr	r3, [r7, #28]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3720      	adds	r7, #32
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b088      	sub	sp, #32
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cde4:	2337      	movs	r3, #55	; 0x37
 800cde6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cde8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdf8:	f107 0308 	add.w	r3, r7, #8
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7ff fe26 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ce04:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce08:	2137      	movs	r1, #55	; 0x37
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f912 	bl	800d034 <SDMMC_GetCmdResp1>
 800ce10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce12:	69fb      	ldr	r3, [r7, #28]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3720      	adds	r7, #32
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b088      	sub	sp, #32
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ce2a:	2329      	movs	r3, #41	; 0x29
 800ce2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce34:	2300      	movs	r3, #0
 800ce36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce3e:	f107 0308 	add.w	r3, r7, #8
 800ce42:	4619      	mov	r1, r3
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f7ff fe03 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 fa2e 	bl	800d2ac <SDMMC_GetCmdResp3>
 800ce50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce52:	69fb      	ldr	r3, [r7, #28]
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3720      	adds	r7, #32
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b088      	sub	sp, #32
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ce6a:	2306      	movs	r3, #6
 800ce6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce74:	2300      	movs	r3, #0
 800ce76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce7e:	f107 0308 	add.w	r3, r7, #8
 800ce82:	4619      	mov	r1, r3
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f7ff fde3 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ce8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce8e:	2106      	movs	r1, #6
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 f8cf 	bl	800d034 <SDMMC_GetCmdResp1>
 800ce96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce98:	69fb      	ldr	r3, [r7, #28]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3720      	adds	r7, #32
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b088      	sub	sp, #32
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ceae:	2333      	movs	r3, #51	; 0x33
 800ceb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ceb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ceb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cec0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cec2:	f107 0308 	add.w	r3, r7, #8
 800cec6:	4619      	mov	r1, r3
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f7ff fdc1 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cece:	f241 3288 	movw	r2, #5000	; 0x1388
 800ced2:	2133      	movs	r1, #51	; 0x33
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 f8ad 	bl	800d034 <SDMMC_GetCmdResp1>
 800ceda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cedc:	69fb      	ldr	r3, [r7, #28]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3720      	adds	r7, #32
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}

0800cee6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cee6:	b580      	push	{r7, lr}
 800cee8:	b088      	sub	sp, #32
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ceee:	2300      	movs	r3, #0
 800cef0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cef2:	2302      	movs	r3, #2
 800cef4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cef6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cefa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cefc:	2300      	movs	r3, #0
 800cefe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf06:	f107 0308 	add.w	r3, r7, #8
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f7ff fd9f 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 f980 	bl	800d218 <SDMMC_GetCmdResp2>
 800cf18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf1a:	69fb      	ldr	r3, [r7, #28]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3720      	adds	r7, #32
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b088      	sub	sp, #32
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cf32:	2309      	movs	r3, #9
 800cf34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cf36:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cf3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf46:	f107 0308 	add.w	r3, r7, #8
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f7ff fd7f 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 f960 	bl	800d218 <SDMMC_GetCmdResp2>
 800cf58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf5a:	69fb      	ldr	r3, [r7, #28]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3720      	adds	r7, #32
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b088      	sub	sp, #32
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cf72:	2303      	movs	r3, #3
 800cf74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf76:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf86:	f107 0308 	add.w	r3, r7, #8
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f7ff fd5f 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cf92:	683a      	ldr	r2, [r7, #0]
 800cf94:	2103      	movs	r1, #3
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 f9c8 	bl	800d32c <SDMMC_GetCmdResp6>
 800cf9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf9e:	69fb      	ldr	r3, [r7, #28]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3720      	adds	r7, #32
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b088      	sub	sp, #32
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cfb6:	230d      	movs	r3, #13
 800cfb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfca:	f107 0308 	add.w	r3, r7, #8
 800cfce:	4619      	mov	r1, r3
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f7ff fd3d 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cfd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfda:	210d      	movs	r1, #13
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 f829 	bl	800d034 <SDMMC_GetCmdResp1>
 800cfe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfe4:	69fb      	ldr	r3, [r7, #28]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3720      	adds	r7, #32
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b088      	sub	sp, #32
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cff6:	2300      	movs	r3, #0
 800cff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cffa:	230d      	movs	r3, #13
 800cffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d002:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d004:	2300      	movs	r3, #0
 800d006:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d00c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d00e:	f107 0308 	add.w	r3, r7, #8
 800d012:	4619      	mov	r1, r3
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f7ff fd1b 	bl	800ca50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d01a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d01e:	210d      	movs	r1, #13
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 f807 	bl	800d034 <SDMMC_GetCmdResp1>
 800d026:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d028:	69fb      	ldr	r3, [r7, #28]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3720      	adds	r7, #32
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
	...

0800d034 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b088      	sub	sp, #32
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	460b      	mov	r3, r1
 800d03e:	607a      	str	r2, [r7, #4]
 800d040:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d042:	4b70      	ldr	r3, [pc, #448]	; (800d204 <SDMMC_GetCmdResp1+0x1d0>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a70      	ldr	r2, [pc, #448]	; (800d208 <SDMMC_GetCmdResp1+0x1d4>)
 800d048:	fba2 2303 	umull	r2, r3, r2, r3
 800d04c:	0a5a      	lsrs	r2, r3, #9
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	fb02 f303 	mul.w	r3, r2, r3
 800d054:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	1e5a      	subs	r2, r3, #1
 800d05a:	61fa      	str	r2, [r7, #28]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d102      	bne.n	800d066 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d064:	e0c9      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d06a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d06c:	69ba      	ldr	r2, [r7, #24]
 800d06e:	4b67      	ldr	r3, [pc, #412]	; (800d20c <SDMMC_GetCmdResp1+0x1d8>)
 800d070:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d072:	2b00      	cmp	r3, #0
 800d074:	d0ef      	beq.n	800d056 <SDMMC_GetCmdResp1+0x22>
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1ea      	bne.n	800d056 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d084:	f003 0304 	and.w	r3, r3, #4
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d004      	beq.n	800d096 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2204      	movs	r2, #4
 800d090:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d092:	2304      	movs	r3, #4
 800d094:	e0b1      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d09a:	f003 0301 	and.w	r3, r3, #1
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d004      	beq.n	800d0ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e0a6      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	4a58      	ldr	r2, [pc, #352]	; (800d210 <SDMMC_GetCmdResp1+0x1dc>)
 800d0b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f7ff fcf6 	bl	800caa4 <SDMMC_GetCommandResponse>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	7afb      	ldrb	r3, [r7, #11]
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d001      	beq.n	800d0c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e099      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	68f8      	ldr	r0, [r7, #12]
 800d0ca:	f7ff fcf8 	bl	800cabe <SDMMC_GetResponse>
 800d0ce:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d0d0:	697a      	ldr	r2, [r7, #20]
 800d0d2:	4b50      	ldr	r3, [pc, #320]	; (800d214 <SDMMC_GetCmdResp1+0x1e0>)
 800d0d4:	4013      	ands	r3, r2
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d101      	bne.n	800d0de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	e08d      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	da02      	bge.n	800d0ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d0e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d0e8:	e087      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d001      	beq.n	800d0f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d0f4:	2340      	movs	r3, #64	; 0x40
 800d0f6:	e080      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d001      	beq.n	800d106 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d102:	2380      	movs	r3, #128	; 0x80
 800d104:	e079      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d110:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d114:	e071      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d002      	beq.n	800d126 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d120:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d124:	e069      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d002      	beq.n	800d136 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d134:	e061      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d002      	beq.n	800d146 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d144:	e059      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d002      	beq.n	800d156 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d154:	e051      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d002      	beq.n	800d166 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d164:	e049      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d002      	beq.n	800d176 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d170:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d174:	e041      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d002      	beq.n	800d186 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d184:	e039      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d002      	beq.n	800d196 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d194:	e031      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d002      	beq.n	800d1a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d1a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d1a4:	e029      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d002      	beq.n	800d1b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d1b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d1b4:	e021      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d002      	beq.n	800d1c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d1c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d1c4:	e019      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d1d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d1d4:	e011      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d002      	beq.n	800d1e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d1e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d1e4:	e009      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	f003 0308 	and.w	r3, r3, #8
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d002      	beq.n	800d1f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d1f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d1f4:	e001      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d1f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3720      	adds	r7, #32
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	20000000 	.word	0x20000000
 800d208:	10624dd3 	.word	0x10624dd3
 800d20c:	00200045 	.word	0x00200045
 800d210:	002000c5 	.word	0x002000c5
 800d214:	fdffe008 	.word	0xfdffe008

0800d218 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d220:	4b1f      	ldr	r3, [pc, #124]	; (800d2a0 <SDMMC_GetCmdResp2+0x88>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a1f      	ldr	r2, [pc, #124]	; (800d2a4 <SDMMC_GetCmdResp2+0x8c>)
 800d226:	fba2 2303 	umull	r2, r3, r2, r3
 800d22a:	0a5b      	lsrs	r3, r3, #9
 800d22c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d230:	fb02 f303 	mul.w	r3, r2, r3
 800d234:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	1e5a      	subs	r2, r3, #1
 800d23a:	60fa      	str	r2, [r7, #12]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d102      	bne.n	800d246 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d240:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d244:	e026      	b.n	800d294 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d24a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d252:	2b00      	cmp	r3, #0
 800d254:	d0ef      	beq.n	800d236 <SDMMC_GetCmdResp2+0x1e>
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1ea      	bne.n	800d236 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d264:	f003 0304 	and.w	r3, r3, #4
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d004      	beq.n	800d276 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2204      	movs	r2, #4
 800d270:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d272:	2304      	movs	r3, #4
 800d274:	e00e      	b.n	800d294 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d27a:	f003 0301 	and.w	r3, r3, #1
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d004      	beq.n	800d28c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2201      	movs	r2, #1
 800d286:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d288:	2301      	movs	r3, #1
 800d28a:	e003      	b.n	800d294 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4a06      	ldr	r2, [pc, #24]	; (800d2a8 <SDMMC_GetCmdResp2+0x90>)
 800d290:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d292:	2300      	movs	r3, #0
}
 800d294:	4618      	mov	r0, r3
 800d296:	3714      	adds	r7, #20
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr
 800d2a0:	20000000 	.word	0x20000000
 800d2a4:	10624dd3 	.word	0x10624dd3
 800d2a8:	002000c5 	.word	0x002000c5

0800d2ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d2b4:	4b1a      	ldr	r3, [pc, #104]	; (800d320 <SDMMC_GetCmdResp3+0x74>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a1a      	ldr	r2, [pc, #104]	; (800d324 <SDMMC_GetCmdResp3+0x78>)
 800d2ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d2be:	0a5b      	lsrs	r3, r3, #9
 800d2c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2c4:	fb02 f303 	mul.w	r3, r2, r3
 800d2c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	1e5a      	subs	r2, r3, #1
 800d2ce:	60fa      	str	r2, [r7, #12]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d102      	bne.n	800d2da <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2d8:	e01b      	b.n	800d312 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2de:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d0ef      	beq.n	800d2ca <SDMMC_GetCmdResp3+0x1e>
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d1ea      	bne.n	800d2ca <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f8:	f003 0304 	and.w	r3, r3, #4
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d004      	beq.n	800d30a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2204      	movs	r2, #4
 800d304:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d306:	2304      	movs	r3, #4
 800d308:	e003      	b.n	800d312 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4a06      	ldr	r2, [pc, #24]	; (800d328 <SDMMC_GetCmdResp3+0x7c>)
 800d30e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d310:	2300      	movs	r3, #0
}
 800d312:	4618      	mov	r0, r3
 800d314:	3714      	adds	r7, #20
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	20000000 	.word	0x20000000
 800d324:	10624dd3 	.word	0x10624dd3
 800d328:	002000c5 	.word	0x002000c5

0800d32c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b088      	sub	sp, #32
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	460b      	mov	r3, r1
 800d336:	607a      	str	r2, [r7, #4]
 800d338:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d33a:	4b35      	ldr	r3, [pc, #212]	; (800d410 <SDMMC_GetCmdResp6+0xe4>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4a35      	ldr	r2, [pc, #212]	; (800d414 <SDMMC_GetCmdResp6+0xe8>)
 800d340:	fba2 2303 	umull	r2, r3, r2, r3
 800d344:	0a5b      	lsrs	r3, r3, #9
 800d346:	f241 3288 	movw	r2, #5000	; 0x1388
 800d34a:	fb02 f303 	mul.w	r3, r2, r3
 800d34e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d350:	69fb      	ldr	r3, [r7, #28]
 800d352:	1e5a      	subs	r2, r3, #1
 800d354:	61fa      	str	r2, [r7, #28]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d102      	bne.n	800d360 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d35a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d35e:	e052      	b.n	800d406 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d364:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d0ef      	beq.n	800d350 <SDMMC_GetCmdResp6+0x24>
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1ea      	bne.n	800d350 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d37e:	f003 0304 	and.w	r3, r3, #4
 800d382:	2b00      	cmp	r3, #0
 800d384:	d004      	beq.n	800d390 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2204      	movs	r2, #4
 800d38a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d38c:	2304      	movs	r3, #4
 800d38e:	e03a      	b.n	800d406 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d394:	f003 0301 	and.w	r3, r3, #1
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d004      	beq.n	800d3a6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e02f      	b.n	800d406 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f7ff fb7c 	bl	800caa4 <SDMMC_GetCommandResponse>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	7afb      	ldrb	r3, [r7, #11]
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d001      	beq.n	800d3ba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e025      	b.n	800d406 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	4a16      	ldr	r2, [pc, #88]	; (800d418 <SDMMC_GetCmdResp6+0xec>)
 800d3be:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f7ff fb7b 	bl	800cabe <SDMMC_GetResponse>
 800d3c8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d106      	bne.n	800d3e2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	0c1b      	lsrs	r3, r3, #16
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	e011      	b.n	800d406 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d002      	beq.n	800d3f2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d3ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d3f0:	e009      	b.n	800d406 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d3fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d400:	e001      	b.n	800d406 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d406:	4618      	mov	r0, r3
 800d408:	3720      	adds	r7, #32
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	20000000 	.word	0x20000000
 800d414:	10624dd3 	.word	0x10624dd3
 800d418:	002000c5 	.word	0x002000c5

0800d41c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d424:	4b22      	ldr	r3, [pc, #136]	; (800d4b0 <SDMMC_GetCmdResp7+0x94>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a22      	ldr	r2, [pc, #136]	; (800d4b4 <SDMMC_GetCmdResp7+0x98>)
 800d42a:	fba2 2303 	umull	r2, r3, r2, r3
 800d42e:	0a5b      	lsrs	r3, r3, #9
 800d430:	f241 3288 	movw	r2, #5000	; 0x1388
 800d434:	fb02 f303 	mul.w	r3, r2, r3
 800d438:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	1e5a      	subs	r2, r3, #1
 800d43e:	60fa      	str	r2, [r7, #12]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d102      	bne.n	800d44a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d444:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d448:	e02c      	b.n	800d4a4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d44e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d456:	2b00      	cmp	r3, #0
 800d458:	d0ef      	beq.n	800d43a <SDMMC_GetCmdResp7+0x1e>
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d460:	2b00      	cmp	r3, #0
 800d462:	d1ea      	bne.n	800d43a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d468:	f003 0304 	and.w	r3, r3, #4
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d004      	beq.n	800d47a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2204      	movs	r2, #4
 800d474:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d476:	2304      	movs	r3, #4
 800d478:	e014      	b.n	800d4a4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d47e:	f003 0301 	and.w	r3, r3, #1
 800d482:	2b00      	cmp	r3, #0
 800d484:	d004      	beq.n	800d490 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2201      	movs	r2, #1
 800d48a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d48c:	2301      	movs	r3, #1
 800d48e:	e009      	b.n	800d4a4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d002      	beq.n	800d4a2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2240      	movs	r2, #64	; 0x40
 800d4a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d4a2:	2300      	movs	r3, #0

}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3714      	adds	r7, #20
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr
 800d4b0:	20000000 	.word	0x20000000
 800d4b4:	10624dd3 	.word	0x10624dd3

0800d4b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b085      	sub	sp, #20
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d4c0:	4b11      	ldr	r3, [pc, #68]	; (800d508 <SDMMC_GetCmdError+0x50>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4a11      	ldr	r2, [pc, #68]	; (800d50c <SDMMC_GetCmdError+0x54>)
 800d4c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d4ca:	0a5b      	lsrs	r3, r3, #9
 800d4cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4d0:	fb02 f303 	mul.w	r3, r2, r3
 800d4d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	1e5a      	subs	r2, r3, #1
 800d4da:	60fa      	str	r2, [r7, #12]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d102      	bne.n	800d4e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d4e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4e4:	e009      	b.n	800d4fa <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d0f1      	beq.n	800d4d6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	4a06      	ldr	r2, [pc, #24]	; (800d510 <SDMMC_GetCmdError+0x58>)
 800d4f6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3714      	adds	r7, #20
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr
 800d506:	bf00      	nop
 800d508:	20000000 	.word	0x20000000
 800d50c:	10624dd3 	.word	0x10624dd3
 800d510:	002000c5 	.word	0x002000c5

0800d514 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d518:	4904      	ldr	r1, [pc, #16]	; (800d52c <MX_FATFS_Init+0x18>)
 800d51a:	4805      	ldr	r0, [pc, #20]	; (800d530 <MX_FATFS_Init+0x1c>)
 800d51c:	f000 fa06 	bl	800d92c <FATFS_LinkDriver>
 800d520:	4603      	mov	r3, r0
 800d522:	461a      	mov	r2, r3
 800d524:	4b03      	ldr	r3, [pc, #12]	; (800d534 <MX_FATFS_Init+0x20>)
 800d526:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d528:	bf00      	nop
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	200019e4 	.word	0x200019e4
 800d530:	0800ee58 	.word	0x0800ee58
 800d534:	200019e0 	.word	0x200019e0

0800d538 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d53e:	2300      	movs	r3, #0
 800d540:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d542:	f000 f89b 	bl	800d67c <BSP_SD_IsDetected>
 800d546:	4603      	mov	r3, r0
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d001      	beq.n	800d550 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d54c:	2302      	movs	r3, #2
 800d54e:	e012      	b.n	800d576 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d550:	480b      	ldr	r0, [pc, #44]	; (800d580 <BSP_SD_Init+0x48>)
 800d552:	f7fc fcc2 	bl	8009eda <HAL_SD_Init>
 800d556:	4603      	mov	r3, r0
 800d558:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d55a:	79fb      	ldrb	r3, [r7, #7]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d109      	bne.n	800d574 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d560:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d564:	4806      	ldr	r0, [pc, #24]	; (800d580 <BSP_SD_Init+0x48>)
 800d566:	f7fd fd39 	bl	800afdc <HAL_SD_ConfigWideBusOperation>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d001      	beq.n	800d574 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d570:	2301      	movs	r3, #1
 800d572:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d574:	79fb      	ldrb	r3, [r7, #7]
}
 800d576:	4618      	mov	r0, r3
 800d578:	3708      	adds	r7, #8
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	200017e8 	.word	0x200017e8

0800d584 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b088      	sub	sp, #32
 800d588:	af02      	add	r7, sp, #8
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
 800d590:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d592:	2300      	movs	r3, #0
 800d594:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	68f9      	ldr	r1, [r7, #12]
 800d5a0:	4806      	ldr	r0, [pc, #24]	; (800d5bc <BSP_SD_ReadBlocks+0x38>)
 800d5a2:	f7fc fdb3 	bl	800a10c <HAL_SD_ReadBlocks>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d001      	beq.n	800d5b0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d5b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3718      	adds	r7, #24
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	200017e8 	.word	0x200017e8

0800d5c0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b088      	sub	sp, #32
 800d5c4:	af02      	add	r7, sp, #8
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	607a      	str	r2, [r7, #4]
 800d5cc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	9300      	str	r3, [sp, #0]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	68f9      	ldr	r1, [r7, #12]
 800d5dc:	4806      	ldr	r0, [pc, #24]	; (800d5f8 <BSP_SD_WriteBlocks+0x38>)
 800d5de:	f7fc ff1f 	bl	800a420 <HAL_SD_WriteBlocks>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d5ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3718      	adds	r7, #24
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	200017e8 	.word	0x200017e8

0800d5fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d600:	4805      	ldr	r0, [pc, #20]	; (800d618 <BSP_SD_GetCardState+0x1c>)
 800d602:	f7fd fdfd 	bl	800b200 <HAL_SD_GetCardState>
 800d606:	4603      	mov	r3, r0
 800d608:	2b04      	cmp	r3, #4
 800d60a:	bf14      	ite	ne
 800d60c:	2301      	movne	r3, #1
 800d60e:	2300      	moveq	r3, #0
 800d610:	b2db      	uxtb	r3, r3
}
 800d612:	4618      	mov	r0, r3
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	200017e8 	.word	0x200017e8

0800d61c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d624:	6879      	ldr	r1, [r7, #4]
 800d626:	4803      	ldr	r0, [pc, #12]	; (800d634 <BSP_SD_GetCardInfo+0x18>)
 800d628:	f7fd fcac 	bl	800af84 <HAL_SD_GetCardInfo>
}
 800d62c:	bf00      	nop
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	200017e8 	.word	0x200017e8

0800d638 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d640:	f000 f80e 	bl	800d660 <BSP_SD_WriteCpltCallback>
}
 800d644:	bf00      	nop
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d654:	f000 f80b 	bl	800d66e <BSP_SD_ReadCpltCallback>
}
 800d658:	bf00      	nop
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800d660:	b480      	push	{r7}
 800d662:	af00      	add	r7, sp, #0

}
 800d664:	bf00      	nop
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr

0800d66e <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800d66e:	b480      	push	{r7}
 800d670:	af00      	add	r7, sp, #0

}
 800d672:	bf00      	nop
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d682:	2301      	movs	r3, #1
 800d684:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d686:	f000 f80b 	bl	800d6a0 <BSP_PlatformIsDetected>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d101      	bne.n	800d694 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d690:	2300      	movs	r3, #0
 800d692:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d694:	79fb      	ldrb	r3, [r7, #7]
 800d696:	b2db      	uxtb	r3, r3
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d6aa:	2102      	movs	r1, #2
 800d6ac:	4806      	ldr	r0, [pc, #24]	; (800d6c8 <BSP_PlatformIsDetected+0x28>)
 800d6ae:	f7f7 fe5d 	bl	800536c <HAL_GPIO_ReadPin>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d001      	beq.n	800d6bc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d6bc:	79fb      	ldrb	r3, [r7, #7]
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3708      	adds	r7, #8
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	58020000 	.word	0x58020000

0800d6cc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d6d6:	4b0b      	ldr	r3, [pc, #44]	; (800d704 <SD_CheckStatus+0x38>)
 800d6d8:	2201      	movs	r2, #1
 800d6da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d6dc:	f7ff ff8e 	bl	800d5fc <BSP_SD_GetCardState>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d107      	bne.n	800d6f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d6e6:	4b07      	ldr	r3, [pc, #28]	; (800d704 <SD_CheckStatus+0x38>)
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	f023 0301 	bic.w	r3, r3, #1
 800d6f0:	b2da      	uxtb	r2, r3
 800d6f2:	4b04      	ldr	r3, [pc, #16]	; (800d704 <SD_CheckStatus+0x38>)
 800d6f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d6f6:	4b03      	ldr	r3, [pc, #12]	; (800d704 <SD_CheckStatus+0x38>)
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	b2db      	uxtb	r3, r3
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3708      	adds	r7, #8
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	2000000d 	.word	0x2000000d

0800d708 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	4603      	mov	r3, r0
 800d710:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d712:	4b0b      	ldr	r3, [pc, #44]	; (800d740 <SD_initialize+0x38>)
 800d714:	2201      	movs	r2, #1
 800d716:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d718:	f7ff ff0e 	bl	800d538 <BSP_SD_Init>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d107      	bne.n	800d732 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d722:	79fb      	ldrb	r3, [r7, #7]
 800d724:	4618      	mov	r0, r3
 800d726:	f7ff ffd1 	bl	800d6cc <SD_CheckStatus>
 800d72a:	4603      	mov	r3, r0
 800d72c:	461a      	mov	r2, r3
 800d72e:	4b04      	ldr	r3, [pc, #16]	; (800d740 <SD_initialize+0x38>)
 800d730:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d732:	4b03      	ldr	r3, [pc, #12]	; (800d740 <SD_initialize+0x38>)
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	b2db      	uxtb	r3, r3
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3708      	adds	r7, #8
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	2000000d 	.word	0x2000000d

0800d744 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	4603      	mov	r3, r0
 800d74c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d74e:	79fb      	ldrb	r3, [r7, #7]
 800d750:	4618      	mov	r0, r3
 800d752:	f7ff ffbb 	bl	800d6cc <SD_CheckStatus>
 800d756:	4603      	mov	r3, r0
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b086      	sub	sp, #24
 800d764:	af00      	add	r7, sp, #0
 800d766:	60b9      	str	r1, [r7, #8]
 800d768:	607a      	str	r2, [r7, #4]
 800d76a:	603b      	str	r3, [r7, #0]
 800d76c:	4603      	mov	r3, r0
 800d76e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d770:	2301      	movs	r3, #1
 800d772:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d778:	683a      	ldr	r2, [r7, #0]
 800d77a:	6879      	ldr	r1, [r7, #4]
 800d77c:	68b8      	ldr	r0, [r7, #8]
 800d77e:	f7ff ff01 	bl	800d584 <BSP_SD_ReadBlocks>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d107      	bne.n	800d798 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d788:	bf00      	nop
 800d78a:	f7ff ff37 	bl	800d5fc <BSP_SD_GetCardState>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d1fa      	bne.n	800d78a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d794:	2300      	movs	r3, #0
 800d796:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d798:	7dfb      	ldrb	r3, [r7, #23]
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3718      	adds	r7, #24
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}

0800d7a2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b086      	sub	sp, #24
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	607a      	str	r2, [r7, #4]
 800d7ac:	603b      	str	r3, [r7, #0]
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d7b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7ba:	683a      	ldr	r2, [r7, #0]
 800d7bc:	6879      	ldr	r1, [r7, #4]
 800d7be:	68b8      	ldr	r0, [r7, #8]
 800d7c0:	f7ff fefe 	bl	800d5c0 <BSP_SD_WriteBlocks>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d107      	bne.n	800d7da <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d7ca:	bf00      	nop
 800d7cc:	f7ff ff16 	bl	800d5fc <BSP_SD_GetCardState>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d1fa      	bne.n	800d7cc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3718      	adds	r7, #24
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b08c      	sub	sp, #48	; 0x30
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	603a      	str	r2, [r7, #0]
 800d7ee:	71fb      	strb	r3, [r7, #7]
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d7fa:	4b25      	ldr	r3, [pc, #148]	; (800d890 <SD_ioctl+0xac>)
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	f003 0301 	and.w	r3, r3, #1
 800d804:	2b00      	cmp	r3, #0
 800d806:	d001      	beq.n	800d80c <SD_ioctl+0x28>
 800d808:	2303      	movs	r3, #3
 800d80a:	e03c      	b.n	800d886 <SD_ioctl+0xa2>

  switch (cmd)
 800d80c:	79bb      	ldrb	r3, [r7, #6]
 800d80e:	2b03      	cmp	r3, #3
 800d810:	d834      	bhi.n	800d87c <SD_ioctl+0x98>
 800d812:	a201      	add	r2, pc, #4	; (adr r2, 800d818 <SD_ioctl+0x34>)
 800d814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d818:	0800d829 	.word	0x0800d829
 800d81c:	0800d831 	.word	0x0800d831
 800d820:	0800d849 	.word	0x0800d849
 800d824:	0800d863 	.word	0x0800d863
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d828:	2300      	movs	r3, #0
 800d82a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d82e:	e028      	b.n	800d882 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d830:	f107 0308 	add.w	r3, r7, #8
 800d834:	4618      	mov	r0, r3
 800d836:	f7ff fef1 	bl	800d61c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d83a:	6a3a      	ldr	r2, [r7, #32]
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d840:	2300      	movs	r3, #0
 800d842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d846:	e01c      	b.n	800d882 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d848:	f107 0308 	add.w	r3, r7, #8
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7ff fee5 	bl	800d61c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d854:	b29a      	uxth	r2, r3
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d85a:	2300      	movs	r3, #0
 800d85c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d860:	e00f      	b.n	800d882 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d862:	f107 0308 	add.w	r3, r7, #8
 800d866:	4618      	mov	r0, r3
 800d868:	f7ff fed8 	bl	800d61c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86e:	0a5a      	lsrs	r2, r3, #9
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d874:	2300      	movs	r3, #0
 800d876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d87a:	e002      	b.n	800d882 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d87c:	2304      	movs	r3, #4
 800d87e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d886:	4618      	mov	r0, r3
 800d888:	3730      	adds	r7, #48	; 0x30
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	2000000d 	.word	0x2000000d

0800d894 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d894:	b480      	push	{r7}
 800d896:	b087      	sub	sp, #28
 800d898:	af00      	add	r7, sp, #0
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	60b9      	str	r1, [r7, #8]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d8aa:	4b1f      	ldr	r3, [pc, #124]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8ac:	7a5b      	ldrb	r3, [r3, #9]
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d131      	bne.n	800d918 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d8b4:	4b1c      	ldr	r3, [pc, #112]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8b6:	7a5b      	ldrb	r3, [r3, #9]
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	4b1a      	ldr	r3, [pc, #104]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8be:	2100      	movs	r1, #0
 800d8c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d8c2:	4b19      	ldr	r3, [pc, #100]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8c4:	7a5b      	ldrb	r3, [r3, #9]
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	4a17      	ldr	r2, [pc, #92]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	4413      	add	r3, r2
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d8d2:	4b15      	ldr	r3, [pc, #84]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8d4:	7a5b      	ldrb	r3, [r3, #9]
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	461a      	mov	r2, r3
 800d8da:	4b13      	ldr	r3, [pc, #76]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8dc:	4413      	add	r3, r2
 800d8de:	79fa      	ldrb	r2, [r7, #7]
 800d8e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d8e2:	4b11      	ldr	r3, [pc, #68]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8e4:	7a5b      	ldrb	r3, [r3, #9]
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	1c5a      	adds	r2, r3, #1
 800d8ea:	b2d1      	uxtb	r1, r2
 800d8ec:	4a0e      	ldr	r2, [pc, #56]	; (800d928 <FATFS_LinkDriverEx+0x94>)
 800d8ee:	7251      	strb	r1, [r2, #9]
 800d8f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d8f2:	7dbb      	ldrb	r3, [r7, #22]
 800d8f4:	3330      	adds	r3, #48	; 0x30
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	3301      	adds	r3, #1
 800d900:	223a      	movs	r2, #58	; 0x3a
 800d902:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	3302      	adds	r3, #2
 800d908:	222f      	movs	r2, #47	; 0x2f
 800d90a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	3303      	adds	r3, #3
 800d910:	2200      	movs	r2, #0
 800d912:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d914:	2300      	movs	r3, #0
 800d916:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d918:	7dfb      	ldrb	r3, [r7, #23]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	371c      	adds	r7, #28
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	200019e8 	.word	0x200019e8

0800d92c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d936:	2200      	movs	r2, #0
 800d938:	6839      	ldr	r1, [r7, #0]
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7ff ffaa 	bl	800d894 <FATFS_LinkDriverEx>
 800d940:	4603      	mov	r3, r0
}
 800d942:	4618      	mov	r0, r3
 800d944:	3708      	adds	r7, #8
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
	...

0800d94c <mtof>:
}

#define LOGTEN 2.302585092994

float mtof(float f)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	ed87 0a01 	vstr	s0, [r7, #4]
    if (f <= -1500.0f) return(0);
 800d956:	edd7 7a01 	vldr	s15, [r7, #4]
 800d95a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800d9b8 <mtof+0x6c>
 800d95e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d966:	d802      	bhi.n	800d96e <mtof+0x22>
 800d968:	eddf 7a14 	vldr	s15, [pc, #80]	; 800d9bc <mtof+0x70>
 800d96c:	e01f      	b.n	800d9ae <mtof+0x62>
    else if (f > 1499.0f) return(mtof(1499.0f));
 800d96e:	edd7 7a01 	vldr	s15, [r7, #4]
 800d972:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800d9c0 <mtof+0x74>
 800d976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d97e:	dd06      	ble.n	800d98e <mtof+0x42>
 800d980:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800d9c0 <mtof+0x74>
 800d984:	f7ff ffe2 	bl	800d94c <mtof>
 800d988:	eef0 7a40 	vmov.f32	s15, s0
 800d98c:	e00f      	b.n	800d9ae <mtof+0x62>
    else return (8.17579891564f * expf(0.0577622650f * f));
 800d98e:	edd7 7a01 	vldr	s15, [r7, #4]
 800d992:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d9c4 <mtof+0x78>
 800d996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d99a:	eeb0 0a67 	vmov.f32	s0, s15
 800d99e:	f001 f98f 	bl	800ecc0 <expf>
 800d9a2:	eef0 7a40 	vmov.f32	s15, s0
 800d9a6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800d9c8 <mtof+0x7c>
 800d9aa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800d9ae:	eeb0 0a67 	vmov.f32	s0, s15
 800d9b2:	3708      	adds	r7, #8
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	c4bb8000 	.word	0xc4bb8000
 800d9bc:	00000000 	.word	0x00000000
 800d9c0:	44bb6000 	.word	0x44bb6000
 800d9c4:	3d6c9820 	.word	0x3d6c9820
 800d9c8:	4102d013 	.word	0x4102d013

0800d9cc <place_step_dd>:

#if LEAF_INCLUDE_MINBLEP_TABLES
/// MINBLEPS
// https://github.com/MrBlueXav/Dekrispator_v2 blepvco.c
void place_step_dd(float *buffer, int index, float phase, float w, float scale)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b088      	sub	sp, #32
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6178      	str	r0, [r7, #20]
 800d9d4:	6139      	str	r1, [r7, #16]
 800d9d6:	ed87 0a03 	vstr	s0, [r7, #12]
 800d9da:	edc7 0a02 	vstr	s1, [r7, #8]
 800d9de:	ed87 1a01 	vstr	s2, [r7, #4]
    float r;
    long i;
    
    r = MINBLEP_PHASES * phase / w;
 800d9e2:	edd7 7a03 	vldr	s15, [r7, #12]
 800d9e6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800da98 <place_step_dd+0xcc>
 800d9ea:	ee67 6a87 	vmul.f32	s13, s15, s14
 800d9ee:	ed97 7a02 	vldr	s14, [r7, #8]
 800d9f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9f6:	edc7 7a06 	vstr	s15, [r7, #24]
    i = lrintf(r - 0.5f);
 800d9fa:	edd7 7a06 	vldr	s15, [r7, #24]
 800d9fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800da02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da06:	eeb0 0a67 	vmov.f32	s0, s15
 800da0a:	f001 f9cd 	bl	800eda8 <lrintf>
 800da0e:	61f8      	str	r0, [r7, #28]
    r -= (float)i;
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	ee07 3a90 	vmov	s15, r3
 800da16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da1a:	ed97 7a06 	vldr	s14, [r7, #24]
 800da1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da22:	edc7 7a06 	vstr	s15, [r7, #24]
    i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da2c:	61fb      	str	r3, [r7, #28]
    
    while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
 800da2e:	e02a      	b.n	800da86 <place_step_dd+0xba>
        buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	697a      	ldr	r2, [r7, #20]
 800da36:	4413      	add	r3, r2
 800da38:	ed93 7a00 	vldr	s14, [r3]
 800da3c:	4a17      	ldr	r2, [pc, #92]	; (800da9c <place_step_dd+0xd0>)
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	00db      	lsls	r3, r3, #3
 800da42:	4413      	add	r3, r2
 800da44:	edd3 6a00 	vldr	s13, [r3]
 800da48:	4a14      	ldr	r2, [pc, #80]	; (800da9c <place_step_dd+0xd0>)
 800da4a:	69fb      	ldr	r3, [r7, #28]
 800da4c:	00db      	lsls	r3, r3, #3
 800da4e:	4413      	add	r3, r2
 800da50:	3304      	adds	r3, #4
 800da52:	ed93 6a00 	vldr	s12, [r3]
 800da56:	edd7 7a06 	vldr	s15, [r7, #24]
 800da5a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800da5e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800da62:	edd7 7a01 	vldr	s15, [r7, #4]
 800da66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	697a      	ldr	r2, [r7, #20]
 800da70:	4413      	add	r3, r2
 800da72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da76:	edc3 7a00 	vstr	s15, [r3]
        i += MINBLEP_PHASES;
 800da7a:	69fb      	ldr	r3, [r7, #28]
 800da7c:	3340      	adds	r3, #64	; 0x40
 800da7e:	61fb      	str	r3, [r7, #28]
        index++;
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	3301      	adds	r3, #1
 800da84:	613b      	str	r3, [r7, #16]
    while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 800da8c:	dbd0      	blt.n	800da30 <place_step_dd+0x64>
    }
}
 800da8e:	bf00      	nop
 800da90:	bf00      	nop
 800da92:	3720      	adds	r7, #32
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	42800000 	.word	0x42800000
 800da9c:	0800ee6c 	.word	0x0800ee6c

0800daa0 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 800daa0:	b590      	push	{r4, r7, lr}
 800daa2:	b087      	sub	sp, #28
 800daa4:	af02      	add	r7, sp, #8
 800daa6:	60f8      	str	r0, [r7, #12]
 800daa8:	60b9      	str	r1, [r7, #8]
 800daaa:	607a      	str	r2, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	685c      	ldr	r4, [r3, #4]
 800dab0:	2010      	movs	r0, #16
 800dab2:	f000 f9b0 	bl	800de16 <mpool_align>
 800dab6:	4603      	mov	r3, r0
 800dab8:	6363      	str	r3, [r4, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	68fa      	ldr	r2, [r7, #12]
 800dabe:	609a      	str	r2, [r3, #8]
    pool->usize  = 0;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2200      	movs	r2, #0
 800dac4:	60da      	str	r2, [r3, #12]
    pool->msize  = size;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	68ba      	ldr	r2, [r7, #8]
 800daca:	611a      	str	r2, [r3, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6898      	ldr	r0, [r3, #8]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	691a      	ldr	r2, [r3, #16]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dada:	1ad2      	subs	r2, r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	4613      	mov	r3, r2
 800dae6:	2200      	movs	r2, #0
 800dae8:	2100      	movs	r1, #0
 800daea:	f000 f9a2 	bl	800de32 <create_node>
 800daee:	4602      	mov	r2, r0
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	615a      	str	r2, [r3, #20]
    {
        memory[i+leaf.header_size]=0;
    }
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}
 800daf4:	bf00      	nop
 800daf6:	3714      	adds	r7, #20
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd90      	pop	{r4, r7, pc}

0800dafc <leaf_pool_init>:

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	607a      	str	r2, [r7, #4]
    mpool_create(memory, size, &leaf->_internal_mempool);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	331c      	adds	r3, #28
 800db0c:	461a      	mov	r2, r3
 800db0e:	6879      	ldr	r1, [r7, #4]
 800db10:	68b8      	ldr	r0, [r7, #8]
 800db12:	f7ff ffc5 	bl	800daa0 <mpool_create>
    
    leaf->mempool = &leaf->_internal_mempool;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f103 021c 	add.w	r2, r3, #28
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	619a      	str	r2, [r3, #24]
}
 800db20:	bf00      	nop
 800db22:	3710      	adds	r7, #16
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
{
 800db28:	b590      	push	{r4, r7, lr}
 800db2a:	b08d      	sub	sp, #52	; 0x34
 800db2c:	af02      	add	r7, sp, #8
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
    pool->leaf->allocCount++;
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db38:	3201      	adds	r2, #1
 800db3a:	649a      	str	r2, [r3, #72]	; 0x48
        memset(temp, 0, asize);
    }
    return temp;
#else
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	695b      	ldr	r3, [r3, #20]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d116      	bne.n	800db72 <mpool_alloc+0x4a>
    {
        if ((pool->msize - pool->usize) > asize)
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	691a      	ldr	r2, [r3, #16]
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	1ad3      	subs	r3, r2, r3
 800db4e:	687a      	ldr	r2, [r7, #4]
 800db50:	429a      	cmp	r2, r3
 800db52:	d206      	bcs.n	800db62 <mpool_alloc+0x3a>
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	2101      	movs	r1, #1
 800db5a:	4618      	mov	r0, r3
 800db5c:	f001 f830 	bl	800ebc0 <LEAF_internalErrorCallback>
 800db60:	e005      	b.n	800db6e <mpool_alloc+0x46>
        }
        else
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	2100      	movs	r1, #0
 800db68:	4618      	mov	r0, r3
 800db6a:	f001 f829 	bl	800ebc0 <LEAF_internalErrorCallback>
        }
        return NULL;
 800db6e:	2300      	movs	r3, #0
 800db70:	e095      	b.n	800dc9e <mpool_alloc+0x176>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 f94f 	bl	800de16 <mpool_align>
 800db78:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	695b      	ldr	r3, [r3, #20]
 800db7e:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 800db80:	e01c      	b.n	800dbbc <mpool_alloc+0x94>
    {
        node_to_alloc = node_to_alloc->next;
 800db82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d116      	bne.n	800dbbc <mpool_alloc+0x94>
        {
            if ((pool->msize - pool->usize) > asize)
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	691a      	ldr	r2, [r3, #16]
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	1ad3      	subs	r3, r2, r3
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d206      	bcs.n	800dbac <mpool_alloc+0x84>
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	2101      	movs	r1, #1
 800dba4:	4618      	mov	r0, r3
 800dba6:	f001 f80b 	bl	800ebc0 <LEAF_internalErrorCallback>
 800dbaa:	e005      	b.n	800dbb8 <mpool_alloc+0x90>
            }
            else
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f001 f804 	bl	800ebc0 <LEAF_internalErrorCallback>
            }
            return NULL;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	e070      	b.n	800dc9e <mpool_alloc+0x176>
    while (node_to_alloc->size < size_to_alloc)
 800dbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	69ba      	ldr	r2, [r7, #24]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d8dd      	bhi.n	800db82 <mpool_alloc+0x5a>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800dbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc8:	68da      	ldr	r2, [r3, #12]
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	1ad3      	subs	r3, r2, r3
 800dbce:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 800dbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd2:	69ba      	ldr	r2, [r7, #24]
 800dbd4:	60da      	str	r2, [r3, #12]
    if (leftover > pool->leaf->header_size)
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbdc:	697a      	ldr	r2, [r7, #20]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d924      	bls.n	800dc2c <mpool_alloc+0x104>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbe8:	1ad3      	subs	r3, r2, r3
 800dbea:	613b      	str	r3, [r7, #16]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	441a      	add	r2, r3
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	4413      	add	r3, r2
 800dbfc:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	689a      	ldr	r2, [r3, #8]
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 800dc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc08:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 800dc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0c:	689c      	ldr	r4, [r3, #8]
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        new_node = create_node(&pool->mpool[offset],
 800dc14:	697a      	ldr	r2, [r7, #20]
 800dc16:	1ad2      	subs	r2, r2, r3
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	685b      	ldr	r3, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 800dc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc1e:	9300      	str	r3, [sp, #0]
 800dc20:	4613      	mov	r3, r2
 800dc22:	4622      	mov	r2, r4
 800dc24:	f000 f905 	bl	800de32 <create_node>
 800dc28:	6238      	str	r0, [r7, #32]
 800dc2a:	e008      	b.n	800dc3e <mpool_alloc+0x116>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2e:	68da      	ldr	r2, [r3, #12]
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	441a      	add	r2, r3
 800dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc36:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	695b      	ldr	r3, [r3, #20]
 800dc42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d102      	bne.n	800dc4e <mpool_alloc+0x126>
    {
        pool->head = new_node;
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	6a3a      	ldr	r2, [r7, #32]
 800dc4c:	615a      	str	r2, [r3, #20]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 800dc4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc50:	f000 f90d 	bl	800de6e <delink_node>
    
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	68da      	ldr	r2, [r3, #12]
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	440b      	add	r3, r1
 800dc64:	441a      	add	r2, r3
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	60da      	str	r2, [r3, #12]
    
    if (pool->leaf->clearOnAllocation > 0)
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	685b      	ldr	r3, [r3, #4]
 800dc6e:	695b      	ldr	r3, [r3, #20]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	dd12      	ble.n	800dc9a <mpool_alloc+0x172>
    {
        char* new_pool = (char*)node_to_alloc->pool;
 800dc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	61fb      	str	r3, [r7, #28]
 800dc7e:	e007      	b.n	800dc90 <mpool_alloc+0x168>
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	68fa      	ldr	r2, [r7, #12]
 800dc84:	4413      	add	r3, r2
 800dc86:	2200      	movs	r2, #0
 800dc88:	701a      	strb	r2, [r3, #0]
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	61fb      	str	r3, [r7, #28]
 800dc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc92:	68da      	ldr	r2, [r3, #12]
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d8f2      	bhi.n	800dc80 <mpool_alloc+0x158>
    }
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9c:	681b      	ldr	r3, [r3, #0]
#endif
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	372c      	adds	r7, #44	; 0x2c
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd90      	pop	{r4, r7, pc}

0800dca6 <mpool_calloc>:

/**
 * allocate memory from memory pool and also clear that memory to be blank
 */
char* mpool_calloc(size_t asize, _tMempool* pool)
{
 800dca6:	b590      	push	{r4, r7, lr}
 800dca8:	b08b      	sub	sp, #44	; 0x2c
 800dcaa:	af02      	add	r7, sp, #8
 800dcac:	6078      	str	r0, [r7, #4]
 800dcae:	6039      	str	r1, [r7, #0]
    pool->leaf->allocCount++;
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dcb6:	3201      	adds	r2, #1
 800dcb8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    memset(ret, 0, asize);
    return ret;
#else
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	695b      	ldr	r3, [r3, #20]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d116      	bne.n	800dcf0 <mpool_calloc+0x4a>
    {
        if ((pool->msize - pool->usize) > asize)
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	691a      	ldr	r2, [r3, #16]
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	1ad3      	subs	r3, r2, r3
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d206      	bcs.n	800dce0 <mpool_calloc+0x3a>
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f000 ff71 	bl	800ebc0 <LEAF_internalErrorCallback>
 800dcde:	e005      	b.n	800dcec <mpool_calloc+0x46>
        }
        else
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	2100      	movs	r1, #0
 800dce6:	4618      	mov	r0, r3
 800dce8:	f000 ff6a 	bl	800ebc0 <LEAF_internalErrorCallback>
        }
        return NULL;
 800dcec:	2300      	movs	r3, #0
 800dcee:	e08e      	b.n	800de0e <mpool_calloc+0x168>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 f890 	bl	800de16 <mpool_align>
 800dcf6:	6138      	str	r0, [r7, #16]
    mpool_node_t* node_to_alloc = pool->head;
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	695b      	ldr	r3, [r3, #20]
 800dcfc:	61fb      	str	r3, [r7, #28]
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 800dcfe:	e01c      	b.n	800dd3a <mpool_calloc+0x94>
    {
        node_to_alloc = node_to_alloc->next;
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	61fb      	str	r3, [r7, #28]
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d116      	bne.n	800dd3a <mpool_calloc+0x94>
        {
            if ((pool->msize - pool->usize) > asize)
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	691a      	ldr	r2, [r3, #16]
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	1ad3      	subs	r3, r2, r3
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d206      	bcs.n	800dd2a <mpool_calloc+0x84>
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	2101      	movs	r1, #1
 800dd22:	4618      	mov	r0, r3
 800dd24:	f000 ff4c 	bl	800ebc0 <LEAF_internalErrorCallback>
 800dd28:	e005      	b.n	800dd36 <mpool_calloc+0x90>
            }
            else
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	2100      	movs	r1, #0
 800dd30:	4618      	mov	r0, r3
 800dd32:	f000 ff45 	bl	800ebc0 <LEAF_internalErrorCallback>
            }
            return NULL;
 800dd36:	2300      	movs	r3, #0
 800dd38:	e069      	b.n	800de0e <mpool_calloc+0x168>
    while (node_to_alloc->size < size_to_alloc)
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	693a      	ldr	r2, [r7, #16]
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d8dd      	bhi.n	800dd00 <mpool_calloc+0x5a>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	68da      	ldr	r2, [r3, #12]
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	1ad3      	subs	r3, r2, r3
 800dd4c:	60fb      	str	r3, [r7, #12]
    node_to_alloc->size = size_to_alloc;
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	693a      	ldr	r2, [r7, #16]
 800dd52:	60da      	str	r2, [r3, #12]
    if (leftover > pool->leaf->header_size)
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd5a:	68fa      	ldr	r2, [r7, #12]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d924      	bls.n	800ddaa <mpool_calloc+0x104>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	69fa      	ldr	r2, [r7, #28]
 800dd66:	1ad3      	subs	r3, r2, r3
 800dd68:	60bb      	str	r3, [r7, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	441a      	add	r2, r3
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	4413      	add	r3, r2
 800dd7a:	60bb      	str	r3, [r7, #8]
        new_node = create_node(&pool->mpool[offset],
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	689a      	ldr	r2, [r3, #8]
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	689c      	ldr	r4, [r3, #8]
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        new_node = create_node(&pool->mpool[offset],
 800dd92:	68fa      	ldr	r2, [r7, #12]
 800dd94:	1ad2      	subs	r2, r2, r3
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	685b      	ldr	r3, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 800dd9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd9c:	9300      	str	r3, [sp, #0]
 800dd9e:	4613      	mov	r3, r2
 800dda0:	4622      	mov	r2, r4
 800dda2:	f000 f846 	bl	800de32 <create_node>
 800dda6:	61b8      	str	r0, [r7, #24]
 800dda8:	e008      	b.n	800ddbc <mpool_calloc+0x116>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	68da      	ldr	r2, [r3, #12]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	441a      	add	r2, r3
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	61bb      	str	r3, [r7, #24]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	695b      	ldr	r3, [r3, #20]
 800ddc0:	69fa      	ldr	r2, [r7, #28]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d102      	bne.n	800ddcc <mpool_calloc+0x126>
    {
        pool->head = new_node;
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	69ba      	ldr	r2, [r7, #24]
 800ddca:	615a      	str	r2, [r3, #20]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 800ddcc:	69f8      	ldr	r0, [r7, #28]
 800ddce:	f000 f84e 	bl	800de6e <delink_node>
    
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	68da      	ldr	r2, [r3, #12]
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	440b      	add	r3, r1
 800dde2:	441a      	add	r2, r3
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	60da      	str	r2, [r3, #12]
    // Format the new pool
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 800dde8:	2300      	movs	r3, #0
 800ddea:	617b      	str	r3, [r7, #20]
 800ddec:	e008      	b.n	800de00 <mpool_calloc+0x15a>
 800ddee:	69fb      	ldr	r3, [r7, #28]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	701a      	strb	r2, [r3, #0]
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	617b      	str	r3, [r7, #20]
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	68da      	ldr	r2, [r3, #12]
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	429a      	cmp	r2, r3
 800de08:	d8f1      	bhi.n	800ddee <mpool_calloc+0x148>
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	681b      	ldr	r3, [r3, #0]
#endif
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3724      	adds	r7, #36	; 0x24
 800de12:	46bd      	mov	sp, r7
 800de14:	bd90      	pop	{r4, r7, pc}

0800de16 <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 800de16:	b480      	push	{r7}
 800de18:	b083      	sub	sp, #12
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	3307      	adds	r3, #7
 800de22:	f023 0307 	bic.w	r3, r3, #7
}
 800de26:	4618      	mov	r0, r3
 800de28:	370c      	adds	r7, #12
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr

0800de32 <create_node>:

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
 800de32:	b480      	push	{r7}
 800de34:	b087      	sub	sp, #28
 800de36:	af00      	add	r7, sp, #0
 800de38:	60f8      	str	r0, [r7, #12]
 800de3a:	60b9      	str	r1, [r7, #8]
 800de3c:	607a      	str	r2, [r7, #4]
 800de3e:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	617b      	str	r3, [r7, #20]
    node->pool = block_location + header_size;
 800de44:	68fa      	ldr	r2, [r7, #12]
 800de46:	6a3b      	ldr	r3, [r7, #32]
 800de48:	441a      	add	r2, r3
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	601a      	str	r2, [r3, #0]
    node->next = next;
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	609a      	str	r2, [r3, #8]
    node->size = size;
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	683a      	ldr	r2, [r7, #0]
 800de5e:	60da      	str	r2, [r3, #12]
    
    return node;
 800de60:	697b      	ldr	r3, [r7, #20]
}
 800de62:	4618      	mov	r0, r3
 800de64:	371c      	adds	r7, #28
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 800de6e:	b480      	push	{r7}
 800de70:	b083      	sub	sp, #12
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d004      	beq.n	800de88 <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	6892      	ldr	r2, [r2, #8]
 800de86:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d004      	beq.n	800de9a <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	689b      	ldr	r3, [r3, #8]
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	6852      	ldr	r2, [r2, #4]
 800de98:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2200      	movs	r2, #0
 800de9e:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2200      	movs	r2, #0
 800dea4:	609a      	str	r2, [r3, #8]
}
 800dea6:	bf00      	nop
 800dea8:	370c      	adds	r7, #12
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr

0800deb2 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b084      	sub	sp, #16
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	60f8      	str	r0, [r7, #12]
 800deba:	60b9      	str	r1, [r7, #8]
 800debc:	607a      	str	r2, [r7, #4]
 800debe:	603b      	str	r3, [r7, #0]
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	3318      	adds	r3, #24
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	68b9      	ldr	r1, [r7, #8]
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	f000 f804 	bl	800ded6 <tMempool_initToPool>
}
 800dece:	bf00      	nop
 800ded0:	3710      	adds	r7, #16
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b086      	sub	sp, #24
 800deda:	af00      	add	r7, sp, #0
 800dedc:	60f8      	str	r0, [r7, #12]
 800dede:	60b9      	str	r1, [r7, #8]
 800dee0:	607a      	str	r2, [r7, #4]
 800dee2:	603b      	str	r3, [r7, #0]
    _tMempool* mm = *mem;
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	617b      	str	r3, [r7, #20]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800deea:	6979      	ldr	r1, [r7, #20]
 800deec:	2018      	movs	r0, #24
 800deee:	f7ff fe1b 	bl	800db28 <mpool_alloc>
 800def2:	4602      	mov	r2, r0
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	601a      	str	r2, [r3, #0]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	613b      	str	r3, [r7, #16]
    m->leaf = mm->leaf;
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	685a      	ldr	r2, [r3, #4]
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	605a      	str	r2, [r3, #4]
    
    mpool_create (memory, size, m);
 800df06:	693a      	ldr	r2, [r7, #16]
 800df08:	6879      	ldr	r1, [r7, #4]
 800df0a:	68b8      	ldr	r0, [r7, #8]
 800df0c:	f7ff fdc8 	bl	800daa0 <mpool_create>
}
 800df10:	bf00      	nop
 800df12:	3718      	adds	r7, #24
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <tStack_initToPool>:
{
    tStack_initToPool(stack, &leaf->mempool);
}

void    tStack_initToPool           (tStack* const stack, tMempool* const mp)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b086      	sub	sp, #24
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	613b      	str	r3, [r7, #16]
    _tStack* ns = *stack = (_tStack*) mpool_alloc(sizeof(_tStack), m);
 800df28:	6939      	ldr	r1, [r7, #16]
 800df2a:	f44f 7004 	mov.w	r0, #528	; 0x210
 800df2e:	f7ff fdfb 	bl	800db28 <mpool_alloc>
 800df32:	4602      	mov	r2, r0
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	601a      	str	r2, [r3, #0]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	60fb      	str	r3, [r7, #12]
    ns->mempool = m;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	693a      	ldr	r2, [r7, #16]
 800df42:	601a      	str	r2, [r3, #0]
    
    ns->ordered = 0;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2200      	movs	r2, #0
 800df48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    ns->size = 0;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2200      	movs	r2, #0
 800df50:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
    ns->pos = 0;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2200      	movs	r2, #0
 800df58:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
    ns->capacity = STACK_SIZE;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2280      	movs	r2, #128	; 0x80
 800df60:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
    
    for (int i = 0; i < STACK_SIZE; i++) ns->data[i] = -1;
 800df64:	2300      	movs	r3, #0
 800df66:	617b      	str	r3, [r7, #20]
 800df68:	e009      	b.n	800df7e <tStack_initToPool+0x66>
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	4413      	add	r3, r2
 800df72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df76:	605a      	str	r2, [r3, #4]
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	3301      	adds	r3, #1
 800df7c:	617b      	str	r3, [r7, #20]
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	2b7f      	cmp	r3, #127	; 0x7f
 800df82:	ddf2      	ble.n	800df6a <tStack_initToPool+0x52>
}
 800df84:	bf00      	nop
 800df86:	bf00      	nop
 800df88:	3718      	adds	r7, #24
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}

0800df8e <tStack_contains>:
    mpool_free((char*)ns, ns->mempool);
}

// If stack contains note, returns index. Else returns -1;
int tStack_contains(tStack* const stack, uint16_t noteVal)
{
 800df8e:	b480      	push	{r7}
 800df90:	b085      	sub	sp, #20
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
 800df96:	460b      	mov	r3, r1
 800df98:	807b      	strh	r3, [r7, #2]
    _tStack* ns = *stack;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < ns->size; i++)
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	60fb      	str	r3, [r7, #12]
 800dfa4:	e00c      	b.n	800dfc0 <tStack_contains+0x32>
    {
        if (ns->data[i] == noteVal)    return i;
 800dfa6:	68ba      	ldr	r2, [r7, #8]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	4413      	add	r3, r2
 800dfae:	685a      	ldr	r2, [r3, #4]
 800dfb0:	887b      	ldrh	r3, [r7, #2]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d101      	bne.n	800dfba <tStack_contains+0x2c>
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	e00b      	b.n	800dfd2 <tStack_contains+0x44>
    for (int i = 0; i < ns->size; i++)
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	60fb      	str	r3, [r7, #12]
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	dbeb      	blt.n	800dfa6 <tStack_contains+0x18>
    }
    return -1;
 800dfce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3714      	adds	r7, #20
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr

0800dfde <tStack_add>:

void tStack_add(tStack* const stack, uint16_t noteVal)
{
 800dfde:	b480      	push	{r7}
 800dfe0:	b087      	sub	sp, #28
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	807b      	strh	r3, [r7, #2]
    _tStack* ns = *stack;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	60fb      	str	r3, [r7, #12]
    
    uint8_t j;
    
    int whereToInsert = 0;
 800dff0:	2300      	movs	r3, #0
 800dff2:	613b      	str	r3, [r7, #16]
    if (ns->ordered)
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d02a      	beq.n	800e054 <tStack_add+0x76>
    {
        for (j = 0; j < ns->size; j++)
 800dffe:	2300      	movs	r3, #0
 800e000:	75fb      	strb	r3, [r7, #23]
 800e002:	e020      	b.n	800e046 <tStack_add+0x68>
        {
            if (noteVal > ns->data[j])
 800e004:	887a      	ldrh	r2, [r7, #2]
 800e006:	7dfb      	ldrb	r3, [r7, #23]
 800e008:	68f9      	ldr	r1, [r7, #12]
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	440b      	add	r3, r1
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	429a      	cmp	r2, r3
 800e012:	dd15      	ble.n	800e040 <tStack_add+0x62>
            {
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 800e014:	887a      	ldrh	r2, [r7, #2]
 800e016:	7dfb      	ldrb	r3, [r7, #23]
 800e018:	3301      	adds	r3, #1
 800e01a:	68f9      	ldr	r1, [r7, #12]
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	440b      	add	r3, r1
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	429a      	cmp	r2, r3
 800e024:	db08      	blt.n	800e038 <tStack_add+0x5a>
 800e026:	7dfb      	ldrb	r3, [r7, #23]
 800e028:	3301      	adds	r3, #1
 800e02a:	68fa      	ldr	r2, [r7, #12]
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	4413      	add	r3, r2
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e036:	d103      	bne.n	800e040 <tStack_add+0x62>
                {
                    whereToInsert = j+1;
 800e038:	7dfb      	ldrb	r3, [r7, #23]
 800e03a:	3301      	adds	r3, #1
 800e03c:	613b      	str	r3, [r7, #16]
                    break;
 800e03e:	e009      	b.n	800e054 <tStack_add+0x76>
        for (j = 0; j < ns->size; j++)
 800e040:	7dfb      	ldrb	r3, [r7, #23]
 800e042:	3301      	adds	r3, #1
 800e044:	75fb      	strb	r3, [r7, #23]
 800e046:	7dfb      	ldrb	r3, [r7, #23]
 800e048:	b29a      	uxth	r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800e050:	429a      	cmp	r2, r3
 800e052:	d3d7      	bcc.n	800e004 <tStack_add+0x26>
            }
        }
    }
    
    //first move notes that are already in the stack one position to the right
    for (j = ns->size; j > whereToInsert; j--)
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800e05a:	75fb      	strb	r3, [r7, #23]
 800e05c:	e00d      	b.n	800e07a <tStack_add+0x9c>
    {
        ns->data[j] = ns->data[(j - 1)];
 800e05e:	7dfb      	ldrb	r3, [r7, #23]
 800e060:	3b01      	subs	r3, #1
 800e062:	7df8      	ldrb	r0, [r7, #23]
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4413      	add	r3, r2
 800e06a:	685a      	ldr	r2, [r3, #4]
 800e06c:	68f9      	ldr	r1, [r7, #12]
 800e06e:	0083      	lsls	r3, r0, #2
 800e070:	440b      	add	r3, r1
 800e072:	605a      	str	r2, [r3, #4]
    for (j = ns->size; j > whereToInsert; j--)
 800e074:	7dfb      	ldrb	r3, [r7, #23]
 800e076:	3b01      	subs	r3, #1
 800e078:	75fb      	strb	r3, [r7, #23]
 800e07a:	7dfb      	ldrb	r3, [r7, #23]
 800e07c:	693a      	ldr	r2, [r7, #16]
 800e07e:	429a      	cmp	r2, r3
 800e080:	dbed      	blt.n	800e05e <tStack_add+0x80>
    }
    
    //then, insert the new note into the front of the stack
    ns->data[whereToInsert] = noteVal;
 800e082:	887a      	ldrh	r2, [r7, #2]
 800e084:	68f9      	ldr	r1, [r7, #12]
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	440b      	add	r3, r1
 800e08c:	605a      	str	r2, [r3, #4]
    
    ns->size++;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800e094:	3301      	adds	r3, #1
 800e096:	b29a      	uxth	r2, r3
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
}
 800e09e:	bf00      	nop
 800e0a0:	371c      	adds	r7, #28
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr

0800e0aa <tStack_remove>:
    return added;
}

// Remove noteVal. return 1 if removed, 0 if not
int tStack_remove(tStack* const stack, uint16_t noteVal)
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b086      	sub	sp, #24
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	807b      	strh	r3, [r7, #2]

    _tStack* ns = *stack;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	60fb      	str	r3, [r7, #12]
    
    uint8_t k;
    int foundIndex = tStack_contains(stack, noteVal);
 800e0bc:	887b      	ldrh	r3, [r7, #2]
 800e0be:	4619      	mov	r1, r3
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f7ff ff64 	bl	800df8e <tStack_contains>
 800e0c6:	60b8      	str	r0, [r7, #8]
    int removed = 0;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	613b      	str	r3, [r7, #16]
    
    if (foundIndex >= 0)
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	db50      	blt.n	800e174 <tStack_remove+0xca>
    {
        for (k = 0; k < (ns->size - foundIndex); k++)
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	75fb      	strb	r3, [r7, #23]
 800e0d6:	e037      	b.n	800e148 <tStack_remove+0x9e>
        {
            if ((k+foundIndex) >= (ns->capacity - 1))
 800e0d8:	7dfa      	ldrb	r2, [r7, #23]
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	441a      	add	r2, r3
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	db09      	blt.n	800e0fe <tStack_remove+0x54>
            {
                ns->data[k + foundIndex] = -1;
 800e0ea:	7dfa      	ldrb	r2, [r7, #23]
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	68fa      	ldr	r2, [r7, #12]
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	4413      	add	r3, r2
 800e0f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0fa:	605a      	str	r2, [r3, #4]
 800e0fc:	e021      	b.n	800e142 <tStack_remove+0x98>
            }
            else
            {
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
 800e0fe:	7dfa      	ldrb	r2, [r7, #23]
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	4413      	add	r3, r2
 800e104:	3301      	adds	r3, #1
 800e106:	7df9      	ldrb	r1, [r7, #23]
 800e108:	68ba      	ldr	r2, [r7, #8]
 800e10a:	1888      	adds	r0, r1, r2
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	4413      	add	r3, r2
 800e112:	685a      	ldr	r2, [r3, #4]
 800e114:	68f9      	ldr	r1, [r7, #12]
 800e116:	0083      	lsls	r3, r0, #2
 800e118:	440b      	add	r3, r1
 800e11a:	605a      	str	r2, [r3, #4]
                if ((k + foundIndex) == (ns->size - 1))
 800e11c:	7dfa      	ldrb	r2, [r7, #23]
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	441a      	add	r2, r3
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800e128:	3b01      	subs	r3, #1
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d109      	bne.n	800e142 <tStack_remove+0x98>
                {
                    ns->data[k + foundIndex + 1] = -1;
 800e12e:	7dfa      	ldrb	r2, [r7, #23]
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	4413      	add	r3, r2
 800e134:	3301      	adds	r3, #1
 800e136:	68fa      	ldr	r2, [r7, #12]
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	4413      	add	r3, r2
 800e13c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e140:	605a      	str	r2, [r3, #4]
        for (k = 0; k < (ns->size - foundIndex); k++)
 800e142:	7dfb      	ldrb	r3, [r7, #23]
 800e144:	3301      	adds	r3, #1
 800e146:	75fb      	strb	r3, [r7, #23]
 800e148:	7dfa      	ldrb	r2, [r7, #23]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800e150:	4619      	mov	r1, r3
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	1acb      	subs	r3, r1, r3
 800e156:	429a      	cmp	r2, r3
 800e158:	dbbe      	blt.n	800e0d8 <tStack_remove+0x2e>
                }
            }
            
        }
        // in case it got put on the stack multiple times
        foundIndex--;
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	3b01      	subs	r3, #1
 800e15e:	60bb      	str	r3, [r7, #8]
        ns->size--;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800e166:	3b01      	subs	r3, #1
 800e168:	b29a      	uxth	r2, r3
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
        removed = 1;
 800e170:	2301      	movs	r3, #1
 800e172:	613b      	str	r3, [r7, #16]
    }
    
    return removed;
 800e174:	693b      	ldr	r3, [r7, #16]
}
 800e176:	4618      	mov	r0, r3
 800e178:	3718      	adds	r7, #24
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}

0800e17e <tStack_getSize>:
        ns->pos = 0;
    }
}

int tStack_getSize(tStack* const stack)
{
 800e17e:	b480      	push	{r7}
 800e180:	b085      	sub	sp, #20
 800e182:	af00      	add	r7, sp, #0
 800e184:	6078      	str	r0, [r7, #4]
    _tStack* ns = *stack;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	60fb      	str	r3, [r7, #12]
    
    return ns->size;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
}
 800e192:	4618      	mov	r0, r3
 800e194:	3714      	adds	r7, #20
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr

0800e19e <tStack_get>:
        return -1;
    }
}

int tStack_get(tStack* const stack, int which)
{
 800e19e:	b480      	push	{r7}
 800e1a0:	b085      	sub	sp, #20
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	6039      	str	r1, [r7, #0]
    _tStack* ns = *stack;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	60fb      	str	r3, [r7, #12]
    return ns->data[which];
 800e1ae:	68fa      	ldr	r2, [r7, #12]
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	4413      	add	r3, r2
 800e1b6:	685b      	ldr	r3, [r3, #4]
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3714      	adds	r7, #20
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <tSimplePoly_init>:
//tSimplePoly = much more efficient implementation without ramps and glide


// SIMPLE POLY
void tSimplePoly_init(tSimplePoly* const polyh, int maxNumVoices, LEAF* const leaf)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	60f8      	str	r0, [r7, #12]
 800e1cc:	60b9      	str	r1, [r7, #8]
 800e1ce:	607a      	str	r2, [r7, #4]
    tSimplePoly_initToPool(polyh, maxNumVoices, &leaf->mempool);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	3318      	adds	r3, #24
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	68b9      	ldr	r1, [r7, #8]
 800e1d8:	68f8      	ldr	r0, [r7, #12]
 800e1da:	f000 f804 	bl	800e1e6 <tSimplePoly_initToPool>
}
 800e1de:	bf00      	nop
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <tSimplePoly_initToPool>:

void    tSimplePoly_initToPool            (tSimplePoly* const polyh, int maxNumVoices, tMempool* const mp)
{
 800e1e6:	b590      	push	{r4, r7, lr}
 800e1e8:	b089      	sub	sp, #36	; 0x24
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	60f8      	str	r0, [r7, #12]
 800e1ee:	60b9      	str	r1, [r7, #8]
 800e1f0:	607a      	str	r2, [r7, #4]
    _tMempool* m = *mp;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	617b      	str	r3, [r7, #20]
    _tSimplePoly* poly = *polyh = (_tSimplePoly*) mpool_alloc(sizeof(_tSimplePoly), m);
 800e1f8:	6979      	ldr	r1, [r7, #20]
 800e1fa:	f240 401c 	movw	r0, #1052	; 0x41c
 800e1fe:	f7ff fc93 	bl	800db28 <mpool_alloc>
 800e202:	4602      	mov	r2, r0
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	601a      	str	r2, [r3, #0]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	613b      	str	r3, [r7, #16]
    poly->mempool = m;
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	697a      	ldr	r2, [r7, #20]
 800e212:	601a      	str	r2, [r3, #0]

    poly->numVoices = maxNumVoices;
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	68ba      	ldr	r2, [r7, #8]
 800e218:	609a      	str	r2, [r3, #8]
    poly->maxNumVoices = maxNumVoices;
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	68ba      	ldr	r2, [r7, #8]
 800e21e:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < 128; i++)
 800e220:	2300      	movs	r3, #0
 800e222:	61fb      	str	r3, [r7, #28]
 800e224:	e010      	b.n	800e248 <tSimplePoly_initToPool+0x62>
    {
        poly->notes[i][0] = -1;
 800e226:	693a      	ldr	r2, [r7, #16]
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	3303      	adds	r3, #3
 800e22c:	00db      	lsls	r3, r3, #3
 800e22e:	4413      	add	r3, r2
 800e230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e234:	605a      	str	r2, [r3, #4]
        poly->notes[i][1] = 0;
 800e236:	693a      	ldr	r2, [r7, #16]
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	00db      	lsls	r3, r3, #3
 800e23c:	4413      	add	r3, r2
 800e23e:	2200      	movs	r2, #0
 800e240:	621a      	str	r2, [r3, #32]
    for (int i = 0; i < 128; i++)
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	3301      	adds	r3, #1
 800e246:	61fb      	str	r3, [r7, #28]
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	2b7f      	cmp	r3, #127	; 0x7f
 800e24c:	ddeb      	ble.n	800e226 <tSimplePoly_initToPool+0x40>
    }
    poly->stealing_on = 1;
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	2201      	movs	r2, #1
 800e252:	615a      	str	r2, [r3, #20]
    poly->recover_stolen = 1;
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	2201      	movs	r2, #1
 800e258:	619a      	str	r2, [r3, #24]
    poly->voices = (int**) mpool_calloc(sizeof(int*) * poly->maxNumVoices, m);
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	6979      	ldr	r1, [r7, #20]
 800e262:	4618      	mov	r0, r3
 800e264:	f7ff fd1f 	bl	800dca6 <mpool_calloc>
 800e268:	4602      	mov	r2, r0
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	611a      	str	r2, [r3, #16]

    for (int i = 0; i < poly->maxNumVoices; ++i)
 800e26e:	2300      	movs	r3, #0
 800e270:	61bb      	str	r3, [r7, #24]
 800e272:	e016      	b.n	800e2a2 <tSimplePoly_initToPool+0xbc>
    {
        poly->voices[i] = (int*) mpool_calloc(sizeof(int) * 3, m);
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	691a      	ldr	r2, [r3, #16]
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	18d4      	adds	r4, r2, r3
 800e27e:	6979      	ldr	r1, [r7, #20]
 800e280:	200c      	movs	r0, #12
 800e282:	f7ff fd10 	bl	800dca6 <mpool_calloc>
 800e286:	4603      	mov	r3, r0
 800e288:	6023      	str	r3, [r4, #0]
        poly->voices[i][0] = -1;
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	691a      	ldr	r2, [r3, #16]
 800e28e:	69bb      	ldr	r3, [r7, #24]
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	4413      	add	r3, r2
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e29a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < poly->maxNumVoices; ++i)
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	61bb      	str	r3, [r7, #24]
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	68db      	ldr	r3, [r3, #12]
 800e2a6:	69ba      	ldr	r2, [r7, #24]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	dbe3      	blt.n	800e274 <tSimplePoly_initToPool+0x8e>
    }
    tStack_initToPool(&poly->stack, mp);
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	3304      	adds	r3, #4
 800e2b0:	6879      	ldr	r1, [r7, #4]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7ff fe30 	bl	800df18 <tStack_initToPool>

}
 800e2b8:	bf00      	nop
 800e2ba:	3724      	adds	r7, #36	; 0x24
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd90      	pop	{r4, r7, pc}

0800e2c0 <tSimplePoly_noteOn>:
    mpool_free((char*)poly->voices, poly->mempool);
    mpool_free((char*)poly, poly->mempool);
}

int tSimplePoly_noteOn(tSimplePoly* const polyh, int note, uint8_t vel)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b08e      	sub	sp, #56	; 0x38
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	71fb      	strb	r3, [r7, #7]
    _tSimplePoly* poly = *polyh;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	623b      	str	r3, [r7, #32]
    int whichVoice, whichNote, oldNote, alteredVoice;
    // if not in keymap or already on stack, dont do anything. else, add that note.
    if (tStack_contains(&poly->stack, note) >= 0) return -1;
 800e2d4:	6a3b      	ldr	r3, [r7, #32]
 800e2d6:	3304      	adds	r3, #4
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	b292      	uxth	r2, r2
 800e2dc:	4611      	mov	r1, r2
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7ff fe55 	bl	800df8e <tStack_contains>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	db02      	blt.n	800e2f0 <tSimplePoly_noteOn+0x30>
 800e2ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2ee:	e103      	b.n	800e4f8 <tSimplePoly_noteOn+0x238>
    else
    {
        alteredVoice = -1;
 800e2f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2f4:	637b      	str	r3, [r7, #52]	; 0x34
        int found = 0;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	633b      	str	r3, [r7, #48]	; 0x30
        for (int i = 0; i < poly->numVoices; i++)
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2fe:	e040      	b.n	800e382 <tSimplePoly_noteOn+0xc2>
        {
            if (poly->voices[i][0] == -1)    // if inactive voice, give this note to voice
 800e300:	6a3b      	ldr	r3, [r7, #32]
 800e302:	691a      	ldr	r2, [r3, #16]
 800e304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	4413      	add	r3, r2
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e312:	d133      	bne.n	800e37c <tSimplePoly_noteOn+0xbc>
            {

                found = 1;
 800e314:	2301      	movs	r3, #1
 800e316:	633b      	str	r3, [r7, #48]	; 0x30

                poly->voices[i][0] = note;
 800e318:	6a3b      	ldr	r3, [r7, #32]
 800e31a:	691a      	ldr	r2, [r3, #16]
 800e31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	4413      	add	r3, r2
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	68ba      	ldr	r2, [r7, #8]
 800e326:	601a      	str	r2, [r3, #0]
                poly->voices[i][1] = vel;
 800e328:	6a3b      	ldr	r3, [r7, #32]
 800e32a:	691a      	ldr	r2, [r3, #16]
 800e32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	4413      	add	r3, r2
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	3304      	adds	r3, #4
 800e336:	79fa      	ldrb	r2, [r7, #7]
 800e338:	601a      	str	r2, [r3, #0]
                poly->notes[note][0] = i;
 800e33a:	6a3a      	ldr	r2, [r7, #32]
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	3303      	adds	r3, #3
 800e340:	00db      	lsls	r3, r3, #3
 800e342:	4413      	add	r3, r2
 800e344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e346:	605a      	str	r2, [r3, #4]
                poly->notes[note][1] = vel;
 800e348:	79fa      	ldrb	r2, [r7, #7]
 800e34a:	6a39      	ldr	r1, [r7, #32]
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	00db      	lsls	r3, r3, #3
 800e350:	440b      	add	r3, r1
 800e352:	621a      	str	r2, [r3, #32]
                poly->voices[i][2] = note; // voices[i][2] is the output midi note, (avoiding the -1 when a voice is inactive)
 800e354:	6a3b      	ldr	r3, [r7, #32]
 800e356:	691a      	ldr	r2, [r3, #16]
 800e358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	4413      	add	r3, r2
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	3308      	adds	r3, #8
 800e362:	68ba      	ldr	r2, [r7, #8]
 800e364:	601a      	str	r2, [r3, #0]

                alteredVoice = i;
 800e366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e368:	637b      	str	r3, [r7, #52]	; 0x34
                tStack_add(&poly->stack, note);
 800e36a:	6a3b      	ldr	r3, [r7, #32]
 800e36c:	3304      	adds	r3, #4
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	b292      	uxth	r2, r2
 800e372:	4611      	mov	r1, r2
 800e374:	4618      	mov	r0, r3
 800e376:	f7ff fe32 	bl	800dfde <tStack_add>
                break;
 800e37a:	e007      	b.n	800e38c <tSimplePoly_noteOn+0xcc>
        for (int i = 0; i < poly->numVoices; i++)
 800e37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37e:	3301      	adds	r3, #1
 800e380:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e382:	6a3b      	ldr	r3, [r7, #32]
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e388:	429a      	cmp	r2, r3
 800e38a:	dbb9      	blt.n	800e300 <tSimplePoly_noteOn+0x40>
            }
        }
        if (!found)
 800e38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d148      	bne.n	800e424 <tSimplePoly_noteOn+0x164>
        {
            //second preference is grabbing one that is in release phase but not finished sounding yet
            for (int i = 0 ; i < poly->numVoices; i++)
 800e392:	2300      	movs	r3, #0
 800e394:	62bb      	str	r3, [r7, #40]	; 0x28
 800e396:	e040      	b.n	800e41a <tSimplePoly_noteOn+0x15a>
            {
                if (poly->voices[i][0] == -2)    // if voice is released but still sounding, take over this voice
 800e398:	6a3b      	ldr	r3, [r7, #32]
 800e39a:	691a      	ldr	r2, [r3, #16]
 800e39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	4413      	add	r3, r2
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f113 0f02 	cmn.w	r3, #2
 800e3aa:	d133      	bne.n	800e414 <tSimplePoly_noteOn+0x154>
                {

                    found = 1;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	633b      	str	r3, [r7, #48]	; 0x30

                    poly->voices[i][0] = note;
 800e3b0:	6a3b      	ldr	r3, [r7, #32]
 800e3b2:	691a      	ldr	r2, [r3, #16]
 800e3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	4413      	add	r3, r2
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	601a      	str	r2, [r3, #0]
                    poly->voices[i][1] = vel;
 800e3c0:	6a3b      	ldr	r3, [r7, #32]
 800e3c2:	691a      	ldr	r2, [r3, #16]
 800e3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	4413      	add	r3, r2
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	3304      	adds	r3, #4
 800e3ce:	79fa      	ldrb	r2, [r7, #7]
 800e3d0:	601a      	str	r2, [r3, #0]
                    poly->notes[note][0] = i;
 800e3d2:	6a3a      	ldr	r2, [r7, #32]
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	3303      	adds	r3, #3
 800e3d8:	00db      	lsls	r3, r3, #3
 800e3da:	4413      	add	r3, r2
 800e3dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3de:	605a      	str	r2, [r3, #4]
                    poly->notes[note][1] = vel;
 800e3e0:	79fa      	ldrb	r2, [r7, #7]
 800e3e2:	6a39      	ldr	r1, [r7, #32]
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	00db      	lsls	r3, r3, #3
 800e3e8:	440b      	add	r3, r1
 800e3ea:	621a      	str	r2, [r3, #32]
                    poly->voices[i][2] = note; // voices[i][2] is the output midi note, (avoiding the -1 when a voice is inactive)
 800e3ec:	6a3b      	ldr	r3, [r7, #32]
 800e3ee:	691a      	ldr	r2, [r3, #16]
 800e3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	4413      	add	r3, r2
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	3308      	adds	r3, #8
 800e3fa:	68ba      	ldr	r2, [r7, #8]
 800e3fc:	601a      	str	r2, [r3, #0]

                    alteredVoice = i;
 800e3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e400:	637b      	str	r3, [r7, #52]	; 0x34
                    tStack_add(&poly->stack, note);
 800e402:	6a3b      	ldr	r3, [r7, #32]
 800e404:	3304      	adds	r3, #4
 800e406:	68ba      	ldr	r2, [r7, #8]
 800e408:	b292      	uxth	r2, r2
 800e40a:	4611      	mov	r1, r2
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7ff fde6 	bl	800dfde <tStack_add>
                    break;
 800e412:	e007      	b.n	800e424 <tSimplePoly_noteOn+0x164>
            for (int i = 0 ; i < poly->numVoices; i++)
 800e414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e416:	3301      	adds	r3, #1
 800e418:	62bb      	str	r3, [r7, #40]	; 0x28
 800e41a:	6a3b      	ldr	r3, [r7, #32]
 800e41c:	689b      	ldr	r3, [r3, #8]
 800e41e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e420:	429a      	cmp	r2, r3
 800e422:	dbb9      	blt.n	800e398 <tSimplePoly_noteOn+0xd8>
                }
            }
        }
        if ((!found) && (poly->stealing_on)) //steal
 800e424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e426:	2b00      	cmp	r3, #0
 800e428:	d165      	bne.n	800e4f6 <tSimplePoly_noteOn+0x236>
 800e42a:	6a3b      	ldr	r3, [r7, #32]
 800e42c:	695b      	ldr	r3, [r3, #20]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d061      	beq.n	800e4f6 <tSimplePoly_noteOn+0x236>
        {
            for (int j = tStack_getSize(&poly->stack) - 1; j >= 0; j--)
 800e432:	6a3b      	ldr	r3, [r7, #32]
 800e434:	3304      	adds	r3, #4
 800e436:	4618      	mov	r0, r3
 800e438:	f7ff fea1 	bl	800e17e <tStack_getSize>
 800e43c:	4603      	mov	r3, r0
 800e43e:	3b01      	subs	r3, #1
 800e440:	627b      	str	r3, [r7, #36]	; 0x24
 800e442:	e055      	b.n	800e4f0 <tSimplePoly_noteOn+0x230>
            {
                whichNote = tStack_get(&poly->stack, j);
 800e444:	6a3b      	ldr	r3, [r7, #32]
 800e446:	3304      	adds	r3, #4
 800e448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7ff fea7 	bl	800e19e <tStack_get>
 800e450:	61f8      	str	r0, [r7, #28]
                whichVoice = poly->notes[whichNote][0];
 800e452:	6a3a      	ldr	r2, [r7, #32]
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	3303      	adds	r3, #3
 800e458:	00db      	lsls	r3, r3, #3
 800e45a:	4413      	add	r3, r2
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	61bb      	str	r3, [r7, #24]
                if (whichVoice >= 0)
 800e460:	69bb      	ldr	r3, [r7, #24]
 800e462:	2b00      	cmp	r3, #0
 800e464:	db41      	blt.n	800e4ea <tSimplePoly_noteOn+0x22a>
                {
                    oldNote = poly->voices[whichVoice][0];
 800e466:	6a3b      	ldr	r3, [r7, #32]
 800e468:	691a      	ldr	r2, [r3, #16]
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	4413      	add	r3, r2
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	617b      	str	r3, [r7, #20]
                    poly->voices[whichVoice][0] = note;
 800e476:	6a3b      	ldr	r3, [r7, #32]
 800e478:	691a      	ldr	r2, [r3, #16]
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	4413      	add	r3, r2
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	68ba      	ldr	r2, [r7, #8]
 800e484:	601a      	str	r2, [r3, #0]
                    poly->voices[whichVoice][1] = vel;
 800e486:	6a3b      	ldr	r3, [r7, #32]
 800e488:	691a      	ldr	r2, [r3, #16]
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	009b      	lsls	r3, r3, #2
 800e48e:	4413      	add	r3, r2
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	3304      	adds	r3, #4
 800e494:	79fa      	ldrb	r2, [r7, #7]
 800e496:	601a      	str	r2, [r3, #0]
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
 800e498:	6a3a      	ldr	r2, [r7, #32]
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	3303      	adds	r3, #3
 800e49e:	00db      	lsls	r3, r3, #3
 800e4a0:	4413      	add	r3, r2
 800e4a2:	f06f 0202 	mvn.w	r2, #2
 800e4a6:	605a      	str	r2, [r3, #4]
                    poly->notes[note][0] = whichVoice;
 800e4a8:	6a3a      	ldr	r2, [r7, #32]
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	3303      	adds	r3, #3
 800e4ae:	00db      	lsls	r3, r3, #3
 800e4b0:	4413      	add	r3, r2
 800e4b2:	69ba      	ldr	r2, [r7, #24]
 800e4b4:	605a      	str	r2, [r3, #4]
                    poly->notes[note][1] = vel;
 800e4b6:	79fa      	ldrb	r2, [r7, #7]
 800e4b8:	6a39      	ldr	r1, [r7, #32]
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	00db      	lsls	r3, r3, #3
 800e4be:	440b      	add	r3, r1
 800e4c0:	621a      	str	r2, [r3, #32]

                    poly->voices[whichVoice][2] = note;
 800e4c2:	6a3b      	ldr	r3, [r7, #32]
 800e4c4:	691a      	ldr	r2, [r3, #16]
 800e4c6:	69bb      	ldr	r3, [r7, #24]
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4413      	add	r3, r2
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	3308      	adds	r3, #8
 800e4d0:	68ba      	ldr	r2, [r7, #8]
 800e4d2:	601a      	str	r2, [r3, #0]

                    alteredVoice = whichVoice;
 800e4d4:	69bb      	ldr	r3, [r7, #24]
 800e4d6:	637b      	str	r3, [r7, #52]	; 0x34
                    tStack_add(&poly->stack, note);
 800e4d8:	6a3b      	ldr	r3, [r7, #32]
 800e4da:	3304      	adds	r3, #4
 800e4dc:	68ba      	ldr	r2, [r7, #8]
 800e4de:	b292      	uxth	r2, r2
 800e4e0:	4611      	mov	r1, r2
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7ff fd7b 	bl	800dfde <tStack_add>
                    break;
 800e4e8:	e005      	b.n	800e4f6 <tSimplePoly_noteOn+0x236>
            for (int j = tStack_getSize(&poly->stack) - 1; j >= 0; j--)
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	627b      	str	r3, [r7, #36]	; 0x24
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	daa6      	bge.n	800e444 <tSimplePoly_noteOn+0x184>
                }
            }
        }
        return alteredVoice;
 800e4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3738      	adds	r7, #56	; 0x38
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <tSimplePoly_noteOff>:



int tSimplePoly_noteOff(tSimplePoly* const polyh, uint8_t note)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b088      	sub	sp, #32
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	460b      	mov	r3, r1
 800e50a:	70fb      	strb	r3, [r7, #3]
    _tSimplePoly* poly = *polyh;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	613b      	str	r3, [r7, #16]
    int16_t noteToTest = -1;
 800e512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e516:	81fb      	strh	r3, [r7, #14]

    tStack_remove(&poly->stack, note);
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	3304      	adds	r3, #4
 800e51c:	78fa      	ldrb	r2, [r7, #3]
 800e51e:	b292      	uxth	r2, r2
 800e520:	4611      	mov	r1, r2
 800e522:	4618      	mov	r0, r3
 800e524:	f7ff fdc1 	bl	800e0aa <tStack_remove>
    poly->notes[note][0] = -1;
 800e528:	78fb      	ldrb	r3, [r7, #3]
 800e52a:	693a      	ldr	r2, [r7, #16]
 800e52c:	3303      	adds	r3, #3
 800e52e:	00db      	lsls	r3, r3, #3
 800e530:	4413      	add	r3, r2
 800e532:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e536:	605a      	str	r2, [r3, #4]

    int deactivatedVoice = -1;
 800e538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e53c:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < poly->maxNumVoices; i++)
 800e53e:	2300      	movs	r3, #0
 800e540:	61bb      	str	r3, [r7, #24]
 800e542:	e021      	b.n	800e588 <tSimplePoly_noteOff+0x88>
    {
        if (poly->voices[i][0] == note)
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	691a      	ldr	r2, [r3, #16]
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	4413      	add	r3, r2
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	78fb      	ldrb	r3, [r7, #3]
 800e554:	429a      	cmp	r2, r3
 800e556:	d114      	bne.n	800e582 <tSimplePoly_noteOff+0x82>
        {
            poly->voices[i][0] = -1;
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	691a      	ldr	r2, [r3, #16]
 800e55c:	69bb      	ldr	r3, [r7, #24]
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	4413      	add	r3, r2
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e568:	601a      	str	r2, [r3, #0]
            poly->voices[i][1] = 0;
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	691a      	ldr	r2, [r3, #16]
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	009b      	lsls	r3, r3, #2
 800e572:	4413      	add	r3, r2
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	3304      	adds	r3, #4
 800e578:	2200      	movs	r2, #0
 800e57a:	601a      	str	r2, [r3, #0]
            deactivatedVoice = i;
 800e57c:	69bb      	ldr	r3, [r7, #24]
 800e57e:	61fb      	str	r3, [r7, #28]
            break;
 800e580:	e007      	b.n	800e592 <tSimplePoly_noteOff+0x92>
    for (int i = 0; i < poly->maxNumVoices; i++)
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	3301      	adds	r3, #1
 800e586:	61bb      	str	r3, [r7, #24]
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	69ba      	ldr	r2, [r7, #24]
 800e58e:	429a      	cmp	r2, r3
 800e590:	dbd8      	blt.n	800e544 <tSimplePoly_noteOff+0x44>
        }
    }

    if (poly->recover_stolen)
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	699b      	ldr	r3, [r3, #24]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d04f      	beq.n	800e63a <tSimplePoly_noteOff+0x13a>
    {
        //grab old notes off the stack if there are notes waiting to replace the free voice
        if (deactivatedVoice >= 0)
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	db4c      	blt.n	800e63a <tSimplePoly_noteOff+0x13a>
        {
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	617b      	str	r3, [r7, #20]
 800e5a4:	e040      	b.n	800e628 <tSimplePoly_noteOff+0x128>
            {
                noteToTest = tStack_get(&poly->stack, j);
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	3304      	adds	r3, #4
 800e5aa:	6979      	ldr	r1, [r7, #20]
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7ff fdf6 	bl	800e19e <tStack_get>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	81fb      	strh	r3, [r7, #14]

                if (poly->notes[noteToTest][0] == -3) //if there is a stolen note waiting (marked inactive but on the stack)
 800e5b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e5ba:	693a      	ldr	r2, [r7, #16]
 800e5bc:	3303      	adds	r3, #3
 800e5be:	00db      	lsls	r3, r3, #3
 800e5c0:	4413      	add	r3, r2
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	f113 0f03 	cmn.w	r3, #3
 800e5c8:	d12b      	bne.n	800e622 <tSimplePoly_noteOff+0x122>
                {
                    poly->voices[deactivatedVoice][0] = noteToTest; //set the newly free voice to use the old stolen note
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	691a      	ldr	r2, [r3, #16]
 800e5ce:	69fb      	ldr	r3, [r7, #28]
 800e5d0:	009b      	lsls	r3, r3, #2
 800e5d2:	4413      	add	r3, r2
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e5da:	601a      	str	r2, [r3, #0]
                    poly->voices[deactivatedVoice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
 800e5dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e5e0:	693a      	ldr	r2, [r7, #16]
 800e5e2:	6911      	ldr	r1, [r2, #16]
 800e5e4:	69fa      	ldr	r2, [r7, #28]
 800e5e6:	0092      	lsls	r2, r2, #2
 800e5e8:	440a      	add	r2, r1
 800e5ea:	6812      	ldr	r2, [r2, #0]
 800e5ec:	3204      	adds	r2, #4
 800e5ee:	6939      	ldr	r1, [r7, #16]
 800e5f0:	00db      	lsls	r3, r3, #3
 800e5f2:	440b      	add	r3, r1
 800e5f4:	6a1b      	ldr	r3, [r3, #32]
 800e5f6:	6013      	str	r3, [r2, #0]
                    poly->voices[deactivatedVoice][2] = noteToTest;
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	691a      	ldr	r2, [r3, #16]
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	4413      	add	r3, r2
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	3308      	adds	r3, #8
 800e606:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e60a:	601a      	str	r2, [r3, #0]
                    poly->notes[noteToTest][0] = deactivatedVoice; //mark that it is no longer stolen and is now active
 800e60c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e610:	693a      	ldr	r2, [r7, #16]
 800e612:	3303      	adds	r3, #3
 800e614:	00db      	lsls	r3, r3, #3
 800e616:	4413      	add	r3, r2
 800e618:	69fa      	ldr	r2, [r7, #28]
 800e61a:	605a      	str	r2, [r3, #4]
                    return -1;
 800e61c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e620:	e00c      	b.n	800e63c <tSimplePoly_noteOff+0x13c>
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	3301      	adds	r3, #1
 800e626:	617b      	str	r3, [r7, #20]
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	3304      	adds	r3, #4
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7ff fda6 	bl	800e17e <tStack_getSize>
 800e632:	4602      	mov	r2, r0
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	4293      	cmp	r3, r2
 800e638:	dbb5      	blt.n	800e5a6 <tSimplePoly_noteOff+0xa6>
                }
            }
        }
    }
    return deactivatedVoice;
 800e63a:	69fb      	ldr	r3, [r7, #28]
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3720      	adds	r7, #32
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <tSimplePoly_getPitch>:
    return LEAF_clip(0, tStack_getSize(&poly->stack), poly->numVoices);
}


int tSimplePoly_getPitch(tSimplePoly* const polyh, uint8_t voice)
{
 800e644:	b480      	push	{r7}
 800e646:	b085      	sub	sp, #20
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	460b      	mov	r3, r1
 800e64e:	70fb      	strb	r3, [r7, #3]
    _tSimplePoly* poly = *polyh;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	60fb      	str	r3, [r7, #12]
    return poly->voices[voice][2];
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	691a      	ldr	r2, [r3, #16]
 800e65a:	78fb      	ldrb	r3, [r7, #3]
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	4413      	add	r3, r2
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	689b      	ldr	r3, [r3, #8]
}
 800e664:	4618      	mov	r0, r3
 800e666:	3714      	adds	r7, #20
 800e668:	46bd      	mov	sp, r7
 800e66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66e:	4770      	bx	lr

0800e670 <tSimplePoly_getVelocity>:
    _tSimplePoly* poly = *polyh;
    return poly->voices[voice][0];
}

int tSimplePoly_getVelocity(tSimplePoly* const polyh, uint8_t voice)
{
 800e670:	b480      	push	{r7}
 800e672:	b085      	sub	sp, #20
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	460b      	mov	r3, r1
 800e67a:	70fb      	strb	r3, [r7, #3]
    _tSimplePoly* poly = *polyh;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	60fb      	str	r3, [r7, #12]
    return poly->voices[voice][1];
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	691a      	ldr	r2, [r3, #16]
 800e686:	78fb      	ldrb	r3, [r7, #3]
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	4413      	add	r3, r2
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	685b      	ldr	r3, [r3, #4]
}
 800e690:	4618      	mov	r0, r3
 800e692:	3714      	adds	r7, #20
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr

0800e69c <tMBSaw_initToPool>:
{
    tMBSaw_initToPool(osc, &leaf->mempool);
}

void tMBSaw_initToPool(tMBSaw* const osc, tMempool* const pool)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
    _tMempool* m = *pool;
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	617b      	str	r3, [r7, #20]
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 800e6ac:	6979      	ldr	r1, [r7, #20]
 800e6ae:	f240 505c 	movw	r0, #1372	; 0x55c
 800e6b2:	f7ff fa39 	bl	800db28 <mpool_alloc>
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	601a      	str	r2, [r3, #0]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	613b      	str	r3, [r7, #16]
    c->mempool = m;
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	697a      	ldr	r2, [r7, #20]
 800e6c6:	601a      	str	r2, [r3, #0]
    LEAF* leaf = c->mempool->leaf;
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	60fb      	str	r3, [r7, #12]
    
    c->invSampleRate = leaf->invSampleRate;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	685a      	ldr	r2, [r3, #4]
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800e6da:	601a      	str	r2, [r3, #0]
    c->_init = true;
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
    c->amp = 1.0f;
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e6ea:	609a      	str	r2, [r3, #8]
    c->freq = 440.f;
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	4a12      	ldr	r2, [pc, #72]	; (800e738 <tMBSaw_initToPool+0x9c>)
 800e6f0:	611a      	str	r2, [r3, #16]
    c->lastsyncin = 0.0f;
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	f04f 0200 	mov.w	r2, #0
 800e6f8:	615a      	str	r2, [r3, #20]
    c->sync = 0.0f;
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	f04f 0200 	mov.w	r2, #0
 800e700:	619a      	str	r2, [r3, #24]
    c->syncdir = 1.0f;
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e708:	61da      	str	r2, [r3, #28]
    c->softsync = 0;
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	2200      	movs	r2, #0
 800e70e:	621a      	str	r2, [r3, #32]
    c->_z = 0.0f;
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	f04f 0200 	mov.w	r2, #0
 800e716:	62da      	str	r2, [r3, #44]	; 0x2c
    c->_j = 0;
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	2200      	movs	r2, #0
 800e71c:	631a      	str	r2, [r3, #48]	; 0x30
    memset (c->_f, 0, (FILLEN + STEP_DD_PULSE_LENGTH) * sizeof (float));
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	3334      	adds	r3, #52	; 0x34
 800e722:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800e726:	2100      	movs	r1, #0
 800e728:	4618      	mov	r0, r3
 800e72a:	f000 fa99 	bl	800ec60 <memset>
}
 800e72e:	bf00      	nop
 800e730:	3718      	adds	r7, #24
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	43dc0000 	.word	0x43dc0000

0800e73c <tMBSaw_tick>:
    _tMBSaw* c = *osc;
    mpool_free((char*)c, c->mempool);
}

float tMBSaw_tick(tMBSaw* const osc)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b08e      	sub	sp, #56	; 0x38
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
    _tMBSaw* c = *osc;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	62bb      	str	r3, [r7, #40]	; 0x28
    
    int    j;
    float  freq, sync;
    float  a, p, w, sw, z;
    
    sync = c->sync;
 800e74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74c:	699b      	ldr	r3, [r3, #24]
 800e74e:	627b      	str	r3, [r7, #36]	; 0x24
    freq = c->freq;
 800e750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e752:	691b      	ldr	r3, [r3, #16]
 800e754:	623b      	str	r3, [r7, #32]
    
    p = c->_p;  /* phase [0, 1) */
 800e756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e75a:	633b      	str	r3, [r7, #48]	; 0x30
    w = c->_w;  /* phase increment */
 800e75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e760:	61fb      	str	r3, [r7, #28]
    z = c->_z;  /* low pass filter state */
 800e762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e766:	61bb      	str	r3, [r7, #24]
    j = c->_j;  /* index into buffer _f */
 800e768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e76c:	637b      	str	r3, [r7, #52]	; 0x34
    
    if (c->_init) {
 800e76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e770:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 800e774:	2b00      	cmp	r3, #0
 800e776:	d011      	beq.n	800e79c <tMBSaw_tick+0x60>
//        p = 0.5f;
        p = 0.f;
 800e778:	f04f 0300 	mov.w	r3, #0
 800e77c:	633b      	str	r3, [r7, #48]	; 0x30
        w = freq * c->invSampleRate;
 800e77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e780:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800e784:	edd3 7a00 	vldr	s15, [r3]
 800e788:	ed97 7a08 	vldr	s14, [r7, #32]
 800e78c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e790:	edc7 7a07 	vstr	s15, [r7, #28]
        
        /* if we valued alias-free startup over low startup time, we could do:
         *   p -= w;
         *   place_slope_dd(_f, j, 0.0f, w, -1.0f); */
        c->_init = false;
 800e794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e796:	2200      	movs	r2, #0
 800e798:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
    }
    
    //a = 0.2 + 0.8 * vco->_port [FILT];
    a = 0.5f; // when a = 1, LPfilter is disabled
 800e79c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800e7a0:	617b      	str	r3, [r7, #20]
    
    w = freq * c->invSampleRate;
 800e7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a4:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800e7a8:	edd3 7a00 	vldr	s15, [r3]
 800e7ac:	ed97 7a08 	vldr	s14, [r7, #32]
 800e7b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7b4:	edc7 7a07 	vstr	s15, [r7, #28]

    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 800e7b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e7bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7c4:	dd0b      	ble.n	800e7de <tMBSaw_tick+0xa2>
 800e7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c8:	6a1b      	ldr	r3, [r3, #32]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	dd07      	ble.n	800e7de <tMBSaw_tick+0xa2>
 800e7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d0:	edd3 7a07 	vldr	s15, [r3, #28]
 800e7d4:	eef1 7a67 	vneg.f32	s15, s15
 800e7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7da:	edc3 7a07 	vstr	s15, [r3, #28]
    //                place_slope_dd(c->_f, j, 1.0f - p_at_reset - eof_offset, -sw, -2.0f);
    //            }
    //            if (sw > 0) place_slope_dd(c->_f, j, p, sw, 2.0f);
    //            else if (sw < 0) place_slope_dd(c->_f, j, 1.0f - p, -sw, -2.0f);
    
    sw = w * c->syncdir;
 800e7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e0:	edd3 7a07 	vldr	s15, [r3, #28]
 800e7e4:	ed97 7a07 	vldr	s14, [r7, #28]
 800e7e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7ec:	edc7 7a04 	vstr	s15, [r7, #16]
    p += sw - (int)sw;
 800e7f0:	edd7 7a04 	vldr	s15, [r7, #16]
 800e7f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e7f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7fc:	ed97 7a04 	vldr	s14, [r7, #16]
 800e800:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e804:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e80c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 800e810:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e814:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e81c:	f340 80b1 	ble.w	800e982 <tMBSaw_tick+0x246>
 800e820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e822:	6a1b      	ldr	r3, [r3, #32]
 800e824:	2b00      	cmp	r3, #0
 800e826:	f040 80ac 	bne.w	800e982 <tMBSaw_tick+0x246>
        float eof_offset = sync * sw;
 800e82a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800e82e:	edd7 7a04 	vldr	s15, [r7, #16]
 800e832:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e836:	edc7 7a03 	vstr	s15, [r7, #12]
        float p_at_reset = p - eof_offset;
 800e83a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e83e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e842:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e846:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (sw > 0) p = eof_offset;
 800e84a:	edd7 7a04 	vldr	s15, [r7, #16]
 800e84e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e856:	dd02      	ble.n	800e85e <tMBSaw_tick+0x122>
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	633b      	str	r3, [r7, #48]	; 0x30
 800e85c:	e00e      	b.n	800e87c <tMBSaw_tick+0x140>
        else if (sw < 0) p = 1.0f - eof_offset;
 800e85e:	edd7 7a04 	vldr	s15, [r7, #16]
 800e862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e86a:	d507      	bpl.n	800e87c <tMBSaw_tick+0x140>
 800e86c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e870:	edd7 7a03 	vldr	s15, [r7, #12]
 800e874:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e878:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        
        /* place any DD that may have occurred in subsample before reset */
        if (p_at_reset >= 1.0f) {
 800e87c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e884:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e88c:	db19      	blt.n	800e8c2 <tMBSaw_tick+0x186>
            p_at_reset -= 1.0f;
 800e88e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e896:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e89a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            place_step_dd(c->_f, j, p_at_reset + eof_offset, sw, 1.0f);
 800e89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a0:	3334      	adds	r3, #52	; 0x34
 800e8a2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e8a6:	edd7 7a03 	vldr	s15, [r7, #12]
 800e8aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8ae:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800e8b2:	edd7 0a04 	vldr	s1, [r7, #16]
 800e8b6:	eeb0 0a67 	vmov.f32	s0, s15
 800e8ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7ff f885 	bl	800d9cc <place_step_dd>
        }
        if (p_at_reset < 0.0f) {
 800e8c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e8c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ce:	d521      	bpl.n	800e914 <tMBSaw_tick+0x1d8>
            p_at_reset += 1.0f;
 800e8d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e8d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e8d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e8dc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            place_step_dd(c->_f, j, 1.0f - p_at_reset - eof_offset, -sw, -1.0f);
 800e8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e2:	3334      	adds	r3, #52	; 0x34
 800e8e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e8e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e8ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e8f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800e8f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e8f8:	edd7 7a04 	vldr	s15, [r7, #16]
 800e8fc:	eef1 7a67 	vneg.f32	s15, s15
 800e900:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800e904:	eef0 0a67 	vmov.f32	s1, s15
 800e908:	eeb0 0a47 	vmov.f32	s0, s14
 800e90c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e90e:	4618      	mov	r0, r3
 800e910:	f7ff f85c 	bl	800d9cc <place_step_dd>
        }
        
        /* now place reset DD */
        if (sw > 0)
 800e914:	edd7 7a04 	vldr	s15, [r7, #16]
 800e918:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e920:	dd0c      	ble.n	800e93c <tMBSaw_tick+0x200>
            place_step_dd(c->_f, j, p, sw, p_at_reset);
 800e922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e924:	3334      	adds	r3, #52	; 0x34
 800e926:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 800e92a:	edd7 0a04 	vldr	s1, [r7, #16]
 800e92e:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800e932:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e934:	4618      	mov	r0, r3
 800e936:	f7ff f849 	bl	800d9cc <place_step_dd>
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 800e93a:	e065      	b.n	800ea08 <tMBSaw_tick+0x2cc>
        else if (sw < 0)
 800e93c:	edd7 7a04 	vldr	s15, [r7, #16]
 800e940:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e948:	d400      	bmi.n	800e94c <tMBSaw_tick+0x210>
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 800e94a:	e05d      	b.n	800ea08 <tMBSaw_tick+0x2cc>
            place_step_dd(c->_f, j, 1.0f - p, -sw, -p_at_reset);
 800e94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94e:	3334      	adds	r3, #52	; 0x34
 800e950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e954:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e958:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e95c:	edd7 7a04 	vldr	s15, [r7, #16]
 800e960:	eef1 6a67 	vneg.f32	s13, s15
 800e964:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e968:	eef1 7a67 	vneg.f32	s15, s15
 800e96c:	eeb0 1a67 	vmov.f32	s2, s15
 800e970:	eef0 0a66 	vmov.f32	s1, s13
 800e974:	eeb0 0a47 	vmov.f32	s0, s14
 800e978:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7ff f826 	bl	800d9cc <place_step_dd>
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 800e980:	e042      	b.n	800ea08 <tMBSaw_tick+0x2cc>

    } else if (p >= 1.0f) {  /* normal phase reset */
 800e982:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e98a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e992:	db14      	blt.n	800e9be <tMBSaw_tick+0x282>
        p -= 1.0f;
 800e994:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e99c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        place_step_dd(c->_f, j, p, sw, 1.0f);
 800e9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a6:	3334      	adds	r3, #52	; 0x34
 800e9a8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800e9ac:	edd7 0a04 	vldr	s1, [r7, #16]
 800e9b0:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800e9b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7ff f808 	bl	800d9cc <place_step_dd>
 800e9bc:	e024      	b.n	800ea08 <tMBSaw_tick+0x2cc>
        
    } else if (p < 0.0f) {
 800e9be:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e9c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ca:	d51d      	bpl.n	800ea08 <tMBSaw_tick+0x2cc>
        p += 1.0f;
 800e9cc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e9d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e9d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e9d8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        place_step_dd(c->_f, j, 1.0f - p, -sw, -1.0f);
 800e9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9de:	3334      	adds	r3, #52	; 0x34
 800e9e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e9e4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e9e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e9ec:	edd7 7a04 	vldr	s15, [r7, #16]
 800e9f0:	eef1 7a67 	vneg.f32	s15, s15
 800e9f4:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800e9f8:	eef0 0a67 	vmov.f32	s1, s15
 800e9fc:	eeb0 0a47 	vmov.f32	s0, s14
 800ea00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fe ffe2 	bl	800d9cc <place_step_dd>
    }
    c->_f[j + DD_SAMPLE_DELAY] += 0.5f - p;
 800ea08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea0a:	3304      	adds	r3, #4
 800ea0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea0e:	330c      	adds	r3, #12
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	4413      	add	r3, r2
 800ea14:	3304      	adds	r3, #4
 800ea16:	ed93 7a00 	vldr	s14, [r3]
 800ea1a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ea1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ea22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ea26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea28:	3304      	adds	r3, #4
 800ea2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea30:	330c      	adds	r3, #12
 800ea32:	009b      	lsls	r3, r3, #2
 800ea34:	4413      	add	r3, r2
 800ea36:	3304      	adds	r3, #4
 800ea38:	edc3 7a00 	vstr	s15, [r3]
    
    z += a * (c->_f[j] - z); // LP filtering
 800ea3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea40:	330c      	adds	r3, #12
 800ea42:	009b      	lsls	r3, r3, #2
 800ea44:	4413      	add	r3, r2
 800ea46:	3304      	adds	r3, #4
 800ea48:	ed93 7a00 	vldr	s14, [r3]
 800ea4c:	edd7 7a06 	vldr	s15, [r7, #24]
 800ea50:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ea54:	edd7 7a05 	vldr	s15, [r7, #20]
 800ea58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea5c:	ed97 7a06 	vldr	s14, [r7, #24]
 800ea60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea64:	edc7 7a06 	vstr	s15, [r7, #24]
    c->out = c->amp * z;
 800ea68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6a:	ed93 7a02 	vldr	s14, [r3, #8]
 800ea6e:	edd7 7a06 	vldr	s15, [r7, #24]
 800ea72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	edc3 7a01 	vstr	s15, [r3, #4]
    
    if (++j == FILLEN)
 800ea7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea7e:	3301      	adds	r3, #1
 800ea80:	637b      	str	r3, [r7, #52]	; 0x34
 800ea82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea88:	d117      	bne.n	800eaba <tMBSaw_tick+0x37e>
    {
        j = 0;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy (c->_f, c->_f + FILLEN, STEP_DD_PULSE_LENGTH * sizeof (float));
 800ea8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea90:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800ea94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea96:	3334      	adds	r3, #52	; 0x34
 800ea98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ea9c:	f44f 7290 	mov.w	r2, #288	; 0x120
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	f000 f8cf 	bl	800ec44 <memcpy>
        memset (c->_f + STEP_DD_PULSE_LENGTH, 0,  FILLEN * sizeof (float));
 800eaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa8:	3334      	adds	r3, #52	; 0x34
 800eaaa:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800eaae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eab2:	2100      	movs	r1, #0
 800eab4:	4618      	mov	r0, r3
 800eab6:	f000 f8d3 	bl	800ec60 <memset>
    }
    
    c->_p = p;
 800eaba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eabc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eabe:	625a      	str	r2, [r3, #36]	; 0x24
    c->_w = w;
 800eac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac2:	69fa      	ldr	r2, [r7, #28]
 800eac4:	629a      	str	r2, [r3, #40]	; 0x28
    c->_z = z;
 800eac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac8:	69ba      	ldr	r2, [r7, #24]
 800eaca:	62da      	str	r2, [r3, #44]	; 0x2c
    c->_j = j;
 800eacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ead0:	631a      	str	r2, [r3, #48]	; 0x30
    
    return -c->out;
 800ead2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead4:	edd3 7a01 	vldr	s15, [r3, #4]
 800ead8:	eef1 7a67 	vneg.f32	s15, s15
}
 800eadc:	eeb0 0a67 	vmov.f32	s0, s15
 800eae0:	3738      	adds	r7, #56	; 0x38
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <tMBSaw_setFreq>:

void tMBSaw_setFreq(tMBSaw* const osc, float f)
{
 800eae6:	b480      	push	{r7}
 800eae8:	b085      	sub	sp, #20
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
 800eaee:	ed87 0a00 	vstr	s0, [r7]
    _tMBSaw* c = *osc;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	60fb      	str	r3, [r7, #12]
    c->freq = f;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	683a      	ldr	r2, [r7, #0]
 800eafc:	611a      	str	r2, [r3, #16]
}
 800eafe:	bf00      	nop
 800eb00:	3714      	adds	r7, #20
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr
	...

0800eb0c <LEAF_init>:
#include "../leaf.h"

#endif

void LEAF_init(LEAF* const leaf, float sr, char* memory, size_t memorysize, float(*random)(void))
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b088      	sub	sp, #32
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6178      	str	r0, [r7, #20]
 800eb14:	ed87 0a04 	vstr	s0, [r7, #16]
 800eb18:	60f9      	str	r1, [r7, #12]
 800eb1a:	60ba      	str	r2, [r7, #8]
 800eb1c:	607b      	str	r3, [r7, #4]
    leaf->_internal_mempool.leaf = leaf;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	697a      	ldr	r2, [r7, #20]
 800eb22:	621a      	str	r2, [r3, #32]
    leaf_pool_init(leaf, memory, memorysize);
 800eb24:	68ba      	ldr	r2, [r7, #8]
 800eb26:	68f9      	ldr	r1, [r7, #12]
 800eb28:	6978      	ldr	r0, [r7, #20]
 800eb2a:	f7fe ffe7 	bl	800dafc <leaf_pool_init>
    
    leaf->sampleRate = sr;
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	693a      	ldr	r2, [r7, #16]
 800eb32:	601a      	str	r2, [r3, #0]
    
    leaf->invSampleRate = 1.0f/sr;
 800eb34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb38:	ed97 7a04 	vldr	s14, [r7, #16]
 800eb3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	edd3 7a01 	vldr	s15, [r3, #4]
 800eb4c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800eba0 <LEAF_init+0x94>
 800eb50:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf->random = random;
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	611a      	str	r2, [r3, #16]
    
    leaf->clearOnAllocation = 0;
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	2200      	movs	r2, #0
 800eb64:	615a      	str	r2, [r3, #20]
    
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	4a0e      	ldr	r2, [pc, #56]	; (800eba4 <LEAF_init+0x98>)
 800eb6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    for (int i = 0; i < LEAFErrorNil; ++i)
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	61fb      	str	r3, [r7, #28]
 800eb70:	e009      	b.n	800eb86 <LEAF_init+0x7a>
        leaf->errorState[i] = 0;
 800eb72:	697a      	ldr	r2, [r7, #20]
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	330e      	adds	r3, #14
 800eb78:	009b      	lsls	r3, r3, #2
 800eb7a:	4413      	add	r3, r2
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	3301      	adds	r3, #1
 800eb84:	61fb      	str	r3, [r7, #28]
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	2b02      	cmp	r3, #2
 800eb8a:	ddf2      	ble.n	800eb72 <LEAF_init+0x66>
    
    leaf->allocCount = 0;
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	649a      	str	r2, [r3, #72]	; 0x48
    
    leaf->freeCount = 0;
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	2200      	movs	r2, #0
 800eb96:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800eb98:	bf00      	nop
 800eb9a:	3720      	adds	r7, #32
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	40c90fdb 	.word	0x40c90fdb
 800eba4:	0800eba9 	.word	0x0800eba9

0800eba8 <LEAF_defaultErrorCallback>:
{
    return leaf->sampleRate;
}

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	70fb      	strb	r3, [r7, #3]
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 800ebb4:	bf00      	nop
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	460b      	mov	r3, r1
 800ebca:	70fb      	strb	r3, [r7, #3]
    leaf->errorState[whichone] = 1;
 800ebcc:	78fb      	ldrb	r3, [r7, #3]
 800ebce:	687a      	ldr	r2, [r7, #4]
 800ebd0:	330e      	adds	r3, #14
 800ebd2:	009b      	lsls	r3, r3, #2
 800ebd4:	4413      	add	r3, r2
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	605a      	str	r2, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebde:	78fa      	ldrb	r2, [r7, #3]
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	4798      	blx	r3
}
 800ebe6:	bf00      	nop
 800ebe8:	3708      	adds	r7, #8
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
	...

0800ebf0 <__errno>:
 800ebf0:	4b01      	ldr	r3, [pc, #4]	; (800ebf8 <__errno+0x8>)
 800ebf2:	6818      	ldr	r0, [r3, #0]
 800ebf4:	4770      	bx	lr
 800ebf6:	bf00      	nop
 800ebf8:	20000010 	.word	0x20000010

0800ebfc <__libc_init_array>:
 800ebfc:	b570      	push	{r4, r5, r6, lr}
 800ebfe:	4d0d      	ldr	r5, [pc, #52]	; (800ec34 <__libc_init_array+0x38>)
 800ec00:	4c0d      	ldr	r4, [pc, #52]	; (800ec38 <__libc_init_array+0x3c>)
 800ec02:	1b64      	subs	r4, r4, r5
 800ec04:	10a4      	asrs	r4, r4, #2
 800ec06:	2600      	movs	r6, #0
 800ec08:	42a6      	cmp	r6, r4
 800ec0a:	d109      	bne.n	800ec20 <__libc_init_array+0x24>
 800ec0c:	4d0b      	ldr	r5, [pc, #44]	; (800ec3c <__libc_init_array+0x40>)
 800ec0e:	4c0c      	ldr	r4, [pc, #48]	; (800ec40 <__libc_init_array+0x44>)
 800ec10:	f000 f90a 	bl	800ee28 <_init>
 800ec14:	1b64      	subs	r4, r4, r5
 800ec16:	10a4      	asrs	r4, r4, #2
 800ec18:	2600      	movs	r6, #0
 800ec1a:	42a6      	cmp	r6, r4
 800ec1c:	d105      	bne.n	800ec2a <__libc_init_array+0x2e>
 800ec1e:	bd70      	pop	{r4, r5, r6, pc}
 800ec20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec24:	4798      	blx	r3
 800ec26:	3601      	adds	r6, #1
 800ec28:	e7ee      	b.n	800ec08 <__libc_init_array+0xc>
 800ec2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec2e:	4798      	blx	r3
 800ec30:	3601      	adds	r6, #1
 800ec32:	e7f2      	b.n	800ec1a <__libc_init_array+0x1e>
 800ec34:	08017fc8 	.word	0x08017fc8
 800ec38:	08017fc8 	.word	0x08017fc8
 800ec3c:	08017fc8 	.word	0x08017fc8
 800ec40:	08017fcc 	.word	0x08017fcc

0800ec44 <memcpy>:
 800ec44:	440a      	add	r2, r1
 800ec46:	4291      	cmp	r1, r2
 800ec48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ec4c:	d100      	bne.n	800ec50 <memcpy+0xc>
 800ec4e:	4770      	bx	lr
 800ec50:	b510      	push	{r4, lr}
 800ec52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec5a:	4291      	cmp	r1, r2
 800ec5c:	d1f9      	bne.n	800ec52 <memcpy+0xe>
 800ec5e:	bd10      	pop	{r4, pc}

0800ec60 <memset>:
 800ec60:	4402      	add	r2, r0
 800ec62:	4603      	mov	r3, r0
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d100      	bne.n	800ec6a <memset+0xa>
 800ec68:	4770      	bx	lr
 800ec6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ec6e:	e7f9      	b.n	800ec64 <memset+0x4>

0800ec70 <with_errnof>:
 800ec70:	b513      	push	{r0, r1, r4, lr}
 800ec72:	4604      	mov	r4, r0
 800ec74:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ec78:	f7ff ffba 	bl	800ebf0 <__errno>
 800ec7c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ec80:	6004      	str	r4, [r0, #0]
 800ec82:	b002      	add	sp, #8
 800ec84:	bd10      	pop	{r4, pc}

0800ec86 <xflowf>:
 800ec86:	b130      	cbz	r0, 800ec96 <xflowf+0x10>
 800ec88:	eef1 7a40 	vneg.f32	s15, s0
 800ec8c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ec90:	2022      	movs	r0, #34	; 0x22
 800ec92:	f7ff bfed 	b.w	800ec70 <with_errnof>
 800ec96:	eef0 7a40 	vmov.f32	s15, s0
 800ec9a:	e7f7      	b.n	800ec8c <xflowf+0x6>

0800ec9c <__math_uflowf>:
 800ec9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eca4 <__math_uflowf+0x8>
 800eca0:	f7ff bff1 	b.w	800ec86 <xflowf>
 800eca4:	10000000 	.word	0x10000000

0800eca8 <__math_may_uflowf>:
 800eca8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ecb0 <__math_may_uflowf+0x8>
 800ecac:	f7ff bfeb 	b.w	800ec86 <xflowf>
 800ecb0:	1a200000 	.word	0x1a200000

0800ecb4 <__math_oflowf>:
 800ecb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ecbc <__math_oflowf+0x8>
 800ecb8:	f7ff bfe5 	b.w	800ec86 <xflowf>
 800ecbc:	70000000 	.word	0x70000000

0800ecc0 <expf>:
 800ecc0:	ee10 2a10 	vmov	r2, s0
 800ecc4:	f240 412a 	movw	r1, #1066	; 0x42a
 800ecc8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800eccc:	428b      	cmp	r3, r1
 800ecce:	b430      	push	{r4, r5}
 800ecd0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800ecd4:	d92a      	bls.n	800ed2c <expf+0x6c>
 800ecd6:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800ecda:	d058      	beq.n	800ed8e <expf+0xce>
 800ecdc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800ece0:	d303      	bcc.n	800ecea <expf+0x2a>
 800ece2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ece6:	bc30      	pop	{r4, r5}
 800ece8:	4770      	bx	lr
 800ecea:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800ed94 <expf+0xd4>
 800ecee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ecf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecf6:	dd03      	ble.n	800ed00 <expf+0x40>
 800ecf8:	bc30      	pop	{r4, r5}
 800ecfa:	2000      	movs	r0, #0
 800ecfc:	f7ff bfda 	b.w	800ecb4 <__math_oflowf>
 800ed00:	eddf 7a25 	vldr	s15, [pc, #148]	; 800ed98 <expf+0xd8>
 800ed04:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ed08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0c:	d503      	bpl.n	800ed16 <expf+0x56>
 800ed0e:	bc30      	pop	{r4, r5}
 800ed10:	2000      	movs	r0, #0
 800ed12:	f7ff bfc3 	b.w	800ec9c <__math_uflowf>
 800ed16:	eddf 7a21 	vldr	s15, [pc, #132]	; 800ed9c <expf+0xdc>
 800ed1a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ed1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed22:	d503      	bpl.n	800ed2c <expf+0x6c>
 800ed24:	bc30      	pop	{r4, r5}
 800ed26:	2000      	movs	r0, #0
 800ed28:	f7ff bfbe 	b.w	800eca8 <__math_may_uflowf>
 800ed2c:	4b1c      	ldr	r3, [pc, #112]	; (800eda0 <expf+0xe0>)
 800ed2e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ed32:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800ed36:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800ed3a:	eeb0 7b44 	vmov.f64	d7, d4
 800ed3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ed42:	ee17 0a10 	vmov	r0, s14
 800ed46:	ee37 7b44 	vsub.f64	d7, d7, d4
 800ed4a:	f000 021f 	and.w	r2, r0, #31
 800ed4e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800ed52:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800ed56:	ee27 4b07 	vmul.f64	d4, d7, d7
 800ed5a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800ed5e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800ed62:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ed66:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800ed6a:	684d      	ldr	r5, [r1, #4]
 800ed6c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800ed70:	2100      	movs	r1, #0
 800ed72:	190a      	adds	r2, r1, r4
 800ed74:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800ed78:	eea5 0b07 	vfma.f64	d0, d5, d7
 800ed7c:	ec43 2b17 	vmov	d7, r2, r3
 800ed80:	eea6 0b04 	vfma.f64	d0, d6, d4
 800ed84:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ed88:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ed8c:	e7ab      	b.n	800ece6 <expf+0x26>
 800ed8e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800eda4 <expf+0xe4>
 800ed92:	e7a8      	b.n	800ece6 <expf+0x26>
 800ed94:	42b17217 	.word	0x42b17217
 800ed98:	c2cff1b4 	.word	0xc2cff1b4
 800ed9c:	c2ce8ecf 	.word	0xc2ce8ecf
 800eda0:	08017e78 	.word	0x08017e78
 800eda4:	00000000 	.word	0x00000000

0800eda8 <lrintf>:
 800eda8:	ee10 3a10 	vmov	r3, s0
 800edac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800edb0:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 800edb4:	281e      	cmp	r0, #30
 800edb6:	b082      	sub	sp, #8
 800edb8:	dc2e      	bgt.n	800ee18 <lrintf+0x70>
 800edba:	1c41      	adds	r1, r0, #1
 800edbc:	da02      	bge.n	800edc4 <lrintf+0x1c>
 800edbe:	2000      	movs	r0, #0
 800edc0:	b002      	add	sp, #8
 800edc2:	4770      	bx	lr
 800edc4:	2816      	cmp	r0, #22
 800edc6:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800edca:	dd09      	ble.n	800ede0 <lrintf+0x38>
 800edcc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800edd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800edd4:	3a96      	subs	r2, #150	; 0x96
 800edd6:	4090      	lsls	r0, r2
 800edd8:	2900      	cmp	r1, #0
 800edda:	d0f1      	beq.n	800edc0 <lrintf+0x18>
 800eddc:	4240      	negs	r0, r0
 800edde:	e7ef      	b.n	800edc0 <lrintf+0x18>
 800ede0:	4b10      	ldr	r3, [pc, #64]	; (800ee24 <lrintf+0x7c>)
 800ede2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ede6:	ed93 7a00 	vldr	s14, [r3]
 800edea:	ee37 0a00 	vadd.f32	s0, s14, s0
 800edee:	ed8d 0a01 	vstr	s0, [sp, #4]
 800edf2:	eddd 7a01 	vldr	s15, [sp, #4]
 800edf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800edfa:	ee17 3a90 	vmov	r3, s15
 800edfe:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ee02:	d0dc      	beq.n	800edbe <lrintf+0x16>
 800ee04:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800ee08:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800ee0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ee10:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ee14:	40d8      	lsrs	r0, r3
 800ee16:	e7df      	b.n	800edd8 <lrintf+0x30>
 800ee18:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ee1c:	ee17 0a90 	vmov	r0, s15
 800ee20:	e7ce      	b.n	800edc0 <lrintf+0x18>
 800ee22:	bf00      	nop
 800ee24:	08017fc0 	.word	0x08017fc0

0800ee28 <_init>:
 800ee28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2a:	bf00      	nop
 800ee2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee2e:	bc08      	pop	{r3}
 800ee30:	469e      	mov	lr, r3
 800ee32:	4770      	bx	lr

0800ee34 <_fini>:
 800ee34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee36:	bf00      	nop
 800ee38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee3a:	bc08      	pop	{r3}
 800ee3c:	469e      	mov	lr, r3
 800ee3e:	4770      	bx	lr
