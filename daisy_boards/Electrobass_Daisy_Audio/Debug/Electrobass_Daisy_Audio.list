
Electrobass_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db58  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000202c  0800ddf0  0800ddf0  0001ddf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800fe1c  0800fe1c  0001fe1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800fe20  0800fe20  0001fe20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  0800fe24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001978  20000010  0800fe34  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00006000  20001988  0800fe34  00021988  2**0
                  ALLOC
  8 .RAM_D1       0007a120  24000000  24000000  00030000  2**5
                  ALLOC
  9 .RAM_D2       00000440  30000000  30000000  00030000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002a07e  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000059d8  00000000  00000000  0004a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001e90  00000000  00000000  0004fa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001c58  00000000  00000000  00051928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f6a5  00000000  00000000  00053580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002eab0  00000000  00000000  00092c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016c58b  00000000  00000000  000c16d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0022dc60  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007d54  00000000  00000000  0022dcb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ddd8 	.word	0x0800ddd8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	0800ddd8 	.word	0x0800ddd8

080002d8 <audio_init>:

tMempool smallPool;
tMempool largePool;

void audio_init(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 80002e2:	4b21      	ldr	r3, [pc, #132]	; (8000368 <audio_init+0x90>)
 80002e4:	4a21      	ldr	r2, [pc, #132]	; (800036c <audio_init+0x94>)
 80002e6:	4922      	ldr	r1, [pc, #136]	; (8000370 <audio_init+0x98>)
 80002e8:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8000374 <audio_init+0x9c>
 80002ec:	4822      	ldr	r0, [pc, #136]	; (8000378 <audio_init+0xa0>)
 80002ee:	f00d fcd5 	bl	800dc9c <LEAF_init>
	tMempool_init (&smallPool, smallMemory, SMALL_MEM_SIZE, &leaf);
 80002f2:	4b21      	ldr	r3, [pc, #132]	; (8000378 <audio_init+0xa0>)
 80002f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80002f8:	4920      	ldr	r1, [pc, #128]	; (800037c <audio_init+0xa4>)
 80002fa:	4821      	ldr	r0, [pc, #132]	; (8000380 <audio_init+0xa8>)
 80002fc:	f00d fbfc 	bl	800daf8 <tMempool_init>
	//tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);
	tCycle_initToPool(&mySine, &smallPool);
 8000300:	491f      	ldr	r1, [pc, #124]	; (8000380 <audio_init+0xa8>)
 8000302:	4820      	ldr	r0, [pc, #128]	; (8000384 <audio_init+0xac>)
 8000304:	f00d fc2c 	bl	800db60 <tCycle_initToPool>
	tCycle_setFreq(&mySine, 440.0f);
 8000308:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8000388 <audio_init+0xb0>
 800030c:	481d      	ldr	r0, [pc, #116]	; (8000384 <audio_init+0xac>)
 800030e:	f00d fca5 	bl	800dc5c <tCycle_setFreq>
	HAL_Delay(10);
 8000312:	200a      	movs	r0, #10
 8000314:	f001 feb0 	bl	8002078 <HAL_Delay>
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	e007      	b.n	800032e <audio_init+0x56>
	{
		audioOutBuffer[i] = 0;
 800031e:	4a1b      	ldr	r2, [pc, #108]	; (800038c <audio_init+0xb4>)
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	2100      	movs	r1, #0
 8000324:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2b7f      	cmp	r3, #127	; 0x7f
 8000332:	ddf4      	ble.n	800031e <audio_init+0x46>
	}
	HAL_Delay(1);
 8000334:	2001      	movs	r0, #1
 8000336:	f001 fe9f 	bl	8002078 <HAL_Delay>
	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800033a:	2280      	movs	r2, #128	; 0x80
 800033c:	4913      	ldr	r1, [pc, #76]	; (800038c <audio_init+0xb4>)
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f009 f998 	bl	8009674 <HAL_SAI_Transmit_DMA>
 8000344:	4603      	mov	r3, r0
 8000346:	461a      	mov	r2, r3
 8000348:	4b11      	ldr	r3, [pc, #68]	; (8000390 <audio_init+0xb8>)
 800034a:	701a      	strb	r2, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 800034c:	2280      	movs	r2, #128	; 0x80
 800034e:	4911      	ldr	r1, [pc, #68]	; (8000394 <audio_init+0xbc>)
 8000350:	6838      	ldr	r0, [r7, #0]
 8000352:	f009 fa45 	bl	80097e0 <HAL_SAI_Receive_DMA>
 8000356:	4603      	mov	r3, r0
 8000358:	461a      	mov	r2, r3
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <audio_init+0xc0>)
 800035c:	701a      	strb	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	0800117d 	.word	0x0800117d
 800036c:	0007a120 	.word	0x0007a120
 8000370:	24000000 	.word	0x24000000
 8000374:	473b8000 	.word	0x473b8000
 8000378:	200013c0 	.word	0x200013c0
 800037c:	20000038 	.word	0x20000038
 8000380:	20001410 	.word	0x20001410
 8000384:	20000034 	.word	0x20000034
 8000388:	43dc0000 	.word	0x43dc0000
 800038c:	30000000 	.word	0x30000000
 8000390:	2000002c 	.word	0x2000002c
 8000394:	30000200 	.word	0x30000200
 8000398:	2000002d 	.word	0x2000002d

0800039c <audioFrame>:


void audioFrame(uint16_t buffer_offset)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	80fb      	strh	r3, [r7, #6]
	int i;
	int32_t current_sample = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	e02b      	b.n	8000408 <audioFrame+0x6c>
	{
		if ((i & 1) == 0)
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d11c      	bne.n	80003f4 <audioFrame+0x58>
		{
			current_sample = (int32_t)(audioTickL((float) (audioInBuffer[buffer_offset + i] * INV_TWO_TO_23)) * TWO_TO_23);
 80003ba:	88fa      	ldrh	r2, [r7, #6]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	4413      	add	r3, r2
 80003c0:	4a15      	ldr	r2, [pc, #84]	; (8000418 <audioFrame+0x7c>)
 80003c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c6:	ee07 3a90 	vmov	s15, r3
 80003ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003ce:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800041c <audioFrame+0x80>
 80003d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003d6:	eeb0 0a67 	vmov.f32	s0, s15
 80003da:	f000 f825 	bl	8000428 <audioTickL>
 80003de:	eef0 7a40 	vmov.f32	s15, s0
 80003e2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000420 <audioFrame+0x84>
 80003e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80003ee:	ee17 3a90 	vmov	r3, s15
 80003f2:	60bb      	str	r3, [r7, #8]
		else
		{
			//current_sample = (int32_t)(audioTickL((float) (audioInBuffer[buffer_offset + i] * INV_TWO_TO_23)) * TWO_TO_23);
		}

		audioOutBuffer[buffer_offset + i] = current_sample;
 80003f4:	88fa      	ldrh	r2, [r7, #6]
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	4413      	add	r3, r2
 80003fa:	490a      	ldr	r1, [pc, #40]	; (8000424 <audioFrame+0x88>)
 80003fc:	68ba      	ldr	r2, [r7, #8]
 80003fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	3301      	adds	r3, #1
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2b3f      	cmp	r3, #63	; 0x3f
 800040c:	ddd0      	ble.n	80003b0 <audioFrame+0x14>
	}

}
 800040e:	bf00      	nop
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	30000200 	.word	0x30000200
 800041c:	34000000 	.word	0x34000000
 8000420:	4b000000 	.word	0x4b000000
 8000424:	30000000 	.word	0x30000000

08000428 <audioTickL>:


float audioTickL(float audioIn)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	ed87 0a01 	vstr	s0, [r7, #4]

	sample = 0.0f;
 8000432:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <audioTickL+0x40>)
 8000434:	f04f 0200 	mov.w	r2, #0
 8000438:	601a      	str	r2, [r3, #0]

		//tCycle_setFreq(&mySine, (tRamp_tick(&adc[i]) * 500.0f) + 100.0f); // use knob to set frequency between 100 and 600 Hz
	sample += tCycle_tick(&mySine); // tick the oscillator
 800043a:	480c      	ldr	r0, [pc, #48]	; (800046c <audioTickL+0x44>)
 800043c:	f00d fbc4 	bl	800dbc8 <tCycle_tick>
 8000440:	eeb0 7a40 	vmov.f32	s14, s0
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <audioTickL+0x40>)
 8000446:	edd3 7a00 	vldr	s15, [r3]
 800044a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <audioTickL+0x40>)
 8000450:	edc3 7a00 	vstr	s15, [r3]
	//sample *= 0.33f; // drop the gain because we've got three full volume sine waves summing here

	return sample;
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <audioTickL+0x40>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	ee07 3a90 	vmov	s15, r3
}
 800045c:	eeb0 0a67 	vmov.f32	s0, s15
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000030 	.word	0x20000030
 800046c:	20000034 	.word	0x20000034

08000470 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	audioFrame(HALF_BUFFER_SIZE);
 8000478:	2040      	movs	r0, #64	; 0x40
 800047a:	f7ff ff8f 	bl	800039c <audioFrame>
}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
	audioFrame(0);
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff84 	bl	800039c <audioFrame>
}
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <codec_init>:
    CODEC_RATE_44K_44K = 0x08 << 2,
};


void codec_init(I2C_HandleTypeDef* i2c)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]

    // Determine dev_address
    // I2C Driver knows to shift the address
    int dev_addr = W8731_ADDR_0;
 80004a4:	231a      	movs	r3, #26
 80004a6:	617b      	str	r3, [r7, #20]

    int res;
    // Reset
    res = WriteControlRegister(i2c, CODEC_REG_RESET, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	210f      	movs	r1, #15
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f000 f853 	bl	8000558 <WriteControlRegister>
 80004b2:	6138      	str	r0, [r7, #16]

    // Set Line Inputs to 0DB
    res = WriteControlRegister(i2c, CODEC_REG_LEFT_LINE_IN, CODEC_INPUT_0_DB);
 80004b4:	2217      	movs	r2, #23
 80004b6:	2100      	movs	r1, #0
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f000 f84d 	bl	8000558 <WriteControlRegister>
 80004be:	6138      	str	r0, [r7, #16]

    res = WriteControlRegister(i2c, CODEC_REG_RIGHT_LINE_IN, CODEC_INPUT_0_DB);
 80004c0:	2217      	movs	r2, #23
 80004c2:	2101      	movs	r1, #1
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f000 f847 	bl	8000558 <WriteControlRegister>
 80004ca:	6138      	str	r0, [r7, #16]

    // Set Headphone To Mute (and disable?)
    res = WriteControlRegister(i2c, CODEC_REG_LEFT_HEADPHONES_OUT,
 80004cc:	2200      	movs	r2, #0
 80004ce:	2102      	movs	r1, #2
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f000 f841 	bl	8000558 <WriteControlRegister>
 80004d6:	6138      	str	r0, [r7, #16]
                               CODEC_HEADPHONES_MUTE);

    res = WriteControlRegister(i2c, CODEC_REG_RIGHT_HEADPHONES_OUT,
 80004d8:	2200      	movs	r2, #0
 80004da:	2103      	movs	r1, #3
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f000 f83b 	bl	8000558 <WriteControlRegister>
 80004e2:	6138      	str	r0, [r7, #16]
                               CODEC_HEADPHONES_MUTE);


    // Analog and Digital Routing
    res = WriteControlRegister(i2c, CODEC_REG_ANALOGUE_ROUTING,
 80004e4:	2212      	movs	r2, #18
 80004e6:	2104      	movs	r1, #4
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f000 f835 	bl	8000558 <WriteControlRegister>
 80004ee:	6138      	str	r0, [r7, #16]
                               CODEC_MIC_MUTE | CODEC_ADC_LINE
                                   | CODEC_OUTPUT_DAC_ENABLE);


    res = WriteControlRegister(i2c, CODEC_REG_DIGITAL_ROUTING,
 80004f0:	2200      	movs	r2, #0
 80004f2:	2105      	movs	r1, #5
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f000 f82f 	bl	8000558 <WriteControlRegister>
 80004fa:	6138      	str	r0, [r7, #16]
                               CODEC_DEEMPHASIS_NONE);


    // Configure power management
    uint8_t power_down_reg = CODEC_POWER_DOWN_MIC | CODEC_POWER_DOWN_CLOCK_OUTPUT;
 80004fc:	2342      	movs	r3, #66	; 0x42
 80004fe:	73fb      	strb	r3, [r7, #15]

    power_down_reg |= CODEC_POWER_DOWN_OSCILLATOR;
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	f043 0320 	orr.w	r3, r3, #32
 8000506:	73fb      	strb	r3, [r7, #15]
    res = WriteControlRegister(i2c, CODEC_REG_POWER_MANAGEMENT, power_down_reg);
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	b29b      	uxth	r3, r3
 800050c:	461a      	mov	r2, r3
 800050e:	2106      	movs	r1, #6
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f000 f821 	bl	8000558 <WriteControlRegister>
 8000516:	6138      	str	r0, [r7, #16]


    // Digital Format
    uint8_t format_byte;
    format_byte = (MSB_FIRST_LJ) | (WL_BITS_24);
 8000518:	2309      	movs	r3, #9
 800051a:	73bb      	strb	r3, [r7, #14]
    format_byte |= CODEC_FORMAT_SLAVE;
    res = WriteControlRegister(i2c, CODEC_REG_DIGITAL_FORMAT, format_byte);
 800051c:	7bbb      	ldrb	r3, [r7, #14]
 800051e:	b29b      	uxth	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	2107      	movs	r1, #7
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 f817 	bl	8000558 <WriteControlRegister>
 800052a:	6138      	str	r0, [r7, #16]


    // samplerate
    // TODO: add support for other samplerates
    res = WriteControlRegister(i2c, CODEC_REG_SAMPLE_RATE, CODEC_RATE_48K_48K);
 800052c:	2200      	movs	r2, #0
 800052e:	2108      	movs	r1, #8
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 f811 	bl	8000558 <WriteControlRegister>
 8000536:	6138      	str	r0, [r7, #16]


    res = WriteControlRegister(i2c, CODEC_REG_ACTIVE, 0x00);
 8000538:	2200      	movs	r2, #0
 800053a:	2109      	movs	r1, #9
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f80b 	bl	8000558 <WriteControlRegister>
 8000542:	6138      	str	r0, [r7, #16]


    // Enable
    res = WriteControlRegister(i2c, CODEC_REG_ACTIVE, 0x01);
 8000544:	2201      	movs	r2, #1
 8000546:	2109      	movs	r1, #9
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 f805 	bl	8000558 <WriteControlRegister>
 800054e:	6138      	str	r0, [r7, #16]

}
 8000550:	bf00      	nop
 8000552:	3718      	adds	r7, #24
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <WriteControlRegister>:

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	70fb      	strb	r3, [r7, #3]
 8000564:	4613      	mov	r3, r2
 8000566:	803b      	strh	r3, [r7, #0]
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	b25a      	sxtb	r2, r3
 800056e:	883b      	ldrh	r3, [r7, #0]
 8000570:	0a1b      	lsrs	r3, r3, #8
 8000572:	b29b      	uxth	r3, r3
 8000574:	b25b      	sxtb	r3, r3
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	b25b      	sxtb	r3, r3
 800057c:	4313      	orrs	r3, r2
 800057e:	b25b      	sxtb	r3, r3
 8000580:	73fb      	strb	r3, [r7, #15]
    uint8_t byte_2  = data & 0xff;
 8000582:	883b      	ldrh	r3, [r7, #0]
 8000584:	73bb      	strb	r3, [r7, #14]
    uint8_t buff[2] = {byte_1, byte_2};
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	723b      	strb	r3, [r7, #8]
 800058a:	7bbb      	ldrb	r3, [r7, #14]
 800058c:	727b      	strb	r3, [r7, #9]
    uint8_t result = HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
 800058e:	f107 0208 	add.w	r2, r7, #8
 8000592:	23fa      	movs	r3, #250	; 0xfa
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2302      	movs	r3, #2
 8000598:	2134      	movs	r1, #52	; 0x34
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f004 ff48 	bl	8005430 <HAL_I2C_Master_Transmit>
 80005a0:	4603      	mov	r3, r0
 80005a2:	737b      	strb	r3, [r7, #13]
                                              2, 250);

    HAL_Delay(10);
 80005a4:	200a      	movs	r0, #10
 80005a6:	f001 fd67 	bl	8002078 <HAL_Delay>
    return 1;
 80005aa:	2301      	movs	r3, #1
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2224      	movs	r2, #36	; 0x24
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f00d fc01 	bl	800ddc8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_DAC1_Init+0x70>)
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <MX_DAC1_Init+0x74>)
 80005ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005cc:	4815      	ldr	r0, [pc, #84]	; (8000624 <MX_DAC1_Init+0x70>)
 80005ce:	f001 ff0f 	bl	80023f0 <HAL_DAC_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005d8:	f000 ff18 	bl	800140c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80005e0:	2302      	movs	r3, #2
 80005e2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	4619      	mov	r1, r3
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <MX_DAC1_Init+0x70>)
 80005f8:	f001 ff1c 	bl	8002434 <HAL_DAC_ConfigChannel>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000602:	f000 ff03 	bl	800140c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2210      	movs	r2, #16
 800060a:	4619      	mov	r1, r3
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_DAC1_Init+0x70>)
 800060e:	f001 ff11 	bl	8002434 <HAL_DAC_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000618:	f000 fef8 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	; 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20001414 	.word	0x20001414
 8000628:	40007400 	.word	0x40007400

0800062c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a18      	ldr	r2, [pc, #96]	; (80006ac <HAL_DAC_MspInit+0x80>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d129      	bne.n	80006a2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_DAC_MspInit+0x84>)
 8000650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000654:	4a16      	ldr	r2, [pc, #88]	; (80006b0 <HAL_DAC_MspInit+0x84>)
 8000656:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800065a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <HAL_DAC_MspInit+0x84>)
 8000660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <HAL_DAC_MspInit+0x84>)
 800066e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <HAL_DAC_MspInit+0x84>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_DAC_MspInit+0x84>)
 800067e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800068a:	2330      	movs	r3, #48	; 0x30
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_DAC_MspInit+0x88>)
 800069e:	f004 fc3b 	bl	8004f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	; 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40007400 	.word	0x40007400
 80006b0:	58024400 	.word	0x58024400
 80006b4:	58020000 	.word	0x58020000

080006b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_DMA_Init+0x7c>)
 80006c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006c4:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <MX_DMA_Init+0x7c>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <MX_DMA_Init+0x7c>)
 80006d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	200c      	movs	r0, #12
 80006e2:	f001 fdd4 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006e6:	200c      	movs	r0, #12
 80006e8:	f001 fdeb 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	200d      	movs	r0, #13
 80006f2:	f001 fdcc 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006f6:	200d      	movs	r0, #13
 80006f8:	f001 fde3 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	2011      	movs	r0, #17
 8000702:	f001 fdc4 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000706:	2011      	movs	r0, #17
 8000708:	f001 fddb 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	202f      	movs	r0, #47	; 0x2f
 8000712:	f001 fdbc 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000716:	202f      	movs	r0, #47	; 0x2f
 8000718:	f001 fdd3 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2100      	movs	r1, #0
 8000720:	2066      	movs	r0, #102	; 0x66
 8000722:	f001 fdb4 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8000726:	2066      	movs	r0, #102	; 0x66
 8000728:	f001 fdcb 	bl	80022c2 <HAL_NVIC_EnableIRQ>

}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	58024400 	.word	0x58024400

08000738 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
 800074c:	615a      	str	r2, [r3, #20]
 800074e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_FMC_Init+0x94>)
 8000752:	4a1f      	ldr	r2, [pc, #124]	; (80007d0 <MX_FMC_Init+0x98>)
 8000754:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_FMC_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_FMC_Init+0x94>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_FMC_Init+0x94>)
 8000764:	2208      	movs	r2, #8
 8000766:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_FMC_Init+0x94>)
 800076a:	2220      	movs	r2, #32
 800076c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_FMC_Init+0x94>)
 8000770:	2240      	movs	r2, #64	; 0x40
 8000772:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_FMC_Init+0x94>)
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_FMC_Init+0x94>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_FMC_Init+0x94>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_FMC_Init+0x94>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_FMC_Init+0x94>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000792:	2310      	movs	r3, #16
 8000794:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000796:	2310      	movs	r3, #16
 8000798:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800079a:	2310      	movs	r3, #16
 800079c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800079e:	2310      	movs	r3, #16
 80007a0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80007a2:	2310      	movs	r3, #16
 80007a4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80007a6:	2310      	movs	r3, #16
 80007a8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80007aa:	2310      	movs	r3, #16
 80007ac:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	; (80007cc <MX_FMC_Init+0x94>)
 80007b4:	f00b f93c 	bl	800ba30 <HAL_SDRAM_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80007be:	f000 fe25 	bl	800140c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80007c2:	bf00      	nop
 80007c4:	3720      	adds	r7, #32
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20001428 	.word	0x20001428
 80007d0:	52004140 	.word	0x52004140

080007d4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80007e8:	4b3d      	ldr	r3, [pc, #244]	; (80008e0 <HAL_FMC_MspInit+0x10c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d172      	bne.n	80008d6 <HAL_FMC_MspInit+0x102>
    return;
  }
  FMC_Initialized = 1;
 80007f0:	4b3b      	ldr	r3, [pc, #236]	; (80008e0 <HAL_FMC_MspInit+0x10c>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80007f6:	4b3b      	ldr	r3, [pc, #236]	; (80008e4 <HAL_FMC_MspInit+0x110>)
 80007f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80007fc:	4a39      	ldr	r2, [pc, #228]	; (80008e4 <HAL_FMC_MspInit+0x110>)
 80007fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000802:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000806:	4b37      	ldr	r3, [pc, #220]	; (80008e4 <HAL_FMC_MspInit+0x110>)
 8000808:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800080c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
 8000814:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000818:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000826:	230c      	movs	r3, #12
 8000828:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4619      	mov	r1, r3
 800082e:	482e      	ldr	r0, [pc, #184]	; (80008e8 <HAL_FMC_MspInit+0x114>)
 8000830:	f004 fb72 	bl	8004f18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000834:	f248 1337 	movw	r3, #33079	; 0x8137
 8000838:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000846:	230c      	movs	r3, #12
 8000848:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4827      	ldr	r0, [pc, #156]	; (80008ec <HAL_FMC_MspInit+0x118>)
 8000850:	f004 fb62 	bl	8004f18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000854:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000858:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000866:	230c      	movs	r3, #12
 8000868:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4820      	ldr	r0, [pc, #128]	; (80008f0 <HAL_FMC_MspInit+0x11c>)
 8000870:	f004 fb52 	bl	8004f18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 8000874:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000878:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_1
                          |GPIO_PIN_10|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000886:	230c      	movs	r3, #12
 8000888:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4819      	ldr	r0, [pc, #100]	; (80008f4 <HAL_FMC_MspInit+0x120>)
 8000890:	f004 fb42 	bl	8004f18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 8000894:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000898:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_11
                          |GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008a6:	230c      	movs	r3, #12
 80008a8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <HAL_FMC_MspInit+0x124>)
 80008b0:	f004 fb32 	bl	8004f18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 80008b4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008b8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008c6:	230c      	movs	r3, #12
 80008c8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <HAL_FMC_MspInit+0x128>)
 80008d0:	f004 fb22 	bl	8004f18 <HAL_GPIO_Init>
 80008d4:	e000      	b.n	80008d8 <HAL_FMC_MspInit+0x104>
    return;
 80008d6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000145c 	.word	0x2000145c
 80008e4:	58024400 	.word	0x58024400
 80008e8:	58021000 	.word	0x58021000
 80008ec:	58021800 	.word	0x58021800
 80008f0:	58020c00 	.word	0x58020c00
 80008f4:	58022000 	.word	0x58022000
 80008f8:	58021c00 	.word	0x58021c00
 80008fc:	58021400 	.word	0x58021400

08000900 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000908:	f7ff ff64 	bl	80007d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08e      	sub	sp, #56	; 0x38
 8000918:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092a:	4b8a      	ldr	r3, [pc, #552]	; (8000b54 <MX_GPIO_Init+0x240>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	4a88      	ldr	r2, [pc, #544]	; (8000b54 <MX_GPIO_Init+0x240>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093a:	4b86      	ldr	r3, [pc, #536]	; (8000b54 <MX_GPIO_Init+0x240>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	f003 0310 	and.w	r3, r3, #16
 8000944:	623b      	str	r3, [r7, #32]
 8000946:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	4b82      	ldr	r3, [pc, #520]	; (8000b54 <MX_GPIO_Init+0x240>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	4a81      	ldr	r2, [pc, #516]	; (8000b54 <MX_GPIO_Init+0x240>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000958:	4b7e      	ldr	r3, [pc, #504]	; (8000b54 <MX_GPIO_Init+0x240>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	61fb      	str	r3, [r7, #28]
 8000964:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000966:	4b7b      	ldr	r3, [pc, #492]	; (8000b54 <MX_GPIO_Init+0x240>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	4a79      	ldr	r2, [pc, #484]	; (8000b54 <MX_GPIO_Init+0x240>)
 800096e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000976:	4b77      	ldr	r3, [pc, #476]	; (8000b54 <MX_GPIO_Init+0x240>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000980:	61bb      	str	r3, [r7, #24]
 8000982:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000984:	4b73      	ldr	r3, [pc, #460]	; (8000b54 <MX_GPIO_Init+0x240>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098a:	4a72      	ldr	r2, [pc, #456]	; (8000b54 <MX_GPIO_Init+0x240>)
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000994:	4b6f      	ldr	r3, [pc, #444]	; (8000b54 <MX_GPIO_Init+0x240>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b6c      	ldr	r3, [pc, #432]	; (8000b54 <MX_GPIO_Init+0x240>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a8:	4a6a      	ldr	r2, [pc, #424]	; (8000b54 <MX_GPIO_Init+0x240>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b2:	4b68      	ldr	r3, [pc, #416]	; (8000b54 <MX_GPIO_Init+0x240>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b64      	ldr	r3, [pc, #400]	; (8000b54 <MX_GPIO_Init+0x240>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	4a63      	ldr	r2, [pc, #396]	; (8000b54 <MX_GPIO_Init+0x240>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d0:	4b60      	ldr	r3, [pc, #384]	; (8000b54 <MX_GPIO_Init+0x240>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009de:	4b5d      	ldr	r3, [pc, #372]	; (8000b54 <MX_GPIO_Init+0x240>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	4a5b      	ldr	r2, [pc, #364]	; (8000b54 <MX_GPIO_Init+0x240>)
 80009e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ee:	4b59      	ldr	r3, [pc, #356]	; (8000b54 <MX_GPIO_Init+0x240>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fc:	4b55      	ldr	r3, [pc, #340]	; (8000b54 <MX_GPIO_Init+0x240>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a02:	4a54      	ldr	r2, [pc, #336]	; (8000b54 <MX_GPIO_Init+0x240>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0c:	4b51      	ldr	r3, [pc, #324]	; (8000b54 <MX_GPIO_Init+0x240>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1a:	4b4e      	ldr	r3, [pc, #312]	; (8000b54 <MX_GPIO_Init+0x240>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a20:	4a4c      	ldr	r2, [pc, #304]	; (8000b54 <MX_GPIO_Init+0x240>)
 8000a22:	f043 0320 	orr.w	r3, r3, #32
 8000a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2a:	4b4a      	ldr	r3, [pc, #296]	; (8000b54 <MX_GPIO_Init+0x240>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	f003 0320 	and.w	r3, r3, #32
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	4846      	ldr	r0, [pc, #280]	; (8000b58 <MX_GPIO_Init+0x244>)
 8000a3e:	f004 fc33 	bl	80052a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG14 PG13 PG12 PG9
                           PG7 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
 8000a42:	f247 2388 	movw	r3, #29320	; 0x7288
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	4841      	ldr	r0, [pc, #260]	; (8000b5c <MX_GPIO_Init+0x248>)
 8000a58:	f004 fa5e 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD4
                           PD3 PD13 PD12 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000a5c:	f643 03f8 	movw	r3, #14584	; 0x38f8
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a62:	2303      	movs	r3, #3
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	483b      	ldr	r0, [pc, #236]	; (8000b60 <MX_GPIO_Init+0x24c>)
 8000a72:	f004 fa51 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 PA0 PA2
                           PA6 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 8000a76:	f649 73cd 	movw	r3, #40909	; 0x9fcd
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_2
                          |GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4836      	ldr	r0, [pc, #216]	; (8000b64 <MX_GPIO_Init+0x250>)
 8000a8c:	f004 fa44 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB6 PB2 PB12
                           PB13 PB1 PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_2|GPIO_PIN_12
 8000a90:	f243 43c7 	movw	r3, #13511	; 0x34c7
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a96:	2303      	movs	r3, #3
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4830      	ldr	r0, [pc, #192]	; (8000b68 <MX_GPIO_Init+0x254>)
 8000aa6:	f004 fa37 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8000aaa:	f24e 037f 	movw	r3, #57471	; 0xe07f
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	4826      	ldr	r0, [pc, #152]	; (8000b58 <MX_GPIO_Init+0x244>)
 8000ac0:	f004 fa2a 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000ac4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aca:	2303      	movs	r3, #3
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4824      	ldr	r0, [pc, #144]	; (8000b6c <MX_GPIO_Init+0x258>)
 8000ada:	f004 fa1d 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4818      	ldr	r0, [pc, #96]	; (8000b58 <MX_GPIO_Init+0x244>)
 8000af6:	f004 fa0f 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000afa:	23c0      	movs	r3, #192	; 0xc0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afe:	2303      	movs	r3, #3
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4818      	ldr	r0, [pc, #96]	; (8000b70 <MX_GPIO_Init+0x25c>)
 8000b0e:	f004 fa03 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b12:	2302      	movs	r3, #2
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	480f      	ldr	r0, [pc, #60]	; (8000b64 <MX_GPIO_Init+0x250>)
 8000b26:	f004 f9f7 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b2a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4808      	ldr	r0, [pc, #32]	; (8000b68 <MX_GPIO_Init+0x254>)
 8000b48:	f004 f9e6 	bl	8004f18 <HAL_GPIO_Init>

}
 8000b4c:	bf00      	nop
 8000b4e:	3738      	adds	r7, #56	; 0x38
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	58024400 	.word	0x58024400
 8000b58:	58020800 	.word	0x58020800
 8000b5c:	58021800 	.word	0x58021800
 8000b60:	58020c00 	.word	0x58020c00
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	58022000 	.word	0x58022000
 8000b70:	58021c00 	.word	0x58021c00

08000b74 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <MX_I2C1_Init+0x78>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30B00F2D;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <MX_I2C1_Init+0x7c>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bae:	480e      	ldr	r0, [pc, #56]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000bb0:	f004 fbae 	bl	8005310 <HAL_I2C_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bba:	f000 fc27 	bl	800140c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000bc2:	f004 ff27 	bl	8005a14 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bcc:	f000 fc1e 	bl	800140c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_I2C1_Init+0x74>)
 8000bd4:	f004 ff69 	bl	8005aaa <HAL_I2CEx_ConfigDigitalFilter>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bde:	f000 fc15 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20001460 	.word	0x20001460
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	30b00f2d 	.word	0x30b00f2d

08000bf4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000bfa:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <MX_I2C2_Init+0x78>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c00:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <MX_I2C2_Init+0x7c>)
 8000c02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c2e:	480e      	ldr	r0, [pc, #56]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c30:	f004 fb6e 	bl	8005310 <HAL_I2C_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c3a:	f000 fbe7 	bl	800140c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4809      	ldr	r0, [pc, #36]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c42:	f004 fee7 	bl	8005a14 <HAL_I2CEx_ConfigAnalogFilter>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c4c:	f000 fbde 	bl	800140c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c50:	2100      	movs	r1, #0
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_I2C2_Init+0x74>)
 8000c54:	f004 ff29 	bl	8005aaa <HAL_I2CEx_ConfigDigitalFilter>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c5e:	f000 fbd5 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200014ac 	.word	0x200014ac
 8000c6c:	40005800 	.word	0x40005800
 8000c70:	00b03fdb 	.word	0x00b03fdb

08000c74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0bc      	sub	sp, #240	; 0xf0
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c8c:	f107 0320 	add.w	r3, r7, #32
 8000c90:	22bc      	movs	r2, #188	; 0xbc
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f00d f897 	bl	800ddc8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a5b      	ldr	r2, [pc, #364]	; (8000e0c <HAL_I2C_MspInit+0x198>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d143      	bne.n	8000d2c <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cae:	f107 0320 	add.w	r3, r7, #32
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f005 ffc8 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cbe:	f000 fba5 	bl	800140c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b53      	ldr	r3, [pc, #332]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	4a51      	ldr	r2, [pc, #324]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd2:	4b4f      	ldr	r3, [pc, #316]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	61fb      	str	r3, [r7, #28]
 8000cde:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ce0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ce4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce8:	2312      	movs	r3, #18
 8000cea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d04:	4619      	mov	r1, r3
 8000d06:	4843      	ldr	r0, [pc, #268]	; (8000e14 <HAL_I2C_MspInit+0x1a0>)
 8000d08:	f004 f906 	bl	8004f18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d0c:	4b40      	ldr	r3, [pc, #256]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000d0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d12:	4a3f      	ldr	r2, [pc, #252]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d1c:	4b3c      	ldr	r3, [pc, #240]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000d1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000d2a:	e06b      	b.n	8000e04 <HAL_I2C_MspInit+0x190>
  else if(i2cHandle->Instance==I2C2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a39      	ldr	r2, [pc, #228]	; (8000e18 <HAL_I2C_MspInit+0x1a4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d166      	bne.n	8000e04 <HAL_I2C_MspInit+0x190>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d36:	2308      	movs	r3, #8
 8000d38:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	4618      	mov	r0, r3
 8000d46:	f005 ff7f 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 8000d50:	f000 fb5c 	bl	800140c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5a:	4a2d      	ldr	r2, [pc, #180]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d64:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d78:	4a25      	ldr	r2, [pc, #148]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000d7a:	f043 0302 	orr.w	r3, r3, #2
 8000d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d82:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d90:	2310      	movs	r3, #16
 8000d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d96:	2312      	movs	r3, #18
 8000d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000da2:	2301      	movs	r3, #1
 8000da4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000da8:	2304      	movs	r3, #4
 8000daa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000db2:	4619      	mov	r1, r3
 8000db4:	4819      	ldr	r0, [pc, #100]	; (8000e1c <HAL_I2C_MspInit+0x1a8>)
 8000db6:	f004 f8af 	bl	8004f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc2:	2312      	movs	r3, #18
 8000dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000dde:	4619      	mov	r1, r3
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <HAL_I2C_MspInit+0x1a0>)
 8000de2:	f004 f899 	bl	8004f18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dec:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000dee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000df2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_I2C_MspInit+0x19c>)
 8000df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	bf00      	nop
 8000e06:	37f0      	adds	r7, #240	; 0xf0
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	58024400 	.word	0x58024400
 8000e14:	58020400 	.word	0x58020400
 8000e18:	40005800 	.word	0x40005800
 8000e1c:	58021c00 	.word	0x58021c00

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  MPU_Conf();
 8000e26:	f000 f9c9 	bl	80011bc <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e2a:	4b4f      	ldr	r3, [pc, #316]	; (8000f68 <main+0x148>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d11b      	bne.n	8000e6e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e36:	f3bf 8f4f 	dsb	sy
}
 8000e3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e3c:	f3bf 8f6f 	isb	sy
}
 8000e40:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e42:	4b49      	ldr	r3, [pc, #292]	; (8000f68 <main+0x148>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e4a:	f3bf 8f4f 	dsb	sy
}
 8000e4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e50:	f3bf 8f6f 	isb	sy
}
 8000e54:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e56:	4b44      	ldr	r3, [pc, #272]	; (8000f68 <main+0x148>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	4a43      	ldr	r2, [pc, #268]	; (8000f68 <main+0x148>)
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e62:	f3bf 8f4f 	dsb	sy
}
 8000e66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e68:	f3bf 8f6f 	isb	sy
}
 8000e6c:	e000      	b.n	8000e70 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e6e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000e70:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <main+0x148>)
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d138      	bne.n	8000eee <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e7c:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <main+0x148>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e84:	f3bf 8f4f 	dsb	sy
}
 8000e88:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e8a:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <main+0x148>)
 8000e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e90:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	0b5b      	lsrs	r3, r3, #13
 8000e96:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e9a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	08db      	lsrs	r3, r3, #3
 8000ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ea4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	015a      	lsls	r2, r3, #5
 8000eaa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000eae:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000eb4:	492c      	ldr	r1, [pc, #176]	; (8000f68 <main+0x148>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	1e5a      	subs	r2, r3, #1
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1ef      	bne.n	8000ea6 <main+0x86>
    } while(sets-- != 0U);
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1e5a      	subs	r2, r3, #1
 8000eca:	60ba      	str	r2, [r7, #8]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1e5      	bne.n	8000e9c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed0:	f3bf 8f4f 	dsb	sy
}
 8000ed4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <main+0x148>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <main+0x148>)
 8000edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee2:	f3bf 8f4f 	dsb	sy
}
 8000ee6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ee8:	f3bf 8f6f 	isb	sy
}
 8000eec:	e000      	b.n	8000ef0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000eee:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef0:	f001 f830 	bl	8001f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef4:	f000 f846 	bl	8000f84 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ef8:	f000 f8fc 	bl	80010f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f7ff fd0a 	bl	8000914 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f00:	f7ff fbda 	bl	80006b8 <MX_DMA_Init>
  MX_DAC1_Init();
 8000f04:	f7ff fb56 	bl	80005b4 <MX_DAC1_Init>
  MX_FMC_Init();
 8000f08:	f7ff fc16 	bl	8000738 <MX_FMC_Init>
  MX_I2C2_Init();
 8000f0c:	f7ff fe72 	bl	8000bf4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f10:	f000 fa82 	bl	8001418 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000f14:	f000 fb9c 	bl	8001650 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000f18:	f000 fcf2 	bl	8001900 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000f1c:	f000 fd82 	bl	8001a24 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000f20:	f7ff fe28 	bl	8000b74 <MX_I2C1_Init>
  MX_RNG_Init();
 8000f24:	f000 fb46 	bl	80015b4 <MX_RNG_Init>
  MX_FATFS_Init();
 8000f28:	f00c fa7a 	bl	800d420 <MX_FATFS_Init>
  return __builtin_arm_get_fpscr();
 8000f2c:	eef1 3a10 	vmrs	r3, fpscr
  /* USER CODE BEGIN 2 */

  uint32_t tempFPURegisterVal = __get_FPSCR();
 8000f30:	617b      	str	r3, [r7, #20]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	613b      	str	r3, [r7, #16]
  __builtin_arm_set_fpscr(fpscr);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	eee1 3a10 	vmsr	fpscr, r3
}
 8000f44:	bf00      	nop
  __set_FPSCR(tempFPURegisterVal);

  codec_init(&hi2c2);
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <main+0x14c>)
 8000f48:	f7ff faa8 	bl	800049c <codec_init>

  audio_init(&hsai_BlockB1, &hsai_BlockA1);
 8000f4c:	4908      	ldr	r1, [pc, #32]	; (8000f70 <main+0x150>)
 8000f4e:	4809      	ldr	r0, [pc, #36]	; (8000f74 <main+0x154>)
 8000f50:	f7ff f9c2 	bl	80002d8 <audio_init>

  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_TX, SPI_RX, 32);
 8000f54:	2320      	movs	r3, #32
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <main+0x158>)
 8000f58:	4908      	ldr	r1, [pc, #32]	; (8000f7c <main+0x15c>)
 8000f5a:	4809      	ldr	r0, [pc, #36]	; (8000f80 <main+0x160>)
 8000f5c:	f00a feaa 	bl	800bcb4 <HAL_SPI_TransmitReceive_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
	  HAL_Delay(100);
 8000f60:	2064      	movs	r0, #100	; 0x64
 8000f62:	f001 f889 	bl	8002078 <HAL_Delay>
 8000f66:	e7fb      	b.n	8000f60 <main+0x140>
 8000f68:	e000ed00 	.word	0xe000ed00
 8000f6c:	200014ac 	.word	0x200014ac
 8000f70:	20001558 	.word	0x20001558
 8000f74:	200015f0 	.word	0x200015f0
 8000f78:	30000420 	.word	0x30000420
 8000f7c:	30000400 	.word	0x30000400
 8000f80:	200017f8 	.word	0x200017f8

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b09e      	sub	sp, #120	; 0x78
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8e:	224c      	movs	r2, #76	; 0x4c
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00c ff18 	bl	800ddc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00c ff11 	bl	800ddc8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f004 fdcc 	bl	8005b44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <SystemClock_Config+0x164>)
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <SystemClock_Config+0x164>)
 8000fb6:	f023 0301 	bic.w	r3, r3, #1
 8000fba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fbc:	4b4a      	ldr	r3, [pc, #296]	; (80010e8 <SystemClock_Config+0x164>)
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	4b49      	ldr	r3, [pc, #292]	; (80010ec <SystemClock_Config+0x168>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	4a48      	ldr	r2, [pc, #288]	; (80010ec <SystemClock_Config+0x168>)
 8000fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd0:	6193      	str	r3, [r2, #24]
 8000fd2:	4b46      	ldr	r3, [pc, #280]	; (80010ec <SystemClock_Config+0x168>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fde:	bf00      	nop
 8000fe0:	4b42      	ldr	r3, [pc, #264]	; (80010ec <SystemClock_Config+0x168>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fec:	d1f8      	bne.n	8000fe0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <SystemClock_Config+0x16c>)
 8000ff0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff4:	4a3e      	ldr	r2, [pc, #248]	; (80010f0 <SystemClock_Config+0x16c>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ffe:	4b3c      	ldr	r3, [pc, #240]	; (80010f0 <SystemClock_Config+0x16c>)
 8001000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800100c:	2300      	movs	r3, #0
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4b36      	ldr	r3, [pc, #216]	; (80010ec <SystemClock_Config+0x168>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a35      	ldr	r2, [pc, #212]	; (80010ec <SystemClock_Config+0x168>)
 8001016:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b33      	ldr	r3, [pc, #204]	; (80010ec <SystemClock_Config+0x168>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <SystemClock_Config+0x164>)
 8001028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102a:	4a2f      	ldr	r2, [pc, #188]	; (80010e8 <SystemClock_Config+0x164>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <SystemClock_Config+0x164>)
 8001034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800103e:	bf00      	nop
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <SystemClock_Config+0x168>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800104c:	d1f8      	bne.n	8001040 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <SystemClock_Config+0x16c>)
 8001050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001052:	f023 0303 	bic.w	r3, r3, #3
 8001056:	4a26      	ldr	r2, [pc, #152]	; (80010f0 <SystemClock_Config+0x16c>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800105e:	2321      	movs	r3, #33	; 0x21
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001062:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001068:	2301      	movs	r3, #1
 800106a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106c:	2302      	movs	r3, #2
 800106e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001070:	2302      	movs	r3, #2
 8001072:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001078:	233c      	movs	r3, #60	; 0x3c
 800107a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800107c:	2302      	movs	r3, #2
 800107e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001080:	2306      	movs	r3, #6
 8001082:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 8;
 8001084:	2308      	movs	r3, #8
 8001086:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001088:	230c      	movs	r3, #12
 800108a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800108c:	2300      	movs	r3, #0
 800108e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001094:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001098:	4618      	mov	r0, r3
 800109a:	f004 fe47 	bl	8005d2c <HAL_RCC_OscConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x124>
  {
    Error_Handler();
 80010a4:	f000 f9b2 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a8:	233f      	movs	r3, #63	; 0x3f
 80010aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ac:	2303      	movs	r3, #3
 80010ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010b4:	2308      	movs	r3, #8
 80010b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010b8:	2340      	movs	r3, #64	; 0x40
 80010ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010bc:	2340      	movs	r3, #64	; 0x40
 80010be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010c6:	2340      	movs	r3, #64	; 0x40
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	2104      	movs	r1, #4
 80010d0:	4618      	mov	r0, r3
 80010d2:	f005 fa59 	bl	8006588 <HAL_RCC_ClockConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x15c>
  {
    Error_Handler();
 80010dc:	f000 f996 	bl	800140c <Error_Handler>
  }
}
 80010e0:	bf00      	nop
 80010e2:	3778      	adds	r7, #120	; 0x78
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	58000400 	.word	0x58000400
 80010ec:	58024800 	.word	0x58024800
 80010f0:	58024400 	.word	0x58024400

080010f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0b0      	sub	sp, #192	; 0xc0
 80010f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	22bc      	movs	r2, #188	; 0xbc
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00c fe61 	bl	800ddc8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <PeriphCommonClock_Config+0x84>)
 8001108:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800110a:	2301      	movs	r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800110e:	230c      	movs	r3, #12
 8001110:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001112:	2308      	movs	r3, #8
 8001114:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001116:	2302      	movs	r3, #2
 8001118:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800111e:	23c0      	movs	r3, #192	; 0xc0
 8001120:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8001126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 800112c:	2301      	movs	r3, #1
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001130:	230c      	movs	r3, #12
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 4;
 8001134:	2304      	movs	r3, #4
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
 8001138:	2308      	movs	r3, #8
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 16;
 800113c:	2310      	movs	r3, #16
 800113e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001140:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001144:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001146:	2300      	movs	r3, #0
 8001148:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
 800114a:	f640 1338 	movw	r3, #2360	; 0x938
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001154:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001158:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 800115a:	2302      	movs	r3, #2
 800115c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4618      	mov	r0, r3
 8001162:	f005 fd71 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <PeriphCommonClock_Config+0x7c>
  {
    Error_Handler();
 800116c:	f000 f94e 	bl	800140c <Error_Handler>
  }
}
 8001170:	bf00      	nop
 8001172:	37c0      	adds	r7, #192	; 0xc0
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	01010100 	.word	0x01010100

0800117c <randomNumber>:

/* USER CODE BEGIN 4 */
float randomNumber(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	480b      	ldr	r0, [pc, #44]	; (80011b4 <randomNumber+0x38>)
 8001188:	f007 ff4c 	bl	8009024 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001196:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011b8 <randomNumber+0x3c>
 800119a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119e:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	ee07 3a90 	vmov	s15, r3
}
 80011a8:	eeb0 0a67 	vmov.f32	s0, s15
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20001544 	.word	0x20001544
 80011b8:	2f80000d 	.word	0x2f80000d

080011bc <MPU_Conf>:

void MPU_Conf(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 80011c2:	f001 f899 	bl	80022f8 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011c6:	2301      	movs	r3, #1
 80011c8:	703b      	strb	r3, [r7, #0]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 80011ca:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80011ce:	607b      	str	r3, [r7, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80011d0:	2311      	movs	r3, #17
 80011d2:	723b      	strb	r3, [r7, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80011d4:	2303      	movs	r3, #3
 80011d6:	72fb      	strb	r3, [r7, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80011d8:	2301      	movs	r3, #1
 80011da:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	737b      	strb	r3, [r7, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	707b      	strb	r3, [r7, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 80011ec:	2300      	movs	r3, #0
 80011ee:	727b      	strb	r3, [r7, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011f0:	2301      	movs	r3, #1
 80011f2:	733b      	strb	r3, [r7, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011f4:	463b      	mov	r3, r7
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 f8b6 	bl	8002368 <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011fc:	2301      	movs	r3, #1
 80011fe:	703b      	strb	r3, [r7, #0]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 8001200:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001204:	607b      	str	r3, [r7, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001206:	230f      	movs	r3, #15
 8001208:	723b      	strb	r3, [r7, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800120a:	2303      	movs	r3, #3
 800120c:	72fb      	strb	r3, [r7, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800120e:	2301      	movs	r3, #1
 8001210:	72bb      	strb	r3, [r7, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001212:	2301      	movs	r3, #1
 8001214:	73bb      	strb	r3, [r7, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800121a:	2301      	movs	r3, #1
 800121c:	737b      	strb	r3, [r7, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800121e:	2301      	movs	r3, #1
 8001220:	707b      	strb	r3, [r7, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 8001222:	2300      	movs	r3, #0
 8001224:	727b      	strb	r3, [r7, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	733b      	strb	r3, [r7, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800122a:	463b      	mov	r3, r7
 800122c:	4618      	mov	r0, r3
 800122e:	f001 f89b 	bl	8002368 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001232:	2004      	movs	r0, #4
 8001234:	f001 f878 	bl	8002328 <HAL_MPU_Enable>
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_SPI_TxRxCpltCallback>:
void sendNoteOn(uint8_t note, uint8_t velocity);
void sendCtrl(uint8_t value, uint8_t ctrl);


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	//spiBuffer = 1;
    uint8_t offset = 16;
 8001248:	2310      	movs	r3, #16
 800124a:	73bb      	strb	r3, [r7, #14]
    if (SPI_RX[offset] == 1)
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	4a26      	ldr	r2, [pc, #152]	; (80012e8 <HAL_SPI_TxRxCpltCallback+0xa8>)
 8001250:	5cd3      	ldrb	r3, [r2, r3]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d144      	bne.n	80012e0 <HAL_SPI_TxRxCpltCallback+0xa0>
    {
    	//got a change!
    	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	4824      	ldr	r0, [pc, #144]	; (80012ec <HAL_SPI_TxRxCpltCallback+0xac>)
 800125a:	f004 f83e 	bl	80052da <HAL_GPIO_TogglePin>

    	 uint8_t currentByte = offset+1;
 800125e:	7bbb      	ldrb	r3, [r7, #14]
 8001260:	3301      	adds	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]

    	 while (SPI_RX[currentByte] != 0)
 8001264:	e037      	b.n	80012d6 <HAL_SPI_TxRxCpltCallback+0x96>
    	 {
			 if (SPI_RX[currentByte] == 0x90)
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	4a1f      	ldr	r2, [pc, #124]	; (80012e8 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	2b90      	cmp	r3, #144	; 0x90
 800126e:	d10c      	bne.n	800128a <HAL_SPI_TxRxCpltCallback+0x4a>
			 {
				 sendNoteOn(SPI_RX[currentByte+1], SPI_RX[currentByte+2]);
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	3301      	adds	r3, #1
 8001274:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <HAL_SPI_TxRxCpltCallback+0xa8>)
 8001276:	5cd2      	ldrb	r2, [r2, r3]
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	3302      	adds	r3, #2
 800127c:	491a      	ldr	r1, [pc, #104]	; (80012e8 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800127e:	5ccb      	ldrb	r3, [r1, r3]
 8001280:	4619      	mov	r1, r3
 8001282:	4610      	mov	r0, r2
 8001284:	f000 f88c 	bl	80013a0 <sendNoteOn>
 8001288:	e022      	b.n	80012d0 <HAL_SPI_TxRxCpltCallback+0x90>
			 }
			 else if (SPI_RX[currentByte] == 0xb0)
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800128e:	5cd3      	ldrb	r3, [r2, r3]
 8001290:	2bb0      	cmp	r3, #176	; 0xb0
 8001292:	d10c      	bne.n	80012ae <HAL_SPI_TxRxCpltCallback+0x6e>
			 {
				 sendCtrl(SPI_RX[currentByte+1], SPI_RX[currentByte+2]);
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	3301      	adds	r3, #1
 8001298:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800129a:	5cd2      	ldrb	r2, [r2, r3]
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	3302      	adds	r3, #2
 80012a0:	4911      	ldr	r1, [pc, #68]	; (80012e8 <HAL_SPI_TxRxCpltCallback+0xa8>)
 80012a2:	5ccb      	ldrb	r3, [r1, r3]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4610      	mov	r0, r2
 80012a8:	f000 f88c 	bl	80013c4 <sendCtrl>
 80012ac:	e010      	b.n	80012d0 <HAL_SPI_TxRxCpltCallback+0x90>
			 }
			 else if (SPI_RX[currentByte] == 0xe0)
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <HAL_SPI_TxRxCpltCallback+0xa8>)
 80012b2:	5cd3      	ldrb	r3, [r2, r3]
 80012b4:	2be0      	cmp	r3, #224	; 0xe0
 80012b6:	d10b      	bne.n	80012d0 <HAL_SPI_TxRxCpltCallback+0x90>
			 {
				 sendPitchBend(SPI_RX[currentByte+1], SPI_RX[currentByte+2]);
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	3301      	adds	r3, #1
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_SPI_TxRxCpltCallback+0xa8>)
 80012be:	5cd3      	ldrb	r3, [r2, r3]
 80012c0:	4618      	mov	r0, r3
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	3302      	adds	r3, #2
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_SPI_TxRxCpltCallback+0xa8>)
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	4619      	mov	r1, r3
 80012cc:	f000 f88c 	bl	80013e8 <sendPitchBend>
			 }
			 currentByte = currentByte+3;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	3303      	adds	r3, #3
 80012d4:	73fb      	strb	r3, [r7, #15]
    	 while (SPI_RX[currentByte] != 0)
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <HAL_SPI_TxRxCpltCallback+0xa8>)
 80012da:	5cd3      	ldrb	r3, [r2, r3]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1c2      	bne.n	8001266 <HAL_SPI_TxRxCpltCallback+0x26>
    	 }

    }
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	30000420 	.word	0x30000420
 80012ec:	58020800 	.word	0x58020800

080012f0 <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	//spiBuffer = 0;
    uint8_t offset = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73bb      	strb	r3, [r7, #14]

    if (SPI_RX[offset] == 1)
 80012fc:	7bbb      	ldrb	r3, [r7, #14]
 80012fe:	4a26      	ldr	r2, [pc, #152]	; (8001398 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d144      	bne.n	8001390 <HAL_SPI_TxRxHalfCpltCallback+0xa0>
    {
    	//got a change!
    	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001306:	2180      	movs	r1, #128	; 0x80
 8001308:	4824      	ldr	r0, [pc, #144]	; (800139c <HAL_SPI_TxRxHalfCpltCallback+0xac>)
 800130a:	f003 ffe6 	bl	80052da <HAL_GPIO_TogglePin>
    	 uint8_t currentByte = offset+1;
 800130e:	7bbb      	ldrb	r3, [r7, #14]
 8001310:	3301      	adds	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]

    	 while (SPI_RX[currentByte] != 0)
 8001314:	e037      	b.n	8001386 <HAL_SPI_TxRxHalfCpltCallback+0x96>
    	 {
			 if (SPI_RX[currentByte] == 0x90)
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 800131a:	5cd3      	ldrb	r3, [r2, r3]
 800131c:	2b90      	cmp	r3, #144	; 0x90
 800131e:	d10c      	bne.n	800133a <HAL_SPI_TxRxHalfCpltCallback+0x4a>
			 {
				 sendNoteOn(SPI_RX[currentByte+1], SPI_RX[currentByte+2]);
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	3301      	adds	r3, #1
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 8001326:	5cd2      	ldrb	r2, [r2, r3]
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	3302      	adds	r3, #2
 800132c:	491a      	ldr	r1, [pc, #104]	; (8001398 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 800132e:	5ccb      	ldrb	r3, [r1, r3]
 8001330:	4619      	mov	r1, r3
 8001332:	4610      	mov	r0, r2
 8001334:	f000 f834 	bl	80013a0 <sendNoteOn>
 8001338:	e022      	b.n	8001380 <HAL_SPI_TxRxHalfCpltCallback+0x90>
			 }
			 else if (SPI_RX[currentByte] == 0xb0)
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	4a16      	ldr	r2, [pc, #88]	; (8001398 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 800133e:	5cd3      	ldrb	r3, [r2, r3]
 8001340:	2bb0      	cmp	r3, #176	; 0xb0
 8001342:	d10c      	bne.n	800135e <HAL_SPI_TxRxHalfCpltCallback+0x6e>
			 {
				 sendCtrl(SPI_RX[currentByte+1], SPI_RX[currentByte+2]);
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	3301      	adds	r3, #1
 8001348:	4a13      	ldr	r2, [pc, #76]	; (8001398 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 800134a:	5cd2      	ldrb	r2, [r2, r3]
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	3302      	adds	r3, #2
 8001350:	4911      	ldr	r1, [pc, #68]	; (8001398 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 8001352:	5ccb      	ldrb	r3, [r1, r3]
 8001354:	4619      	mov	r1, r3
 8001356:	4610      	mov	r0, r2
 8001358:	f000 f834 	bl	80013c4 <sendCtrl>
 800135c:	e010      	b.n	8001380 <HAL_SPI_TxRxHalfCpltCallback+0x90>
			 }
			 else if (SPI_RX[currentByte] == 0xe0)
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 8001362:	5cd3      	ldrb	r3, [r2, r3]
 8001364:	2be0      	cmp	r3, #224	; 0xe0
 8001366:	d10b      	bne.n	8001380 <HAL_SPI_TxRxHalfCpltCallback+0x90>
			 {
				 sendPitchBend(SPI_RX[currentByte+1], SPI_RX[currentByte+2]);
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	3301      	adds	r3, #1
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	4618      	mov	r0, r3
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	3302      	adds	r3, #2
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 8001378:	5cd3      	ldrb	r3, [r2, r3]
 800137a:	4619      	mov	r1, r3
 800137c:	f000 f834 	bl	80013e8 <sendPitchBend>
			 }
			 currentByte = currentByte+3;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	3303      	adds	r3, #3
 8001384:	73fb      	strb	r3, [r7, #15]
    	 while (SPI_RX[currentByte] != 0)
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	4a03      	ldr	r2, [pc, #12]	; (8001398 <HAL_SPI_TxRxHalfCpltCallback+0xa8>)
 800138a:	5cd3      	ldrb	r3, [r2, r3]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1c2      	bne.n	8001316 <HAL_SPI_TxRxHalfCpltCallback+0x26>
    	 }
    }
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	30000420 	.word	0x30000420
 800139c:	58020800 	.word	0x58020800

080013a0 <sendNoteOn>:


void sendNoteOn(uint8_t note, uint8_t velocity)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	460a      	mov	r2, r1
 80013aa:	71fb      	strb	r3, [r7, #7]
 80013ac:	4613      	mov	r3, r2
 80013ae:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	4803      	ldr	r0, [pc, #12]	; (80013c0 <sendNoteOn+0x20>)
 80013b4:	f003 ff91 	bl	80052da <HAL_GPIO_TogglePin>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	58020800 	.word	0x58020800

080013c4 <sendCtrl>:
void sendCtrl(uint8_t value, uint8_t ctrl)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	460a      	mov	r2, r1
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	4613      	mov	r3, r2
 80013d2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	4803      	ldr	r0, [pc, #12]	; (80013e4 <sendCtrl+0x20>)
 80013d8:	f003 ff7f 	bl	80052da <HAL_GPIO_TogglePin>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	58020800 	.word	0x58020800

080013e8 <sendPitchBend>:
void sendPitchBend(uint8_t value, uint8_t ctrl)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	460a      	mov	r2, r1
 80013f2:	71fb      	strb	r3, [r7, #7]
 80013f4:	4613      	mov	r3, r2
 80013f6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	4803      	ldr	r0, [pc, #12]	; (8001408 <sendPitchBend+0x20>)
 80013fc:	f003 ff6d 	bl	80052da <HAL_GPIO_TogglePin>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	58020800 	.word	0x58020800

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	e7fe      	b.n	8001414 <Error_Handler+0x8>
	...

08001418 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_QUADSPI_Init+0x50>)
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <MX_QUADSPI_Init+0x54>)
 8001420:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_QUADSPI_Init+0x50>)
 8001424:	2201      	movs	r2, #1
 8001426:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_QUADSPI_Init+0x50>)
 800142a:	2201      	movs	r2, #1
 800142c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_QUADSPI_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 19;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_QUADSPI_Init+0x50>)
 8001436:	2213      	movs	r2, #19
 8001438:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <MX_QUADSPI_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_QUADSPI_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <MX_QUADSPI_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_QUADSPI_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_QUADSPI_Init+0x50>)
 8001454:	f004 fbb0 	bl	8005bb8 <HAL_QSPI_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800145e:	f7ff ffd5 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200014f8 	.word	0x200014f8
 800146c:	52005000 	.word	0x52005000

08001470 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0ba      	sub	sp, #232	; 0xe8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	22bc      	movs	r2, #188	; 0xbc
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f00c fc99 	bl	800ddc8 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a42      	ldr	r2, [pc, #264]	; (80015a4 <HAL_QSPI_MspInit+0x134>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d17c      	bne.n	800159a <HAL_QSPI_MspInit+0x12a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80014a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL;
 80014a6:	2310      	movs	r3, #16
 80014a8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014aa:	f107 0318 	add.w	r3, r7, #24
 80014ae:	4618      	mov	r0, r3
 80014b0:	f005 fbca 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_QSPI_MspInit+0x4e>
    {
      Error_Handler();
 80014ba:	f7ff ffa7 	bl	800140c <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014be:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <HAL_QSPI_MspInit+0x138>)
 80014c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014c4:	4a38      	ldr	r2, [pc, #224]	; (80015a8 <HAL_QSPI_MspInit+0x138>)
 80014c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ca:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80014ce:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <HAL_QSPI_MspInit+0x138>)
 80014d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014dc:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <HAL_QSPI_MspInit+0x138>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e2:	4a31      	ldr	r2, [pc, #196]	; (80015a8 <HAL_QSPI_MspInit+0x138>)
 80014e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ec:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <HAL_QSPI_MspInit+0x138>)
 80014ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <HAL_QSPI_MspInit+0x138>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	4a29      	ldr	r2, [pc, #164]	; (80015a8 <HAL_QSPI_MspInit+0x138>)
 8001502:	f043 0320 	orr.w	r3, r3, #32
 8001506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150a:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_QSPI_MspInit+0x138>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001510:	f003 0320 	and.w	r3, r3, #32
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001518:	2340      	movs	r3, #64	; 0x40
 800151a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001530:	230a      	movs	r3, #10
 8001532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001536:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800153a:	4619      	mov	r1, r3
 800153c:	481b      	ldr	r0, [pc, #108]	; (80015ac <HAL_QSPI_MspInit+0x13c>)
 800153e:	f003 fceb 	bl	8004f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 8001542:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800155c:	2309      	movs	r3, #9
 800155e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001562:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001566:	4619      	mov	r1, r3
 8001568:	4811      	ldr	r0, [pc, #68]	; (80015b0 <HAL_QSPI_MspInit+0x140>)
 800156a:	f003 fcd5 	bl	8004f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800156e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001588:	230a      	movs	r3, #10
 800158a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800158e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001592:	4619      	mov	r1, r3
 8001594:	4806      	ldr	r0, [pc, #24]	; (80015b0 <HAL_QSPI_MspInit+0x140>)
 8001596:	f003 fcbf 	bl	8004f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800159a:	bf00      	nop
 800159c:	37e8      	adds	r7, #232	; 0xe8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	52005000 	.word	0x52005000
 80015a8:	58024400 	.word	0x58024400
 80015ac:	58021800 	.word	0x58021800
 80015b0:	58021400 	.word	0x58021400

080015b4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <MX_RNG_Init+0x24>)
 80015ba:	4a08      	ldr	r2, [pc, #32]	; (80015dc <MX_RNG_Init+0x28>)
 80015bc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_RNG_Init+0x24>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <MX_RNG_Init+0x24>)
 80015c6:	f007 fccb 	bl	8008f60 <HAL_RNG_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80015d0:	f7ff ff1c 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20001544 	.word	0x20001544
 80015dc:	48021800 	.word	0x48021800

080015e0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0b2      	sub	sp, #200	; 0xc8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	22bc      	movs	r2, #188	; 0xbc
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00c fbe9 	bl	800ddc8 <memset>
  if(rngHandle->Instance==RNG)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <HAL_RNG_MspInit+0x68>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d11e      	bne.n	800163e <HAL_RNG_MspInit+0x5e>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001604:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4618      	mov	r0, r3
 8001612:	f005 fb19 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800161c:	f7ff fef6 	bl	800140c <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_RNG_MspInit+0x6c>)
 8001622:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001626:	4a09      	ldr	r2, [pc, #36]	; (800164c <HAL_RNG_MspInit+0x6c>)
 8001628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800162c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_RNG_MspInit+0x6c>)
 8001632:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800163e:	bf00      	nop
 8001640:	37c8      	adds	r7, #200	; 0xc8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	48021800 	.word	0x48021800
 800164c:	58024400 	.word	0x58024400

08001650 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <MX_SAI1_Init+0xa8>)
 8001656:	4a29      	ldr	r2, [pc, #164]	; (80016fc <MX_SAI1_Init+0xac>)
 8001658:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 800165a:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <MX_SAI1_Init+0xa8>)
 800165c:	2201      	movs	r2, #1
 800165e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <MX_SAI1_Init+0xa8>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <MX_SAI1_Init+0xa8>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <MX_SAI1_Init+0xa8>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <MX_SAI1_Init+0xa8>)
 8001674:	2200      	movs	r2, #0
 8001676:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <MX_SAI1_Init+0xa8>)
 800167a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800167e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <MX_SAI1_Init+0xa8>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_SAI1_Init+0xa8>)
 8001688:	2200      	movs	r2, #0
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_SAI1_Init+0xa8>)
 800168e:	2200      	movs	r2, #0
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001692:	2302      	movs	r3, #2
 8001694:	2202      	movs	r2, #2
 8001696:	2101      	movs	r1, #1
 8001698:	4817      	ldr	r0, [pc, #92]	; (80016f8 <MX_SAI1_Init+0xa8>)
 800169a:	f007 fd19 	bl	80090d0 <HAL_SAI_InitProtocol>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_SAI1_Init+0x58>
  {
    Error_Handler();
 80016a4:	f7ff feb2 	bl	800140c <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_SAI1_Init+0xb0>)
 80016aa:	4a16      	ldr	r2, [pc, #88]	; (8001704 <MX_SAI1_Init+0xb4>)
 80016ac:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_SAI1_Init+0xb0>)
 80016b0:	2202      	movs	r2, #2
 80016b2:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_SAI1_Init+0xb0>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_SAI1_Init+0xb0>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_SAI1_Init+0xb0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_SAI1_Init+0xb0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_SAI1_Init+0xb0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_SAI1_Init+0xb0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_SAI1_Init+0xb0>)
 80016da:	2200      	movs	r2, #0
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80016de:	2302      	movs	r3, #2
 80016e0:	2202      	movs	r2, #2
 80016e2:	2101      	movs	r1, #1
 80016e4:	4806      	ldr	r0, [pc, #24]	; (8001700 <MX_SAI1_Init+0xb0>)
 80016e6:	f007 fcf3 	bl	80090d0 <HAL_SAI_InitProtocol>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 80016f0:	f7ff fe8c 	bl	800140c <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20001558 	.word	0x20001558
 80016fc:	40015804 	.word	0x40015804
 8001700:	200015f0 	.word	0x200015f0
 8001704:	40015824 	.word	0x40015824

08001708 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08e      	sub	sp, #56	; 0x38
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a71      	ldr	r2, [pc, #452]	; (80018dc <HAL_SAI_MspInit+0x1d4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d176      	bne.n	8001808 <HAL_SAI_MspInit+0x100>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800171a:	4b71      	ldr	r3, [pc, #452]	; (80018e0 <HAL_SAI_MspInit+0x1d8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10e      	bne.n	8001740 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001722:	4b70      	ldr	r3, [pc, #448]	; (80018e4 <HAL_SAI_MspInit+0x1dc>)
 8001724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001728:	4a6e      	ldr	r2, [pc, #440]	; (80018e4 <HAL_SAI_MspInit+0x1dc>)
 800172a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800172e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001732:	4b6c      	ldr	r3, [pc, #432]	; (80018e4 <HAL_SAI_MspInit+0x1dc>)
 8001734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001740:	4b67      	ldr	r3, [pc, #412]	; (80018e0 <HAL_SAI_MspInit+0x1d8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	4a66      	ldr	r2, [pc, #408]	; (80018e0 <HAL_SAI_MspInit+0x1d8>)
 8001748:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800174a:	2374      	movs	r3, #116	; 0x74
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	2302      	movs	r3, #2
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800175a:	2306      	movs	r3, #6
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	4860      	ldr	r0, [pc, #384]	; (80018e8 <HAL_SAI_MspInit+0x1e0>)
 8001766:	f003 fbd7 	bl	8004f18 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 800176a:	4b60      	ldr	r3, [pc, #384]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 800176c:	4a60      	ldr	r2, [pc, #384]	; (80018f0 <HAL_SAI_MspInit+0x1e8>)
 800176e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001770:	4b5e      	ldr	r3, [pc, #376]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 8001772:	2257      	movs	r2, #87	; 0x57
 8001774:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001776:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800177c:	4b5b      	ldr	r3, [pc, #364]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001782:	4b5a      	ldr	r3, [pc, #360]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 8001784:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001788:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800178a:	4b58      	ldr	r3, [pc, #352]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 800178c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001790:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001792:	4b56      	ldr	r3, [pc, #344]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 8001794:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001798:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800179a:	4b54      	ldr	r3, [pc, #336]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 800179c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a0:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 80017a2:	4b52      	ldr	r3, [pc, #328]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 80017a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017a8:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017aa:	4b50      	ldr	r3, [pc, #320]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80017b0:	484e      	ldr	r0, [pc, #312]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 80017b2:	f000 ff6f 	bl	8002694 <HAL_DMA_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 80017bc:	f7ff fe26 	bl	800140c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80017c0:	2306      	movs	r3, #6
 80017c2:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 80017c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c8:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 80017ce:	2301      	movs	r3, #1
 80017d0:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 80017d2:	2301      	movs	r3, #1
 80017d4:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4843      	ldr	r0, [pc, #268]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 80017de:	f003 fa83 	bl	8004ce8 <HAL_DMAEx_ConfigMuxSync>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_SAI_MspInit+0xe4>
    {
      Error_Handler();
 80017e8:	f7ff fe10 	bl	800140c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a3f      	ldr	r2, [pc, #252]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 80017f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80017f4:	4a3d      	ldr	r2, [pc, #244]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a3b      	ldr	r2, [pc, #236]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 80017fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001802:	4a3a      	ldr	r2, [pc, #232]	; (80018ec <HAL_SAI_MspInit+0x1e4>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a39      	ldr	r2, [pc, #228]	; (80018f4 <HAL_SAI_MspInit+0x1ec>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d160      	bne.n	80018d4 <HAL_SAI_MspInit+0x1cc>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001812:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <HAL_SAI_MspInit+0x1d8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10e      	bne.n	8001838 <HAL_SAI_MspInit+0x130>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800181a:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <HAL_SAI_MspInit+0x1dc>)
 800181c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001820:	4a30      	ldr	r2, [pc, #192]	; (80018e4 <HAL_SAI_MspInit+0x1dc>)
 8001822:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001826:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800182a:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <HAL_SAI_MspInit+0x1dc>)
 800182c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <HAL_SAI_MspInit+0x1d8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	4a28      	ldr	r2, [pc, #160]	; (80018e0 <HAL_SAI_MspInit+0x1d8>)
 8001840:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001842:	2308      	movs	r3, #8
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184e:	2302      	movs	r3, #2
 8001850:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001852:	2306      	movs	r3, #6
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185a:	4619      	mov	r1, r3
 800185c:	4822      	ldr	r0, [pc, #136]	; (80018e8 <HAL_SAI_MspInit+0x1e0>)
 800185e:	f003 fb5b 	bl	8004f18 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream2;
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 8001864:	4a25      	ldr	r2, [pc, #148]	; (80018fc <HAL_SAI_MspInit+0x1f4>)
 8001866:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8001868:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 800186a:	2258      	movs	r2, #88	; 0x58
 800186c:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 8001870:	2240      	movs	r2, #64	; 0x40
 8001872:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 800187c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001880:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 8001884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001888:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 800188c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001890:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 8001894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001898:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 800189c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018a0:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80018a8:	4813      	ldr	r0, [pc, #76]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 80018aa:	f000 fef3 	bl	8002694 <HAL_DMA_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_SAI_MspInit+0x1b0>
    {
      Error_Handler();
 80018b4:	f7ff fdaa 	bl	800140c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 80018bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 80018ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_SAI_MspInit+0x1f0>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80018d4:	bf00      	nop
 80018d6:	3738      	adds	r7, #56	; 0x38
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40015804 	.word	0x40015804
 80018e0:	20001778 	.word	0x20001778
 80018e4:	58024400 	.word	0x58024400
 80018e8:	58021000 	.word	0x58021000
 80018ec:	20001688 	.word	0x20001688
 80018f0:	40020028 	.word	0x40020028
 80018f4:	40015824 	.word	0x40015824
 80018f8:	20001700 	.word	0x20001700
 80018fc:	40020040 	.word	0x40020040

08001900 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <MX_SDMMC1_SD_Init+0x34>)
 8001906:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <MX_SDMMC1_SD_Init+0x38>)
 8001908:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <MX_SDMMC1_SD_Init+0x34>)
 800190c:	2200      	movs	r2, #0
 800190e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <MX_SDMMC1_SD_Init+0x34>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <MX_SDMMC1_SD_Init+0x34>)
 8001918:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <MX_SDMMC1_SD_Init+0x34>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 168;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <MX_SDMMC1_SD_Init+0x34>)
 8001926:	22a8      	movs	r2, #168	; 0xa8
 8001928:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	2000177c 	.word	0x2000177c
 8001938:	52007000 	.word	0x52007000

0800193c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a2e      	ldr	r2, [pc, #184]	; (8001a14 <HAL_SD_MspInit+0xd8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d155      	bne.n	8001a0a <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800195e:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <HAL_SD_MspInit+0xdc>)
 8001960:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001964:	4a2c      	ldr	r2, [pc, #176]	; (8001a18 <HAL_SD_MspInit+0xdc>)
 8001966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800196e:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <HAL_SD_MspInit+0xdc>)
 8001970:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197c:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_SD_MspInit+0xdc>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001982:	4a25      	ldr	r2, [pc, #148]	; (8001a18 <HAL_SD_MspInit+0xdc>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800198c:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_SD_MspInit+0xdc>)
 800198e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_SD_MspInit+0xdc>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <HAL_SD_MspInit+0xdc>)
 80019a2:	f043 0308 	orr.w	r3, r3, #8
 80019a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_SD_MspInit+0xdc>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80019b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80019bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80019ca:	230c      	movs	r3, #12
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4619      	mov	r1, r3
 80019d4:	4811      	ldr	r0, [pc, #68]	; (8001a1c <HAL_SD_MspInit+0xe0>)
 80019d6:	f003 fa9f 	bl	8004f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019da:	2304      	movs	r3, #4
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80019ea:	230c      	movs	r3, #12
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	480a      	ldr	r0, [pc, #40]	; (8001a20 <HAL_SD_MspInit+0xe4>)
 80019f6:	f003 fa8f 	bl	8004f18 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	2031      	movs	r0, #49	; 0x31
 8001a00:	f000 fc45 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001a04:	2031      	movs	r0, #49	; 0x31
 8001a06:	f000 fc5c 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	52007000 	.word	0x52007000
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	58020800 	.word	0x58020800
 8001a20:	58020c00 	.word	0x58020c00

08001a24 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a2a:	4a25      	ldr	r2, [pc, #148]	; (8001ac0 <MX_SPI1_Init+0x9c>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001a2e:	4b23      	ldr	r3, [pc, #140]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <MX_SPI1_Init+0x98>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_SPI1_Init+0x98>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_SPI1_Init+0x98>)
 8001aa8:	f009 fffe 	bl	800baa8 <HAL_SPI_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_SPI1_Init+0x92>
  {
    Error_Handler();
 8001ab2:	f7ff fcab 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200017f8 	.word	0x200017f8
 8001ac0:	40013000 	.word	0x40013000

08001ac4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b0ba      	sub	sp, #232	; 0xe8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	22bc      	movs	r2, #188	; 0xbc
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f00c f96f 	bl	800ddc8 <memset>
  if(spiHandle->Instance==SPI1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a73      	ldr	r2, [pc, #460]	; (8001cbc <HAL_SPI_MspInit+0x1f8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	f040 80df 	bne.w	8001cb4 <HAL_SPI_MspInit+0x1f0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b00:	f107 0318 	add.w	r3, r7, #24
 8001b04:	4618      	mov	r0, r3
 8001b06:	f005 f89f 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001b10:	f7ff fc7c 	bl	800140c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b14:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <HAL_SPI_MspInit+0x1fc>)
 8001b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b1a:	4a69      	ldr	r2, [pc, #420]	; (8001cc0 <HAL_SPI_MspInit+0x1fc>)
 8001b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b24:	4b66      	ldr	r3, [pc, #408]	; (8001cc0 <HAL_SPI_MspInit+0x1fc>)
 8001b26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b32:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <HAL_SPI_MspInit+0x1fc>)
 8001b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b38:	4a61      	ldr	r2, [pc, #388]	; (8001cc0 <HAL_SPI_MspInit+0x1fc>)
 8001b3a:	f043 0302 	orr.w	r3, r3, #2
 8001b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b42:	4b5f      	ldr	r3, [pc, #380]	; (8001cc0 <HAL_SPI_MspInit+0x1fc>)
 8001b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b50:	4b5b      	ldr	r3, [pc, #364]	; (8001cc0 <HAL_SPI_MspInit+0x1fc>)
 8001b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b56:	4a5a      	ldr	r2, [pc, #360]	; (8001cc0 <HAL_SPI_MspInit+0x1fc>)
 8001b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b60:	4b57      	ldr	r3, [pc, #348]	; (8001cc0 <HAL_SPI_MspInit+0x1fc>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    PB5     ------> SPI1_MOSI
    PB4 (NJTRST)     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    PG10     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001b6e:	2330      	movs	r3, #48	; 0x30
 8001b70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b80:	2302      	movs	r3, #2
 8001b82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b86:	2305      	movs	r3, #5
 8001b88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b90:	4619      	mov	r1, r3
 8001b92:	484c      	ldr	r0, [pc, #304]	; (8001cc4 <HAL_SPI_MspInit+0x200>)
 8001b94:	f003 f9c0 	bl	8004f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001b98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bac:	2302      	movs	r3, #2
 8001bae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4842      	ldr	r0, [pc, #264]	; (8001cc8 <HAL_SPI_MspInit+0x204>)
 8001bc0:	f003 f9aa 	bl	8004f18 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream6;
 8001bc4:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001bc6:	4a42      	ldr	r2, [pc, #264]	; (8001cd0 <HAL_SPI_MspInit+0x20c>)
 8001bc8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001bca:	4b40      	ldr	r3, [pc, #256]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001bcc:	2225      	movs	r2, #37	; 0x25
 8001bce:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd0:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bdc:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001be2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be4:	4b39      	ldr	r3, [pc, #228]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bea:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001bf0:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001bf8:	4b34      	ldr	r3, [pc, #208]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001bfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bfe:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001c02:	2204      	movs	r2, #4
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001c06:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001c0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001c12:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001c18:	482c      	ldr	r0, [pc, #176]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001c1a:	f000 fd3b 	bl	8002694 <HAL_DMA_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8001c24:	f7ff fbf2 	bl	800140c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a28      	ldr	r2, [pc, #160]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001c2c:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c2e:	4a27      	ldr	r2, [pc, #156]	; (8001ccc <HAL_SPI_MspInit+0x208>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream7;
 8001c34:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c36:	4a28      	ldr	r2, [pc, #160]	; (8001cd8 <HAL_SPI_MspInit+0x214>)
 8001c38:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c3c:	2226      	movs	r2, #38	; 0x26
 8001c3e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c42:	2240      	movs	r2, #64	; 0x40
 8001c44:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c4c:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c52:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c54:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001c60:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c66:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001c68:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c6e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c70:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c72:	2204      	movs	r2, #4
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c88:	4812      	ldr	r0, [pc, #72]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c8a:	f000 fd03 	bl	8002694 <HAL_DMA_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_SPI_MspInit+0x1d4>
    {
      Error_Handler();
 8001c94:	f7ff fbba 	bl	800140c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001c9c:	679a      	str	r2, [r3, #120]	; 0x78
 8001c9e:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <HAL_SPI_MspInit+0x210>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2023      	movs	r0, #35	; 0x23
 8001caa:	f000 faf0 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001cae:	2023      	movs	r0, #35	; 0x23
 8001cb0:	f000 fb07 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	37e8      	adds	r7, #232	; 0xe8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40013000 	.word	0x40013000
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	58020400 	.word	0x58020400
 8001cc8:	58021800 	.word	0x58021800
 8001ccc:	20001880 	.word	0x20001880
 8001cd0:	400200a0 	.word	0x400200a0
 8001cd4:	200018f8 	.word	0x200018f8
 8001cd8:	400200b8 	.word	0x400200b8

08001cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_MspInit+0x30>)
 8001ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ce8:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <HAL_MspInit+0x30>)
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_MspInit+0x30>)
 8001cf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	58024400 	.word	0x58024400

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <NMI_Handler+0x4>

08001d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <HardFault_Handler+0x4>

08001d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <MemManage_Handler+0x4>

08001d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <BusFault_Handler+0x4>

08001d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <UsageFault_Handler+0x4>

08001d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5c:	f000 f96c 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <DMA1_Stream1_IRQHandler+0x10>)
 8001d6a:	f001 fc9f 	bl	80036ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20001688 	.word	0x20001688

08001d78 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <DMA1_Stream2_IRQHandler+0x10>)
 8001d7e:	f001 fc95 	bl	80036ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20001700 	.word	0x20001700

08001d8c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <DMA1_Stream6_IRQHandler+0x10>)
 8001d92:	f001 fc8b 	bl	80036ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20001880 	.word	0x20001880

08001da0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <SPI1_IRQHandler+0x10>)
 8001da6:	f00a f95b 	bl	800c060 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200017f8 	.word	0x200017f8

08001db4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <DMA1_Stream7_IRQHandler+0x10>)
 8001dba:	f001 fc77 	bl	80036ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200018f8 	.word	0x200018f8

08001dc8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <SDMMC1_IRQHandler+0x10>)
 8001dce:	f008 fc3b 	bl	800a648 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	2000177c 	.word	0x2000177c

08001ddc <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <DMAMUX1_OVR_IRQHandler+0x10>)
 8001de2:	f003 f847 	bl	8004e74 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20001688 	.word	0x20001688

08001df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001df4:	f000 f826 	bl	8001e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df8:	480c      	ldr	r0, [pc, #48]	; (8001e2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dfa:	490d      	ldr	r1, [pc, #52]	; (8001e30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dfc:	4a0d      	ldr	r2, [pc, #52]	; (8001e34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e00:	e002      	b.n	8001e08 <LoopCopyDataInit>

08001e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e06:	3304      	adds	r3, #4

08001e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e0c:	d3f9      	bcc.n	8001e02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e10:	4c0a      	ldr	r4, [pc, #40]	; (8001e3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e14:	e001      	b.n	8001e1a <LoopFillZerobss>

08001e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e18:	3204      	adds	r2, #4

08001e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e1c:	d3fb      	bcc.n	8001e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e1e:	f00b ffaf 	bl	800dd80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e22:	f7fe fffd 	bl	8000e20 <main>
  bx  lr
 8001e26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e30:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001e34:	0800fe24 	.word	0x0800fe24
  ldr r2, =_sbss
 8001e38:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e3c:	20001988 	.word	0x20001988

08001e40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e40:	e7fe      	b.n	8001e40 <ADC3_IRQHandler>
	...

08001e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e48:	4b37      	ldr	r3, [pc, #220]	; (8001f28 <SystemInit+0xe4>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	4a36      	ldr	r2, [pc, #216]	; (8001f28 <SystemInit+0xe4>)
 8001e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e58:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <SystemInit+0xe8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	2b06      	cmp	r3, #6
 8001e62:	d807      	bhi.n	8001e74 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e64:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <SystemInit+0xe8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f023 030f 	bic.w	r3, r3, #15
 8001e6c:	4a2f      	ldr	r2, [pc, #188]	; (8001f2c <SystemInit+0xe8>)
 8001e6e:	f043 0307 	orr.w	r3, r3, #7
 8001e72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e74:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <SystemInit+0xec>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a2d      	ldr	r2, [pc, #180]	; (8001f30 <SystemInit+0xec>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <SystemInit+0xec>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e86:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <SystemInit+0xec>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4929      	ldr	r1, [pc, #164]	; (8001f30 <SystemInit+0xec>)
 8001e8c:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <SystemInit+0xf0>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <SystemInit+0xe8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <SystemInit+0xe8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 030f 	bic.w	r3, r3, #15
 8001ea6:	4a21      	ldr	r2, [pc, #132]	; (8001f2c <SystemInit+0xe8>)
 8001ea8:	f043 0307 	orr.w	r3, r3, #7
 8001eac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <SystemInit+0xec>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <SystemInit+0xec>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <SystemInit+0xec>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <SystemInit+0xec>)
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <SystemInit+0xf4>)
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <SystemInit+0xec>)
 8001ec8:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <SystemInit+0xf8>)
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <SystemInit+0xec>)
 8001ece:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <SystemInit+0xfc>)
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <SystemInit+0xec>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <SystemInit+0xec>)
 8001eda:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <SystemInit+0xfc>)
 8001edc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <SystemInit+0xec>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <SystemInit+0xec>)
 8001ee6:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <SystemInit+0xfc>)
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <SystemInit+0xec>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <SystemInit+0xec>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <SystemInit+0xec>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <SystemInit+0xec>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <SystemInit+0x100>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <SystemInit+0x104>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f0e:	d202      	bcs.n	8001f16 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <SystemInit+0x108>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <SystemInit+0x10c>)
 8001f18:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00
 8001f2c:	52002000 	.word	0x52002000
 8001f30:	58024400 	.word	0x58024400
 8001f34:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f38:	02020200 	.word	0x02020200
 8001f3c:	01ff0000 	.word	0x01ff0000
 8001f40:	01010280 	.word	0x01010280
 8001f44:	5c001000 	.word	0x5c001000
 8001f48:	ffff0000 	.word	0xffff0000
 8001f4c:	51008108 	.word	0x51008108
 8001f50:	52004000 	.word	0x52004000

08001f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5a:	2003      	movs	r0, #3
 8001f5c:	f000 f98c 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f60:	f004 fcc8 	bl	80068f4 <HAL_RCC_GetSysClockFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_Init+0x68>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	4913      	ldr	r1, [pc, #76]	; (8001fc0 <HAL_Init+0x6c>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_Init+0x68>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <HAL_Init+0x6c>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <HAL_Init+0x70>)
 8001f96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f98:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <HAL_Init+0x74>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f000 f814 	bl	8001fcc <HAL_InitTick>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e002      	b.n	8001fb4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fae:	f7ff fe95 	bl	8001cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	58024400 	.word	0x58024400
 8001fc0:	0800ddf0 	.word	0x0800ddf0
 8001fc4:	20000004 	.word	0x20000004
 8001fc8:	20000000 	.word	0x20000000

08001fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fd4:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_InitTick+0x60>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e021      	b.n	8002024 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_InitTick+0x64>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_InitTick+0x60>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f971 	bl	80022de <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002014:	f000 f93b 	bl	800228e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_InitTick+0x68>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	2000000c 	.word	0x2000000c
 8002030:	20000000 	.word	0x20000000
 8002034:	20000008 	.word	0x20000008

08002038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x24>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_IncTick+0x24>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000000c 	.word	0x2000000c
 800205c:	20001970 	.word	0x20001970

08002060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_GetTick+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20001970 	.word	0x20001970

08002078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff ffee 	bl	8002060 <HAL_GetTick>
 8002084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002090:	d005      	beq.n	800209e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_Delay+0x44>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800209e:	bf00      	nop
 80020a0:	f7ff ffde 	bl	8002060 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8f7      	bhi.n	80020a0 <HAL_Delay+0x28>
  {
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000000c 	.word	0x2000000c

080020c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_GetREVID+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0c1b      	lsrs	r3, r3, #16
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	5c001000 	.word	0x5c001000

080020d8 <__NVIC_SetPriorityGrouping>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <__NVIC_SetPriorityGrouping+0x40>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <__NVIC_SetPriorityGrouping+0x44>)
 8002102:	4313      	orrs	r3, r2
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <__NVIC_SetPriorityGrouping+0x40>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00
 800211c:	05fa0000 	.word	0x05fa0000

08002120 <__NVIC_GetPriorityGrouping>:
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <__NVIC_GetPriorityGrouping+0x18>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0307 	and.w	r3, r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_EnableIRQ>:
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db0b      	blt.n	8002166 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4907      	ldr	r1, [pc, #28]	; (8002174 <__NVIC_EnableIRQ+0x38>)
 8002156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	; (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002244:	d301      	bcc.n	800224a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002246:	2301      	movs	r3, #1
 8002248:	e00f      	b.n	800226a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <SysTick_Config+0x40>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002252:	210f      	movs	r1, #15
 8002254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002258:	f7ff ff8e 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <SysTick_Config+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SysTick_Config+0x40>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ff29 	bl	80020d8 <__NVIC_SetPriorityGrouping>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800229c:	f7ff ff40 	bl	8002120 <__NVIC_GetPriorityGrouping>
 80022a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7ff ff90 	bl	80021cc <NVIC_EncodePriority>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff5f 	bl	8002178 <__NVIC_SetPriority>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff33 	bl	800213c <__NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffa4 	bl	8002234 <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80022fc:	f3bf 8f5f 	dmb	sy
}
 8002300:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_MPU_Disable+0x28>)
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	4a06      	ldr	r2, [pc, #24]	; (8002320 <HAL_MPU_Disable+0x28>)
 8002308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_MPU_Disable+0x2c>)
 8002310:	2200      	movs	r2, #0
 8002312:	605a      	str	r2, [r3, #4]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00
 8002324:	e000ed90 	.word	0xe000ed90

08002328 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002330:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <HAL_MPU_Enable+0x38>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_MPU_Enable+0x3c>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	4a09      	ldr	r2, [pc, #36]	; (8002364 <HAL_MPU_Enable+0x3c>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002346:	f3bf 8f4f 	dsb	sy
}
 800234a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800234c:	f3bf 8f6f 	isb	sy
}
 8002350:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed90 	.word	0xe000ed90
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	785a      	ldrb	r2, [r3, #1]
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_MPU_ConfigRegion+0x84>)
 8002376:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d029      	beq.n	80023d4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002380:	4a1a      	ldr	r2, [pc, #104]	; (80023ec <HAL_MPU_ConfigRegion+0x84>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7b1b      	ldrb	r3, [r3, #12]
 800238c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7adb      	ldrb	r3, [r3, #11]
 8002392:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002394:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	7a9b      	ldrb	r3, [r3, #10]
 800239a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800239c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7b5b      	ldrb	r3, [r3, #13]
 80023a2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80023a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	7b9b      	ldrb	r3, [r3, #14]
 80023aa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80023ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	7bdb      	ldrb	r3, [r3, #15]
 80023b2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80023b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7a5b      	ldrb	r3, [r3, #9]
 80023ba:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80023bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7a1b      	ldrb	r3, [r3, #8]
 80023c2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80023c4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	7812      	ldrb	r2, [r2, #0]
 80023ca:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023cc:	4a07      	ldr	r2, [pc, #28]	; (80023ec <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80023ce:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023d0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80023d2:	e005      	b.n	80023e0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_MPU_ConfigRegion+0x84>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <HAL_MPU_ConfigRegion+0x84>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed90 	.word	0xe000ed90

080023f0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e014      	b.n	800242c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	791b      	ldrb	r3, [r3, #4]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d105      	bne.n	8002418 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe f90a 	bl	800062c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	795b      	ldrb	r3, [r3, #5]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_DAC_ConfigChannel+0x18>
 8002448:	2302      	movs	r3, #2
 800244a:	e11d      	b.n	8002688 <HAL_DAC_ConfigChannel+0x254>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2202      	movs	r2, #2
 8002456:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b04      	cmp	r3, #4
 800245e:	d174      	bne.n	800254a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002460:	f7ff fdfe 	bl	8002060 <HAL_GetTick>
 8002464:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d134      	bne.n	80024d6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800246c:	e011      	b.n	8002492 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800246e:	f7ff fdf7 	bl	8002060 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d90a      	bls.n	8002492 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f043 0208 	orr.w	r2, r3, #8
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2203      	movs	r2, #3
 800248c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e0fa      	b.n	8002688 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002498:	4b7d      	ldr	r3, [pc, #500]	; (8002690 <HAL_DAC_ConfigChannel+0x25c>)
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e6      	bne.n	800246e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80024a0:	2001      	movs	r0, #1
 80024a2:	f7ff fde9 	bl	8002078 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	6992      	ldr	r2, [r2, #24]
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40
 80024b0:	e01e      	b.n	80024f0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80024b2:	f7ff fdd5 	bl	8002060 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d90a      	bls.n	80024d6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f043 0208 	orr.w	r2, r3, #8
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2203      	movs	r2, #3
 80024d0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e0d8      	b.n	8002688 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024dc:	2b00      	cmp	r3, #0
 80024de:	dbe8      	blt.n	80024b2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80024e0:	2001      	movs	r0, #1
 80024e2:	f7ff fdc9 	bl	8002078 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	6992      	ldr	r2, [r2, #24]
 80024ee:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	ea02 0103 	and.w	r1, r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	409a      	lsls	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	21ff      	movs	r1, #255	; 0xff
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	ea02 0103 	and.w	r1, r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	6a1a      	ldr	r2, [r3, #32]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	409a      	lsls	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d11d      	bne.n	800258e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	221f      	movs	r2, #31
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4013      	ands	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2207      	movs	r2, #7
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	4013      	ands	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d102      	bne.n	80025b8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	e00f      	b.n	80025d8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d102      	bne.n	80025c6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80025c0:	2301      	movs	r3, #1
 80025c2:	61fb      	str	r3, [r7, #28]
 80025c4:	e008      	b.n	80025d8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	e001      	b.n	80025d8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6819      	ldr	r1, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	400a      	ands	r2, r1
 800261e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4013      	ands	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6819      	ldr	r1, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	22c0      	movs	r2, #192	; 0xc0
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43da      	mvns	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	400a      	ands	r2, r1
 8002678:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3720      	adds	r7, #32
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20008000 	.word	0x20008000

08002694 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800269c:	f7ff fce0 	bl	8002060 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e316      	b.n	8002cda <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a66      	ldr	r2, [pc, #408]	; (800284c <HAL_DMA_Init+0x1b8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d04a      	beq.n	800274c <HAL_DMA_Init+0xb8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a65      	ldr	r2, [pc, #404]	; (8002850 <HAL_DMA_Init+0x1bc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d045      	beq.n	800274c <HAL_DMA_Init+0xb8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a63      	ldr	r2, [pc, #396]	; (8002854 <HAL_DMA_Init+0x1c0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d040      	beq.n	800274c <HAL_DMA_Init+0xb8>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a62      	ldr	r2, [pc, #392]	; (8002858 <HAL_DMA_Init+0x1c4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d03b      	beq.n	800274c <HAL_DMA_Init+0xb8>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a60      	ldr	r2, [pc, #384]	; (800285c <HAL_DMA_Init+0x1c8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d036      	beq.n	800274c <HAL_DMA_Init+0xb8>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a5f      	ldr	r2, [pc, #380]	; (8002860 <HAL_DMA_Init+0x1cc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d031      	beq.n	800274c <HAL_DMA_Init+0xb8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a5d      	ldr	r2, [pc, #372]	; (8002864 <HAL_DMA_Init+0x1d0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d02c      	beq.n	800274c <HAL_DMA_Init+0xb8>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a5c      	ldr	r2, [pc, #368]	; (8002868 <HAL_DMA_Init+0x1d4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d027      	beq.n	800274c <HAL_DMA_Init+0xb8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a5a      	ldr	r2, [pc, #360]	; (800286c <HAL_DMA_Init+0x1d8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d022      	beq.n	800274c <HAL_DMA_Init+0xb8>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a59      	ldr	r2, [pc, #356]	; (8002870 <HAL_DMA_Init+0x1dc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d01d      	beq.n	800274c <HAL_DMA_Init+0xb8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a57      	ldr	r2, [pc, #348]	; (8002874 <HAL_DMA_Init+0x1e0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d018      	beq.n	800274c <HAL_DMA_Init+0xb8>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a56      	ldr	r2, [pc, #344]	; (8002878 <HAL_DMA_Init+0x1e4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d013      	beq.n	800274c <HAL_DMA_Init+0xb8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a54      	ldr	r2, [pc, #336]	; (800287c <HAL_DMA_Init+0x1e8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00e      	beq.n	800274c <HAL_DMA_Init+0xb8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a53      	ldr	r2, [pc, #332]	; (8002880 <HAL_DMA_Init+0x1ec>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_DMA_Init+0xb8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a51      	ldr	r2, [pc, #324]	; (8002884 <HAL_DMA_Init+0x1f0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_DMA_Init+0xb8>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a50      	ldr	r2, [pc, #320]	; (8002888 <HAL_DMA_Init+0x1f4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d101      	bne.n	8002750 <HAL_DMA_Init+0xbc>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <HAL_DMA_Init+0xbe>
 8002750:	2300      	movs	r3, #0
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 813b 	beq.w	80029ce <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a37      	ldr	r2, [pc, #220]	; (800284c <HAL_DMA_Init+0x1b8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d04a      	beq.n	8002808 <HAL_DMA_Init+0x174>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a36      	ldr	r2, [pc, #216]	; (8002850 <HAL_DMA_Init+0x1bc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d045      	beq.n	8002808 <HAL_DMA_Init+0x174>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a34      	ldr	r2, [pc, #208]	; (8002854 <HAL_DMA_Init+0x1c0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d040      	beq.n	8002808 <HAL_DMA_Init+0x174>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a33      	ldr	r2, [pc, #204]	; (8002858 <HAL_DMA_Init+0x1c4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d03b      	beq.n	8002808 <HAL_DMA_Init+0x174>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a31      	ldr	r2, [pc, #196]	; (800285c <HAL_DMA_Init+0x1c8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d036      	beq.n	8002808 <HAL_DMA_Init+0x174>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a30      	ldr	r2, [pc, #192]	; (8002860 <HAL_DMA_Init+0x1cc>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d031      	beq.n	8002808 <HAL_DMA_Init+0x174>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2e      	ldr	r2, [pc, #184]	; (8002864 <HAL_DMA_Init+0x1d0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d02c      	beq.n	8002808 <HAL_DMA_Init+0x174>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a2d      	ldr	r2, [pc, #180]	; (8002868 <HAL_DMA_Init+0x1d4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d027      	beq.n	8002808 <HAL_DMA_Init+0x174>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a2b      	ldr	r2, [pc, #172]	; (800286c <HAL_DMA_Init+0x1d8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d022      	beq.n	8002808 <HAL_DMA_Init+0x174>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2a      	ldr	r2, [pc, #168]	; (8002870 <HAL_DMA_Init+0x1dc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d01d      	beq.n	8002808 <HAL_DMA_Init+0x174>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a28      	ldr	r2, [pc, #160]	; (8002874 <HAL_DMA_Init+0x1e0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d018      	beq.n	8002808 <HAL_DMA_Init+0x174>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a27      	ldr	r2, [pc, #156]	; (8002878 <HAL_DMA_Init+0x1e4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d013      	beq.n	8002808 <HAL_DMA_Init+0x174>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a25      	ldr	r2, [pc, #148]	; (800287c <HAL_DMA_Init+0x1e8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00e      	beq.n	8002808 <HAL_DMA_Init+0x174>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a24      	ldr	r2, [pc, #144]	; (8002880 <HAL_DMA_Init+0x1ec>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d009      	beq.n	8002808 <HAL_DMA_Init+0x174>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a22      	ldr	r2, [pc, #136]	; (8002884 <HAL_DMA_Init+0x1f0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d004      	beq.n	8002808 <HAL_DMA_Init+0x174>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a21      	ldr	r2, [pc, #132]	; (8002888 <HAL_DMA_Init+0x1f4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d108      	bne.n	800281a <HAL_DMA_Init+0x186>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e007      	b.n	800282a <HAL_DMA_Init+0x196>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800282a:	e02f      	b.n	800288c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800282c:	f7ff fc18 	bl	8002060 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b05      	cmp	r3, #5
 8002838:	d928      	bls.n	800288c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2220      	movs	r2, #32
 800283e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2203      	movs	r2, #3
 8002844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e246      	b.n	8002cda <HAL_DMA_Init+0x646>
 800284c:	40020010 	.word	0x40020010
 8002850:	40020028 	.word	0x40020028
 8002854:	40020040 	.word	0x40020040
 8002858:	40020058 	.word	0x40020058
 800285c:	40020070 	.word	0x40020070
 8002860:	40020088 	.word	0x40020088
 8002864:	400200a0 	.word	0x400200a0
 8002868:	400200b8 	.word	0x400200b8
 800286c:	40020410 	.word	0x40020410
 8002870:	40020428 	.word	0x40020428
 8002874:	40020440 	.word	0x40020440
 8002878:	40020458 	.word	0x40020458
 800287c:	40020470 	.word	0x40020470
 8002880:	40020488 	.word	0x40020488
 8002884:	400204a0 	.word	0x400204a0
 8002888:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1c8      	bne.n	800282c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4b83      	ldr	r3, [pc, #524]	; (8002ab4 <HAL_DMA_Init+0x420>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80028b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d107      	bne.n	80028f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	4313      	orrs	r3, r2
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80028f0:	4b71      	ldr	r3, [pc, #452]	; (8002ab8 <HAL_DMA_Init+0x424>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b71      	ldr	r3, [pc, #452]	; (8002abc <HAL_DMA_Init+0x428>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028fc:	d328      	bcc.n	8002950 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b28      	cmp	r3, #40	; 0x28
 8002904:	d903      	bls.n	800290e <HAL_DMA_Init+0x27a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b2e      	cmp	r3, #46	; 0x2e
 800290c:	d917      	bls.n	800293e <HAL_DMA_Init+0x2aa>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b3e      	cmp	r3, #62	; 0x3e
 8002914:	d903      	bls.n	800291e <HAL_DMA_Init+0x28a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b42      	cmp	r3, #66	; 0x42
 800291c:	d90f      	bls.n	800293e <HAL_DMA_Init+0x2aa>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b46      	cmp	r3, #70	; 0x46
 8002924:	d903      	bls.n	800292e <HAL_DMA_Init+0x29a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b48      	cmp	r3, #72	; 0x48
 800292c:	d907      	bls.n	800293e <HAL_DMA_Init+0x2aa>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b4e      	cmp	r3, #78	; 0x4e
 8002934:	d905      	bls.n	8002942 <HAL_DMA_Init+0x2ae>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b52      	cmp	r3, #82	; 0x52
 800293c:	d801      	bhi.n	8002942 <HAL_DMA_Init+0x2ae>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_DMA_Init+0x2b0>
 8002942:	2300      	movs	r3, #0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f023 0307 	bic.w	r3, r3, #7
 8002966:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	2b04      	cmp	r3, #4
 8002978:	d117      	bne.n	80029aa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00e      	beq.n	80029aa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f002 f821 	bl	80049d4 <DMA_CheckFifoParam>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2240      	movs	r2, #64	; 0x40
 800299c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e197      	b.n	8002cda <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f001 ff5c 	bl	8004870 <DMA_CalcBaseAndBitshift>
 80029b8:	4603      	mov	r3, r0
 80029ba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	223f      	movs	r2, #63	; 0x3f
 80029c6:	409a      	lsls	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	e0cd      	b.n	8002b6a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a3b      	ldr	r2, [pc, #236]	; (8002ac0 <HAL_DMA_Init+0x42c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d022      	beq.n	8002a1e <HAL_DMA_Init+0x38a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a39      	ldr	r2, [pc, #228]	; (8002ac4 <HAL_DMA_Init+0x430>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01d      	beq.n	8002a1e <HAL_DMA_Init+0x38a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a38      	ldr	r2, [pc, #224]	; (8002ac8 <HAL_DMA_Init+0x434>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d018      	beq.n	8002a1e <HAL_DMA_Init+0x38a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a36      	ldr	r2, [pc, #216]	; (8002acc <HAL_DMA_Init+0x438>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <HAL_DMA_Init+0x38a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a35      	ldr	r2, [pc, #212]	; (8002ad0 <HAL_DMA_Init+0x43c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00e      	beq.n	8002a1e <HAL_DMA_Init+0x38a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a33      	ldr	r2, [pc, #204]	; (8002ad4 <HAL_DMA_Init+0x440>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d009      	beq.n	8002a1e <HAL_DMA_Init+0x38a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a32      	ldr	r2, [pc, #200]	; (8002ad8 <HAL_DMA_Init+0x444>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d004      	beq.n	8002a1e <HAL_DMA_Init+0x38a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a30      	ldr	r2, [pc, #192]	; (8002adc <HAL_DMA_Init+0x448>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d101      	bne.n	8002a22 <HAL_DMA_Init+0x38e>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_DMA_Init+0x390>
 8002a22:	2300      	movs	r3, #0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 8097 	beq.w	8002b58 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a24      	ldr	r2, [pc, #144]	; (8002ac0 <HAL_DMA_Init+0x42c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d021      	beq.n	8002a78 <HAL_DMA_Init+0x3e4>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a22      	ldr	r2, [pc, #136]	; (8002ac4 <HAL_DMA_Init+0x430>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01c      	beq.n	8002a78 <HAL_DMA_Init+0x3e4>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a21      	ldr	r2, [pc, #132]	; (8002ac8 <HAL_DMA_Init+0x434>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d017      	beq.n	8002a78 <HAL_DMA_Init+0x3e4>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1f      	ldr	r2, [pc, #124]	; (8002acc <HAL_DMA_Init+0x438>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d012      	beq.n	8002a78 <HAL_DMA_Init+0x3e4>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1e      	ldr	r2, [pc, #120]	; (8002ad0 <HAL_DMA_Init+0x43c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00d      	beq.n	8002a78 <HAL_DMA_Init+0x3e4>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1c      	ldr	r2, [pc, #112]	; (8002ad4 <HAL_DMA_Init+0x440>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d008      	beq.n	8002a78 <HAL_DMA_Init+0x3e4>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <HAL_DMA_Init+0x444>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d003      	beq.n	8002a78 <HAL_DMA_Init+0x3e4>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a19      	ldr	r2, [pc, #100]	; (8002adc <HAL_DMA_Init+0x448>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_DMA_Init+0x44c>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d020      	beq.n	8002ae4 <HAL_DMA_Init+0x450>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b80      	cmp	r3, #128	; 0x80
 8002aa8:	d102      	bne.n	8002ab0 <HAL_DMA_Init+0x41c>
 8002aaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002aae:	e01a      	b.n	8002ae6 <HAL_DMA_Init+0x452>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e018      	b.n	8002ae6 <HAL_DMA_Init+0x452>
 8002ab4:	fe10803f 	.word	0xfe10803f
 8002ab8:	5c001000 	.word	0x5c001000
 8002abc:	ffff0000 	.word	0xffff0000
 8002ac0:	58025408 	.word	0x58025408
 8002ac4:	5802541c 	.word	0x5802541c
 8002ac8:	58025430 	.word	0x58025430
 8002acc:	58025444 	.word	0x58025444
 8002ad0:	58025458 	.word	0x58025458
 8002ad4:	5802546c 	.word	0x5802546c
 8002ad8:	58025480 	.word	0x58025480
 8002adc:	58025494 	.word	0x58025494
 8002ae0:	fffe000f 	.word	0xfffe000f
 8002ae4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68d2      	ldr	r2, [r2, #12]
 8002aea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002aec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002af4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002afc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b14:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b6e      	ldr	r3, [pc, #440]	; (8002ce4 <HAL_DMA_Init+0x650>)
 8002b2c:	4413      	add	r3, r2
 8002b2e:	4a6e      	ldr	r2, [pc, #440]	; (8002ce8 <HAL_DMA_Init+0x654>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	009a      	lsls	r2, r3, #2
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f001 fe97 	bl	8004870 <DMA_CalcBaseAndBitshift>
 8002b42:	4603      	mov	r3, r0
 8002b44:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2201      	movs	r2, #1
 8002b50:	409a      	lsls	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	e008      	b.n	8002b6a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2240      	movs	r2, #64	; 0x40
 8002b5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2203      	movs	r2, #3
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e0b7      	b.n	8002cda <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a5f      	ldr	r2, [pc, #380]	; (8002cec <HAL_DMA_Init+0x658>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d072      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a5d      	ldr	r2, [pc, #372]	; (8002cf0 <HAL_DMA_Init+0x65c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d06d      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a5c      	ldr	r2, [pc, #368]	; (8002cf4 <HAL_DMA_Init+0x660>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d068      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a5a      	ldr	r2, [pc, #360]	; (8002cf8 <HAL_DMA_Init+0x664>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d063      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a59      	ldr	r2, [pc, #356]	; (8002cfc <HAL_DMA_Init+0x668>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d05e      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a57      	ldr	r2, [pc, #348]	; (8002d00 <HAL_DMA_Init+0x66c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d059      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a56      	ldr	r2, [pc, #344]	; (8002d04 <HAL_DMA_Init+0x670>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d054      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a54      	ldr	r2, [pc, #336]	; (8002d08 <HAL_DMA_Init+0x674>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d04f      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a53      	ldr	r2, [pc, #332]	; (8002d0c <HAL_DMA_Init+0x678>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d04a      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a51      	ldr	r2, [pc, #324]	; (8002d10 <HAL_DMA_Init+0x67c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d045      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a50      	ldr	r2, [pc, #320]	; (8002d14 <HAL_DMA_Init+0x680>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d040      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a4e      	ldr	r2, [pc, #312]	; (8002d18 <HAL_DMA_Init+0x684>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d03b      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a4d      	ldr	r2, [pc, #308]	; (8002d1c <HAL_DMA_Init+0x688>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d036      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a4b      	ldr	r2, [pc, #300]	; (8002d20 <HAL_DMA_Init+0x68c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d031      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a4a      	ldr	r2, [pc, #296]	; (8002d24 <HAL_DMA_Init+0x690>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d02c      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a48      	ldr	r2, [pc, #288]	; (8002d28 <HAL_DMA_Init+0x694>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d027      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a47      	ldr	r2, [pc, #284]	; (8002d2c <HAL_DMA_Init+0x698>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d022      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a45      	ldr	r2, [pc, #276]	; (8002d30 <HAL_DMA_Init+0x69c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01d      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a44      	ldr	r2, [pc, #272]	; (8002d34 <HAL_DMA_Init+0x6a0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d018      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a42      	ldr	r2, [pc, #264]	; (8002d38 <HAL_DMA_Init+0x6a4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a41      	ldr	r2, [pc, #260]	; (8002d3c <HAL_DMA_Init+0x6a8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00e      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a3f      	ldr	r2, [pc, #252]	; (8002d40 <HAL_DMA_Init+0x6ac>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d009      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a3e      	ldr	r2, [pc, #248]	; (8002d44 <HAL_DMA_Init+0x6b0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_DMA_Init+0x5c6>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a3c      	ldr	r2, [pc, #240]	; (8002d48 <HAL_DMA_Init+0x6b4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_DMA_Init+0x5ca>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_DMA_Init+0x5cc>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d032      	beq.n	8002cca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f001 ff31 	bl	8004acc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b80      	cmp	r3, #128	; 0x80
 8002c70:	d102      	bne.n	8002c78 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d010      	beq.n	8002cb8 <HAL_DMA_Init+0x624>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d80c      	bhi.n	8002cb8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f001 ffae 	bl	8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	e008      	b.n	8002cca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	a7fdabf8 	.word	0xa7fdabf8
 8002ce8:	cccccccd 	.word	0xcccccccd
 8002cec:	40020010 	.word	0x40020010
 8002cf0:	40020028 	.word	0x40020028
 8002cf4:	40020040 	.word	0x40020040
 8002cf8:	40020058 	.word	0x40020058
 8002cfc:	40020070 	.word	0x40020070
 8002d00:	40020088 	.word	0x40020088
 8002d04:	400200a0 	.word	0x400200a0
 8002d08:	400200b8 	.word	0x400200b8
 8002d0c:	40020410 	.word	0x40020410
 8002d10:	40020428 	.word	0x40020428
 8002d14:	40020440 	.word	0x40020440
 8002d18:	40020458 	.word	0x40020458
 8002d1c:	40020470 	.word	0x40020470
 8002d20:	40020488 	.word	0x40020488
 8002d24:	400204a0 	.word	0x400204a0
 8002d28:	400204b8 	.word	0x400204b8
 8002d2c:	58025408 	.word	0x58025408
 8002d30:	5802541c 	.word	0x5802541c
 8002d34:	58025430 	.word	0x58025430
 8002d38:	58025444 	.word	0x58025444
 8002d3c:	58025458 	.word	0x58025458
 8002d40:	5802546c 	.word	0x5802546c
 8002d44:	58025480 	.word	0x58025480
 8002d48:	58025494 	.word	0x58025494

08002d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e226      	b.n	80031b6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_DMA_Start_IT+0x2a>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e21f      	b.n	80031b6 <HAL_DMA_Start_IT+0x46a>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	f040 820a 	bne.w	80031a0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a68      	ldr	r2, [pc, #416]	; (8002f40 <HAL_DMA_Start_IT+0x1f4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d04a      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a66      	ldr	r2, [pc, #408]	; (8002f44 <HAL_DMA_Start_IT+0x1f8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d045      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a65      	ldr	r2, [pc, #404]	; (8002f48 <HAL_DMA_Start_IT+0x1fc>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d040      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a63      	ldr	r2, [pc, #396]	; (8002f4c <HAL_DMA_Start_IT+0x200>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d03b      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a62      	ldr	r2, [pc, #392]	; (8002f50 <HAL_DMA_Start_IT+0x204>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d036      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a60      	ldr	r2, [pc, #384]	; (8002f54 <HAL_DMA_Start_IT+0x208>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d031      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a5f      	ldr	r2, [pc, #380]	; (8002f58 <HAL_DMA_Start_IT+0x20c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d02c      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a5d      	ldr	r2, [pc, #372]	; (8002f5c <HAL_DMA_Start_IT+0x210>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d027      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a5c      	ldr	r2, [pc, #368]	; (8002f60 <HAL_DMA_Start_IT+0x214>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d022      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a5a      	ldr	r2, [pc, #360]	; (8002f64 <HAL_DMA_Start_IT+0x218>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01d      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a59      	ldr	r2, [pc, #356]	; (8002f68 <HAL_DMA_Start_IT+0x21c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d018      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a57      	ldr	r2, [pc, #348]	; (8002f6c <HAL_DMA_Start_IT+0x220>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d013      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a56      	ldr	r2, [pc, #344]	; (8002f70 <HAL_DMA_Start_IT+0x224>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00e      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a54      	ldr	r2, [pc, #336]	; (8002f74 <HAL_DMA_Start_IT+0x228>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d009      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a53      	ldr	r2, [pc, #332]	; (8002f78 <HAL_DMA_Start_IT+0x22c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_DMA_Start_IT+0xee>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a51      	ldr	r2, [pc, #324]	; (8002f7c <HAL_DMA_Start_IT+0x230>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d108      	bne.n	8002e4c <HAL_DMA_Start_IT+0x100>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e007      	b.n	8002e5c <HAL_DMA_Start_IT+0x110>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f001 fb58 	bl	8004518 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a34      	ldr	r2, [pc, #208]	; (8002f40 <HAL_DMA_Start_IT+0x1f4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d04a      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a33      	ldr	r2, [pc, #204]	; (8002f44 <HAL_DMA_Start_IT+0x1f8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d045      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a31      	ldr	r2, [pc, #196]	; (8002f48 <HAL_DMA_Start_IT+0x1fc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d040      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a30      	ldr	r2, [pc, #192]	; (8002f4c <HAL_DMA_Start_IT+0x200>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d03b      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a2e      	ldr	r2, [pc, #184]	; (8002f50 <HAL_DMA_Start_IT+0x204>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d036      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a2d      	ldr	r2, [pc, #180]	; (8002f54 <HAL_DMA_Start_IT+0x208>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d031      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a2b      	ldr	r2, [pc, #172]	; (8002f58 <HAL_DMA_Start_IT+0x20c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d02c      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a2a      	ldr	r2, [pc, #168]	; (8002f5c <HAL_DMA_Start_IT+0x210>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d027      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a28      	ldr	r2, [pc, #160]	; (8002f60 <HAL_DMA_Start_IT+0x214>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d022      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a27      	ldr	r2, [pc, #156]	; (8002f64 <HAL_DMA_Start_IT+0x218>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d01d      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <HAL_DMA_Start_IT+0x21c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d018      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a24      	ldr	r2, [pc, #144]	; (8002f6c <HAL_DMA_Start_IT+0x220>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d013      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <HAL_DMA_Start_IT+0x224>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00e      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a21      	ldr	r2, [pc, #132]	; (8002f74 <HAL_DMA_Start_IT+0x228>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d009      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <HAL_DMA_Start_IT+0x22c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d004      	beq.n	8002f08 <HAL_DMA_Start_IT+0x1bc>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <HAL_DMA_Start_IT+0x230>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d101      	bne.n	8002f0c <HAL_DMA_Start_IT+0x1c0>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <HAL_DMA_Start_IT+0x1c2>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d036      	beq.n	8002f80 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 021e 	bic.w	r2, r3, #30
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0216 	orr.w	r2, r2, #22
 8002f24:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d03e      	beq.n	8002fac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0208 	orr.w	r2, r2, #8
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e035      	b.n	8002fac <HAL_DMA_Start_IT+0x260>
 8002f40:	40020010 	.word	0x40020010
 8002f44:	40020028 	.word	0x40020028
 8002f48:	40020040 	.word	0x40020040
 8002f4c:	40020058 	.word	0x40020058
 8002f50:	40020070 	.word	0x40020070
 8002f54:	40020088 	.word	0x40020088
 8002f58:	400200a0 	.word	0x400200a0
 8002f5c:	400200b8 	.word	0x400200b8
 8002f60:	40020410 	.word	0x40020410
 8002f64:	40020428 	.word	0x40020428
 8002f68:	40020440 	.word	0x40020440
 8002f6c:	40020458 	.word	0x40020458
 8002f70:	40020470 	.word	0x40020470
 8002f74:	40020488 	.word	0x40020488
 8002f78:	400204a0 	.word	0x400204a0
 8002f7c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 020e 	bic.w	r2, r3, #14
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 020a 	orr.w	r2, r2, #10
 8002f92:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d007      	beq.n	8002fac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0204 	orr.w	r2, r2, #4
 8002faa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a83      	ldr	r2, [pc, #524]	; (80031c0 <HAL_DMA_Start_IT+0x474>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d072      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a82      	ldr	r2, [pc, #520]	; (80031c4 <HAL_DMA_Start_IT+0x478>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d06d      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a80      	ldr	r2, [pc, #512]	; (80031c8 <HAL_DMA_Start_IT+0x47c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d068      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a7f      	ldr	r2, [pc, #508]	; (80031cc <HAL_DMA_Start_IT+0x480>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d063      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a7d      	ldr	r2, [pc, #500]	; (80031d0 <HAL_DMA_Start_IT+0x484>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d05e      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7c      	ldr	r2, [pc, #496]	; (80031d4 <HAL_DMA_Start_IT+0x488>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d059      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a7a      	ldr	r2, [pc, #488]	; (80031d8 <HAL_DMA_Start_IT+0x48c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d054      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a79      	ldr	r2, [pc, #484]	; (80031dc <HAL_DMA_Start_IT+0x490>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d04f      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a77      	ldr	r2, [pc, #476]	; (80031e0 <HAL_DMA_Start_IT+0x494>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d04a      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a76      	ldr	r2, [pc, #472]	; (80031e4 <HAL_DMA_Start_IT+0x498>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d045      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a74      	ldr	r2, [pc, #464]	; (80031e8 <HAL_DMA_Start_IT+0x49c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d040      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a73      	ldr	r2, [pc, #460]	; (80031ec <HAL_DMA_Start_IT+0x4a0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d03b      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a71      	ldr	r2, [pc, #452]	; (80031f0 <HAL_DMA_Start_IT+0x4a4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d036      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a70      	ldr	r2, [pc, #448]	; (80031f4 <HAL_DMA_Start_IT+0x4a8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d031      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a6e      	ldr	r2, [pc, #440]	; (80031f8 <HAL_DMA_Start_IT+0x4ac>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d02c      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a6d      	ldr	r2, [pc, #436]	; (80031fc <HAL_DMA_Start_IT+0x4b0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d027      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a6b      	ldr	r2, [pc, #428]	; (8003200 <HAL_DMA_Start_IT+0x4b4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d022      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a6a      	ldr	r2, [pc, #424]	; (8003204 <HAL_DMA_Start_IT+0x4b8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d01d      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a68      	ldr	r2, [pc, #416]	; (8003208 <HAL_DMA_Start_IT+0x4bc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d018      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a67      	ldr	r2, [pc, #412]	; (800320c <HAL_DMA_Start_IT+0x4c0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d013      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a65      	ldr	r2, [pc, #404]	; (8003210 <HAL_DMA_Start_IT+0x4c4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00e      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a64      	ldr	r2, [pc, #400]	; (8003214 <HAL_DMA_Start_IT+0x4c8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d009      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a62      	ldr	r2, [pc, #392]	; (8003218 <HAL_DMA_Start_IT+0x4cc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_DMA_Start_IT+0x350>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a61      	ldr	r2, [pc, #388]	; (800321c <HAL_DMA_Start_IT+0x4d0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d101      	bne.n	80030a0 <HAL_DMA_Start_IT+0x354>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <HAL_DMA_Start_IT+0x356>
 80030a0:	2300      	movs	r3, #0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01a      	beq.n	80030dc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a37      	ldr	r2, [pc, #220]	; (80031c0 <HAL_DMA_Start_IT+0x474>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d04a      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a36      	ldr	r2, [pc, #216]	; (80031c4 <HAL_DMA_Start_IT+0x478>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d045      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a34      	ldr	r2, [pc, #208]	; (80031c8 <HAL_DMA_Start_IT+0x47c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d040      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a33      	ldr	r2, [pc, #204]	; (80031cc <HAL_DMA_Start_IT+0x480>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d03b      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a31      	ldr	r2, [pc, #196]	; (80031d0 <HAL_DMA_Start_IT+0x484>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d036      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a30      	ldr	r2, [pc, #192]	; (80031d4 <HAL_DMA_Start_IT+0x488>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d031      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a2e      	ldr	r2, [pc, #184]	; (80031d8 <HAL_DMA_Start_IT+0x48c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d02c      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2d      	ldr	r2, [pc, #180]	; (80031dc <HAL_DMA_Start_IT+0x490>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d027      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a2b      	ldr	r2, [pc, #172]	; (80031e0 <HAL_DMA_Start_IT+0x494>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d022      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a2a      	ldr	r2, [pc, #168]	; (80031e4 <HAL_DMA_Start_IT+0x498>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d01d      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a28      	ldr	r2, [pc, #160]	; (80031e8 <HAL_DMA_Start_IT+0x49c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d018      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a27      	ldr	r2, [pc, #156]	; (80031ec <HAL_DMA_Start_IT+0x4a0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a25      	ldr	r2, [pc, #148]	; (80031f0 <HAL_DMA_Start_IT+0x4a4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00e      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <HAL_DMA_Start_IT+0x4a8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d009      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a22      	ldr	r2, [pc, #136]	; (80031f8 <HAL_DMA_Start_IT+0x4ac>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d004      	beq.n	800317c <HAL_DMA_Start_IT+0x430>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a21      	ldr	r2, [pc, #132]	; (80031fc <HAL_DMA_Start_IT+0x4b0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d108      	bne.n	800318e <HAL_DMA_Start_IT+0x442>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e012      	b.n	80031b4 <HAL_DMA_Start_IT+0x468>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0201 	orr.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	e009      	b.n	80031b4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40020010 	.word	0x40020010
 80031c4:	40020028 	.word	0x40020028
 80031c8:	40020040 	.word	0x40020040
 80031cc:	40020058 	.word	0x40020058
 80031d0:	40020070 	.word	0x40020070
 80031d4:	40020088 	.word	0x40020088
 80031d8:	400200a0 	.word	0x400200a0
 80031dc:	400200b8 	.word	0x400200b8
 80031e0:	40020410 	.word	0x40020410
 80031e4:	40020428 	.word	0x40020428
 80031e8:	40020440 	.word	0x40020440
 80031ec:	40020458 	.word	0x40020458
 80031f0:	40020470 	.word	0x40020470
 80031f4:	40020488 	.word	0x40020488
 80031f8:	400204a0 	.word	0x400204a0
 80031fc:	400204b8 	.word	0x400204b8
 8003200:	58025408 	.word	0x58025408
 8003204:	5802541c 	.word	0x5802541c
 8003208:	58025430 	.word	0x58025430
 800320c:	58025444 	.word	0x58025444
 8003210:	58025458 	.word	0x58025458
 8003214:	5802546c 	.word	0x5802546c
 8003218:	58025480 	.word	0x58025480
 800321c:	58025494 	.word	0x58025494

08003220 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e237      	b.n	80036a2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d004      	beq.n	8003248 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e22c      	b.n	80036a2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a5c      	ldr	r2, [pc, #368]	; (80033c0 <HAL_DMA_Abort_IT+0x1a0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d04a      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a5b      	ldr	r2, [pc, #364]	; (80033c4 <HAL_DMA_Abort_IT+0x1a4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d045      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a59      	ldr	r2, [pc, #356]	; (80033c8 <HAL_DMA_Abort_IT+0x1a8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d040      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a58      	ldr	r2, [pc, #352]	; (80033cc <HAL_DMA_Abort_IT+0x1ac>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d03b      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a56      	ldr	r2, [pc, #344]	; (80033d0 <HAL_DMA_Abort_IT+0x1b0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d036      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a55      	ldr	r2, [pc, #340]	; (80033d4 <HAL_DMA_Abort_IT+0x1b4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d031      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a53      	ldr	r2, [pc, #332]	; (80033d8 <HAL_DMA_Abort_IT+0x1b8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d02c      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a52      	ldr	r2, [pc, #328]	; (80033dc <HAL_DMA_Abort_IT+0x1bc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d027      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a50      	ldr	r2, [pc, #320]	; (80033e0 <HAL_DMA_Abort_IT+0x1c0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d022      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a4f      	ldr	r2, [pc, #316]	; (80033e4 <HAL_DMA_Abort_IT+0x1c4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d01d      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a4d      	ldr	r2, [pc, #308]	; (80033e8 <HAL_DMA_Abort_IT+0x1c8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d018      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a4c      	ldr	r2, [pc, #304]	; (80033ec <HAL_DMA_Abort_IT+0x1cc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d013      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a4a      	ldr	r2, [pc, #296]	; (80033f0 <HAL_DMA_Abort_IT+0x1d0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00e      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a49      	ldr	r2, [pc, #292]	; (80033f4 <HAL_DMA_Abort_IT+0x1d4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a47      	ldr	r2, [pc, #284]	; (80033f8 <HAL_DMA_Abort_IT+0x1d8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc8>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a46      	ldr	r2, [pc, #280]	; (80033fc <HAL_DMA_Abort_IT+0x1dc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d101      	bne.n	80032ec <HAL_DMA_Abort_IT+0xcc>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <HAL_DMA_Abort_IT+0xce>
 80032ec:	2300      	movs	r3, #0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8086 	beq.w	8003400 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2204      	movs	r2, #4
 80032f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2f      	ldr	r2, [pc, #188]	; (80033c0 <HAL_DMA_Abort_IT+0x1a0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d04a      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2e      	ldr	r2, [pc, #184]	; (80033c4 <HAL_DMA_Abort_IT+0x1a4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d045      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2c      	ldr	r2, [pc, #176]	; (80033c8 <HAL_DMA_Abort_IT+0x1a8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d040      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2b      	ldr	r2, [pc, #172]	; (80033cc <HAL_DMA_Abort_IT+0x1ac>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d03b      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a29      	ldr	r2, [pc, #164]	; (80033d0 <HAL_DMA_Abort_IT+0x1b0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d036      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a28      	ldr	r2, [pc, #160]	; (80033d4 <HAL_DMA_Abort_IT+0x1b4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d031      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a26      	ldr	r2, [pc, #152]	; (80033d8 <HAL_DMA_Abort_IT+0x1b8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d02c      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a25      	ldr	r2, [pc, #148]	; (80033dc <HAL_DMA_Abort_IT+0x1bc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d027      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a23      	ldr	r2, [pc, #140]	; (80033e0 <HAL_DMA_Abort_IT+0x1c0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d022      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <HAL_DMA_Abort_IT+0x1c4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d01d      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a20      	ldr	r2, [pc, #128]	; (80033e8 <HAL_DMA_Abort_IT+0x1c8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d018      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1f      	ldr	r2, [pc, #124]	; (80033ec <HAL_DMA_Abort_IT+0x1cc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <HAL_DMA_Abort_IT+0x1d0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00e      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1c      	ldr	r2, [pc, #112]	; (80033f4 <HAL_DMA_Abort_IT+0x1d4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1a      	ldr	r2, [pc, #104]	; (80033f8 <HAL_DMA_Abort_IT+0x1d8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_DMA_Abort_IT+0x17c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a19      	ldr	r2, [pc, #100]	; (80033fc <HAL_DMA_Abort_IT+0x1dc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <HAL_DMA_Abort_IT+0x18e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0201 	bic.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	e178      	b.n	80036a0 <HAL_DMA_Abort_IT+0x480>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e16f      	b.n	80036a0 <HAL_DMA_Abort_IT+0x480>
 80033c0:	40020010 	.word	0x40020010
 80033c4:	40020028 	.word	0x40020028
 80033c8:	40020040 	.word	0x40020040
 80033cc:	40020058 	.word	0x40020058
 80033d0:	40020070 	.word	0x40020070
 80033d4:	40020088 	.word	0x40020088
 80033d8:	400200a0 	.word	0x400200a0
 80033dc:	400200b8 	.word	0x400200b8
 80033e0:	40020410 	.word	0x40020410
 80033e4:	40020428 	.word	0x40020428
 80033e8:	40020440 	.word	0x40020440
 80033ec:	40020458 	.word	0x40020458
 80033f0:	40020470 	.word	0x40020470
 80033f4:	40020488 	.word	0x40020488
 80033f8:	400204a0 	.word	0x400204a0
 80033fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 020e 	bic.w	r2, r2, #14
 800340e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a6c      	ldr	r2, [pc, #432]	; (80035c8 <HAL_DMA_Abort_IT+0x3a8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d04a      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a6b      	ldr	r2, [pc, #428]	; (80035cc <HAL_DMA_Abort_IT+0x3ac>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d045      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a69      	ldr	r2, [pc, #420]	; (80035d0 <HAL_DMA_Abort_IT+0x3b0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d040      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a68      	ldr	r2, [pc, #416]	; (80035d4 <HAL_DMA_Abort_IT+0x3b4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d03b      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a66      	ldr	r2, [pc, #408]	; (80035d8 <HAL_DMA_Abort_IT+0x3b8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d036      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a65      	ldr	r2, [pc, #404]	; (80035dc <HAL_DMA_Abort_IT+0x3bc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d031      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a63      	ldr	r2, [pc, #396]	; (80035e0 <HAL_DMA_Abort_IT+0x3c0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d02c      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a62      	ldr	r2, [pc, #392]	; (80035e4 <HAL_DMA_Abort_IT+0x3c4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d027      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a60      	ldr	r2, [pc, #384]	; (80035e8 <HAL_DMA_Abort_IT+0x3c8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d022      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a5f      	ldr	r2, [pc, #380]	; (80035ec <HAL_DMA_Abort_IT+0x3cc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d01d      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <HAL_DMA_Abort_IT+0x3d0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d018      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a5c      	ldr	r2, [pc, #368]	; (80035f4 <HAL_DMA_Abort_IT+0x3d4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d013      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a5a      	ldr	r2, [pc, #360]	; (80035f8 <HAL_DMA_Abort_IT+0x3d8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00e      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a59      	ldr	r2, [pc, #356]	; (80035fc <HAL_DMA_Abort_IT+0x3dc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d009      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a57      	ldr	r2, [pc, #348]	; (8003600 <HAL_DMA_Abort_IT+0x3e0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x290>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a56      	ldr	r2, [pc, #344]	; (8003604 <HAL_DMA_Abort_IT+0x3e4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d108      	bne.n	80034c2 <HAL_DMA_Abort_IT+0x2a2>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e007      	b.n	80034d2 <HAL_DMA_Abort_IT+0x2b2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a3c      	ldr	r2, [pc, #240]	; (80035c8 <HAL_DMA_Abort_IT+0x3a8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d072      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a3a      	ldr	r2, [pc, #232]	; (80035cc <HAL_DMA_Abort_IT+0x3ac>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d06d      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a39      	ldr	r2, [pc, #228]	; (80035d0 <HAL_DMA_Abort_IT+0x3b0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d068      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a37      	ldr	r2, [pc, #220]	; (80035d4 <HAL_DMA_Abort_IT+0x3b4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d063      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a36      	ldr	r2, [pc, #216]	; (80035d8 <HAL_DMA_Abort_IT+0x3b8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d05e      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a34      	ldr	r2, [pc, #208]	; (80035dc <HAL_DMA_Abort_IT+0x3bc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d059      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a33      	ldr	r2, [pc, #204]	; (80035e0 <HAL_DMA_Abort_IT+0x3c0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d054      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a31      	ldr	r2, [pc, #196]	; (80035e4 <HAL_DMA_Abort_IT+0x3c4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d04f      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a30      	ldr	r2, [pc, #192]	; (80035e8 <HAL_DMA_Abort_IT+0x3c8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d04a      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2e      	ldr	r2, [pc, #184]	; (80035ec <HAL_DMA_Abort_IT+0x3cc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d045      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2d      	ldr	r2, [pc, #180]	; (80035f0 <HAL_DMA_Abort_IT+0x3d0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d040      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <HAL_DMA_Abort_IT+0x3d4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d03b      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2a      	ldr	r2, [pc, #168]	; (80035f8 <HAL_DMA_Abort_IT+0x3d8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d036      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a28      	ldr	r2, [pc, #160]	; (80035fc <HAL_DMA_Abort_IT+0x3dc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d031      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a27      	ldr	r2, [pc, #156]	; (8003600 <HAL_DMA_Abort_IT+0x3e0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d02c      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a25      	ldr	r2, [pc, #148]	; (8003604 <HAL_DMA_Abort_IT+0x3e4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d027      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a24      	ldr	r2, [pc, #144]	; (8003608 <HAL_DMA_Abort_IT+0x3e8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d022      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a22      	ldr	r2, [pc, #136]	; (800360c <HAL_DMA_Abort_IT+0x3ec>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01d      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a21      	ldr	r2, [pc, #132]	; (8003610 <HAL_DMA_Abort_IT+0x3f0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d018      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1f      	ldr	r2, [pc, #124]	; (8003614 <HAL_DMA_Abort_IT+0x3f4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1e      	ldr	r2, [pc, #120]	; (8003618 <HAL_DMA_Abort_IT+0x3f8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00e      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1c      	ldr	r2, [pc, #112]	; (800361c <HAL_DMA_Abort_IT+0x3fc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d009      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1b      	ldr	r2, [pc, #108]	; (8003620 <HAL_DMA_Abort_IT+0x400>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d004      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x3a2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a19      	ldr	r2, [pc, #100]	; (8003624 <HAL_DMA_Abort_IT+0x404>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d132      	bne.n	8003628 <HAL_DMA_Abort_IT+0x408>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e031      	b.n	800362a <HAL_DMA_Abort_IT+0x40a>
 80035c6:	bf00      	nop
 80035c8:	40020010 	.word	0x40020010
 80035cc:	40020028 	.word	0x40020028
 80035d0:	40020040 	.word	0x40020040
 80035d4:	40020058 	.word	0x40020058
 80035d8:	40020070 	.word	0x40020070
 80035dc:	40020088 	.word	0x40020088
 80035e0:	400200a0 	.word	0x400200a0
 80035e4:	400200b8 	.word	0x400200b8
 80035e8:	40020410 	.word	0x40020410
 80035ec:	40020428 	.word	0x40020428
 80035f0:	40020440 	.word	0x40020440
 80035f4:	40020458 	.word	0x40020458
 80035f8:	40020470 	.word	0x40020470
 80035fc:	40020488 	.word	0x40020488
 8003600:	400204a0 	.word	0x400204a0
 8003604:	400204b8 	.word	0x400204b8
 8003608:	58025408 	.word	0x58025408
 800360c:	5802541c 	.word	0x5802541c
 8003610:	58025430 	.word	0x58025430
 8003614:	58025444 	.word	0x58025444
 8003618:	58025458 	.word	0x58025458
 800361c:	5802546c 	.word	0x5802546c
 8003620:	58025480 	.word	0x58025480
 8003624:	58025494 	.word	0x58025494
 8003628:	2300      	movs	r3, #0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d028      	beq.n	8003680 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800363c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	2201      	movs	r2, #1
 800364e:	409a      	lsls	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800365c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00c      	beq.n	8003680 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003674:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800367e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop

080036ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	; 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036b8:	4b67      	ldr	r3, [pc, #412]	; (8003858 <HAL_DMA_IRQHandler+0x1ac>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a67      	ldr	r2, [pc, #412]	; (800385c <HAL_DMA_IRQHandler+0x1b0>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0a9b      	lsrs	r3, r3, #10
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a5f      	ldr	r2, [pc, #380]	; (8003860 <HAL_DMA_IRQHandler+0x1b4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d04a      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a5d      	ldr	r2, [pc, #372]	; (8003864 <HAL_DMA_IRQHandler+0x1b8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d045      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a5c      	ldr	r2, [pc, #368]	; (8003868 <HAL_DMA_IRQHandler+0x1bc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d040      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a5a      	ldr	r2, [pc, #360]	; (800386c <HAL_DMA_IRQHandler+0x1c0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d03b      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a59      	ldr	r2, [pc, #356]	; (8003870 <HAL_DMA_IRQHandler+0x1c4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d036      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a57      	ldr	r2, [pc, #348]	; (8003874 <HAL_DMA_IRQHandler+0x1c8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d031      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a56      	ldr	r2, [pc, #344]	; (8003878 <HAL_DMA_IRQHandler+0x1cc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d02c      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a54      	ldr	r2, [pc, #336]	; (800387c <HAL_DMA_IRQHandler+0x1d0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d027      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a53      	ldr	r2, [pc, #332]	; (8003880 <HAL_DMA_IRQHandler+0x1d4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a51      	ldr	r2, [pc, #324]	; (8003884 <HAL_DMA_IRQHandler+0x1d8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01d      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a50      	ldr	r2, [pc, #320]	; (8003888 <HAL_DMA_IRQHandler+0x1dc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d018      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a4e      	ldr	r2, [pc, #312]	; (800388c <HAL_DMA_IRQHandler+0x1e0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a4d      	ldr	r2, [pc, #308]	; (8003890 <HAL_DMA_IRQHandler+0x1e4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a4b      	ldr	r2, [pc, #300]	; (8003894 <HAL_DMA_IRQHandler+0x1e8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a4a      	ldr	r2, [pc, #296]	; (8003898 <HAL_DMA_IRQHandler+0x1ec>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_DMA_IRQHandler+0xd2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a48      	ldr	r2, [pc, #288]	; (800389c <HAL_DMA_IRQHandler+0x1f0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <HAL_DMA_IRQHandler+0xd6>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <HAL_DMA_IRQHandler+0xd8>
 8003782:	2300      	movs	r3, #0
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 842b 	beq.w	8003fe0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2208      	movs	r2, #8
 8003794:	409a      	lsls	r2, r3
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 80a2 	beq.w	80038e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a2e      	ldr	r2, [pc, #184]	; (8003860 <HAL_DMA_IRQHandler+0x1b4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d04a      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a2d      	ldr	r2, [pc, #180]	; (8003864 <HAL_DMA_IRQHandler+0x1b8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d045      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2b      	ldr	r2, [pc, #172]	; (8003868 <HAL_DMA_IRQHandler+0x1bc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d040      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2a      	ldr	r2, [pc, #168]	; (800386c <HAL_DMA_IRQHandler+0x1c0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d03b      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a28      	ldr	r2, [pc, #160]	; (8003870 <HAL_DMA_IRQHandler+0x1c4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d036      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a27      	ldr	r2, [pc, #156]	; (8003874 <HAL_DMA_IRQHandler+0x1c8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d031      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a25      	ldr	r2, [pc, #148]	; (8003878 <HAL_DMA_IRQHandler+0x1cc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d02c      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a24      	ldr	r2, [pc, #144]	; (800387c <HAL_DMA_IRQHandler+0x1d0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d027      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a22      	ldr	r2, [pc, #136]	; (8003880 <HAL_DMA_IRQHandler+0x1d4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d022      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a21      	ldr	r2, [pc, #132]	; (8003884 <HAL_DMA_IRQHandler+0x1d8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d01d      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1f      	ldr	r2, [pc, #124]	; (8003888 <HAL_DMA_IRQHandler+0x1dc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d018      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1e      	ldr	r2, [pc, #120]	; (800388c <HAL_DMA_IRQHandler+0x1e0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <HAL_DMA_IRQHandler+0x1e4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00e      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1b      	ldr	r2, [pc, #108]	; (8003894 <HAL_DMA_IRQHandler+0x1e8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a19      	ldr	r2, [pc, #100]	; (8003898 <HAL_DMA_IRQHandler+0x1ec>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_DMA_IRQHandler+0x194>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a18      	ldr	r2, [pc, #96]	; (800389c <HAL_DMA_IRQHandler+0x1f0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d12f      	bne.n	80038a0 <HAL_DMA_IRQHandler+0x1f4>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	bf14      	ite	ne
 800384e:	2301      	movne	r3, #1
 8003850:	2300      	moveq	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	e02e      	b.n	80038b4 <HAL_DMA_IRQHandler+0x208>
 8003856:	bf00      	nop
 8003858:	20000000 	.word	0x20000000
 800385c:	1b4e81b5 	.word	0x1b4e81b5
 8003860:	40020010 	.word	0x40020010
 8003864:	40020028 	.word	0x40020028
 8003868:	40020040 	.word	0x40020040
 800386c:	40020058 	.word	0x40020058
 8003870:	40020070 	.word	0x40020070
 8003874:	40020088 	.word	0x40020088
 8003878:	400200a0 	.word	0x400200a0
 800387c:	400200b8 	.word	0x400200b8
 8003880:	40020410 	.word	0x40020410
 8003884:	40020428 	.word	0x40020428
 8003888:	40020440 	.word	0x40020440
 800388c:	40020458 	.word	0x40020458
 8003890:	40020470 	.word	0x40020470
 8003894:	40020488 	.word	0x40020488
 8003898:	400204a0 	.word	0x400204a0
 800389c:	400204b8 	.word	0x400204b8
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bf14      	ite	ne
 80038ae:	2301      	movne	r3, #1
 80038b0:	2300      	moveq	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d015      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0204 	bic.w	r2, r2, #4
 80038c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	2208      	movs	r2, #8
 80038d2:	409a      	lsls	r2, r3
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	fa22 f303 	lsr.w	r3, r2, r3
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d06e      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a69      	ldr	r2, [pc, #420]	; (8003aa4 <HAL_DMA_IRQHandler+0x3f8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d04a      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a67      	ldr	r2, [pc, #412]	; (8003aa8 <HAL_DMA_IRQHandler+0x3fc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d045      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a66      	ldr	r2, [pc, #408]	; (8003aac <HAL_DMA_IRQHandler+0x400>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d040      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a64      	ldr	r2, [pc, #400]	; (8003ab0 <HAL_DMA_IRQHandler+0x404>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d03b      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a63      	ldr	r2, [pc, #396]	; (8003ab4 <HAL_DMA_IRQHandler+0x408>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d036      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a61      	ldr	r2, [pc, #388]	; (8003ab8 <HAL_DMA_IRQHandler+0x40c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d031      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a60      	ldr	r2, [pc, #384]	; (8003abc <HAL_DMA_IRQHandler+0x410>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d02c      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a5e      	ldr	r2, [pc, #376]	; (8003ac0 <HAL_DMA_IRQHandler+0x414>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d027      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a5d      	ldr	r2, [pc, #372]	; (8003ac4 <HAL_DMA_IRQHandler+0x418>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d022      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a5b      	ldr	r2, [pc, #364]	; (8003ac8 <HAL_DMA_IRQHandler+0x41c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d01d      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a5a      	ldr	r2, [pc, #360]	; (8003acc <HAL_DMA_IRQHandler+0x420>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d018      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a58      	ldr	r2, [pc, #352]	; (8003ad0 <HAL_DMA_IRQHandler+0x424>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a57      	ldr	r2, [pc, #348]	; (8003ad4 <HAL_DMA_IRQHandler+0x428>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00e      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a55      	ldr	r2, [pc, #340]	; (8003ad8 <HAL_DMA_IRQHandler+0x42c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a54      	ldr	r2, [pc, #336]	; (8003adc <HAL_DMA_IRQHandler+0x430>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_DMA_IRQHandler+0x2ee>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a52      	ldr	r2, [pc, #328]	; (8003ae0 <HAL_DMA_IRQHandler+0x434>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d10a      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x304>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf14      	ite	ne
 80039a8:	2301      	movne	r3, #1
 80039aa:	2300      	moveq	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	e003      	b.n	80039b8 <HAL_DMA_IRQHandler+0x30c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00d      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2201      	movs	r2, #1
 80039c6:	409a      	lsls	r2, r3
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	f043 0202 	orr.w	r2, r3, #2
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2204      	movs	r2, #4
 80039e2:	409a      	lsls	r2, r3
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 808f 	beq.w	8003b0c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2c      	ldr	r2, [pc, #176]	; (8003aa4 <HAL_DMA_IRQHandler+0x3f8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d04a      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a2a      	ldr	r2, [pc, #168]	; (8003aa8 <HAL_DMA_IRQHandler+0x3fc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d045      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a29      	ldr	r2, [pc, #164]	; (8003aac <HAL_DMA_IRQHandler+0x400>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d040      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a27      	ldr	r2, [pc, #156]	; (8003ab0 <HAL_DMA_IRQHandler+0x404>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d03b      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a26      	ldr	r2, [pc, #152]	; (8003ab4 <HAL_DMA_IRQHandler+0x408>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d036      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a24      	ldr	r2, [pc, #144]	; (8003ab8 <HAL_DMA_IRQHandler+0x40c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d031      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a23      	ldr	r2, [pc, #140]	; (8003abc <HAL_DMA_IRQHandler+0x410>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d02c      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a21      	ldr	r2, [pc, #132]	; (8003ac0 <HAL_DMA_IRQHandler+0x414>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d027      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <HAL_DMA_IRQHandler+0x418>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d022      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ac8 <HAL_DMA_IRQHandler+0x41c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01d      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <HAL_DMA_IRQHandler+0x420>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d018      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <HAL_DMA_IRQHandler+0x424>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ad4 <HAL_DMA_IRQHandler+0x428>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00e      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <HAL_DMA_IRQHandler+0x42c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a17      	ldr	r2, [pc, #92]	; (8003adc <HAL_DMA_IRQHandler+0x430>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x3e2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a15      	ldr	r2, [pc, #84]	; (8003ae0 <HAL_DMA_IRQHandler+0x434>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d12a      	bne.n	8003ae4 <HAL_DMA_IRQHandler+0x438>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	e023      	b.n	8003aec <HAL_DMA_IRQHandler+0x440>
 8003aa4:	40020010 	.word	0x40020010
 8003aa8:	40020028 	.word	0x40020028
 8003aac:	40020040 	.word	0x40020040
 8003ab0:	40020058 	.word	0x40020058
 8003ab4:	40020070 	.word	0x40020070
 8003ab8:	40020088 	.word	0x40020088
 8003abc:	400200a0 	.word	0x400200a0
 8003ac0:	400200b8 	.word	0x400200b8
 8003ac4:	40020410 	.word	0x40020410
 8003ac8:	40020428 	.word	0x40020428
 8003acc:	40020440 	.word	0x40020440
 8003ad0:	40020458 	.word	0x40020458
 8003ad4:	40020470 	.word	0x40020470
 8003ad8:	40020488 	.word	0x40020488
 8003adc:	400204a0 	.word	0x400204a0
 8003ae0:	400204b8 	.word	0x400204b8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00d      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2204      	movs	r2, #4
 8003afa:	409a      	lsls	r2, r3
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	f043 0204 	orr.w	r2, r3, #4
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2210      	movs	r2, #16
 8003b16:	409a      	lsls	r2, r3
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80a6 	beq.w	8003c6e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a85      	ldr	r2, [pc, #532]	; (8003d3c <HAL_DMA_IRQHandler+0x690>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d04a      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a83      	ldr	r2, [pc, #524]	; (8003d40 <HAL_DMA_IRQHandler+0x694>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d045      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a82      	ldr	r2, [pc, #520]	; (8003d44 <HAL_DMA_IRQHandler+0x698>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d040      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a80      	ldr	r2, [pc, #512]	; (8003d48 <HAL_DMA_IRQHandler+0x69c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d03b      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a7f      	ldr	r2, [pc, #508]	; (8003d4c <HAL_DMA_IRQHandler+0x6a0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d036      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a7d      	ldr	r2, [pc, #500]	; (8003d50 <HAL_DMA_IRQHandler+0x6a4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d031      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a7c      	ldr	r2, [pc, #496]	; (8003d54 <HAL_DMA_IRQHandler+0x6a8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d02c      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a7a      	ldr	r2, [pc, #488]	; (8003d58 <HAL_DMA_IRQHandler+0x6ac>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d027      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a79      	ldr	r2, [pc, #484]	; (8003d5c <HAL_DMA_IRQHandler+0x6b0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d022      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a77      	ldr	r2, [pc, #476]	; (8003d60 <HAL_DMA_IRQHandler+0x6b4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01d      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a76      	ldr	r2, [pc, #472]	; (8003d64 <HAL_DMA_IRQHandler+0x6b8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d018      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a74      	ldr	r2, [pc, #464]	; (8003d68 <HAL_DMA_IRQHandler+0x6bc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a73      	ldr	r2, [pc, #460]	; (8003d6c <HAL_DMA_IRQHandler+0x6c0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a71      	ldr	r2, [pc, #452]	; (8003d70 <HAL_DMA_IRQHandler+0x6c4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d009      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a70      	ldr	r2, [pc, #448]	; (8003d74 <HAL_DMA_IRQHandler+0x6c8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x516>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a6e      	ldr	r2, [pc, #440]	; (8003d78 <HAL_DMA_IRQHandler+0x6cc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d10a      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x52c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf14      	ite	ne
 8003bd0:	2301      	movne	r3, #1
 8003bd2:	2300      	moveq	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	e009      	b.n	8003bec <HAL_DMA_IRQHandler+0x540>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bf14      	ite	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	2300      	moveq	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d03e      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	2210      	movs	r2, #16
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d018      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d108      	bne.n	8003c2e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d024      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
 8003c2c:	e01f      	b.n	8003c6e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01b      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
 8003c3e:	e016      	b.n	8003c6e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d107      	bne.n	8003c5e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0208 	bic.w	r2, r2, #8
 8003c5c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	2220      	movs	r2, #32
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8110 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a2c      	ldr	r2, [pc, #176]	; (8003d3c <HAL_DMA_IRQHandler+0x690>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d04a      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2b      	ldr	r2, [pc, #172]	; (8003d40 <HAL_DMA_IRQHandler+0x694>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d045      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a29      	ldr	r2, [pc, #164]	; (8003d44 <HAL_DMA_IRQHandler+0x698>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d040      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a28      	ldr	r2, [pc, #160]	; (8003d48 <HAL_DMA_IRQHandler+0x69c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d03b      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <HAL_DMA_IRQHandler+0x6a0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d036      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a25      	ldr	r2, [pc, #148]	; (8003d50 <HAL_DMA_IRQHandler+0x6a4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d031      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a23      	ldr	r2, [pc, #140]	; (8003d54 <HAL_DMA_IRQHandler+0x6a8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02c      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a22      	ldr	r2, [pc, #136]	; (8003d58 <HAL_DMA_IRQHandler+0x6ac>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d027      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <HAL_DMA_IRQHandler+0x6b0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d022      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1f      	ldr	r2, [pc, #124]	; (8003d60 <HAL_DMA_IRQHandler+0x6b4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d01d      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <HAL_DMA_IRQHandler+0x6b8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d018      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <HAL_DMA_IRQHandler+0x6bc>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <HAL_DMA_IRQHandler+0x6c0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00e      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <HAL_DMA_IRQHandler+0x6c4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d009      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <HAL_DMA_IRQHandler+0x6c8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d004      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x678>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <HAL_DMA_IRQHandler+0x6cc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d12b      	bne.n	8003d7c <HAL_DMA_IRQHandler+0x6d0>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	e02a      	b.n	8003d90 <HAL_DMA_IRQHandler+0x6e4>
 8003d3a:	bf00      	nop
 8003d3c:	40020010 	.word	0x40020010
 8003d40:	40020028 	.word	0x40020028
 8003d44:	40020040 	.word	0x40020040
 8003d48:	40020058 	.word	0x40020058
 8003d4c:	40020070 	.word	0x40020070
 8003d50:	40020088 	.word	0x40020088
 8003d54:	400200a0 	.word	0x400200a0
 8003d58:	400200b8 	.word	0x400200b8
 8003d5c:	40020410 	.word	0x40020410
 8003d60:	40020428 	.word	0x40020428
 8003d64:	40020440 	.word	0x40020440
 8003d68:	40020458 	.word	0x40020458
 8003d6c:	40020470 	.word	0x40020470
 8003d70:	40020488 	.word	0x40020488
 8003d74:	400204a0 	.word	0x400204a0
 8003d78:	400204b8 	.word	0x400204b8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	bf14      	ite	ne
 8003d8a:	2301      	movne	r3, #1
 8003d8c:	2300      	moveq	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8087 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	2220      	movs	r2, #32
 8003da0:	409a      	lsls	r2, r3
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d139      	bne.n	8003e26 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0216 	bic.w	r2, r2, #22
 8003dc0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dd0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <HAL_DMA_IRQHandler+0x736>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d007      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0208 	bic.w	r2, r2, #8
 8003df0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	223f      	movs	r2, #63	; 0x3f
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 834a 	beq.w	80044b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
          }
          return;
 8003e24:	e344      	b.n	80044b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d018      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d108      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d02c      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
 8003e52:	e027      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d023      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	4798      	blx	r3
 8003e64:	e01e      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10f      	bne.n	8003e94 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0210 	bic.w	r2, r2, #16
 8003e82:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8306 	beq.w	80044ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8088 	beq.w	8003fcc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a7a      	ldr	r2, [pc, #488]	; (80040b4 <HAL_DMA_IRQHandler+0xa08>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d04a      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a79      	ldr	r2, [pc, #484]	; (80040b8 <HAL_DMA_IRQHandler+0xa0c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d045      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a77      	ldr	r2, [pc, #476]	; (80040bc <HAL_DMA_IRQHandler+0xa10>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d040      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a76      	ldr	r2, [pc, #472]	; (80040c0 <HAL_DMA_IRQHandler+0xa14>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d03b      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a74      	ldr	r2, [pc, #464]	; (80040c4 <HAL_DMA_IRQHandler+0xa18>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d036      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a73      	ldr	r2, [pc, #460]	; (80040c8 <HAL_DMA_IRQHandler+0xa1c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d031      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a71      	ldr	r2, [pc, #452]	; (80040cc <HAL_DMA_IRQHandler+0xa20>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d02c      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a70      	ldr	r2, [pc, #448]	; (80040d0 <HAL_DMA_IRQHandler+0xa24>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d027      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a6e      	ldr	r2, [pc, #440]	; (80040d4 <HAL_DMA_IRQHandler+0xa28>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d022      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a6d      	ldr	r2, [pc, #436]	; (80040d8 <HAL_DMA_IRQHandler+0xa2c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d01d      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a6b      	ldr	r2, [pc, #428]	; (80040dc <HAL_DMA_IRQHandler+0xa30>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d018      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a6a      	ldr	r2, [pc, #424]	; (80040e0 <HAL_DMA_IRQHandler+0xa34>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d013      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a68      	ldr	r2, [pc, #416]	; (80040e4 <HAL_DMA_IRQHandler+0xa38>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00e      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a67      	ldr	r2, [pc, #412]	; (80040e8 <HAL_DMA_IRQHandler+0xa3c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d009      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a65      	ldr	r2, [pc, #404]	; (80040ec <HAL_DMA_IRQHandler+0xa40>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x8b8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a64      	ldr	r2, [pc, #400]	; (80040f0 <HAL_DMA_IRQHandler+0xa44>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d108      	bne.n	8003f76 <HAL_DMA_IRQHandler+0x8ca>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	e007      	b.n	8003f86 <HAL_DMA_IRQHandler+0x8da>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d307      	bcc.n	8003fa2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f2      	bne.n	8003f86 <HAL_DMA_IRQHandler+0x8da>
 8003fa0:	e000      	b.n	8003fa4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003fa2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003fba:	e003      	b.n	8003fc4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8272 	beq.w	80044ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	4798      	blx	r3
 8003fde:	e26c      	b.n	80044ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a43      	ldr	r2, [pc, #268]	; (80040f4 <HAL_DMA_IRQHandler+0xa48>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d022      	beq.n	8004030 <HAL_DMA_IRQHandler+0x984>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a42      	ldr	r2, [pc, #264]	; (80040f8 <HAL_DMA_IRQHandler+0xa4c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d01d      	beq.n	8004030 <HAL_DMA_IRQHandler+0x984>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a40      	ldr	r2, [pc, #256]	; (80040fc <HAL_DMA_IRQHandler+0xa50>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d018      	beq.n	8004030 <HAL_DMA_IRQHandler+0x984>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a3f      	ldr	r2, [pc, #252]	; (8004100 <HAL_DMA_IRQHandler+0xa54>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <HAL_DMA_IRQHandler+0x984>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a3d      	ldr	r2, [pc, #244]	; (8004104 <HAL_DMA_IRQHandler+0xa58>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00e      	beq.n	8004030 <HAL_DMA_IRQHandler+0x984>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a3c      	ldr	r2, [pc, #240]	; (8004108 <HAL_DMA_IRQHandler+0xa5c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d009      	beq.n	8004030 <HAL_DMA_IRQHandler+0x984>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a3a      	ldr	r2, [pc, #232]	; (800410c <HAL_DMA_IRQHandler+0xa60>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_DMA_IRQHandler+0x984>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a39      	ldr	r2, [pc, #228]	; (8004110 <HAL_DMA_IRQHandler+0xa64>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d101      	bne.n	8004034 <HAL_DMA_IRQHandler+0x988>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <HAL_DMA_IRQHandler+0x98a>
 8004034:	2300      	movs	r3, #0
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 823f 	beq.w	80044ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2204      	movs	r2, #4
 800404e:	409a      	lsls	r2, r3
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80cd 	beq.w	80041f4 <HAL_DMA_IRQHandler+0xb48>
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80c7 	beq.w	80041f4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	2204      	movs	r2, #4
 8004070:	409a      	lsls	r2, r3
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d049      	beq.n	8004114 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8210 	beq.w	80044b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800409c:	e20a      	b.n	80044b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8206 	beq.w	80044b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040b0:	e200      	b.n	80044b4 <HAL_DMA_IRQHandler+0xe08>
 80040b2:	bf00      	nop
 80040b4:	40020010 	.word	0x40020010
 80040b8:	40020028 	.word	0x40020028
 80040bc:	40020040 	.word	0x40020040
 80040c0:	40020058 	.word	0x40020058
 80040c4:	40020070 	.word	0x40020070
 80040c8:	40020088 	.word	0x40020088
 80040cc:	400200a0 	.word	0x400200a0
 80040d0:	400200b8 	.word	0x400200b8
 80040d4:	40020410 	.word	0x40020410
 80040d8:	40020428 	.word	0x40020428
 80040dc:	40020440 	.word	0x40020440
 80040e0:	40020458 	.word	0x40020458
 80040e4:	40020470 	.word	0x40020470
 80040e8:	40020488 	.word	0x40020488
 80040ec:	400204a0 	.word	0x400204a0
 80040f0:	400204b8 	.word	0x400204b8
 80040f4:	58025408 	.word	0x58025408
 80040f8:	5802541c 	.word	0x5802541c
 80040fc:	58025430 	.word	0x58025430
 8004100:	58025444 	.word	0x58025444
 8004104:	58025458 	.word	0x58025458
 8004108:	5802546c 	.word	0x5802546c
 800410c:	58025480 	.word	0x58025480
 8004110:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d160      	bne.n	80041e0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a7f      	ldr	r2, [pc, #508]	; (8004320 <HAL_DMA_IRQHandler+0xc74>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d04a      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a7d      	ldr	r2, [pc, #500]	; (8004324 <HAL_DMA_IRQHandler+0xc78>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d045      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a7c      	ldr	r2, [pc, #496]	; (8004328 <HAL_DMA_IRQHandler+0xc7c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d040      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a7a      	ldr	r2, [pc, #488]	; (800432c <HAL_DMA_IRQHandler+0xc80>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d03b      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a79      	ldr	r2, [pc, #484]	; (8004330 <HAL_DMA_IRQHandler+0xc84>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d036      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a77      	ldr	r2, [pc, #476]	; (8004334 <HAL_DMA_IRQHandler+0xc88>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d031      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a76      	ldr	r2, [pc, #472]	; (8004338 <HAL_DMA_IRQHandler+0xc8c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d02c      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a74      	ldr	r2, [pc, #464]	; (800433c <HAL_DMA_IRQHandler+0xc90>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d027      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a73      	ldr	r2, [pc, #460]	; (8004340 <HAL_DMA_IRQHandler+0xc94>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d022      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a71      	ldr	r2, [pc, #452]	; (8004344 <HAL_DMA_IRQHandler+0xc98>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01d      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a70      	ldr	r2, [pc, #448]	; (8004348 <HAL_DMA_IRQHandler+0xc9c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d018      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a6e      	ldr	r2, [pc, #440]	; (800434c <HAL_DMA_IRQHandler+0xca0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a6d      	ldr	r2, [pc, #436]	; (8004350 <HAL_DMA_IRQHandler+0xca4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00e      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a6b      	ldr	r2, [pc, #428]	; (8004354 <HAL_DMA_IRQHandler+0xca8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d009      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a6a      	ldr	r2, [pc, #424]	; (8004358 <HAL_DMA_IRQHandler+0xcac>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d004      	beq.n	80041be <HAL_DMA_IRQHandler+0xb12>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a68      	ldr	r2, [pc, #416]	; (800435c <HAL_DMA_IRQHandler+0xcb0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d108      	bne.n	80041d0 <HAL_DMA_IRQHandler+0xb24>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0208 	bic.w	r2, r2, #8
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e007      	b.n	80041e0 <HAL_DMA_IRQHandler+0xb34>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0204 	bic.w	r2, r2, #4
 80041de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8165 	beq.w	80044b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041f2:	e15f      	b.n	80044b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	2202      	movs	r2, #2
 80041fe:	409a      	lsls	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	4013      	ands	r3, r2
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80c5 	beq.w	8004394 <HAL_DMA_IRQHandler+0xce8>
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80bf 	beq.w	8004394 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	2202      	movs	r2, #2
 8004220:	409a      	lsls	r2, r3
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d018      	beq.n	8004262 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 813a 	beq.w	80044b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800424c:	e134      	b.n	80044b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8130 	beq.w	80044b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004260:	e12a      	b.n	80044b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	f040 8089 	bne.w	8004380 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <HAL_DMA_IRQHandler+0xc74>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d04a      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a29      	ldr	r2, [pc, #164]	; (8004324 <HAL_DMA_IRQHandler+0xc78>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d045      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a28      	ldr	r2, [pc, #160]	; (8004328 <HAL_DMA_IRQHandler+0xc7c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d040      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a26      	ldr	r2, [pc, #152]	; (800432c <HAL_DMA_IRQHandler+0xc80>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d03b      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a25      	ldr	r2, [pc, #148]	; (8004330 <HAL_DMA_IRQHandler+0xc84>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d036      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a23      	ldr	r2, [pc, #140]	; (8004334 <HAL_DMA_IRQHandler+0xc88>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d031      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a22      	ldr	r2, [pc, #136]	; (8004338 <HAL_DMA_IRQHandler+0xc8c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d02c      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a20      	ldr	r2, [pc, #128]	; (800433c <HAL_DMA_IRQHandler+0xc90>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d027      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <HAL_DMA_IRQHandler+0xc94>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d022      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <HAL_DMA_IRQHandler+0xc98>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d01d      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <HAL_DMA_IRQHandler+0xc9c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d018      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1a      	ldr	r2, [pc, #104]	; (800434c <HAL_DMA_IRQHandler+0xca0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a19      	ldr	r2, [pc, #100]	; (8004350 <HAL_DMA_IRQHandler+0xca4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00e      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a17      	ldr	r2, [pc, #92]	; (8004354 <HAL_DMA_IRQHandler+0xca8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d009      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a16      	ldr	r2, [pc, #88]	; (8004358 <HAL_DMA_IRQHandler+0xcac>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_DMA_IRQHandler+0xc62>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a14      	ldr	r2, [pc, #80]	; (800435c <HAL_DMA_IRQHandler+0xcb0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d128      	bne.n	8004360 <HAL_DMA_IRQHandler+0xcb4>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0214 	bic.w	r2, r2, #20
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e027      	b.n	8004370 <HAL_DMA_IRQHandler+0xcc4>
 8004320:	40020010 	.word	0x40020010
 8004324:	40020028 	.word	0x40020028
 8004328:	40020040 	.word	0x40020040
 800432c:	40020058 	.word	0x40020058
 8004330:	40020070 	.word	0x40020070
 8004334:	40020088 	.word	0x40020088
 8004338:	400200a0 	.word	0x400200a0
 800433c:	400200b8 	.word	0x400200b8
 8004340:	40020410 	.word	0x40020410
 8004344:	40020428 	.word	0x40020428
 8004348:	40020440 	.word	0x40020440
 800434c:	40020458 	.word	0x40020458
 8004350:	40020470 	.word	0x40020470
 8004354:	40020488 	.word	0x40020488
 8004358:	400204a0 	.word	0x400204a0
 800435c:	400204b8 	.word	0x400204b8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 020a 	bic.w	r2, r2, #10
 800436e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 8097 	beq.w	80044b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004392:	e091      	b.n	80044b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	2208      	movs	r2, #8
 800439e:	409a      	lsls	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8088 	beq.w	80044ba <HAL_DMA_IRQHandler+0xe0e>
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8082 	beq.w	80044ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a41      	ldr	r2, [pc, #260]	; (80044c0 <HAL_DMA_IRQHandler+0xe14>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d04a      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a3f      	ldr	r2, [pc, #252]	; (80044c4 <HAL_DMA_IRQHandler+0xe18>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d045      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a3e      	ldr	r2, [pc, #248]	; (80044c8 <HAL_DMA_IRQHandler+0xe1c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d040      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a3c      	ldr	r2, [pc, #240]	; (80044cc <HAL_DMA_IRQHandler+0xe20>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d03b      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a3b      	ldr	r2, [pc, #236]	; (80044d0 <HAL_DMA_IRQHandler+0xe24>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d036      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a39      	ldr	r2, [pc, #228]	; (80044d4 <HAL_DMA_IRQHandler+0xe28>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d031      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a38      	ldr	r2, [pc, #224]	; (80044d8 <HAL_DMA_IRQHandler+0xe2c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d02c      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a36      	ldr	r2, [pc, #216]	; (80044dc <HAL_DMA_IRQHandler+0xe30>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d027      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a35      	ldr	r2, [pc, #212]	; (80044e0 <HAL_DMA_IRQHandler+0xe34>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d022      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a33      	ldr	r2, [pc, #204]	; (80044e4 <HAL_DMA_IRQHandler+0xe38>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01d      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a32      	ldr	r2, [pc, #200]	; (80044e8 <HAL_DMA_IRQHandler+0xe3c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d018      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a30      	ldr	r2, [pc, #192]	; (80044ec <HAL_DMA_IRQHandler+0xe40>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2f      	ldr	r2, [pc, #188]	; (80044f0 <HAL_DMA_IRQHandler+0xe44>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00e      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2d      	ldr	r2, [pc, #180]	; (80044f4 <HAL_DMA_IRQHandler+0xe48>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d009      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2c      	ldr	r2, [pc, #176]	; (80044f8 <HAL_DMA_IRQHandler+0xe4c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d004      	beq.n	8004456 <HAL_DMA_IRQHandler+0xdaa>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2a      	ldr	r2, [pc, #168]	; (80044fc <HAL_DMA_IRQHandler+0xe50>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d108      	bne.n	8004468 <HAL_DMA_IRQHandler+0xdbc>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 021c 	bic.w	r2, r2, #28
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	e007      	b.n	8004478 <HAL_DMA_IRQHandler+0xdcc>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 020e 	bic.w	r2, r2, #14
 8004476:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	2201      	movs	r2, #1
 8004482:	409a      	lsls	r2, r3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d009      	beq.n	80044ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	4798      	blx	r3
 80044ae:	e004      	b.n	80044ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 80044b0:	bf00      	nop
 80044b2:	e002      	b.n	80044ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044b4:	bf00      	nop
 80044b6:	e000      	b.n	80044ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80044ba:	3728      	adds	r7, #40	; 0x28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40020010 	.word	0x40020010
 80044c4:	40020028 	.word	0x40020028
 80044c8:	40020040 	.word	0x40020040
 80044cc:	40020058 	.word	0x40020058
 80044d0:	40020070 	.word	0x40020070
 80044d4:	40020088 	.word	0x40020088
 80044d8:	400200a0 	.word	0x400200a0
 80044dc:	400200b8 	.word	0x400200b8
 80044e0:	40020410 	.word	0x40020410
 80044e4:	40020428 	.word	0x40020428
 80044e8:	40020440 	.word	0x40020440
 80044ec:	40020458 	.word	0x40020458
 80044f0:	40020470 	.word	0x40020470
 80044f4:	40020488 	.word	0x40020488
 80044f8:	400204a0 	.word	0x400204a0
 80044fc:	400204b8 	.word	0x400204b8

08004500 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800450c:	4618      	mov	r0, r3
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a7f      	ldr	r2, [pc, #508]	; (8004734 <DMA_SetConfig+0x21c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d072      	beq.n	8004622 <DMA_SetConfig+0x10a>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a7d      	ldr	r2, [pc, #500]	; (8004738 <DMA_SetConfig+0x220>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d06d      	beq.n	8004622 <DMA_SetConfig+0x10a>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a7c      	ldr	r2, [pc, #496]	; (800473c <DMA_SetConfig+0x224>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d068      	beq.n	8004622 <DMA_SetConfig+0x10a>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a7a      	ldr	r2, [pc, #488]	; (8004740 <DMA_SetConfig+0x228>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d063      	beq.n	8004622 <DMA_SetConfig+0x10a>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a79      	ldr	r2, [pc, #484]	; (8004744 <DMA_SetConfig+0x22c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d05e      	beq.n	8004622 <DMA_SetConfig+0x10a>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a77      	ldr	r2, [pc, #476]	; (8004748 <DMA_SetConfig+0x230>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d059      	beq.n	8004622 <DMA_SetConfig+0x10a>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a76      	ldr	r2, [pc, #472]	; (800474c <DMA_SetConfig+0x234>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d054      	beq.n	8004622 <DMA_SetConfig+0x10a>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a74      	ldr	r2, [pc, #464]	; (8004750 <DMA_SetConfig+0x238>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d04f      	beq.n	8004622 <DMA_SetConfig+0x10a>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a73      	ldr	r2, [pc, #460]	; (8004754 <DMA_SetConfig+0x23c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d04a      	beq.n	8004622 <DMA_SetConfig+0x10a>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a71      	ldr	r2, [pc, #452]	; (8004758 <DMA_SetConfig+0x240>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d045      	beq.n	8004622 <DMA_SetConfig+0x10a>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a70      	ldr	r2, [pc, #448]	; (800475c <DMA_SetConfig+0x244>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d040      	beq.n	8004622 <DMA_SetConfig+0x10a>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a6e      	ldr	r2, [pc, #440]	; (8004760 <DMA_SetConfig+0x248>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d03b      	beq.n	8004622 <DMA_SetConfig+0x10a>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a6d      	ldr	r2, [pc, #436]	; (8004764 <DMA_SetConfig+0x24c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d036      	beq.n	8004622 <DMA_SetConfig+0x10a>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a6b      	ldr	r2, [pc, #428]	; (8004768 <DMA_SetConfig+0x250>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d031      	beq.n	8004622 <DMA_SetConfig+0x10a>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a6a      	ldr	r2, [pc, #424]	; (800476c <DMA_SetConfig+0x254>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d02c      	beq.n	8004622 <DMA_SetConfig+0x10a>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a68      	ldr	r2, [pc, #416]	; (8004770 <DMA_SetConfig+0x258>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d027      	beq.n	8004622 <DMA_SetConfig+0x10a>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a67      	ldr	r2, [pc, #412]	; (8004774 <DMA_SetConfig+0x25c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d022      	beq.n	8004622 <DMA_SetConfig+0x10a>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a65      	ldr	r2, [pc, #404]	; (8004778 <DMA_SetConfig+0x260>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01d      	beq.n	8004622 <DMA_SetConfig+0x10a>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a64      	ldr	r2, [pc, #400]	; (800477c <DMA_SetConfig+0x264>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d018      	beq.n	8004622 <DMA_SetConfig+0x10a>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a62      	ldr	r2, [pc, #392]	; (8004780 <DMA_SetConfig+0x268>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <DMA_SetConfig+0x10a>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a61      	ldr	r2, [pc, #388]	; (8004784 <DMA_SetConfig+0x26c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00e      	beq.n	8004622 <DMA_SetConfig+0x10a>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a5f      	ldr	r2, [pc, #380]	; (8004788 <DMA_SetConfig+0x270>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d009      	beq.n	8004622 <DMA_SetConfig+0x10a>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a5e      	ldr	r2, [pc, #376]	; (800478c <DMA_SetConfig+0x274>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d004      	beq.n	8004622 <DMA_SetConfig+0x10a>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a5c      	ldr	r2, [pc, #368]	; (8004790 <DMA_SetConfig+0x278>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d101      	bne.n	8004626 <DMA_SetConfig+0x10e>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <DMA_SetConfig+0x110>
 8004626:	2300      	movs	r3, #0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00d      	beq.n	8004648 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004634:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d004      	beq.n	8004648 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004646:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a39      	ldr	r2, [pc, #228]	; (8004734 <DMA_SetConfig+0x21c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d04a      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a38      	ldr	r2, [pc, #224]	; (8004738 <DMA_SetConfig+0x220>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d045      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a36      	ldr	r2, [pc, #216]	; (800473c <DMA_SetConfig+0x224>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d040      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a35      	ldr	r2, [pc, #212]	; (8004740 <DMA_SetConfig+0x228>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d03b      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a33      	ldr	r2, [pc, #204]	; (8004744 <DMA_SetConfig+0x22c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d036      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a32      	ldr	r2, [pc, #200]	; (8004748 <DMA_SetConfig+0x230>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d031      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a30      	ldr	r2, [pc, #192]	; (800474c <DMA_SetConfig+0x234>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d02c      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a2f      	ldr	r2, [pc, #188]	; (8004750 <DMA_SetConfig+0x238>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d027      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2d      	ldr	r2, [pc, #180]	; (8004754 <DMA_SetConfig+0x23c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d022      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a2c      	ldr	r2, [pc, #176]	; (8004758 <DMA_SetConfig+0x240>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d01d      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a2a      	ldr	r2, [pc, #168]	; (800475c <DMA_SetConfig+0x244>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d018      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a29      	ldr	r2, [pc, #164]	; (8004760 <DMA_SetConfig+0x248>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d013      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a27      	ldr	r2, [pc, #156]	; (8004764 <DMA_SetConfig+0x24c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00e      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a26      	ldr	r2, [pc, #152]	; (8004768 <DMA_SetConfig+0x250>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d009      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a24      	ldr	r2, [pc, #144]	; (800476c <DMA_SetConfig+0x254>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <DMA_SetConfig+0x1d0>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a23      	ldr	r2, [pc, #140]	; (8004770 <DMA_SetConfig+0x258>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d101      	bne.n	80046ec <DMA_SetConfig+0x1d4>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <DMA_SetConfig+0x1d6>
 80046ec:	2300      	movs	r3, #0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d059      	beq.n	80047a6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	223f      	movs	r2, #63	; 0x3f
 80046fc:	409a      	lsls	r2, r3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004710:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d138      	bne.n	8004794 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004732:	e086      	b.n	8004842 <DMA_SetConfig+0x32a>
 8004734:	40020010 	.word	0x40020010
 8004738:	40020028 	.word	0x40020028
 800473c:	40020040 	.word	0x40020040
 8004740:	40020058 	.word	0x40020058
 8004744:	40020070 	.word	0x40020070
 8004748:	40020088 	.word	0x40020088
 800474c:	400200a0 	.word	0x400200a0
 8004750:	400200b8 	.word	0x400200b8
 8004754:	40020410 	.word	0x40020410
 8004758:	40020428 	.word	0x40020428
 800475c:	40020440 	.word	0x40020440
 8004760:	40020458 	.word	0x40020458
 8004764:	40020470 	.word	0x40020470
 8004768:	40020488 	.word	0x40020488
 800476c:	400204a0 	.word	0x400204a0
 8004770:	400204b8 	.word	0x400204b8
 8004774:	58025408 	.word	0x58025408
 8004778:	5802541c 	.word	0x5802541c
 800477c:	58025430 	.word	0x58025430
 8004780:	58025444 	.word	0x58025444
 8004784:	58025458 	.word	0x58025458
 8004788:	5802546c 	.word	0x5802546c
 800478c:	58025480 	.word	0x58025480
 8004790:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	60da      	str	r2, [r3, #12]
}
 80047a4:	e04d      	b.n	8004842 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a29      	ldr	r2, [pc, #164]	; (8004850 <DMA_SetConfig+0x338>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d022      	beq.n	80047f6 <DMA_SetConfig+0x2de>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a27      	ldr	r2, [pc, #156]	; (8004854 <DMA_SetConfig+0x33c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01d      	beq.n	80047f6 <DMA_SetConfig+0x2de>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a26      	ldr	r2, [pc, #152]	; (8004858 <DMA_SetConfig+0x340>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d018      	beq.n	80047f6 <DMA_SetConfig+0x2de>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a24      	ldr	r2, [pc, #144]	; (800485c <DMA_SetConfig+0x344>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <DMA_SetConfig+0x2de>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a23      	ldr	r2, [pc, #140]	; (8004860 <DMA_SetConfig+0x348>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00e      	beq.n	80047f6 <DMA_SetConfig+0x2de>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a21      	ldr	r2, [pc, #132]	; (8004864 <DMA_SetConfig+0x34c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <DMA_SetConfig+0x2de>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a20      	ldr	r2, [pc, #128]	; (8004868 <DMA_SetConfig+0x350>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <DMA_SetConfig+0x2de>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1e      	ldr	r2, [pc, #120]	; (800486c <DMA_SetConfig+0x354>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d101      	bne.n	80047fa <DMA_SetConfig+0x2e2>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <DMA_SetConfig+0x2e4>
 80047fa:	2300      	movs	r3, #0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d020      	beq.n	8004842 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004804:	f003 031f 	and.w	r3, r3, #31
 8004808:	2201      	movs	r2, #1
 800480a:	409a      	lsls	r2, r3
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d108      	bne.n	8004832 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	60da      	str	r2, [r3, #12]
}
 8004830:	e007      	b.n	8004842 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	60da      	str	r2, [r3, #12]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	58025408 	.word	0x58025408
 8004854:	5802541c 	.word	0x5802541c
 8004858:	58025430 	.word	0x58025430
 800485c:	58025444 	.word	0x58025444
 8004860:	58025458 	.word	0x58025458
 8004864:	5802546c 	.word	0x5802546c
 8004868:	58025480 	.word	0x58025480
 800486c:	58025494 	.word	0x58025494

08004870 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a42      	ldr	r2, [pc, #264]	; (8004988 <DMA_CalcBaseAndBitshift+0x118>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d04a      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a41      	ldr	r2, [pc, #260]	; (800498c <DMA_CalcBaseAndBitshift+0x11c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d045      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a3f      	ldr	r2, [pc, #252]	; (8004990 <DMA_CalcBaseAndBitshift+0x120>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d040      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a3e      	ldr	r2, [pc, #248]	; (8004994 <DMA_CalcBaseAndBitshift+0x124>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d03b      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a3c      	ldr	r2, [pc, #240]	; (8004998 <DMA_CalcBaseAndBitshift+0x128>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d036      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a3b      	ldr	r2, [pc, #236]	; (800499c <DMA_CalcBaseAndBitshift+0x12c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d031      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a39      	ldr	r2, [pc, #228]	; (80049a0 <DMA_CalcBaseAndBitshift+0x130>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d02c      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a38      	ldr	r2, [pc, #224]	; (80049a4 <DMA_CalcBaseAndBitshift+0x134>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d027      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a36      	ldr	r2, [pc, #216]	; (80049a8 <DMA_CalcBaseAndBitshift+0x138>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d022      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a35      	ldr	r2, [pc, #212]	; (80049ac <DMA_CalcBaseAndBitshift+0x13c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d01d      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a33      	ldr	r2, [pc, #204]	; (80049b0 <DMA_CalcBaseAndBitshift+0x140>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d018      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a32      	ldr	r2, [pc, #200]	; (80049b4 <DMA_CalcBaseAndBitshift+0x144>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d013      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a30      	ldr	r2, [pc, #192]	; (80049b8 <DMA_CalcBaseAndBitshift+0x148>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00e      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a2f      	ldr	r2, [pc, #188]	; (80049bc <DMA_CalcBaseAndBitshift+0x14c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d009      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a2d      	ldr	r2, [pc, #180]	; (80049c0 <DMA_CalcBaseAndBitshift+0x150>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d004      	beq.n	8004918 <DMA_CalcBaseAndBitshift+0xa8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a2c      	ldr	r2, [pc, #176]	; (80049c4 <DMA_CalcBaseAndBitshift+0x154>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d101      	bne.n	800491c <DMA_CalcBaseAndBitshift+0xac>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <DMA_CalcBaseAndBitshift+0xae>
 800491c:	2300      	movs	r3, #0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d024      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	3b10      	subs	r3, #16
 800492a:	4a27      	ldr	r2, [pc, #156]	; (80049c8 <DMA_CalcBaseAndBitshift+0x158>)
 800492c:	fba2 2303 	umull	r2, r3, r2, r3
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	4a24      	ldr	r2, [pc, #144]	; (80049cc <DMA_CalcBaseAndBitshift+0x15c>)
 800493c:	5cd3      	ldrb	r3, [r2, r3]
 800493e:	461a      	mov	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d908      	bls.n	800495c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	4b1f      	ldr	r3, [pc, #124]	; (80049d0 <DMA_CalcBaseAndBitshift+0x160>)
 8004952:	4013      	ands	r3, r2
 8004954:	1d1a      	adds	r2, r3, #4
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	659a      	str	r2, [r3, #88]	; 0x58
 800495a:	e00d      	b.n	8004978 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <DMA_CalcBaseAndBitshift+0x160>)
 8004964:	4013      	ands	r3, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6593      	str	r3, [r2, #88]	; 0x58
 800496a:	e005      	b.n	8004978 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	40020010 	.word	0x40020010
 800498c:	40020028 	.word	0x40020028
 8004990:	40020040 	.word	0x40020040
 8004994:	40020058 	.word	0x40020058
 8004998:	40020070 	.word	0x40020070
 800499c:	40020088 	.word	0x40020088
 80049a0:	400200a0 	.word	0x400200a0
 80049a4:	400200b8 	.word	0x400200b8
 80049a8:	40020410 	.word	0x40020410
 80049ac:	40020428 	.word	0x40020428
 80049b0:	40020440 	.word	0x40020440
 80049b4:	40020458 	.word	0x40020458
 80049b8:	40020470 	.word	0x40020470
 80049bc:	40020488 	.word	0x40020488
 80049c0:	400204a0 	.word	0x400204a0
 80049c4:	400204b8 	.word	0x400204b8
 80049c8:	aaaaaaab 	.word	0xaaaaaaab
 80049cc:	0800de00 	.word	0x0800de00
 80049d0:	fffffc00 	.word	0xfffffc00

080049d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d120      	bne.n	8004a2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d858      	bhi.n	8004aa2 <DMA_CheckFifoParam+0xce>
 80049f0:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <DMA_CheckFifoParam+0x24>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a09 	.word	0x08004a09
 80049fc:	08004a1b 	.word	0x08004a1b
 8004a00:	08004a09 	.word	0x08004a09
 8004a04:	08004aa3 	.word	0x08004aa3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d048      	beq.n	8004aa6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a18:	e045      	b.n	8004aa6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a22:	d142      	bne.n	8004aaa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a28:	e03f      	b.n	8004aaa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a32:	d123      	bne.n	8004a7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d838      	bhi.n	8004aae <DMA_CheckFifoParam+0xda>
 8004a3c:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <DMA_CheckFifoParam+0x70>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004a55 	.word	0x08004a55
 8004a48:	08004a5b 	.word	0x08004a5b
 8004a4c:	08004a55 	.word	0x08004a55
 8004a50:	08004a6d 	.word	0x08004a6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
        break;
 8004a58:	e030      	b.n	8004abc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d025      	beq.n	8004ab2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a6a:	e022      	b.n	8004ab2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a74:	d11f      	bne.n	8004ab6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a7a:	e01c      	b.n	8004ab6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d902      	bls.n	8004a8a <DMA_CheckFifoParam+0xb6>
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d003      	beq.n	8004a90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004a88:	e018      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a8e:	e015      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00e      	beq.n	8004aba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8004aa0:	e00b      	b.n	8004aba <DMA_CheckFifoParam+0xe6>
        break;
 8004aa2:	bf00      	nop
 8004aa4:	e00a      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
        break;
 8004aa6:	bf00      	nop
 8004aa8:	e008      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
        break;
 8004aaa:	bf00      	nop
 8004aac:	e006      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
        break;
 8004aae:	bf00      	nop
 8004ab0:	e004      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
        break;
 8004ab2:	bf00      	nop
 8004ab4:	e002      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
        break;
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <DMA_CheckFifoParam+0xe8>
    break;
 8004aba:	bf00      	nop
    }
  }

  return status;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop

08004acc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a38      	ldr	r2, [pc, #224]	; (8004bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d022      	beq.n	8004b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a36      	ldr	r2, [pc, #216]	; (8004bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01d      	beq.n	8004b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a35      	ldr	r2, [pc, #212]	; (8004bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d018      	beq.n	8004b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a33      	ldr	r2, [pc, #204]	; (8004bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a32      	ldr	r2, [pc, #200]	; (8004bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a30      	ldr	r2, [pc, #192]	; (8004bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a2d      	ldr	r2, [pc, #180]	; (8004bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d101      	bne.n	8004b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01a      	beq.n	8004b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	3b08      	subs	r3, #8
 8004b3c:	4a28      	ldr	r2, [pc, #160]	; (8004be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	091b      	lsrs	r3, r3, #4
 8004b44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4b26      	ldr	r3, [pc, #152]	; (8004be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	461a      	mov	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a24      	ldr	r2, [pc, #144]	; (8004be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004b58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	2201      	movs	r2, #1
 8004b62:	409a      	lsls	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004b68:	e024      	b.n	8004bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	3b10      	subs	r3, #16
 8004b72:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4a1c      	ldr	r2, [pc, #112]	; (8004bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d806      	bhi.n	8004b92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4a1b      	ldr	r2, [pc, #108]	; (8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d902      	bls.n	8004b92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	3308      	adds	r3, #8
 8004b90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4b18      	ldr	r3, [pc, #96]	; (8004bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a16      	ldr	r2, [pc, #88]	; (8004bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004ba4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	2201      	movs	r2, #1
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	58025408 	.word	0x58025408
 8004bc4:	5802541c 	.word	0x5802541c
 8004bc8:	58025430 	.word	0x58025430
 8004bcc:	58025444 	.word	0x58025444
 8004bd0:	58025458 	.word	0x58025458
 8004bd4:	5802546c 	.word	0x5802546c
 8004bd8:	58025480 	.word	0x58025480
 8004bdc:	58025494 	.word	0x58025494
 8004be0:	cccccccd 	.word	0xcccccccd
 8004be4:	16009600 	.word	0x16009600
 8004be8:	58025880 	.word	0x58025880
 8004bec:	aaaaaaab 	.word	0xaaaaaaab
 8004bf0:	400204b8 	.word	0x400204b8
 8004bf4:	4002040f 	.word	0x4002040f
 8004bf8:	10008200 	.word	0x10008200
 8004bfc:	40020880 	.word	0x40020880

08004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d04a      	beq.n	8004cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d847      	bhi.n	8004cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a25      	ldr	r2, [pc, #148]	; (8004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d022      	beq.n	8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a24      	ldr	r2, [pc, #144]	; (8004cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d01d      	beq.n	8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a22      	ldr	r2, [pc, #136]	; (8004cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d018      	beq.n	8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a21      	ldr	r2, [pc, #132]	; (8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d013      	beq.n	8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1f      	ldr	r2, [pc, #124]	; (8004cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00e      	beq.n	8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1e      	ldr	r2, [pc, #120]	; (8004ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d009      	beq.n	8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1c      	ldr	r2, [pc, #112]	; (8004cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1b      	ldr	r2, [pc, #108]	; (8004cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d101      	bne.n	8004c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c70:	2300      	movs	r3, #0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	461a      	mov	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a15      	ldr	r2, [pc, #84]	; (8004cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004c88:	671a      	str	r2, [r3, #112]	; 0x70
 8004c8a:	e009      	b.n	8004ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004c90:	4413      	add	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	461a      	mov	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a11      	ldr	r2, [pc, #68]	; (8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004c9e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	58025408 	.word	0x58025408
 8004cbc:	5802541c 	.word	0x5802541c
 8004cc0:	58025430 	.word	0x58025430
 8004cc4:	58025444 	.word	0x58025444
 8004cc8:	58025458 	.word	0x58025458
 8004ccc:	5802546c 	.word	0x5802546c
 8004cd0:	58025480 	.word	0x58025480
 8004cd4:	58025494 	.word	0x58025494
 8004cd8:	1600963f 	.word	0x1600963f
 8004cdc:	58025940 	.word	0x58025940
 8004ce0:	1000823f 	.word	0x1000823f
 8004ce4:	40020940 	.word	0x40020940

08004ce8 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	7a1b      	ldrb	r3, [r3, #8]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d155      	bne.n	8004dae <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a4b      	ldr	r2, [pc, #300]	; (8004e34 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d049      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a49      	ldr	r2, [pc, #292]	; (8004e38 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d044      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a48      	ldr	r2, [pc, #288]	; (8004e3c <HAL_DMAEx_ConfigMuxSync+0x154>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d03f      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a46      	ldr	r2, [pc, #280]	; (8004e40 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d03a      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a45      	ldr	r2, [pc, #276]	; (8004e44 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d035      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a43      	ldr	r2, [pc, #268]	; (8004e48 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d030      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a42      	ldr	r2, [pc, #264]	; (8004e4c <HAL_DMAEx_ConfigMuxSync+0x164>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d02b      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a40      	ldr	r2, [pc, #256]	; (8004e50 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d026      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a3f      	ldr	r2, [pc, #252]	; (8004e54 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d021      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a3d      	ldr	r2, [pc, #244]	; (8004e58 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d01c      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a3c      	ldr	r2, [pc, #240]	; (8004e5c <HAL_DMAEx_ConfigMuxSync+0x174>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d017      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a3a      	ldr	r2, [pc, #232]	; (8004e60 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d012      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a39      	ldr	r2, [pc, #228]	; (8004e64 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00d      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a37      	ldr	r2, [pc, #220]	; (8004e68 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d008      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a36      	ldr	r2, [pc, #216]	; (8004e6c <HAL_DMAEx_ConfigMuxSync+0x184>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a34      	ldr	r2, [pc, #208]	; (8004e70 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d131      	bne.n	8004e1e <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e02f      	b.n	8004e28 <HAL_DMAEx_ConfigMuxSync+0x140>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dda:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8004dde:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	b2d9      	uxtb	r1, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	061a      	lsls	r2, r3, #24
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	04db      	lsls	r3, r3, #19
 8004df4:	431a      	orrs	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	7a1b      	ldrb	r3, [r3, #8]
 8004dfe:	041b      	lsls	r3, r3, #16
 8004e00:	431a      	orrs	r2, r3
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	7a5b      	ldrb	r3, [r3, #9]
 8004e06:	025b      	lsls	r3, r3, #9
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e004      	b.n	8004e28 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
  }
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	40020010 	.word	0x40020010
 8004e38:	40020028 	.word	0x40020028
 8004e3c:	40020040 	.word	0x40020040
 8004e40:	40020058 	.word	0x40020058
 8004e44:	40020070 	.word	0x40020070
 8004e48:	40020088 	.word	0x40020088
 8004e4c:	400200a0 	.word	0x400200a0
 8004e50:	400200b8 	.word	0x400200b8
 8004e54:	40020410 	.word	0x40020410
 8004e58:	40020428 	.word	0x40020428
 8004e5c:	40020440 	.word	0x40020440
 8004e60:	40020458 	.word	0x40020458
 8004e64:	40020470 	.word	0x40020470
 8004e68:	40020488 	.word	0x40020488
 8004e6c:	400204a0 	.word	0x400204a0
 8004e70:	400204b8 	.word	0x400204b8

08004e74 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01a      	beq.n	8004ec2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ea4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d022      	beq.n	8004f10 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d01a      	beq.n	8004f10 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ee4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ee8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ef2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	4798      	blx	r3
      }
    }
  }
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b089      	sub	sp, #36	; 0x24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f26:	4b89      	ldr	r3, [pc, #548]	; (800514c <HAL_GPIO_Init+0x234>)
 8004f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f2a:	e194      	b.n	8005256 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	2101      	movs	r1, #1
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	fa01 f303 	lsl.w	r3, r1, r3
 8004f38:	4013      	ands	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 8186 	beq.w	8005250 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f003 0303 	and.w	r3, r3, #3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d005      	beq.n	8004f5c <HAL_GPIO_Init+0x44>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d130      	bne.n	8004fbe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	2203      	movs	r2, #3
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4013      	ands	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f92:	2201      	movs	r2, #1
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	091b      	lsrs	r3, r3, #4
 8004fa8:	f003 0201 	and.w	r2, r3, #1
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d017      	beq.n	8004ffa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d123      	bne.n	800504e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	08da      	lsrs	r2, r3, #3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3208      	adds	r2, #8
 800500e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	220f      	movs	r2, #15
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	4313      	orrs	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	08da      	lsrs	r2, r3, #3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3208      	adds	r2, #8
 8005048:	69b9      	ldr	r1, [r7, #24]
 800504a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	2203      	movs	r2, #3
 800505a:	fa02 f303 	lsl.w	r3, r2, r3
 800505e:	43db      	mvns	r3, r3
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	4013      	ands	r3, r2
 8005064:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f003 0203 	and.w	r2, r3, #3
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	4313      	orrs	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 80e0 	beq.w	8005250 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005090:	4b2f      	ldr	r3, [pc, #188]	; (8005150 <HAL_GPIO_Init+0x238>)
 8005092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005096:	4a2e      	ldr	r2, [pc, #184]	; (8005150 <HAL_GPIO_Init+0x238>)
 8005098:	f043 0302 	orr.w	r3, r3, #2
 800509c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050a0:	4b2b      	ldr	r3, [pc, #172]	; (8005150 <HAL_GPIO_Init+0x238>)
 80050a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050ae:	4a29      	ldr	r2, [pc, #164]	; (8005154 <HAL_GPIO_Init+0x23c>)
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	089b      	lsrs	r3, r3, #2
 80050b4:	3302      	adds	r3, #2
 80050b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	220f      	movs	r2, #15
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	43db      	mvns	r3, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4013      	ands	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a20      	ldr	r2, [pc, #128]	; (8005158 <HAL_GPIO_Init+0x240>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d052      	beq.n	8005180 <HAL_GPIO_Init+0x268>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a1f      	ldr	r2, [pc, #124]	; (800515c <HAL_GPIO_Init+0x244>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d031      	beq.n	8005146 <HAL_GPIO_Init+0x22e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a1e      	ldr	r2, [pc, #120]	; (8005160 <HAL_GPIO_Init+0x248>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d02b      	beq.n	8005142 <HAL_GPIO_Init+0x22a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <HAL_GPIO_Init+0x24c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d025      	beq.n	800513e <HAL_GPIO_Init+0x226>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <HAL_GPIO_Init+0x250>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01f      	beq.n	800513a <HAL_GPIO_Init+0x222>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1b      	ldr	r2, [pc, #108]	; (800516c <HAL_GPIO_Init+0x254>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d019      	beq.n	8005136 <HAL_GPIO_Init+0x21e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a1a      	ldr	r2, [pc, #104]	; (8005170 <HAL_GPIO_Init+0x258>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d013      	beq.n	8005132 <HAL_GPIO_Init+0x21a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a19      	ldr	r2, [pc, #100]	; (8005174 <HAL_GPIO_Init+0x25c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00d      	beq.n	800512e <HAL_GPIO_Init+0x216>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a18      	ldr	r2, [pc, #96]	; (8005178 <HAL_GPIO_Init+0x260>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <HAL_GPIO_Init+0x212>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a17      	ldr	r2, [pc, #92]	; (800517c <HAL_GPIO_Init+0x264>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d101      	bne.n	8005126 <HAL_GPIO_Init+0x20e>
 8005122:	2309      	movs	r3, #9
 8005124:	e02d      	b.n	8005182 <HAL_GPIO_Init+0x26a>
 8005126:	230a      	movs	r3, #10
 8005128:	e02b      	b.n	8005182 <HAL_GPIO_Init+0x26a>
 800512a:	2308      	movs	r3, #8
 800512c:	e029      	b.n	8005182 <HAL_GPIO_Init+0x26a>
 800512e:	2307      	movs	r3, #7
 8005130:	e027      	b.n	8005182 <HAL_GPIO_Init+0x26a>
 8005132:	2306      	movs	r3, #6
 8005134:	e025      	b.n	8005182 <HAL_GPIO_Init+0x26a>
 8005136:	2305      	movs	r3, #5
 8005138:	e023      	b.n	8005182 <HAL_GPIO_Init+0x26a>
 800513a:	2304      	movs	r3, #4
 800513c:	e021      	b.n	8005182 <HAL_GPIO_Init+0x26a>
 800513e:	2303      	movs	r3, #3
 8005140:	e01f      	b.n	8005182 <HAL_GPIO_Init+0x26a>
 8005142:	2302      	movs	r3, #2
 8005144:	e01d      	b.n	8005182 <HAL_GPIO_Init+0x26a>
 8005146:	2301      	movs	r3, #1
 8005148:	e01b      	b.n	8005182 <HAL_GPIO_Init+0x26a>
 800514a:	bf00      	nop
 800514c:	58000080 	.word	0x58000080
 8005150:	58024400 	.word	0x58024400
 8005154:	58000400 	.word	0x58000400
 8005158:	58020000 	.word	0x58020000
 800515c:	58020400 	.word	0x58020400
 8005160:	58020800 	.word	0x58020800
 8005164:	58020c00 	.word	0x58020c00
 8005168:	58021000 	.word	0x58021000
 800516c:	58021400 	.word	0x58021400
 8005170:	58021800 	.word	0x58021800
 8005174:	58021c00 	.word	0x58021c00
 8005178:	58022000 	.word	0x58022000
 800517c:	58022400 	.word	0x58022400
 8005180:	2300      	movs	r3, #0
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	f002 0203 	and.w	r2, r2, #3
 8005188:	0092      	lsls	r2, r2, #2
 800518a:	4093      	lsls	r3, r2
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005192:	4938      	ldr	r1, [pc, #224]	; (8005274 <HAL_GPIO_Init+0x35c>)
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	089b      	lsrs	r3, r3, #2
 8005198:	3302      	adds	r3, #2
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	43db      	mvns	r3, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4013      	ands	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	43db      	mvns	r3, r3
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	4013      	ands	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	43db      	mvns	r3, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4013      	ands	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	43db      	mvns	r3, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4013      	ands	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	3301      	adds	r3, #1
 8005254:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	f47f ae63 	bne.w	8004f2c <HAL_GPIO_Init+0x14>
  }
}
 8005266:	bf00      	nop
 8005268:	bf00      	nop
 800526a:	3724      	adds	r7, #36	; 0x24
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	58000400 	.word	0x58000400

08005278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	887b      	ldrh	r3, [r7, #2]
 800528a:	4013      	ands	r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
 8005294:	e001      	b.n	800529a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800529a:	7bfb      	ldrb	r3, [r7, #15]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	807b      	strh	r3, [r7, #2]
 80052b4:	4613      	mov	r3, r2
 80052b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052b8:	787b      	ldrb	r3, [r7, #1]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052be:	887a      	ldrh	r2, [r7, #2]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80052c4:	e003      	b.n	80052ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052c6:	887b      	ldrh	r3, [r7, #2]
 80052c8:	041a      	lsls	r2, r3, #16
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	619a      	str	r2, [r3, #24]
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	460b      	mov	r3, r1
 80052e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052ec:	887a      	ldrh	r2, [r7, #2]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4013      	ands	r3, r2
 80052f2:	041a      	lsls	r2, r3, #16
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	43d9      	mvns	r1, r3
 80052f8:	887b      	ldrh	r3, [r7, #2]
 80052fa:	400b      	ands	r3, r1
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	619a      	str	r2, [r3, #24]
}
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
	...

08005310 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e07f      	b.n	8005422 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fb fc9c 	bl	8000c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2224      	movs	r2, #36	; 0x24
 8005340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0201 	bic.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005360:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005370:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d107      	bne.n	800538a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005386:	609a      	str	r2, [r3, #8]
 8005388:	e006      	b.n	8005398 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005396:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d104      	bne.n	80053aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6859      	ldr	r1, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	4b1d      	ldr	r3, [pc, #116]	; (800542c <HAL_I2C_Init+0x11c>)
 80053b6:	430b      	orrs	r3, r1
 80053b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691a      	ldr	r2, [r3, #16]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	69d9      	ldr	r1, [r3, #28]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1a      	ldr	r2, [r3, #32]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	02008000 	.word	0x02008000

08005430 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	461a      	mov	r2, r3
 800543c:	460b      	mov	r3, r1
 800543e:	817b      	strh	r3, [r7, #10]
 8005440:	4613      	mov	r3, r2
 8005442:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b20      	cmp	r3, #32
 800544e:	f040 80da 	bne.w	8005606 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_I2C_Master_Transmit+0x30>
 800545c:	2302      	movs	r3, #2
 800545e:	e0d3      	b.n	8005608 <HAL_I2C_Master_Transmit+0x1d8>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005468:	f7fc fdfa 	bl	8002060 <HAL_GetTick>
 800546c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	2319      	movs	r3, #25
 8005474:	2201      	movs	r2, #1
 8005476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 f8f0 	bl	8005660 <I2C_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e0be      	b.n	8005608 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2221      	movs	r2, #33	; 0x21
 800548e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2210      	movs	r2, #16
 8005496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	893a      	ldrh	r2, [r7, #8]
 80054aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2bff      	cmp	r3, #255	; 0xff
 80054ba:	d90e      	bls.n	80054da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	22ff      	movs	r2, #255	; 0xff
 80054c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	8979      	ldrh	r1, [r7, #10]
 80054ca:	4b51      	ldr	r3, [pc, #324]	; (8005610 <HAL_I2C_Master_Transmit+0x1e0>)
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fa6c 	bl	80059b0 <I2C_TransferConfig>
 80054d8:	e06c      	b.n	80055b4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	8979      	ldrh	r1, [r7, #10]
 80054ec:	4b48      	ldr	r3, [pc, #288]	; (8005610 <HAL_I2C_Master_Transmit+0x1e0>)
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fa5b 	bl	80059b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80054fa:	e05b      	b.n	80055b4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	6a39      	ldr	r1, [r7, #32]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f8ed 	bl	80056e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e07b      	b.n	8005608 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	781a      	ldrb	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552a:	b29b      	uxth	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d034      	beq.n	80055b4 <HAL_I2C_Master_Transmit+0x184>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554e:	2b00      	cmp	r3, #0
 8005550:	d130      	bne.n	80055b4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	2200      	movs	r2, #0
 800555a:	2180      	movs	r1, #128	; 0x80
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f87f 	bl	8005660 <I2C_WaitOnFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e04d      	b.n	8005608 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	2bff      	cmp	r3, #255	; 0xff
 8005574:	d90e      	bls.n	8005594 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	22ff      	movs	r2, #255	; 0xff
 800557a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005580:	b2da      	uxtb	r2, r3
 8005582:	8979      	ldrh	r1, [r7, #10]
 8005584:	2300      	movs	r3, #0
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 fa0f 	bl	80059b0 <I2C_TransferConfig>
 8005592:	e00f      	b.n	80055b4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	8979      	ldrh	r1, [r7, #10]
 80055a6:	2300      	movs	r3, #0
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f9fe 	bl	80059b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d19e      	bne.n	80054fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	6a39      	ldr	r1, [r7, #32]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f8cc 	bl	8005760 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e01a      	b.n	8005608 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2220      	movs	r2, #32
 80055d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6859      	ldr	r1, [r3, #4]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <HAL_I2C_Master_Transmit+0x1e4>)
 80055e6:	400b      	ands	r3, r1
 80055e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e000      	b.n	8005608 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005606:	2302      	movs	r3, #2
  }
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	80002000 	.word	0x80002000
 8005614:	fe00e800 	.word	0xfe00e800

08005618 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b02      	cmp	r3, #2
 800562c:	d103      	bne.n	8005636 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2200      	movs	r2, #0
 8005634:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b01      	cmp	r3, #1
 8005642:	d007      	beq.n	8005654 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	619a      	str	r2, [r3, #24]
  }
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	4613      	mov	r3, r2
 800566e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005670:	e022      	b.n	80056b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005678:	d01e      	beq.n	80056b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567a:	f7fc fcf1 	bl	8002060 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d302      	bcc.n	8005690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d113      	bne.n	80056b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005694:	f043 0220 	orr.w	r2, r3, #32
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e00f      	b.n	80056d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	4013      	ands	r3, r2
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	bf0c      	ite	eq
 80056c8:	2301      	moveq	r3, #1
 80056ca:	2300      	movne	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	461a      	mov	r2, r3
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d0cd      	beq.n	8005672 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056ec:	e02c      	b.n	8005748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f870 	bl	80057d8 <I2C_IsErrorOccurred>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e02a      	b.n	8005758 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005708:	d01e      	beq.n	8005748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570a:	f7fc fca9 	bl	8002060 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	d302      	bcc.n	8005720 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d113      	bne.n	8005748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005724:	f043 0220 	orr.w	r2, r3, #32
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e007      	b.n	8005758 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b02      	cmp	r3, #2
 8005754:	d1cb      	bne.n	80056ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800576c:	e028      	b.n	80057c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f830 	bl	80057d8 <I2C_IsErrorOccurred>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e026      	b.n	80057d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005782:	f7fc fc6d 	bl	8002060 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	429a      	cmp	r2, r3
 8005790:	d302      	bcc.n	8005798 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d113      	bne.n	80057c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e007      	b.n	80057d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d1cf      	bne.n	800576e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	2b00      	cmp	r3, #0
 8005802:	d075      	beq.n	80058f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2210      	movs	r2, #16
 800580a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800580c:	e056      	b.n	80058bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005814:	d052      	beq.n	80058bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005816:	f7fc fc23 	bl	8002060 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	429a      	cmp	r2, r3
 8005824:	d302      	bcc.n	800582c <I2C_IsErrorOccurred+0x54>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d147      	bne.n	80058bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005836:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800583e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800584a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800584e:	d12e      	bne.n	80058ae <I2C_IsErrorOccurred+0xd6>
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005856:	d02a      	beq.n	80058ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005858:	7cfb      	ldrb	r3, [r7, #19]
 800585a:	2b20      	cmp	r3, #32
 800585c:	d027      	beq.n	80058ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800586c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800586e:	f7fc fbf7 	bl	8002060 <HAL_GetTick>
 8005872:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005874:	e01b      	b.n	80058ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005876:	f7fc fbf3 	bl	8002060 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b19      	cmp	r3, #25
 8005882:	d914      	bls.n	80058ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005888:	f043 0220 	orr.w	r2, r3, #32
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d1dc      	bne.n	8005876 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f003 0320 	and.w	r3, r3, #32
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	d003      	beq.n	80058d2 <I2C_IsErrorOccurred+0xfa>
 80058ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d09d      	beq.n	800580e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80058d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2220      	movs	r2, #32
 80058e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	f043 0304 	orr.w	r3, r3, #4
 80058e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	f043 0301 	orr.w	r3, r3, #1
 8005908:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005912:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00b      	beq.n	800593c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	f043 0308 	orr.w	r3, r3, #8
 800592a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005934:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	f043 0302 	orr.w	r3, r3, #2
 800594c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005956:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800595e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01c      	beq.n	80059a0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f7ff fe56 	bl	8005618 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6859      	ldr	r1, [r3, #4]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <I2C_IsErrorOccurred+0x1d4>)
 8005978:	400b      	ands	r3, r1
 800597a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	431a      	orrs	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80059a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3728      	adds	r7, #40	; 0x28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	fe00e800 	.word	0xfe00e800

080059b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	607b      	str	r3, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	817b      	strh	r3, [r7, #10]
 80059be:	4613      	mov	r3, r2
 80059c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059c2:	897b      	ldrh	r3, [r7, #10]
 80059c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059c8:	7a7b      	ldrb	r3, [r7, #9]
 80059ca:	041b      	lsls	r3, r3, #16
 80059cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059d0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	4313      	orrs	r3, r2
 80059da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059de:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	0d5b      	lsrs	r3, r3, #21
 80059ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80059ee:	4b08      	ldr	r3, [pc, #32]	; (8005a10 <I2C_TransferConfig+0x60>)
 80059f0:	430b      	orrs	r3, r1
 80059f2:	43db      	mvns	r3, r3
 80059f4:	ea02 0103 	and.w	r1, r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	03ff63ff 	.word	0x03ff63ff

08005a14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d138      	bne.n	8005a9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e032      	b.n	8005a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2224      	movs	r2, #36	; 0x24
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0201 	bic.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6819      	ldr	r1, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e000      	b.n	8005a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a9c:	2302      	movs	r3, #2
  }
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b085      	sub	sp, #20
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d139      	bne.n	8005b34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e033      	b.n	8005b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2224      	movs	r2, #36	; 0x24
 8005ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0201 	bic.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005afc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	e000      	b.n	8005b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b34:	2302      	movs	r3, #2
  }
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005b4c:	4b19      	ldr	r3, [pc, #100]	; (8005bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d00a      	beq.n	8005b6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005b58:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d001      	beq.n	8005b6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e01f      	b.n	8005baa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e01d      	b.n	8005baa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b6e:	4b11      	ldr	r3, [pc, #68]	; (8005bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f023 0207 	bic.w	r2, r3, #7
 8005b76:	490f      	ldr	r1, [pc, #60]	; (8005bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b7e:	f7fc fa6f 	bl	8002060 <HAL_GetTick>
 8005b82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b84:	e009      	b.n	8005b9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b86:	f7fc fa6b 	bl	8002060 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b94:	d901      	bls.n	8005b9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e007      	b.n	8005baa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b9a:	4b06      	ldr	r3, [pc, #24]	; (8005bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba6:	d1ee      	bne.n	8005b86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	58024800 	.word	0x58024800

08005bb8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005bc0:	f7fc fa4e 	bl	8002060 <HAL_GetTick>
 8005bc4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e05f      	b.n	8005c90 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d107      	bne.n	8005bec <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7fb fc47 	bl	8001470 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005be2:	f241 3188 	movw	r1, #5000	; 0x1388
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f85a 	bl	8005ca0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	021a      	lsls	r2, r3, #8
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2120      	movs	r1, #32
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f852 	bl	8005cbc <QSPI_WaitFlagStateUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005c1c:	7afb      	ldrb	r3, [r7, #11]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d135      	bne.n	8005c8e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <HAL_QSPI_Init+0xe0>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6852      	ldr	r2, [r2, #4]
 8005c30:	0611      	lsls	r1, r2, #24
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	68d2      	ldr	r2, [r2, #12]
 8005c36:	4311      	orrs	r1, r2
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	69d2      	ldr	r2, [r2, #28]
 8005c3c:	4311      	orrs	r1, r2
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6a12      	ldr	r2, [r2, #32]
 8005c42:	4311      	orrs	r1, r2
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6812      	ldr	r2, [r2, #0]
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	4b12      	ldr	r3, [pc, #72]	; (8005c9c <HAL_QSPI_Init+0xe4>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6912      	ldr	r2, [r2, #16]
 8005c5a:	0411      	lsls	r1, r2, #16
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6952      	ldr	r2, [r2, #20]
 8005c60:	4311      	orrs	r1, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6992      	ldr	r2, [r2, #24]
 8005c66:	4311      	orrs	r1, r2
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005c8e:	7afb      	ldrb	r3, [r7, #11]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	00ffff2f 	.word	0x00ffff2f
 8005c9c:	ffe0f8fe 	.word	0xffe0f8fe

08005ca0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005ccc:	e01a      	b.n	8005d04 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cd4:	d016      	beq.n	8005d04 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd6:	f7fc f9c3 	bl	8002060 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d302      	bcc.n	8005cec <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10b      	bne.n	8005d04 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2204      	movs	r2, #4
 8005cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf8:	f043 0201 	orr.w	r2, r3, #1
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e00e      	b.n	8005d22 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	bf14      	ite	ne
 8005d12:	2301      	movne	r3, #1
 8005d14:	2300      	moveq	r3, #0
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	461a      	mov	r2, r3
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d1d6      	bne.n	8005cce <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08c      	sub	sp, #48	; 0x30
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d102      	bne.n	8005d40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f000 bc1d 	b.w	800657a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 8087 	beq.w	8005e5c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d4e:	4b99      	ldr	r3, [pc, #612]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d58:	4b96      	ldr	r3, [pc, #600]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	2b10      	cmp	r3, #16
 8005d62:	d007      	beq.n	8005d74 <HAL_RCC_OscConfig+0x48>
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	2b18      	cmp	r3, #24
 8005d68:	d110      	bne.n	8005d8c <HAL_RCC_OscConfig+0x60>
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d10b      	bne.n	8005d8c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d74:	4b8f      	ldr	r3, [pc, #572]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d06c      	beq.n	8005e5a <HAL_RCC_OscConfig+0x12e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d168      	bne.n	8005e5a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e3f6      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d94:	d106      	bne.n	8005da4 <HAL_RCC_OscConfig+0x78>
 8005d96:	4b87      	ldr	r3, [pc, #540]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a86      	ldr	r2, [pc, #536]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e02e      	b.n	8005e02 <HAL_RCC_OscConfig+0xd6>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10c      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x9a>
 8005dac:	4b81      	ldr	r3, [pc, #516]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a80      	ldr	r2, [pc, #512]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	4b7e      	ldr	r3, [pc, #504]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a7d      	ldr	r2, [pc, #500]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	e01d      	b.n	8005e02 <HAL_RCC_OscConfig+0xd6>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dce:	d10c      	bne.n	8005dea <HAL_RCC_OscConfig+0xbe>
 8005dd0:	4b78      	ldr	r3, [pc, #480]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a77      	ldr	r2, [pc, #476]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	4b75      	ldr	r3, [pc, #468]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a74      	ldr	r2, [pc, #464]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	e00b      	b.n	8005e02 <HAL_RCC_OscConfig+0xd6>
 8005dea:	4b72      	ldr	r3, [pc, #456]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a71      	ldr	r2, [pc, #452]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	4b6f      	ldr	r3, [pc, #444]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a6e      	ldr	r2, [pc, #440]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d013      	beq.n	8005e32 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0a:	f7fc f929 	bl	8002060 <HAL_GetTick>
 8005e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e12:	f7fc f925 	bl	8002060 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b64      	cmp	r3, #100	; 0x64
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e3aa      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e24:	4b63      	ldr	r3, [pc, #396]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <HAL_RCC_OscConfig+0xe6>
 8005e30:	e014      	b.n	8005e5c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e32:	f7fc f915 	bl	8002060 <HAL_GetTick>
 8005e36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e38:	e008      	b.n	8005e4c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e3a:	f7fc f911 	bl	8002060 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b64      	cmp	r3, #100	; 0x64
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e396      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e4c:	4b59      	ldr	r3, [pc, #356]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f0      	bne.n	8005e3a <HAL_RCC_OscConfig+0x10e>
 8005e58:	e000      	b.n	8005e5c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 80cb 	beq.w	8006000 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e6a:	4b52      	ldr	r3, [pc, #328]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e72:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e74:	4b4f      	ldr	r3, [pc, #316]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e78:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d007      	beq.n	8005e90 <HAL_RCC_OscConfig+0x164>
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	2b18      	cmp	r3, #24
 8005e84:	d156      	bne.n	8005f34 <HAL_RCC_OscConfig+0x208>
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d151      	bne.n	8005f34 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e90:	4b48      	ldr	r3, [pc, #288]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x17c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e368      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ea8:	4b42      	ldr	r3, [pc, #264]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f023 0219 	bic.w	r2, r3, #25
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	493f      	ldr	r1, [pc, #252]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005eba:	f7fc f8d1 	bl	8002060 <HAL_GetTick>
 8005ebe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ec2:	f7fc f8cd 	bl	8002060 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e352      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ed4:	4b37      	ldr	r3, [pc, #220]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee0:	f7fc f8ee 	bl	80020c0 <HAL_GetREVID>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f241 0203 	movw	r2, #4099	; 0x1003
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d817      	bhi.n	8005f1e <HAL_RCC_OscConfig+0x1f2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b40      	cmp	r3, #64	; 0x40
 8005ef4:	d108      	bne.n	8005f08 <HAL_RCC_OscConfig+0x1dc>
 8005ef6:	4b2f      	ldr	r3, [pc, #188]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005efe:	4a2d      	ldr	r2, [pc, #180]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f04:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f06:	e07b      	b.n	8006000 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f08:	4b2a      	ldr	r3, [pc, #168]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	031b      	lsls	r3, r3, #12
 8005f16:	4927      	ldr	r1, [pc, #156]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f1c:	e070      	b.n	8006000 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f1e:	4b25      	ldr	r3, [pc, #148]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	061b      	lsls	r3, r3, #24
 8005f2c:	4921      	ldr	r1, [pc, #132]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f32:	e065      	b.n	8006000 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d048      	beq.n	8005fce <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f3c:	4b1d      	ldr	r3, [pc, #116]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f023 0219 	bic.w	r2, r3, #25
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	491a      	ldr	r1, [pc, #104]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4e:	f7fc f887 	bl	8002060 <HAL_GetTick>
 8005f52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f56:	f7fc f883 	bl	8002060 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e308      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f68:	4b12      	ldr	r3, [pc, #72]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0f0      	beq.n	8005f56 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f74:	f7fc f8a4 	bl	80020c0 <HAL_GetREVID>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d81a      	bhi.n	8005fb8 <HAL_RCC_OscConfig+0x28c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b40      	cmp	r3, #64	; 0x40
 8005f88:	d108      	bne.n	8005f9c <HAL_RCC_OscConfig+0x270>
 8005f8a:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f92:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f98:	6053      	str	r3, [r2, #4]
 8005f9a:	e031      	b.n	8006000 <HAL_RCC_OscConfig+0x2d4>
 8005f9c:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	031b      	lsls	r3, r3, #12
 8005faa:	4902      	ldr	r1, [pc, #8]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	604b      	str	r3, [r1, #4]
 8005fb0:	e026      	b.n	8006000 <HAL_RCC_OscConfig+0x2d4>
 8005fb2:	bf00      	nop
 8005fb4:	58024400 	.word	0x58024400
 8005fb8:	4b9a      	ldr	r3, [pc, #616]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	061b      	lsls	r3, r3, #24
 8005fc6:	4997      	ldr	r1, [pc, #604]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	604b      	str	r3, [r1, #4]
 8005fcc:	e018      	b.n	8006000 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fce:	4b95      	ldr	r3, [pc, #596]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a94      	ldr	r2, [pc, #592]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fda:	f7fc f841 	bl	8002060 <HAL_GetTick>
 8005fde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fe2:	f7fc f83d 	bl	8002060 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e2c2      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ff4:	4b8b      	ldr	r3, [pc, #556]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1f0      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 80a9 	beq.w	8006160 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800600e:	4b85      	ldr	r3, [pc, #532]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006016:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006018:	4b82      	ldr	r3, [pc, #520]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	2b08      	cmp	r3, #8
 8006022:	d007      	beq.n	8006034 <HAL_RCC_OscConfig+0x308>
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	2b18      	cmp	r3, #24
 8006028:	d13a      	bne.n	80060a0 <HAL_RCC_OscConfig+0x374>
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f003 0303 	and.w	r3, r3, #3
 8006030:	2b01      	cmp	r3, #1
 8006032:	d135      	bne.n	80060a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006034:	4b7b      	ldr	r3, [pc, #492]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <HAL_RCC_OscConfig+0x320>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	2b80      	cmp	r3, #128	; 0x80
 8006046:	d001      	beq.n	800604c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e296      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800604c:	f7fc f838 	bl	80020c0 <HAL_GetREVID>
 8006050:	4603      	mov	r3, r0
 8006052:	f241 0203 	movw	r2, #4099	; 0x1003
 8006056:	4293      	cmp	r3, r2
 8006058:	d817      	bhi.n	800608a <HAL_RCC_OscConfig+0x35e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	2b20      	cmp	r3, #32
 8006060:	d108      	bne.n	8006074 <HAL_RCC_OscConfig+0x348>
 8006062:	4b70      	ldr	r3, [pc, #448]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800606a:	4a6e      	ldr	r2, [pc, #440]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 800606c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006070:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006072:	e075      	b.n	8006160 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006074:	4b6b      	ldr	r3, [pc, #428]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	069b      	lsls	r3, r3, #26
 8006082:	4968      	ldr	r1, [pc, #416]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006084:	4313      	orrs	r3, r2
 8006086:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006088:	e06a      	b.n	8006160 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800608a:	4b66      	ldr	r3, [pc, #408]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	061b      	lsls	r3, r3, #24
 8006098:	4962      	ldr	r1, [pc, #392]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 800609a:	4313      	orrs	r3, r2
 800609c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800609e:	e05f      	b.n	8006160 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d042      	beq.n	800612e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80060a8:	4b5e      	ldr	r3, [pc, #376]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a5d      	ldr	r2, [pc, #372]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80060ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b4:	f7fb ffd4 	bl	8002060 <HAL_GetTick>
 80060b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060bc:	f7fb ffd0 	bl	8002060 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e255      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060ce:	4b55      	ldr	r3, [pc, #340]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060da:	f7fb fff1 	bl	80020c0 <HAL_GetREVID>
 80060de:	4603      	mov	r3, r0
 80060e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d817      	bhi.n	8006118 <HAL_RCC_OscConfig+0x3ec>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d108      	bne.n	8006102 <HAL_RCC_OscConfig+0x3d6>
 80060f0:	4b4c      	ldr	r3, [pc, #304]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060f8:	4a4a      	ldr	r2, [pc, #296]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80060fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060fe:	6053      	str	r3, [r2, #4]
 8006100:	e02e      	b.n	8006160 <HAL_RCC_OscConfig+0x434>
 8006102:	4b48      	ldr	r3, [pc, #288]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	069b      	lsls	r3, r3, #26
 8006110:	4944      	ldr	r1, [pc, #272]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006112:	4313      	orrs	r3, r2
 8006114:	604b      	str	r3, [r1, #4]
 8006116:	e023      	b.n	8006160 <HAL_RCC_OscConfig+0x434>
 8006118:	4b42      	ldr	r3, [pc, #264]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	061b      	lsls	r3, r3, #24
 8006126:	493f      	ldr	r1, [pc, #252]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006128:	4313      	orrs	r3, r2
 800612a:	60cb      	str	r3, [r1, #12]
 800612c:	e018      	b.n	8006160 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800612e:	4b3d      	ldr	r3, [pc, #244]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a3c      	ldr	r2, [pc, #240]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613a:	f7fb ff91 	bl	8002060 <HAL_GetTick>
 800613e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006140:	e008      	b.n	8006154 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006142:	f7fb ff8d 	bl	8002060 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e212      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006154:	4b33      	ldr	r3, [pc, #204]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f0      	bne.n	8006142 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d036      	beq.n	80061da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d019      	beq.n	80061a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006174:	4b2b      	ldr	r3, [pc, #172]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006178:	4a2a      	ldr	r2, [pc, #168]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 800617a:	f043 0301 	orr.w	r3, r3, #1
 800617e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006180:	f7fb ff6e 	bl	8002060 <HAL_GetTick>
 8006184:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006188:	f7fb ff6a 	bl	8002060 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e1ef      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800619a:	4b22      	ldr	r3, [pc, #136]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 800619c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0x45c>
 80061a6:	e018      	b.n	80061da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061a8:	4b1e      	ldr	r3, [pc, #120]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80061aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ac:	4a1d      	ldr	r2, [pc, #116]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80061ae:	f023 0301 	bic.w	r3, r3, #1
 80061b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b4:	f7fb ff54 	bl	8002060 <HAL_GetTick>
 80061b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061bc:	f7fb ff50 	bl	8002060 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e1d5      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061ce:	4b15      	ldr	r3, [pc, #84]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80061d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1f0      	bne.n	80061bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d039      	beq.n	800625a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d01c      	beq.n	8006228 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061ee:	4b0d      	ldr	r3, [pc, #52]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a0c      	ldr	r2, [pc, #48]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80061f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061fa:	f7fb ff31 	bl	8002060 <HAL_GetTick>
 80061fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006202:	f7fb ff2d 	bl	8002060 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e1b2      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006214:	4b03      	ldr	r3, [pc, #12]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0f0      	beq.n	8006202 <HAL_RCC_OscConfig+0x4d6>
 8006220:	e01b      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
 8006222:	bf00      	nop
 8006224:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006228:	4b9b      	ldr	r3, [pc, #620]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a9a      	ldr	r2, [pc, #616]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800622e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006232:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006234:	f7fb ff14 	bl	8002060 <HAL_GetTick>
 8006238:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800623a:	e008      	b.n	800624e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800623c:	f7fb ff10 	bl	8002060 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e195      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800624e:	4b92      	ldr	r3, [pc, #584]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1f0      	bne.n	800623c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 8081 	beq.w	800636a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006268:	4b8c      	ldr	r3, [pc, #560]	; (800649c <HAL_RCC_OscConfig+0x770>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a8b      	ldr	r2, [pc, #556]	; (800649c <HAL_RCC_OscConfig+0x770>)
 800626e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006272:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006274:	f7fb fef4 	bl	8002060 <HAL_GetTick>
 8006278:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800627c:	f7fb fef0 	bl	8002060 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b64      	cmp	r3, #100	; 0x64
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e175      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800628e:	4b83      	ldr	r3, [pc, #524]	; (800649c <HAL_RCC_OscConfig+0x770>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f0      	beq.n	800627c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d106      	bne.n	80062b0 <HAL_RCC_OscConfig+0x584>
 80062a2:	4b7d      	ldr	r3, [pc, #500]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a6:	4a7c      	ldr	r2, [pc, #496]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062a8:	f043 0301 	orr.w	r3, r3, #1
 80062ac:	6713      	str	r3, [r2, #112]	; 0x70
 80062ae:	e02d      	b.n	800630c <HAL_RCC_OscConfig+0x5e0>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10c      	bne.n	80062d2 <HAL_RCC_OscConfig+0x5a6>
 80062b8:	4b77      	ldr	r3, [pc, #476]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062bc:	4a76      	ldr	r2, [pc, #472]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	6713      	str	r3, [r2, #112]	; 0x70
 80062c4:	4b74      	ldr	r3, [pc, #464]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c8:	4a73      	ldr	r2, [pc, #460]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062ca:	f023 0304 	bic.w	r3, r3, #4
 80062ce:	6713      	str	r3, [r2, #112]	; 0x70
 80062d0:	e01c      	b.n	800630c <HAL_RCC_OscConfig+0x5e0>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b05      	cmp	r3, #5
 80062d8:	d10c      	bne.n	80062f4 <HAL_RCC_OscConfig+0x5c8>
 80062da:	4b6f      	ldr	r3, [pc, #444]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	4a6e      	ldr	r2, [pc, #440]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062e0:	f043 0304 	orr.w	r3, r3, #4
 80062e4:	6713      	str	r3, [r2, #112]	; 0x70
 80062e6:	4b6c      	ldr	r3, [pc, #432]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	4a6b      	ldr	r2, [pc, #428]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	6713      	str	r3, [r2, #112]	; 0x70
 80062f2:	e00b      	b.n	800630c <HAL_RCC_OscConfig+0x5e0>
 80062f4:	4b68      	ldr	r3, [pc, #416]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f8:	4a67      	ldr	r2, [pc, #412]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062fa:	f023 0301 	bic.w	r3, r3, #1
 80062fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006300:	4b65      	ldr	r3, [pc, #404]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006304:	4a64      	ldr	r2, [pc, #400]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006306:	f023 0304 	bic.w	r3, r3, #4
 800630a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d015      	beq.n	8006340 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006314:	f7fb fea4 	bl	8002060 <HAL_GetTick>
 8006318:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800631a:	e00a      	b.n	8006332 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800631c:	f7fb fea0 	bl	8002060 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f241 3288 	movw	r2, #5000	; 0x1388
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e123      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006332:	4b59      	ldr	r3, [pc, #356]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0ee      	beq.n	800631c <HAL_RCC_OscConfig+0x5f0>
 800633e:	e014      	b.n	800636a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006340:	f7fb fe8e 	bl	8002060 <HAL_GetTick>
 8006344:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006346:	e00a      	b.n	800635e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006348:	f7fb fe8a 	bl	8002060 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	f241 3288 	movw	r2, #5000	; 0x1388
 8006356:	4293      	cmp	r3, r2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e10d      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800635e:	4b4e      	ldr	r3, [pc, #312]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1ee      	bne.n	8006348 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 8102 	beq.w	8006578 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006374:	4b48      	ldr	r3, [pc, #288]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800637c:	2b18      	cmp	r3, #24
 800637e:	f000 80bd 	beq.w	80064fc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	2b02      	cmp	r3, #2
 8006388:	f040 809e 	bne.w	80064c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800638c:	4b42      	ldr	r3, [pc, #264]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a41      	ldr	r2, [pc, #260]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006398:	f7fb fe62 	bl	8002060 <HAL_GetTick>
 800639c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063a0:	f7fb fe5e 	bl	8002060 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e0e3      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063b2:	4b39      	ldr	r3, [pc, #228]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f0      	bne.n	80063a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063be:	4b36      	ldr	r3, [pc, #216]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80063c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063c2:	4b37      	ldr	r3, [pc, #220]	; (80064a0 <HAL_RCC_OscConfig+0x774>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80063ce:	0112      	lsls	r2, r2, #4
 80063d0:	430a      	orrs	r2, r1
 80063d2:	4931      	ldr	r1, [pc, #196]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	628b      	str	r3, [r1, #40]	; 0x28
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	3b01      	subs	r3, #1
 80063de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e6:	3b01      	subs	r3, #1
 80063e8:	025b      	lsls	r3, r3, #9
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	431a      	orrs	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f2:	3b01      	subs	r3, #1
 80063f4:	041b      	lsls	r3, r3, #16
 80063f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006400:	3b01      	subs	r3, #1
 8006402:	061b      	lsls	r3, r3, #24
 8006404:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006408:	4923      	ldr	r1, [pc, #140]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800640a:	4313      	orrs	r3, r2
 800640c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800640e:	4b22      	ldr	r3, [pc, #136]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	4a21      	ldr	r2, [pc, #132]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006414:	f023 0301 	bic.w	r3, r3, #1
 8006418:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800641a:	4b1f      	ldr	r3, [pc, #124]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800641c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800641e:	4b21      	ldr	r3, [pc, #132]	; (80064a4 <HAL_RCC_OscConfig+0x778>)
 8006420:	4013      	ands	r3, r2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006426:	00d2      	lsls	r2, r2, #3
 8006428:	491b      	ldr	r1, [pc, #108]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800642a:	4313      	orrs	r3, r2
 800642c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800642e:	4b1a      	ldr	r3, [pc, #104]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	f023 020c 	bic.w	r2, r3, #12
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	4917      	ldr	r1, [pc, #92]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800643c:	4313      	orrs	r3, r2
 800643e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006440:	4b15      	ldr	r3, [pc, #84]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	f023 0202 	bic.w	r2, r3, #2
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644c:	4912      	ldr	r1, [pc, #72]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800644e:	4313      	orrs	r3, r2
 8006450:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006452:	4b11      	ldr	r3, [pc, #68]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	4a10      	ldr	r2, [pc, #64]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800645c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645e:	4b0e      	ldr	r3, [pc, #56]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	4a0d      	ldr	r2, [pc, #52]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006468:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800646a:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	4a0a      	ldr	r2, [pc, #40]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006474:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006476:	4b08      	ldr	r3, [pc, #32]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	4a07      	ldr	r2, [pc, #28]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800647c:	f043 0301 	orr.w	r3, r3, #1
 8006480:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006482:	4b05      	ldr	r3, [pc, #20]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a04      	ldr	r2, [pc, #16]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006488:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800648c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648e:	f7fb fde7 	bl	8002060 <HAL_GetTick>
 8006492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006494:	e011      	b.n	80064ba <HAL_RCC_OscConfig+0x78e>
 8006496:	bf00      	nop
 8006498:	58024400 	.word	0x58024400
 800649c:	58024800 	.word	0x58024800
 80064a0:	fffffc0c 	.word	0xfffffc0c
 80064a4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a8:	f7fb fdda 	bl	8002060 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e05f      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064ba:	4b32      	ldr	r3, [pc, #200]	; (8006584 <HAL_RCC_OscConfig+0x858>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0f0      	beq.n	80064a8 <HAL_RCC_OscConfig+0x77c>
 80064c6:	e057      	b.n	8006578 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c8:	4b2e      	ldr	r3, [pc, #184]	; (8006584 <HAL_RCC_OscConfig+0x858>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a2d      	ldr	r2, [pc, #180]	; (8006584 <HAL_RCC_OscConfig+0x858>)
 80064ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fb fdc4 	bl	8002060 <HAL_GetTick>
 80064d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064dc:	f7fb fdc0 	bl	8002060 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e045      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064ee:	4b25      	ldr	r3, [pc, #148]	; (8006584 <HAL_RCC_OscConfig+0x858>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1f0      	bne.n	80064dc <HAL_RCC_OscConfig+0x7b0>
 80064fa:	e03d      	b.n	8006578 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064fc:	4b21      	ldr	r3, [pc, #132]	; (8006584 <HAL_RCC_OscConfig+0x858>)
 80064fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006500:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006502:	4b20      	ldr	r3, [pc, #128]	; (8006584 <HAL_RCC_OscConfig+0x858>)
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	2b01      	cmp	r3, #1
 800650e:	d031      	beq.n	8006574 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f003 0203 	and.w	r2, r3, #3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800651a:	429a      	cmp	r2, r3
 800651c:	d12a      	bne.n	8006574 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	091b      	lsrs	r3, r3, #4
 8006522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800652a:	429a      	cmp	r2, r3
 800652c:	d122      	bne.n	8006574 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800653a:	429a      	cmp	r2, r3
 800653c:	d11a      	bne.n	8006574 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	0a5b      	lsrs	r3, r3, #9
 8006542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800654c:	429a      	cmp	r2, r3
 800654e:	d111      	bne.n	8006574 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	0c1b      	lsrs	r3, r3, #16
 8006554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800655e:	429a      	cmp	r2, r3
 8006560:	d108      	bne.n	8006574 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	0e1b      	lsrs	r3, r3, #24
 8006566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006570:	429a      	cmp	r2, r3
 8006572:	d001      	beq.n	8006578 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e000      	b.n	800657a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3730      	adds	r7, #48	; 0x30
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	58024400 	.word	0x58024400

08006588 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e19c      	b.n	80068d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800659c:	4b8a      	ldr	r3, [pc, #552]	; (80067c8 <HAL_RCC_ClockConfig+0x240>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 030f 	and.w	r3, r3, #15
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d910      	bls.n	80065cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065aa:	4b87      	ldr	r3, [pc, #540]	; (80067c8 <HAL_RCC_ClockConfig+0x240>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f023 020f 	bic.w	r2, r3, #15
 80065b2:	4985      	ldr	r1, [pc, #532]	; (80067c8 <HAL_RCC_ClockConfig+0x240>)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ba:	4b83      	ldr	r3, [pc, #524]	; (80067c8 <HAL_RCC_ClockConfig+0x240>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 030f 	and.w	r3, r3, #15
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d001      	beq.n	80065cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e184      	b.n	80068d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d010      	beq.n	80065fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	4b7b      	ldr	r3, [pc, #492]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d908      	bls.n	80065fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065e8:	4b78      	ldr	r3, [pc, #480]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	4975      	ldr	r1, [pc, #468]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d010      	beq.n	8006628 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695a      	ldr	r2, [r3, #20]
 800660a:	4b70      	ldr	r3, [pc, #448]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006612:	429a      	cmp	r2, r3
 8006614:	d908      	bls.n	8006628 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006616:	4b6d      	ldr	r3, [pc, #436]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	496a      	ldr	r1, [pc, #424]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 8006624:	4313      	orrs	r3, r2
 8006626:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b00      	cmp	r3, #0
 8006632:	d010      	beq.n	8006656 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699a      	ldr	r2, [r3, #24]
 8006638:	4b64      	ldr	r3, [pc, #400]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006640:	429a      	cmp	r2, r3
 8006642:	d908      	bls.n	8006656 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006644:	4b61      	ldr	r3, [pc, #388]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	495e      	ldr	r1, [pc, #376]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 8006652:	4313      	orrs	r3, r2
 8006654:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d010      	beq.n	8006684 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69da      	ldr	r2, [r3, #28]
 8006666:	4b59      	ldr	r3, [pc, #356]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800666e:	429a      	cmp	r2, r3
 8006670:	d908      	bls.n	8006684 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006672:	4b56      	ldr	r3, [pc, #344]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	4953      	ldr	r1, [pc, #332]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 8006680:	4313      	orrs	r3, r2
 8006682:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d010      	beq.n	80066b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	4b4d      	ldr	r3, [pc, #308]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f003 030f 	and.w	r3, r3, #15
 800669c:	429a      	cmp	r2, r3
 800669e:	d908      	bls.n	80066b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066a0:	4b4a      	ldr	r3, [pc, #296]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	f023 020f 	bic.w	r2, r3, #15
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	4947      	ldr	r1, [pc, #284]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d055      	beq.n	800676a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80066be:	4b43      	ldr	r3, [pc, #268]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	4940      	ldr	r1, [pc, #256]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d107      	bne.n	80066e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066d8:	4b3c      	ldr	r3, [pc, #240]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d121      	bne.n	8006728 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0f6      	b.n	80068d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d107      	bne.n	8006700 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066f0:	4b36      	ldr	r3, [pc, #216]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d115      	bne.n	8006728 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0ea      	b.n	80068d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d107      	bne.n	8006718 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006708:	4b30      	ldr	r3, [pc, #192]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006710:	2b00      	cmp	r3, #0
 8006712:	d109      	bne.n	8006728 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e0de      	b.n	80068d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006718:	4b2c      	ldr	r3, [pc, #176]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0304 	and.w	r3, r3, #4
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e0d6      	b.n	80068d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006728:	4b28      	ldr	r3, [pc, #160]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f023 0207 	bic.w	r2, r3, #7
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	4925      	ldr	r1, [pc, #148]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 8006736:	4313      	orrs	r3, r2
 8006738:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673a:	f7fb fc91 	bl	8002060 <HAL_GetTick>
 800673e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006740:	e00a      	b.n	8006758 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006742:	f7fb fc8d 	bl	8002060 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006750:	4293      	cmp	r3, r2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e0be      	b.n	80068d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006758:	4b1c      	ldr	r3, [pc, #112]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	429a      	cmp	r2, r3
 8006768:	d1eb      	bne.n	8006742 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d010      	beq.n	8006798 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	4b14      	ldr	r3, [pc, #80]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	429a      	cmp	r2, r3
 8006784:	d208      	bcs.n	8006798 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006786:	4b11      	ldr	r3, [pc, #68]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f023 020f 	bic.w	r2, r3, #15
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	490e      	ldr	r1, [pc, #56]	; (80067cc <HAL_RCC_ClockConfig+0x244>)
 8006794:	4313      	orrs	r3, r2
 8006796:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006798:	4b0b      	ldr	r3, [pc, #44]	; (80067c8 <HAL_RCC_ClockConfig+0x240>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 030f 	and.w	r3, r3, #15
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d214      	bcs.n	80067d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067a6:	4b08      	ldr	r3, [pc, #32]	; (80067c8 <HAL_RCC_ClockConfig+0x240>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f023 020f 	bic.w	r2, r3, #15
 80067ae:	4906      	ldr	r1, [pc, #24]	; (80067c8 <HAL_RCC_ClockConfig+0x240>)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b6:	4b04      	ldr	r3, [pc, #16]	; (80067c8 <HAL_RCC_ClockConfig+0x240>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 030f 	and.w	r3, r3, #15
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d005      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e086      	b.n	80068d6 <HAL_RCC_ClockConfig+0x34e>
 80067c8:	52002000 	.word	0x52002000
 80067cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d010      	beq.n	80067fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	4b3f      	ldr	r3, [pc, #252]	; (80068e0 <HAL_RCC_ClockConfig+0x358>)
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d208      	bcs.n	80067fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067ec:	4b3c      	ldr	r3, [pc, #240]	; (80068e0 <HAL_RCC_ClockConfig+0x358>)
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	4939      	ldr	r1, [pc, #228]	; (80068e0 <HAL_RCC_ClockConfig+0x358>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d010      	beq.n	800682c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695a      	ldr	r2, [r3, #20]
 800680e:	4b34      	ldr	r3, [pc, #208]	; (80068e0 <HAL_RCC_ClockConfig+0x358>)
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006816:	429a      	cmp	r2, r3
 8006818:	d208      	bcs.n	800682c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800681a:	4b31      	ldr	r3, [pc, #196]	; (80068e0 <HAL_RCC_ClockConfig+0x358>)
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	492e      	ldr	r1, [pc, #184]	; (80068e0 <HAL_RCC_ClockConfig+0x358>)
 8006828:	4313      	orrs	r3, r2
 800682a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0310 	and.w	r3, r3, #16
 8006834:	2b00      	cmp	r3, #0
 8006836:	d010      	beq.n	800685a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	699a      	ldr	r2, [r3, #24]
 800683c:	4b28      	ldr	r3, [pc, #160]	; (80068e0 <HAL_RCC_ClockConfig+0x358>)
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006844:	429a      	cmp	r2, r3
 8006846:	d208      	bcs.n	800685a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006848:	4b25      	ldr	r3, [pc, #148]	; (80068e0 <HAL_RCC_ClockConfig+0x358>)
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	4922      	ldr	r1, [pc, #136]	; (80068e0 <HAL_RCC_ClockConfig+0x358>)
 8006856:	4313      	orrs	r3, r2
 8006858:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0320 	and.w	r3, r3, #32
 8006862:	2b00      	cmp	r3, #0
 8006864:	d010      	beq.n	8006888 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69da      	ldr	r2, [r3, #28]
 800686a:	4b1d      	ldr	r3, [pc, #116]	; (80068e0 <HAL_RCC_ClockConfig+0x358>)
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006872:	429a      	cmp	r2, r3
 8006874:	d208      	bcs.n	8006888 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006876:	4b1a      	ldr	r3, [pc, #104]	; (80068e0 <HAL_RCC_ClockConfig+0x358>)
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	4917      	ldr	r1, [pc, #92]	; (80068e0 <HAL_RCC_ClockConfig+0x358>)
 8006884:	4313      	orrs	r3, r2
 8006886:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006888:	f000 f834 	bl	80068f4 <HAL_RCC_GetSysClockFreq>
 800688c:	4602      	mov	r2, r0
 800688e:	4b14      	ldr	r3, [pc, #80]	; (80068e0 <HAL_RCC_ClockConfig+0x358>)
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	0a1b      	lsrs	r3, r3, #8
 8006894:	f003 030f 	and.w	r3, r3, #15
 8006898:	4912      	ldr	r1, [pc, #72]	; (80068e4 <HAL_RCC_ClockConfig+0x35c>)
 800689a:	5ccb      	ldrb	r3, [r1, r3]
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	fa22 f303 	lsr.w	r3, r2, r3
 80068a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068a6:	4b0e      	ldr	r3, [pc, #56]	; (80068e0 <HAL_RCC_ClockConfig+0x358>)
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	4a0d      	ldr	r2, [pc, #52]	; (80068e4 <HAL_RCC_ClockConfig+0x35c>)
 80068b0:	5cd3      	ldrb	r3, [r2, r3]
 80068b2:	f003 031f 	and.w	r3, r3, #31
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	fa22 f303 	lsr.w	r3, r2, r3
 80068bc:	4a0a      	ldr	r2, [pc, #40]	; (80068e8 <HAL_RCC_ClockConfig+0x360>)
 80068be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068c0:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <HAL_RCC_ClockConfig+0x364>)
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80068c6:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <HAL_RCC_ClockConfig+0x368>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fb fb7e 	bl	8001fcc <HAL_InitTick>
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	58024400 	.word	0x58024400
 80068e4:	0800ddf0 	.word	0x0800ddf0
 80068e8:	20000004 	.word	0x20000004
 80068ec:	20000000 	.word	0x20000000
 80068f0:	20000008 	.word	0x20000008

080068f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b089      	sub	sp, #36	; 0x24
 80068f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068fa:	4bb3      	ldr	r3, [pc, #716]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006902:	2b18      	cmp	r3, #24
 8006904:	f200 8155 	bhi.w	8006bb2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006908:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <HAL_RCC_GetSysClockFreq+0x1c>)
 800690a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690e:	bf00      	nop
 8006910:	08006975 	.word	0x08006975
 8006914:	08006bb3 	.word	0x08006bb3
 8006918:	08006bb3 	.word	0x08006bb3
 800691c:	08006bb3 	.word	0x08006bb3
 8006920:	08006bb3 	.word	0x08006bb3
 8006924:	08006bb3 	.word	0x08006bb3
 8006928:	08006bb3 	.word	0x08006bb3
 800692c:	08006bb3 	.word	0x08006bb3
 8006930:	0800699b 	.word	0x0800699b
 8006934:	08006bb3 	.word	0x08006bb3
 8006938:	08006bb3 	.word	0x08006bb3
 800693c:	08006bb3 	.word	0x08006bb3
 8006940:	08006bb3 	.word	0x08006bb3
 8006944:	08006bb3 	.word	0x08006bb3
 8006948:	08006bb3 	.word	0x08006bb3
 800694c:	08006bb3 	.word	0x08006bb3
 8006950:	080069a1 	.word	0x080069a1
 8006954:	08006bb3 	.word	0x08006bb3
 8006958:	08006bb3 	.word	0x08006bb3
 800695c:	08006bb3 	.word	0x08006bb3
 8006960:	08006bb3 	.word	0x08006bb3
 8006964:	08006bb3 	.word	0x08006bb3
 8006968:	08006bb3 	.word	0x08006bb3
 800696c:	08006bb3 	.word	0x08006bb3
 8006970:	080069a7 	.word	0x080069a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006974:	4b94      	ldr	r3, [pc, #592]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b00      	cmp	r3, #0
 800697e:	d009      	beq.n	8006994 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006980:	4b91      	ldr	r3, [pc, #580]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	08db      	lsrs	r3, r3, #3
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	4a90      	ldr	r2, [pc, #576]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800698c:	fa22 f303 	lsr.w	r3, r2, r3
 8006990:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006992:	e111      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006994:	4b8d      	ldr	r3, [pc, #564]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006996:	61bb      	str	r3, [r7, #24]
    break;
 8006998:	e10e      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800699a:	4b8d      	ldr	r3, [pc, #564]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800699c:	61bb      	str	r3, [r7, #24]
    break;
 800699e:	e10b      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80069a0:	4b8c      	ldr	r3, [pc, #560]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80069a2:	61bb      	str	r3, [r7, #24]
    break;
 80069a4:	e108      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069a6:	4b88      	ldr	r3, [pc, #544]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80069b0:	4b85      	ldr	r3, [pc, #532]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b4:	091b      	lsrs	r3, r3, #4
 80069b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80069bc:	4b82      	ldr	r3, [pc, #520]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80069c6:	4b80      	ldr	r3, [pc, #512]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ca:	08db      	lsrs	r3, r3, #3
 80069cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	fb02 f303 	mul.w	r3, r2, r3
 80069d6:	ee07 3a90 	vmov	s15, r3
 80069da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80e1 	beq.w	8006bac <HAL_RCC_GetSysClockFreq+0x2b8>
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	f000 8083 	beq.w	8006af8 <HAL_RCC_GetSysClockFreq+0x204>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	f200 80a1 	bhi.w	8006b3c <HAL_RCC_GetSysClockFreq+0x248>
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <HAL_RCC_GetSysClockFreq+0x114>
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d056      	beq.n	8006ab4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a06:	e099      	b.n	8006b3c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a08:	4b6f      	ldr	r3, [pc, #444]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0320 	and.w	r3, r3, #32
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d02d      	beq.n	8006a70 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a14:	4b6c      	ldr	r3, [pc, #432]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	08db      	lsrs	r3, r3, #3
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	4a6b      	ldr	r2, [pc, #428]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a20:	fa22 f303 	lsr.w	r3, r2, r3
 8006a24:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	ee07 3a90 	vmov	s15, r3
 8006a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3e:	4b62      	ldr	r3, [pc, #392]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a52:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006a6e:	e087      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006bdc <HAL_RCC_GetSysClockFreq+0x2e8>
 8006a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a82:	4b51      	ldr	r3, [pc, #324]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a96:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ab2:	e065      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006be0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac6:	4b40      	ldr	r3, [pc, #256]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ada:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006af6:	e043      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b02:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006be4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b0a:	4b2f      	ldr	r3, [pc, #188]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b3a:	e021      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b46:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006be0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b4e:	4b1e      	ldr	r3, [pc, #120]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b7e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006b80:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b84:	0a5b      	lsrs	r3, r3, #9
 8006b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	ee07 3a90 	vmov	s15, r3
 8006b94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b98:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ba4:	ee17 3a90 	vmov	r3, s15
 8006ba8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006baa:	e005      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61bb      	str	r3, [r7, #24]
    break;
 8006bb0:	e002      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006bb2:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006bb4:	61bb      	str	r3, [r7, #24]
    break;
 8006bb6:	bf00      	nop
  }

  return sysclockfreq;
 8006bb8:	69bb      	ldr	r3, [r7, #24]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3724      	adds	r7, #36	; 0x24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	58024400 	.word	0x58024400
 8006bcc:	03d09000 	.word	0x03d09000
 8006bd0:	003d0900 	.word	0x003d0900
 8006bd4:	00f42400 	.word	0x00f42400
 8006bd8:	46000000 	.word	0x46000000
 8006bdc:	4c742400 	.word	0x4c742400
 8006be0:	4a742400 	.word	0x4a742400
 8006be4:	4b742400 	.word	0x4b742400

08006be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006bee:	f7ff fe81 	bl	80068f4 <HAL_RCC_GetSysClockFreq>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <HAL_RCC_GetHCLKFreq+0x50>)
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	0a1b      	lsrs	r3, r3, #8
 8006bfa:	f003 030f 	and.w	r3, r3, #15
 8006bfe:	490f      	ldr	r1, [pc, #60]	; (8006c3c <HAL_RCC_GetHCLKFreq+0x54>)
 8006c00:	5ccb      	ldrb	r3, [r1, r3]
 8006c02:	f003 031f 	and.w	r3, r3, #31
 8006c06:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c0c:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	4a09      	ldr	r2, [pc, #36]	; (8006c3c <HAL_RCC_GetHCLKFreq+0x54>)
 8006c16:	5cd3      	ldrb	r3, [r2, r3]
 8006c18:	f003 031f 	and.w	r3, r3, #31
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c22:	4a07      	ldr	r2, [pc, #28]	; (8006c40 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c26:	4a07      	ldr	r2, [pc, #28]	; (8006c44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c2c:	4b04      	ldr	r3, [pc, #16]	; (8006c40 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	58024400 	.word	0x58024400
 8006c3c:	0800ddf0 	.word	0x0800ddf0
 8006c40:	20000004 	.word	0x20000004
 8006c44:	20000000 	.word	0x20000000

08006c48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c50:	2300      	movs	r3, #0
 8006c52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c54:	2300      	movs	r3, #0
 8006c56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d03f      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c6c:	d02a      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006c6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c72:	d824      	bhi.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c78:	d018      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c7e:	d81e      	bhi.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c88:	d007      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006c8a:	e018      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c8c:	4ba3      	ldr	r3, [pc, #652]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	4aa2      	ldr	r2, [pc, #648]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c98:	e015      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	2102      	movs	r1, #2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f001 fff9 	bl	8008c98 <RCCEx_PLL2_Config>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006caa:	e00c      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	3324      	adds	r3, #36	; 0x24
 8006cb0:	2102      	movs	r1, #2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f002 f8a2 	bl	8008dfc <RCCEx_PLL3_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cbc:	e003      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc2:	e000      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d109      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ccc:	4b93      	ldr	r3, [pc, #588]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd8:	4990      	ldr	r1, [pc, #576]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	650b      	str	r3, [r1, #80]	; 0x50
 8006cde:	e001      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d03d      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	d826      	bhi.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006cf8:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08006d15 	.word	0x08006d15
 8006d04:	08006d23 	.word	0x08006d23
 8006d08:	08006d35 	.word	0x08006d35
 8006d0c:	08006d4d 	.word	0x08006d4d
 8006d10:	08006d4d 	.word	0x08006d4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d14:	4b81      	ldr	r3, [pc, #516]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	4a80      	ldr	r2, [pc, #512]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d20:	e015      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3304      	adds	r3, #4
 8006d26:	2100      	movs	r1, #0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f001 ffb5 	bl	8008c98 <RCCEx_PLL2_Config>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d32:	e00c      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3324      	adds	r3, #36	; 0x24
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f002 f85e 	bl	8008dfc <RCCEx_PLL3_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d44:	e003      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	75fb      	strb	r3, [r7, #23]
      break;
 8006d4a:	e000      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d109      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d54:	4b71      	ldr	r3, [pc, #452]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d58:	f023 0207 	bic.w	r2, r3, #7
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d60:	496e      	ldr	r1, [pc, #440]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	650b      	str	r3, [r1, #80]	; 0x50
 8006d66:	e001      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
 8006d6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d042      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d80:	d02b      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d86:	d825      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d88:	2bc0      	cmp	r3, #192	; 0xc0
 8006d8a:	d028      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d8c:	2bc0      	cmp	r3, #192	; 0xc0
 8006d8e:	d821      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d90:	2b80      	cmp	r3, #128	; 0x80
 8006d92:	d016      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006d94:	2b80      	cmp	r3, #128	; 0x80
 8006d96:	d81d      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006d9c:	2b40      	cmp	r3, #64	; 0x40
 8006d9e:	d007      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006da0:	e018      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da2:	4b5e      	ldr	r3, [pc, #376]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da6:	4a5d      	ldr	r2, [pc, #372]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006dae:	e017      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3304      	adds	r3, #4
 8006db4:	2100      	movs	r1, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 ff6e 	bl	8008c98 <RCCEx_PLL2_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006dc0:	e00e      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3324      	adds	r3, #36	; 0x24
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f002 f817 	bl	8008dfc <RCCEx_PLL3_Config>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006dd2:	e005      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd8:	e002      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006dda:	bf00      	nop
 8006ddc:	e000      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d109      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006de6:	4b4d      	ldr	r3, [pc, #308]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df2:	494a      	ldr	r1, [pc, #296]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	650b      	str	r3, [r1, #80]	; 0x50
 8006df8:	e001      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
 8006dfc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d049      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e14:	d030      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006e16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e1a:	d82a      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006e1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006e20:	d02c      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006e22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006e26:	d824      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e2c:	d018      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e32:	d81e      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006e38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e3c:	d007      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006e3e:	e018      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e40:	4b36      	ldr	r3, [pc, #216]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	4a35      	ldr	r2, [pc, #212]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e4c:	e017      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3304      	adds	r3, #4
 8006e52:	2100      	movs	r1, #0
 8006e54:	4618      	mov	r0, r3
 8006e56:	f001 ff1f 	bl	8008c98 <RCCEx_PLL2_Config>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e5e:	e00e      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3324      	adds	r3, #36	; 0x24
 8006e64:	2100      	movs	r1, #0
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 ffc8 	bl	8008dfc <RCCEx_PLL3_Config>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e70:	e005      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	75fb      	strb	r3, [r7, #23]
      break;
 8006e76:	e002      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006e78:	bf00      	nop
 8006e7a:	e000      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e84:	4b25      	ldr	r3, [pc, #148]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e88:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e92:	4922      	ldr	r1, [pc, #136]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	658b      	str	r3, [r1, #88]	; 0x58
 8006e98:	e001      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d04b      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006eb4:	d030      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006eb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006eba:	d82a      	bhi.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ebc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ec0:	d02e      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006ec2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ec6:	d824      	bhi.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ec8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ecc:	d018      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ed2:	d81e      	bhi.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d003      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006edc:	d007      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006ede:	e018      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee0:	4b0e      	ldr	r3, [pc, #56]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	4a0d      	ldr	r2, [pc, #52]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eec:	e019      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 fecf 	bl	8008c98 <RCCEx_PLL2_Config>
 8006efa:	4603      	mov	r3, r0
 8006efc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006efe:	e010      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3324      	adds	r3, #36	; 0x24
 8006f04:	2100      	movs	r1, #0
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 ff78 	bl	8008dfc <RCCEx_PLL3_Config>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f10:	e007      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	75fb      	strb	r3, [r7, #23]
      break;
 8006f16:	e004      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006f18:	bf00      	nop
 8006f1a:	e002      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006f1c:	58024400 	.word	0x58024400
      break;
 8006f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006f28:	4b99      	ldr	r3, [pc, #612]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f36:	4996      	ldr	r1, [pc, #600]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	658b      	str	r3, [r1, #88]	; 0x58
 8006f3c:	e001      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d032      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f52:	2b30      	cmp	r3, #48	; 0x30
 8006f54:	d01c      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006f56:	2b30      	cmp	r3, #48	; 0x30
 8006f58:	d817      	bhi.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d00c      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	d813      	bhi.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d016      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006f66:	2b10      	cmp	r3, #16
 8006f68:	d10f      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6a:	4b89      	ldr	r3, [pc, #548]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	4a88      	ldr	r2, [pc, #544]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f76:	e00e      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	2102      	movs	r1, #2
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 fe8a 	bl	8008c98 <RCCEx_PLL2_Config>
 8006f84:	4603      	mov	r3, r0
 8006f86:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f88:	e005      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f8e:	e002      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006f90:	bf00      	nop
 8006f92:	e000      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f96:	7dfb      	ldrb	r3, [r7, #23]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d109      	bne.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f9c:	4b7c      	ldr	r3, [pc, #496]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa8:	4979      	ldr	r1, [pc, #484]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fae:	e001      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
 8006fb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d047      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fc8:	d030      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fce:	d82a      	bhi.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006fd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fd4:	d02c      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006fd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fda:	d824      	bhi.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fe0:	d018      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fe6:	d81e      	bhi.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff0:	d007      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006ff2:	e018      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff4:	4b66      	ldr	r3, [pc, #408]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	4a65      	ldr	r2, [pc, #404]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007000:	e017      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3304      	adds	r3, #4
 8007006:	2100      	movs	r1, #0
 8007008:	4618      	mov	r0, r3
 800700a:	f001 fe45 	bl	8008c98 <RCCEx_PLL2_Config>
 800700e:	4603      	mov	r3, r0
 8007010:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007012:	e00e      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3324      	adds	r3, #36	; 0x24
 8007018:	2100      	movs	r1, #0
 800701a:	4618      	mov	r0, r3
 800701c:	f001 feee 	bl	8008dfc <RCCEx_PLL3_Config>
 8007020:	4603      	mov	r3, r0
 8007022:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007024:	e005      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	75fb      	strb	r3, [r7, #23]
      break;
 800702a:	e002      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800702c:	bf00      	nop
 800702e:	e000      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007032:	7dfb      	ldrb	r3, [r7, #23]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007038:	4b55      	ldr	r3, [pc, #340]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800703a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007044:	4952      	ldr	r1, [pc, #328]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007046:	4313      	orrs	r3, r2
 8007048:	650b      	str	r3, [r1, #80]	; 0x50
 800704a:	e001      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d049      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007064:	d02e      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007066:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800706a:	d828      	bhi.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x476>
 800706c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007070:	d02a      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007076:	d822      	bhi.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007078:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800707c:	d026      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800707e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007082:	d81c      	bhi.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007088:	d010      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x464>
 800708a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800708e:	d816      	bhi.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01d      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007098:	d111      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3304      	adds	r3, #4
 800709e:	2101      	movs	r1, #1
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 fdf9 	bl	8008c98 <RCCEx_PLL2_Config>
 80070a6:	4603      	mov	r3, r0
 80070a8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80070aa:	e012      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3324      	adds	r3, #36	; 0x24
 80070b0:	2101      	movs	r1, #1
 80070b2:	4618      	mov	r0, r3
 80070b4:	f001 fea2 	bl	8008dfc <RCCEx_PLL3_Config>
 80070b8:	4603      	mov	r3, r0
 80070ba:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80070bc:	e009      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	75fb      	strb	r3, [r7, #23]
      break;
 80070c2:	e006      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80070c4:	bf00      	nop
 80070c6:	e004      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80070c8:	bf00      	nop
 80070ca:	e002      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80070cc:	bf00      	nop
 80070ce:	e000      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80070d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d109      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80070d8:	4b2d      	ldr	r3, [pc, #180]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070e4:	492a      	ldr	r1, [pc, #168]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	650b      	str	r3, [r1, #80]	; 0x50
 80070ea:	e001      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
 80070ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d04d      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007106:	d02e      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800710c:	d828      	bhi.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800710e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007112:	d02a      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007118:	d822      	bhi.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800711a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800711e:	d026      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007120:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007124:	d81c      	bhi.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800712a:	d010      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800712c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007130:	d816      	bhi.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007132:	2b00      	cmp	r3, #0
 8007134:	d01d      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800713a:	d111      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3304      	adds	r3, #4
 8007140:	2101      	movs	r1, #1
 8007142:	4618      	mov	r0, r3
 8007144:	f001 fda8 	bl	8008c98 <RCCEx_PLL2_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800714c:	e012      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3324      	adds	r3, #36	; 0x24
 8007152:	2101      	movs	r1, #1
 8007154:	4618      	mov	r0, r3
 8007156:	f001 fe51 	bl	8008dfc <RCCEx_PLL3_Config>
 800715a:	4603      	mov	r3, r0
 800715c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800715e:	e009      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	75fb      	strb	r3, [r7, #23]
      break;
 8007164:	e006      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007166:	bf00      	nop
 8007168:	e004      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800716a:	bf00      	nop
 800716c:	e002      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800716e:	bf00      	nop
 8007170:	e000      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007174:	7dfb      	ldrb	r3, [r7, #23]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10c      	bne.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800717a:	4b05      	ldr	r3, [pc, #20]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800717c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007188:	4901      	ldr	r1, [pc, #4]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800718a:	4313      	orrs	r3, r2
 800718c:	658b      	str	r3, [r1, #88]	; 0x58
 800718e:	e003      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007190:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
 8007196:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d02f      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071ac:	d00e      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80071ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071b2:	d814      	bhi.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x596>
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d015      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80071b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071bc:	d10f      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071be:	4baf      	ldr	r3, [pc, #700]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c2:	4aae      	ldr	r2, [pc, #696]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80071ca:	e00c      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3304      	adds	r3, #4
 80071d0:	2101      	movs	r1, #1
 80071d2:	4618      	mov	r0, r3
 80071d4:	f001 fd60 	bl	8008c98 <RCCEx_PLL2_Config>
 80071d8:	4603      	mov	r3, r0
 80071da:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80071dc:	e003      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	75fb      	strb	r3, [r7, #23]
      break;
 80071e2:	e000      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80071e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d109      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071ec:	4ba3      	ldr	r3, [pc, #652]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f8:	49a0      	ldr	r1, [pc, #640]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	650b      	str	r3, [r1, #80]	; 0x50
 80071fe:	e001      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007200:	7dfb      	ldrb	r3, [r7, #23]
 8007202:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d032      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007214:	2b03      	cmp	r3, #3
 8007216:	d81b      	bhi.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007218:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800721a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721e:	bf00      	nop
 8007220:	08007257 	.word	0x08007257
 8007224:	08007231 	.word	0x08007231
 8007228:	0800723f 	.word	0x0800723f
 800722c:	08007257 	.word	0x08007257
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007230:	4b92      	ldr	r3, [pc, #584]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007234:	4a91      	ldr	r2, [pc, #580]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800723a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800723c:	e00c      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3304      	adds	r3, #4
 8007242:	2102      	movs	r1, #2
 8007244:	4618      	mov	r0, r3
 8007246:	f001 fd27 	bl	8008c98 <RCCEx_PLL2_Config>
 800724a:	4603      	mov	r3, r0
 800724c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800724e:	e003      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	75fb      	strb	r3, [r7, #23]
      break;
 8007254:	e000      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007258:	7dfb      	ldrb	r3, [r7, #23]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d109      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800725e:	4b87      	ldr	r3, [pc, #540]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007262:	f023 0203 	bic.w	r2, r3, #3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726a:	4984      	ldr	r1, [pc, #528]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800726c:	4313      	orrs	r3, r2
 800726e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007270:	e001      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007272:	7dfb      	ldrb	r3, [r7, #23]
 8007274:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 8086 	beq.w	8007390 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007284:	4b7e      	ldr	r3, [pc, #504]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a7d      	ldr	r2, [pc, #500]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800728a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800728e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007290:	f7fa fee6 	bl	8002060 <HAL_GetTick>
 8007294:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007296:	e009      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007298:	f7fa fee2 	bl	8002060 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b64      	cmp	r3, #100	; 0x64
 80072a4:	d902      	bls.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	75fb      	strb	r3, [r7, #23]
        break;
 80072aa:	e005      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072ac:	4b74      	ldr	r3, [pc, #464]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0ef      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d166      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80072be:	4b6f      	ldr	r3, [pc, #444]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072c8:	4053      	eors	r3, r2
 80072ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d013      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072d2:	4b6a      	ldr	r3, [pc, #424]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072dc:	4b67      	ldr	r3, [pc, #412]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e0:	4a66      	ldr	r2, [pc, #408]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072e8:	4b64      	ldr	r3, [pc, #400]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ec:	4a63      	ldr	r2, [pc, #396]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80072f4:	4a61      	ldr	r2, [pc, #388]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007304:	d115      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007306:	f7fa feab 	bl	8002060 <HAL_GetTick>
 800730a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800730c:	e00b      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800730e:	f7fa fea7 	bl	8002060 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	f241 3288 	movw	r2, #5000	; 0x1388
 800731c:	4293      	cmp	r3, r2
 800731e:	d902      	bls.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	75fb      	strb	r3, [r7, #23]
            break;
 8007324:	e005      	b.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007326:	4b55      	ldr	r3, [pc, #340]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0ed      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d126      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800733e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007346:	d10d      	bne.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007348:	4b4c      	ldr	r3, [pc, #304]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007356:	0919      	lsrs	r1, r3, #4
 8007358:	4b4a      	ldr	r3, [pc, #296]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800735a:	400b      	ands	r3, r1
 800735c:	4947      	ldr	r1, [pc, #284]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800735e:	4313      	orrs	r3, r2
 8007360:	610b      	str	r3, [r1, #16]
 8007362:	e005      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007364:	4b45      	ldr	r3, [pc, #276]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	4a44      	ldr	r2, [pc, #272]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800736a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800736e:	6113      	str	r3, [r2, #16]
 8007370:	4b42      	ldr	r3, [pc, #264]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800737a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800737e:	493f      	ldr	r1, [pc, #252]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007380:	4313      	orrs	r3, r2
 8007382:	670b      	str	r3, [r1, #112]	; 0x70
 8007384:	e004      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	75bb      	strb	r3, [r7, #22]
 800738a:	e001      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 8085 	beq.w	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073a2:	2b28      	cmp	r3, #40	; 0x28
 80073a4:	d866      	bhi.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80073a6:	a201      	add	r2, pc, #4	; (adr r2, 80073ac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80073a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ac:	08007489 	.word	0x08007489
 80073b0:	08007475 	.word	0x08007475
 80073b4:	08007475 	.word	0x08007475
 80073b8:	08007475 	.word	0x08007475
 80073bc:	08007475 	.word	0x08007475
 80073c0:	08007475 	.word	0x08007475
 80073c4:	08007475 	.word	0x08007475
 80073c8:	08007475 	.word	0x08007475
 80073cc:	08007451 	.word	0x08007451
 80073d0:	08007475 	.word	0x08007475
 80073d4:	08007475 	.word	0x08007475
 80073d8:	08007475 	.word	0x08007475
 80073dc:	08007475 	.word	0x08007475
 80073e0:	08007475 	.word	0x08007475
 80073e4:	08007475 	.word	0x08007475
 80073e8:	08007475 	.word	0x08007475
 80073ec:	08007463 	.word	0x08007463
 80073f0:	08007475 	.word	0x08007475
 80073f4:	08007475 	.word	0x08007475
 80073f8:	08007475 	.word	0x08007475
 80073fc:	08007475 	.word	0x08007475
 8007400:	08007475 	.word	0x08007475
 8007404:	08007475 	.word	0x08007475
 8007408:	08007475 	.word	0x08007475
 800740c:	08007489 	.word	0x08007489
 8007410:	08007475 	.word	0x08007475
 8007414:	08007475 	.word	0x08007475
 8007418:	08007475 	.word	0x08007475
 800741c:	08007475 	.word	0x08007475
 8007420:	08007475 	.word	0x08007475
 8007424:	08007475 	.word	0x08007475
 8007428:	08007475 	.word	0x08007475
 800742c:	08007489 	.word	0x08007489
 8007430:	08007475 	.word	0x08007475
 8007434:	08007475 	.word	0x08007475
 8007438:	08007475 	.word	0x08007475
 800743c:	08007475 	.word	0x08007475
 8007440:	08007475 	.word	0x08007475
 8007444:	08007475 	.word	0x08007475
 8007448:	08007475 	.word	0x08007475
 800744c:	08007489 	.word	0x08007489
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	3304      	adds	r3, #4
 8007454:	2101      	movs	r1, #1
 8007456:	4618      	mov	r0, r3
 8007458:	f001 fc1e 	bl	8008c98 <RCCEx_PLL2_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007460:	e013      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	3324      	adds	r3, #36	; 0x24
 8007466:	2101      	movs	r1, #1
 8007468:	4618      	mov	r0, r3
 800746a:	f001 fcc7 	bl	8008dfc <RCCEx_PLL3_Config>
 800746e:	4603      	mov	r3, r0
 8007470:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007472:	e00a      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	75fb      	strb	r3, [r7, #23]
      break;
 8007478:	e007      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800747a:	bf00      	nop
 800747c:	58024400 	.word	0x58024400
 8007480:	58024800 	.word	0x58024800
 8007484:	00ffffcf 	.word	0x00ffffcf
      break;
 8007488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d109      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007490:	4b96      	ldr	r3, [pc, #600]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007494:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800749c:	4993      	ldr	r1, [pc, #588]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	654b      	str	r3, [r1, #84]	; 0x54
 80074a2:	e001      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d038      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074b8:	2b05      	cmp	r3, #5
 80074ba:	d821      	bhi.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80074bc:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	08007507 	.word	0x08007507
 80074c8:	080074dd 	.word	0x080074dd
 80074cc:	080074ef 	.word	0x080074ef
 80074d0:	08007507 	.word	0x08007507
 80074d4:	08007507 	.word	0x08007507
 80074d8:	08007507 	.word	0x08007507
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3304      	adds	r3, #4
 80074e0:	2101      	movs	r1, #1
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 fbd8 	bl	8008c98 <RCCEx_PLL2_Config>
 80074e8:	4603      	mov	r3, r0
 80074ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074ec:	e00c      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3324      	adds	r3, #36	; 0x24
 80074f2:	2101      	movs	r1, #1
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 fc81 	bl	8008dfc <RCCEx_PLL3_Config>
 80074fa:	4603      	mov	r3, r0
 80074fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074fe:	e003      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	75fb      	strb	r3, [r7, #23]
      break;
 8007504:	e000      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d109      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800750e:	4b77      	ldr	r3, [pc, #476]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007512:	f023 0207 	bic.w	r2, r3, #7
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800751a:	4974      	ldr	r1, [pc, #464]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800751c:	4313      	orrs	r3, r2
 800751e:	654b      	str	r3, [r1, #84]	; 0x54
 8007520:	e001      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0304 	and.w	r3, r3, #4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d03a      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007538:	2b05      	cmp	r3, #5
 800753a:	d821      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007587 	.word	0x08007587
 8007548:	0800755d 	.word	0x0800755d
 800754c:	0800756f 	.word	0x0800756f
 8007550:	08007587 	.word	0x08007587
 8007554:	08007587 	.word	0x08007587
 8007558:	08007587 	.word	0x08007587
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3304      	adds	r3, #4
 8007560:	2101      	movs	r1, #1
 8007562:	4618      	mov	r0, r3
 8007564:	f001 fb98 	bl	8008c98 <RCCEx_PLL2_Config>
 8007568:	4603      	mov	r3, r0
 800756a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800756c:	e00c      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3324      	adds	r3, #36	; 0x24
 8007572:	2101      	movs	r1, #1
 8007574:	4618      	mov	r0, r3
 8007576:	f001 fc41 	bl	8008dfc <RCCEx_PLL3_Config>
 800757a:	4603      	mov	r3, r0
 800757c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800757e:	e003      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	75fb      	strb	r3, [r7, #23]
      break;
 8007584:	e000      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007588:	7dfb      	ldrb	r3, [r7, #23]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800758e:	4b57      	ldr	r3, [pc, #348]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007592:	f023 0207 	bic.w	r2, r3, #7
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759c:	4953      	ldr	r1, [pc, #332]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	658b      	str	r3, [r1, #88]	; 0x58
 80075a2:	e001      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
 80075a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0320 	and.w	r3, r3, #32
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d04b      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075be:	d02e      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80075c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075c4:	d828      	bhi.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80075c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ca:	d02a      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80075cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d0:	d822      	bhi.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80075d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075d6:	d026      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80075d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075dc:	d81c      	bhi.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80075de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075e2:	d010      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80075e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075e8:	d816      	bhi.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d01d      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80075ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075f2:	d111      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3304      	adds	r3, #4
 80075f8:	2100      	movs	r1, #0
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 fb4c 	bl	8008c98 <RCCEx_PLL2_Config>
 8007600:	4603      	mov	r3, r0
 8007602:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007604:	e012      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3324      	adds	r3, #36	; 0x24
 800760a:	2102      	movs	r1, #2
 800760c:	4618      	mov	r0, r3
 800760e:	f001 fbf5 	bl	8008dfc <RCCEx_PLL3_Config>
 8007612:	4603      	mov	r3, r0
 8007614:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007616:	e009      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	75fb      	strb	r3, [r7, #23]
      break;
 800761c:	e006      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800761e:	bf00      	nop
 8007620:	e004      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007622:	bf00      	nop
 8007624:	e002      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007626:	bf00      	nop
 8007628:	e000      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800762a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800762c:	7dfb      	ldrb	r3, [r7, #23]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007632:	4b2e      	ldr	r3, [pc, #184]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007636:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007640:	492a      	ldr	r1, [pc, #168]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007642:	4313      	orrs	r3, r2
 8007644:	654b      	str	r3, [r1, #84]	; 0x54
 8007646:	e001      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	d04d      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800765e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007662:	d02e      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007664:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007668:	d828      	bhi.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800766a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766e:	d02a      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007674:	d822      	bhi.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007676:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800767a:	d026      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800767c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007680:	d81c      	bhi.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007686:	d010      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800768c:	d816      	bhi.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01d      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007696:	d111      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3304      	adds	r3, #4
 800769c:	2100      	movs	r1, #0
 800769e:	4618      	mov	r0, r3
 80076a0:	f001 fafa 	bl	8008c98 <RCCEx_PLL2_Config>
 80076a4:	4603      	mov	r3, r0
 80076a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80076a8:	e012      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3324      	adds	r3, #36	; 0x24
 80076ae:	2102      	movs	r1, #2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 fba3 	bl	8008dfc <RCCEx_PLL3_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80076ba:	e009      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	75fb      	strb	r3, [r7, #23]
      break;
 80076c0:	e006      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80076c2:	bf00      	nop
 80076c4:	e004      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80076c6:	bf00      	nop
 80076c8:	e002      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80076ca:	bf00      	nop
 80076cc:	e000      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80076ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10c      	bne.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076d6:	4b05      	ldr	r3, [pc, #20]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80076d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076e4:	4901      	ldr	r1, [pc, #4]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	658b      	str	r3, [r1, #88]	; 0x58
 80076ea:	e003      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80076ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
 80076f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d04b      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007706:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800770a:	d02e      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800770c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007710:	d828      	bhi.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007716:	d02a      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800771c:	d822      	bhi.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800771e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007722:	d026      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007724:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007728:	d81c      	bhi.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800772a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800772e:	d010      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007734:	d816      	bhi.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d01d      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800773a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800773e:	d111      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3304      	adds	r3, #4
 8007744:	2100      	movs	r1, #0
 8007746:	4618      	mov	r0, r3
 8007748:	f001 faa6 	bl	8008c98 <RCCEx_PLL2_Config>
 800774c:	4603      	mov	r3, r0
 800774e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007750:	e012      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3324      	adds	r3, #36	; 0x24
 8007756:	2102      	movs	r1, #2
 8007758:	4618      	mov	r0, r3
 800775a:	f001 fb4f 	bl	8008dfc <RCCEx_PLL3_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007762:	e009      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	75fb      	strb	r3, [r7, #23]
      break;
 8007768:	e006      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800776a:	bf00      	nop
 800776c:	e004      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800776e:	bf00      	nop
 8007770:	e002      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007772:	bf00      	nop
 8007774:	e000      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007778:	7dfb      	ldrb	r3, [r7, #23]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10a      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800777e:	4b9d      	ldr	r3, [pc, #628]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800778c:	4999      	ldr	r1, [pc, #612]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800778e:	4313      	orrs	r3, r2
 8007790:	658b      	str	r3, [r1, #88]	; 0x58
 8007792:	e001      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007794:	7dfb      	ldrb	r3, [r7, #23]
 8007796:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0308 	and.w	r3, r3, #8
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d01a      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ae:	d10a      	bne.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3324      	adds	r3, #36	; 0x24
 80077b4:	2102      	movs	r1, #2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f001 fb20 	bl	8008dfc <RCCEx_PLL3_Config>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80077c6:	4b8b      	ldr	r3, [pc, #556]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077d4:	4987      	ldr	r1, [pc, #540]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0310 	and.w	r3, r3, #16
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d01a      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f0:	d10a      	bne.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	3324      	adds	r3, #36	; 0x24
 80077f6:	2102      	movs	r1, #2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f001 faff 	bl	8008dfc <RCCEx_PLL3_Config>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007808:	4b7a      	ldr	r3, [pc, #488]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800780a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007816:	4977      	ldr	r1, [pc, #476]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007818:	4313      	orrs	r3, r2
 800781a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d034      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800782e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007832:	d01d      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007838:	d817      	bhi.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800783e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007842:	d009      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007844:	e011      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	3304      	adds	r3, #4
 800784a:	2100      	movs	r1, #0
 800784c:	4618      	mov	r0, r3
 800784e:	f001 fa23 	bl	8008c98 <RCCEx_PLL2_Config>
 8007852:	4603      	mov	r3, r0
 8007854:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007856:	e00c      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	3324      	adds	r3, #36	; 0x24
 800785c:	2102      	movs	r1, #2
 800785e:	4618      	mov	r0, r3
 8007860:	f001 facc 	bl	8008dfc <RCCEx_PLL3_Config>
 8007864:	4603      	mov	r3, r0
 8007866:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007868:	e003      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	75fb      	strb	r3, [r7, #23]
      break;
 800786e:	e000      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10a      	bne.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007878:	4b5e      	ldr	r3, [pc, #376]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800787a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800787c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007886:	495b      	ldr	r1, [pc, #364]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007888:	4313      	orrs	r3, r2
 800788a:	658b      	str	r3, [r1, #88]	; 0x58
 800788c:	e001      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788e:	7dfb      	ldrb	r3, [r7, #23]
 8007890:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d033      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078a8:	d01c      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80078aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078ae:	d816      	bhi.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80078b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078b4:	d003      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80078b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078ba:	d007      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80078bc:	e00f      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078be:	4b4d      	ldr	r3, [pc, #308]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c2:	4a4c      	ldr	r2, [pc, #304]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80078ca:	e00c      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3324      	adds	r3, #36	; 0x24
 80078d0:	2101      	movs	r1, #1
 80078d2:	4618      	mov	r0, r3
 80078d4:	f001 fa92 	bl	8008dfc <RCCEx_PLL3_Config>
 80078d8:	4603      	mov	r3, r0
 80078da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80078dc:	e003      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	75fb      	strb	r3, [r7, #23]
      break;
 80078e2:	e000      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80078e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10a      	bne.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078ec:	4b41      	ldr	r3, [pc, #260]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078fa:	493e      	ldr	r1, [pc, #248]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	654b      	str	r3, [r1, #84]	; 0x54
 8007900:	e001      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007902:	7dfb      	ldrb	r3, [r7, #23]
 8007904:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d029      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800791a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800791e:	d007      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007920:	e00f      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007922:	4b34      	ldr	r3, [pc, #208]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	4a33      	ldr	r2, [pc, #204]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800792c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800792e:	e00b      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3304      	adds	r3, #4
 8007934:	2102      	movs	r1, #2
 8007936:	4618      	mov	r0, r3
 8007938:	f001 f9ae 	bl	8008c98 <RCCEx_PLL2_Config>
 800793c:	4603      	mov	r3, r0
 800793e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007940:	e002      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	75fb      	strb	r3, [r7, #23]
      break;
 8007946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800794e:	4b29      	ldr	r3, [pc, #164]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007952:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795a:	4926      	ldr	r1, [pc, #152]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800795c:	4313      	orrs	r3, r2
 800795e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007960:	e001      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007962:	7dfb      	ldrb	r3, [r7, #23]
 8007964:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3324      	adds	r3, #36	; 0x24
 8007976:	2102      	movs	r1, #2
 8007978:	4618      	mov	r0, r3
 800797a:	f001 fa3f 	bl	8008dfc <RCCEx_PLL3_Config>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d033      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800799c:	d017      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800799e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079a2:	d811      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80079a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079a8:	d013      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80079aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ae:	d80b      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d010      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80079b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b8:	d106      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079ba:	4b0e      	ldr	r3, [pc, #56]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	4a0d      	ldr	r2, [pc, #52]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80079c6:	e007      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	75fb      	strb	r3, [r7, #23]
      break;
 80079cc:	e004      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80079ce:	bf00      	nop
 80079d0:	e002      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80079d2:	bf00      	nop
 80079d4:	e000      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80079d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079d8:	7dfb      	ldrb	r3, [r7, #23]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10c      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079de:	4b05      	ldr	r3, [pc, #20]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ea:	4902      	ldr	r1, [pc, #8]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	654b      	str	r3, [r1, #84]	; 0x54
 80079f0:	e004      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80079f2:	bf00      	nop
 80079f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d008      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a08:	4b31      	ldr	r3, [pc, #196]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a14:	492e      	ldr	r1, [pc, #184]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d009      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007a26:	4b2a      	ldr	r3, [pc, #168]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a34:	4926      	ldr	r1, [pc, #152]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d008      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a46:	4b22      	ldr	r3, [pc, #136]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a52:	491f      	ldr	r1, [pc, #124]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00d      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a64:	4b1a      	ldr	r3, [pc, #104]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	4a19      	ldr	r2, [pc, #100]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a6e:	6113      	str	r3, [r2, #16]
 8007a70:	4b17      	ldr	r3, [pc, #92]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a7a:	4915      	ldr	r1, [pc, #84]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	da08      	bge.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a88:	4b11      	ldr	r3, [pc, #68]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a94:	490e      	ldr	r1, [pc, #56]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d009      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007aa6:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab4:	4906      	ldr	r1, [pc, #24]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007aba:	7dbb      	ldrb	r3, [r7, #22]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	e000      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	58024400 	.word	0x58024400

08007ad4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b090      	sub	sp, #64	; 0x40
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae2:	f040 8095 	bne.w	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007ae6:	4b97      	ldr	r3, [pc, #604]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	f200 8088 	bhi.w	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007af8:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007b15 	.word	0x08007b15
 8007b04:	08007b3d 	.word	0x08007b3d
 8007b08:	08007b65 	.word	0x08007b65
 8007b0c:	08007c01 	.word	0x08007c01
 8007b10:	08007b8d 	.word	0x08007b8d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b14:	4b8b      	ldr	r3, [pc, #556]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b20:	d108      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 ff64 	bl	80089f4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b30:	f000 bc94 	b.w	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b38:	f000 bc90 	b.w	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b3c:	4b81      	ldr	r3, [pc, #516]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b48:	d108      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b4a:	f107 0318 	add.w	r3, r7, #24
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fca8 	bl	80084a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b58:	f000 bc80 	b.w	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b60:	f000 bc7c 	b.w	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b64:	4b77      	ldr	r3, [pc, #476]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b70:	d108      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b72:	f107 030c 	add.w	r3, r7, #12
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fde8 	bl	800874c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b80:	f000 bc6c 	b.w	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b88:	f000 bc68 	b.w	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b8c:	4b6d      	ldr	r3, [pc, #436]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b94:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b96:	4b6b      	ldr	r3, [pc, #428]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0304 	and.w	r3, r3, #4
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d10c      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d109      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ba8:	4b66      	ldr	r3, [pc, #408]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	08db      	lsrs	r3, r3, #3
 8007bae:	f003 0303 	and.w	r3, r3, #3
 8007bb2:	4a65      	ldr	r2, [pc, #404]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bba:	e01f      	b.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bbc:	4b61      	ldr	r3, [pc, #388]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc8:	d106      	bne.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bd0:	d102      	bne.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007bd2:	4b5e      	ldr	r3, [pc, #376]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bd6:	e011      	b.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bd8:	4b5a      	ldr	r3, [pc, #360]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007be4:	d106      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bec:	d102      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007bee:	4b58      	ldr	r3, [pc, #352]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bf2:	e003      	b.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007bf8:	f000 bc30 	b.w	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007bfc:	f000 bc2e 	b.w	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c00:	4b54      	ldr	r3, [pc, #336]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007c02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c04:	f000 bc2a 	b.w	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c0c:	f000 bc26 	b.w	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c16:	f040 809f 	bne.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007c1a:	4b4a      	ldr	r3, [pc, #296]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c1e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007c22:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c2a:	d04d      	beq.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c32:	f200 8084 	bhi.w	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	2bc0      	cmp	r3, #192	; 0xc0
 8007c3a:	d07d      	beq.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c40:	d87d      	bhi.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	2b80      	cmp	r3, #128	; 0x80
 8007c46:	d02d      	beq.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4a:	2b80      	cmp	r3, #128	; 0x80
 8007c4c:	d877      	bhi.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d003      	beq.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c56:	2b40      	cmp	r3, #64	; 0x40
 8007c58:	d012      	beq.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8007c5a:	e070      	b.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c5c:	4b39      	ldr	r3, [pc, #228]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c68:	d107      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 fec0 	bl	80089f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c78:	e3f0      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c7e:	e3ed      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c80:	4b30      	ldr	r3, [pc, #192]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c8c:	d107      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c8e:	f107 0318 	add.w	r3, r7, #24
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 fc06 	bl	80084a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c9c:	e3de      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca2:	e3db      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ca4:	4b27      	ldr	r3, [pc, #156]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cb0:	d107      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cb2:	f107 030c 	add.w	r3, r7, #12
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 fd48 	bl	800874c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007cc0:	e3cc      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cc6:	e3c9      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007cc8:	4b1e      	ldr	r3, [pc, #120]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ccc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007cd0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007cd2:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0304 	and.w	r3, r3, #4
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d10c      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8007cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d109      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ce4:	4b17      	ldr	r3, [pc, #92]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	08db      	lsrs	r3, r3, #3
 8007cea:	f003 0303 	and.w	r3, r3, #3
 8007cee:	4a16      	ldr	r2, [pc, #88]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cf6:	e01e      	b.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cf8:	4b12      	ldr	r3, [pc, #72]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d04:	d106      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d0c:	d102      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007d0e:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d12:	e010      	b.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d14:	4b0b      	ldr	r3, [pc, #44]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d20:	d106      	bne.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d28:	d102      	bne.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007d2a:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d2e:	e002      	b.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007d30:	2300      	movs	r3, #0
 8007d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007d34:	e392      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007d36:	e391      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d38:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d3c:	e38e      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d42:	e38b      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007d44:	58024400 	.word	0x58024400
 8007d48:	03d09000 	.word	0x03d09000
 8007d4c:	003d0900 	.word	0x003d0900
 8007d50:	00f42400 	.word	0x00f42400
 8007d54:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d5e:	f040 809c 	bne.w	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007d62:	4b9d      	ldr	r3, [pc, #628]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d66:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007d6a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d72:	d054      	beq.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d7a:	f200 808b 	bhi.w	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d84:	f000 8083 	beq.w	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d8e:	f200 8081 	bhi.w	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d98:	d02f      	beq.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007da0:	d878      	bhi.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d004      	beq.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dae:	d012      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007db0:	e070      	b.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007db2:	4b89      	ldr	r3, [pc, #548]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dbe:	d107      	bne.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 fe15 	bl	80089f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007dce:	e345      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dd4:	e342      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dd6:	4b80      	ldr	r3, [pc, #512]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007de2:	d107      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007de4:	f107 0318 	add.w	r3, r7, #24
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 fb5b 	bl	80084a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007df2:	e333      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007df8:	e330      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007dfa:	4b77      	ldr	r3, [pc, #476]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e06:	d107      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e08:	f107 030c 	add.w	r3, r7, #12
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 fc9d 	bl	800874c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e16:	e321      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e1c:	e31e      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e1e:	4b6e      	ldr	r3, [pc, #440]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e26:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e28:	4b6b      	ldr	r3, [pc, #428]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d10c      	bne.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8007e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d109      	bne.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e3a:	4b67      	ldr	r3, [pc, #412]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	08db      	lsrs	r3, r3, #3
 8007e40:	f003 0303 	and.w	r3, r3, #3
 8007e44:	4a65      	ldr	r2, [pc, #404]	; (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007e46:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e4c:	e01e      	b.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e4e:	4b62      	ldr	r3, [pc, #392]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e5a:	d106      	bne.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e62:	d102      	bne.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007e64:	4b5e      	ldr	r3, [pc, #376]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e68:	e010      	b.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e6a:	4b5b      	ldr	r3, [pc, #364]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e76:	d106      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e7e:	d102      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007e80:	4b58      	ldr	r3, [pc, #352]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e84:	e002      	b.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007e8a:	e2e7      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007e8c:	e2e6      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e8e:	4b56      	ldr	r3, [pc, #344]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e92:	e2e3      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e98:	e2e0      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ea0:	f040 80a7 	bne.w	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007ea4:	4b4c      	ldr	r3, [pc, #304]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007eac:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007eb4:	d055      	beq.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ebc:	f200 8096 	bhi.w	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ec6:	f000 8084 	beq.w	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ed0:	f200 808c 	bhi.w	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007eda:	d030      	beq.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ee2:	f200 8083 	bhi.w	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d004      	beq.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ef2:	d012      	beq.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007ef4:	e07a      	b.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ef6:	4b38      	ldr	r3, [pc, #224]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007efe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f02:	d107      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 fd73 	bl	80089f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f12:	e2a3      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007f14:	2300      	movs	r3, #0
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f18:	e2a0      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f1a:	4b2f      	ldr	r3, [pc, #188]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f26:	d107      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f28:	f107 0318 	add.w	r3, r7, #24
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f000 fab9 	bl	80084a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007f36:	e291      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f3c:	e28e      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f3e:	4b26      	ldr	r3, [pc, #152]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f4a:	d107      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f4c:	f107 030c 	add.w	r3, r7, #12
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 fbfb 	bl	800874c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f5a:	e27f      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f60:	e27c      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f62:	4b1d      	ldr	r3, [pc, #116]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f6a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f6c:	4b1a      	ldr	r3, [pc, #104]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0304 	and.w	r3, r3, #4
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	d10c      	bne.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d109      	bne.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f7e:	4b16      	ldr	r3, [pc, #88]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	08db      	lsrs	r3, r3, #3
 8007f84:	f003 0303 	and.w	r3, r3, #3
 8007f88:	4a14      	ldr	r2, [pc, #80]	; (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f90:	e01e      	b.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f92:	4b11      	ldr	r3, [pc, #68]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f9e:	d106      	bne.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8007fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fa6:	d102      	bne.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007fa8:	4b0d      	ldr	r3, [pc, #52]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fac:	e010      	b.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fae:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fba:	d106      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8007fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fc2:	d102      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007fc4:	4b07      	ldr	r3, [pc, #28]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fc8:	e002      	b.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007fce:	e245      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007fd0:	e244      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007fd2:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fd6:	e241      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007fd8:	58024400 	.word	0x58024400
 8007fdc:	03d09000 	.word	0x03d09000
 8007fe0:	003d0900 	.word	0x003d0900
 8007fe4:	00f42400 	.word	0x00f42400
 8007fe8:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ff0:	e234      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff8:	f040 809c 	bne.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007ffc:	4b9b      	ldr	r3, [pc, #620]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008000:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008004:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800800c:	d054      	beq.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008014:	f200 808b 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800801e:	f000 8083 	beq.w	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008028:	f200 8081 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008032:	d02f      	beq.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8008034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800803a:	d878      	bhi.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800803c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803e:	2b00      	cmp	r3, #0
 8008040:	d004      	beq.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8008042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008048:	d012      	beq.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800804a:	e070      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800804c:	4b87      	ldr	r3, [pc, #540]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008054:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008058:	d107      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800805a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fcc8 	bl	80089f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008068:	e1f8      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800806e:	e1f5      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008070:	4b7e      	ldr	r3, [pc, #504]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008078:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800807c:	d107      	bne.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800807e:	f107 0318 	add.w	r3, r7, #24
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fa0e 	bl	80084a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800808c:	e1e6      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800808e:	2300      	movs	r3, #0
 8008090:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008092:	e1e3      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008094:	4b75      	ldr	r3, [pc, #468]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800809c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080a0:	d107      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080a2:	f107 030c 	add.w	r3, r7, #12
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fb50 	bl	800874c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80080b0:	e1d4      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080b6:	e1d1      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80080b8:	4b6c      	ldr	r3, [pc, #432]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80080ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080c0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080c2:	4b6a      	ldr	r3, [pc, #424]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0304 	and.w	r3, r3, #4
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d10c      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80080ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d109      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080d4:	4b65      	ldr	r3, [pc, #404]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	08db      	lsrs	r3, r3, #3
 80080da:	f003 0303 	and.w	r3, r3, #3
 80080de:	4a64      	ldr	r2, [pc, #400]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80080e0:	fa22 f303 	lsr.w	r3, r2, r3
 80080e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080e6:	e01e      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080e8:	4b60      	ldr	r3, [pc, #384]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080f4:	d106      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80080f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080fc:	d102      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80080fe:	4b5d      	ldr	r3, [pc, #372]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008102:	e010      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008104:	4b59      	ldr	r3, [pc, #356]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800810c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008110:	d106      	bne.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008118:	d102      	bne.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800811a:	4b57      	ldr	r3, [pc, #348]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800811c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800811e:	e002      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008120:	2300      	movs	r3, #0
 8008122:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008124:	e19a      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008126:	e199      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008128:	4b54      	ldr	r3, [pc, #336]	; (800827c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800812c:	e196      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800812e:	2300      	movs	r3, #0
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008132:	e193      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800813a:	d173      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800813c:	4b4b      	ldr	r3, [pc, #300]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800813e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008144:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800814c:	d02f      	beq.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008154:	d863      	bhi.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8008156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008158:	2b00      	cmp	r3, #0
 800815a:	d004      	beq.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008162:	d012      	beq.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8008164:	e05b      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008166:	4b41      	ldr	r3, [pc, #260]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800816e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008172:	d107      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008174:	f107 0318 	add.w	r3, r7, #24
 8008178:	4618      	mov	r0, r3
 800817a:	f000 f993 	bl	80084a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008182:	e16b      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008188:	e168      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800818a:	4b38      	ldr	r3, [pc, #224]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008196:	d107      	bne.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008198:	f107 030c 	add.w	r3, r7, #12
 800819c:	4618      	mov	r0, r3
 800819e:	f000 fad5 	bl	800874c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081a6:	e159      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ac:	e156      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80081ae:	4b2f      	ldr	r3, [pc, #188]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80081b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081b6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081b8:	4b2c      	ldr	r3, [pc, #176]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d10c      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80081c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d109      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081ca:	4b28      	ldr	r3, [pc, #160]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	08db      	lsrs	r3, r3, #3
 80081d0:	f003 0303 	and.w	r3, r3, #3
 80081d4:	4a26      	ldr	r2, [pc, #152]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80081d6:	fa22 f303 	lsr.w	r3, r2, r3
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081dc:	e01e      	b.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081de:	4b23      	ldr	r3, [pc, #140]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ea:	d106      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80081ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081f2:	d102      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80081f4:	4b1f      	ldr	r3, [pc, #124]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80081f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081f8:	e010      	b.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081fa:	4b1c      	ldr	r3, [pc, #112]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008202:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008206:	d106      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8008208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800820e:	d102      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008210:	4b19      	ldr	r3, [pc, #100]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008214:	e002      	b.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800821a:	e11f      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800821c:	e11e      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800821e:	2300      	movs	r3, #0
 8008220:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008222:	e11b      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800822a:	d13e      	bne.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800822c:	4b0f      	ldr	r3, [pc, #60]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800822e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008234:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008238:	2b00      	cmp	r3, #0
 800823a:	d004      	beq.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008242:	d01d      	beq.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008244:	e02e      	b.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008246:	4b09      	ldr	r3, [pc, #36]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800824e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008252:	d107      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008258:	4618      	mov	r0, r3
 800825a:	f000 fbcb 	bl	80089f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800825e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008260:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008262:	e0fb      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008268:	e0f8      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800826a:	bf00      	nop
 800826c:	58024400 	.word	0x58024400
 8008270:	03d09000 	.word	0x03d09000
 8008274:	003d0900 	.word	0x003d0900
 8008278:	00f42400 	.word	0x00f42400
 800827c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008280:	4b79      	ldr	r3, [pc, #484]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800828c:	d107      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800828e:	f107 0318 	add.w	r3, r7, #24
 8008292:	4618      	mov	r0, r3
 8008294:	f000 f906 	bl	80084a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800829c:	e0de      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082a2:	e0db      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082a8:	e0d8      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082b0:	f040 8085 	bne.w	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80082b4:	4b6c      	ldr	r3, [pc, #432]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80082b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80082bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082c4:	d06b      	beq.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80082c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082cc:	d874      	bhi.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d4:	d056      	beq.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80082d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082dc:	d86c      	bhi.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80082de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082e4:	d03b      	beq.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80082e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082ec:	d864      	bhi.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80082ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082f4:	d021      	beq.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80082f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082fc:	d85c      	bhi.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	2b00      	cmp	r3, #0
 8008302:	d004      	beq.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800830a:	d004      	beq.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800830c:	e054      	b.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800830e:	f000 f8b3 	bl	8008478 <HAL_RCCEx_GetD3PCLK1Freq>
 8008312:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008314:	e0a2      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008316:	4b54      	ldr	r3, [pc, #336]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800831e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008322:	d107      	bne.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008324:	f107 0318 	add.w	r3, r7, #24
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f8bb 	bl	80084a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008332:	e093      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008338:	e090      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800833a:	4b4b      	ldr	r3, [pc, #300]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008346:	d107      	bne.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008348:	f107 030c 	add.w	r3, r7, #12
 800834c:	4618      	mov	r0, r3
 800834e:	f000 f9fd 	bl	800874c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008356:	e081      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800835c:	e07e      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800835e:	4b42      	ldr	r3, [pc, #264]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0304 	and.w	r3, r3, #4
 8008366:	2b04      	cmp	r3, #4
 8008368:	d109      	bne.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800836a:	4b3f      	ldr	r3, [pc, #252]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	08db      	lsrs	r3, r3, #3
 8008370:	f003 0303 	and.w	r3, r3, #3
 8008374:	4a3d      	ldr	r2, [pc, #244]	; (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008376:	fa22 f303 	lsr.w	r3, r2, r3
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800837c:	e06e      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008382:	e06b      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008384:	4b38      	ldr	r3, [pc, #224]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800838c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008390:	d102      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8008392:	4b37      	ldr	r3, [pc, #220]	; (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008394:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008396:	e061      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800839c:	e05e      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800839e:	4b32      	ldr	r3, [pc, #200]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083aa:	d102      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 80083ac:	4b31      	ldr	r3, [pc, #196]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80083ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80083b0:	e054      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083b6:	e051      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083bc:	e04e      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083c4:	d148      	bne.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80083c6:	4b28      	ldr	r3, [pc, #160]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80083c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083ce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083d6:	d02a      	beq.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80083d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083de:	d838      	bhi.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 80083e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d004      	beq.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083ec:	d00d      	beq.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80083ee:	e030      	b.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083f0:	4b1d      	ldr	r3, [pc, #116]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083fc:	d102      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80083fe:	4b1d      	ldr	r3, [pc, #116]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008400:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008402:	e02b      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008408:	e028      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800840a:	4b17      	ldr	r3, [pc, #92]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008416:	d107      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800841c:	4618      	mov	r0, r3
 800841e:	f000 fae9 	bl	80089f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008426:	e019      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800842c:	e016      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800842e:	4b0e      	ldr	r3, [pc, #56]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800843a:	d107      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800843c:	f107 0318 	add.w	r3, r7, #24
 8008440:	4618      	mov	r0, r3
 8008442:	f000 f82f 	bl	80084a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800844a:	e007      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008450:	e004      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008452:	2300      	movs	r3, #0
 8008454:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008456:	e001      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800845c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800845e:	4618      	mov	r0, r3
 8008460:	3740      	adds	r7, #64	; 0x40
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	58024400 	.word	0x58024400
 800846c:	03d09000 	.word	0x03d09000
 8008470:	003d0900 	.word	0x003d0900
 8008474:	00f42400 	.word	0x00f42400

08008478 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800847c:	f7fe fbb4 	bl	8006be8 <HAL_RCC_GetHCLKFreq>
 8008480:	4602      	mov	r2, r0
 8008482:	4b06      	ldr	r3, [pc, #24]	; (800849c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	091b      	lsrs	r3, r3, #4
 8008488:	f003 0307 	and.w	r3, r3, #7
 800848c:	4904      	ldr	r1, [pc, #16]	; (80084a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800848e:	5ccb      	ldrb	r3, [r1, r3]
 8008490:	f003 031f 	and.w	r3, r3, #31
 8008494:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008498:	4618      	mov	r0, r3
 800849a:	bd80      	pop	{r7, pc}
 800849c:	58024400 	.word	0x58024400
 80084a0:	0800ddf0 	.word	0x0800ddf0

080084a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b089      	sub	sp, #36	; 0x24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084ac:	4ba1      	ldr	r3, [pc, #644]	; (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b0:	f003 0303 	and.w	r3, r3, #3
 80084b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80084b6:	4b9f      	ldr	r3, [pc, #636]	; (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ba:	0b1b      	lsrs	r3, r3, #12
 80084bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80084c2:	4b9c      	ldr	r3, [pc, #624]	; (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c6:	091b      	lsrs	r3, r3, #4
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80084ce:	4b99      	ldr	r3, [pc, #612]	; (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d2:	08db      	lsrs	r3, r3, #3
 80084d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	fb02 f303 	mul.w	r3, r2, r3
 80084de:	ee07 3a90 	vmov	s15, r3
 80084e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 8111 	beq.w	8008714 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	f000 8083 	beq.w	8008600 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	f200 80a1 	bhi.w	8008644 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d003      	beq.n	8008510 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d056      	beq.n	80085bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800850e:	e099      	b.n	8008644 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008510:	4b88      	ldr	r3, [pc, #544]	; (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0320 	and.w	r3, r3, #32
 8008518:	2b00      	cmp	r3, #0
 800851a:	d02d      	beq.n	8008578 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800851c:	4b85      	ldr	r3, [pc, #532]	; (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	08db      	lsrs	r3, r3, #3
 8008522:	f003 0303 	and.w	r3, r3, #3
 8008526:	4a84      	ldr	r2, [pc, #528]	; (8008738 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008528:	fa22 f303 	lsr.w	r3, r2, r3
 800852c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	ee07 3a90 	vmov	s15, r3
 8008534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	ee07 3a90 	vmov	s15, r3
 800853e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008546:	4b7b      	ldr	r3, [pc, #492]	; (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854e:	ee07 3a90 	vmov	s15, r3
 8008552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008556:	ed97 6a03 	vldr	s12, [r7, #12]
 800855a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800873c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800855e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800856a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800856e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008572:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008576:	e087      	b.n	8008688 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	ee07 3a90 	vmov	s15, r3
 800857e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008582:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008740 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800858a:	4b6a      	ldr	r3, [pc, #424]	; (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008592:	ee07 3a90 	vmov	s15, r3
 8008596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800859a:	ed97 6a03 	vldr	s12, [r7, #12]
 800859e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800873c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085ba:	e065      	b.n	8008688 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	ee07 3a90 	vmov	s15, r3
 80085c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008744 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80085ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ce:	4b59      	ldr	r3, [pc, #356]	; (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d6:	ee07 3a90 	vmov	s15, r3
 80085da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085de:	ed97 6a03 	vldr	s12, [r7, #12]
 80085e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800873c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085fe:	e043      	b.n	8008688 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	ee07 3a90 	vmov	s15, r3
 8008606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008748 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800860e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008612:	4b48      	ldr	r3, [pc, #288]	; (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861a:	ee07 3a90 	vmov	s15, r3
 800861e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008622:	ed97 6a03 	vldr	s12, [r7, #12]
 8008626:	eddf 5a45 	vldr	s11, [pc, #276]	; 800873c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800862a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800862e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800863e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008642:	e021      	b.n	8008688 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008744 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008656:	4b37      	ldr	r3, [pc, #220]	; (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008666:	ed97 6a03 	vldr	s12, [r7, #12]
 800866a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800873c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800866e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800867a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800867e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008682:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008686:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008688:	4b2a      	ldr	r3, [pc, #168]	; (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800868a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868c:	0a5b      	lsrs	r3, r3, #9
 800868e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800869e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80086a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ae:	ee17 2a90 	vmov	r2, s15
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80086b6:	4b1f      	ldr	r3, [pc, #124]	; (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ba:	0c1b      	lsrs	r3, r3, #16
 80086bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c0:	ee07 3a90 	vmov	s15, r3
 80086c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80086d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086dc:	ee17 2a90 	vmov	r2, s15
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80086e4:	4b13      	ldr	r3, [pc, #76]	; (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	0e1b      	lsrs	r3, r3, #24
 80086ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800870a:	ee17 2a90 	vmov	r2, s15
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008712:	e008      	b.n	8008726 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	609a      	str	r2, [r3, #8]
}
 8008726:	bf00      	nop
 8008728:	3724      	adds	r7, #36	; 0x24
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	58024400 	.word	0x58024400
 8008738:	03d09000 	.word	0x03d09000
 800873c:	46000000 	.word	0x46000000
 8008740:	4c742400 	.word	0x4c742400
 8008744:	4a742400 	.word	0x4a742400
 8008748:	4b742400 	.word	0x4b742400

0800874c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800874c:	b480      	push	{r7}
 800874e:	b089      	sub	sp, #36	; 0x24
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008754:	4ba1      	ldr	r3, [pc, #644]	; (80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	f003 0303 	and.w	r3, r3, #3
 800875c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800875e:	4b9f      	ldr	r3, [pc, #636]	; (80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008762:	0d1b      	lsrs	r3, r3, #20
 8008764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008768:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800876a:	4b9c      	ldr	r3, [pc, #624]	; (80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800876c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876e:	0a1b      	lsrs	r3, r3, #8
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008776:	4b99      	ldr	r3, [pc, #612]	; (80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877a:	08db      	lsrs	r3, r3, #3
 800877c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	fb02 f303 	mul.w	r3, r2, r3
 8008786:	ee07 3a90 	vmov	s15, r3
 800878a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 8111 	beq.w	80089bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	2b02      	cmp	r3, #2
 800879e:	f000 8083 	beq.w	80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	f200 80a1 	bhi.w	80088ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d003      	beq.n	80087b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d056      	beq.n	8008864 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80087b6:	e099      	b.n	80088ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087b8:	4b88      	ldr	r3, [pc, #544]	; (80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d02d      	beq.n	8008820 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087c4:	4b85      	ldr	r3, [pc, #532]	; (80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	08db      	lsrs	r3, r3, #3
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	4a84      	ldr	r2, [pc, #528]	; (80089e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80087d0:	fa22 f303 	lsr.w	r3, r2, r3
 80087d4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	ee07 3a90 	vmov	s15, r3
 80087dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ee:	4b7b      	ldr	r3, [pc, #492]	; (80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f6:	ee07 3a90 	vmov	s15, r3
 80087fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008802:	eddf 5a78 	vldr	s11, [pc, #480]	; 80089e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800880a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800880e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800881a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800881e:	e087      	b.n	8008930 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800882e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008832:	4b6a      	ldr	r3, [pc, #424]	; (80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800883a:	ee07 3a90 	vmov	s15, r3
 800883e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008842:	ed97 6a03 	vldr	s12, [r7, #12]
 8008846:	eddf 5a67 	vldr	s11, [pc, #412]	; 80089e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800884a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800884e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800885a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800885e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008862:	e065      	b.n	8008930 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800886e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80089ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008876:	4b59      	ldr	r3, [pc, #356]	; (80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008886:	ed97 6a03 	vldr	s12, [r7, #12]
 800888a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80089e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800888e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800889a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800889e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088a6:	e043      	b.n	8008930 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	ee07 3a90 	vmov	s15, r3
 80088ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80089f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80088b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ba:	4b48      	ldr	r3, [pc, #288]	; (80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c2:	ee07 3a90 	vmov	s15, r3
 80088c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80088ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80089e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088ea:	e021      	b.n	8008930 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	ee07 3a90 	vmov	s15, r3
 80088f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80089ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80088fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088fe:	4b37      	ldr	r3, [pc, #220]	; (80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008906:	ee07 3a90 	vmov	s15, r3
 800890a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800890e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008912:	eddf 5a34 	vldr	s11, [pc, #208]	; 80089e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800891a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800891e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800892a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800892e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008930:	4b2a      	ldr	r3, [pc, #168]	; (80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008934:	0a5b      	lsrs	r3, r3, #9
 8008936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008942:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008946:	ee37 7a87 	vadd.f32	s14, s15, s14
 800894a:	edd7 6a07 	vldr	s13, [r7, #28]
 800894e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008956:	ee17 2a90 	vmov	r2, s15
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800895e:	4b1f      	ldr	r3, [pc, #124]	; (80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	0c1b      	lsrs	r3, r3, #16
 8008964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008968:	ee07 3a90 	vmov	s15, r3
 800896c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008974:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008978:	edd7 6a07 	vldr	s13, [r7, #28]
 800897c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008984:	ee17 2a90 	vmov	r2, s15
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800898c:	4b13      	ldr	r3, [pc, #76]	; (80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800898e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008990:	0e1b      	lsrs	r3, r3, #24
 8008992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b2:	ee17 2a90 	vmov	r2, s15
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80089ba:	e008      	b.n	80089ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	609a      	str	r2, [r3, #8]
}
 80089ce:	bf00      	nop
 80089d0:	3724      	adds	r7, #36	; 0x24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	58024400 	.word	0x58024400
 80089e0:	03d09000 	.word	0x03d09000
 80089e4:	46000000 	.word	0x46000000
 80089e8:	4c742400 	.word	0x4c742400
 80089ec:	4a742400 	.word	0x4a742400
 80089f0:	4b742400 	.word	0x4b742400

080089f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b089      	sub	sp, #36	; 0x24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089fc:	4ba0      	ldr	r3, [pc, #640]	; (8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a00:	f003 0303 	and.w	r3, r3, #3
 8008a04:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008a06:	4b9e      	ldr	r3, [pc, #632]	; (8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0a:	091b      	lsrs	r3, r3, #4
 8008a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a10:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008a12:	4b9b      	ldr	r3, [pc, #620]	; (8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008a1c:	4b98      	ldr	r3, [pc, #608]	; (8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a20:	08db      	lsrs	r3, r3, #3
 8008a22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	fb02 f303 	mul.w	r3, r2, r3
 8008a2c:	ee07 3a90 	vmov	s15, r3
 8008a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 8111 	beq.w	8008c62 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	f000 8083 	beq.w	8008b4e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	f200 80a1 	bhi.w	8008b92 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d056      	beq.n	8008b0a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008a5c:	e099      	b.n	8008b92 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a5e:	4b88      	ldr	r3, [pc, #544]	; (8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 0320 	and.w	r3, r3, #32
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d02d      	beq.n	8008ac6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a6a:	4b85      	ldr	r3, [pc, #532]	; (8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	08db      	lsrs	r3, r3, #3
 8008a70:	f003 0303 	and.w	r3, r3, #3
 8008a74:	4a83      	ldr	r2, [pc, #524]	; (8008c84 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008a76:	fa22 f303 	lsr.w	r3, r2, r3
 8008a7a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	ee07 3a90 	vmov	s15, r3
 8008a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a94:	4b7a      	ldr	r3, [pc, #488]	; (8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9c:	ee07 3a90 	vmov	s15, r3
 8008aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aa8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008c88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008aac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008ac4:	e087      	b.n	8008bd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	ee07 3a90 	vmov	s15, r3
 8008acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad8:	4b69      	ldr	r3, [pc, #420]	; (8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae0:	ee07 3a90 	vmov	s15, r3
 8008ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008c88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008af0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b08:	e065      	b.n	8008bd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	ee07 3a90 	vmov	s15, r3
 8008b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b14:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008c90 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008b18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1c:	4b58      	ldr	r3, [pc, #352]	; (8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b24:	ee07 3a90 	vmov	s15, r3
 8008b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b30:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008c88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b4c:	e043      	b.n	8008bd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	ee07 3a90 	vmov	s15, r3
 8008b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b58:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008b5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b60:	4b47      	ldr	r3, [pc, #284]	; (8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b68:	ee07 3a90 	vmov	s15, r3
 8008b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b70:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b74:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008c88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b90:	e021      	b.n	8008bd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	ee07 3a90 	vmov	s15, r3
 8008b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ba4:	4b36      	ldr	r3, [pc, #216]	; (8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bac:	ee07 3a90 	vmov	s15, r3
 8008bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bb8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008c88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008bbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bd4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008bd6:	4b2a      	ldr	r3, [pc, #168]	; (8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	0a5b      	lsrs	r3, r3, #9
 8008bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be0:	ee07 3a90 	vmov	s15, r3
 8008be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bfc:	ee17 2a90 	vmov	r2, s15
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008c04:	4b1e      	ldr	r3, [pc, #120]	; (8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c08:	0c1b      	lsrs	r3, r3, #16
 8008c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c2a:	ee17 2a90 	vmov	r2, s15
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008c32:	4b13      	ldr	r3, [pc, #76]	; (8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c36:	0e1b      	lsrs	r3, r3, #24
 8008c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c3c:	ee07 3a90 	vmov	s15, r3
 8008c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c58:	ee17 2a90 	vmov	r2, s15
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008c60:	e008      	b.n	8008c74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	609a      	str	r2, [r3, #8]
}
 8008c74:	bf00      	nop
 8008c76:	3724      	adds	r7, #36	; 0x24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	58024400 	.word	0x58024400
 8008c84:	03d09000 	.word	0x03d09000
 8008c88:	46000000 	.word	0x46000000
 8008c8c:	4c742400 	.word	0x4c742400
 8008c90:	4a742400 	.word	0x4a742400
 8008c94:	4b742400 	.word	0x4b742400

08008c98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ca6:	4b53      	ldr	r3, [pc, #332]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008caa:	f003 0303 	and.w	r3, r3, #3
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d101      	bne.n	8008cb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e099      	b.n	8008dea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008cb6:	4b4f      	ldr	r3, [pc, #316]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a4e      	ldr	r2, [pc, #312]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008cbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cc2:	f7f9 f9cd 	bl	8002060 <HAL_GetTick>
 8008cc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cc8:	e008      	b.n	8008cdc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008cca:	f7f9 f9c9 	bl	8002060 <HAL_GetTick>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d901      	bls.n	8008cdc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e086      	b.n	8008dea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cdc:	4b45      	ldr	r3, [pc, #276]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1f0      	bne.n	8008cca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ce8:	4b42      	ldr	r3, [pc, #264]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	031b      	lsls	r3, r3, #12
 8008cf6:	493f      	ldr	r1, [pc, #252]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	628b      	str	r3, [r1, #40]	; 0x28
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	3b01      	subs	r3, #1
 8008d02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	025b      	lsls	r3, r3, #9
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	431a      	orrs	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	041b      	lsls	r3, r3, #16
 8008d1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	3b01      	subs	r3, #1
 8008d26:	061b      	lsls	r3, r3, #24
 8008d28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d2c:	4931      	ldr	r1, [pc, #196]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008d32:	4b30      	ldr	r3, [pc, #192]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	492d      	ldr	r1, [pc, #180]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008d44:	4b2b      	ldr	r3, [pc, #172]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d48:	f023 0220 	bic.w	r2, r3, #32
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	4928      	ldr	r1, [pc, #160]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008d56:	4b27      	ldr	r3, [pc, #156]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5a:	4a26      	ldr	r2, [pc, #152]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008d5c:	f023 0310 	bic.w	r3, r3, #16
 8008d60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d62:	4b24      	ldr	r3, [pc, #144]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d66:	4b24      	ldr	r3, [pc, #144]	; (8008df8 <RCCEx_PLL2_Config+0x160>)
 8008d68:	4013      	ands	r3, r2
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	69d2      	ldr	r2, [r2, #28]
 8008d6e:	00d2      	lsls	r2, r2, #3
 8008d70:	4920      	ldr	r1, [pc, #128]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008d76:	4b1f      	ldr	r3, [pc, #124]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7a:	4a1e      	ldr	r2, [pc, #120]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008d7c:	f043 0310 	orr.w	r3, r3, #16
 8008d80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d106      	bne.n	8008d96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008d88:	4b1a      	ldr	r3, [pc, #104]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	4a19      	ldr	r2, [pc, #100]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008d8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d94:	e00f      	b.n	8008db6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d106      	bne.n	8008daa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d9c:	4b15      	ldr	r3, [pc, #84]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da0:	4a14      	ldr	r2, [pc, #80]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008da6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008da8:	e005      	b.n	8008db6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008daa:	4b12      	ldr	r3, [pc, #72]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	4a11      	ldr	r2, [pc, #68]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008db4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008db6:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a0e      	ldr	r2, [pc, #56]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008dbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dc2:	f7f9 f94d 	bl	8002060 <HAL_GetTick>
 8008dc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008dc8:	e008      	b.n	8008ddc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008dca:	f7f9 f949 	bl	8002060 <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d901      	bls.n	8008ddc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e006      	b.n	8008dea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ddc:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <RCCEx_PLL2_Config+0x15c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0f0      	beq.n	8008dca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	58024400 	.word	0x58024400
 8008df8:	ffff0007 	.word	0xffff0007

08008dfc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e0a:	4b53      	ldr	r3, [pc, #332]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0e:	f003 0303 	and.w	r3, r3, #3
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d101      	bne.n	8008e1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e099      	b.n	8008f4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008e1a:	4b4f      	ldr	r3, [pc, #316]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a4e      	ldr	r2, [pc, #312]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e26:	f7f9 f91b 	bl	8002060 <HAL_GetTick>
 8008e2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e2c:	e008      	b.n	8008e40 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008e2e:	f7f9 f917 	bl	8002060 <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d901      	bls.n	8008e40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e086      	b.n	8008f4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e40:	4b45      	ldr	r3, [pc, #276]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1f0      	bne.n	8008e2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008e4c:	4b42      	ldr	r3, [pc, #264]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	051b      	lsls	r3, r3, #20
 8008e5a:	493f      	ldr	r1, [pc, #252]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	628b      	str	r3, [r1, #40]	; 0x28
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	025b      	lsls	r3, r3, #9
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	431a      	orrs	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	041b      	lsls	r3, r3, #16
 8008e7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e82:	431a      	orrs	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	061b      	lsls	r3, r3, #24
 8008e8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e90:	4931      	ldr	r1, [pc, #196]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e96:	4b30      	ldr	r3, [pc, #192]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	492d      	ldr	r1, [pc, #180]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ea8:	4b2b      	ldr	r3, [pc, #172]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	4928      	ldr	r1, [pc, #160]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008eba:	4b27      	ldr	r3, [pc, #156]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebe:	4a26      	ldr	r2, [pc, #152]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ec6:	4b24      	ldr	r3, [pc, #144]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eca:	4b24      	ldr	r3, [pc, #144]	; (8008f5c <RCCEx_PLL3_Config+0x160>)
 8008ecc:	4013      	ands	r3, r2
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	69d2      	ldr	r2, [r2, #28]
 8008ed2:	00d2      	lsls	r2, r2, #3
 8008ed4:	4920      	ldr	r1, [pc, #128]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008eda:	4b1f      	ldr	r3, [pc, #124]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ede:	4a1e      	ldr	r2, [pc, #120]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d106      	bne.n	8008efa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008eec:	4b1a      	ldr	r3, [pc, #104]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	4a19      	ldr	r2, [pc, #100]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008ef2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ef8:	e00f      	b.n	8008f1a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d106      	bne.n	8008f0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008f00:	4b15      	ldr	r3, [pc, #84]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	4a14      	ldr	r2, [pc, #80]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008f06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f0c:	e005      	b.n	8008f1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008f0e:	4b12      	ldr	r3, [pc, #72]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f12:	4a11      	ldr	r2, [pc, #68]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008f1a:	4b0f      	ldr	r3, [pc, #60]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a0e      	ldr	r2, [pc, #56]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f26:	f7f9 f89b 	bl	8002060 <HAL_GetTick>
 8008f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f2c:	e008      	b.n	8008f40 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f2e:	f7f9 f897 	bl	8002060 <HAL_GetTick>
 8008f32:	4602      	mov	r2, r0
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d901      	bls.n	8008f40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e006      	b.n	8008f4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f40:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <RCCEx_PLL3_Config+0x15c>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d0f0      	beq.n	8008f2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	58024400 	.word	0x58024400
 8008f5c:	ffff0007 	.word	0xffff0007

08008f60 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e054      	b.n	800901c <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	7a5b      	ldrb	r3, [r3, #9]
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d105      	bne.n	8008f88 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7f8 fb2c 	bl	80015e0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f023 0120 	bic.w	r1, r3, #32
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f042 0204 	orr.w	r2, r2, #4
 8008fb2:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fbe:	2b40      	cmp	r3, #64	; 0x40
 8008fc0:	d104      	bne.n	8008fcc <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2204      	movs	r2, #4
 8008fc6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e027      	b.n	800901c <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8008fcc:	f7f9 f848 	bl	8002060 <HAL_GetTick>
 8008fd0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008fd2:	e015      	b.n	8009000 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008fd4:	f7f9 f844 	bl	8002060 <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d90e      	bls.n	8009000 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	d107      	bne.n	8009000 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2204      	movs	r2, #4
 8008ff4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e00d      	b.n	800901c <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f003 0304 	and.w	r3, r3, #4
 800900a:	2b04      	cmp	r3, #4
 800900c:	d0e2      	beq.n	8008fd4 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2201      	movs	r2, #1
 8009012:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	7a1b      	ldrb	r3, [r3, #8]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d101      	bne.n	800903e <HAL_RNG_GenerateRandomNumber+0x1a>
 800903a:	2302      	movs	r3, #2
 800903c:	e044      	b.n	80090c8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	7a5b      	ldrb	r3, [r3, #9]
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b01      	cmp	r3, #1
 800904c:	d133      	bne.n	80090b6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2202      	movs	r2, #2
 8009052:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8009054:	f7f9 f804 	bl	8002060 <HAL_GetTick>
 8009058:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800905a:	e018      	b.n	800908e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800905c:	f7f9 f800 	bl	8002060 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	2b02      	cmp	r3, #2
 8009068:	d911      	bls.n	800908e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	2b01      	cmp	r3, #1
 8009076:	d00a      	beq.n	800908e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2202      	movs	r2, #2
 8009082:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e01c      	b.n	80090c8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	2b01      	cmp	r3, #1
 800909a:	d1df      	bne.n	800905c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689a      	ldr	r2, [r3, #8]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	691a      	ldr	r2, [r3, #16]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	725a      	strb	r2, [r3, #9]
 80090b4:	e004      	b.n	80090c0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2204      	movs	r2, #4
 80090ba:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	721a      	strb	r2, [r3, #8]

  return status;
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
 80090dc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d904      	bls.n	80090ee <HAL_SAI_InitProtocol+0x1e>
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	3b03      	subs	r3, #3
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d812      	bhi.n	8009112 <HAL_SAI_InitProtocol+0x42>
 80090ec:	e008      	b.n	8009100 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	68b9      	ldr	r1, [r7, #8]
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 fc25 	bl	8009944 <SAI_InitI2S>
 80090fa:	4603      	mov	r3, r0
 80090fc:	75fb      	strb	r3, [r7, #23]
      break;
 80090fe:	e00b      	b.n	8009118 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	68b9      	ldr	r1, [r7, #8]
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 fcce 	bl	8009aa8 <SAI_InitPCM>
 800910c:	4603      	mov	r3, r0
 800910e:	75fb      	strb	r3, [r7, #23]
      break;
 8009110:	e002      	b.n	8009118 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	75fb      	strb	r3, [r7, #23]
      break;
 8009116:	bf00      	nop
  }

  if (status == HAL_OK)
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d104      	bne.n	8009128 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 f808 	bl	8009134 <HAL_SAI_Init>
 8009124:	4603      	mov	r3, r0
 8009126:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009128:	7dfb      	ldrb	r3, [r7, #23]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b08a      	sub	sp, #40	; 0x28
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d101      	bne.n	8009146 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e283      	b.n	800964e <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009146:	f7f8 ffbb 	bl	80020c0 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009150:	2b01      	cmp	r3, #1
 8009152:	d113      	bne.n	800917c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a94      	ldr	r2, [pc, #592]	; (80093ac <HAL_SAI_Init+0x278>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d004      	beq.n	8009168 <HAL_SAI_Init+0x34>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a93      	ldr	r2, [pc, #588]	; (80093b0 <HAL_SAI_Init+0x27c>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d107      	bne.n	8009178 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800916c:	2b01      	cmp	r3, #1
 800916e:	d103      	bne.n	8009178 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009174:	2b00      	cmp	r3, #0
 8009176:	d001      	beq.n	800917c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e268      	b.n	800964e <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a8a      	ldr	r2, [pc, #552]	; (80093ac <HAL_SAI_Init+0x278>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d004      	beq.n	8009190 <HAL_SAI_Init+0x5c>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a8a      	ldr	r2, [pc, #552]	; (80093b4 <HAL_SAI_Init+0x280>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d102      	bne.n	8009196 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8009190:	4b89      	ldr	r3, [pc, #548]	; (80093b8 <HAL_SAI_Init+0x284>)
 8009192:	61bb      	str	r3, [r7, #24]
 8009194:	e028      	b.n	80091e8 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a88      	ldr	r2, [pc, #544]	; (80093bc <HAL_SAI_Init+0x288>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d004      	beq.n	80091aa <HAL_SAI_Init+0x76>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a86      	ldr	r2, [pc, #536]	; (80093c0 <HAL_SAI_Init+0x28c>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d102      	bne.n	80091b0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 80091aa:	4b86      	ldr	r3, [pc, #536]	; (80093c4 <HAL_SAI_Init+0x290>)
 80091ac:	61bb      	str	r3, [r7, #24]
 80091ae:	e01b      	b.n	80091e8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a84      	ldr	r2, [pc, #528]	; (80093c8 <HAL_SAI_Init+0x294>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d004      	beq.n	80091c4 <HAL_SAI_Init+0x90>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a83      	ldr	r2, [pc, #524]	; (80093cc <HAL_SAI_Init+0x298>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d102      	bne.n	80091ca <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 80091c4:	4b82      	ldr	r3, [pc, #520]	; (80093d0 <HAL_SAI_Init+0x29c>)
 80091c6:	61bb      	str	r3, [r7, #24]
 80091c8:	e00e      	b.n	80091e8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a78      	ldr	r2, [pc, #480]	; (80093b0 <HAL_SAI_Init+0x27c>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d004      	beq.n	80091de <HAL_SAI_Init+0xaa>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a7e      	ldr	r2, [pc, #504]	; (80093d4 <HAL_SAI_Init+0x2a0>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d102      	bne.n	80091e4 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 80091de:	4b7e      	ldr	r3, [pc, #504]	; (80093d8 <HAL_SAI_Init+0x2a4>)
 80091e0:	61bb      	str	r3, [r7, #24]
 80091e2:	e001      	b.n	80091e8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e232      	b.n	800964e <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d106      	bne.n	8009202 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7f8 fa83 	bl	8001708 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fd0a 	bl	8009c1c <SAI_Disable>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e21d      	b.n	800964e <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2202      	movs	r2, #2
 8009216:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	2b02      	cmp	r3, #2
 8009220:	d00c      	beq.n	800923c <HAL_SAI_Init+0x108>
 8009222:	2b02      	cmp	r3, #2
 8009224:	d80d      	bhi.n	8009242 <HAL_SAI_Init+0x10e>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <HAL_SAI_Init+0xfc>
 800922a:	2b01      	cmp	r3, #1
 800922c:	d003      	beq.n	8009236 <HAL_SAI_Init+0x102>
 800922e:	e008      	b.n	8009242 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009234:	e008      	b.n	8009248 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009236:	2310      	movs	r3, #16
 8009238:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800923a:	e005      	b.n	8009248 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800923c:	2320      	movs	r3, #32
 800923e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009240:	e002      	b.n	8009248 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009246:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	2b05      	cmp	r3, #5
 800924e:	d832      	bhi.n	80092b6 <HAL_SAI_Init+0x182>
 8009250:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <HAL_SAI_Init+0x124>)
 8009252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009256:	bf00      	nop
 8009258:	08009271 	.word	0x08009271
 800925c:	08009277 	.word	0x08009277
 8009260:	0800927f 	.word	0x0800927f
 8009264:	08009287 	.word	0x08009287
 8009268:	08009297 	.word	0x08009297
 800926c:	080092a7 	.word	0x080092a7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	61fb      	str	r3, [r7, #28]
      break;
 8009274:	e022      	b.n	80092bc <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800927a:	61fb      	str	r3, [r7, #28]
      break;
 800927c:	e01e      	b.n	80092bc <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800927e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009282:	61fb      	str	r3, [r7, #28]
      break;
 8009284:	e01a      	b.n	80092bc <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009286:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800928a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	f043 0301 	orr.w	r3, r3, #1
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009294:	e012      	b.n	80092bc <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009296:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800929a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	f043 0302 	orr.w	r3, r3, #2
 80092a2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80092a4:	e00a      	b.n	80092bc <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80092a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092aa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	f043 0303 	orr.w	r3, r3, #3
 80092b2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80092b4:	e002      	b.n	80092bc <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	61fb      	str	r3, [r7, #28]
      break;
 80092ba:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c0:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 80ba 	beq.w	8009440 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 80092cc:	2300      	movs	r3, #0
 80092ce:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a35      	ldr	r2, [pc, #212]	; (80093ac <HAL_SAI_Init+0x278>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d004      	beq.n	80092e4 <HAL_SAI_Init+0x1b0>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a35      	ldr	r2, [pc, #212]	; (80093b4 <HAL_SAI_Init+0x280>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d104      	bne.n	80092ee <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80092e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80092e8:	f7fe fbf4 	bl	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 80092ec:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a32      	ldr	r2, [pc, #200]	; (80093bc <HAL_SAI_Init+0x288>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d004      	beq.n	8009302 <HAL_SAI_Init+0x1ce>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a30      	ldr	r2, [pc, #192]	; (80093c0 <HAL_SAI_Init+0x28c>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d104      	bne.n	800930c <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009302:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009306:	f7fe fbe5 	bl	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 800930a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a2d      	ldr	r2, [pc, #180]	; (80093c8 <HAL_SAI_Init+0x294>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d004      	beq.n	8009320 <HAL_SAI_Init+0x1ec>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a2c      	ldr	r2, [pc, #176]	; (80093cc <HAL_SAI_Init+0x298>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d104      	bne.n	800932a <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009320:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009324:	f7fe fbd6 	bl	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009328:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a20      	ldr	r2, [pc, #128]	; (80093b0 <HAL_SAI_Init+0x27c>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d104      	bne.n	800933e <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009334:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009338:	f7fe fbcc 	bl	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 800933c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a24      	ldr	r2, [pc, #144]	; (80093d4 <HAL_SAI_Init+0x2a0>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d104      	bne.n	8009352 <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8009348:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800934c:	f7fe fbc2 	bl	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009350:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800935a:	d120      	bne.n	800939e <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009360:	2b04      	cmp	r3, #4
 8009362:	d102      	bne.n	800936a <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8009364:	2340      	movs	r3, #64	; 0x40
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	e00a      	b.n	8009380 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800936e:	2b08      	cmp	r3, #8
 8009370:	d103      	bne.n	800937a <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8009372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	e002      	b.n	8009380 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800937e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	4619      	mov	r1, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a1b      	ldr	r3, [r3, #32]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	fb02 f303 	mul.w	r3, r2, r3
 8009396:	fbb1 f3f3 	udiv	r3, r1, r3
 800939a:	613b      	str	r3, [r7, #16]
 800939c:	e02f      	b.n	80093fe <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093a6:	d119      	bne.n	80093dc <HAL_SAI_Init+0x2a8>
 80093a8:	2302      	movs	r3, #2
 80093aa:	e018      	b.n	80093de <HAL_SAI_Init+0x2aa>
 80093ac:	40015804 	.word	0x40015804
 80093b0:	58005404 	.word	0x58005404
 80093b4:	40015824 	.word	0x40015824
 80093b8:	40015800 	.word	0x40015800
 80093bc:	40015c04 	.word	0x40015c04
 80093c0:	40015c24 	.word	0x40015c24
 80093c4:	40015c00 	.word	0x40015c00
 80093c8:	40016004 	.word	0x40016004
 80093cc:	40016024 	.word	0x40016024
 80093d0:	40016000 	.word	0x40016000
 80093d4:	58005424 	.word	0x58005424
 80093d8:	58005400 	.word	0x58005400
 80093dc:	2301      	movs	r3, #1
 80093de:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	4619      	mov	r1, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6a1b      	ldr	r3, [r3, #32]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	fb02 f303 	mul.w	r3, r2, r3
 80093f6:	021b      	lsls	r3, r3, #8
 80093f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80093fc:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	4a95      	ldr	r2, [pc, #596]	; (8009658 <HAL_SAI_Init+0x524>)
 8009402:	fba2 2303 	umull	r2, r3, r2, r3
 8009406:	08da      	lsrs	r2, r3, #3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800940c:	6939      	ldr	r1, [r7, #16]
 800940e:	4b92      	ldr	r3, [pc, #584]	; (8009658 <HAL_SAI_Init+0x524>)
 8009410:	fba3 2301 	umull	r2, r3, r3, r1
 8009414:	08da      	lsrs	r2, r3, #3
 8009416:	4613      	mov	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	005b      	lsls	r3, r3, #1
 800941e:	1aca      	subs	r2, r1, r3
 8009420:	2a08      	cmp	r2, #8
 8009422:	d904      	bls.n	800942e <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009428:	1c5a      	adds	r2, r3, #1
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009432:	2b04      	cmp	r3, #4
 8009434:	d104      	bne.n	8009440 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	085a      	lsrs	r2, r3, #1
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d003      	beq.n	8009450 <HAL_SAI_Init+0x31c>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	2b02      	cmp	r3, #2
 800944e:	d109      	bne.n	8009464 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009454:	2b01      	cmp	r3, #1
 8009456:	d101      	bne.n	800945c <HAL_SAI_Init+0x328>
 8009458:	2300      	movs	r3, #0
 800945a:	e001      	b.n	8009460 <HAL_SAI_Init+0x32c>
 800945c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009460:	623b      	str	r3, [r7, #32]
 8009462:	e008      	b.n	8009476 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009468:	2b01      	cmp	r3, #1
 800946a:	d102      	bne.n	8009472 <HAL_SAI_Init+0x33e>
 800946c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009470:	e000      	b.n	8009474 <HAL_SAI_Init+0x340>
 8009472:	2300      	movs	r3, #0
 8009474:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009476:	f7f8 fe23 	bl	80020c0 <HAL_GetREVID>
 800947a:	4603      	mov	r3, r0
 800947c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009480:	d331      	bcc.n	80094e6 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6819      	ldr	r1, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	4b73      	ldr	r3, [pc, #460]	; (800965c <HAL_SAI_Init+0x528>)
 800948e:	400b      	ands	r3, r1
 8009490:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6819      	ldr	r1, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80094a6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ac:	431a      	orrs	r2, r3
 80094ae:	6a3b      	ldr	r3, [r7, #32]
 80094b0:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80094ba:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80094c6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094cc:	051b      	lsls	r3, r3, #20
 80094ce:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80094d4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	430a      	orrs	r2, r1
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	e02d      	b.n	8009542 <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	6819      	ldr	r1, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	4b5b      	ldr	r3, [pc, #364]	; (8009660 <HAL_SAI_Init+0x52c>)
 80094f2:	400b      	ands	r3, r1
 80094f4:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6819      	ldr	r1, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009504:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800950a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009510:	431a      	orrs	r2, r3
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800951e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800952a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009530:	051b      	lsls	r3, r3, #20
 8009532:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009538:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6859      	ldr	r1, [r3, #4]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	4b45      	ldr	r3, [pc, #276]	; (8009664 <HAL_SAI_Init+0x530>)
 800954e:	400b      	ands	r3, r1
 8009550:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6859      	ldr	r1, [r3, #4]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	69da      	ldr	r2, [r3, #28]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009560:	431a      	orrs	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009566:	431a      	orrs	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	430a      	orrs	r2, r1
 800956e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6899      	ldr	r1, [r3, #8]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	4b3b      	ldr	r3, [pc, #236]	; (8009668 <HAL_SAI_Init+0x534>)
 800957c:	400b      	ands	r3, r1
 800957e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6899      	ldr	r1, [r3, #8]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800958a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009590:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8009596:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800959c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a2:	3b01      	subs	r3, #1
 80095a4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80095a6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68d9      	ldr	r1, [r3, #12]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	f24f 0320 	movw	r3, #61472	; 0xf020
 80095be:	400b      	ands	r3, r1
 80095c0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68d9      	ldr	r1, [r3, #12]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095d6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80095d8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095de:	3b01      	subs	r3, #1
 80095e0:	021b      	lsls	r3, r3, #8
 80095e2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	430a      	orrs	r2, r1
 80095ea:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a1e      	ldr	r2, [pc, #120]	; (800966c <HAL_SAI_Init+0x538>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d004      	beq.n	8009600 <HAL_SAI_Init+0x4cc>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a1d      	ldr	r2, [pc, #116]	; (8009670 <HAL_SAI_Init+0x53c>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d119      	bne.n	8009634 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009604:	f023 0201 	bic.w	r2, r3, #1
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009612:	2b01      	cmp	r3, #1
 8009614:	d10e      	bne.n	8009634 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800961e:	3b01      	subs	r3, #1
 8009620:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009622:	431a      	orrs	r2, r3
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800962c:	f043 0201 	orr.w	r2, r3, #1
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3728      	adds	r7, #40	; 0x28
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	cccccccd 	.word	0xcccccccd
 800965c:	f005c010 	.word	0xf005c010
 8009660:	f805c010 	.word	0xf805c010
 8009664:	ffff1ff0 	.word	0xffff1ff0
 8009668:	fff88000 	.word	0xfff88000
 800966c:	40015804 	.word	0x40015804
 8009670:	58005404 	.word	0x58005404

08009674 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	4613      	mov	r3, r2
 8009680:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009682:	f7f8 fced 	bl	8002060 <HAL_GetTick>
 8009686:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d002      	beq.n	8009694 <HAL_SAI_Transmit_DMA+0x20>
 800968e:	88fb      	ldrh	r3, [r7, #6]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e098      	b.n	80097ca <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	f040 8091 	bne.w	80097c8 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d101      	bne.n	80096b4 <HAL_SAI_Transmit_DMA+0x40>
 80096b0:	2302      	movs	r3, #2
 80096b2:	e08a      	b.n	80097ca <HAL_SAI_Transmit_DMA+0x156>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	88fa      	ldrh	r2, [r7, #6]
 80096c6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	88fa      	ldrh	r2, [r7, #6]
 80096ce:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2212      	movs	r2, #18
 80096de:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096e8:	4a3a      	ldr	r2, [pc, #232]	; (80097d4 <HAL_SAI_Transmit_DMA+0x160>)
 80096ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096f2:	4a39      	ldr	r2, [pc, #228]	; (80097d8 <HAL_SAI_Transmit_DMA+0x164>)
 80096f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096fc:	4a37      	ldr	r2, [pc, #220]	; (80097dc <HAL_SAI_Transmit_DMA+0x168>)
 80096fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009706:	2200      	movs	r2, #0
 8009708:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009714:	4619      	mov	r1, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	331c      	adds	r3, #28
 800971c:	461a      	mov	r2, r3
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8009724:	f7f9 fb12 	bl	8002d4c <HAL_DMA_Start_IT>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d005      	beq.n	800973a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e047      	b.n	80097ca <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800973a:	2100      	movs	r1, #0
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f000 fa35 	bl	8009bac <SAI_InterruptFlag>
 8009742:	4601      	mov	r1, r0
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	691a      	ldr	r2, [r3, #16]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	430a      	orrs	r2, r1
 8009750:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009760:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009762:	e015      	b.n	8009790 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8009764:	f7f8 fc7c 	bl	8002060 <HAL_GetTick>
 8009768:	4602      	mov	r2, r0
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009772:	d90d      	bls.n	8009790 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800977a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e01c      	b.n	80097ca <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d0e2      	beq.n	8009764 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d107      	bne.n	80097bc <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80097ba:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	e000      	b.n	80097ca <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 80097c8:	2302      	movs	r3, #2
  }
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	08009cf1 	.word	0x08009cf1
 80097d8:	08009c91 	.word	0x08009c91
 80097dc:	08009d89 	.word	0x08009d89

080097e0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	4613      	mov	r3, r2
 80097ec:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <HAL_SAI_Receive_DMA+0x1a>
 80097f4:	88fb      	ldrh	r3, [r7, #6]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e079      	b.n	80098f2 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b01      	cmp	r3, #1
 8009808:	d172      	bne.n	80098f0 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009810:	2b01      	cmp	r3, #1
 8009812:	d101      	bne.n	8009818 <HAL_SAI_Receive_DMA+0x38>
 8009814:	2302      	movs	r3, #2
 8009816:	e06c      	b.n	80098f2 <HAL_SAI_Receive_DMA+0x112>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	88fa      	ldrh	r2, [r7, #6]
 8009832:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2222      	movs	r2, #34	; 0x22
 8009842:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800984c:	4a2b      	ldr	r2, [pc, #172]	; (80098fc <HAL_SAI_Receive_DMA+0x11c>)
 800984e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009856:	4a2a      	ldr	r2, [pc, #168]	; (8009900 <HAL_SAI_Receive_DMA+0x120>)
 8009858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009860:	4a28      	ldr	r2, [pc, #160]	; (8009904 <HAL_SAI_Receive_DMA+0x124>)
 8009862:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800986a:	2200      	movs	r2, #0
 800986c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	331c      	adds	r3, #28
 800987a:	4619      	mov	r1, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009880:	461a      	mov	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8009888:	f7f9 fa60 	bl	8002d4c <HAL_DMA_Start_IT>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d005      	beq.n	800989e <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e029      	b.n	80098f2 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800989e:	2100      	movs	r1, #0
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 f983 	bl	8009bac <SAI_InterruptFlag>
 80098a6:	4601      	mov	r1, r0
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	691a      	ldr	r2, [r3, #16]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	430a      	orrs	r2, r1
 80098b4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80098c4:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d107      	bne.n	80098e4 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80098e2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	e000      	b.n	80098f2 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80098f0:	2302      	movs	r3, #2
  }
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	08009d6d 	.word	0x08009d6d
 8009900:	08009d0d 	.word	0x08009d0d
 8009904:	08009d89 	.word	0x08009d89

08009908 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009944:	b480      	push	{r7}
 8009946:	b087      	sub	sp, #28
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <SAI_InitI2S+0x2e>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	2b02      	cmp	r3, #2
 8009970:	d103      	bne.n	800997a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	651a      	str	r2, [r3, #80]	; 0x50
 8009978:	e002      	b.n	8009980 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2201      	movs	r2, #1
 800997e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009986:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800998e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e077      	b.n	8009a9a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d107      	bne.n	80099c0 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80099bc:	665a      	str	r2, [r3, #100]	; 0x64
 80099be:	e006      	b.n	80099ce <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80099c6:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2b03      	cmp	r3, #3
 80099d2:	d84f      	bhi.n	8009a74 <SAI_InitI2S+0x130>
 80099d4:	a201      	add	r2, pc, #4	; (adr r2, 80099dc <SAI_InitI2S+0x98>)
 80099d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099da:	bf00      	nop
 80099dc:	080099ed 	.word	0x080099ed
 80099e0:	08009a0f 	.word	0x08009a0f
 80099e4:	08009a31 	.word	0x08009a31
 80099e8:	08009a53 	.word	0x08009a53
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2280      	movs	r2, #128	; 0x80
 80099f0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	085b      	lsrs	r3, r3, #1
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	085b      	lsrs	r3, r3, #1
 8009a00:	011a      	lsls	r2, r3, #4
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2240      	movs	r2, #64	; 0x40
 8009a0a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009a0c:	e035      	b.n	8009a7a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2280      	movs	r2, #128	; 0x80
 8009a12:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	085b      	lsrs	r3, r3, #1
 8009a18:	019a      	lsls	r2, r3, #6
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	085b      	lsrs	r3, r3, #1
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2280      	movs	r2, #128	; 0x80
 8009a2c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009a2e:	e024      	b.n	8009a7a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	22c0      	movs	r2, #192	; 0xc0
 8009a34:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	085b      	lsrs	r3, r3, #1
 8009a3a:	019a      	lsls	r2, r3, #6
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	085b      	lsrs	r3, r3, #1
 8009a44:	015a      	lsls	r2, r3, #5
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2280      	movs	r2, #128	; 0x80
 8009a4e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009a50:	e013      	b.n	8009a7a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	22e0      	movs	r2, #224	; 0xe0
 8009a56:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	085b      	lsrs	r3, r3, #1
 8009a5c:	019a      	lsls	r2, r3, #6
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	085b      	lsrs	r3, r3, #1
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2280      	movs	r2, #128	; 0x80
 8009a70:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009a72:	e002      	b.n	8009a7a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	75fb      	strb	r3, [r7, #23]
      break;
 8009a78:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d10b      	bne.n	8009a98 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d102      	bne.n	8009a8c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2210      	movs	r2, #16
 8009a8a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d102      	bne.n	8009a98 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2208      	movs	r2, #8
 8009a96:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8009a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	371c      	adds	r7, #28
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop

08009aa8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b087      	sub	sp, #28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
 8009ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d003      	beq.n	8009ad6 <SAI_InitPCM+0x2e>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d103      	bne.n	8009ade <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	651a      	str	r2, [r3, #80]	; 0x50
 8009adc:	e002      	b.n	8009ae4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009af0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009af8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b0c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2b04      	cmp	r3, #4
 8009b12:	d103      	bne.n	8009b1c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2201      	movs	r2, #1
 8009b18:	659a      	str	r2, [r3, #88]	; 0x58
 8009b1a:	e002      	b.n	8009b22 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	220d      	movs	r2, #13
 8009b20:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d837      	bhi.n	8009b98 <SAI_InitPCM+0xf0>
 8009b28:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <SAI_InitPCM+0x88>)
 8009b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2e:	bf00      	nop
 8009b30:	08009b41 	.word	0x08009b41
 8009b34:	08009b57 	.word	0x08009b57
 8009b38:	08009b6d 	.word	0x08009b6d
 8009b3c:	08009b83 	.word	0x08009b83
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2280      	movs	r2, #128	; 0x80
 8009b44:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	011a      	lsls	r2, r3, #4
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2240      	movs	r2, #64	; 0x40
 8009b52:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009b54:	e023      	b.n	8009b9e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2280      	movs	r2, #128	; 0x80
 8009b5a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2280      	movs	r2, #128	; 0x80
 8009b68:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009b6a:	e018      	b.n	8009b9e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	22c0      	movs	r2, #192	; 0xc0
 8009b70:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2280      	movs	r2, #128	; 0x80
 8009b7e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009b80:	e00d      	b.n	8009b9e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	22e0      	movs	r2, #224	; 0xe0
 8009b86:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2280      	movs	r2, #128	; 0x80
 8009b94:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009b96:	e002      	b.n	8009b9e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b9c:	bf00      	nop
  }

  return status;
 8009b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	371c      	adds	r7, #28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8009bbc:	78fb      	ldrb	r3, [r7, #3]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d103      	bne.n	8009bca <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f043 0308 	orr.w	r3, r3, #8
 8009bc8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bce:	2b08      	cmp	r3, #8
 8009bd0:	d10b      	bne.n	8009bea <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009bd6:	2b03      	cmp	r3, #3
 8009bd8:	d003      	beq.n	8009be2 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d103      	bne.n	8009bea <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f043 0310 	orr.w	r3, r3, #16
 8009be8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d003      	beq.n	8009bfa <SAI_InterruptFlag+0x4e>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d104      	bne.n	8009c04 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009c00:	60fb      	str	r3, [r7, #12]
 8009c02:	e003      	b.n	8009c0c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f043 0304 	orr.w	r3, r3, #4
 8009c0a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
	...

08009c1c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009c24:	4b18      	ldr	r3, [pc, #96]	; (8009c88 <SAI_Disable+0x6c>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a18      	ldr	r2, [pc, #96]	; (8009c8c <SAI_Disable+0x70>)
 8009c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c2e:	0b1b      	lsrs	r3, r3, #12
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009c46:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10a      	bne.n	8009c64 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	72fb      	strb	r3, [r7, #11]
      break;
 8009c62:	e009      	b.n	8009c78 <SAI_Disable+0x5c>
    }
    count--;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3b01      	subs	r3, #1
 8009c68:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1e7      	bne.n	8009c48 <SAI_Disable+0x2c>

  return status;
 8009c78:	7afb      	ldrb	r3, [r7, #11]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	20000000 	.word	0x20000000
 8009c8c:	95cbec1b 	.word	0x95cbec1b

08009c90 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ca6:	d01c      	beq.n	8009ce2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009cbe:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f7ff ff72 	bl	8009bac <SAI_InterruptFlag>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	43d9      	mvns	r1, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	691a      	ldr	r2, [r3, #16]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	400a      	ands	r2, r1
 8009cd8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f7ff fe10 	bl	8009908 <HAL_SAI_TxCpltCallback>
#endif
}
 8009ce8:	bf00      	nop
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f7ff fe0c 	bl	800991c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8009d04:	bf00      	nop
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d18:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	69db      	ldr	r3, [r3, #28]
 8009d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d22:	d01c      	beq.n	8009d5e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009d32:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff ff34 	bl	8009bac <SAI_InterruptFlag>
 8009d44:	4603      	mov	r3, r0
 8009d46:	43d9      	mvns	r1, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	691a      	ldr	r2, [r3, #16]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	400a      	ands	r2, r1
 8009d54:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f7f6 fb86 	bl	8000470 <HAL_SAI_RxCpltCallback>
#endif
}
 8009d64:	bf00      	nop
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d78:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f7f6 fb83 	bl	8000486 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8009d80:	bf00      	nop
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d94:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7fa fbb2 	bl	8004500 <HAL_DMA_GetError>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d01d      	beq.n	8009dde <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009da8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009dc0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f7ff ff2a 	bl	8009c1c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f7ff fda9 	bl	8009930 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8009dde:	bf00      	nop
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b08a      	sub	sp, #40	; 0x28
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d101      	bne.n	8009df8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e075      	b.n	8009ee4 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d105      	bne.n	8009e10 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7f7 fd96 	bl	800193c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2204      	movs	r2, #4
 8009e14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f867 	bl	8009eec <HAL_SD_InitCard>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e05d      	b.n	8009ee4 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009e28:	f107 0308 	add.w	r3, r7, #8
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 ff70 	bl	800ad14 <HAL_SD_GetCardStatus>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e052      	b.n	8009ee4 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009e3e:	7e3b      	ldrb	r3, [r7, #24]
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009e44:	7e7b      	ldrb	r3, [r7, #25]
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d10a      	bne.n	8009e68 <HAL_SD_Init+0x82>
 8009e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d102      	bne.n	8009e5e <HAL_SD_Init+0x78>
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d004      	beq.n	8009e68 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e64:	659a      	str	r2, [r3, #88]	; 0x58
 8009e66:	e00b      	b.n	8009e80 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d104      	bne.n	8009e7a <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e76:	659a      	str	r2, [r3, #88]	; 0x58
 8009e78:	e002      	b.n	8009e80 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	4619      	mov	r1, r3
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f001 f82e 	bl	800aee8 <HAL_SD_ConfigWideBusOperation>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d001      	beq.n	8009e96 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e026      	b.n	8009ee4 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009e96:	f7f8 f8e3 	bl	8002060 <HAL_GetTick>
 8009e9a:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009e9c:	e011      	b.n	8009ec2 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e9e:	f7f8 f8df 	bl	8002060 <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009eac:	d109      	bne.n	8009ec2 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009eb4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	e010      	b.n	8009ee4 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f001 f922 	bl	800b10c <HAL_SD_GetCardState>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b04      	cmp	r3, #4
 8009ecc:	d1e7      	bne.n	8009e9e <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3728      	adds	r7, #40	; 0x28
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009eec:	b590      	push	{r4, r7, lr}
 8009eee:	b08d      	sub	sp, #52	; 0x34
 8009ef0:	af02      	add	r7, sp, #8
 8009ef2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009efc:	2300      	movs	r3, #0
 8009efe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009f00:	2300      	movs	r3, #0
 8009f02:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009f04:	2300      	movs	r3, #0
 8009f06:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009f08:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009f0c:	f7fd fde2 	bl	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009f10:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d109      	bne.n	8009f2c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009f26:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e06a      	b.n	800a002 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2e:	0a1b      	lsrs	r3, r3, #8
 8009f30:	4a36      	ldr	r2, [pc, #216]	; (800a00c <HAL_SD_InitCard+0x120>)
 8009f32:	fba2 2303 	umull	r2, r3, r2, r3
 8009f36:	091b      	lsrs	r3, r3, #4
 8009f38:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681c      	ldr	r4, [r3, #0]
 8009f3e:	466a      	mov	r2, sp
 8009f40:	f107 0318 	add.w	r3, r7, #24
 8009f44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f48:	e882 0003 	stmia.w	r2, {r0, r1}
 8009f4c:	f107 030c 	add.w	r3, r7, #12
 8009f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f52:	4620      	mov	r0, r4
 8009f54:	f002 fc9a 	bl	800c88c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f002 fcdd 	bl	800c91c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	005b      	lsls	r3, r3, #1
 8009f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009f6e:	4a28      	ldr	r2, [pc, #160]	; (800a010 <HAL_SD_InitCard+0x124>)
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f76:	3301      	adds	r3, #1
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7f8 f87d 	bl	8002078 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f001 f9b2 	bl	800b2e8 <SD_PowerON>
 8009f84:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00b      	beq.n	8009fa4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e02e      	b.n	800a002 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f001 f8d1 	bl	800b14c <SD_InitCard>
 8009faa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00b      	beq.n	8009fca <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fbe:	6a3b      	ldr	r3, [r7, #32]
 8009fc0:	431a      	orrs	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e01b      	b.n	800a002 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f002 fd38 	bl	800ca48 <SDMMC_CmdBlockLength>
 8009fd8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00f      	beq.n	800a000 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a0b      	ldr	r2, [pc, #44]	; (800a014 <HAL_SD_InitCard+0x128>)
 8009fe6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fec:	6a3b      	ldr	r3, [r7, #32]
 8009fee:	431a      	orrs	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e000      	b.n	800a002 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	372c      	adds	r7, #44	; 0x2c
 800a006:	46bd      	mov	sp, r7
 800a008:	bd90      	pop	{r4, r7, pc}
 800a00a:	bf00      	nop
 800a00c:	014f8b59 	.word	0x014f8b59
 800a010:	00012110 	.word	0x00012110
 800a014:	1fe00fff 	.word	0x1fe00fff

0800a018 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b092      	sub	sp, #72	; 0x48
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
 800a024:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a026:	f7f8 f81b 	bl	8002060 <HAL_GetTick>
 800a02a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d107      	bne.n	800a04a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a03e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e167      	b.n	800a31a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b01      	cmp	r3, #1
 800a054:	f040 815a 	bne.w	800a30c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a05e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	441a      	add	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a068:	429a      	cmp	r2, r3
 800a06a:	d907      	bls.n	800a07c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a070:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	e14e      	b.n	800a31a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2203      	movs	r2, #3
 800a080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2200      	movs	r2, #0
 800a08a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a090:	2b01      	cmp	r3, #1
 800a092:	d002      	beq.n	800a09a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a096:	025b      	lsls	r3, r3, #9
 800a098:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a09a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a09e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	025b      	lsls	r3, r3, #9
 800a0a4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a0a6:	2390      	movs	r3, #144	; 0x90
 800a0a8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f107 0214 	add.w	r2, r7, #20
 800a0be:	4611      	mov	r1, r2
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f002 fc95 	bl	800c9f0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68da      	ldr	r2, [r3, #12]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0d4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d90a      	bls.n	800a0f2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2202      	movs	r2, #2
 800a0e0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f002 fcf3 	bl	800cad4 <SDMMC_CmdReadMultiBlock>
 800a0ee:	6478      	str	r0, [r7, #68]	; 0x44
 800a0f0:	e009      	b.n	800a106 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0fe:	4618      	mov	r0, r3
 800a100:	f002 fcc5 	bl	800ca8e <SDMMC_CmdReadSingleBlock>
 800a104:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d012      	beq.n	800a132 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a84      	ldr	r2, [pc, #528]	; (800a324 <HAL_SD_ReadBlocks+0x30c>)
 800a112:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a11a:	431a      	orrs	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e0f3      	b.n	800a31a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a136:	e058      	b.n	800a1ea <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a13e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d033      	beq.n	800a1ae <HAL_SD_ReadBlocks+0x196>
 800a146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a148:	2b1f      	cmp	r3, #31
 800a14a:	d930      	bls.n	800a1ae <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800a14c:	2300      	movs	r3, #0
 800a14e:	643b      	str	r3, [r7, #64]	; 0x40
 800a150:	e027      	b.n	800a1a2 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4618      	mov	r0, r3
 800a158:	f002 fbc2 	bl	800c8e0 <SDMMC_ReadFIFO>
 800a15c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a160:	b2da      	uxtb	r2, r3
 800a162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a164:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a168:	3301      	adds	r3, #1
 800a16a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	0a1b      	lsrs	r3, r3, #8
 800a170:	b2da      	uxtb	r2, r3
 800a172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a174:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a178:	3301      	adds	r3, #1
 800a17a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17e:	0c1b      	lsrs	r3, r3, #16
 800a180:	b2da      	uxtb	r2, r3
 800a182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a184:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a188:	3301      	adds	r3, #1
 800a18a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18e:	0e1b      	lsrs	r3, r3, #24
 800a190:	b2da      	uxtb	r2, r3
 800a192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a194:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a198:	3301      	adds	r3, #1
 800a19a:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 800a19c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a19e:	3301      	adds	r3, #1
 800a1a0:	643b      	str	r3, [r7, #64]	; 0x40
 800a1a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1a4:	2b07      	cmp	r3, #7
 800a1a6:	d9d4      	bls.n	800a152 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1aa:	3b20      	subs	r3, #32
 800a1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800a1ae:	f7f7 ff57 	bl	8002060 <HAL_GetTick>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d902      	bls.n	800a1c4 <HAL_SD_ReadBlocks+0x1ac>
 800a1be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d112      	bne.n	800a1ea <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a56      	ldr	r2, [pc, #344]	; (800a324 <HAL_SD_ReadBlocks+0x30c>)
 800a1ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	e097      	b.n	800a31a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d09f      	beq.n	800a138 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a206:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a212:	2b00      	cmp	r3, #0
 800a214:	d022      	beq.n	800a25c <HAL_SD_ReadBlocks+0x244>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d91f      	bls.n	800a25c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a220:	2b03      	cmp	r3, #3
 800a222:	d01b      	beq.n	800a25c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4618      	mov	r0, r3
 800a22a:	f002 fcbd 	bl	800cba8 <SDMMC_CmdStopTransfer>
 800a22e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800a230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a232:	2b00      	cmp	r3, #0
 800a234:	d012      	beq.n	800a25c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a3a      	ldr	r2, [pc, #232]	; (800a324 <HAL_SD_ReadBlocks+0x30c>)
 800a23c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a244:	431a      	orrs	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	e05e      	b.n	800a31a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a262:	f003 0308 	and.w	r3, r3, #8
 800a266:	2b00      	cmp	r3, #0
 800a268:	d012      	beq.n	800a290 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a2d      	ldr	r2, [pc, #180]	; (800a324 <HAL_SD_ReadBlocks+0x30c>)
 800a270:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a276:	f043 0208 	orr.w	r2, r3, #8
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	e044      	b.n	800a31a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a296:	f003 0302 	and.w	r3, r3, #2
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d012      	beq.n	800a2c4 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a20      	ldr	r2, [pc, #128]	; (800a324 <HAL_SD_ReadBlocks+0x30c>)
 800a2a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2aa:	f043 0202 	orr.w	r2, r3, #2
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e02a      	b.n	800a31a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ca:	f003 0320 	and.w	r3, r3, #32
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d012      	beq.n	800a2f8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a13      	ldr	r2, [pc, #76]	; (800a324 <HAL_SD_ReadBlocks+0x30c>)
 800a2d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2de:	f043 0220 	orr.w	r2, r3, #32
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e010      	b.n	800a31a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a0a      	ldr	r2, [pc, #40]	; (800a328 <HAL_SD_ReadBlocks+0x310>)
 800a2fe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	e006      	b.n	800a31a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a310:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
  }
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3748      	adds	r7, #72	; 0x48
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	1fe00fff 	.word	0x1fe00fff
 800a328:	18000f3a 	.word	0x18000f3a

0800a32c <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b092      	sub	sp, #72	; 0x48
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a33a:	f7f7 fe91 	bl	8002060 <HAL_GetTick>
 800a33e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d107      	bne.n	800a35e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a352:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e16b      	b.n	800a636 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b01      	cmp	r3, #1
 800a368:	f040 815e 	bne.w	800a628 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	441a      	add	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d907      	bls.n	800a390 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a384:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e152      	b.n	800a636 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2203      	movs	r2, #3
 800a394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2200      	movs	r2, #0
 800a39e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d002      	beq.n	800a3ae <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	025b      	lsls	r3, r3, #9
 800a3ac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a3ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3b2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	025b      	lsls	r3, r3, #9
 800a3b8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a3ba:	2390      	movs	r3, #144	; 0x90
 800a3bc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f107 0218 	add.w	r2, r7, #24
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f002 fb0b 	bl	800c9f0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68da      	ldr	r2, [r3, #12]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3e8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d90a      	bls.n	800a406 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2220      	movs	r2, #32
 800a3f4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f002 fbaf 	bl	800cb60 <SDMMC_CmdWriteMultiBlock>
 800a402:	6478      	str	r0, [r7, #68]	; 0x44
 800a404:	e009      	b.n	800a41a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2210      	movs	r2, #16
 800a40a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a412:	4618      	mov	r0, r3
 800a414:	f002 fb81 	bl	800cb1a <SDMMC_CmdWriteSingleBlock>
 800a418:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a41a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d012      	beq.n	800a446 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a86      	ldr	r2, [pc, #536]	; (800a640 <HAL_SD_WriteBlocks+0x314>)
 800a426:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a42e:	431a      	orrs	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e0f7      	b.n	800a636 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800a44a:	e05c      	b.n	800a506 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d037      	beq.n	800a4ca <HAL_SD_WriteBlocks+0x19e>
 800a45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a45c:	2b1f      	cmp	r3, #31
 800a45e:	d934      	bls.n	800a4ca <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800a460:	2300      	movs	r3, #0
 800a462:	643b      	str	r3, [r7, #64]	; 0x40
 800a464:	e02b      	b.n	800a4be <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800a466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46e:	3301      	adds	r3, #1
 800a470:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	021a      	lsls	r2, r3, #8
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a480:	3301      	adds	r3, #1
 800a482:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	041a      	lsls	r2, r3, #16
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a492:	3301      	adds	r3, #1
 800a494:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	061a      	lsls	r2, r3, #24
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f107 0214 	add.w	r2, r7, #20
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f002 fa21 	bl	800c8fa <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800a4b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	643b      	str	r3, [r7, #64]	; 0x40
 800a4be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4c0:	2b07      	cmp	r3, #7
 800a4c2:	d9d0      	bls.n	800a466 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c6:	3b20      	subs	r3, #32
 800a4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800a4ca:	f7f7 fdc9 	bl	8002060 <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d902      	bls.n	800a4e0 <HAL_SD_WriteBlocks+0x1b4>
 800a4da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d112      	bne.n	800a506 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a56      	ldr	r2, [pc, #344]	; (800a640 <HAL_SD_WriteBlocks+0x314>)
 800a4e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800a502:	2303      	movs	r3, #3
 800a504:	e097      	b.n	800a636 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a50c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800a510:	2b00      	cmp	r3, #0
 800a512:	d09b      	beq.n	800a44c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68da      	ldr	r2, [r3, #12]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a522:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a52a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d022      	beq.n	800a578 <HAL_SD_WriteBlocks+0x24c>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d91f      	bls.n	800a578 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d01b      	beq.n	800a578 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4618      	mov	r0, r3
 800a546:	f002 fb2f 	bl	800cba8 <SDMMC_CmdStopTransfer>
 800a54a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800a54c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d012      	beq.n	800a578 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a3a      	ldr	r2, [pc, #232]	; (800a640 <HAL_SD_WriteBlocks+0x314>)
 800a558:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a55e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a560:	431a      	orrs	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e05e      	b.n	800a636 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57e:	f003 0308 	and.w	r3, r3, #8
 800a582:	2b00      	cmp	r3, #0
 800a584:	d012      	beq.n	800a5ac <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a2d      	ldr	r2, [pc, #180]	; (800a640 <HAL_SD_WriteBlocks+0x314>)
 800a58c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a592:	f043 0208 	orr.w	r2, r3, #8
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e044      	b.n	800a636 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b2:	f003 0302 	and.w	r3, r3, #2
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d012      	beq.n	800a5e0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a20      	ldr	r2, [pc, #128]	; (800a640 <HAL_SD_WriteBlocks+0x314>)
 800a5c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c6:	f043 0202 	orr.w	r2, r3, #2
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e02a      	b.n	800a636 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e6:	f003 0310 	and.w	r3, r3, #16
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d012      	beq.n	800a614 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a13      	ldr	r2, [pc, #76]	; (800a640 <HAL_SD_WriteBlocks+0x314>)
 800a5f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5fa:	f043 0210 	orr.w	r2, r3, #16
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e010      	b.n	800a636 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a0a      	ldr	r2, [pc, #40]	; (800a644 <HAL_SD_WriteBlocks+0x318>)
 800a61a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800a624:	2300      	movs	r3, #0
 800a626:	e006      	b.n	800a636 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a62c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
  }
}
 800a636:	4618      	mov	r0, r3
 800a638:	3748      	adds	r7, #72	; 0x48
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	1fe00fff 	.word	0x1fe00fff
 800a644:	18000f3a 	.word	0x18000f3a

0800a648 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a654:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a65c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a660:	2b00      	cmp	r3, #0
 800a662:	d008      	beq.n	800a676 <HAL_SD_IRQHandler+0x2e>
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f003 0308 	and.w	r3, r3, #8
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d003      	beq.n	800a676 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f001 f926 	bl	800b8c0 <SD_Read_IT>
 800a674:	e19a      	b.n	800a9ac <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 80ac 	beq.w	800a7de <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a68e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	4b59      	ldr	r3, [pc, #356]	; (800a800 <HAL_SD_IRQHandler+0x1b8>)
 800a69c:	400b      	ands	r3, r1
 800a69e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a6ae:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68da      	ldr	r2, [r3, #12]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6be:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f003 0308 	and.w	r3, r3, #8
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d038      	beq.n	800a73c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d104      	bne.n	800a6de <HAL_SD_IRQHandler+0x96>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d011      	beq.n	800a702 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f002 fa60 	bl	800cba8 <SDMMC_CmdStopTransfer>
 800a6e8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d008      	beq.n	800a702 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	431a      	orrs	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f95b 	bl	800a9b8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a3f      	ldr	r2, [pc, #252]	; (800a804 <HAL_SD_IRQHandler+0x1bc>)
 800a708:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d104      	bne.n	800a72c <HAL_SD_IRQHandler+0xe4>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f003 0302 	and.w	r3, r3, #2
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d003      	beq.n	800a734 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f002 ff13 	bl	800d558 <HAL_SD_RxCpltCallback>
 800a732:	e13b      	b.n	800a9ac <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f002 ff05 	bl	800d544 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a73a:	e137      	b.n	800a9ac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a742:	2b00      	cmp	r3, #0
 800a744:	f000 8132 	beq.w	800a9ac <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2200      	movs	r2, #0
 800a74e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2200      	movs	r2, #0
 800a756:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2200      	movs	r2, #0
 800a75e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f003 0302 	and.w	r3, r3, #2
 800a766:	2b00      	cmp	r3, #0
 800a768:	d104      	bne.n	800a774 <HAL_SD_IRQHandler+0x12c>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f003 0320 	and.w	r3, r3, #32
 800a770:	2b00      	cmp	r3, #0
 800a772:	d011      	beq.n	800a798 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4618      	mov	r0, r3
 800a77a:	f002 fa15 	bl	800cba8 <SDMMC_CmdStopTransfer>
 800a77e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d008      	beq.n	800a798 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	431a      	orrs	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f910 	bl	800a9b8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f003 0310 	and.w	r3, r3, #16
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d104      	bne.n	800a7ba <HAL_SD_IRQHandler+0x172>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f003 0320 	and.w	r3, r3, #32
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d002      	beq.n	800a7c0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f002 fec2 	bl	800d544 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d105      	bne.n	800a7d6 <HAL_SD_IRQHandler+0x18e>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f003 0302 	and.w	r3, r3, #2
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 80eb 	beq.w	800a9ac <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f002 febe 	bl	800d558 <HAL_SD_RxCpltCallback>
}
 800a7dc:	e0e6      	b.n	800a9ac <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00d      	beq.n	800a808 <HAL_SD_IRQHandler+0x1c0>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f003 0308 	and.w	r3, r3, #8
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d008      	beq.n	800a808 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f001 f8a8 	bl	800b94c <SD_Write_IT>
 800a7fc:	e0d6      	b.n	800a9ac <HAL_SD_IRQHandler+0x364>
 800a7fe:	bf00      	nop
 800a800:	ffff3ec5 	.word	0xffff3ec5
 800a804:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a80e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 809d 	beq.w	800a952 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a81e:	f003 0302 	and.w	r3, r3, #2
 800a822:	2b00      	cmp	r3, #0
 800a824:	d005      	beq.n	800a832 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82a:	f043 0202 	orr.w	r2, r3, #2
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a838:	f003 0308 	and.w	r3, r3, #8
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d005      	beq.n	800a84c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a844:	f043 0208 	orr.w	r2, r3, #8
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a852:	f003 0320 	and.w	r3, r3, #32
 800a856:	2b00      	cmp	r3, #0
 800a858:	d005      	beq.n	800a866 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85e:	f043 0220 	orr.w	r2, r3, #32
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a86c:	f003 0310 	and.w	r3, r3, #16
 800a870:	2b00      	cmp	r3, #0
 800a872:	d005      	beq.n	800a880 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a878:	f043 0210 	orr.w	r2, r3, #16
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a4b      	ldr	r2, [pc, #300]	; (800a9b4 <HAL_SD_IRQHandler+0x36c>)
 800a886:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a896:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68da      	ldr	r2, [r3, #12]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8a6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a8b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68da      	ldr	r2, [r3, #12]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a8c6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f002 f96b 	bl	800cba8 <SDMMC_CmdStopTransfer>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d8:	431a      	orrs	r2, r3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68da      	ldr	r2, [r3, #12]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8ec:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8f6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f003 0308 	and.w	r3, r3, #8
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00a      	beq.n	800a918 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f851 	bl	800a9b8 <HAL_SD_ErrorCallback>
}
 800a916:	e049      	b.n	800a9ac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d044      	beq.n	800a9ac <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a926:	2b00      	cmp	r3, #0
 800a928:	d040      	beq.n	800a9ac <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a938:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2200      	movs	r2, #0
 800a940:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f834 	bl	800a9b8 <HAL_SD_ErrorCallback>
}
 800a950:	e02c      	b.n	800a9ac <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d025      	beq.n	800a9ac <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a968:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a970:	f003 0304 	and.w	r3, r3, #4
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10c      	bne.n	800a992 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f003 0320 	and.w	r3, r3, #32
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f001 f84a 	bl	800ba1c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a988:	e010      	b.n	800a9ac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f001 f832 	bl	800b9f4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a990:	e00c      	b.n	800a9ac <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f003 0320 	and.w	r3, r3, #32
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d003      	beq.n	800a9a4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f001 f833 	bl	800ba08 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a9a2:	e003      	b.n	800a9ac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f001 f81b 	bl	800b9e0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a9aa:	e7ff      	b.n	800a9ac <HAL_SD_IRQHandler+0x364>
 800a9ac:	bf00      	nop
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	18000f3a 	.word	0x18000f3a

0800a9b8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9da:	0f9b      	lsrs	r3, r3, #30
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9e6:	0e9b      	lsrs	r3, r3, #26
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	f003 030f 	and.w	r3, r3, #15
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9f8:	0e1b      	lsrs	r3, r3, #24
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	f003 0303 	and.w	r3, r3, #3
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa0a:	0c1b      	lsrs	r3, r3, #16
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa16:	0a1b      	lsrs	r3, r3, #8
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa2c:	0d1b      	lsrs	r3, r3, #20
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa38:	0c1b      	lsrs	r3, r3, #16
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	f003 030f 	and.w	r3, r3, #15
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa4a:	0bdb      	lsrs	r3, r3, #15
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	f003 0301 	and.w	r3, r3, #1
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa5c:	0b9b      	lsrs	r3, r3, #14
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	f003 0301 	and.w	r3, r3, #1
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa6e:	0b5b      	lsrs	r3, r3, #13
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa80:	0b1b      	lsrs	r3, r3, #12
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	f003 0301 	and.w	r3, r3, #1
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	2200      	movs	r2, #0
 800aa92:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d163      	bne.n	800ab64 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aaa0:	009a      	lsls	r2, r3, #2
 800aaa2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800aaac:	0f92      	lsrs	r2, r2, #30
 800aaae:	431a      	orrs	r2, r3
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aab8:	0edb      	lsrs	r3, r3, #27
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	f003 0307 	and.w	r3, r3, #7
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaca:	0e1b      	lsrs	r3, r3, #24
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	f003 0307 	and.w	r3, r3, #7
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aadc:	0d5b      	lsrs	r3, r3, #21
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	f003 0307 	and.w	r3, r3, #7
 800aae4:	b2da      	uxtb	r2, r3
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaee:	0c9b      	lsrs	r3, r3, #18
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	f003 0307 	and.w	r3, r3, #7
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab00:	0bdb      	lsrs	r3, r3, #15
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	f003 0307 	and.w	r3, r3, #7
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	7e1b      	ldrb	r3, [r3, #24]
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	f003 0307 	and.w	r3, r3, #7
 800ab22:	3302      	adds	r3, #2
 800ab24:	2201      	movs	r2, #1
 800ab26:	fa02 f303 	lsl.w	r3, r2, r3
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ab2e:	fb03 f202 	mul.w	r2, r3, r2
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	7a1b      	ldrb	r3, [r3, #8]
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	f003 030f 	and.w	r3, r3, #15
 800ab40:	2201      	movs	r2, #1
 800ab42:	409a      	lsls	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ab50:	0a52      	lsrs	r2, r2, #9
 800ab52:	fb03 f202 	mul.w	r2, r3, r2
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab60:	655a      	str	r2, [r3, #84]	; 0x54
 800ab62:	e031      	b.n	800abc8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d11d      	bne.n	800aba8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab70:	041b      	lsls	r3, r3, #16
 800ab72:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab7a:	0c1b      	lsrs	r3, r3, #16
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	3301      	adds	r3, #1
 800ab88:	029a      	lsls	r2, r3, #10
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab9c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	655a      	str	r2, [r3, #84]	; 0x54
 800aba6:	e00f      	b.n	800abc8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a58      	ldr	r2, [pc, #352]	; (800ad10 <HAL_SD_GetCardCSD+0x344>)
 800abae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e09d      	b.n	800ad04 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abcc:	0b9b      	lsrs	r3, r3, #14
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abde:	09db      	lsrs	r3, r3, #7
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abe6:	b2da      	uxtb	r2, r3
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac00:	0fdb      	lsrs	r3, r3, #31
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac0c:	0f5b      	lsrs	r3, r3, #29
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	f003 0303 	and.w	r3, r3, #3
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac1e:	0e9b      	lsrs	r3, r3, #26
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	f003 0307 	and.w	r3, r3, #7
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac30:	0d9b      	lsrs	r3, r3, #22
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	f003 030f 	and.w	r3, r3, #15
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac42:	0d5b      	lsrs	r3, r3, #21
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	f003 0301 	and.w	r3, r3, #1
 800ac4a:	b2da      	uxtb	r2, r3
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac5e:	0c1b      	lsrs	r3, r3, #16
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	b2da      	uxtb	r2, r3
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac72:	0bdb      	lsrs	r3, r3, #15
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	f003 0301 	and.w	r3, r3, #1
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac86:	0b9b      	lsrs	r3, r3, #14
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac9a:	0b5b      	lsrs	r3, r3, #13
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acae:	0b1b      	lsrs	r3, r3, #12
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	b2da      	uxtb	r2, r3
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acc2:	0a9b      	lsrs	r3, r3, #10
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	f003 0303 	and.w	r3, r3, #3
 800acca:	b2da      	uxtb	r2, r3
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acd6:	0a1b      	lsrs	r3, r3, #8
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	f003 0303 	and.w	r3, r3, #3
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acea:	085b      	lsrs	r3, r3, #1
 800acec:	b2db      	uxtb	r3, r3
 800acee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2201      	movs	r2, #1
 800acfe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	1fe00fff 	.word	0x1fe00fff

0800ad14 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b094      	sub	sp, #80	; 0x50
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b03      	cmp	r3, #3
 800ad2e:	d101      	bne.n	800ad34 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e0a7      	b.n	800ae84 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ad34:	f107 0308 	add.w	r3, r7, #8
 800ad38:	4619      	mov	r1, r3
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fb62 	bl	800b404 <SD_SendSDStatus>
 800ad40:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d011      	beq.n	800ad6c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a4f      	ldr	r2, [pc, #316]	; (800ae8c <HAL_SD_GetCardStatus+0x178>)
 800ad4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad56:	431a      	orrs	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ad6a:	e070      	b.n	800ae4e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	099b      	lsrs	r3, r3, #6
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	f003 0303 	and.w	r3, r3, #3
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	095b      	lsrs	r3, r3, #5
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	0a1b      	lsrs	r3, r3, #8
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	0e1b      	lsrs	r3, r3, #24
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	061a      	lsls	r2, r3, #24
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	021b      	lsls	r3, r3, #8
 800adae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800adb2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	0a1b      	lsrs	r3, r3, #8
 800adb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800adbc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	0e1b      	lsrs	r3, r3, #24
 800adc2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	0a1b      	lsrs	r3, r3, #8
 800add4:	b2da      	uxtb	r2, r3
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	0d1b      	lsrs	r3, r3, #20
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	f003 030f 	and.w	r3, r3, #15
 800ade4:	b2da      	uxtb	r2, r3
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	0c1b      	lsrs	r3, r3, #16
 800adee:	b29b      	uxth	r3, r3
 800adf0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800adf4:	b29a      	uxth	r2, r3
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	4313      	orrs	r3, r2
 800ae00:	b29a      	uxth	r2, r3
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	0a9b      	lsrs	r3, r3, #10
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	0a1b      	lsrs	r3, r3, #8
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	f003 0303 	and.w	r3, r3, #3
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	091b      	lsrs	r3, r3, #4
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	f003 030f 	and.w	r3, r3, #15
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	f003 030f 	and.w	r3, r3, #15
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	0e1b      	lsrs	r3, r3, #24
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae56:	4618      	mov	r0, r3
 800ae58:	f001 fdf6 	bl	800ca48 <SDMMC_CmdBlockLength>
 800ae5c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00d      	beq.n	800ae80 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a08      	ldr	r2, [pc, #32]	; (800ae8c <HAL_SD_GetCardStatus+0x178>)
 800ae6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae70:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2201      	movs	r2, #1
 800ae76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800ae80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3750      	adds	r7, #80	; 0x50
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	1fe00fff 	.word	0x1fe00fff

0800ae90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aee8:	b590      	push	{r4, r7, lr}
 800aeea:	b08d      	sub	sp, #52	; 0x34
 800aeec:	af02      	add	r7, sp, #8
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800aef2:	2300      	movs	r3, #0
 800aef4:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2203      	movs	r2, #3
 800af00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af08:	2b03      	cmp	r3, #3
 800af0a:	d02e      	beq.n	800af6a <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af12:	d106      	bne.n	800af22 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	635a      	str	r2, [r3, #52]	; 0x34
 800af20:	e029      	b.n	800af76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af28:	d10a      	bne.n	800af40 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fb62 	bl	800b5f4 <SD_WideBus_Enable>
 800af30:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	431a      	orrs	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	635a      	str	r2, [r3, #52]	; 0x34
 800af3e:	e01a      	b.n	800af76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d10a      	bne.n	800af5c <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fb9f 	bl	800b68a <SD_WideBus_Disable>
 800af4c:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	431a      	orrs	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	635a      	str	r2, [r3, #52]	; 0x34
 800af5a:	e00c      	b.n	800af76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af60:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	635a      	str	r2, [r3, #52]	; 0x34
 800af68:	e005      	b.n	800af76 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d007      	beq.n	800af8e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a5e      	ldr	r2, [pc, #376]	; (800b0fc <HAL_SD_ConfigWideBusOperation+0x214>)
 800af84:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800af8c:	e094      	b.n	800b0b8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800af8e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800af92:	f7fc fd9f 	bl	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 800af96:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800af98:	6a3b      	ldr	r3, [r7, #32]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f000 8083 	beq.w	800b0a6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	695a      	ldr	r2, [r3, #20]
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	4950      	ldr	r1, [pc, #320]	; (800b100 <HAL_SD_ConfigWideBusOperation+0x218>)
 800afbe:	fba1 1303 	umull	r1, r3, r1, r3
 800afc2:	0e1b      	lsrs	r3, r3, #24
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d303      	bcc.n	800afd0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	695b      	ldr	r3, [r3, #20]
 800afcc:	61bb      	str	r3, [r7, #24]
 800afce:	e05a      	b.n	800b086 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afd8:	d103      	bne.n	800afe2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	61bb      	str	r3, [r7, #24]
 800afe0:	e051      	b.n	800b086 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afea:	d126      	bne.n	800b03a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	695b      	ldr	r3, [r3, #20]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10e      	bne.n	800b012 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	4a43      	ldr	r2, [pc, #268]	; (800b104 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d906      	bls.n	800b00a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800affc:	6a3b      	ldr	r3, [r7, #32]
 800affe:	4a40      	ldr	r2, [pc, #256]	; (800b100 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b000:	fba2 2303 	umull	r2, r3, r2, r3
 800b004:	0e5b      	lsrs	r3, r3, #25
 800b006:	61bb      	str	r3, [r7, #24]
 800b008:	e03d      	b.n	800b086 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	695b      	ldr	r3, [r3, #20]
 800b00e:	61bb      	str	r3, [r7, #24]
 800b010:	e039      	b.n	800b086 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	695b      	ldr	r3, [r3, #20]
 800b016:	005b      	lsls	r3, r3, #1
 800b018:	6a3a      	ldr	r2, [r7, #32]
 800b01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b01e:	4a39      	ldr	r2, [pc, #228]	; (800b104 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d906      	bls.n	800b032 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b024:	6a3b      	ldr	r3, [r7, #32]
 800b026:	4a36      	ldr	r2, [pc, #216]	; (800b100 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b028:	fba2 2303 	umull	r2, r3, r2, r3
 800b02c:	0e5b      	lsrs	r3, r3, #25
 800b02e:	61bb      	str	r3, [r7, #24]
 800b030:	e029      	b.n	800b086 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	695b      	ldr	r3, [r3, #20]
 800b036:	61bb      	str	r3, [r7, #24]
 800b038:	e025      	b.n	800b086 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d10e      	bne.n	800b060 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800b042:	6a3b      	ldr	r3, [r7, #32]
 800b044:	4a30      	ldr	r2, [pc, #192]	; (800b108 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d906      	bls.n	800b058 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	4a2c      	ldr	r2, [pc, #176]	; (800b100 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b04e:	fba2 2303 	umull	r2, r3, r2, r3
 800b052:	0e1b      	lsrs	r3, r3, #24
 800b054:	61bb      	str	r3, [r7, #24]
 800b056:	e016      	b.n	800b086 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	61bb      	str	r3, [r7, #24]
 800b05e:	e012      	b.n	800b086 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	695b      	ldr	r3, [r3, #20]
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	6a3a      	ldr	r2, [r7, #32]
 800b068:	fbb2 f3f3 	udiv	r3, r2, r3
 800b06c:	4a26      	ldr	r2, [pc, #152]	; (800b108 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d906      	bls.n	800b080 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	4a22      	ldr	r2, [pc, #136]	; (800b100 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b076:	fba2 2303 	umull	r2, r3, r2, r3
 800b07a:	0e1b      	lsrs	r3, r3, #24
 800b07c:	61bb      	str	r3, [r7, #24]
 800b07e:	e002      	b.n	800b086 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	695b      	ldr	r3, [r3, #20]
 800b084:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681c      	ldr	r4, [r3, #0]
 800b08a:	466a      	mov	r2, sp
 800b08c:	f107 0314 	add.w	r3, r7, #20
 800b090:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b094:	e882 0003 	stmia.w	r2, {r0, r1}
 800b098:	f107 0308 	add.w	r3, r7, #8
 800b09c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f001 fbf4 	bl	800c88c <SDMMC_Init>
 800b0a4:	e008      	b.n	800b0b8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f001 fcc1 	bl	800ca48 <SDMMC_CmdBlockLength>
 800b0c6:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00c      	beq.n	800b0e8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a0a      	ldr	r2, [pc, #40]	; (800b0fc <HAL_SD_ConfigWideBusOperation+0x214>)
 800b0d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	431a      	orrs	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	372c      	adds	r7, #44	; 0x2c
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd90      	pop	{r4, r7, pc}
 800b0fc:	1fe00fff 	.word	0x1fe00fff
 800b100:	55e63b89 	.word	0x55e63b89
 800b104:	02faf080 	.word	0x02faf080
 800b108:	017d7840 	.word	0x017d7840

0800b10c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b086      	sub	sp, #24
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b114:	2300      	movs	r3, #0
 800b116:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b118:	f107 030c 	add.w	r3, r7, #12
 800b11c:	4619      	mov	r1, r3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fa40 	bl	800b5a4 <SD_SendStatus>
 800b124:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d005      	beq.n	800b138 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	431a      	orrs	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	0a5b      	lsrs	r3, r3, #9
 800b13c:	f003 030f 	and.w	r3, r3, #15
 800b140:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b142:	693b      	ldr	r3, [r7, #16]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3718      	adds	r7, #24
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b090      	sub	sp, #64	; 0x40
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800b154:	2300      	movs	r3, #0
 800b156:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800b158:	f7f6 ff82 	bl	8002060 <HAL_GetTick>
 800b15c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4618      	mov	r0, r3
 800b164:	f001 fbeb 	bl	800c93e <SDMMC_GetPowerState>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d102      	bne.n	800b174 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b16e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b172:	e0b5      	b.n	800b2e0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b178:	2b03      	cmp	r3, #3
 800b17a:	d02e      	beq.n	800b1da <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4618      	mov	r0, r3
 800b182:	f001 fe36 	bl	800cdf2 <SDMMC_CmdSendCID>
 800b186:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d001      	beq.n	800b192 <SD_InitCard+0x46>
    {
      return errorstate;
 800b18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b190:	e0a6      	b.n	800b2e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2100      	movs	r1, #0
 800b198:	4618      	mov	r0, r3
 800b19a:	f001 fc16 	bl	800c9ca <SDMMC_GetResponse>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2104      	movs	r1, #4
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f001 fc0d 	bl	800c9ca <SDMMC_GetResponse>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2108      	movs	r1, #8
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f001 fc04 	bl	800c9ca <SDMMC_GetResponse>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	210c      	movs	r1, #12
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f001 fbfb 	bl	800c9ca <SDMMC_GetResponse>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1de:	2b03      	cmp	r3, #3
 800b1e0:	d01d      	beq.n	800b21e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800b1e2:	e019      	b.n	800b218 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f107 020a 	add.w	r2, r7, #10
 800b1ec:	4611      	mov	r1, r2
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f001 fe3e 	bl	800ce70 <SDMMC_CmdSetRelAdd>
 800b1f4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <SD_InitCard+0xb4>
      {
        return errorstate;
 800b1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fe:	e06f      	b.n	800b2e0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800b200:	f7f6 ff2e 	bl	8002060 <HAL_GetTick>
 800b204:	4602      	mov	r2, r0
 800b206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	f241 3287 	movw	r2, #4999	; 0x1387
 800b20e:	4293      	cmp	r3, r2
 800b210:	d902      	bls.n	800b218 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800b212:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b216:	e063      	b.n	800b2e0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800b218:	897b      	ldrh	r3, [r7, #10]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d0e2      	beq.n	800b1e4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b222:	2b03      	cmp	r3, #3
 800b224:	d036      	beq.n	800b294 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b226:	897b      	ldrh	r3, [r7, #10]
 800b228:	461a      	mov	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b236:	041b      	lsls	r3, r3, #16
 800b238:	4619      	mov	r1, r3
 800b23a:	4610      	mov	r0, r2
 800b23c:	f001 fdf8 	bl	800ce30 <SDMMC_CmdSendCSD>
 800b240:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b244:	2b00      	cmp	r3, #0
 800b246:	d001      	beq.n	800b24c <SD_InitCard+0x100>
    {
      return errorstate;
 800b248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24a:	e049      	b.n	800b2e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2100      	movs	r1, #0
 800b252:	4618      	mov	r0, r3
 800b254:	f001 fbb9 	bl	800c9ca <SDMMC_GetResponse>
 800b258:	4602      	mov	r2, r0
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2104      	movs	r1, #4
 800b264:	4618      	mov	r0, r3
 800b266:	f001 fbb0 	bl	800c9ca <SDMMC_GetResponse>
 800b26a:	4602      	mov	r2, r0
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2108      	movs	r1, #8
 800b276:	4618      	mov	r0, r3
 800b278:	f001 fba7 	bl	800c9ca <SDMMC_GetResponse>
 800b27c:	4602      	mov	r2, r0
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	210c      	movs	r1, #12
 800b288:	4618      	mov	r0, r3
 800b28a:	f001 fb9e 	bl	800c9ca <SDMMC_GetResponse>
 800b28e:	4602      	mov	r2, r0
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2104      	movs	r1, #4
 800b29a:	4618      	mov	r0, r3
 800b29c:	f001 fb95 	bl	800c9ca <SDMMC_GetResponse>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	0d1a      	lsrs	r2, r3, #20
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b2a8:	f107 030c 	add.w	r3, r7, #12
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f7ff fb8c 	bl	800a9cc <HAL_SD_GetCardCSD>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d002      	beq.n	800b2c0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b2ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b2be:	e00f      	b.n	800b2e0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c8:	041b      	lsls	r3, r3, #16
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	f001 fca7 	bl	800cc20 <SDMMC_CmdSelDesel>
 800b2d2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <SD_InitCard+0x192>
  {
    return errorstate;
 800b2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2dc:	e000      	b.n	800b2e0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3740      	adds	r7, #64	; 0x40
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4618      	mov	r0, r3
 800b302:	f001 fcb0 	bl	800cc66 <SDMMC_CmdGoIdleState>
 800b306:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	e072      	b.n	800b3f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4618      	mov	r0, r3
 800b318:	f001 fcc3 	bl	800cca2 <SDMMC_CmdOperCond>
 800b31c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b324:	d10d      	bne.n	800b342 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4618      	mov	r0, r3
 800b332:	f001 fc98 	bl	800cc66 <SDMMC_CmdGoIdleState>
 800b336:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d004      	beq.n	800b348 <SD_PowerON+0x60>
    {
      return errorstate;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	e05a      	b.n	800b3f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2201      	movs	r2, #1
 800b346:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d137      	bne.n	800b3c0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2100      	movs	r1, #0
 800b356:	4618      	mov	r0, r3
 800b358:	f001 fcc3 	bl	800cce2 <SDMMC_CmdAppCommand>
 800b35c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d02d      	beq.n	800b3c0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b364:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b368:	e046      	b.n	800b3f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2100      	movs	r1, #0
 800b370:	4618      	mov	r0, r3
 800b372:	f001 fcb6 	bl	800cce2 <SDMMC_CmdAppCommand>
 800b376:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <SD_PowerON+0x9a>
    {
      return errorstate;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	e03a      	b.n	800b3f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	491e      	ldr	r1, [pc, #120]	; (800b400 <SD_PowerON+0x118>)
 800b388:	4618      	mov	r0, r3
 800b38a:	f001 fccd 	bl	800cd28 <SDMMC_CmdAppOperCommand>
 800b38e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d002      	beq.n	800b39c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b396:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b39a:	e02d      	b.n	800b3f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f001 fb11 	bl	800c9ca <SDMMC_GetResponse>
 800b3a8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	0fdb      	lsrs	r3, r3, #31
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d101      	bne.n	800b3b6 <SD_PowerON+0xce>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e000      	b.n	800b3b8 <SD_PowerON+0xd0>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	613b      	str	r3, [r7, #16]

    count++;
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d802      	bhi.n	800b3d0 <SD_PowerON+0xe8>
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d0cc      	beq.n	800b36a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d902      	bls.n	800b3e0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b3da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b3de:	e00b      	b.n	800b3f8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d002      	beq.n	800b3f6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	c1100000 	.word	0xc1100000

0800b404 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b08c      	sub	sp, #48	; 0x30
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b40e:	f7f6 fe27 	bl	8002060 <HAL_GetTick>
 800b412:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2100      	movs	r1, #0
 800b41e:	4618      	mov	r0, r3
 800b420:	f001 fad3 	bl	800c9ca <SDMMC_GetResponse>
 800b424:	4603      	mov	r3, r0
 800b426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b42a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b42e:	d102      	bne.n	800b436 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b430:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b434:	e0b0      	b.n	800b598 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2140      	movs	r1, #64	; 0x40
 800b43c:	4618      	mov	r0, r3
 800b43e:	f001 fb03 	bl	800ca48 <SDMMC_CmdBlockLength>
 800b442:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b444:	6a3b      	ldr	r3, [r7, #32]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d005      	beq.n	800b456 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	e0a0      	b.n	800b598 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b45e:	041b      	lsls	r3, r3, #16
 800b460:	4619      	mov	r1, r3
 800b462:	4610      	mov	r0, r2
 800b464:	f001 fc3d 	bl	800cce2 <SDMMC_CmdAppCommand>
 800b468:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d005      	beq.n	800b47c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b478:	6a3b      	ldr	r3, [r7, #32]
 800b47a:	e08d      	b.n	800b598 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b47c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b480:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b482:	2340      	movs	r3, #64	; 0x40
 800b484:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b486:	2360      	movs	r3, #96	; 0x60
 800b488:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b48a:	2302      	movs	r3, #2
 800b48c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b48e:	2300      	movs	r3, #0
 800b490:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b492:	2301      	movs	r3, #1
 800b494:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f107 0208 	add.w	r2, r7, #8
 800b49e:	4611      	mov	r1, r2
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f001 faa5 	bl	800c9f0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f001 fd25 	bl	800cefa <SDMMC_CmdStatusRegister>
 800b4b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d02b      	beq.n	800b510 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b4c0:	6a3b      	ldr	r3, [r7, #32]
 800b4c2:	e069      	b.n	800b598 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d013      	beq.n	800b4fa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4d6:	e00d      	b.n	800b4f4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f001 f9ff 	bl	800c8e0 <SDMMC_ReadFIFO>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e6:	601a      	str	r2, [r3, #0]
        pData++;
 800b4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ea:	3304      	adds	r3, #4
 800b4ec:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f6:	2b07      	cmp	r3, #7
 800b4f8:	d9ee      	bls.n	800b4d8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b4fa:	f7f6 fdb1 	bl	8002060 <HAL_GetTick>
 800b4fe:	4602      	mov	r2, r0
 800b500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b508:	d102      	bne.n	800b510 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b50a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b50e:	e043      	b.n	800b598 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b516:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d0d2      	beq.n	800b4c4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b524:	f003 0308 	and.w	r3, r3, #8
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b52c:	2308      	movs	r3, #8
 800b52e:	e033      	b.n	800b598 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b536:	f003 0302 	and.w	r3, r3, #2
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d001      	beq.n	800b542 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b53e:	2302      	movs	r3, #2
 800b540:	e02a      	b.n	800b598 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b548:	f003 0320 	and.w	r3, r3, #32
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d017      	beq.n	800b580 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b550:	2320      	movs	r3, #32
 800b552:	e021      	b.n	800b598 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4618      	mov	r0, r3
 800b55a:	f001 f9c1 	bl	800c8e0 <SDMMC_ReadFIFO>
 800b55e:	4602      	mov	r2, r0
 800b560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b562:	601a      	str	r2, [r3, #0]
    pData++;
 800b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b566:	3304      	adds	r3, #4
 800b568:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b56a:	f7f6 fd79 	bl	8002060 <HAL_GetTick>
 800b56e:	4602      	mov	r2, r0
 800b570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b578:	d102      	bne.n	800b580 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b57a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b57e:	e00b      	b.n	800b598 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1e2      	bne.n	800b554 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a03      	ldr	r2, [pc, #12]	; (800b5a0 <SD_SendSDStatus+0x19c>)
 800b594:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b596:	2300      	movs	r3, #0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3730      	adds	r7, #48	; 0x30
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	18000f3a 	.word	0x18000f3a

0800b5a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d102      	bne.n	800b5ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b5b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b5b8:	e018      	b.n	800b5ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5c2:	041b      	lsls	r3, r3, #16
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	f001 fc74 	bl	800ceb4 <SDMMC_CmdSendStatus>
 800b5cc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d001      	beq.n	800b5d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	e009      	b.n	800b5ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2100      	movs	r1, #0
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f001 f9f3 	bl	800c9ca <SDMMC_GetResponse>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b086      	sub	sp, #24
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	60fb      	str	r3, [r7, #12]
 800b600:	2300      	movs	r3, #0
 800b602:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2100      	movs	r1, #0
 800b60a:	4618      	mov	r0, r3
 800b60c:	f001 f9dd 	bl	800c9ca <SDMMC_GetResponse>
 800b610:	4603      	mov	r3, r0
 800b612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b61a:	d102      	bne.n	800b622 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b61c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b620:	e02f      	b.n	800b682 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b622:	f107 030c 	add.w	r3, r7, #12
 800b626:	4619      	mov	r1, r3
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f879 	bl	800b720 <SD_FindSCR>
 800b62e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	e023      	b.n	800b682 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b640:	2b00      	cmp	r3, #0
 800b642:	d01c      	beq.n	800b67e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b64c:	041b      	lsls	r3, r3, #16
 800b64e:	4619      	mov	r1, r3
 800b650:	4610      	mov	r0, r2
 800b652:	f001 fb46 	bl	800cce2 <SDMMC_CmdAppCommand>
 800b656:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d001      	beq.n	800b662 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	e00f      	b.n	800b682 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2102      	movs	r1, #2
 800b668:	4618      	mov	r0, r3
 800b66a:	f001 fb7d 	bl	800cd68 <SDMMC_CmdBusWidth>
 800b66e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d001      	beq.n	800b67a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	e003      	b.n	800b682 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b67a:	2300      	movs	r3, #0
 800b67c:	e001      	b.n	800b682 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b67e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b682:	4618      	mov	r0, r3
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b086      	sub	sp, #24
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b692:	2300      	movs	r3, #0
 800b694:	60fb      	str	r3, [r7, #12]
 800b696:	2300      	movs	r3, #0
 800b698:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2100      	movs	r1, #0
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f001 f992 	bl	800c9ca <SDMMC_GetResponse>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6b0:	d102      	bne.n	800b6b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b6b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6b6:	e02f      	b.n	800b718 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b6b8:	f107 030c 	add.w	r3, r7, #12
 800b6bc:	4619      	mov	r1, r3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f82e 	bl	800b720 <SD_FindSCR>
 800b6c4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	e023      	b.n	800b718 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d01c      	beq.n	800b714 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6e2:	041b      	lsls	r3, r3, #16
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	4610      	mov	r0, r2
 800b6e8:	f001 fafb 	bl	800cce2 <SDMMC_CmdAppCommand>
 800b6ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	e00f      	b.n	800b718 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	4618      	mov	r0, r3
 800b700:	f001 fb32 	bl	800cd68 <SDMMC_CmdBusWidth>
 800b704:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	e003      	b.n	800b718 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b710:	2300      	movs	r3, #0
 800b712:	e001      	b.n	800b718 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b714:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b08e      	sub	sp, #56	; 0x38
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b72a:	f7f6 fc99 	bl	8002060 <HAL_GetTick>
 800b72e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b730:	2300      	movs	r3, #0
 800b732:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b734:	2300      	movs	r3, #0
 800b736:	60bb      	str	r3, [r7, #8]
 800b738:	2300      	movs	r3, #0
 800b73a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2108      	movs	r1, #8
 800b746:	4618      	mov	r0, r3
 800b748:	f001 f97e 	bl	800ca48 <SDMMC_CmdBlockLength>
 800b74c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b750:	2b00      	cmp	r3, #0
 800b752:	d001      	beq.n	800b758 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b756:	e0ad      	b.n	800b8b4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b760:	041b      	lsls	r3, r3, #16
 800b762:	4619      	mov	r1, r3
 800b764:	4610      	mov	r0, r2
 800b766:	f001 fabc 	bl	800cce2 <SDMMC_CmdAppCommand>
 800b76a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d001      	beq.n	800b776 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b774:	e09e      	b.n	800b8b4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b77a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b77c:	2308      	movs	r3, #8
 800b77e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b780:	2330      	movs	r3, #48	; 0x30
 800b782:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b784:	2302      	movs	r3, #2
 800b786:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b788:	2300      	movs	r3, #0
 800b78a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b78c:	2301      	movs	r3, #1
 800b78e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f107 0210 	add.w	r2, r7, #16
 800b798:	4611      	mov	r1, r2
 800b79a:	4618      	mov	r0, r3
 800b79c:	f001 f928 	bl	800c9f0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f001 fb02 	bl	800cdae <SDMMC_CmdSendSCR>
 800b7aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d027      	beq.n	800b802 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b4:	e07e      	b.n	800b8b4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d113      	bne.n	800b7ec <SD_FindSCR+0xcc>
 800b7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d110      	bne.n	800b7ec <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f001 f886 	bl	800c8e0 <SDMMC_ReadFIFO>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f001 f87f 	bl	800c8e0 <SDMMC_ReadFIFO>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	60fb      	str	r3, [r7, #12]
      index++;
 800b7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b7ec:	f7f6 fc38 	bl	8002060 <HAL_GetTick>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f4:	1ad3      	subs	r3, r2, r3
 800b7f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7fa:	d102      	bne.n	800b802 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b7fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b800:	e058      	b.n	800b8b4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b808:	f240 532a 	movw	r3, #1322	; 0x52a
 800b80c:	4013      	ands	r3, r2
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d0d1      	beq.n	800b7b6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b818:	f003 0308 	and.w	r3, r3, #8
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d005      	beq.n	800b82c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2208      	movs	r2, #8
 800b826:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b828:	2308      	movs	r3, #8
 800b82a:	e043      	b.n	800b8b4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b832:	f003 0302 	and.w	r3, r3, #2
 800b836:	2b00      	cmp	r3, #0
 800b838:	d005      	beq.n	800b846 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2202      	movs	r2, #2
 800b840:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b842:	2302      	movs	r3, #2
 800b844:	e036      	b.n	800b8b4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84c:	f003 0320 	and.w	r3, r3, #32
 800b850:	2b00      	cmp	r3, #0
 800b852:	d005      	beq.n	800b860 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2220      	movs	r2, #32
 800b85a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b85c:	2320      	movs	r3, #32
 800b85e:	e029      	b.n	800b8b4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a15      	ldr	r2, [pc, #84]	; (800b8bc <SD_FindSCR+0x19c>)
 800b866:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	061a      	lsls	r2, r3, #24
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	021b      	lsls	r3, r3, #8
 800b870:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b874:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	0a1b      	lsrs	r3, r3, #8
 800b87a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b87e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	0e1b      	lsrs	r3, r3, #24
 800b884:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b888:	601a      	str	r2, [r3, #0]
    scr++;
 800b88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88c:	3304      	adds	r3, #4
 800b88e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	061a      	lsls	r2, r3, #24
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	021b      	lsls	r3, r3, #8
 800b898:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b89c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	0a1b      	lsrs	r3, r3, #8
 800b8a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b8a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	0e1b      	lsrs	r3, r3, #24
 800b8ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3738      	adds	r7, #56	; 0x38
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	18000f3a 	.word	0x18000f3a

0800b8c0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8cc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d2:	2b1f      	cmp	r3, #31
 800b8d4:	d936      	bls.n	800b944 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	617b      	str	r3, [r7, #20]
 800b8da:	e027      	b.n	800b92c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f000 fffd 	bl	800c8e0 <SDMMC_ReadFIFO>
 800b8e6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	0a1b      	lsrs	r3, r3, #8
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	3301      	adds	r3, #1
 800b904:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	0c1b      	lsrs	r3, r3, #16
 800b90a:	b2da      	uxtb	r2, r3
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	3301      	adds	r3, #1
 800b914:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	0e1b      	lsrs	r3, r3, #24
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	3301      	adds	r3, #1
 800b924:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	3301      	adds	r3, #1
 800b92a:	617b      	str	r3, [r7, #20]
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	2b07      	cmp	r3, #7
 800b930:	d9d4      	bls.n	800b8dc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93c:	f1a3 0220 	sub.w	r2, r3, #32
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b944:	bf00      	nop
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	69db      	ldr	r3, [r3, #28]
 800b958:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	2b1f      	cmp	r3, #31
 800b960:	d93a      	bls.n	800b9d8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b962:	2300      	movs	r3, #0
 800b964:	617b      	str	r3, [r7, #20]
 800b966:	e02b      	b.n	800b9c0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	3301      	adds	r3, #1
 800b972:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	021a      	lsls	r2, r3, #8
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	3301      	adds	r3, #1
 800b984:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	041a      	lsls	r2, r3, #16
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	4313      	orrs	r3, r2
 800b990:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	3301      	adds	r3, #1
 800b996:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	061a      	lsls	r2, r3, #24
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f107 020c 	add.w	r2, r7, #12
 800b9b2:	4611      	mov	r1, r2
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f000 ffa0 	bl	800c8fa <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	617b      	str	r3, [r7, #20]
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	2b07      	cmp	r3, #7
 800b9c4:	d9d0      	bls.n	800b968 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	693a      	ldr	r2, [r7, #16]
 800b9ca:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a1b      	ldr	r3, [r3, #32]
 800b9d0:	f1a3 0220 	sub.w	r2, r3, #32
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	621a      	str	r2, [r3, #32]
  }
}
 800b9d8:	bf00      	nop
 800b9da:	3718      	adds	r7, #24
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b9e8:	bf00      	nop
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b9fc:	bf00      	nop
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ba24:	bf00      	nop
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d101      	bne.n	800ba44 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	e02b      	b.n	800ba9c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d106      	bne.n	800ba5e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f7f4 ff51 	bl	8000900 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2202      	movs	r2, #2
 800ba62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	3304      	adds	r3, #4
 800ba6e:	4619      	mov	r1, r3
 800ba70:	4610      	mov	r0, r2
 800ba72:	f000 fe45 	bl	800c700 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6818      	ldr	r0, [r3, #0]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	f000 fe99 	bl	800c7b8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ba86:	4b07      	ldr	r3, [pc, #28]	; (800baa4 <HAL_SDRAM_Init+0x74>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a06      	ldr	r2, [pc, #24]	; (800baa4 <HAL_SDRAM_Init+0x74>)
 800ba8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba90:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2201      	movs	r2, #1
 800ba96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3708      	adds	r7, #8
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	52004000 	.word	0x52004000

0800baa8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d101      	bne.n	800baba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e0f1      	b.n	800bc9e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2200      	movs	r2, #0
 800babe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a78      	ldr	r2, [pc, #480]	; (800bca8 <HAL_SPI_Init+0x200>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d00f      	beq.n	800baea <HAL_SPI_Init+0x42>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a77      	ldr	r2, [pc, #476]	; (800bcac <HAL_SPI_Init+0x204>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d00a      	beq.n	800baea <HAL_SPI_Init+0x42>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a75      	ldr	r2, [pc, #468]	; (800bcb0 <HAL_SPI_Init+0x208>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d005      	beq.n	800baea <HAL_SPI_Init+0x42>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	2b0f      	cmp	r3, #15
 800bae4:	d901      	bls.n	800baea <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	e0d9      	b.n	800bc9e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fdec 	bl	800c6c8 <SPI_GetPacketSize>
 800baf0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a6c      	ldr	r2, [pc, #432]	; (800bca8 <HAL_SPI_Init+0x200>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d00c      	beq.n	800bb16 <HAL_SPI_Init+0x6e>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a6a      	ldr	r2, [pc, #424]	; (800bcac <HAL_SPI_Init+0x204>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d007      	beq.n	800bb16 <HAL_SPI_Init+0x6e>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a69      	ldr	r2, [pc, #420]	; (800bcb0 <HAL_SPI_Init+0x208>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d002      	beq.n	800bb16 <HAL_SPI_Init+0x6e>
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2b08      	cmp	r3, #8
 800bb14:	d811      	bhi.n	800bb3a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bb1a:	4a63      	ldr	r2, [pc, #396]	; (800bca8 <HAL_SPI_Init+0x200>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d009      	beq.n	800bb34 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a61      	ldr	r2, [pc, #388]	; (800bcac <HAL_SPI_Init+0x204>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d004      	beq.n	800bb34 <HAL_SPI_Init+0x8c>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a60      	ldr	r2, [pc, #384]	; (800bcb0 <HAL_SPI_Init+0x208>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d104      	bne.n	800bb3e <HAL_SPI_Init+0x96>
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2b10      	cmp	r3, #16
 800bb38:	d901      	bls.n	800bb3e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e0af      	b.n	800bc9e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d106      	bne.n	800bb58 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7f5 ffb6 	bl	8001ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2202      	movs	r2, #2
 800bb5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f022 0201 	bic.w	r2, r2, #1
 800bb6e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bb7a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb84:	d119      	bne.n	800bbba <HAL_SPI_Init+0x112>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb8e:	d103      	bne.n	800bb98 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d008      	beq.n	800bbaa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d10c      	bne.n	800bbba <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bba4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bba8:	d107      	bne.n	800bbba <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bbb8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	69da      	ldr	r2, [r3, #28]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc2:	431a      	orrs	r2, r3
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	431a      	orrs	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbcc:	ea42 0103 	orr.w	r1, r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	68da      	ldr	r2, [r3, #12]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	430a      	orrs	r2, r1
 800bbda:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe4:	431a      	orrs	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbea:	431a      	orrs	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	699b      	ldr	r3, [r3, #24]
 800bbf0:	431a      	orrs	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	431a      	orrs	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	695b      	ldr	r3, [r3, #20]
 800bbfc:	431a      	orrs	r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a1b      	ldr	r3, [r3, #32]
 800bc02:	431a      	orrs	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	431a      	orrs	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	431a      	orrs	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc1a:	ea42 0103 	orr.w	r1, r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	430a      	orrs	r2, r1
 800bc28:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d113      	bne.n	800bc5a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc44:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bc58:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f022 0201 	bic.w	r2, r2, #1
 800bc68:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00a      	beq.n	800bc8c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	430a      	orrs	r2, r1
 800bc8a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	40013000 	.word	0x40013000
 800bcac:	40003800 	.word	0x40003800
 800bcb0:	40003c00 	.word	0x40003c00

0800bcb4 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
 800bcc0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d101      	bne.n	800bcd4 <HAL_SPI_TransmitReceive_DMA+0x20>
 800bcd0:	2302      	movs	r3, #2
 800bcd2:	e1b4      	b.n	800c03e <HAL_SPI_TransmitReceive_DMA+0x38a>
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bce2:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bcea:	7dbb      	ldrb	r3, [r7, #22]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d012      	beq.n	800bd16 <HAL_SPI_TransmitReceive_DMA+0x62>
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcf6:	d106      	bne.n	800bd06 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d102      	bne.n	800bd06 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bd00:	7dbb      	ldrb	r3, [r7, #22]
 800bd02:	2b04      	cmp	r3, #4
 800bd04:	d007      	beq.n	800bd16 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bd06:	2302      	movs	r3, #2
 800bd08:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
 800bd14:	e193      	b.n	800c03e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d005      	beq.n	800bd28 <HAL_SPI_TransmitReceive_DMA+0x74>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d002      	beq.n	800bd28 <HAL_SPI_TransmitReceive_DMA+0x74>
 800bd22:	887b      	ldrh	r3, [r7, #2]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d107      	bne.n	800bd38 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bd34:	7dfb      	ldrb	r3, [r7, #23]
 800bd36:	e182      	b.n	800c03e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	2b04      	cmp	r3, #4
 800bd42:	d003      	beq.n	800bd4c <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2205      	movs	r2, #5
 800bd48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	887a      	ldrh	r2, [r7, #2]
 800bd5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	887a      	ldrh	r2, [r7, #2]
 800bd66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	887a      	ldrh	r2, [r7, #2]
 800bd74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	887a      	ldrh	r2, [r7, #2]
 800bd7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	689a      	ldr	r2, [r3, #8]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bd9a:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	2b0f      	cmp	r3, #15
 800bda2:	d905      	bls.n	800bdb0 <HAL_SPI_TransmitReceive_DMA+0xfc>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bda8:	699b      	ldr	r3, [r3, #24]
 800bdaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdae:	d10f      	bne.n	800bdd0 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800bdb4:	2b07      	cmp	r3, #7
 800bdb6:	d913      	bls.n	800bde0 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdbc:	699b      	ldr	r3, [r3, #24]
 800bdbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdc2:	d00d      	beq.n	800bde0 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdc8:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800bdca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdce:	d007      	beq.n	800bde0 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bddc:	7dfb      	ldrb	r3, [r7, #23]
 800bdde:	e12e      	b.n	800c03e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	2b07      	cmp	r3, #7
 800bde6:	d840      	bhi.n	800be6a <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdf2:	d109      	bne.n	800be08 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	105b      	asrs	r3, r3, #1
 800be00:	b29a      	uxth	r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be0c:	699b      	ldr	r3, [r3, #24]
 800be0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be12:	d109      	bne.n	800be28 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	3303      	adds	r3, #3
 800be1e:	109b      	asrs	r3, r3, #2
 800be20:	b29a      	uxth	r2, r3
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be2c:	699b      	ldr	r3, [r3, #24]
 800be2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be32:	d109      	bne.n	800be48 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	3301      	adds	r3, #1
 800be3e:	105b      	asrs	r3, r3, #1
 800be40:	b29a      	uxth	r2, r3
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be4c:	699b      	ldr	r3, [r3, #24]
 800be4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be52:	d12e      	bne.n	800beb2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	3303      	adds	r3, #3
 800be5e:	109b      	asrs	r3, r3, #2
 800be60:	b29a      	uxth	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800be68:	e023      	b.n	800beb2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	2b0f      	cmp	r3, #15
 800be70:	d81f      	bhi.n	800beb2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be7c:	d109      	bne.n	800be92 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be84:	b29b      	uxth	r3, r3
 800be86:	3301      	adds	r3, #1
 800be88:	105b      	asrs	r3, r3, #1
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be96:	699b      	ldr	r3, [r3, #24]
 800be98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be9c:	d109      	bne.n	800beb2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	3301      	adds	r3, #1
 800bea8:	105b      	asrs	r3, r3, #1
 800beaa:	b29a      	uxth	r2, r3
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b04      	cmp	r3, #4
 800bebc:	d108      	bne.n	800bed0 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bec2:	4a61      	ldr	r2, [pc, #388]	; (800c048 <HAL_SPI_TransmitReceive_DMA+0x394>)
 800bec4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beca:	4a60      	ldr	r2, [pc, #384]	; (800c04c <HAL_SPI_TransmitReceive_DMA+0x398>)
 800becc:	63da      	str	r2, [r3, #60]	; 0x3c
 800bece:	e007      	b.n	800bee0 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bed4:	4a5e      	ldr	r2, [pc, #376]	; (800c050 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 800bed6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bedc:	4a5d      	ldr	r2, [pc, #372]	; (800c054 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 800bede:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bee4:	4a5c      	ldr	r2, [pc, #368]	; (800c058 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 800bee6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beec:	2200      	movs	r2, #0
 800beee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	3330      	adds	r3, #48	; 0x30
 800befa:	4619      	mov	r1, r3
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf00:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf08:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800bf0a:	f7f6 ff1f 	bl	8002d4c <HAL_DMA_Start_IT>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d013      	beq.n	800bf3c <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf1a:	f043 0210 	orr.w	r2, r3, #16
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
 800bf3a:	e080      	b.n	800c03e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	689a      	ldr	r2, [r3, #8]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf4a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf50:	2200      	movs	r2, #0
 800bf52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf58:	2200      	movs	r2, #0
 800bf5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf60:	2200      	movs	r2, #0
 800bf62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf68:	2200      	movs	r2, #0
 800bf6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf74:	4619      	mov	r1, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	3320      	adds	r3, #32
 800bf7c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf84:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800bf86:	f7f6 fee1 	bl	8002d4c <HAL_DMA_Start_IT>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d013      	beq.n	800bfb8 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf96:	f043 0210 	orr.w	r2, r3, #16
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800bfb4:	7dfb      	ldrb	r3, [r7, #23]
 800bfb6:	e042      	b.n	800c03e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfbc:	69db      	ldr	r3, [r3, #28]
 800bfbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfc2:	d108      	bne.n	800bfd6 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	6859      	ldr	r1, [r3, #4]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	4b23      	ldr	r3, [pc, #140]	; (800c05c <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800bfd0:	400b      	ands	r3, r1
 800bfd2:	6053      	str	r3, [r2, #4]
 800bfd4:	e009      	b.n	800bfea <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	685a      	ldr	r2, [r3, #4]
 800bfdc:	4b1f      	ldr	r3, [pc, #124]	; (800c05c <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800bfde:	4013      	ands	r3, r2
 800bfe0:	8879      	ldrh	r1, [r7, #2]
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	6812      	ldr	r2, [r2, #0]
 800bfe6:	430b      	orrs	r3, r1
 800bfe8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	689a      	ldr	r2, [r3, #8]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bff8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	691a      	ldr	r2, [r3, #16]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800c008:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f042 0201 	orr.w	r2, r2, #1
 800c018:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c022:	d107      	bne.n	800c034 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c032:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800c03c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3718      	adds	r7, #24
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	0800c4d5 	.word	0x0800c4d5
 800c04c:	0800c449 	.word	0x0800c449
 800c050:	0800c4f1 	.word	0x0800c4f1
 800c054:	0800c48f 	.word	0x0800c48f
 800c058:	0800c50d 	.word	0x0800c50d
 800c05c:	ffff0000 	.word	0xffff0000

0800c060 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b08a      	sub	sp, #40	; 0x28
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	695b      	ldr	r3, [r3, #20]
 800c076:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c078:	6a3a      	ldr	r2, [r7, #32]
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	4013      	ands	r3, r2
 800c07e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c088:	2300      	movs	r3, #0
 800c08a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c092:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	3330      	adds	r3, #48	; 0x30
 800c09a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d113      	bne.n	800c0ce <HAL_SPI_IRQHandler+0x6e>
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	f003 0320 	and.w	r3, r3, #32
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10e      	bne.n	800c0ce <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d009      	beq.n	800c0ce <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	4798      	blx	r3
    handled = 1UL;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10f      	bne.n	800c0f8 <HAL_SPI_IRQHandler+0x98>
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	f003 0301 	and.w	r3, r3, #1
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00a      	beq.n	800c0f8 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d105      	bne.n	800c0f8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	4798      	blx	r3
    handled = 1UL;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	f003 0320 	and.w	r3, r3, #32
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d10f      	bne.n	800c122 <HAL_SPI_IRQHandler+0xc2>
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	f003 0302 	and.w	r3, r3, #2
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00a      	beq.n	800c122 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c112:	2b00      	cmp	r3, #0
 800c114:	d105      	bne.n	800c122 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	4798      	blx	r3
    handled = 1UL;
 800c11e:	2301      	movs	r3, #1
 800c120:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800c122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c124:	2b00      	cmp	r3, #0
 800c126:	f040 815a 	bne.w	800c3de <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	f003 0308 	and.w	r3, r3, #8
 800c130:	2b00      	cmp	r3, #0
 800c132:	f000 808b 	beq.w	800c24c <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	699a      	ldr	r2, [r3, #24]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f042 0208 	orr.w	r2, r2, #8
 800c144:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	699a      	ldr	r2, [r3, #24]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f042 0210 	orr.w	r2, r2, #16
 800c154:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	699a      	ldr	r2, [r3, #24]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c164:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	691a      	ldr	r2, [r3, #16]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f022 0208 	bic.w	r2, r2, #8
 800c174:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c180:	2b00      	cmp	r3, #0
 800c182:	d13d      	bne.n	800c200 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c184:	e036      	b.n	800c1f4 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	2b0f      	cmp	r3, #15
 800c18c:	d90b      	bls.n	800c1a6 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c196:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c198:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c19e:	1d1a      	adds	r2, r3, #4
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	665a      	str	r2, [r3, #100]	; 0x64
 800c1a4:	e01d      	b.n	800c1e2 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	2b07      	cmp	r3, #7
 800c1ac:	d90b      	bls.n	800c1c6 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	8812      	ldrh	r2, [r2, #0]
 800c1b6:	b292      	uxth	r2, r2
 800c1b8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1be:	1c9a      	adds	r2, r3, #2
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	665a      	str	r2, [r3, #100]	; 0x64
 800c1c4:	e00d      	b.n	800c1e2 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1d2:	7812      	ldrb	r2, [r2, #0]
 800c1d4:	b2d2      	uxtb	r2, r2
 800c1d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1dc:	1c5a      	adds	r2, r3, #1
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	b29a      	uxth	r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1c2      	bne.n	800c186 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f9c1 	bl	800c588 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2201      	movs	r2, #1
 800c20a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c214:	2b00      	cmp	r3, #0
 800c216:	d003      	beq.n	800c220 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 f90b 	bl	800c434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c21e:	e0e3      	b.n	800c3e8 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c220:	7cfb      	ldrb	r3, [r7, #19]
 800c222:	2b05      	cmp	r3, #5
 800c224:	d103      	bne.n	800c22e <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7f5 f80a 	bl	8001240 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800c22c:	e0d9      	b.n	800c3e2 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c22e:	7cfb      	ldrb	r3, [r7, #19]
 800c230:	2b04      	cmp	r3, #4
 800c232:	d103      	bne.n	800c23c <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 f8e9 	bl	800c40c <HAL_SPI_RxCpltCallback>
    return;
 800c23a:	e0d2      	b.n	800c3e2 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c23c:	7cfb      	ldrb	r3, [r7, #19]
 800c23e:	2b03      	cmp	r3, #3
 800c240:	f040 80cf 	bne.w	800c3e2 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f8d7 	bl	800c3f8 <HAL_SPI_TxCpltCallback>
    return;
 800c24a:	e0ca      	b.n	800c3e2 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00d      	beq.n	800c272 <HAL_SPI_IRQHandler+0x212>
 800c256:	6a3b      	ldr	r3, [r7, #32]
 800c258:	f003 0308 	and.w	r3, r3, #8
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d008      	beq.n	800c272 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	699a      	ldr	r2, [r3, #24]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c26e:	619a      	str	r2, [r3, #24]

    return;
 800c270:	e0ba      	b.n	800c3e8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800c278:	2b00      	cmp	r3, #0
 800c27a:	f000 80b5 	beq.w	800c3e8 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00f      	beq.n	800c2a8 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c28e:	f043 0204 	orr.w	r2, r3, #4
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	699a      	ldr	r2, [r3, #24]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2a6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00f      	beq.n	800c2d2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2b8:	f043 0201 	orr.w	r2, r3, #1
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	699a      	ldr	r2, [r3, #24]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2d0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00f      	beq.n	800c2fc <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2e2:	f043 0208 	orr.w	r2, r3, #8
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	699a      	ldr	r2, [r3, #24]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2fa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	f003 0320 	and.w	r3, r3, #32
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00f      	beq.n	800c326 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c30c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	699a      	ldr	r2, [r3, #24]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f042 0220 	orr.w	r2, r2, #32
 800c324:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d05a      	beq.n	800c3e6 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f022 0201 	bic.w	r2, r2, #1
 800c33e:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6919      	ldr	r1, [r3, #16]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	4b29      	ldr	r3, [pc, #164]	; (800c3f0 <HAL_SPI_IRQHandler+0x390>)
 800c34c:	400b      	ands	r3, r1
 800c34e:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c356:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c35a:	d138      	bne.n	800c3ce <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	689a      	ldr	r2, [r3, #8]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c36a:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c370:	2b00      	cmp	r3, #0
 800c372:	d013      	beq.n	800c39c <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c378:	4a1e      	ldr	r2, [pc, #120]	; (800c3f4 <HAL_SPI_IRQHandler+0x394>)
 800c37a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c380:	4618      	mov	r0, r3
 800c382:	f7f6 ff4d 	bl	8003220 <HAL_DMA_Abort_IT>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d007      	beq.n	800c39c <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c392:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d020      	beq.n	800c3e6 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3a8:	4a12      	ldr	r2, [pc, #72]	; (800c3f4 <HAL_SPI_IRQHandler+0x394>)
 800c3aa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7f6 ff35 	bl	8003220 <HAL_DMA_Abort_IT>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d014      	beq.n	800c3e6 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c3cc:	e00b      	b.n	800c3e6 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 f82c 	bl	800c434 <HAL_SPI_ErrorCallback>
    return;
 800c3dc:	e003      	b.n	800c3e6 <HAL_SPI_IRQHandler+0x386>
    return;
 800c3de:	bf00      	nop
 800c3e0:	e002      	b.n	800c3e8 <HAL_SPI_IRQHandler+0x388>
    return;
 800c3e2:	bf00      	nop
 800c3e4:	e000      	b.n	800c3e8 <HAL_SPI_IRQHandler+0x388>
    return;
 800c3e6:	bf00      	nop
  }
}
 800c3e8:	3728      	adds	r7, #40	; 0x28
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	fffffc94 	.word	0xfffffc94
 800c3f4:	0800c553 	.word	0x0800c553

0800c3f8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c400:	bf00      	nop
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c428:	bf00      	nop
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c43c:	bf00      	nop
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c454:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	2b07      	cmp	r3, #7
 800c460:	d011      	beq.n	800c486 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c466:	69db      	ldr	r3, [r3, #28]
 800c468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c46c:	d103      	bne.n	800c476 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f7ff ffcc 	bl	800c40c <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800c474:	e007      	b.n	800c486 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	691a      	ldr	r2, [r3, #16]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f042 0208 	orr.w	r2, r2, #8
 800c484:	611a      	str	r2, [r3, #16]
}
 800c486:	bf00      	nop
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b084      	sub	sp, #16
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49a:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	2b07      	cmp	r3, #7
 800c4a6:	d011      	beq.n	800c4cc <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4ac:	69db      	ldr	r3, [r3, #28]
 800c4ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4b2:	d103      	bne.n	800c4bc <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f7f4 fec3 	bl	8001240 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800c4ba:	e007      	b.n	800c4cc <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	691a      	ldr	r2, [r3, #16]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f042 0208 	orr.w	r2, r2, #8
 800c4ca:	611a      	str	r2, [r3, #16]
}
 800c4cc:	bf00      	nop
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800c4e2:	68f8      	ldr	r0, [r7, #12]
 800c4e4:	f7ff ff9c 	bl	800c420 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c4e8:	bf00      	nop
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4fc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f7f4 fef6 	bl	80012f0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c504:	bf00      	nop
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c518:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7f7 fff0 	bl	8004500 <HAL_DMA_GetError>
 800c520:	4603      	mov	r3, r0
 800c522:	2b02      	cmp	r3, #2
 800c524:	d011      	beq.n	800c54a <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f000 f82e 	bl	800c588 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c532:	f043 0210 	orr.w	r2, r3, #16
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2201      	movs	r2, #1
 800c540:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f7ff ff75 	bl	800c434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800c54a:	bf00      	nop
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b084      	sub	sp, #16
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c55e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2200      	movs	r2, #0
 800c564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2201      	movs	r2, #1
 800c574:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f7ff ff5b 	bl	800c434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c57e:	bf00      	nop
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
	...

0800c588 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	695b      	ldr	r3, [r3, #20]
 800c596:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	699a      	ldr	r2, [r3, #24]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f042 0208 	orr.w	r2, r2, #8
 800c5a6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	699a      	ldr	r2, [r3, #24]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f042 0210 	orr.w	r2, r2, #16
 800c5b6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f022 0201 	bic.w	r2, r2, #1
 800c5c6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6919      	ldr	r1, [r3, #16]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	4b3c      	ldr	r3, [pc, #240]	; (800c6c4 <SPI_CloseTransfer+0x13c>)
 800c5d4:	400b      	ands	r3, r1
 800c5d6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	689a      	ldr	r2, [r3, #8]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c5e6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	2b04      	cmp	r3, #4
 800c5f2:	d014      	beq.n	800c61e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f003 0320 	and.w	r3, r3, #32
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00f      	beq.n	800c61e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c604:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	699a      	ldr	r2, [r3, #24]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f042 0220 	orr.w	r2, r2, #32
 800c61c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c624:	b2db      	uxtb	r3, r3
 800c626:	2b03      	cmp	r3, #3
 800c628:	d014      	beq.n	800c654 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00f      	beq.n	800c654 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c63a:	f043 0204 	orr.w	r2, r3, #4
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	699a      	ldr	r2, [r3, #24]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c652:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00f      	beq.n	800c67e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c664:	f043 0201 	orr.w	r2, r3, #1
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	699a      	ldr	r2, [r3, #24]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c67c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00f      	beq.n	800c6a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c68e:	f043 0208 	orr.w	r2, r3, #8
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	699a      	ldr	r2, [r3, #24]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c6a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c6b8:	bf00      	nop
 800c6ba:	3714      	adds	r7, #20
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr
 800c6c4:	fffffc90 	.word	0xfffffc90

0800c6c8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6d4:	095b      	lsrs	r3, r3, #5
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	3307      	adds	r3, #7
 800c6e6:	08db      	lsrs	r3, r3, #3
 800c6e8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	fb02 f303 	mul.w	r3, r2, r3
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
	...

0800c700 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d121      	bne.n	800c756 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	4b27      	ldr	r3, [pc, #156]	; (800c7b4 <FMC_SDRAM_Init+0xb4>)
 800c718:	4013      	ands	r3, r2
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	6851      	ldr	r1, [r2, #4]
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	6892      	ldr	r2, [r2, #8]
 800c722:	4311      	orrs	r1, r2
 800c724:	683a      	ldr	r2, [r7, #0]
 800c726:	68d2      	ldr	r2, [r2, #12]
 800c728:	4311      	orrs	r1, r2
 800c72a:	683a      	ldr	r2, [r7, #0]
 800c72c:	6912      	ldr	r2, [r2, #16]
 800c72e:	4311      	orrs	r1, r2
 800c730:	683a      	ldr	r2, [r7, #0]
 800c732:	6952      	ldr	r2, [r2, #20]
 800c734:	4311      	orrs	r1, r2
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	6992      	ldr	r2, [r2, #24]
 800c73a:	4311      	orrs	r1, r2
 800c73c:	683a      	ldr	r2, [r7, #0]
 800c73e:	69d2      	ldr	r2, [r2, #28]
 800c740:	4311      	orrs	r1, r2
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	6a12      	ldr	r2, [r2, #32]
 800c746:	4311      	orrs	r1, r2
 800c748:	683a      	ldr	r2, [r7, #0]
 800c74a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c74c:	430a      	orrs	r2, r1
 800c74e:	431a      	orrs	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	601a      	str	r2, [r3, #0]
 800c754:	e026      	b.n	800c7a4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	69d9      	ldr	r1, [r3, #28]
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	4319      	orrs	r1, r3
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c76c:	430b      	orrs	r3, r1
 800c76e:	431a      	orrs	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685a      	ldr	r2, [r3, #4]
 800c778:	4b0e      	ldr	r3, [pc, #56]	; (800c7b4 <FMC_SDRAM_Init+0xb4>)
 800c77a:	4013      	ands	r3, r2
 800c77c:	683a      	ldr	r2, [r7, #0]
 800c77e:	6851      	ldr	r1, [r2, #4]
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	6892      	ldr	r2, [r2, #8]
 800c784:	4311      	orrs	r1, r2
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	68d2      	ldr	r2, [r2, #12]
 800c78a:	4311      	orrs	r1, r2
 800c78c:	683a      	ldr	r2, [r7, #0]
 800c78e:	6912      	ldr	r2, [r2, #16]
 800c790:	4311      	orrs	r1, r2
 800c792:	683a      	ldr	r2, [r7, #0]
 800c794:	6952      	ldr	r2, [r2, #20]
 800c796:	4311      	orrs	r1, r2
 800c798:	683a      	ldr	r2, [r7, #0]
 800c79a:	6992      	ldr	r2, [r2, #24]
 800c79c:	430a      	orrs	r2, r1
 800c79e:	431a      	orrs	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c7a4:	2300      	movs	r3, #0
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	370c      	adds	r7, #12
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	ffff8000 	.word	0xffff8000

0800c7b8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d128      	bne.n	800c81c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	1e59      	subs	r1, r3, #1
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	011b      	lsls	r3, r3, #4
 800c7e0:	4319      	orrs	r1, r3
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	021b      	lsls	r3, r3, #8
 800c7ea:	4319      	orrs	r1, r3
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	031b      	lsls	r3, r3, #12
 800c7f4:	4319      	orrs	r1, r3
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	691b      	ldr	r3, [r3, #16]
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	041b      	lsls	r3, r3, #16
 800c7fe:	4319      	orrs	r1, r3
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	695b      	ldr	r3, [r3, #20]
 800c804:	3b01      	subs	r3, #1
 800c806:	051b      	lsls	r3, r3, #20
 800c808:	4319      	orrs	r1, r3
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	3b01      	subs	r3, #1
 800c810:	061b      	lsls	r3, r3, #24
 800c812:	430b      	orrs	r3, r1
 800c814:	431a      	orrs	r2, r3
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	609a      	str	r2, [r3, #8]
 800c81a:	e02d      	b.n	800c878 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	689a      	ldr	r2, [r3, #8]
 800c820:	4b19      	ldr	r3, [pc, #100]	; (800c888 <FMC_SDRAM_Timing_Init+0xd0>)
 800c822:	4013      	ands	r3, r2
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	68d2      	ldr	r2, [r2, #12]
 800c828:	3a01      	subs	r2, #1
 800c82a:	0311      	lsls	r1, r2, #12
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	6952      	ldr	r2, [r2, #20]
 800c830:	3a01      	subs	r2, #1
 800c832:	0512      	lsls	r2, r2, #20
 800c834:	430a      	orrs	r2, r1
 800c836:	431a      	orrs	r2, r3
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	1e59      	subs	r1, r3, #1
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	3b01      	subs	r3, #1
 800c850:	011b      	lsls	r3, r3, #4
 800c852:	4319      	orrs	r1, r3
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	3b01      	subs	r3, #1
 800c85a:	021b      	lsls	r3, r3, #8
 800c85c:	4319      	orrs	r1, r3
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	691b      	ldr	r3, [r3, #16]
 800c862:	3b01      	subs	r3, #1
 800c864:	041b      	lsls	r3, r3, #16
 800c866:	4319      	orrs	r1, r3
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	699b      	ldr	r3, [r3, #24]
 800c86c:	3b01      	subs	r3, #1
 800c86e:	061b      	lsls	r3, r3, #24
 800c870:	430b      	orrs	r3, r1
 800c872:	431a      	orrs	r2, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3714      	adds	r7, #20
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop
 800c888:	ff0f0fff 	.word	0xff0f0fff

0800c88c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c88c:	b084      	sub	sp, #16
 800c88e:	b480      	push	{r7}
 800c890:	b085      	sub	sp, #20
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
 800c896:	f107 001c 	add.w	r0, r7, #28
 800c89a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c8a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800c8a4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800c8a6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800c8aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800c8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800c8ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800c8b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	685a      	ldr	r2, [r3, #4]
 800c8be:	4b07      	ldr	r3, [pc, #28]	; (800c8dc <SDMMC_Init+0x50>)
 800c8c0:	4013      	ands	r3, r2
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	431a      	orrs	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3714      	adds	r7, #20
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	b004      	add	sp, #16
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	ffc02c00 	.word	0xffc02c00

0800c8e0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	370c      	adds	r7, #12
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr

0800c8fa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c8fa:	b480      	push	{r7}
 800c8fc:	b083      	sub	sp, #12
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f043 0203 	orr.w	r2, r3, #3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	370c      	adds	r7, #12
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr

0800c93e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c93e:	b480      	push	{r7}
 800c940:	b083      	sub	sp, #12
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f003 0303 	and.w	r3, r3, #3
}
 800c94e:	4618      	mov	r0, r3
 800c950:	370c      	adds	r7, #12
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
	...

0800c95c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c966:	2300      	movs	r3, #0
 800c968:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c97a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800c980:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800c986:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	68da      	ldr	r2, [r3, #12]
 800c992:	4b06      	ldr	r3, [pc, #24]	; (800c9ac <SDMMC_SendCommand+0x50>)
 800c994:	4013      	ands	r3, r2
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	431a      	orrs	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3714      	adds	r7, #20
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr
 800c9ac:	fffee0c0 	.word	0xfffee0c0

0800c9b0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	691b      	ldr	r3, [r3, #16]
 800c9bc:	b2db      	uxtb	r3, r3
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	370c      	adds	r7, #12
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c9ca:	b480      	push	{r7}
 800c9cc:	b085      	sub	sp, #20
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
 800c9d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	3314      	adds	r3, #20
 800c9d8:	461a      	mov	r2, r3
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	4413      	add	r3, r2
 800c9de:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3714      	adds	r7, #20
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	685a      	ldr	r2, [r3, #4]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ca16:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ca1c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ca22:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	4313      	orrs	r3, r2
 800ca28:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	431a      	orrs	r2, r3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ca3a:	2300      	movs	r3, #0

}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3714      	adds	r7, #20
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b088      	sub	sp, #32
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ca56:	2310      	movs	r3, #16
 800ca58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca60:	2300      	movs	r3, #0
 800ca62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca6a:	f107 0308 	add.w	r3, r7, #8
 800ca6e:	4619      	mov	r1, r3
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff ff73 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ca76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca7a:	2110      	movs	r1, #16
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 fa5f 	bl	800cf40 <SDMMC_GetCmdResp1>
 800ca82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca84:	69fb      	ldr	r3, [r7, #28]
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3720      	adds	r7, #32
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b088      	sub	sp, #32
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
 800ca96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ca9c:	2311      	movs	r3, #17
 800ca9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800caa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800caa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800caa6:	2300      	movs	r3, #0
 800caa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800caae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cab0:	f107 0308 	add.w	r3, r7, #8
 800cab4:	4619      	mov	r1, r3
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7ff ff50 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cabc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cac0:	2111      	movs	r1, #17
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 fa3c 	bl	800cf40 <SDMMC_GetCmdResp1>
 800cac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800caca:	69fb      	ldr	r3, [r7, #28]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3720      	adds	r7, #32
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b088      	sub	sp, #32
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cae2:	2312      	movs	r3, #18
 800cae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800caea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800caec:	2300      	movs	r3, #0
 800caee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800caf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800caf6:	f107 0308 	add.w	r3, r7, #8
 800cafa:	4619      	mov	r1, r3
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff ff2d 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cb02:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb06:	2112      	movs	r1, #18
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fa19 	bl	800cf40 <SDMMC_GetCmdResp1>
 800cb0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb10:	69fb      	ldr	r3, [r7, #28]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3720      	adds	r7, #32
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b088      	sub	sp, #32
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cb28:	2318      	movs	r3, #24
 800cb2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb32:	2300      	movs	r3, #0
 800cb34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb3c:	f107 0308 	add.w	r3, r7, #8
 800cb40:	4619      	mov	r1, r3
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7ff ff0a 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cb48:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb4c:	2118      	movs	r1, #24
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 f9f6 	bl	800cf40 <SDMMC_GetCmdResp1>
 800cb54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb56:	69fb      	ldr	r3, [r7, #28]
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3720      	adds	r7, #32
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b088      	sub	sp, #32
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cb6e:	2319      	movs	r3, #25
 800cb70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb82:	f107 0308 	add.w	r3, r7, #8
 800cb86:	4619      	mov	r1, r3
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7ff fee7 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cb8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb92:	2119      	movs	r1, #25
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 f9d3 	bl	800cf40 <SDMMC_GetCmdResp1>
 800cb9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb9c:	69fb      	ldr	r3, [r7, #28]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3720      	adds	r7, #32
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
	...

0800cba8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b088      	sub	sp, #32
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cbb4:	230c      	movs	r3, #12
 800cbb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbc6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbe0:	f107 0308 	add.w	r3, r7, #8
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7ff feb8 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cbec:	4a0b      	ldr	r2, [pc, #44]	; (800cc1c <SDMMC_CmdStopTransfer+0x74>)
 800cbee:	210c      	movs	r1, #12
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 f9a5 	bl	800cf40 <SDMMC_GetCmdResp1>
 800cbf6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc0a:	d101      	bne.n	800cc10 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800cc10:	69fb      	ldr	r3, [r7, #28]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3720      	adds	r7, #32
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	05f5e100 	.word	0x05f5e100

0800cc20 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b088      	sub	sp, #32
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cc2e:	2307      	movs	r3, #7
 800cc30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc32:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc42:	f107 0308 	add.w	r3, r7, #8
 800cc46:	4619      	mov	r1, r3
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f7ff fe87 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cc4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc52:	2107      	movs	r1, #7
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 f973 	bl	800cf40 <SDMMC_GetCmdResp1>
 800cc5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc5c:	69fb      	ldr	r3, [r7, #28]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3720      	adds	r7, #32
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b088      	sub	sp, #32
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cc72:	2300      	movs	r3, #0
 800cc74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cc76:	2300      	movs	r3, #0
 800cc78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc84:	f107 0308 	add.w	r3, r7, #8
 800cc88:	4619      	mov	r1, r3
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7ff fe66 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fb97 	bl	800d3c4 <SDMMC_GetCmdError>
 800cc96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc98:	69fb      	ldr	r3, [r7, #28]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3720      	adds	r7, #32
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b088      	sub	sp, #32
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ccaa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ccae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ccb0:	2308      	movs	r3, #8
 800ccb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ccb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccc4:	f107 0308 	add.w	r3, r7, #8
 800ccc8:	4619      	mov	r1, r3
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f7ff fe46 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 fb29 	bl	800d328 <SDMMC_GetCmdResp7>
 800ccd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccd8:	69fb      	ldr	r3, [r7, #28]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3720      	adds	r7, #32
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b088      	sub	sp, #32
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ccf0:	2337      	movs	r3, #55	; 0x37
 800ccf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ccf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd04:	f107 0308 	add.w	r3, r7, #8
 800cd08:	4619      	mov	r1, r3
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7ff fe26 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cd10:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd14:	2137      	movs	r1, #55	; 0x37
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 f912 	bl	800cf40 <SDMMC_GetCmdResp1>
 800cd1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd1e:	69fb      	ldr	r3, [r7, #28]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3720      	adds	r7, #32
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b088      	sub	sp, #32
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cd36:	2329      	movs	r3, #41	; 0x29
 800cd38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd40:	2300      	movs	r3, #0
 800cd42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd4a:	f107 0308 	add.w	r3, r7, #8
 800cd4e:	4619      	mov	r1, r3
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f7ff fe03 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 fa2e 	bl	800d1b8 <SDMMC_GetCmdResp3>
 800cd5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd5e:	69fb      	ldr	r3, [r7, #28]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3720      	adds	r7, #32
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b088      	sub	sp, #32
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cd76:	2306      	movs	r3, #6
 800cd78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd80:	2300      	movs	r3, #0
 800cd82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd8a:	f107 0308 	add.w	r3, r7, #8
 800cd8e:	4619      	mov	r1, r3
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7ff fde3 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cd96:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd9a:	2106      	movs	r1, #6
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 f8cf 	bl	800cf40 <SDMMC_GetCmdResp1>
 800cda2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cda4:	69fb      	ldr	r3, [r7, #28]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3720      	adds	r7, #32
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b088      	sub	sp, #32
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cdba:	2333      	movs	r3, #51	; 0x33
 800cdbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdce:	f107 0308 	add.w	r3, r7, #8
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f7ff fdc1 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cdda:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdde:	2133      	movs	r1, #51	; 0x33
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 f8ad 	bl	800cf40 <SDMMC_GetCmdResp1>
 800cde6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cde8:	69fb      	ldr	r3, [r7, #28]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3720      	adds	r7, #32
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b088      	sub	sp, #32
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cdfe:	2302      	movs	r3, #2
 800ce00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ce02:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ce06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce12:	f107 0308 	add.w	r3, r7, #8
 800ce16:	4619      	mov	r1, r3
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7ff fd9f 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 f980 	bl	800d124 <SDMMC_GetCmdResp2>
 800ce24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce26:	69fb      	ldr	r3, [r7, #28]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3720      	adds	r7, #32
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b088      	sub	sp, #32
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ce3e:	2309      	movs	r3, #9
 800ce40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ce42:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ce46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce52:	f107 0308 	add.w	r3, r7, #8
 800ce56:	4619      	mov	r1, r3
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f7ff fd7f 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 f960 	bl	800d124 <SDMMC_GetCmdResp2>
 800ce64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce66:	69fb      	ldr	r3, [r7, #28]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3720      	adds	r7, #32
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b088      	sub	sp, #32
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce92:	f107 0308 	add.w	r3, r7, #8
 800ce96:	4619      	mov	r1, r3
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7ff fd5f 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	2103      	movs	r1, #3
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 f9c8 	bl	800d238 <SDMMC_GetCmdResp6>
 800cea8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceaa:	69fb      	ldr	r3, [r7, #28]
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3720      	adds	r7, #32
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b088      	sub	sp, #32
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cec2:	230d      	movs	r3, #13
 800cec4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ceca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cecc:	2300      	movs	r3, #0
 800cece:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ced0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ced4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ced6:	f107 0308 	add.w	r3, r7, #8
 800ceda:	4619      	mov	r1, r3
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff fd3d 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cee2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cee6:	210d      	movs	r1, #13
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f000 f829 	bl	800cf40 <SDMMC_GetCmdResp1>
 800ceee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cef0:	69fb      	ldr	r3, [r7, #28]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3720      	adds	r7, #32
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b088      	sub	sp, #32
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cf02:	2300      	movs	r3, #0
 800cf04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cf06:	230d      	movs	r3, #13
 800cf08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf10:	2300      	movs	r3, #0
 800cf12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf1a:	f107 0308 	add.w	r3, r7, #8
 800cf1e:	4619      	mov	r1, r3
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f7ff fd1b 	bl	800c95c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800cf26:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf2a:	210d      	movs	r1, #13
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 f807 	bl	800cf40 <SDMMC_GetCmdResp1>
 800cf32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf34:	69fb      	ldr	r3, [r7, #28]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3720      	adds	r7, #32
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
	...

0800cf40 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b088      	sub	sp, #32
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	460b      	mov	r3, r1
 800cf4a:	607a      	str	r2, [r7, #4]
 800cf4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cf4e:	4b70      	ldr	r3, [pc, #448]	; (800d110 <SDMMC_GetCmdResp1+0x1d0>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a70      	ldr	r2, [pc, #448]	; (800d114 <SDMMC_GetCmdResp1+0x1d4>)
 800cf54:	fba2 2303 	umull	r2, r3, r2, r3
 800cf58:	0a5a      	lsrs	r2, r3, #9
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	fb02 f303 	mul.w	r3, r2, r3
 800cf60:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	1e5a      	subs	r2, r3, #1
 800cf66:	61fa      	str	r2, [r7, #28]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d102      	bne.n	800cf72 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf70:	e0c9      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf76:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cf78:	69ba      	ldr	r2, [r7, #24]
 800cf7a:	4b67      	ldr	r3, [pc, #412]	; (800d118 <SDMMC_GetCmdResp1+0x1d8>)
 800cf7c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d0ef      	beq.n	800cf62 <SDMMC_GetCmdResp1+0x22>
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d1ea      	bne.n	800cf62 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf90:	f003 0304 	and.w	r3, r3, #4
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d004      	beq.n	800cfa2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2204      	movs	r2, #4
 800cf9c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf9e:	2304      	movs	r3, #4
 800cfa0:	e0b1      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfa6:	f003 0301 	and.w	r3, r3, #1
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d004      	beq.n	800cfb8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	e0a6      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	4a58      	ldr	r2, [pc, #352]	; (800d11c <SDMMC_GetCmdResp1+0x1dc>)
 800cfbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f7ff fcf6 	bl	800c9b0 <SDMMC_GetCommandResponse>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	7afb      	ldrb	r3, [r7, #11]
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d001      	beq.n	800cfd2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	e099      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f7ff fcf8 	bl	800c9ca <SDMMC_GetResponse>
 800cfda:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cfdc:	697a      	ldr	r2, [r7, #20]
 800cfde:	4b50      	ldr	r3, [pc, #320]	; (800d120 <SDMMC_GetCmdResp1+0x1e0>)
 800cfe0:	4013      	ands	r3, r2
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d101      	bne.n	800cfea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	e08d      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	da02      	bge.n	800cff6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cff0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cff4:	e087      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d001      	beq.n	800d004 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d000:	2340      	movs	r3, #64	; 0x40
 800d002:	e080      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d001      	beq.n	800d012 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d00e:	2380      	movs	r3, #128	; 0x80
 800d010:	e079      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d002      	beq.n	800d022 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d01c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d020:	e071      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d002      	beq.n	800d032 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d02c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d030:	e069      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d03c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d040:	e061      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d002      	beq.n	800d052 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d04c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d050:	e059      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d002      	beq.n	800d062 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d05c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d060:	e051      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d002      	beq.n	800d072 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d06c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d070:	e049      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d002      	beq.n	800d082 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d07c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d080:	e041      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d08c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d090:	e039      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d002      	beq.n	800d0a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d09c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d0a0:	e031      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d002      	beq.n	800d0b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d0ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d0b0:	e029      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d002      	beq.n	800d0c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d0bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d0c0:	e021      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d002      	beq.n	800d0d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d0cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d0d0:	e019      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d002      	beq.n	800d0e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d0dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d0e0:	e011      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d002      	beq.n	800d0f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d0ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d0f0:	e009      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	f003 0308 	and.w	r3, r3, #8
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d002      	beq.n	800d102 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d0fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d100:	e001      	b.n	800d106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d106:	4618      	mov	r0, r3
 800d108:	3720      	adds	r7, #32
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	20000000 	.word	0x20000000
 800d114:	10624dd3 	.word	0x10624dd3
 800d118:	00200045 	.word	0x00200045
 800d11c:	002000c5 	.word	0x002000c5
 800d120:	fdffe008 	.word	0xfdffe008

0800d124 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d12c:	4b1f      	ldr	r3, [pc, #124]	; (800d1ac <SDMMC_GetCmdResp2+0x88>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a1f      	ldr	r2, [pc, #124]	; (800d1b0 <SDMMC_GetCmdResp2+0x8c>)
 800d132:	fba2 2303 	umull	r2, r3, r2, r3
 800d136:	0a5b      	lsrs	r3, r3, #9
 800d138:	f241 3288 	movw	r2, #5000	; 0x1388
 800d13c:	fb02 f303 	mul.w	r3, r2, r3
 800d140:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	1e5a      	subs	r2, r3, #1
 800d146:	60fa      	str	r2, [r7, #12]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d102      	bne.n	800d152 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d14c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d150:	e026      	b.n	800d1a0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d156:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d0ef      	beq.n	800d142 <SDMMC_GetCmdResp2+0x1e>
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1ea      	bne.n	800d142 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d170:	f003 0304 	and.w	r3, r3, #4
 800d174:	2b00      	cmp	r3, #0
 800d176:	d004      	beq.n	800d182 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2204      	movs	r2, #4
 800d17c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d17e:	2304      	movs	r3, #4
 800d180:	e00e      	b.n	800d1a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d186:	f003 0301 	and.w	r3, r3, #1
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d004      	beq.n	800d198 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2201      	movs	r2, #1
 800d192:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d194:	2301      	movs	r3, #1
 800d196:	e003      	b.n	800d1a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4a06      	ldr	r2, [pc, #24]	; (800d1b4 <SDMMC_GetCmdResp2+0x90>)
 800d19c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3714      	adds	r7, #20
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr
 800d1ac:	20000000 	.word	0x20000000
 800d1b0:	10624dd3 	.word	0x10624dd3
 800d1b4:	002000c5 	.word	0x002000c5

0800d1b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d1c0:	4b1a      	ldr	r3, [pc, #104]	; (800d22c <SDMMC_GetCmdResp3+0x74>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a1a      	ldr	r2, [pc, #104]	; (800d230 <SDMMC_GetCmdResp3+0x78>)
 800d1c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d1ca:	0a5b      	lsrs	r3, r3, #9
 800d1cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1d0:	fb02 f303 	mul.w	r3, r2, r3
 800d1d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	1e5a      	subs	r2, r3, #1
 800d1da:	60fa      	str	r2, [r7, #12]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d102      	bne.n	800d1e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1e4:	e01b      	b.n	800d21e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ea:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d0ef      	beq.n	800d1d6 <SDMMC_GetCmdResp3+0x1e>
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d1ea      	bne.n	800d1d6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d204:	f003 0304 	and.w	r3, r3, #4
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d004      	beq.n	800d216 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2204      	movs	r2, #4
 800d210:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d212:	2304      	movs	r3, #4
 800d214:	e003      	b.n	800d21e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	4a06      	ldr	r2, [pc, #24]	; (800d234 <SDMMC_GetCmdResp3+0x7c>)
 800d21a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3714      	adds	r7, #20
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop
 800d22c:	20000000 	.word	0x20000000
 800d230:	10624dd3 	.word	0x10624dd3
 800d234:	002000c5 	.word	0x002000c5

0800d238 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b088      	sub	sp, #32
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	460b      	mov	r3, r1
 800d242:	607a      	str	r2, [r7, #4]
 800d244:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d246:	4b35      	ldr	r3, [pc, #212]	; (800d31c <SDMMC_GetCmdResp6+0xe4>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4a35      	ldr	r2, [pc, #212]	; (800d320 <SDMMC_GetCmdResp6+0xe8>)
 800d24c:	fba2 2303 	umull	r2, r3, r2, r3
 800d250:	0a5b      	lsrs	r3, r3, #9
 800d252:	f241 3288 	movw	r2, #5000	; 0x1388
 800d256:	fb02 f303 	mul.w	r3, r2, r3
 800d25a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	1e5a      	subs	r2, r3, #1
 800d260:	61fa      	str	r2, [r7, #28]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d102      	bne.n	800d26c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d266:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d26a:	e052      	b.n	800d312 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d270:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d0ef      	beq.n	800d25c <SDMMC_GetCmdResp6+0x24>
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d282:	2b00      	cmp	r3, #0
 800d284:	d1ea      	bne.n	800d25c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d28a:	f003 0304 	and.w	r3, r3, #4
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d004      	beq.n	800d29c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2204      	movs	r2, #4
 800d296:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d298:	2304      	movs	r3, #4
 800d29a:	e03a      	b.n	800d312 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a0:	f003 0301 	and.w	r3, r3, #1
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d004      	beq.n	800d2b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e02f      	b.n	800d312 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f7ff fb7c 	bl	800c9b0 <SDMMC_GetCommandResponse>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	7afb      	ldrb	r3, [r7, #11]
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d001      	beq.n	800d2c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e025      	b.n	800d312 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	4a16      	ldr	r2, [pc, #88]	; (800d324 <SDMMC_GetCmdResp6+0xec>)
 800d2ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	68f8      	ldr	r0, [r7, #12]
 800d2d0:	f7ff fb7b 	bl	800c9ca <SDMMC_GetResponse>
 800d2d4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d106      	bne.n	800d2ee <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	0c1b      	lsrs	r3, r3, #16
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	e011      	b.n	800d312 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d002      	beq.n	800d2fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d2f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d2fc:	e009      	b.n	800d312 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d304:	2b00      	cmp	r3, #0
 800d306:	d002      	beq.n	800d30e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d30c:	e001      	b.n	800d312 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d30e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d312:	4618      	mov	r0, r3
 800d314:	3720      	adds	r7, #32
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	20000000 	.word	0x20000000
 800d320:	10624dd3 	.word	0x10624dd3
 800d324:	002000c5 	.word	0x002000c5

0800d328 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d328:	b480      	push	{r7}
 800d32a:	b085      	sub	sp, #20
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d330:	4b22      	ldr	r3, [pc, #136]	; (800d3bc <SDMMC_GetCmdResp7+0x94>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4a22      	ldr	r2, [pc, #136]	; (800d3c0 <SDMMC_GetCmdResp7+0x98>)
 800d336:	fba2 2303 	umull	r2, r3, r2, r3
 800d33a:	0a5b      	lsrs	r3, r3, #9
 800d33c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d340:	fb02 f303 	mul.w	r3, r2, r3
 800d344:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	1e5a      	subs	r2, r3, #1
 800d34a:	60fa      	str	r2, [r7, #12]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d102      	bne.n	800d356 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d350:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d354:	e02c      	b.n	800d3b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d35a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d362:	2b00      	cmp	r3, #0
 800d364:	d0ef      	beq.n	800d346 <SDMMC_GetCmdResp7+0x1e>
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1ea      	bne.n	800d346 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d374:	f003 0304 	and.w	r3, r3, #4
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d004      	beq.n	800d386 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2204      	movs	r2, #4
 800d380:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d382:	2304      	movs	r3, #4
 800d384:	e014      	b.n	800d3b0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d38a:	f003 0301 	and.w	r3, r3, #1
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d004      	beq.n	800d39c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2201      	movs	r2, #1
 800d396:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d398:	2301      	movs	r3, #1
 800d39a:	e009      	b.n	800d3b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d002      	beq.n	800d3ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2240      	movs	r2, #64	; 0x40
 800d3ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d3ae:	2300      	movs	r3, #0

}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3714      	adds	r7, #20
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr
 800d3bc:	20000000 	.word	0x20000000
 800d3c0:	10624dd3 	.word	0x10624dd3

0800d3c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b085      	sub	sp, #20
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d3cc:	4b11      	ldr	r3, [pc, #68]	; (800d414 <SDMMC_GetCmdError+0x50>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a11      	ldr	r2, [pc, #68]	; (800d418 <SDMMC_GetCmdError+0x54>)
 800d3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3d6:	0a5b      	lsrs	r3, r3, #9
 800d3d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3dc:	fb02 f303 	mul.w	r3, r2, r3
 800d3e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	1e5a      	subs	r2, r3, #1
 800d3e6:	60fa      	str	r2, [r7, #12]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d102      	bne.n	800d3f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3f0:	e009      	b.n	800d406 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d0f1      	beq.n	800d3e2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	4a06      	ldr	r2, [pc, #24]	; (800d41c <SDMMC_GetCmdError+0x58>)
 800d402:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	3714      	adds	r7, #20
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	20000000 	.word	0x20000000
 800d418:	10624dd3 	.word	0x10624dd3
 800d41c:	002000c5 	.word	0x002000c5

0800d420 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d424:	4904      	ldr	r1, [pc, #16]	; (800d438 <MX_FATFS_Init+0x18>)
 800d426:	4805      	ldr	r0, [pc, #20]	; (800d43c <MX_FATFS_Init+0x1c>)
 800d428:	f000 fa06 	bl	800d838 <FATFS_LinkDriver>
 800d42c:	4603      	mov	r3, r0
 800d42e:	461a      	mov	r2, r3
 800d430:	4b03      	ldr	r3, [pc, #12]	; (800d440 <MX_FATFS_Init+0x20>)
 800d432:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d434:	bf00      	nop
 800d436:	bd80      	pop	{r7, pc}
 800d438:	20001978 	.word	0x20001978
 800d43c:	0800de08 	.word	0x0800de08
 800d440:	20001974 	.word	0x20001974

0800d444 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d44a:	2300      	movs	r3, #0
 800d44c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d44e:	f000 f89b 	bl	800d588 <BSP_SD_IsDetected>
 800d452:	4603      	mov	r3, r0
 800d454:	2b01      	cmp	r3, #1
 800d456:	d001      	beq.n	800d45c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d458:	2302      	movs	r3, #2
 800d45a:	e012      	b.n	800d482 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d45c:	480b      	ldr	r0, [pc, #44]	; (800d48c <BSP_SD_Init+0x48>)
 800d45e:	f7fc fcc2 	bl	8009de6 <HAL_SD_Init>
 800d462:	4603      	mov	r3, r0
 800d464:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d466:	79fb      	ldrb	r3, [r7, #7]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d109      	bne.n	800d480 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d46c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d470:	4806      	ldr	r0, [pc, #24]	; (800d48c <BSP_SD_Init+0x48>)
 800d472:	f7fd fd39 	bl	800aee8 <HAL_SD_ConfigWideBusOperation>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d001      	beq.n	800d480 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d47c:	2301      	movs	r3, #1
 800d47e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d480:	79fb      	ldrb	r3, [r7, #7]
}
 800d482:	4618      	mov	r0, r3
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	2000177c 	.word	0x2000177c

0800d490 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b088      	sub	sp, #32
 800d494:	af02      	add	r7, sp, #8
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	607a      	str	r2, [r7, #4]
 800d49c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	9300      	str	r3, [sp, #0]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	68ba      	ldr	r2, [r7, #8]
 800d4aa:	68f9      	ldr	r1, [r7, #12]
 800d4ac:	4806      	ldr	r0, [pc, #24]	; (800d4c8 <BSP_SD_ReadBlocks+0x38>)
 800d4ae:	f7fc fdb3 	bl	800a018 <HAL_SD_ReadBlocks>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d001      	beq.n	800d4bc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d4bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3718      	adds	r7, #24
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	2000177c 	.word	0x2000177c

0800d4cc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b088      	sub	sp, #32
 800d4d0:	af02      	add	r7, sp, #8
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	60b9      	str	r1, [r7, #8]
 800d4d6:	607a      	str	r2, [r7, #4]
 800d4d8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	68ba      	ldr	r2, [r7, #8]
 800d4e6:	68f9      	ldr	r1, [r7, #12]
 800d4e8:	4806      	ldr	r0, [pc, #24]	; (800d504 <BSP_SD_WriteBlocks+0x38>)
 800d4ea:	f7fc ff1f 	bl	800a32c <HAL_SD_WriteBlocks>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d4f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3718      	adds	r7, #24
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	2000177c 	.word	0x2000177c

0800d508 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d50c:	4805      	ldr	r0, [pc, #20]	; (800d524 <BSP_SD_GetCardState+0x1c>)
 800d50e:	f7fd fdfd 	bl	800b10c <HAL_SD_GetCardState>
 800d512:	4603      	mov	r3, r0
 800d514:	2b04      	cmp	r3, #4
 800d516:	bf14      	ite	ne
 800d518:	2301      	movne	r3, #1
 800d51a:	2300      	moveq	r3, #0
 800d51c:	b2db      	uxtb	r3, r3
}
 800d51e:	4618      	mov	r0, r3
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	2000177c 	.word	0x2000177c

0800d528 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	4803      	ldr	r0, [pc, #12]	; (800d540 <BSP_SD_GetCardInfo+0x18>)
 800d534:	f7fd fcac 	bl	800ae90 <HAL_SD_GetCardInfo>
}
 800d538:	bf00      	nop
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	2000177c 	.word	0x2000177c

0800d544 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d54c:	f000 f80e 	bl	800d56c <BSP_SD_WriteCpltCallback>
}
 800d550:	bf00      	nop
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d560:	f000 f80b 	bl	800d57a <BSP_SD_ReadCpltCallback>
}
 800d564:	bf00      	nop
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800d56c:	b480      	push	{r7}
 800d56e:	af00      	add	r7, sp, #0

}
 800d570:	bf00      	nop
 800d572:	46bd      	mov	sp, r7
 800d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d578:	4770      	bx	lr

0800d57a <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800d57a:	b480      	push	{r7}
 800d57c:	af00      	add	r7, sp, #0

}
 800d57e:	bf00      	nop
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d58e:	2301      	movs	r3, #1
 800d590:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d592:	f000 f80b 	bl	800d5ac <BSP_PlatformIsDetected>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d101      	bne.n	800d5a0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d59c:	2300      	movs	r3, #0
 800d59e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d5a0:	79fb      	ldrb	r3, [r7, #7]
 800d5a2:	b2db      	uxtb	r3, r3
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3708      	adds	r7, #8
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d5b6:	2102      	movs	r1, #2
 800d5b8:	4806      	ldr	r0, [pc, #24]	; (800d5d4 <BSP_PlatformIsDetected+0x28>)
 800d5ba:	f7f7 fe5d 	bl	8005278 <HAL_GPIO_ReadPin>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d5c8:	79fb      	ldrb	r3, [r7, #7]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	58020000 	.word	0x58020000

0800d5d8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	4603      	mov	r3, r0
 800d5e0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d5e2:	4b0b      	ldr	r3, [pc, #44]	; (800d610 <SD_CheckStatus+0x38>)
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d5e8:	f7ff ff8e 	bl	800d508 <BSP_SD_GetCardState>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d107      	bne.n	800d602 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d5f2:	4b07      	ldr	r3, [pc, #28]	; (800d610 <SD_CheckStatus+0x38>)
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	f023 0301 	bic.w	r3, r3, #1
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	4b04      	ldr	r3, [pc, #16]	; (800d610 <SD_CheckStatus+0x38>)
 800d600:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d602:	4b03      	ldr	r3, [pc, #12]	; (800d610 <SD_CheckStatus+0x38>)
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	b2db      	uxtb	r3, r3
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	2000000d 	.word	0x2000000d

0800d614 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	4603      	mov	r3, r0
 800d61c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d61e:	4b0b      	ldr	r3, [pc, #44]	; (800d64c <SD_initialize+0x38>)
 800d620:	2201      	movs	r2, #1
 800d622:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d624:	f7ff ff0e 	bl	800d444 <BSP_SD_Init>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d107      	bne.n	800d63e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d62e:	79fb      	ldrb	r3, [r7, #7]
 800d630:	4618      	mov	r0, r3
 800d632:	f7ff ffd1 	bl	800d5d8 <SD_CheckStatus>
 800d636:	4603      	mov	r3, r0
 800d638:	461a      	mov	r2, r3
 800d63a:	4b04      	ldr	r3, [pc, #16]	; (800d64c <SD_initialize+0x38>)
 800d63c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d63e:	4b03      	ldr	r3, [pc, #12]	; (800d64c <SD_initialize+0x38>)
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	b2db      	uxtb	r3, r3
}
 800d644:	4618      	mov	r0, r3
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	2000000d 	.word	0x2000000d

0800d650 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	4603      	mov	r3, r0
 800d658:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d65a:	79fb      	ldrb	r3, [r7, #7]
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7ff ffbb 	bl	800d5d8 <SD_CheckStatus>
 800d662:	4603      	mov	r3, r0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b086      	sub	sp, #24
 800d670:	af00      	add	r7, sp, #0
 800d672:	60b9      	str	r1, [r7, #8]
 800d674:	607a      	str	r2, [r7, #4]
 800d676:	603b      	str	r3, [r7, #0]
 800d678:	4603      	mov	r3, r0
 800d67a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d67c:	2301      	movs	r3, #1
 800d67e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d684:	683a      	ldr	r2, [r7, #0]
 800d686:	6879      	ldr	r1, [r7, #4]
 800d688:	68b8      	ldr	r0, [r7, #8]
 800d68a:	f7ff ff01 	bl	800d490 <BSP_SD_ReadBlocks>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d107      	bne.n	800d6a4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d694:	bf00      	nop
 800d696:	f7ff ff37 	bl	800d508 <BSP_SD_GetCardState>
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d1fa      	bne.n	800d696 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3718      	adds	r7, #24
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b086      	sub	sp, #24
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
 800d6b8:	603b      	str	r3, [r7, #0]
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d6c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6c6:	683a      	ldr	r2, [r7, #0]
 800d6c8:	6879      	ldr	r1, [r7, #4]
 800d6ca:	68b8      	ldr	r0, [r7, #8]
 800d6cc:	f7ff fefe 	bl	800d4cc <BSP_SD_WriteBlocks>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d107      	bne.n	800d6e6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d6d6:	bf00      	nop
 800d6d8:	f7ff ff16 	bl	800d508 <BSP_SD_GetCardState>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1fa      	bne.n	800d6d8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d6e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3718      	adds	r7, #24
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b08c      	sub	sp, #48	; 0x30
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	603a      	str	r2, [r7, #0]
 800d6fa:	71fb      	strb	r3, [r7, #7]
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d700:	2301      	movs	r3, #1
 800d702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d706:	4b25      	ldr	r3, [pc, #148]	; (800d79c <SD_ioctl+0xac>)
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	f003 0301 	and.w	r3, r3, #1
 800d710:	2b00      	cmp	r3, #0
 800d712:	d001      	beq.n	800d718 <SD_ioctl+0x28>
 800d714:	2303      	movs	r3, #3
 800d716:	e03c      	b.n	800d792 <SD_ioctl+0xa2>

  switch (cmd)
 800d718:	79bb      	ldrb	r3, [r7, #6]
 800d71a:	2b03      	cmp	r3, #3
 800d71c:	d834      	bhi.n	800d788 <SD_ioctl+0x98>
 800d71e:	a201      	add	r2, pc, #4	; (adr r2, 800d724 <SD_ioctl+0x34>)
 800d720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d724:	0800d735 	.word	0x0800d735
 800d728:	0800d73d 	.word	0x0800d73d
 800d72c:	0800d755 	.word	0x0800d755
 800d730:	0800d76f 	.word	0x0800d76f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d734:	2300      	movs	r3, #0
 800d736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d73a:	e028      	b.n	800d78e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d73c:	f107 0308 	add.w	r3, r7, #8
 800d740:	4618      	mov	r0, r3
 800d742:	f7ff fef1 	bl	800d528 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d746:	6a3a      	ldr	r2, [r7, #32]
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d74c:	2300      	movs	r3, #0
 800d74e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d752:	e01c      	b.n	800d78e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d754:	f107 0308 	add.w	r3, r7, #8
 800d758:	4618      	mov	r0, r3
 800d75a:	f7ff fee5 	bl	800d528 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d760:	b29a      	uxth	r2, r3
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d766:	2300      	movs	r3, #0
 800d768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d76c:	e00f      	b.n	800d78e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d76e:	f107 0308 	add.w	r3, r7, #8
 800d772:	4618      	mov	r0, r3
 800d774:	f7ff fed8 	bl	800d528 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77a:	0a5a      	lsrs	r2, r3, #9
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d786:	e002      	b.n	800d78e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d788:	2304      	movs	r3, #4
 800d78a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d78e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d792:	4618      	mov	r0, r3
 800d794:	3730      	adds	r7, #48	; 0x30
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	2000000d 	.word	0x2000000d

0800d7a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b087      	sub	sp, #28
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d7b6:	4b1f      	ldr	r3, [pc, #124]	; (800d834 <FATFS_LinkDriverEx+0x94>)
 800d7b8:	7a5b      	ldrb	r3, [r3, #9]
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d131      	bne.n	800d824 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d7c0:	4b1c      	ldr	r3, [pc, #112]	; (800d834 <FATFS_LinkDriverEx+0x94>)
 800d7c2:	7a5b      	ldrb	r3, [r3, #9]
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	4b1a      	ldr	r3, [pc, #104]	; (800d834 <FATFS_LinkDriverEx+0x94>)
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d7ce:	4b19      	ldr	r3, [pc, #100]	; (800d834 <FATFS_LinkDriverEx+0x94>)
 800d7d0:	7a5b      	ldrb	r3, [r3, #9]
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	4a17      	ldr	r2, [pc, #92]	; (800d834 <FATFS_LinkDriverEx+0x94>)
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	4413      	add	r3, r2
 800d7da:	68fa      	ldr	r2, [r7, #12]
 800d7dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d7de:	4b15      	ldr	r3, [pc, #84]	; (800d834 <FATFS_LinkDriverEx+0x94>)
 800d7e0:	7a5b      	ldrb	r3, [r3, #9]
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	4b13      	ldr	r3, [pc, #76]	; (800d834 <FATFS_LinkDriverEx+0x94>)
 800d7e8:	4413      	add	r3, r2
 800d7ea:	79fa      	ldrb	r2, [r7, #7]
 800d7ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d7ee:	4b11      	ldr	r3, [pc, #68]	; (800d834 <FATFS_LinkDriverEx+0x94>)
 800d7f0:	7a5b      	ldrb	r3, [r3, #9]
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	1c5a      	adds	r2, r3, #1
 800d7f6:	b2d1      	uxtb	r1, r2
 800d7f8:	4a0e      	ldr	r2, [pc, #56]	; (800d834 <FATFS_LinkDriverEx+0x94>)
 800d7fa:	7251      	strb	r1, [r2, #9]
 800d7fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d7fe:	7dbb      	ldrb	r3, [r7, #22]
 800d800:	3330      	adds	r3, #48	; 0x30
 800d802:	b2da      	uxtb	r2, r3
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	3301      	adds	r3, #1
 800d80c:	223a      	movs	r2, #58	; 0x3a
 800d80e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	3302      	adds	r3, #2
 800d814:	222f      	movs	r2, #47	; 0x2f
 800d816:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	3303      	adds	r3, #3
 800d81c:	2200      	movs	r2, #0
 800d81e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d820:	2300      	movs	r3, #0
 800d822:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d824:	7dfb      	ldrb	r3, [r7, #23]
}
 800d826:	4618      	mov	r0, r3
 800d828:	371c      	adds	r7, #28
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	2000197c 	.word	0x2000197c

0800d838 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d842:	2200      	movs	r2, #0
 800d844:	6839      	ldr	r1, [r7, #0]
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7ff ffaa 	bl	800d7a0 <FATFS_LinkDriverEx>
 800d84c:	4603      	mov	r3, r0
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 800d856:	b590      	push	{r4, r7, lr}
 800d858:	b087      	sub	sp, #28
 800d85a:	af02      	add	r7, sp, #8
 800d85c:	60f8      	str	r0, [r7, #12]
 800d85e:	60b9      	str	r1, [r7, #8]
 800d860:	607a      	str	r2, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	685c      	ldr	r4, [r3, #4]
 800d866:	2010      	movs	r0, #16
 800d868:	f000 f8f8 	bl	800da5c <mpool_align>
 800d86c:	4603      	mov	r3, r0
 800d86e:	6363      	str	r3, [r4, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	609a      	str	r2, [r3, #8]
    pool->usize  = 0;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	60da      	str	r2, [r3, #12]
    pool->msize  = size;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	68ba      	ldr	r2, [r7, #8]
 800d880:	611a      	str	r2, [r3, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6898      	ldr	r0, [r3, #8]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	691a      	ldr	r2, [r3, #16]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d890:	1ad2      	subs	r2, r2, r3
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d898:	9300      	str	r3, [sp, #0]
 800d89a:	4613      	mov	r3, r2
 800d89c:	2200      	movs	r2, #0
 800d89e:	2100      	movs	r1, #0
 800d8a0:	f000 f8ea 	bl	800da78 <create_node>
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	615a      	str	r2, [r3, #20]
    {
        memory[i+leaf.header_size]=0;
    }
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}
 800d8aa:	bf00      	nop
 800d8ac:	3714      	adds	r7, #20
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd90      	pop	{r4, r7, pc}

0800d8b2 <leaf_pool_init>:

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b084      	sub	sp, #16
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	60f8      	str	r0, [r7, #12]
 800d8ba:	60b9      	str	r1, [r7, #8]
 800d8bc:	607a      	str	r2, [r7, #4]
    mpool_create(memory, size, &leaf->_internal_mempool);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	331c      	adds	r3, #28
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	6879      	ldr	r1, [r7, #4]
 800d8c6:	68b8      	ldr	r0, [r7, #8]
 800d8c8:	f7ff ffc5 	bl	800d856 <mpool_create>
    
    leaf->mempool = &leaf->_internal_mempool;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f103 021c 	add.w	r2, r3, #28
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	619a      	str	r2, [r3, #24]
}
 800d8d6:	bf00      	nop
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
{
 800d8de:	b590      	push	{r4, r7, lr}
 800d8e0:	b08d      	sub	sp, #52	; 0x34
 800d8e2:	af02      	add	r7, sp, #8
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	6039      	str	r1, [r7, #0]
    pool->leaf->allocCount++;
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d8ee:	3201      	adds	r2, #1
 800d8f0:	649a      	str	r2, [r3, #72]	; 0x48
        memset(temp, 0, asize);
    }
    return temp;
#else
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	695b      	ldr	r3, [r3, #20]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d116      	bne.n	800d928 <mpool_alloc+0x4a>
    {
        if ((pool->msize - pool->usize) > asize)
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	691a      	ldr	r2, [r3, #16]
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	1ad3      	subs	r3, r2, r3
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	429a      	cmp	r2, r3
 800d908:	d206      	bcs.n	800d918 <mpool_alloc+0x3a>
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	2101      	movs	r1, #1
 800d910:	4618      	mov	r0, r3
 800d912:	f000 fa1d 	bl	800dd50 <LEAF_internalErrorCallback>
 800d916:	e005      	b.n	800d924 <mpool_alloc+0x46>
        }
        else
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	2100      	movs	r1, #0
 800d91e:	4618      	mov	r0, r3
 800d920:	f000 fa16 	bl	800dd50 <LEAF_internalErrorCallback>
        }
        return NULL;
 800d924:	2300      	movs	r3, #0
 800d926:	e095      	b.n	800da54 <mpool_alloc+0x176>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 f897 	bl	800da5c <mpool_align>
 800d92e:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	695b      	ldr	r3, [r3, #20]
 800d934:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 800d936:	e01c      	b.n	800d972 <mpool_alloc+0x94>
    {
        node_to_alloc = node_to_alloc->next;
 800d938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 800d93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d940:	2b00      	cmp	r3, #0
 800d942:	d116      	bne.n	800d972 <mpool_alloc+0x94>
        {
            if ((pool->msize - pool->usize) > asize)
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	691a      	ldr	r2, [r3, #16]
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	1ad3      	subs	r3, r2, r3
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	429a      	cmp	r2, r3
 800d952:	d206      	bcs.n	800d962 <mpool_alloc+0x84>
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	2101      	movs	r1, #1
 800d95a:	4618      	mov	r0, r3
 800d95c:	f000 f9f8 	bl	800dd50 <LEAF_internalErrorCallback>
 800d960:	e005      	b.n	800d96e <mpool_alloc+0x90>
            }
            else
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	2100      	movs	r1, #0
 800d968:	4618      	mov	r0, r3
 800d96a:	f000 f9f1 	bl	800dd50 <LEAF_internalErrorCallback>
            }
            return NULL;
 800d96e:	2300      	movs	r3, #0
 800d970:	e070      	b.n	800da54 <mpool_alloc+0x176>
    while (node_to_alloc->size < size_to_alloc)
 800d972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	69ba      	ldr	r2, [r7, #24]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d8dd      	bhi.n	800d938 <mpool_alloc+0x5a>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800d97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97e:	68da      	ldr	r2, [r3, #12]
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	1ad3      	subs	r3, r2, r3
 800d984:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 800d986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d988:	69ba      	ldr	r2, [r7, #24]
 800d98a:	60da      	str	r2, [r3, #12]
    if (leftover > pool->leaf->header_size)
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d992:	697a      	ldr	r2, [r7, #20]
 800d994:	429a      	cmp	r2, r3
 800d996:	d924      	bls.n	800d9e2 <mpool_alloc+0x104>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	613b      	str	r3, [r7, #16]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	441a      	add	r2, r3
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	689a      	ldr	r2, [r3, #8]
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 800d9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9be:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c2:	689c      	ldr	r4, [r3, #8]
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        new_node = create_node(&pool->mpool[offset],
 800d9ca:	697a      	ldr	r2, [r7, #20]
 800d9cc:	1ad2      	subs	r2, r2, r3
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	685b      	ldr	r3, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 800d9d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d4:	9300      	str	r3, [sp, #0]
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	4622      	mov	r2, r4
 800d9da:	f000 f84d 	bl	800da78 <create_node>
 800d9de:	6238      	str	r0, [r7, #32]
 800d9e0:	e008      	b.n	800d9f4 <mpool_alloc+0x116>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 800d9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e4:	68da      	ldr	r2, [r3, #12]
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	441a      	add	r2, r3
 800d9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ec:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 800d9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	695b      	ldr	r3, [r3, #20]
 800d9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d102      	bne.n	800da04 <mpool_alloc+0x126>
    {
        pool->head = new_node;
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	6a3a      	ldr	r2, [r7, #32]
 800da02:	615a      	str	r2, [r3, #20]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 800da04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da06:	f000 f855 	bl	800dab4 <delink_node>
    
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	68da      	ldr	r2, [r3, #12]
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	440b      	add	r3, r1
 800da1a:	441a      	add	r2, r3
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	60da      	str	r2, [r3, #12]
    
    if (pool->leaf->clearOnAllocation > 0)
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	695b      	ldr	r3, [r3, #20]
 800da26:	2b00      	cmp	r3, #0
 800da28:	dd12      	ble.n	800da50 <mpool_alloc+0x172>
    {
        char* new_pool = (char*)node_to_alloc->pool;
 800da2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800da30:	2300      	movs	r3, #0
 800da32:	61fb      	str	r3, [r7, #28]
 800da34:	e007      	b.n	800da46 <mpool_alloc+0x168>
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	4413      	add	r3, r2
 800da3c:	2200      	movs	r2, #0
 800da3e:	701a      	strb	r2, [r3, #0]
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	3301      	adds	r3, #1
 800da44:	61fb      	str	r3, [r7, #28]
 800da46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da48:	68da      	ldr	r2, [r3, #12]
 800da4a:	69fb      	ldr	r3, [r7, #28]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d8f2      	bhi.n	800da36 <mpool_alloc+0x158>
    }
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 800da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da52:	681b      	ldr	r3, [r3, #0]
#endif
}
 800da54:	4618      	mov	r0, r3
 800da56:	372c      	adds	r7, #44	; 0x2c
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd90      	pop	{r4, r7, pc}

0800da5c <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	3307      	adds	r3, #7
 800da68:	f023 0307 	bic.w	r3, r3, #7
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	370c      	adds	r7, #12
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <create_node>:

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
 800da78:	b480      	push	{r7}
 800da7a:	b087      	sub	sp, #28
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
 800da84:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	617b      	str	r3, [r7, #20]
    node->pool = block_location + header_size;
 800da8a:	68fa      	ldr	r2, [r7, #12]
 800da8c:	6a3b      	ldr	r3, [r7, #32]
 800da8e:	441a      	add	r2, r3
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	601a      	str	r2, [r3, #0]
    node->next = next;
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	68ba      	ldr	r2, [r7, #8]
 800da98:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	609a      	str	r2, [r3, #8]
    node->size = size;
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	683a      	ldr	r2, [r7, #0]
 800daa4:	60da      	str	r2, [r3, #12]
    
    return node;
 800daa6:	697b      	ldr	r3, [r7, #20]
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	371c      	adds	r7, #28
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr

0800dab4 <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d004      	beq.n	800dace <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	6892      	ldr	r2, [r2, #8]
 800dacc:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d004      	beq.n	800dae0 <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	6852      	ldr	r2, [r2, #4]
 800dade:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	609a      	str	r2, [r3, #8]
}
 800daec:	bf00      	nop
 800daee:	370c      	adds	r7, #12
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr

0800daf8 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
 800db04:	603b      	str	r3, [r7, #0]
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	3318      	adds	r3, #24
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	68b9      	ldr	r1, [r7, #8]
 800db0e:	68f8      	ldr	r0, [r7, #12]
 800db10:	f000 f804 	bl	800db1c <tMempool_initToPool>
}
 800db14:	bf00      	nop
 800db16:	3710      	adds	r7, #16
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b086      	sub	sp, #24
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
 800db28:	603b      	str	r3, [r7, #0]
    _tMempool* mm = *mem;
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	617b      	str	r3, [r7, #20]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800db30:	6979      	ldr	r1, [r7, #20]
 800db32:	2018      	movs	r0, #24
 800db34:	f7ff fed3 	bl	800d8de <mpool_alloc>
 800db38:	4602      	mov	r2, r0
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	601a      	str	r2, [r3, #0]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	613b      	str	r3, [r7, #16]
    m->leaf = mm->leaf;
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	685a      	ldr	r2, [r3, #4]
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	605a      	str	r2, [r3, #4]
    
    mpool_create (memory, size, m);
 800db4c:	693a      	ldr	r2, [r7, #16]
 800db4e:	6879      	ldr	r1, [r7, #4]
 800db50:	68b8      	ldr	r0, [r7, #8]
 800db52:	f7ff fe80 	bl	800d856 <mpool_create>
}
 800db56:	bf00      	nop
 800db58:	3718      	adds	r7, #24
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
	...

0800db60 <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b086      	sub	sp, #24
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	617b      	str	r3, [r7, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 800db70:	6979      	ldr	r1, [r7, #20]
 800db72:	2018      	movs	r0, #24
 800db74:	f7ff feb3 	bl	800d8de <mpool_alloc>
 800db78:	4602      	mov	r2, r0
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	601a      	str	r2, [r3, #0]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	613b      	str	r3, [r7, #16]
    c->mempool = m;
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	697a      	ldr	r2, [r7, #20]
 800db88:	601a      	str	r2, [r3, #0]
    LEAF* leaf = c->mempool->leaf;
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	60fb      	str	r3, [r7, #12]
    
    c->inc      =  0;
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	2200      	movs	r2, #0
 800db96:	609a      	str	r2, [r3, #8]
    c->phase    =  0;
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	2200      	movs	r2, #0
 800db9c:	605a      	str	r2, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	edd3 7a01 	vldr	s15, [r3, #4]
 800dba4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800dbc4 <tCycle_initToPool+0x64>
 800dba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	edc3 7a04 	vstr	s15, [r3, #16]
    c->mask = SINE_TABLE_SIZE - 1;
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800dbb8:	615a      	str	r2, [r3, #20]
}
 800dbba:	bf00      	nop
 800dbbc:	3718      	adds	r7, #24
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	4f800000 	.word	0x4f800000

0800dbc8 <tCycle_tick>:
    mpool_free((char*)c, c->mempool);
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b089      	sub	sp, #36	; 0x24
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
    _tCycle* c = *cy;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	61fb      	str	r3, [r7, #28]
    uint32_t idx;
    float samp0;
    float samp1;
    
    // Phasor increment
    c->phase += c->inc;
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	69fa      	ldr	r2, [r7, #28]
 800dbdc:	6892      	ldr	r2, [r2, #8]
 800dbde:	441a      	add	r2, r3
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	605a      	str	r2, [r3, #4]
    // Wavetable synthesis
    idx = c->phase >> 21;
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	0d5b      	lsrs	r3, r3, #21
 800dbea:	61bb      	str	r3, [r7, #24]
    tempFrac = (c->phase & 2097151);
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800dbf4:	617b      	str	r3, [r7, #20]
    
    samp0 = __leaf_table_sinewave[idx];
 800dbf6:	4a17      	ldr	r2, [pc, #92]	; (800dc54 <tCycle_tick+0x8c>)
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	4413      	add	r3, r2
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	613b      	str	r3, [r7, #16]
    idx = (idx + 1) & c->mask;
 800dc02:	69bb      	ldr	r3, [r7, #24]
 800dc04:	1c5a      	adds	r2, r3, #1
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	695b      	ldr	r3, [r3, #20]
 800dc0a:	4013      	ands	r3, r2
 800dc0c:	61bb      	str	r3, [r7, #24]
    samp1 = __leaf_table_sinewave[idx];
 800dc0e:	4a11      	ldr	r2, [pc, #68]	; (800dc54 <tCycle_tick+0x8c>)
 800dc10:	69bb      	ldr	r3, [r7, #24]
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	4413      	add	r3, r2
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	60fb      	str	r3, [r7, #12]
    
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 (2097151 is the 21 bits after the 11 bits that represent the main index)
 800dc1a:	ed97 7a03 	vldr	s14, [r7, #12]
 800dc1e:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc22:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	ee07 3a90 	vmov	s15, r3
 800dc2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc30:	eddf 6a09 	vldr	s13, [pc, #36]	; 800dc58 <tCycle_tick+0x90>
 800dc34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dc38:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc3c:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc40:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800dc44:	eeb0 0a67 	vmov.f32	s0, s15
 800dc48:	3724      	adds	r7, #36	; 0x24
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop
 800dc54:	0800de1c 	.word	0x0800de1c
 800dc58:	35000004 	.word	0x35000004

0800dc5c <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, float freq)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b085      	sub	sp, #20
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	ed87 0a00 	vstr	s0, [r7]
    _tCycle* c = *cy;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	60fb      	str	r3, [r7, #12]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	683a      	ldr	r2, [r7, #0]
 800dc72:	60da      	str	r2, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	ed93 7a04 	vldr	s14, [r3, #16]
 800dc7a:	edd7 7a00 	vldr	s15, [r7]
 800dc7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc86:	ee17 2a90 	vmov	r2, s15
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	609a      	str	r2, [r3, #8]
}
 800dc8e:	bf00      	nop
 800dc90:	3714      	adds	r7, #20
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr
	...

0800dc9c <LEAF_init>:
#include "../leaf.h"

#endif

void LEAF_init(LEAF* const leaf, float sr, char* memory, size_t memorysize, float(*random)(void))
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b088      	sub	sp, #32
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6178      	str	r0, [r7, #20]
 800dca4:	ed87 0a04 	vstr	s0, [r7, #16]
 800dca8:	60f9      	str	r1, [r7, #12]
 800dcaa:	60ba      	str	r2, [r7, #8]
 800dcac:	607b      	str	r3, [r7, #4]
    leaf->_internal_mempool.leaf = leaf;
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	697a      	ldr	r2, [r7, #20]
 800dcb2:	621a      	str	r2, [r3, #32]
    leaf_pool_init(leaf, memory, memorysize);
 800dcb4:	68ba      	ldr	r2, [r7, #8]
 800dcb6:	68f9      	ldr	r1, [r7, #12]
 800dcb8:	6978      	ldr	r0, [r7, #20]
 800dcba:	f7ff fdfa 	bl	800d8b2 <leaf_pool_init>
    
    leaf->sampleRate = sr;
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	693a      	ldr	r2, [r7, #16]
 800dcc2:	601a      	str	r2, [r3, #0]
    
    leaf->invSampleRate = 1.0f/sr;
 800dcc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcc8:	ed97 7a04 	vldr	s14, [r7, #16]
 800dccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	edd3 7a01 	vldr	s15, [r3, #4]
 800dcdc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800dd30 <LEAF_init+0x94>
 800dce0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf->random = random;
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	611a      	str	r2, [r3, #16]
    
    leaf->clearOnAllocation = 0;
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	615a      	str	r2, [r3, #20]
    
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	4a0e      	ldr	r2, [pc, #56]	; (800dd34 <LEAF_init+0x98>)
 800dcfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    for (int i = 0; i < LEAFErrorNil; ++i)
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	61fb      	str	r3, [r7, #28]
 800dd00:	e009      	b.n	800dd16 <LEAF_init+0x7a>
        leaf->errorState[i] = 0;
 800dd02:	697a      	ldr	r2, [r7, #20]
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	330e      	adds	r3, #14
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	4413      	add	r3, r2
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	3301      	adds	r3, #1
 800dd14:	61fb      	str	r3, [r7, #28]
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	2b02      	cmp	r3, #2
 800dd1a:	ddf2      	ble.n	800dd02 <LEAF_init+0x66>
    
    leaf->allocCount = 0;
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	649a      	str	r2, [r3, #72]	; 0x48
    
    leaf->freeCount = 0;
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	2200      	movs	r2, #0
 800dd26:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800dd28:	bf00      	nop
 800dd2a:	3720      	adds	r7, #32
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	40c90fdb 	.word	0x40c90fdb
 800dd34:	0800dd39 	.word	0x0800dd39

0800dd38 <LEAF_defaultErrorCallback>:
{
    return leaf->sampleRate;
}

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	460b      	mov	r3, r1
 800dd42:	70fb      	strb	r3, [r7, #3]
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 800dd44:	bf00      	nop
 800dd46:	370c      	adds	r7, #12
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	70fb      	strb	r3, [r7, #3]
    leaf->errorState[whichone] = 1;
 800dd5c:	78fb      	ldrb	r3, [r7, #3]
 800dd5e:	687a      	ldr	r2, [r7, #4]
 800dd60:	330e      	adds	r3, #14
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	4413      	add	r3, r2
 800dd66:	2201      	movs	r2, #1
 800dd68:	605a      	str	r2, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd6e:	78fa      	ldrb	r2, [r7, #3]
 800dd70:	4611      	mov	r1, r2
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	4798      	blx	r3
}
 800dd76:	bf00      	nop
 800dd78:	3708      	adds	r7, #8
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
	...

0800dd80 <__libc_init_array>:
 800dd80:	b570      	push	{r4, r5, r6, lr}
 800dd82:	4d0d      	ldr	r5, [pc, #52]	; (800ddb8 <__libc_init_array+0x38>)
 800dd84:	4c0d      	ldr	r4, [pc, #52]	; (800ddbc <__libc_init_array+0x3c>)
 800dd86:	1b64      	subs	r4, r4, r5
 800dd88:	10a4      	asrs	r4, r4, #2
 800dd8a:	2600      	movs	r6, #0
 800dd8c:	42a6      	cmp	r6, r4
 800dd8e:	d109      	bne.n	800dda4 <__libc_init_array+0x24>
 800dd90:	4d0b      	ldr	r5, [pc, #44]	; (800ddc0 <__libc_init_array+0x40>)
 800dd92:	4c0c      	ldr	r4, [pc, #48]	; (800ddc4 <__libc_init_array+0x44>)
 800dd94:	f000 f820 	bl	800ddd8 <_init>
 800dd98:	1b64      	subs	r4, r4, r5
 800dd9a:	10a4      	asrs	r4, r4, #2
 800dd9c:	2600      	movs	r6, #0
 800dd9e:	42a6      	cmp	r6, r4
 800dda0:	d105      	bne.n	800ddae <__libc_init_array+0x2e>
 800dda2:	bd70      	pop	{r4, r5, r6, pc}
 800dda4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dda8:	4798      	blx	r3
 800ddaa:	3601      	adds	r6, #1
 800ddac:	e7ee      	b.n	800dd8c <__libc_init_array+0xc>
 800ddae:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddb2:	4798      	blx	r3
 800ddb4:	3601      	adds	r6, #1
 800ddb6:	e7f2      	b.n	800dd9e <__libc_init_array+0x1e>
 800ddb8:	0800fe1c 	.word	0x0800fe1c
 800ddbc:	0800fe1c 	.word	0x0800fe1c
 800ddc0:	0800fe1c 	.word	0x0800fe1c
 800ddc4:	0800fe20 	.word	0x0800fe20

0800ddc8 <memset>:
 800ddc8:	4402      	add	r2, r0
 800ddca:	4603      	mov	r3, r0
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d100      	bne.n	800ddd2 <memset+0xa>
 800ddd0:	4770      	bx	lr
 800ddd2:	f803 1b01 	strb.w	r1, [r3], #1
 800ddd6:	e7f9      	b.n	800ddcc <memset+0x4>

0800ddd8 <_init>:
 800ddd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddda:	bf00      	nop
 800dddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddde:	bc08      	pop	{r3}
 800dde0:	469e      	mov	lr, r3
 800dde2:	4770      	bx	lr

0800dde4 <_fini>:
 800dde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dde6:	bf00      	nop
 800dde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddea:	bc08      	pop	{r3}
 800ddec:	469e      	mov	lr, r3
 800ddee:	4770      	bx	lr
