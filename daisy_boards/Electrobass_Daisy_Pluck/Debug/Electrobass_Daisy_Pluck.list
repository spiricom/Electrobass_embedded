
Electrobass_Daisy_Pluck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  08009238  08009238  00019238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080099b8  080099b8  000199b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a8  20000000  080099bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00018cf0  200000a8  08009a64  000200a8  2**3
                  ALLOC
  7 ._user_heap_stack 00006000  20018d98  08009a64  00028d98  2**0
                  ALLOC
  8 .RAM_D1       000493e0  24000000  24000000  00030000  2**5
                  ALLOC
  9 .RAM_D2       00000050  30000000  30000000  00030000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 11 .debug_info   00041537  00000000  00000000  000200d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006d00  00000000  00000000  0006160d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00030e81  00000000  00000000  0006830d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002008  00000000  00000000  00099190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00006548  00000000  00000000  0009b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f57e  00000000  00000000  000a16e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000433ae  00000000  00000000  000e0c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00182bf5  00000000  00000000  0012400c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002a6c01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007258  00000000  00000000  002a6c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200000a8 	.word	0x200000a8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009220 	.word	0x08009220

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200000ac 	.word	0x200000ac
 80002d4:	08009220 	.word	0x08009220

080002d8 <MX_ADC1_Init>:

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002d8:	2300      	movs	r3, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002da:	4833      	ldr	r0, [pc, #204]	; (80003a8 <MX_ADC1_Init+0xd0>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002dc:	2201      	movs	r2, #1
  hadc1.Instance = ADC1;
 80002de:	4933      	ldr	r1, [pc, #204]	; (80003ac <MX_ADC1_Init+0xd4>)
{
 80002e0:	b510      	push	{r4, lr}
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002e2:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002e6:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 80002ea:	b08c      	sub	sp, #48	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80002ec:	2408      	movs	r4, #8
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 2;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ee:	7703      	strb	r3, [r0, #28]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002f0:	8282      	strh	r2, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80002f2:	2203      	movs	r2, #3
  ADC_MultiModeTypeDef multimode = {0};
 80002f4:	9300      	str	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002f6:	9304      	str	r3, [sp, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80002f8:	6104      	str	r4, [r0, #16]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80002fa:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80002fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000300:	e9c0 1300 	strd	r1, r3, [r0]
  hadc1.Init.NbrOfConversion = 2;
 8000304:	2102      	movs	r1, #2
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000306:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 2;
 800030a:	6181      	str	r1, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800030c:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8000310:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000314:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000318:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800031c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000320:	f002 fa80 	bl	8002824 <HAL_ADC_Init>
 8000324:	bb58      	cbnz	r0, 800037e <MX_ADC1_Init+0xa6>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
 8000326:	f44f 7340 	mov.w	r3, #768	; 0x300
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800032a:	4669      	mov	r1, sp
 800032c:	481e      	ldr	r0, [pc, #120]	; (80003a8 <MX_ADC1_Init+0xd0>)
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
 800032e:	9302      	str	r3, [sp, #8]
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000330:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8000398 <MX_ADC1_Init+0xc0>
 8000334:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000338:	f002 fbfe 	bl	8002b38 <HAL_ADCEx_MultiModeConfigChannel>
 800033c:	bb48      	cbnz	r0, 8000392 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800033e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000342:	2205      	movs	r2, #5
 8000344:	481a      	ldr	r0, [pc, #104]	; (80003b0 <MX_ADC1_Init+0xd8>)
 8000346:	2106      	movs	r1, #6
 8000348:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80003a0 <MX_ADC1_Init+0xc8>
 800034c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
 8000350:	2300      	movs	r3, #0
  sConfig.Channel = ADC_CHANNEL_10;
 8000352:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000356:	a904      	add	r1, sp, #16
 8000358:	4813      	ldr	r0, [pc, #76]	; (80003a8 <MX_ADC1_Init+0xd0>)
  sConfig.OffsetSignedSaturation = DISABLE;
 800035a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  sConfig.Channel = ADC_CHANNEL_10;
 800035e:	ed8d 7b08 	vstr	d7, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000362:	f001 fe9d 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000366:	b988      	cbnz	r0, 800038c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000368:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <MX_ADC1_Init+0xdc>)
 800036a:	230c      	movs	r3, #12
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800036c:	a904      	add	r1, sp, #16
 800036e:	480e      	ldr	r0, [pc, #56]	; (80003a8 <MX_ADC1_Init+0xd0>)
  sConfig.Channel = ADC_CHANNEL_15;
 8000370:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000374:	f001 fe94 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000378:	b920      	cbnz	r0, 8000384 <MX_ADC1_Init+0xac>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800037a:	b00c      	add	sp, #48	; 0x30
 800037c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800037e:	f001 faad 	bl	80018dc <Error_Handler>
 8000382:	e7d0      	b.n	8000326 <MX_ADC1_Init+0x4e>
    Error_Handler();
 8000384:	f001 faaa 	bl	80018dc <Error_Handler>
}
 8000388:	b00c      	add	sp, #48	; 0x30
 800038a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800038c:	f001 faa6 	bl	80018dc <Error_Handler>
 8000390:	e7ea      	b.n	8000368 <MX_ADC1_Init+0x90>
    Error_Handler();
 8000392:	f001 faa3 	bl	80018dc <Error_Handler>
 8000396:	e7d2      	b.n	800033e <MX_ADC1_Init+0x66>
 8000398:	00000006 	.word	0x00000006
 800039c:	00008000 	.word	0x00008000
 80003a0:	00000004 	.word	0x00000004
 80003a4:	00000000 	.word	0x00000000
 80003a8:	200000c8 	.word	0x200000c8
 80003ac:	40022000 	.word	0x40022000
 80003b0:	2a000400 	.word	0x2a000400
 80003b4:	3ef08000 	.word	0x3ef08000

080003b8 <MX_ADC2_Init>:

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003b8:	2300      	movs	r3, #0
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80003ba:	482d      	ldr	r0, [pc, #180]	; (8000470 <MX_ADC2_Init+0xb8>)
 80003bc:	492d      	ldr	r1, [pc, #180]	; (8000474 <MX_ADC2_Init+0xbc>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003be:	2201      	movs	r2, #1
{
 80003c0:	b510      	push	{r4, lr}
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003c2:	e9c0 1300 	strd	r1, r3, [r0]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003c6:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 80003ca:	b088      	sub	sp, #32
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80003cc:	2408      	movs	r4, #8
  hadc2.Init.ContinuousConvMode = ENABLE;
  hadc2.Init.NbrOfConversion = 2;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003ce:	7703      	strb	r3, [r0, #28]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003d0:	8281      	strh	r1, [r0, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003d2:	9300      	str	r3, [sp, #0]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80003d4:	6104      	str	r4, [r0, #16]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80003d6:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80003d8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003dc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hadc2.Init.NbrOfConversion = 2;
 80003e0:	2202      	movs	r2, #2
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003e2:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc2.Init.NbrOfConversion = 2;
 80003e6:	6182      	str	r2, [r0, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003e8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80003ec:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80003f0:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003f4:	f002 fa16 	bl	8002824 <HAL_ADC_Init>
 80003f8:	bb08      	cbnz	r0, 800043e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80003fe:	2205      	movs	r2, #5
 8000400:	a115      	add	r1, pc, #84	; (adr r1, 8000458 <MX_ADC2_Init+0xa0>)
 8000402:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000406:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8000460 <MX_ADC2_Init+0xa8>
 800040a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
 800040e:	2300      	movs	r3, #0
  sConfig.Channel = ADC_CHANNEL_7;
 8000410:	e9cd 0100 	strd	r0, r1, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000414:	4669      	mov	r1, sp
 8000416:	4816      	ldr	r0, [pc, #88]	; (8000470 <MX_ADC2_Init+0xb8>)
  sConfig.OffsetSignedSaturation = DISABLE;
 8000418:	f88d 3019 	strb.w	r3, [sp, #25]
  sConfig.Channel = ADC_CHANNEL_7;
 800041c:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000420:	f001 fe3e 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000424:	b990      	cbnz	r0, 800044c <MX_ADC2_Init+0x94>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000426:	4669      	mov	r1, sp
 8000428:	4811      	ldr	r0, [pc, #68]	; (8000470 <MX_ADC2_Init+0xb8>)
  sConfig.Channel = ADC_CHANNEL_5;
 800042a:	a30f      	add	r3, pc, #60	; (adr r3, 8000468 <MX_ADC2_Init+0xb0>)
 800042c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000430:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000434:	f001 fe34 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000438:	b920      	cbnz	r0, 8000444 <MX_ADC2_Init+0x8c>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800043a:	b008      	add	sp, #32
 800043c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800043e:	f001 fa4d 	bl	80018dc <Error_Handler>
 8000442:	e7da      	b.n	80003fa <MX_ADC2_Init+0x42>
    Error_Handler();
 8000444:	f001 fa4a 	bl	80018dc <Error_Handler>
}
 8000448:	b008      	add	sp, #32
 800044a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800044c:	f001 fa46 	bl	80018dc <Error_Handler>
 8000450:	e7e9      	b.n	8000426 <MX_ADC2_Init+0x6e>
 8000452:	bf00      	nop
 8000454:	f3af 8000 	nop.w
 8000458:	1d500080 	.word	0x1d500080
 800045c:	00000006 	.word	0x00000006
 8000460:	00000004 	.word	0x00000004
 8000464:	00000000 	.word	0x00000000
 8000468:	14f00020 	.word	0x14f00020
 800046c:	0000000c 	.word	0x0000000c
 8000470:	2000012c 	.word	0x2000012c
 8000474:	40022100 	.word	0x40022100

08000478 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000478:	495c      	ldr	r1, [pc, #368]	; (80005ec <HAL_ADC_MspInit+0x174>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 800047c:	6802      	ldr	r2, [r0, #0]
{
 800047e:	b570      	push	{r4, r5, r6, lr}
  if(adcHandle->Instance==ADC1)
 8000480:	428a      	cmp	r2, r1
{
 8000482:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000484:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000488:	9308      	str	r3, [sp, #32]
 800048a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 800048e:	d038      	beq.n	8000502 <HAL_ADC_MspInit+0x8a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000490:	4b57      	ldr	r3, [pc, #348]	; (80005f0 <HAL_ADC_MspInit+0x178>)
 8000492:	429a      	cmp	r2, r3
 8000494:	d001      	beq.n	800049a <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000496:	b00c      	add	sp, #48	; 0x30
 8000498:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800049a:	4a56      	ldr	r2, [pc, #344]	; (80005f4 <HAL_ADC_MspInit+0x17c>)
 800049c:	6813      	ldr	r3, [r2, #0]
 800049e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80004a0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80004a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80004a4:	f000 8090 	beq.w	80005c8 <HAL_ADC_MspInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b53      	ldr	r3, [pc, #332]	; (80005f8 <HAL_ADC_MspInit+0x180>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004aa:	2480      	movs	r4, #128	; 0x80
 80004ac:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ae:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	4851      	ldr	r0, [pc, #324]	; (80005fc <HAL_ADC_MspInit+0x184>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	f042 0201 	orr.w	r2, r2, #1
 80004ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80004be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80004c2:	f002 0201 	and.w	r2, r2, #1
 80004c6:	9204      	str	r2, [sp, #16]
 80004c8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80004ce:	f042 0202 	orr.w	r2, r2, #2
 80004d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80004d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004da:	f003 0302 	and.w	r3, r3, #2
 80004de:	9305      	str	r3, [sp, #20]
 80004e0:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f003 ffd7 	bl	8004498 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004ea:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004ee:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f0:	a906      	add	r1, sp, #24
 80004f2:	4843      	ldr	r0, [pc, #268]	; (8000600 <HAL_ADC_MspInit+0x188>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fa:	f003 ffcd 	bl	8004498 <HAL_GPIO_Init>
}
 80004fe:	b00c      	add	sp, #48	; 0x30
 8000500:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000502:	4a3c      	ldr	r2, [pc, #240]	; (80005f4 <HAL_ADC_MspInit+0x17c>)
 8000504:	4605      	mov	r5, r0
 8000506:	6813      	ldr	r3, [r2, #0]
 8000508:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800050a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800050c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800050e:	d04d      	beq.n	80005ac <HAL_ADC_MspInit+0x134>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000510:	4b39      	ldr	r3, [pc, #228]	; (80005f8 <HAL_ADC_MspInit+0x180>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000512:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2600      	movs	r6, #0
    hdma_adc1.Instance = DMA1_Stream0;
 8000516:	4c3b      	ldr	r4, [pc, #236]	; (8000604 <HAL_ADC_MspInit+0x18c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000518:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800051c:	f042 0204 	orr.w	r2, r2, #4
 8000520:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000524:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000528:	f002 0204 	and.w	r2, r2, #4
 800052c:	9201      	str	r2, [sp, #4]
 800052e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000534:	f042 0201 	orr.w	r2, r2, #1
 8000538:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800053c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000548:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054c:	482e      	ldr	r0, [pc, #184]	; (8000608 <HAL_ADC_MspInit+0x190>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800054e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000552:	f003 ffa1 	bl	8004498 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000556:	2208      	movs	r2, #8
 8000558:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	4828      	ldr	r0, [pc, #160]	; (80005fc <HAL_ADC_MspInit+0x184>)
 800055c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000560:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f003 ff98 	bl	8004498 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8000568:	4a28      	ldr	r2, [pc, #160]	; (800060c <HAL_ADC_MspInit+0x194>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800056a:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800056c:	4620      	mov	r0, r4
    hdma_adc1.Instance = DMA1_Stream0;
 800056e:	6022      	str	r2, [r4, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000570:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000574:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800057a:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800057c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000580:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000582:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000586:	60a6      	str	r6, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000588:	60e6      	str	r6, [r4, #12]
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800058a:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800058c:	62e6      	str	r6, [r4, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800058e:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000590:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000594:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000598:	2304      	movs	r3, #4
 800059a:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800059e:	f002 fde1 	bl	8003164 <HAL_DMA_Init>
 80005a2:	b9f8      	cbnz	r0, 80005e4 <HAL_ADC_MspInit+0x16c>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80005a4:	64ec      	str	r4, [r5, #76]	; 0x4c
 80005a6:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80005a8:	b00c      	add	sp, #48	; 0x30
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_ADC_MspInit+0x180>)
 80005ae:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80005b2:	f042 0220 	orr.w	r2, r2, #32
 80005b6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80005ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005be:	f003 0320 	and.w	r3, r3, #32
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	9b00      	ldr	r3, [sp, #0]
 80005c6:	e7a3      	b.n	8000510 <HAL_ADC_MspInit+0x98>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_ADC_MspInit+0x180>)
 80005ca:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80005ce:	f042 0220 	orr.w	r2, r2, #32
 80005d2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80005d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005da:	f003 0320 	and.w	r3, r3, #32
 80005de:	9303      	str	r3, [sp, #12]
 80005e0:	9b03      	ldr	r3, [sp, #12]
 80005e2:	e761      	b.n	80004a8 <HAL_ADC_MspInit+0x30>
      Error_Handler();
 80005e4:	f001 f97a 	bl	80018dc <Error_Handler>
 80005e8:	e7dc      	b.n	80005a4 <HAL_ADC_MspInit+0x12c>
 80005ea:	bf00      	nop
 80005ec:	40022000 	.word	0x40022000
 80005f0:	40022100 	.word	0x40022100
 80005f4:	200000c4 	.word	0x200000c4
 80005f8:	58024400 	.word	0x58024400
 80005fc:	58020000 	.word	0x58020000
 8000600:	58020400 	.word	0x58020400
 8000604:	20000190 	.word	0x20000190
 8000608:	58020800 	.word	0x58020800
 800060c:	40020010 	.word	0x40020010

08000610 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000610:	b500      	push	{lr}
 8000612:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000614:	2224      	movs	r2, #36	; 0x24
 8000616:	2100      	movs	r1, #0
 8000618:	4668      	mov	r0, sp
 800061a:	f007 fdcf 	bl	80081bc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800061e:	4818      	ldr	r0, [pc, #96]	; (8000680 <MX_DAC1_Init+0x70>)
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_DAC1_Init+0x74>)
 8000622:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000624:	f002 fbb4 	bl	8002d90 <HAL_DAC_Init>
 8000628:	b9b8      	cbnz	r0, 800065a <MX_DAC1_Init+0x4a>
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800062a:	2200      	movs	r2, #0
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800062c:	4669      	mov	r1, sp
 800062e:	4814      	ldr	r0, [pc, #80]	; (8000680 <MX_DAC1_Init+0x70>)
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000630:	9204      	str	r2, [sp, #16]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000632:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8000670 <MX_DAC1_Init+0x60>
 8000636:	ed8d 7b00 	vstr	d7, [sp]
 800063a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8000678 <MX_DAC1_Init+0x68>
 800063e:	ed8d 7b02 	vstr	d7, [sp, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000642:	f002 fc07 	bl	8002e54 <HAL_DAC_ConfigChannel>
 8000646:	b980      	cbnz	r0, 800066a <MX_DAC1_Init+0x5a>
  {
    Error_Handler();
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000648:	2210      	movs	r2, #16
 800064a:	4669      	mov	r1, sp
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <MX_DAC1_Init+0x70>)
 800064e:	f002 fc01 	bl	8002e54 <HAL_DAC_ConfigChannel>
 8000652:	b928      	cbnz	r0, 8000660 <MX_DAC1_Init+0x50>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000654:	b00b      	add	sp, #44	; 0x2c
 8000656:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800065a:	f001 f93f 	bl	80018dc <Error_Handler>
 800065e:	e7e4      	b.n	800062a <MX_DAC1_Init+0x1a>
    Error_Handler();
 8000660:	f001 f93c 	bl	80018dc <Error_Handler>
}
 8000664:	b00b      	add	sp, #44	; 0x2c
 8000666:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800066a:	f001 f937 	bl	80018dc <Error_Handler>
 800066e:	e7eb      	b.n	8000648 <MX_DAC1_Init+0x38>
	...
 800067c:	00000001 	.word	0x00000001
 8000680:	20000208 	.word	0x20000208
 8000684:	40007400 	.word	0x40007400

08000688 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC1)
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <HAL_DAC_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	2300      	movs	r3, #0
  if(dacHandle->Instance==DAC1)
 800068c:	6801      	ldr	r1, [r0, #0]
{
 800068e:	b500      	push	{lr}
  if(dacHandle->Instance==DAC1)
 8000690:	4291      	cmp	r1, r2
{
 8000692:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000698:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800069c:	9306      	str	r3, [sp, #24]
  if(dacHandle->Instance==DAC1)
 800069e:	d002      	beq.n	80006a6 <HAL_DAC_MspInit+0x1e>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80006a0:	b009      	add	sp, #36	; 0x24
 80006a2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC12_CLK_ENABLE();
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_DAC_MspInit+0x74>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	a902      	add	r1, sp, #8
 80006aa:	4815      	ldr	r0, [pc, #84]	; (8000700 <HAL_DAC_MspInit+0x78>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 80006ac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80006b0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80006b4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80006b8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80006bc:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80006c8:	f042 0201 	orr.w	r2, r2, #1
 80006cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006d8:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80006f0 <HAL_DAC_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006e0:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f003 fed8 	bl	8004498 <HAL_GPIO_Init>
}
 80006e8:	b009      	add	sp, #36	; 0x24
 80006ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80006ee:	bf00      	nop
 80006f0:	00000030 	.word	0x00000030
 80006f4:	00000003 	.word	0x00000003
 80006f8:	40007400 	.word	0x40007400
 80006fc:	58024400 	.word	0x58024400
 8000700:	58020000 	.word	0x58020000

08000704 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_DMA_Init+0x54>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	200b      	movs	r0, #11
 800070a:	4611      	mov	r1, r2
{
 800070c:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070e:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8000712:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000714:	f044 0401 	orr.w	r4, r4, #1
 8000718:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 800071c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000728:	f002 fa80 	bl	8002c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800072c:	200b      	movs	r0, #11
 800072e:	f002 fabb 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	200c      	movs	r0, #12
 8000736:	4611      	mov	r1, r2
 8000738:	f002 fa78 	bl	8002c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800073c:	200c      	movs	r0, #12
 800073e:	f002 fab3 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	200d      	movs	r0, #13
 8000746:	4611      	mov	r1, r2
 8000748:	f002 fa70 	bl	8002c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800074c:	200d      	movs	r0, #13

}
 800074e:	b002      	add	sp, #8
 8000750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000754:	f002 baa8 	b.w	8002ca8 <HAL_NVIC_EnableIRQ>
 8000758:	58024400 	.word	0x58024400
 800075c:	00000000 	.word	0x00000000

08000760 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000760:	4817      	ldr	r0, [pc, #92]	; (80007c0 <MX_FMC_Init+0x60>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000762:	2300      	movs	r3, #0
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000764:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <MX_FMC_Init+0x64>)
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000766:	2120      	movs	r1, #32
{
 8000768:	b500      	push	{lr}
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800076a:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800076e:	6002      	str	r2, [r0, #0]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000770:	2208      	movs	r2, #8
{
 8000772:	b089      	sub	sp, #36	; 0x24
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000774:	6101      	str	r1, [r0, #16]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000776:	60c2      	str	r2, [r0, #12]
  SdramTiming.ExitSelfRefreshDelay = 16;
  SdramTiming.SelfRefreshTime = 16;
  SdramTiming.RowCycleDelay = 16;
  SdramTiming.WriteRecoveryTime = 16;
  SdramTiming.RPDelay = 16;
  SdramTiming.RCDDelay = 16;
 8000778:	2210      	movs	r2, #16

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800077a:	4669      	mov	r1, sp
  SdramTiming.RCDDelay = 16;
 800077c:	9206      	str	r2, [sp, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800077e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000782:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000786:	2340      	movs	r3, #64	; 0x40
  SdramTiming.LoadToActiveDelay = 16;
 8000788:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80007b8 <MX_FMC_Init+0x58>
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800078c:	6143      	str	r3, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800078e:	2380      	movs	r3, #128	; 0x80
  SdramTiming.LoadToActiveDelay = 16;
 8000790:	ed8d 7b00 	vstr	d7, [sp]
 8000794:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000798:	ed8d 7b04 	vstr	d7, [sp, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800079c:	6183      	str	r3, [r0, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800079e:	f006 f8b1 	bl	8006904 <HAL_SDRAM_Init>
 80007a2:	b910      	cbnz	r0, 80007aa <MX_FMC_Init+0x4a>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80007a4:	b009      	add	sp, #36	; 0x24
 80007a6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 80007aa:	f001 f897 	bl	80018dc <Error_Handler>
}
 80007ae:	b009      	add	sp, #36	; 0x24
 80007b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000010 	.word	0x00000010
 80007bc:	00000010 	.word	0x00000010
 80007c0:	20000220 	.word	0x20000220
 80007c4:	52004140 	.word	0x52004140

080007c8 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 80007c8:	4842      	ldr	r0, [pc, #264]	; (80008d4 <HAL_SDRAM_MspInit+0x10c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007cc:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
 80007ce:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007d0:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80007d6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80007da:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 80007dc:	b109      	cbz	r1, 80007e2 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007de:	b038      	add	sp, #224	; 0xe0
 80007e0:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 80007e2:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e4:	22a0      	movs	r2, #160	; 0xa0
  FMC_Initialized = 1;
 80007e6:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e8:	a80f      	add	r0, sp, #60	; 0x3c
 80007ea:	f007 fce7 	bl	80081bc <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80007ee:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80007f2:	2101      	movs	r1, #1
 80007f4:	220c      	movs	r2, #12
 80007f6:	2308      	movs	r3, #8
 80007f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80007fc:	2002      	movs	r0, #2
 80007fe:	2102      	movs	r1, #2
 8000800:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000804:	22c0      	movs	r2, #192	; 0xc0
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000806:	2302      	movs	r3, #2
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000808:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800080c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800080e:	920e      	str	r2, [sp, #56]	; 0x38
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000810:	9319      	str	r3, [sp, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000812:	f004 ff39 	bl	8005688 <HAL_RCCEx_PeriphCLKConfig>
 8000816:	2800      	cmp	r0, #0
 8000818:	d159      	bne.n	80008ce <HAL_SDRAM_MspInit+0x106>
  __HAL_RCC_FMC_CLK_ENABLE();
 800081a:	4b2f      	ldr	r3, [pc, #188]	; (80008d8 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
 800081c:	f64f 7083 	movw	r0, #65411	; 0xff83
 8000820:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000822:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8000824:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
 8000828:	2600      	movs	r6, #0
 800082a:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 800082c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000830:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000834:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000838:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 800083a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
 800083e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000842:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000844:	a902      	add	r1, sp, #8
 8000846:	4825      	ldr	r0, [pc, #148]	; (80008dc <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000848:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
 800084a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800084e:	f003 fe23 	bl	8004498 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000852:	f248 1237 	movw	r2, #33079	; 0x8137
 8000856:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000858:	a902      	add	r1, sp, #8
 800085a:	4821      	ldr	r0, [pc, #132]	; (80008e0 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800085c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800085e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000862:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000866:	f003 fe17 	bl	8004498 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800086a:	f24c 7203 	movw	r2, #50947	; 0xc703
 800086e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000870:	a902      	add	r1, sp, #8
 8000872:	481c      	ldr	r0, [pc, #112]	; (80008e4 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000874:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000876:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800087a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087e:	f003 fe0b 	bl	8004498 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 8000882:	f240 62ff 	movw	r2, #1791	; 0x6ff
 8000886:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000888:	a902      	add	r1, sp, #8
 800088a:	4817      	ldr	r0, [pc, #92]	; (80008e8 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800088c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 800088e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000892:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000896:	f003 fdff 	bl	8004498 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 800089a:	f64f 722c 	movw	r2, #65324	; 0xff2c
 800089e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008a0:	a902      	add	r1, sp, #8
 80008a2:	4812      	ldr	r0, [pc, #72]	; (80008ec <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008a4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 80008a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80008aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008ae:	f003 fdf3 	bl	8004498 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 80008b2:	f64f 023f 	movw	r2, #63551	; 0xf83f
 80008b6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008b8:	a902      	add	r1, sp, #8
 80008ba:	480d      	ldr	r0, [pc, #52]	; (80008f0 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008bc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 80008be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80008c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008c6:	f003 fde7 	bl	8004498 <HAL_GPIO_Init>
}
 80008ca:	b038      	add	sp, #224	; 0xe0
 80008cc:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 80008ce:	f001 f805 	bl	80018dc <Error_Handler>
 80008d2:	e7a2      	b.n	800081a <HAL_SDRAM_MspInit+0x52>
 80008d4:	2000021c 	.word	0x2000021c
 80008d8:	58024400 	.word	0x58024400
 80008dc:	58021000 	.word	0x58021000
 80008e0:	58021800 	.word	0x58021800
 80008e4:	58020c00 	.word	0x58020c00
 80008e8:	58022000 	.word	0x58022000
 80008ec:	58021c00 	.word	0x58021c00
 80008f0:	58021400 	.word	0x58021400

080008f4 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80008f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f8:	4b73      	ldr	r3, [pc, #460]	; (8000ac8 <MX_GPIO_Init+0x1d4>)
{
 80008fa:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	2400      	movs	r4, #0
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 80008fe:	4e73      	ldr	r6, [pc, #460]	; (8000acc <MX_GPIO_Init+0x1d8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000900:	4d73      	ldr	r5, [pc, #460]	; (8000ad0 <MX_GPIO_Init+0x1dc>)
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8000902:	f44f 7100 	mov.w	r1, #512	; 0x200
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8000908:	4630      	mov	r0, r6

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800090a:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8000ad4 <MX_GPIO_Init+0x1e0>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800090e:	2700      	movs	r7, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000910:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000ad8 <MX_GPIO_Init+0x1e4>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000914:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000adc <MX_GPIO_Init+0x1e8>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800091c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000920:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000924:	f042 0210 	orr.w	r2, r2, #16
 8000928:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800092c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000930:	f002 0210 	and.w	r2, r2, #16
 8000934:	9201      	str	r2, [sp, #4]
 8000936:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000938:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800093c:	f042 0202 	orr.w	r2, r2, #2
 8000940:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000944:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000948:	f002 0202 	and.w	r2, r2, #2
 800094c:	9202      	str	r2, [sp, #8]
 800094e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000950:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000954:	f042 0204 	orr.w	r2, r2, #4
 8000958:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800095c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000960:	f002 0204 	and.w	r2, r2, #4
 8000964:	9203      	str	r2, [sp, #12]
 8000966:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800096c:	f042 0201 	orr.w	r2, r2, #1
 8000970:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000974:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000978:	f002 0201 	and.w	r2, r2, #1
 800097c:	9204      	str	r2, [sp, #16]
 800097e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000980:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000988:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800098c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000990:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000994:	9205      	str	r2, [sp, #20]
 8000996:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000998:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800099c:	f042 0208 	orr.w	r2, r2, #8
 80009a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009a8:	f002 0208 	and.w	r2, r2, #8
 80009ac:	9206      	str	r2, [sp, #24]
 80009ae:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009c0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80009c4:	9207      	str	r2, [sp, #28]
 80009c6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009d8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80009dc:	9208      	str	r2, [sp, #32]
 80009de:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009e4:	f042 0220 	orr.w	r2, r2, #32
 80009e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 80009ec:	4622      	mov	r2, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	f003 0320 	and.w	r3, r3, #32
 80009f6:	9309      	str	r3, [sp, #36]	; 0x24
 80009f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 80009fa:	f003 fe8d 	bl	8004718 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80009fe:	4622      	mov	r2, r4
 8000a00:	4628      	mov	r0, r5
 8000a02:	2180      	movs	r1, #128	; 0x80
 8000a04:	f003 fe88 	bl	8004718 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 8000a08:	4622      	mov	r2, r4
 8000a0a:	4650      	mov	r0, sl
 8000a0c:	2107      	movs	r1, #7
 8000a0e:	f003 fe83 	bl	8004718 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a12:	4622      	mov	r2, r4
 8000a14:	4648      	mov	r0, r9
 8000a16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1a:	f003 fe7d 	bl	8004718 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a1e:	4622      	mov	r2, r4
 8000a20:	4640      	mov	r0, r8
 8000a22:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000a26:	f003 fe77 	bl	8004718 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a2e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a32:	a90a      	add	r1, sp, #40	; 0x28
 8000a34:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	f003 fd2c 	bl	8004498 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a40:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	2600      	movs	r6, #0
 8000a48:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a4a:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a4c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000a50:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a54:	f003 fd20 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a60:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000a64:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a68:	f003 fd16 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2;
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	4650      	mov	r0, sl
 8000a72:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2;
 8000a74:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000a78:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f003 fd0c 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a84:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a86:	4648      	mov	r0, r9
 8000a88:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a8a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000a8e:	2202      	movs	r2, #2
 8000a90:	2300      	movs	r3, #0
 8000a92:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a96:	f003 fcff 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	4640      	mov	r0, r8
 8000aa2:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000aa4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000aa8:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f003 fcf4 	bl	8004498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ab0:	4622      	mov	r2, r4
 8000ab2:	4621      	mov	r1, r4
 8000ab4:	2028      	movs	r0, #40	; 0x28
 8000ab6:	f002 f8b9 	bl	8002c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aba:	2028      	movs	r0, #40	; 0x28
 8000abc:	f002 f8f4 	bl	8002ca8 <HAL_NVIC_EnableIRQ>

}
 8000ac0:	b010      	add	sp, #64	; 0x40
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	bf00      	nop
 8000ac8:	58024400 	.word	0x58024400
 8000acc:	58021800 	.word	0x58021800
 8000ad0:	58020800 	.word	0x58020800
 8000ad4:	58020000 	.word	0x58020000
 8000ad8:	58020c00 	.word	0x58020c00
 8000adc:	58020400 	.word	0x58020400

08000ae0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ae0:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae2:	4817      	ldr	r0, [pc, #92]	; (8000b40 <MX_I2C1_Init+0x60>)
  hi2c1.Init.Timing = 0x30B00F2D;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	4917      	ldr	r1, [pc, #92]	; (8000b44 <MX_I2C1_Init+0x64>)
 8000ae8:	2401      	movs	r4, #1
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <MX_I2C1_Init+0x68>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aec:	6203      	str	r3, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aee:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c1.Init.OwnAddress2 = 0;
 8000af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000afa:	f003 fe1f 	bl	800473c <HAL_I2C_Init>
 8000afe:	b950      	cbnz	r0, 8000b16 <MX_I2C1_Init+0x36>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	480f      	ldr	r0, [pc, #60]	; (8000b40 <MX_I2C1_Init+0x60>)
 8000b04:	f003 fe70 	bl	80047e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b08:	b968      	cbnz	r0, 8000b26 <MX_I2C1_Init+0x46>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_I2C1_Init+0x60>)
 8000b0e:	f003 fe95 	bl	800483c <HAL_I2CEx_ConfigDigitalFilter>
 8000b12:	b980      	cbnz	r0, 8000b36 <MX_I2C1_Init+0x56>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b14:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000b16:	f000 fee1 	bl	80018dc <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4808      	ldr	r0, [pc, #32]	; (8000b40 <MX_I2C1_Init+0x60>)
 8000b1e:	f003 fe63 	bl	80047e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	d0f1      	beq.n	8000b0a <MX_I2C1_Init+0x2a>
    Error_Handler();
 8000b26:	f000 fed9 	bl	80018dc <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_I2C1_Init+0x60>)
 8000b2e:	f003 fe85 	bl	800483c <HAL_I2CEx_ConfigDigitalFilter>
 8000b32:	2800      	cmp	r0, #0
 8000b34:	d0ee      	beq.n	8000b14 <MX_I2C1_Init+0x34>
}
 8000b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000b3a:	f000 becf 	b.w	80018dc <Error_Handler>
 8000b3e:	bf00      	nop
 8000b40:	20000254 	.word	0x20000254
 8000b44:	40005400 	.word	0x40005400
 8000b48:	30b00f2d 	.word	0x30b00f2d
 8000b4c:	00000000 	.word	0x00000000

08000b50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b50:	b510      	push	{r4, lr}
 8000b52:	b0b6      	sub	sp, #216	; 0xd8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	2100      	movs	r1, #0
{
 8000b56:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b58:	22bc      	movs	r2, #188	; 0xbc
 8000b5a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	9106      	str	r1, [sp, #24]
 8000b5e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000b62:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b66:	f007 fb29 	bl	80081bc <memset>
  if(i2cHandle->Instance==I2C1)
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <HAL_I2C_MspInit+0x98>)
 8000b6c:	6822      	ldr	r2, [r4, #0]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d001      	beq.n	8000b76 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b72:	b036      	add	sp, #216	; 0xd8
 8000b74:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b76:	2308      	movs	r3, #8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b78:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b7a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7c:	f004 fd84 	bl	8005688 <HAL_RCCEx_PeriphCLKConfig>
 8000b80:	bb40      	cbnz	r0, 8000bd4 <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4c1a      	ldr	r4, [pc, #104]	; (8000bec <HAL_I2C_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b84:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	a902      	add	r1, sp, #8
 8000b88:	4819      	ldr	r0, [pc, #100]	; (8000bf0 <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000b96:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9a:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b9c:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ba2:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8000be0 <HAL_I2C_MspInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000baa:	2300      	movs	r3, #0
 8000bac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000bb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f003 fc70 	bl	8004498 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc0:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8000bc4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	9b01      	ldr	r3, [sp, #4]
}
 8000bd0:	b036      	add	sp, #216	; 0xd8
 8000bd2:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000bd4:	f000 fe82 	bl	80018dc <Error_Handler>
 8000bd8:	e7d3      	b.n	8000b82 <HAL_I2C_MspInit+0x32>
 8000bda:	bf00      	nop
 8000bdc:	f3af 8000 	nop.w
 8000be0:	00000300 	.word	0x00000300
 8000be4:	00000012 	.word	0x00000012
 8000be8:	40005400 	.word	0x40005400
 8000bec:	58024400 	.word	0x58024400
 8000bf0:	58020400 	.word	0x58020400

08000bf4 <randomNumber>:


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
}

float randomNumber(void) {
 8000bf4:	b500      	push	{lr}
 8000bf6:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8000bf8:	4807      	ldr	r0, [pc, #28]	; (8000c18 <randomNumber+0x24>)
 8000bfa:	a901      	add	r1, sp, #4
 8000bfc:	f005 fe4c 	bl	8006898 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8000c00:	eddd 7a01 	vldr	s15, [sp, #4]
 8000c04:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000c1c <randomNumber+0x28>
 8000c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 8000c0c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000c10:	b003      	add	sp, #12
 8000c12:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c16:	bf00      	nop
 8000c18:	20018bbc 	.word	0x20018bbc
 8000c1c:	2f80000d 	.word	0x2f80000d

08000c20 <SystemClock_Config>:
{
 8000c20:	b500      	push	{lr}
 8000c22:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c24:	224c      	movs	r2, #76	; 0x4c
 8000c26:	2100      	movs	r1, #0
 8000c28:	a80a      	add	r0, sp, #40	; 0x28
 8000c2a:	f007 fac7 	bl	80081bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2e:	2220      	movs	r2, #32
 8000c30:	2100      	movs	r1, #0
 8000c32:	a802      	add	r0, sp, #8
 8000c34:	f007 fac2 	bl	80081bc <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f003 fead 	bl	8004998 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c3e:	4a32      	ldr	r2, [pc, #200]	; (8000d08 <SystemClock_Config+0xe8>)
 8000c40:	2100      	movs	r1, #0
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <SystemClock_Config+0xec>)
 8000c44:	9101      	str	r1, [sp, #4]
 8000c46:	6991      	ldr	r1, [r2, #24]
 8000c48:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000c4c:	6191      	str	r1, [r2, #24]
 8000c4e:	6991      	ldr	r1, [r2, #24]
 8000c50:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8000c54:	9101      	str	r1, [sp, #4]
 8000c56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c58:	f041 0101 	orr.w	r1, r1, #1
 8000c5c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c68:	6993      	ldr	r3, [r2, #24]
 8000c6a:	049b      	lsls	r3, r3, #18
 8000c6c:	d5fc      	bpl.n	8000c68 <SystemClock_Config+0x48>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000c6e:	4a28      	ldr	r2, [pc, #160]	; (8000d10 <SystemClock_Config+0xf0>)
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c70:	2101      	movs	r1, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c72:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000c74:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000c76:	f023 0303 	bic.w	r3, r3, #3
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c82:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c84:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c86:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c88:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000c8a:	213c      	movs	r1, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c8c:	921b      	str	r2, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000c8e:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c90:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c92:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000c96:	2306      	movs	r3, #6
 8000c98:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000c9a:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000c9c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8000cf0 <SystemClock_Config+0xd0>
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000ca0:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ca2:	230c      	movs	r3, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000ca4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ca8:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000caa:	f003 ff1d 	bl	8004ae8 <HAL_RCC_OscConfig>
 8000cae:	b108      	cbz	r0, 8000cb4 <SystemClock_Config+0x94>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8000cf8 <SystemClock_Config+0xd8>
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cbc:	a802      	add	r0, sp, #8
 8000cbe:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000cc4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8000d00 <SystemClock_Config+0xe0>
 8000cc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000ccc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd0:	2340      	movs	r3, #64	; 0x40
 8000cd2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000cd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cda:	f004 fa79 	bl	80051d0 <HAL_RCC_ClockConfig>
 8000cde:	b108      	cbz	r0, 8000ce4 <SystemClock_Config+0xc4>
 8000ce0:	b672      	cpsid	i
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <SystemClock_Config+0xc2>
}
 8000ce4:	b01f      	add	sp, #124	; 0x7c
 8000ce6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cea:	bf00      	nop
 8000cec:	f3af 8000 	nop.w
 8000cf0:	00000021 	.word	0x00000021
 8000cf4:	00010000 	.word	0x00010000
 8000cf8:	0000003f 	.word	0x0000003f
 8000cfc:	00000003 	.word	0x00000003
 8000d00:	00000040 	.word	0x00000040
 8000d04:	00000040 	.word	0x00000040
 8000d08:	58024800 	.word	0x58024800
 8000d0c:	58000400 	.word	0x58000400
 8000d10:	58024400 	.word	0x58024400

08000d14 <PeriphCommonClock_Config>:
{
 8000d14:	b510      	push	{r4, lr}
 8000d16:	b0b0      	sub	sp, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d18:	22b8      	movs	r2, #184	; 0xb8
 8000d1a:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
 8000d1c:	2408      	movs	r4, #8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1e:	a802      	add	r0, sp, #8
 8000d20:	f007 fa4c 	bl	80081bc <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000d28:	2101      	movs	r1, #1
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8000d2a:	220c      	movs	r2, #12
  PeriphClkInitStruct.PLL3.PLL3P = 4;
 8000d2c:	2304      	movs	r3, #4
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d2e:	9001      	str	r0, [sp, #4]
  PeriphClkInitStruct.PLL3.PLL3R = 16;
 8000d30:	2010      	movs	r0, #16
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000d32:	910a      	str	r1, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000d34:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  PeriphClkInitStruct.PLL3.PLL3P = 4;
 8000d38:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
 8000d3c:	f640 1238 	movw	r2, #2360	; 0x938
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000d44:	910f      	str	r1, [sp, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
 8000d46:	9211      	str	r2, [sp, #68]	; 0x44
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000d48:	9329      	str	r3, [sp, #164]	; 0xa4
  PeriphClkInitStruct.PLL3.PLL3R = 16;
 8000d4a:	e9cd 400d 	strd	r4, r0, [sp, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4e:	a801      	add	r0, sp, #4
 8000d50:	f004 fc9a 	bl	8005688 <HAL_RCCEx_PeriphCLKConfig>
 8000d54:	b108      	cbz	r0, 8000d5a <PeriphCommonClock_Config+0x46>
 8000d56:	b672      	cpsid	i
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <PeriphCommonClock_Config+0x44>
}
 8000d5a:	b030      	add	sp, #192	; 0xc0
 8000d5c:	bd10      	pop	{r4, pc}
 8000d5e:	bf00      	nop

08000d60 <MPU_Conf>:
 {
 8000d60:	b510      	push	{r4, lr}
 8000d62:	b084      	sub	sp, #16
	  MPU_InitStruct.BaseAddress = 0x38000000;
 8000d64:	f04f 5460 	mov.w	r4, #939524096	; 0x38000000
	  HAL_MPU_Disable();
 8000d68:	f001 ffc2 	bl	8002cf0 <HAL_MPU_Disable>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d6c:	2301      	movs	r3, #1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8000d6e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000d72:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <MPU_Conf+0x48>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d74:	4668      	mov	r0, sp
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d76:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8000d7a:	9101      	str	r1, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000d7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d80:	f001 ffd4 	bl	8002d2c <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d84:	f240 1101 	movw	r1, #257	; 0x101
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000d88:	4a08      	ldr	r2, [pc, #32]	; (8000dac <MPU_Conf+0x4c>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d8a:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MPU_Conf+0x50>)
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d8e:	f8ad 1000 	strh.w	r1, [sp]
	  MPU_InitStruct.BaseAddress = 0x38000000;
 8000d92:	9401      	str	r4, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000d94:	e9cd 2302 	strd	r2, r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d98:	f001 ffc8 	bl	8002d2c <HAL_MPU_ConfigRegion>
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d9c:	2004      	movs	r0, #4
 8000d9e:	f001 ffb5 	bl	8002d0c <HAL_MPU_Enable>
}
 8000da2:	b004      	add	sp, #16
 8000da4:	bd10      	pop	{r4, pc}
 8000da6:	bf00      	nop
 8000da8:	03010011 	.word	0x03010011
 8000dac:	0301000f 	.word	0x0301000f
 8000db0:	01010100 	.word	0x01010100

08000db4 <main>:
{
 8000db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db8:	ed2d 8b06 	vpush	{d8-d10}
 8000dbc:	b083      	sub	sp, #12
  MPU_Conf();
 8000dbe:	f7ff ffcf 	bl	8000d60 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000dc2:	4a7e      	ldr	r2, [pc, #504]	; (8000fbc <main+0x208>)
 8000dc4:	6953      	ldr	r3, [r2, #20]
 8000dc6:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8000dca:	d111      	bne.n	8000df0 <main+0x3c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dcc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dd0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dd4:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ddc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000de0:	6953      	ldr	r3, [r2, #20]
 8000de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000de8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dec:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000df0:	4872      	ldr	r0, [pc, #456]	; (8000fbc <main+0x208>)
 8000df2:	6943      	ldr	r3, [r0, #20]
 8000df4:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000df8:	d124      	bne.n	8000e44 <main+0x90>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000dfa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000dfe:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e02:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e06:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e0a:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e0e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000e12:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e14:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e18:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e1a:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e1e:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e20:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	d1f8      	bne.n	8000e1a <main+0x66>
    } while(sets-- != 0U);
 8000e28:	3c20      	subs	r4, #32
 8000e2a:	f114 0f20 	cmn.w	r4, #32
 8000e2e:	d1f1      	bne.n	8000e14 <main+0x60>
 8000e30:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e34:	6943      	ldr	r3, [r0, #20]
 8000e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3a:	6143      	str	r3, [r0, #20]
 8000e3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e40:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000e44:	f001 f886 	bl	8001f54 <HAL_Init>
  SystemClock_Config();
 8000e48:	f7ff feea 	bl	8000c20 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000e4c:	f7ff ff62 	bl	8000d14 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8000e50:	f7ff fd50 	bl	80008f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e54:	f7ff fc56 	bl	8000704 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e58:	f7ff fa3e 	bl	80002d8 <MX_ADC1_Init>
  MX_FMC_Init();
 8000e5c:	f7ff fc80 	bl	8000760 <MX_FMC_Init>
  MX_OPAMP1_Init();
 8000e60:	f000 fd3e 	bl	80018e0 <MX_OPAMP1_Init>
  MX_SPI1_Init();
 8000e64:	f000 fde8 	bl	8001a38 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000e68:	f000 ff76 	bl	8001d58 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000e6c:	f7ff fe38 	bl	8000ae0 <MX_I2C1_Init>
  MX_RNG_Init();
 8000e70:	f000 fda4 	bl	80019bc <MX_RNG_Init>
  MX_ADC2_Init();
 8000e74:	f7ff faa0 	bl	80003b8 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000e78:	f7ff fbca 	bl	8000610 <MX_DAC1_Init>
  return __builtin_arm_get_fpscr();
 8000e7c:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8000e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 8000e84:	eee1 3a10 	vmsr	fpscr, r3
  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 0)
 8000e88:	4c4d      	ldr	r4, [pc, #308]	; (8000fc0 <main+0x20c>)
 8000e8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f003 fc3c 	bl	800470c <HAL_GPIO_ReadPin>
 8000e94:	2800      	cmp	r0, #0
 8000e96:	d0f8      	beq.n	8000e8a <main+0xd6>
 8000e98:	4a4a      	ldr	r2, [pc, #296]	; (8000fc4 <main+0x210>)
  for (int i = 0; i < 32; i++)
 8000e9a:	2300      	movs	r3, #0
	  SPI_TX[i] = i;
 8000e9c:	f802 3f01 	strb.w	r3, [r2, #1]!
  for (int i = 0; i < 32; i++)
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	2b20      	cmp	r3, #32
 8000ea4:	d1fa      	bne.n	8000e9c <main+0xe8>
	  SPI_TX[i] = 0;
 8000ea6:	4948      	ldr	r1, [pc, #288]	; (8000fc8 <main+0x214>)
 8000ea8:	2600      	movs	r6, #0
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_TX, SPI_RX, 32);
 8000eaa:	4848      	ldr	r0, [pc, #288]	; (8000fcc <main+0x218>)
 8000eac:	f101 0220 	add.w	r2, r1, #32
	  SPI_TX[i] = 0;
 8000eb0:	614e      	str	r6, [r1, #20]
 8000eb2:	610e      	str	r6, [r1, #16]
  LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8000eb4:	9601      	str	r6, [sp, #4]
  	tThreshold_init(&threshold[i],0.01f * (float)storedMaximums[i], 0.05f * (float)storedMaximums[i], &leaf);
 8000eb6:	eddf aa46 	vldr	s21, [pc, #280]	; 8000fd0 <main+0x21c>
 8000eba:	ed9f aa46 	vldr	s20, [pc, #280]	; 8000fd4 <main+0x220>
  	storedMaxFloats[i] = (65535.0f / storedMaximums[i]);
 8000ebe:	eddf 9a46 	vldr	s19, [pc, #280]	; 8000fd8 <main+0x224>
 8000ec2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8001020 <main+0x26c>
 8000ec6:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8001024 <main+0x270>
 8000eca:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8001028 <main+0x274>
 8000ece:	4f43      	ldr	r7, [pc, #268]	; (8000fdc <main+0x228>)
 8000ed0:	4d43      	ldr	r5, [pc, #268]	; (8000fe0 <main+0x22c>)
 8000ed2:	4c44      	ldr	r4, [pc, #272]	; (8000fe4 <main+0x230>)
  	tThreshold_init(&threshold[i],0.01f * (float)storedMaximums[i], 0.05f * (float)storedMaximums[i], &leaf);
 8000ed4:	f8df b128 	ldr.w	fp, [pc, #296]	; 8001000 <main+0x24c>
  	tSlide_init(&fastSlide[i],1.0f,500.0f, &leaf); //500
 8000ed8:	ed9f 9a43 	vldr	s18, [pc, #268]	; 8000fe8 <main+0x234>
  		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 1000.0f, 0.2f, &leaf); //1000
 8000edc:	eddf 8a43 	vldr	s17, [pc, #268]	; 8000fec <main+0x238>
	  SPI_TX[i] = 0;
 8000ee0:	e9c1 6600 	strd	r6, r6, [r1]
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_TX, SPI_RX, 32);
 8000ee4:	f005 fe80 	bl	8006be8 <HAL_SPI_TransmitReceive_DMA>
  LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8000ee8:	4b41      	ldr	r3, [pc, #260]	; (8000ff0 <main+0x23c>)
 8000eea:	4a42      	ldr	r2, [pc, #264]	; (8000ff4 <main+0x240>)
 8000eec:	4942      	ldr	r1, [pc, #264]	; (8000ff8 <main+0x244>)
 8000eee:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8000ffc <main+0x248>
 8000ef2:	4843      	ldr	r0, [pc, #268]	; (8001000 <main+0x24c>)
 8000ef4:	f007 f904 	bl	8008100 <LEAF_init>
  for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 8000ef8:	4b42      	ldr	r3, [pc, #264]	; (8001004 <main+0x250>)
 8000efa:	9300      	str	r3, [sp, #0]
  	tThreshold_init(&threshold[i],0.01f * (float)storedMaximums[i], 0.05f * (float)storedMaximums[i], &leaf);
 8000efc:	edda 7a00 	vldr	s15, [sl]
 8000f00:	4648      	mov	r0, r9
 8000f02:	4659      	mov	r1, fp
  	storedMaxFloats[i] = (65535.0f / storedMaximums[i]);
 8000f04:	2600      	movs	r6, #0
  	tThreshold_init(&threshold[i],0.01f * (float)storedMaximums[i], 0.05f * (float)storedMaximums[i], &leaf);
 8000f06:	eef8 0ae7 	vcvt.f32.s32	s1, s15
  		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 1000.0f, 0.2f, &leaf); //1000
 8000f0a:	ed9f 8a3f 	vldr	s16, [pc, #252]	; 8001008 <main+0x254>
  	tThreshold_init(&threshold[i],0.01f * (float)storedMaximums[i], 0.05f * (float)storedMaximums[i], &leaf);
 8000f0e:	ee20 0a8a 	vmul.f32	s0, s1, s20
 8000f12:	ee60 0aaa 	vmul.f32	s1, s1, s21
 8000f16:	f006 fd2d 	bl	8007974 <tThreshold_init>
  	tSlide_init(&fastSlide[i],1.0f,500.0f, &leaf); //500
 8000f1a:	eef0 0a49 	vmov.f32	s1, s18
 8000f1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f22:	4659      	mov	r1, fp
 8000f24:	4640      	mov	r0, r8
 8000f26:	f006 fd57 	bl	80079d8 <tSlide_init>
  	tSlide_init(&slowSlide[i],1.0f,500.0f, &leaf); //500 //1000
 8000f2a:	eef0 0a49 	vmov.f32	s1, s18
 8000f2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f32:	4659      	mov	r1, fp
 8000f34:	4638      	mov	r0, r7
 8000f36:	f006 fd4f 	bl	80079d8 <tSlide_init>
  	storedMaxFloats[i] = (65535.0f / storedMaximums[i]);
 8000f3a:	ecfa 7a01 	vldmia	sl!, {s15}
 8000f3e:	9b00      	ldr	r3, [sp, #0]
 8000f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f44:	ee89 7aa7 	vdiv.f32	s14, s19, s15
 8000f48:	eca3 7a01 	vstmia	r3!, {s14}
 8000f4c:	9300      	str	r3, [sp, #0]
  		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 1000.0f, 0.2f, &leaf); //1000
 8000f4e:	1970      	adds	r0, r6, r5
 8000f50:	eef0 0a68 	vmov.f32	s1, s17
 8000f54:	eeb0 0a48 	vmov.f32	s0, s16
 8000f58:	465a      	mov	r2, fp
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	f006 ff2a 	bl	8007db4 <tVZFilter_init>
  		tHighpass_init(&opticalHighpass[i][j], 30.0f, &leaf); //100
 8000f60:	1930      	adds	r0, r6, r4
  	for (int j = 0; j < FILTER_ORDER; j++)
 8000f62:	3604      	adds	r6, #4
  		tHighpass_init(&opticalHighpass[i][j], 30.0f, &leaf); //100
 8000f64:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8000f68:	4659      	mov	r1, fp
 8000f6a:	f006 fd8d 	bl	8007a88 <tHighpass_init>
  	for (int j = 0; j < FILTER_ORDER; j++)
 8000f6e:	2e0c      	cmp	r6, #12
 8000f70:	d1ed      	bne.n	8000f4e <main+0x19a>
  for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 8000f72:	9b01      	ldr	r3, [sp, #4]
 8000f74:	f109 0904 	add.w	r9, r9, #4
 8000f78:	f108 0804 	add.w	r8, r8, #4
 8000f7c:	3704      	adds	r7, #4
 8000f7e:	3303      	adds	r3, #3
 8000f80:	350c      	adds	r5, #12
 8000f82:	340c      	adds	r4, #12
 8000f84:	2b0c      	cmp	r3, #12
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	d1b8      	bne.n	8000efc <main+0x148>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	481f      	ldr	r0, [pc, #124]	; (800100c <main+0x258>)
 8000f8e:	f001 ff15 	bl	8002dbc <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000f92:	2110      	movs	r1, #16
 8000f94:	481d      	ldr	r0, [pc, #116]	; (800100c <main+0x258>)
 8000f96:	f001 ff11 	bl	8002dbc <HAL_DAC_Start>
  LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 8000f9a:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000f9e:	481c      	ldr	r0, [pc, #112]	; (8001010 <main+0x25c>)
 8000fa0:	f006 ff8c 	bl	8007ebc <LEAF_generate_atodb>
  HAL_ADC_Start(&hadc2);
 8000fa4:	481b      	ldr	r0, [pc, #108]	; (8001014 <main+0x260>)
 8000fa6:	f001 fb01 	bl	80025ac <HAL_ADC_Start>
  HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t*)&ADC_values,2 * ADC_BUFFER_SIZE);
 8000faa:	2204      	movs	r2, #4
 8000fac:	491a      	ldr	r1, [pc, #104]	; (8001018 <main+0x264>)
 8000fae:	481b      	ldr	r0, [pc, #108]	; (800101c <main+0x268>)
 8000fb0:	f001 fd46 	bl	8002a40 <HAL_ADCEx_MultiModeStart_DMA>
	  HAL_Delay(100);
 8000fb4:	2064      	movs	r0, #100	; 0x64
 8000fb6:	f001 f80f 	bl	8001fd8 <HAL_Delay>
  while (1)
 8000fba:	e7fb      	b.n	8000fb4 <main+0x200>
 8000fbc:	e000ed00 	.word	0xe000ed00
 8000fc0:	58020800 	.word	0x58020800
 8000fc4:	2fffffff 	.word	0x2fffffff
 8000fc8:	30000000 	.word	0x30000000
 8000fcc:	20018cc0 	.word	0x20018cc0
 8000fd0:	3d4ccccd 	.word	0x3d4ccccd
 8000fd4:	3c23d70a 	.word	0x3c23d70a
 8000fd8:	477fff00 	.word	0x477fff00
 8000fdc:	20018abc 	.word	0x20018abc
 8000fe0:	20018a5c 	.word	0x20018a5c
 8000fe4:	20018a2c 	.word	0x20018a2c
 8000fe8:	43fa0000 	.word	0x43fa0000
 8000fec:	3e4ccccd 	.word	0x3e4ccccd
 8000ff0:	08000bf5 	.word	0x08000bf5
 8000ff4:	000493e0 	.word	0x000493e0
 8000ff8:	24000000 	.word	0x24000000
 8000ffc:	473b8000 	.word	0x473b8000
 8001000:	200189cc 	.word	0x200189cc
 8001004:	20018af0 	.word	0x20018af0
 8001008:	447a0000 	.word	0x447a0000
 800100c:	20000208 	.word	0x20000208
 8001010:	200002c8 	.word	0x200002c8
 8001014:	2000012c 	.word	0x2000012c
 8001018:	30000040 	.word	0x30000040
 800101c:	200000c8 	.word	0x200000c8
 8001020:	20000014 	.word	0x20000014
 8001024:	20018b64 	.word	0x20018b64
 8001028:	2001899c 	.word	0x2001899c

0800102c <attackDetectPeak2>:
	tempSamp = tempSamp * stringScaling2[whichString] * 2.0f;
 800102c:	4ac0      	ldr	r2, [pc, #768]	; (8001330 <attackDetectPeak2+0x304>)
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 800102e:	ee07 1a90 	vmov	s15, r1
 8001032:	eddf 6ac0 	vldr	s13, [pc, #768]	; 8001334 <attackDetectPeak2+0x308>
 8001036:	eb00 0140 	add.w	r1, r0, r0, lsl #1
	tempSamp = tempSamp * stringScaling2[whichString] * 2.0f;
 800103a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 800103e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	tempSamp = tempSamp * stringScaling2[whichString] * 2.0f;
 8001042:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8001338 <attackDetectPeak2+0x30c>
 8001046:	edd2 7a00 	vldr	s15, [r2]
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 800104a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800104e:	4bbb      	ldr	r3, [pc, #748]	; (800133c <attackDetectPeak2+0x310>)
	tempSamp = tempSamp * stringScaling2[whichString] * 2.0f;
 8001050:	ee67 7a87 	vmul.f32	s15, s15, s14
{
 8001054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001058:	4fb9      	ldr	r7, [pc, #740]	; (8001340 <attackDetectPeak2+0x314>)
	tempSamp = tempSamp * stringScaling2[whichString] * 2.0f;
 800105a:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 800105e:	4604      	mov	r4, r0
	tempSamp = tempSamp * stringScaling2[whichString] * 2.0f;
 8001060:	0086      	lsls	r6, r0, #2
 8001062:	eb03 0881 	add.w	r8, r3, r1, lsl #2
 8001066:	2500      	movs	r5, #0
 8001068:	eb07 0781 	add.w	r7, r7, r1, lsl #2
{
 800106c:	ed2d 8b02 	vpush	{d8}
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp * 0.999f);
 8001070:	ed9f 8ab4 	vldr	s16, [pc, #720]	; 8001344 <attackDetectPeak2+0x318>
{
 8001074:	b083      	sub	sp, #12
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp * 0.999f);
 8001076:	eb08 0005 	add.w	r0, r8, r5
 800107a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800107e:	f006 fd23 	bl	8007ac8 <tHighpass_tick>
		tempSamp = tVZFilter_tickEfficient(&opticalLowpass[whichString][k], tempSamp);
 8001082:	1978      	adds	r0, r7, r5
	for (int k = 0; k < FILTER_ORDER; k++)
 8001084:	3504      	adds	r5, #4
		tempSamp = tVZFilter_tickEfficient(&opticalLowpass[whichString][k], tempSamp);
 8001086:	f006 fd2f 	bl	8007ae8 <tVZFilter_tickEfficient>
	for (int k = 0; k < FILTER_ORDER; k++)
 800108a:	2d0c      	cmp	r5, #12
 800108c:	d1f3      	bne.n	8001076 <attackDetectPeak2+0x4a>
	float tempAbs = fabsf(tempSamp);
 800108e:	eeb0 0ac0 	vabs.f32	s0, s0
	tempAbsInt[whichString] = (tempAbs * (TWO_TO_16 - 1));
 8001092:	ed9f 8aad 	vldr	s16, [pc, #692]	; 8001348 <attackDetectPeak2+0x31c>
 8001096:	4bad      	ldr	r3, [pc, #692]	; (800134c <attackDetectPeak2+0x320>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8001098:	48ad      	ldr	r0, [pc, #692]	; (8001350 <attackDetectPeak2+0x324>)
	tempAbsInt[whichString] = (tempAbs * (TWO_TO_16 - 1));
 800109a:	ee60 7a08 	vmul.f32	s15, s0, s16
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 800109e:	f8df 8314 	ldr.w	r8, [pc, #788]	; 80013b4 <attackDetectPeak2+0x388>
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80010a2:	4430      	add	r0, r6
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 80010a4:	4dab      	ldr	r5, [pc, #684]	; (8001354 <attackDetectPeak2+0x328>)
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 80010a6:	4fac      	ldr	r7, [pc, #688]	; (8001358 <attackDetectPeak2+0x32c>)
	tempAbsInt[whichString] = (tempAbs * (TWO_TO_16 - 1));
 80010a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ac:	ee17 2a90 	vmov	r2, s15
 80010b0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80010b4:	f006 fcb6 	bl	8007a24 <tSlide_tick>
	smoothedInt[whichString] = (Dsmoothed * (TWO_TO_16 - 1));
 80010b8:	ee20 7a08 	vmul.f32	s14, s0, s16
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80010bc:	4aa7      	ldr	r2, [pc, #668]	; (800135c <attackDetectPeak2+0x330>)
	smoothedInt[whichString] = (Dsmoothed * (TWO_TO_16 - 1));
 80010be:	4ba8      	ldr	r3, [pc, #672]	; (8001360 <attackDetectPeak2+0x334>)
 80010c0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80010c4:	ed82 0a00 	vstr	s0, [r2]
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 80010c8:	48a6      	ldr	r0, [pc, #664]	; (8001364 <attackDetectPeak2+0x338>)
	smoothedInt[whichString] = (Dsmoothed * (TWO_TO_16 - 1));
 80010ca:	ee17 2a10 	vmov	r2, s14
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 80010ce:	4430      	add	r0, r6
	smoothedInt[whichString] = (Dsmoothed * (TWO_TO_16 - 1));
 80010d0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 80010d4:	f006 fca6 	bl	8007a24 <tSlide_tick>
 80010d8:	eef0 0a40 	vmov.f32	s1, s0
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 80010dc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80010e0:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8001368 <attackDetectPeak2+0x33c>
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 80010e4:	edc8 0a00 	vstr	s1, [r8]
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 80010e8:	f006 fed4 	bl	8007e94 <LEAF_clip>
 80010ec:	eeb0 7a40 	vmov.f32	s14, s0
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 80010f0:	eddf 7a9e 	vldr	s15, [pc, #632]	; 800136c <attackDetectPeak2+0x340>
 80010f4:	4b9e      	ldr	r3, [pc, #632]	; (8001370 <attackDetectPeak2+0x344>)
 80010f6:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
	smoothedInt2[whichString] = (Dsmoothed2 * (TWO_TO_16 - 1));
 80010fa:	4a9e      	ldr	r2, [pc, #632]	; (8001374 <attackDetectPeak2+0x348>)
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 80010fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001100:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8001378 <attackDetectPeak2+0x34c>
	smoothedInt2[whichString] = (Dsmoothed2 * (TWO_TO_16 - 1));
 8001104:	ee67 6a08 	vmul.f32	s13, s14, s16
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8001108:	ed88 7a00 	vstr	s14, [r8]
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 800110c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	smoothedInt2[whichString] = (Dsmoothed2 * (TWO_TO_16 - 1));
 8001110:	eefd 6ae6 	vcvt.s32.f32	s13, s13
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 8001114:	ee17 1a90 	vmov	r1, s15
 8001118:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800111c:	edd3 0a00 	vldr	s1, [r3]
	smoothedInt2[whichString] = (Dsmoothed2 * (TWO_TO_16 - 1));
 8001120:	ee16 3a90 	vmov	r3, s13
 8001124:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 8001128:	f006 feb4 	bl	8007e94 <LEAF_clip>
	dbSmoothedInt[whichString] = dbSmoothed2 * 100.0f;
 800112c:	eddf 7a93 	vldr	s15, [pc, #588]	; 800137c <attackDetectPeak2+0x350>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8001130:	19ab      	adds	r3, r5, r6
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8001132:	edd8 8a00 	vldr	s17, [r8]
	dbSmoothedInt[whichString] = dbSmoothed2 * 100.0f;
 8001136:	ee60 7a27 	vmul.f32	s15, s0, s15
 800113a:	4a91      	ldr	r2, [pc, #580]	; (8001380 <attackDetectPeak2+0x354>)
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 800113c:	ee68 8a88 	vmul.f32	s17, s17, s16
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8001140:	ed93 8a00 	vldr	s16, [r3]
	slopeStorage[whichString] = slope;
 8001144:	4b8f      	ldr	r3, [pc, #572]	; (8001384 <attackDetectPeak2+0x358>)
	if (whichString == 1)
 8001146:	2c01      	cmp	r4, #1
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8001148:	ee30 8a48 	vsub.f32	s16, s0, s16
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 800114c:	ed87 0a00 	vstr	s0, [r7]
	dbSmoothedInt[whichString] = dbSmoothed2 * 100.0f;
 8001150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	slopeStorage[whichString] = slope;
 8001154:	4433      	add	r3, r6
 8001156:	ed83 8a00 	vstr	s16, [r3]
	dbSmoothedInt[whichString] = dbSmoothed2 * 100.0f;
 800115a:	ee17 3a90 	vmov	r3, s15
 800115e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (whichString == 1)
 8001162:	d079      	beq.n	8001258 <attackDetectPeak2+0x22c>
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8001164:	4888      	ldr	r0, [pc, #544]	; (8001388 <attackDetectPeak2+0x35c>)
 8001166:	eeb0 0a68 	vmov.f32	s0, s17
 800116a:	4430      	add	r0, r6
 800116c:	f006 fc1a 	bl	80079a4 <tThreshold_tick>
 8001170:	4b86      	ldr	r3, [pc, #536]	; (800138c <attackDetectPeak2+0x360>)
	if ((slope > 0.1f) && (threshOut > 0) && (!armed[whichString]) && (!stringStates[whichString]))
 8001172:	4a87      	ldr	r2, [pc, #540]	; (8001390 <attackDetectPeak2+0x364>)
 8001174:	2800      	cmp	r0, #0
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8001176:	6018      	str	r0, [r3, #0]
	if ((slope > 0.1f) && (threshOut > 0) && (!armed[whichString]) && (!stringStates[whichString]))
 8001178:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800117c:	dd06      	ble.n	800118c <attackDetectPeak2+0x160>
 800117e:	eddf 7a85 	vldr	s15, [pc, #532]	; 8001394 <attackDetectPeak2+0x368>
 8001182:	eeb4 8a67 	vcmp.f32	s16, s15
 8001186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118a:	dc0b      	bgt.n	80011a4 <attackDetectPeak2+0x178>
	if (armed[whichString] == 1)
 800118c:	2b01      	cmp	r3, #1
 800118e:	d020      	beq.n	80011d2 <attackDetectPeak2+0x1a6>
 8001190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	prevdbSmoothed2[whichString] = dbSmoothed2;
 8001194:	4435      	add	r5, r6
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	602b      	str	r3, [r5, #0]
}
 800119a:	b003      	add	sp, #12
 800119c:	ecbd 8b02 	vpop	{d8}
 80011a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((slope > 0.1f) && (threshOut > 0) && (!armed[whichString]) && (!stringStates[whichString]))
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f1      	bne.n	800118c <attackDetectPeak2+0x160>
 80011a8:	4b7b      	ldr	r3, [pc, #492]	; (8001398 <attackDetectPeak2+0x36c>)
 80011aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1ee      	bne.n	8001190 <attackDetectPeak2+0x164>
		pickupMaximums[whichString] = 0.0f;
 80011b2:	497a      	ldr	r1, [pc, #488]	; (800139c <attackDetectPeak2+0x370>)
 80011b4:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001368 <attackDetectPeak2+0x33c>
 80011b8:	4431      	add	r1, r6
		stringMaxes[whichString] = 0;
 80011ba:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 80013b8 <attackDetectPeak2+0x38c>
 80011be:	eef0 7a47 	vmov.f32	s15, s14
		pickupMaximums[whichString] = 0.0f;
 80011c2:	ed81 7a00 	vstr	s14, [r1]
		armed[whichString] = 1;
 80011c6:	2101      	movs	r1, #1
		stringMaxes[whichString] = 0;
 80011c8:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
		armed[whichString] = 1;
 80011cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
	if (armed[whichString] == 1)
 80011d0:	e007      	b.n	80011e2 <attackDetectPeak2+0x1b6>
		if (integerVersion > stringMaxes[whichString])
 80011d2:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 80013b8 <attackDetectPeak2+0x38c>
 80011d6:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80011e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ea:	f300 8093 	bgt.w	8001314 <attackDetectPeak2+0x2e8>
		armedCounter[whichString]++;
 80011ee:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 80013bc <attackDetectPeak2+0x390>
		if (slope <= 0.0f)
 80011f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
			downCounter[whichString]++;
 80011f6:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 80013c0 <attackDetectPeak2+0x394>
		armedCounter[whichString]++;
 80011fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
		if (slope <= 0.0f)
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		armedCounter[whichString]++;
 8001202:	f103 0301 	add.w	r3, r3, #1
 8001206:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
		if (slope <= 0.0f)
 800120a:	d804      	bhi.n	8001216 <attackDetectPeak2+0x1ea>
			downCounter[whichString]++;
 800120c:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8001210:	3101      	adds	r1, #1
 8001212:	f84a 1024 	str.w	r1, [sl, r4, lsl #2]
		if (slope > 0.001f)
 8001216:	eddf 7a62 	vldr	s15, [pc, #392]	; 80013a0 <attackDetectPeak2+0x374>
 800121a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	dc25      	bgt.n	8001270 <attackDetectPeak2+0x244>
		if (downCounter[whichString] > 400)
 8001224:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8001228:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
 800122c:	dd08      	ble.n	8001240 <attackDetectPeak2+0x214>
			armed[whichString] = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			armedCounter[whichString] = 0;
 8001234:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
			downCounter[whichString] = 0;
 8001238:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
			stringMaxes[whichString] = 0;
 800123c:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
		if (outcountdown[whichString] > 0)
 8001240:	f8df b180 	ldr.w	fp, [pc, #384]	; 80013c4 <attackDetectPeak2+0x398>
 8001244:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8001248:	2900      	cmp	r1, #0
 800124a:	dd1a      	ble.n	8001282 <attackDetectPeak2+0x256>
			outcountdown[whichString]--;
 800124c:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 8001250:	3b01      	subs	r3, #1
 8001252:	f84b 3024 	str.w	r3, [fp, r4, lsl #2]
 8001256:	e79b      	b.n	8001190 <attackDetectPeak2+0x164>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (uint16_t)integerVersion >> 4);
 8001258:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800125c:	2200      	movs	r2, #0
 800125e:	2110      	movs	r1, #16
 8001260:	4850      	ldr	r0, [pc, #320]	; (80013a4 <attackDetectPeak2+0x378>)
 8001262:	ee17 3a90 	vmov	r3, s15
 8001266:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800126a:	f001 fddb 	bl	8002e24 <HAL_DAC_SetValue>
 800126e:	e779      	b.n	8001164 <attackDetectPeak2+0x138>
			downCounter[whichString] = 0;
 8001270:	2100      	movs	r1, #0
		if (outcountdown[whichString] > 0)
 8001272:	f8df b150 	ldr.w	fp, [pc, #336]	; 80013c4 <attackDetectPeak2+0x398>
			downCounter[whichString] = 0;
 8001276:	f84a 1024 	str.w	r1, [sl, r4, lsl #2]
		if (outcountdown[whichString] > 0)
 800127a:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800127e:	2900      	cmp	r1, #0
 8001280:	dce4      	bgt.n	800124c <attackDetectPeak2+0x220>
		else if ((!stringTouchRH[whichString]) && stringTouchRHPrev[whichString])
 8001282:	4849      	ldr	r0, [pc, #292]	; (80013a8 <attackDetectPeak2+0x37c>)
 8001284:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
 8001288:	b289      	uxth	r1, r1
 800128a:	b929      	cbnz	r1, 8001298 <attackDetectPeak2+0x26c>
 800128c:	4947      	ldr	r1, [pc, #284]	; (80013ac <attackDetectPeak2+0x380>)
 800128e:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
 8001292:	b289      	uxth	r1, r1
 8001294:	2900      	cmp	r1, #0
 8001296:	d144      	bne.n	8001322 <attackDetectPeak2+0x2f6>
		else if ((outcountdown[whichString] == 0) || ((armedCounter[whichString] == 1) && (!stringTouchRH[whichString])))
 8001298:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800129c:	b141      	cbz	r1, 80012b0 <attackDetectPeak2+0x284>
 800129e:	2b01      	cmp	r3, #1
 80012a0:	f47f af76 	bne.w	8001190 <attackDetectPeak2+0x164>
 80012a4:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f47f af70 	bne.w	8001190 <attackDetectPeak2+0x164>
			output = (float)stringMaxes[whichString];
 80012b0:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
			if (storedMaximums[whichString] < output)
 80012b4:	4b3e      	ldr	r3, [pc, #248]	; (80013b0 <attackDetectPeak2+0x384>)
			output = (float)stringMaxes[whichString];
 80012b6:	ee07 1a90 	vmov	s15, r1
			if (storedMaximums[whichString] < output)
 80012ba:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
			output = (float)stringMaxes[whichString];
 80012be:	eef8 0ae7 	vcvt.f32.s32	s1, s15
			if (storedMaximums[whichString] < output)
 80012c2:	ee07 1a90 	vmov	s15, r1
 80012c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ca:	eef4 7ae0 	vcmpe.f32	s15, s1
 80012ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d2:	d505      	bpl.n	80012e0 <attackDetectPeak2+0x2b4>
				storedMaximums[whichString] = output; // TODO:new
 80012d4:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 80012d8:	ee17 1a90 	vmov	r1, s15
 80012dc:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
			output = LEAF_clip(0.0f, output, 65535.0f);
 80012e0:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8001348 <attackDetectPeak2+0x31c>
 80012e4:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001368 <attackDetectPeak2+0x33c>
 80012e8:	9201      	str	r2, [sp, #4]
 80012ea:	f006 fdd3 	bl	8007e94 <LEAF_clip>
			armed[whichString] = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	9a01      	ldr	r2, [sp, #4]
	return (int)output;
 80012f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			armed[whichString] = 0;
 80012f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			armedCounter[whichString] = 0;
 80012fa:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
			downCounter[whichString] = 0;
 80012fe:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
	return (int)output;
 8001302:	ee17 0a90 	vmov	r0, s15
			stringMaxes[whichString] = 0;
 8001306:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
			outcountdown[whichString] = -1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800130e:	f84b 3024 	str.w	r3, [fp, r4, lsl #2]
 8001312:	e73f      	b.n	8001194 <attackDetectPeak2+0x168>
			stringMaxes[whichString] = integerVersion;
 8001314:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 8001318:	ee18 3a90 	vmov	r3, s17
 800131c:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
 8001320:	e765      	b.n	80011ee <attackDetectPeak2+0x1c2>
			outcountdown[whichString] = 64; //was 64/maybe sometimes gets rh touch release a little early if sensitivity is too low? Saw this on a scope reading and it was 1.4ms early so adding a 1.4ms delay to compensate
 8001322:	2340      	movs	r3, #64	; 0x40
 8001324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001328:	f84b 3024 	str.w	r3, [fp, r4, lsl #2]
 800132c:	e732      	b.n	8001194 <attackDetectPeak2+0x168>
 800132e:	bf00      	nop
 8001330:	20000024 	.word	0x20000024
 8001334:	47000000 	.word	0x47000000
 8001338:	387ffffc 	.word	0x387ffffc
 800133c:	20018a2c 	.word	0x20018a2c
 8001340:	20018a5c 	.word	0x20018a5c
 8001344:	3f7fbe77 	.word	0x3f7fbe77
 8001348:	477fff00 	.word	0x477fff00
 800134c:	20018b50 	.word	0x20018b50
 8001350:	2001899c 	.word	0x2001899c
 8001354:	20018a9c 	.word	0x20018a9c
 8001358:	20018968 	.word	0x20018968
 800135c:	200002a0 	.word	0x200002a0
 8001360:	20018acc 	.word	0x20018acc
 8001364:	20018abc 	.word	0x20018abc
 8001368:	00000000 	.word	0x00000000
 800136c:	46c34e00 	.word	0x46c34e00
 8001370:	200002c8 	.word	0x200002c8
 8001374:	20018adc 	.word	0x20018adc
 8001378:	c2a00000 	.word	0xc2a00000
 800137c:	42c80000 	.word	0x42c80000
 8001380:	2001896c 	.word	0x2001896c
 8001384:	20018aac 	.word	0x20018aac
 8001388:	20018b64 	.word	0x20018b64
 800138c:	20018b60 	.word	0x20018b60
 8001390:	200002a8 	.word	0x200002a8
 8001394:	3dcccccd 	.word	0x3dcccccd
 8001398:	20018b28 	.word	0x20018b28
 800139c:	20018a8c 	.word	0x20018a8c
 80013a0:	3a83126f 	.word	0x3a83126f
 80013a4:	20000208 	.word	0x20000208
 80013a8:	20018b40 	.word	0x20018b40
 80013ac:	20018b48 	.word	0x20018b48
 80013b0:	20000014 	.word	0x20000014
 80013b4:	200002a4 	.word	0x200002a4
 80013b8:	20018b00 	.word	0x20018b00
 80013bc:	200002b8 	.word	0x200002b8
 80013c0:	2001898c 	.word	0x2001898c
 80013c4:	20000004 	.word	0x20000004

080013c8 <ADC_Frame>:
	adcBytes[0] = ADC_values[offset*2] & 65535;
 80013c8:	4b87      	ldr	r3, [pc, #540]	; (80015e8 <ADC_Frame+0x220>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
	adcBytes[0] = ADC_values[offset*2] & 65535;
 80013cc:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80013d0:	4886      	ldr	r0, [pc, #536]	; (80015ec <ADC_Frame+0x224>)
{
 80013d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	adcBytes[1] = ADC_values[offset*2 + 1] & 65535;
 80013d6:	e9d1 4310 	ldrd	r4, r3, [r1, #64]	; 0x40
{
 80013da:	ed2d 8b02 	vpush	{d8}
 80013de:	b085      	sub	sp, #20
	adcBytes[2] = ADC_values[offset*2] >> 16;
 80013e0:	0c25      	lsrs	r5, r4, #16
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80013e2:	4611      	mov	r1, r2
	adcBytes[1] = ADC_values[offset*2 + 1] & 65535;
 80013e4:	f8ad 300a 	strh.w	r3, [sp, #10]
	adcBytes[3] = ADC_values[offset*2 + 1] >> 16;
 80013e8:	0c1b      	lsrs	r3, r3, #16
	adcBytes[2] = ADC_values[offset*2] >> 16;
 80013ea:	f8ad 500c 	strh.w	r5, [sp, #12]
	adcBytes[3] = ADC_values[offset*2 + 1] >> 16;
 80013ee:	f8ad 300e 	strh.w	r3, [sp, #14]
	adcBytes[0] = ADC_values[offset*2] & 65535;
 80013f2:	f8ad 4008 	strh.w	r4, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80013f6:	f003 f98f 	bl	8004718 <HAL_GPIO_WritePin>
		if (howManyFrames > 0)
 80013fa:	4a7d      	ldr	r2, [pc, #500]	; (80015f0 <ADC_Frame+0x228>)
 80013fc:	6813      	ldr	r3, [r2, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dd01      	ble.n	8001406 <ADC_Frame+0x3e>
			howManyFrames--;
 8001402:	3b01      	subs	r3, #1
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	af02      	add	r7, sp, #8
 8001408:	f8df a21c 	ldr.w	sl, [pc, #540]	; 8001628 <ADC_Frame+0x260>
 800140c:	f8df b21c 	ldr.w	fp, [pc, #540]	; 800162c <ADC_Frame+0x264>
{
 8001410:	2601      	movs	r6, #1
 8001412:	f8df 8208 	ldr.w	r8, [pc, #520]	; 800161c <ADC_Frame+0x254>
 8001416:	2400      	movs	r4, #0
 8001418:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8001630 <ADC_Frame+0x268>
					pickupMaximums[j] = 0.0f;
 800141c:	ed9f 8a75 	vldr	s16, [pc, #468]	; 80015f4 <ADC_Frame+0x22c>
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8001420:	f837 1b02 	ldrh.w	r1, [r7], #2
 8001424:	4620      	mov	r0, r4
 8001426:	f7ff fe01 	bl	800102c <attackDetectPeak2>
			if (j == 1)
 800142a:	2c01      	cmp	r4, #1
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 800142c:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
			if (j == 1)
 8001430:	f000 808f 	beq.w	8001552 <ADC_Frame+0x18a>
			if (howManyFrames == 0)
 8001434:	4b6e      	ldr	r3, [pc, #440]	; (80015f0 <ADC_Frame+0x228>)
 8001436:	681d      	ldr	r5, [r3, #0]
 8001438:	2d00      	cmp	r5, #0
 800143a:	d16f      	bne.n	800151c <ADC_Frame+0x154>
				if (stringTouchLH[j] && (stringPressed[j] == 65535))
 800143c:	4b6e      	ldr	r3, [pc, #440]	; (80015f8 <ADC_Frame+0x230>)
 800143e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001442:	b29b      	uxth	r3, r3
 8001444:	b133      	cbz	r3, 8001454 <ADC_Frame+0x8c>
 8001446:	f8b8 2000 	ldrh.w	r2, [r8]
 800144a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800144e:	429a      	cmp	r2, r3
 8001450:	bf08      	it	eq
 8001452:	2501      	moveq	r5, #1
 8001454:	4b69      	ldr	r3, [pc, #420]	; (80015fc <ADC_Frame+0x234>)
 8001456:	9301      	str	r3, [sp, #4]
				if (((didPlucked[j] > 0)) && (!stringSounding[j]) && (!stringTouchRH[j]))// && (!LHmuted))
 8001458:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
 800145c:	2b00      	cmp	r3, #0
 800145e:	dd38      	ble.n	80014d2 <ADC_Frame+0x10a>
 8001460:	4b67      	ldr	r3, [pc, #412]	; (8001600 <ADC_Frame+0x238>)
 8001462:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001466:	bba3      	cbnz	r3, 80014d2 <ADC_Frame+0x10a>
 8001468:	9a01      	ldr	r2, [sp, #4]
 800146a:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 800146e:	b292      	uxth	r2, r2
 8001470:	bb7a      	cbnz	r2, 80014d2 <ADC_Frame+0x10a>
					if (didPlucked[j] > totalMaximums[j])
 8001472:	4a64      	ldr	r2, [pc, #400]	; (8001604 <ADC_Frame+0x23c>)
 8001474:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 8001478:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 800147c:	4288      	cmp	r0, r1
 800147e:	dd03      	ble.n	8001488 <ADC_Frame+0xc0>
						totalMaximums[j] = didPlucked[j];
 8001480:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
 8001484:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
					if (didPlucked[j] > 65535)
 8001488:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 800148c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001490:	db03      	blt.n	800149a <ADC_Frame+0xd2>
						didPlucked[j] = 65535;
 8001492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001496:	f849 2024 	str.w	r2, [r9, r4, lsl #2]
					if (stringPressed[j] == 65535)
 800149a:	f8b8 1000 	ldrh.w	r1, [r8]
 800149e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a2:	4291      	cmp	r1, r2
 80014a4:	d104      	bne.n	80014b0 <ADC_Frame+0xe8>
						hammerOnWait[j] = 400;
 80014a6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80014aa:	f8ca 3000 	str.w	r3, [sl]
						openstrings[j] = 1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	4a55      	ldr	r2, [pc, #340]	; (8001608 <ADC_Frame+0x240>)
 80014b2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
					stringStates[j] = didPlucked[j];
 80014b6:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
 80014ba:	f8cb 3000 	str.w	r3, [fp]
					if (j == 0)
 80014be:	2c00      	cmp	r4, #0
 80014c0:	f000 8089 	beq.w	80015d6 <ADC_Frame+0x20e>
					stringSounding[j] = 1;
 80014c4:	2201      	movs	r2, #1
 80014c6:	494e      	ldr	r1, [pc, #312]	; (8001600 <ADC_Frame+0x238>)
 80014c8:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
					lastPlucked[j] = stringStates[j];
 80014cc:	4a4f      	ldr	r2, [pc, #316]	; (800160c <ADC_Frame+0x244>)
 80014ce:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				if ((stringTouchRH[j]) && (stringSounding[j]))
 80014d2:	9b01      	ldr	r3, [sp, #4]
 80014d4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b19b      	cbz	r3, 8001504 <ADC_Frame+0x13c>
 80014dc:	4b48      	ldr	r3, [pc, #288]	; (8001600 <ADC_Frame+0x238>)
 80014de:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80014e2:	b17b      	cbz	r3, 8001504 <ADC_Frame+0x13c>
					if (j == 0)
 80014e4:	2c00      	cmp	r4, #0
 80014e6:	d069      	beq.n	80015bc <ADC_Frame+0x1f4>
					pickupMaximums[j] = 0.0f;
 80014e8:	4b49      	ldr	r3, [pc, #292]	; (8001610 <ADC_Frame+0x248>)
					if (j == 1)
 80014ea:	2c01      	cmp	r4, #1
					stringSounding[j] = 0;
 80014ec:	4a44      	ldr	r2, [pc, #272]	; (8001600 <ADC_Frame+0x238>)
					pickupMaximums[j] = 0.0f;
 80014ee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80014f2:	ed83 8a00 	vstr	s16, [r3]
					stringStates[j] = 0;
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	f8cb 3000 	str.w	r3, [fp]
					stringSounding[j] = 0;
 80014fe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
					if (j == 1)
 8001502:	d016      	beq.n	8001532 <ADC_Frame+0x16a>
				if (!LHmuted)
 8001504:	b91d      	cbnz	r5, 800150e <ADC_Frame+0x146>
					hammerOnWait[j] = 400;
 8001506:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800150a:	f8ca 3000 	str.w	r3, [sl]
				stringTouchRHPrev[j] = stringTouchRH[j];
 800150e:	9b01      	ldr	r3, [sp, #4]
 8001510:	4a40      	ldr	r2, [pc, #256]	; (8001614 <ADC_Frame+0x24c>)
 8001512:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001516:	b29b      	uxth	r3, r3
 8001518:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for (int j = 0; j < 4; j++)
 800151c:	2e04      	cmp	r6, #4
 800151e:	d00e      	beq.n	800153e <ADC_Frame+0x176>
 8001520:	3401      	adds	r4, #1
 8001522:	3601      	adds	r6, #1
 8001524:	f10a 0a04 	add.w	sl, sl, #4
 8001528:	f10b 0b04 	add.w	fp, fp, #4
 800152c:	f108 0802 	add.w	r8, r8, #2
 8001530:	e776      	b.n	8001420 <ADC_Frame+0x58>
						HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001532:	461a      	mov	r2, r3
 8001534:	4619      	mov	r1, r3
 8001536:	4838      	ldr	r0, [pc, #224]	; (8001618 <ADC_Frame+0x250>)
 8001538:	f001 fc74 	bl	8002e24 <HAL_DAC_SetValue>
 800153c:	e7e2      	b.n	8001504 <ADC_Frame+0x13c>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2101      	movs	r1, #1
 8001542:	482a      	ldr	r0, [pc, #168]	; (80015ec <ADC_Frame+0x224>)
}
 8001544:	b005      	add	sp, #20
 8001546:	ecbd 8b02 	vpop	{d8}
 800154a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800154e:	f003 b8e3 	b.w	8004718 <HAL_GPIO_WritePin>
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint16_t)stringPressed[j] >>4);
 8001552:	4b32      	ldr	r3, [pc, #200]	; (800161c <ADC_Frame+0x254>)
 8001554:	2200      	movs	r2, #0
 8001556:	4830      	ldr	r0, [pc, #192]	; (8001618 <ADC_Frame+0x250>)
 8001558:	885b      	ldrh	r3, [r3, #2]
 800155a:	4611      	mov	r1, r2
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f001 fc61 	bl	8002e24 <HAL_DAC_SetValue>
			if (howManyFrames == 0)
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <ADC_Frame+0x228>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1da      	bne.n	8001520 <ADC_Frame+0x158>
				if (stringTouchLH[j] && (stringPressed[j] == 65535))
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <ADC_Frame+0x230>)
 800156c:	885b      	ldrh	r3, [r3, #2]
 800156e:	b29b      	uxth	r3, r3
 8001570:	b1bb      	cbz	r3, 80015a2 <ADC_Frame+0x1da>
 8001572:	f8b8 2000 	ldrh.w	r2, [r8]
 8001576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800157a:	429a      	cmp	r2, r3
 800157c:	d111      	bne.n	80015a2 <ADC_Frame+0x1da>
					LHmuted = 1;
 800157e:	4625      	mov	r5, r4
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8001580:	4622      	mov	r2, r4
 8001582:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001586:	4826      	ldr	r0, [pc, #152]	; (8001620 <ADC_Frame+0x258>)
 8001588:	f003 f8c6 	bl	8004718 <HAL_GPIO_WritePin>
					if (stringTouchRH[j]  > 0)
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <ADC_Frame+0x234>)
 800158e:	885a      	ldrh	r2, [r3, #2]
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	b292      	uxth	r2, r2
 8001594:	b16a      	cbz	r2, 80015b2 <ADC_Frame+0x1ea>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	2104      	movs	r1, #4
 800159a:	4814      	ldr	r0, [pc, #80]	; (80015ec <ADC_Frame+0x224>)
 800159c:	f003 f8bc 	bl	8004718 <HAL_GPIO_WritePin>
 80015a0:	e75a      	b.n	8001458 <ADC_Frame+0x90>
					LHmuted = 0;
 80015a2:	2500      	movs	r5, #0
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 80015a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a8:	481d      	ldr	r0, [pc, #116]	; (8001620 <ADC_Frame+0x258>)
 80015aa:	462a      	mov	r2, r5
 80015ac:	f003 f8b4 	bl	8004718 <HAL_GPIO_WritePin>
 80015b0:	e7ec      	b.n	800158c <ADC_Frame+0x1c4>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80015b2:	2104      	movs	r1, #4
 80015b4:	480d      	ldr	r0, [pc, #52]	; (80015ec <ADC_Frame+0x224>)
 80015b6:	f003 f8af 	bl	8004718 <HAL_GPIO_WritePin>
 80015ba:	e74d      	b.n	8001458 <ADC_Frame+0x90>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80015bc:	4622      	mov	r2, r4
 80015be:	2180      	movs	r1, #128	; 0x80
 80015c0:	4818      	ldr	r0, [pc, #96]	; (8001624 <ADC_Frame+0x25c>)
 80015c2:	f003 f8a9 	bl	8004718 <HAL_GPIO_WritePin>
					pickupMaximums[j] = 0.0f;
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <ADC_Frame+0x248>)
					stringStates[j] = 0;
 80015c8:	f8cb 4000 	str.w	r4, [fp]
					pickupMaximums[j] = 0.0f;
 80015cc:	ed83 8a00 	vstr	s16, [r3]
					stringSounding[j] = 0;
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <ADC_Frame+0x238>)
 80015d2:	601c      	str	r4, [r3, #0]
					if (j == 1)
 80015d4:	e796      	b.n	8001504 <ADC_Frame+0x13c>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	4812      	ldr	r0, [pc, #72]	; (8001624 <ADC_Frame+0x25c>)
 80015dc:	f003 f89c 	bl	8004718 <HAL_GPIO_WritePin>
					lastPlucked[j] = stringStates[j];
 80015e0:	f8db 3000 	ldr.w	r3, [fp]
 80015e4:	e76e      	b.n	80014c4 <ADC_Frame+0xfc>
 80015e6:	bf00      	nop
 80015e8:	30000000 	.word	0x30000000
 80015ec:	58020000 	.word	0x58020000
 80015f0:	20000000 	.word	0x20000000
 80015f4:	00000000 	.word	0x00000000
 80015f8:	20018b38 	.word	0x20018b38
 80015fc:	20018b40 	.word	0x20018b40
 8001600:	20018b18 	.word	0x20018b18
 8001604:	20018b74 	.word	0x20018b74
 8001608:	20018a1c 	.word	0x20018a1c
 800160c:	200189bc 	.word	0x200189bc
 8001610:	20018a8c 	.word	0x20018a8c
 8001614:	20018b48 	.word	0x20018b48
 8001618:	20000208 	.word	0x20000208
 800161c:	20018b10 	.word	0x20018b10
 8001620:	58021800 	.word	0x58021800
 8001624:	58020800 	.word	0x58020800
 8001628:	200189ac 	.word	0x200189ac
 800162c:	20018b28 	.word	0x20018b28
 8001630:	2001897c 	.word	0x2001897c

08001634 <HAL_ADC_ConvCpltCallback>:
	if (hadc == &hadc1)
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_ADC_ConvCpltCallback+0x10>)
 8001636:	4283      	cmp	r3, r0
 8001638:	d000      	beq.n	800163c <HAL_ADC_ConvCpltCallback+0x8>
}
 800163a:	4770      	bx	lr
		ADC_Frame(ADC_FRAME_SIZE);
 800163c:	2001      	movs	r0, #1
 800163e:	f7ff bec3 	b.w	80013c8 <ADC_Frame>
 8001642:	bf00      	nop
 8001644:	200000c8 	.word	0x200000c8

08001648 <HAL_ADC_ConvHalfCpltCallback>:
	if (hadc == &hadc1)
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_ADC_ConvHalfCpltCallback+0x10>)
 800164a:	4283      	cmp	r3, r0
 800164c:	d000      	beq.n	8001650 <HAL_ADC_ConvHalfCpltCallback+0x8>
}
 800164e:	4770      	bx	lr
		ADC_Frame(0);
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff beb9 	b.w	80013c8 <ADC_Frame>
 8001656:	bf00      	nop
 8001658:	200000c8 	.word	0x200000c8

0800165c <HAL_SPI_TxRxCpltCallback>:
{
 800165c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	spiBuffer = 1;
 8001660:	2201      	movs	r2, #1
 8001662:	4c39      	ldr	r4, [pc, #228]	; (8001748 <HAL_SPI_TxRxCpltCallback+0xec>)
{
 8001664:	b083      	sub	sp, #12
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001666:	4839      	ldr	r0, [pc, #228]	; (800174c <HAL_SPI_TxRxCpltCallback+0xf0>)
 8001668:	2102      	movs	r1, #2
	spiBuffer = 1;
 800166a:	6022      	str	r2, [r4, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800166c:	f003 f854 	bl	8004718 <HAL_GPIO_WritePin>
		stringTouchLH[j] = (SPI_RX[24] >> (j+4)) & 1;
 8001670:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_SPI_TxRxCpltCallback+0xf4>)
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 8001672:	6824      	ldr	r4, [r4, #0]
		stringPressed[j] = (SPI_RX[currentnumber] << 8) + SPI_RX[currentnumber+1];
 8001674:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 8001678:	00e1      	lsls	r1, r4, #3
		stringPressed[j] = (SPI_RX[currentnumber] << 8) + SPI_RX[currentnumber+1];
 800167a:	f893 7031 	ldrb.w	r7, [r3, #49]	; 0x31
		SPI_TX[j*2+1+(16*spiBuffer)] = (uint8_t) (stringStates[j] & 0xff); //low byte
 800167e:	ea4f 1c04 	mov.w	ip, r4, lsl #4
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 8001682:	4c34      	ldr	r4, [pc, #208]	; (8001754 <HAL_SPI_TxRxCpltCallback+0xf8>)
		stringPressed[j] = (SPI_RX[currentnumber] << 8) + SPI_RX[currentnumber+1];
 8001684:	eb07 2705 	add.w	r7, r7, r5, lsl #8
 8001688:	f893 5032 	ldrb.w	r5, [r3, #50]	; 0x32
 800168c:	4e32      	ldr	r6, [pc, #200]	; (8001758 <HAL_SPI_TxRxCpltCallback+0xfc>)
		stringTouchLH[j] = (SPI_RX[24] >> (j+4)) & 1;
 800168e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		stringPressed[j] = (SPI_RX[currentnumber] << 8) + SPI_RX[currentnumber+1];
 8001692:	8037      	strh	r7, [r6, #0]
 8001694:	f893 e037 	ldrb.w	lr, [r3, #55]	; 0x37
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001698:	482c      	ldr	r0, [pc, #176]	; (800174c <HAL_SPI_TxRxCpltCallback+0xf0>)
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 800169a:	e9d4 ba00 	ldrd	fp, sl, [r4]
 800169e:	e9d4 9802 	ldrd	r9, r8, [r4, #8]
		stringPressed[j] = (SPI_RX[currentnumber] << 8) + SPI_RX[currentnumber+1];
 80016a2:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
 80016a6:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 80016aa:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
 80016ae:	9400      	str	r4, [sp, #0]
 80016b0:	f893 4035 	ldrb.w	r4, [r3, #53]	; 0x35
 80016b4:	9f00      	ldr	r7, [sp, #0]
 80016b6:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 80016ba:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
 80016be:	8077      	strh	r7, [r6, #2]
 80016c0:	9501      	str	r5, [sp, #4]
 80016c2:	eb0e 2e04 	add.w	lr, lr, r4, lsl #8
 80016c6:	9f01      	ldr	r7, [sp, #4]
		stringTouchLH[j] = (SPI_RX[24] >> (j+4)) & 1;
 80016c8:	4d24      	ldr	r5, [pc, #144]	; (800175c <HAL_SPI_TxRxCpltCallback+0x100>)
		stringPressed[j] = (SPI_RX[currentnumber] << 8) + SPI_RX[currentnumber+1];
 80016ca:	80b7      	strh	r7, [r6, #4]
		stringTouchLH[j] = (SPI_RX[24] >> (j+4)) & 1;
 80016cc:	f3c2 1700 	ubfx	r7, r2, #4, #1
		stringTouchRH[j] = (SPI_RX[24] >> j) & 1;
 80016d0:	4c23      	ldr	r4, [pc, #140]	; (8001760 <HAL_SPI_TxRxCpltCallback+0x104>)
		stringTouchLH[j] = (SPI_RX[24] >> (j+4)) & 1;
 80016d2:	802f      	strh	r7, [r5, #0]
		stringTouchRH[j] = (SPI_RX[24] >> j) & 1;
 80016d4:	f002 0701 	and.w	r7, r2, #1
		stringPressed[j] = (SPI_RX[currentnumber] << 8) + SPI_RX[currentnumber+1];
 80016d8:	f8a6 e006 	strh.w	lr, [r6, #6]
		SPI_TX[j*2+1+(16*spiBuffer)] = (uint8_t) (stringStates[j] & 0xff); //low byte
 80016dc:	eb03 060c 	add.w	r6, r3, ip
		stringTouchRH[j] = (SPI_RX[24] >> j) & 1;
 80016e0:	8027      	strh	r7, [r4, #0]
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 80016e2:	ea4f 272b 	mov.w	r7, fp, asr #8
 80016e6:	f803 700c 	strb.w	r7, [r3, ip]
		stringTouchLH[j] = (SPI_RX[24] >> (j+4)) & 1;
 80016ea:	f3c2 1740 	ubfx	r7, r2, #5, #1
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 80016ee:	ea4f 2c2a 	mov.w	ip, sl, asr #8
		SPI_TX[j*2+1+(16*spiBuffer)] = (uint8_t) (stringStates[j] & 0xff); //low byte
 80016f2:	f886 b001 	strb.w	fp, [r6, #1]
		stringTouchLH[j] = (SPI_RX[24] >> (j+4)) & 1;
 80016f6:	806f      	strh	r7, [r5, #2]
		stringTouchRH[j] = (SPI_RX[24] >> j) & 1;
 80016f8:	f3c2 0740 	ubfx	r7, r2, #1, #1
 80016fc:	8067      	strh	r7, [r4, #2]
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 80016fe:	1c4f      	adds	r7, r1, #1
 8001700:	f803 c017 	strb.w	ip, [r3, r7, lsl #1]
		stringTouchLH[j] = (SPI_RX[24] >> (j+4)) & 1;
 8001704:	f3c2 1780 	ubfx	r7, r2, #6, #1
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 8001708:	ea4f 2c29 	mov.w	ip, r9, asr #8
		SPI_TX[j*2+1+(16*spiBuffer)] = (uint8_t) (stringStates[j] & 0xff); //low byte
 800170c:	f886 a003 	strb.w	sl, [r6, #3]
		stringTouchLH[j] = (SPI_RX[24] >> (j+4)) & 1;
 8001710:	80af      	strh	r7, [r5, #4]
		stringTouchRH[j] = (SPI_RX[24] >> j) & 1;
 8001712:	f3c2 0780 	ubfx	r7, r2, #2, #1
 8001716:	80a7      	strh	r7, [r4, #4]
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 8001718:	1c8f      	adds	r7, r1, #2
 800171a:	3103      	adds	r1, #3
 800171c:	f803 c017 	strb.w	ip, [r3, r7, lsl #1]
		stringTouchLH[j] = (SPI_RX[24] >> (j+4)) & 1;
 8001720:	09d7      	lsrs	r7, r2, #7
		stringTouchRH[j] = (SPI_RX[24] >> j) & 1;
 8001722:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		SPI_TX[j*2+1+(16*spiBuffer)] = (uint8_t) (stringStates[j] & 0xff); //low byte
 8001726:	f886 9005 	strb.w	r9, [r6, #5]
		stringTouchLH[j] = (SPI_RX[24] >> (j+4)) & 1;
 800172a:	80ef      	strh	r7, [r5, #6]
		stringTouchRH[j] = (SPI_RX[24] >> j) & 1;
 800172c:	80e2      	strh	r2, [r4, #6]
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 800172e:	ea4f 2228 	mov.w	r2, r8, asr #8
 8001732:	f803 2011 	strb.w	r2, [r3, r1, lsl #1]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2102      	movs	r1, #2
		SPI_TX[j*2+1+(16*spiBuffer)] = (uint8_t) (stringStates[j] & 0xff); //low byte
 800173a:	f886 8007 	strb.w	r8, [r6, #7]
}
 800173e:	b003      	add	sp, #12
 8001740:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001744:	f002 bfe8 	b.w	8004718 <HAL_GPIO_WritePin>
 8001748:	20018aec 	.word	0x20018aec
 800174c:	58020000 	.word	0x58020000
 8001750:	30000000 	.word	0x30000000
 8001754:	20018b28 	.word	0x20018b28
 8001758:	20018b10 	.word	0x20018b10
 800175c:	20018b38 	.word	0x20018b38
 8001760:	20018b40 	.word	0x20018b40

08001764 <HAL_SPI_TxRxHalfCpltCallback>:
{
 8001764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	spiBuffer = 0;
 8001768:	2400      	movs	r4, #0
 800176a:	4d3d      	ldr	r5, [pc, #244]	; (8001860 <HAL_SPI_TxRxHalfCpltCallback+0xfc>)
{
 800176c:	b085      	sub	sp, #20
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800176e:	483d      	ldr	r0, [pc, #244]	; (8001864 <HAL_SPI_TxRxHalfCpltCallback+0x100>)
 8001770:	2201      	movs	r2, #1
 8001772:	2102      	movs	r1, #2
	spiBuffer = 0;
 8001774:	602c      	str	r4, [r5, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001776:	f002 ffcf 	bl	8004718 <HAL_GPIO_WritePin>
		stringTouchLH[j] = (SPI_RX[8] >> (j+4)) & 1;
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <HAL_SPI_TxRxHalfCpltCallback+0x104>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800177c:	4622      	mov	r2, r4
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 800177e:	682d      	ldr	r5, [r5, #0]
 8001780:	4c3a      	ldr	r4, [pc, #232]	; (800186c <HAL_SPI_TxRxHalfCpltCallback+0x108>)
 8001782:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
		stringPressed[j] = (SPI_RX[j*2] << 8) + SPI_RX[(j*2)+1];
 8001786:	f893 7027 	ldrb.w	r7, [r3, #39]	; 0x27
		SPI_TX[j*2+1+(16*spiBuffer)] = (uint8_t) (stringStates[j] & 0xff); //low byte
 800178a:	ea4f 1e05 	mov.w	lr, r5, lsl #4
		stringPressed[j] = (SPI_RX[j*2] << 8) + SPI_RX[(j*2)+1];
 800178e:	f893 5020 	ldrb.w	r5, [r3, #32]
		stringTouchLH[j] = (SPI_RX[8] >> (j+4)) & 1;
 8001792:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001796:	4833      	ldr	r0, [pc, #204]	; (8001864 <HAL_SPI_TxRxHalfCpltCallback+0x100>)
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 8001798:	e9d4 ba00 	ldrd	fp, sl, [r4]
 800179c:	e9d4 9802 	ldrd	r9, r8, [r4, #8]
		stringPressed[j] = (SPI_RX[j*2] << 8) + SPI_RX[(j*2)+1];
 80017a0:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 80017a4:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 80017a8:	f893 5022 	ldrb.w	r5, [r3, #34]	; 0x22
 80017ac:	9400      	str	r4, [sp, #0]
 80017ae:	f893 4023 	ldrb.w	r4, [r3, #35]	; 0x23
 80017b2:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 80017b6:	f893 4025 	ldrb.w	r4, [r3, #37]	; 0x25
 80017ba:	9501      	str	r5, [sp, #4]
 80017bc:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 80017c0:	eb04 2605 	add.w	r6, r4, r5, lsl #8
 80017c4:	f893 4026 	ldrb.w	r4, [r3, #38]	; 0x26
		stringTouchLH[j] = (SPI_RX[8] >> (j+4)) & 1;
 80017c8:	4d29      	ldr	r5, [pc, #164]	; (8001870 <HAL_SPI_TxRxHalfCpltCallback+0x10c>)
		stringPressed[j] = (SPI_RX[j*2] << 8) + SPI_RX[(j*2)+1];
 80017ca:	eb07 2704 	add.w	r7, r7, r4, lsl #8
 80017ce:	9602      	str	r6, [sp, #8]
 80017d0:	4e28      	ldr	r6, [pc, #160]	; (8001874 <HAL_SPI_TxRxHalfCpltCallback+0x110>)
 80017d2:	9703      	str	r7, [sp, #12]
 80017d4:	9f00      	ldr	r7, [sp, #0]
		stringTouchRH[j] = (SPI_RX[8] >> j) & 1;
 80017d6:	4c28      	ldr	r4, [pc, #160]	; (8001878 <HAL_SPI_TxRxHalfCpltCallback+0x114>)
		stringPressed[j] = (SPI_RX[j*2] << 8) + SPI_RX[(j*2)+1];
 80017d8:	8037      	strh	r7, [r6, #0]
 80017da:	9f01      	ldr	r7, [sp, #4]
 80017dc:	8077      	strh	r7, [r6, #2]
 80017de:	9f02      	ldr	r7, [sp, #8]
 80017e0:	80b7      	strh	r7, [r6, #4]
 80017e2:	9f03      	ldr	r7, [sp, #12]
 80017e4:	80f7      	strh	r7, [r6, #6]
		stringTouchLH[j] = (SPI_RX[8] >> (j+4)) & 1;
 80017e6:	f3c1 1700 	ubfx	r7, r1, #4, #1
		SPI_TX[j*2+1+(16*spiBuffer)] = (uint8_t) (stringStates[j] & 0xff); //low byte
 80017ea:	eb03 060e 	add.w	r6, r3, lr
		stringTouchLH[j] = (SPI_RX[8] >> (j+4)) & 1;
 80017ee:	802f      	strh	r7, [r5, #0]
		stringTouchRH[j] = (SPI_RX[8] >> j) & 1;
 80017f0:	f001 0701 	and.w	r7, r1, #1
 80017f4:	8027      	strh	r7, [r4, #0]
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 80017f6:	ea4f 272b 	mov.w	r7, fp, asr #8
 80017fa:	f803 700e 	strb.w	r7, [r3, lr]
		stringTouchLH[j] = (SPI_RX[8] >> (j+4)) & 1;
 80017fe:	f3c1 1740 	ubfx	r7, r1, #5, #1
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 8001802:	ea4f 2e2a 	mov.w	lr, sl, asr #8
		SPI_TX[j*2+1+(16*spiBuffer)] = (uint8_t) (stringStates[j] & 0xff); //low byte
 8001806:	f886 b001 	strb.w	fp, [r6, #1]
		stringTouchLH[j] = (SPI_RX[8] >> (j+4)) & 1;
 800180a:	806f      	strh	r7, [r5, #2]
		stringTouchRH[j] = (SPI_RX[8] >> j) & 1;
 800180c:	f3c1 0740 	ubfx	r7, r1, #1, #1
 8001810:	8067      	strh	r7, [r4, #2]
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 8001812:	f10c 0701 	add.w	r7, ip, #1
 8001816:	f803 e017 	strb.w	lr, [r3, r7, lsl #1]
		stringTouchLH[j] = (SPI_RX[8] >> (j+4)) & 1;
 800181a:	f3c1 1780 	ubfx	r7, r1, #6, #1
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 800181e:	ea4f 2e29 	mov.w	lr, r9, asr #8
		SPI_TX[j*2+1+(16*spiBuffer)] = (uint8_t) (stringStates[j] & 0xff); //low byte
 8001822:	f886 a003 	strb.w	sl, [r6, #3]
		stringTouchLH[j] = (SPI_RX[8] >> (j+4)) & 1;
 8001826:	80af      	strh	r7, [r5, #4]
		stringTouchRH[j] = (SPI_RX[8] >> j) & 1;
 8001828:	f3c1 0780 	ubfx	r7, r1, #2, #1
 800182c:	80a7      	strh	r7, [r4, #4]
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 800182e:	f10c 0702 	add.w	r7, ip, #2
 8001832:	f10c 0c03 	add.w	ip, ip, #3
 8001836:	f803 e017 	strb.w	lr, [r3, r7, lsl #1]
		stringTouchLH[j] = (SPI_RX[8] >> (j+4)) & 1;
 800183a:	09cf      	lsrs	r7, r1, #7
		stringTouchRH[j] = (SPI_RX[8] >> j) & 1;
 800183c:	f3c1 01c0 	ubfx	r1, r1, #3, #1
		SPI_TX[j*2+1+(16*spiBuffer)] = (uint8_t) (stringStates[j] & 0xff); //low byte
 8001840:	f886 9005 	strb.w	r9, [r6, #5]
		stringTouchLH[j] = (SPI_RX[8] >> (j+4)) & 1;
 8001844:	80ef      	strh	r7, [r5, #6]
		stringTouchRH[j] = (SPI_RX[8] >> j) & 1;
 8001846:	80e1      	strh	r1, [r4, #6]
		SPI_TX[j*2+(16*spiBuffer)] = (uint8_t) (stringStates[j] >> 8); //high byte
 8001848:	ea4f 2128 	mov.w	r1, r8, asr #8
 800184c:	f803 101c 	strb.w	r1, [r3, ip, lsl #1]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001850:	2102      	movs	r1, #2
		SPI_TX[j*2+1+(16*spiBuffer)] = (uint8_t) (stringStates[j] & 0xff); //low byte
 8001852:	f886 8007 	strb.w	r8, [r6, #7]
}
 8001856:	b005      	add	sp, #20
 8001858:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800185c:	f002 bf5c 	b.w	8004718 <HAL_GPIO_WritePin>
 8001860:	20018aec 	.word	0x20018aec
 8001864:	58020000 	.word	0x58020000
 8001868:	30000000 	.word	0x30000000
 800186c:	20018b28 	.word	0x20018b28
 8001870:	20018b38 	.word	0x20018b38
 8001874:	20018b10 	.word	0x20018b10
 8001878:	20018b40 	.word	0x20018b40

0800187c <HAL_GPIO_EXTI_Callback>:
    if(GPIO_Pin == GPIO_PIN_12) // If The INT Source Is EXTI Line12
 800187c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001880:	d000      	beq.n	8001884 <HAL_GPIO_EXTI_Callback+0x8>
 8001882:	4770      	bx	lr
    	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 0)
 8001884:	4601      	mov	r1, r0
 8001886:	4811      	ldr	r0, [pc, #68]	; (80018cc <HAL_GPIO_EXTI_Callback+0x50>)
{
 8001888:	b510      	push	{r4, lr}
    	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 0)
 800188a:	f002 ff3f 	bl	800470c <HAL_GPIO_ReadPin>
 800188e:	b198      	cbz	r0, 80018b8 <HAL_GPIO_EXTI_Callback+0x3c>
 8001890:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x54>)
    		  for (int i = 0; i < 32; i++)
 8001892:	2300      	movs	r3, #0
				  SPI_TX[i] = i;
 8001894:	f802 3f01 	strb.w	r3, [r2, #1]!
    		  for (int i = 0; i < 32; i++)
 8001898:	3301      	adds	r3, #1
 800189a:	2b20      	cmp	r3, #32
 800189c:	d1fa      	bne.n	8001894 <HAL_GPIO_EXTI_Callback+0x18>
    			  SPI_TX[i] = 0;
 800189e:	490d      	ldr	r1, [pc, #52]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x58>)
 80018a0:	2000      	movs	r0, #0
			  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_TX, SPI_RX, 32);
 80018a2:	f101 0220 	add.w	r2, r1, #32
    			  SPI_TX[i] = 0;
 80018a6:	e9c1 0000 	strd	r0, r0, [r1]
    			  SPI_TX[i] = 0;
 80018aa:	e9c1 0004 	strd	r0, r0, [r1, #16]
			  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_TX, SPI_RX, 32);
 80018ae:	480a      	ldr	r0, [pc, #40]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x5c>)
}
 80018b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_TX, SPI_RX, 32);
 80018b4:	f005 b998 	b.w	8006be8 <HAL_SPI_TransmitReceive_DMA>
    		  HAL_SPI_Abort(&hspi1);
 80018b8:	4c07      	ldr	r4, [pc, #28]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80018ba:	4620      	mov	r0, r4
 80018bc:	f005 faa8 	bl	8006e10 <HAL_SPI_Abort>
    		  __HAL_SPI_CLEAR_OVRFLAG(&hspi1);
 80018c0:	6822      	ldr	r2, [r4, #0]
 80018c2:	6993      	ldr	r3, [r2, #24]
 80018c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c8:	6193      	str	r3, [r2, #24]
}
 80018ca:	bd10      	pop	{r4, pc}
 80018cc:	58020800 	.word	0x58020800
 80018d0:	2fffffff 	.word	0x2fffffff
 80018d4:	30000000 	.word	0x30000000
 80018d8:	20018cc0 	.word	0x20018cc0

080018dc <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
  while (1)
 80018de:	e7fe      	b.n	80018de <Error_Handler+0x2>

080018e0 <MX_OPAMP1_Init>:

OPAMP_HandleTypeDef hopamp1;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 80018e0:	b508      	push	{r3, lr}
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80018e2:	480c      	ldr	r0, [pc, #48]	; (8001914 <MX_OPAMP1_Init+0x34>)
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80018e4:	2340      	movs	r3, #64	; 0x40
  hopamp1.Instance = OPAMP1;
 80018e6:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <MX_OPAMP1_Init+0x38>)
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80018e8:	2100      	movs	r1, #0
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80018ea:	6083      	str	r3, [r0, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80018ec:	2300      	movs	r3, #0
  hopamp1.Instance = OPAMP1;
 80018ee:	6002      	str	r2, [r0, #0]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80018f0:	2200      	movs	r2, #0
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80018f2:	6041      	str	r1, [r0, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80018f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80018f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018fc:	2300      	movs	r3, #0
 80018fe:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001902:	f002 ffc7 	bl	8004894 <HAL_OPAMP_Init>
 8001906:	b900      	cbnz	r0, 800190a <MX_OPAMP1_Init+0x2a>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001908:	bd08      	pop	{r3, pc}
 800190a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800190e:	f7ff bfe5 	b.w	80018dc <Error_Handler>
 8001912:	bf00      	nop
 8001914:	20018b88 	.word	0x20018b88
 8001918:	40009000 	.word	0x40009000

0800191c <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(opampHandle->Instance==OPAMP1)
 800191c:	4b23      	ldr	r3, [pc, #140]	; (80019ac <HAL_OPAMP_MspInit+0x90>)
 800191e:	6802      	ldr	r2, [r0, #0]
{
 8001920:	b510      	push	{r4, lr}
  if(opampHandle->Instance==OPAMP1)
 8001922:	429a      	cmp	r2, r3
{
 8001924:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	f04f 0400 	mov.w	r4, #0
 800192a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800192e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001932:	9408      	str	r4, [sp, #32]
  if(opampHandle->Instance==OPAMP1)
 8001934:	d001      	beq.n	800193a <HAL_OPAMP_MspInit+0x1e>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
}
 8001936:	b00a      	add	sp, #40	; 0x28
 8001938:	bd10      	pop	{r4, pc}
    __HAL_RCC_OPAMP_CLK_ENABLE();
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_OPAMP_MspInit+0x94>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193c:	a904      	add	r1, sp, #16
    __HAL_RCC_OPAMP_CLK_ENABLE();
 800193e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8001942:	f042 0210 	orr.w	r2, r2, #16
 8001946:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 800194a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 800194e:	f002 0210 	and.w	r2, r2, #16
 8001952:	9201      	str	r2, [sp, #4]
 8001954:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800195a:	f042 0204 	orr.w	r2, r2, #4
 800195e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001962:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001966:	f002 0204 	and.w	r2, r2, #4
 800196a:	9202      	str	r2, [sp, #8]
 800196c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001972:	f042 0202 	orr.w	r2, r2, #2
 8001976:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800197a:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001986:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001988:	9803      	ldr	r0, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198a:	480a      	ldr	r0, [pc, #40]	; (80019b4 <HAL_OPAMP_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800198c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f002 fd82 	bl	8004498 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001994:	2201      	movs	r2, #1
 8001996:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	a904      	add	r1, sp, #16
 800199a:	4807      	ldr	r0, [pc, #28]	; (80019b8 <HAL_OPAMP_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800199e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	f002 fd79 	bl	8004498 <HAL_GPIO_Init>
}
 80019a6:	b00a      	add	sp, #40	; 0x28
 80019a8:	bd10      	pop	{r4, pc}
 80019aa:	bf00      	nop
 80019ac:	40009000 	.word	0x40009000
 80019b0:	58024400 	.word	0x58024400
 80019b4:	58020800 	.word	0x58020800
 80019b8:	58020400 	.word	0x58020400

080019bc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80019bc:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80019be:	4806      	ldr	r0, [pc, #24]	; (80019d8 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	4a06      	ldr	r2, [pc, #24]	; (80019dc <MX_RNG_Init+0x20>)
 80019c4:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80019c8:	f004 ff28 	bl	800681c <HAL_RNG_Init>
 80019cc:	b900      	cbnz	r0, 80019d0 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80019ce:	bd08      	pop	{r3, pc}
 80019d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80019d4:	f7ff bf82 	b.w	80018dc <Error_Handler>
 80019d8:	20018bbc 	.word	0x20018bbc
 80019dc:	48021800 	.word	0x48021800

080019e0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80019e0:	b510      	push	{r4, lr}
 80019e2:	b0b0      	sub	sp, #192	; 0xc0
 80019e4:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e6:	22bc      	movs	r2, #188	; 0xbc
 80019e8:	2100      	movs	r1, #0
 80019ea:	a801      	add	r0, sp, #4
 80019ec:	f006 fbe6 	bl	80081bc <memset>
  if(rngHandle->Instance==RNG)
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_RNG_MspInit+0x50>)
 80019f2:	6822      	ldr	r2, [r4, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80019f8:	b030      	add	sp, #192	; 0xc0
 80019fa:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80019fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a00:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001a02:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a04:	f003 fe40 	bl	8005688 <HAL_RCCEx_PeriphCLKConfig>
 8001a08:	b970      	cbnz	r0, 8001a28 <HAL_RNG_MspInit+0x48>
    __HAL_RCC_RNG_CLK_ENABLE();
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_RNG_MspInit+0x54>)
 8001a0c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8001a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a14:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8001a18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	9b00      	ldr	r3, [sp, #0]
}
 8001a24:	b030      	add	sp, #192	; 0xc0
 8001a26:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001a28:	f7ff ff58 	bl	80018dc <Error_Handler>
 8001a2c:	e7ed      	b.n	8001a0a <HAL_RNG_MspInit+0x2a>
 8001a2e:	bf00      	nop
 8001a30:	48021800 	.word	0x48021800
 8001a34:	58024400 	.word	0x58024400

08001a38 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a38:	4813      	ldr	r0, [pc, #76]	; (8001a88 <MX_SPI1_Init+0x50>)
 8001a3a:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001a80 <MX_SPI1_Init+0x48>
{
 8001a40:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001a42:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 8001a44:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a46:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001a48:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a4a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a4c:	ed80 7b08 	vstr	d7, [r0, #32]
 8001a50:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a54:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a58:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a5c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a60:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a64:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a68:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a6c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a70:	f005 f802 	bl	8006a78 <HAL_SPI_Init>
 8001a74:	b900      	cbnz	r0, 8001a78 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a76:	bd08      	pop	{r3, pc}
 8001a78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001a7c:	f7ff bf2e 	b.w	80018dc <Error_Handler>
	...
 8001a88:	20018cc0 	.word	0x20018cc0
 8001a8c:	40013000 	.word	0x40013000

08001a90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a92:	b0b9      	sub	sp, #228	; 0xe4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	2100      	movs	r1, #0
{
 8001a96:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a98:	22bc      	movs	r2, #188	; 0xbc
 8001a9a:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	9108      	str	r1, [sp, #32]
 8001a9e:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001aa2:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa6:	f006 fb89 	bl	80081bc <memset>
  if(spiHandle->Instance==SPI1)
 8001aaa:	4b4f      	ldr	r3, [pc, #316]	; (8001be8 <HAL_SPI_MspInit+0x158>)
 8001aac:	6822      	ldr	r2, [r4, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <HAL_SPI_MspInit+0x26>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ab2:	b039      	add	sp, #228	; 0xe4
 8001ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aba:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001abc:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001abe:	f003 fde3 	bl	8005688 <HAL_RCCEx_PeriphCLKConfig>
 8001ac2:	2800      	cmp	r0, #0
 8001ac4:	f040 8086 	bne.w	8001bd4 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac8:	4b48      	ldr	r3, [pc, #288]	; (8001bec <HAL_SPI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001aca:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001acc:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001ace:	2703      	movs	r7, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ad0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	4846      	ldr	r0, [pc, #280]	; (8001bf0 <HAL_SPI_MspInit+0x160>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ad6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ada:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001ade:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001ae2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ae6:	9201      	str	r2, [sp, #4]
 8001ae8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001aee:	f042 0202 	orr.w	r2, r2, #2
 8001af2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001af6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001afa:	f002 0202 	and.w	r2, r2, #2
 8001afe:	9202      	str	r2, [sp, #8]
 8001b00:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b0a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001b0e:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b14:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001b1c:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b1e:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001b22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b26:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	f002 fcb5 	bl	8004498 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001b2e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001b32:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b34:	a904      	add	r1, sp, #16
 8001b36:	482f      	ldr	r0, [pc, #188]	; (8001bf4 <HAL_SPI_MspInit+0x164>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b38:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001b3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b3e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b42:	f002 fca9 	bl	8004498 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream1;
 8001b46:	4e2c      	ldr	r6, [pc, #176]	; (8001bf8 <HAL_SPI_MspInit+0x168>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b48:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream1;
 8001b4a:	492c      	ldr	r1, [pc, #176]	; (8001bfc <HAL_SPI_MspInit+0x16c>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001b4c:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001b4e:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b50:	6333      	str	r3, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001b52:	e886 000e 	stmia.w	r6, {r1, r2, r3}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b56:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b5e:	e9c6 3103 	strd	r3, r1, [r6, #12]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001b62:	61f2      	str	r2, [r6, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b64:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b68:	2204      	movs	r2, #4
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b6a:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b6e:	e9c6 330a 	strd	r3, r3, [r6, #40]	; 0x28
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b72:	e9c6 1208 	strd	r1, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001b76:	f001 faf5 	bl	8003164 <HAL_DMA_Init>
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	d130      	bne.n	8001be0 <HAL_SPI_MspInit+0x150>
    hdma_spi1_tx.Instance = DMA1_Stream2;
 8001b7e:	4d20      	ldr	r5, [pc, #128]	; (8001c00 <HAL_SPI_MspInit+0x170>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001b80:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream2;
 8001b82:	4920      	ldr	r1, [pc, #128]	; (8001c04 <HAL_SPI_MspInit+0x174>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b84:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001b86:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b88:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream2;
 8001b8c:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b8e:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b90:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b92:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b96:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001b98:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b9c:	622a      	str	r2, [r5, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b9e:	2204      	movs	r2, #4
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001ba0:	4628      	mov	r0, r5
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001ba2:	67e6      	str	r6, [r4, #124]	; 0x7c
 8001ba4:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba6:	60eb      	str	r3, [r5, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ba8:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001baa:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001bac:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001bae:	61e9      	str	r1, [r5, #28]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001bb0:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001bb2:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001bb4:	626a      	str	r2, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001bb6:	f001 fad5 	bl	8003164 <HAL_DMA_Init>
 8001bba:	b970      	cbnz	r0, 8001bda <HAL_SPI_MspInit+0x14a>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001bc0:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001bc2:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001bc4:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001bc6:	f001 f831 	bl	8002c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001bca:	2023      	movs	r0, #35	; 0x23
 8001bcc:	f001 f86c 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
}
 8001bd0:	b039      	add	sp, #228	; 0xe4
 8001bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001bd4:	f7ff fe82 	bl	80018dc <Error_Handler>
 8001bd8:	e776      	b.n	8001ac8 <HAL_SPI_MspInit+0x38>
      Error_Handler();
 8001bda:	f7ff fe7f 	bl	80018dc <Error_Handler>
 8001bde:	e7ed      	b.n	8001bbc <HAL_SPI_MspInit+0x12c>
      Error_Handler();
 8001be0:	f7ff fe7c 	bl	80018dc <Error_Handler>
 8001be4:	e7cb      	b.n	8001b7e <HAL_SPI_MspInit+0xee>
 8001be6:	bf00      	nop
 8001be8:	40013000 	.word	0x40013000
 8001bec:	58024400 	.word	0x58024400
 8001bf0:	58020400 	.word	0x58020400
 8001bf4:	58021800 	.word	0x58021800
 8001bf8:	20018bd0 	.word	0x20018bd0
 8001bfc:	40020028 	.word	0x40020028
 8001c00:	20018c48 	.word	0x20018c48
 8001c04:	40020040 	.word	0x40020040

08001c08 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <HAL_MspInit+0x20>)
{
 8001c0a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001c10:	f042 0202 	orr.w	r2, r2, #2
 8001c14:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c24:	b002      	add	sp, #8
 8001c26:	4770      	bx	lr
 8001c28:	58024400 	.word	0x58024400

08001c2c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <NMI_Handler>
 8001c2e:	bf00      	nop

08001c30 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <HardFault_Handler>
 8001c32:	bf00      	nop

08001c34 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <MemManage_Handler>
 8001c36:	bf00      	nop

08001c38 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <BusFault_Handler>
 8001c3a:	bf00      	nop

08001c3c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <UsageFault_Handler>
 8001c3e:	bf00      	nop

08001c40 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop

08001c44 <DebugMon_Handler>:
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop

08001c48 <PendSV_Handler>:
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop

08001c4c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4c:	f000 b9b2 	b.w	8001fb4 <HAL_IncTick>

08001c50 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c50:	4801      	ldr	r0, [pc, #4]	; (8001c58 <DMA1_Stream0_IRQHandler+0x8>)
 8001c52:	f002 b8cf 	b.w	8003df4 <HAL_DMA_IRQHandler>
 8001c56:	bf00      	nop
 8001c58:	20000190 	.word	0x20000190

08001c5c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001c5c:	4801      	ldr	r0, [pc, #4]	; (8001c64 <DMA1_Stream1_IRQHandler+0x8>)
 8001c5e:	f002 b8c9 	b.w	8003df4 <HAL_DMA_IRQHandler>
 8001c62:	bf00      	nop
 8001c64:	20018bd0 	.word	0x20018bd0

08001c68 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001c68:	4801      	ldr	r0, [pc, #4]	; (8001c70 <DMA1_Stream2_IRQHandler+0x8>)
 8001c6a:	f002 b8c3 	b.w	8003df4 <HAL_DMA_IRQHandler>
 8001c6e:	bf00      	nop
 8001c70:	20018c48 	.word	0x20018c48

08001c74 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c74:	4801      	ldr	r0, [pc, #4]	; (8001c7c <SPI1_IRQHandler+0x8>)
 8001c76:	f005 b9e7 	b.w	8007048 <HAL_SPI_IRQHandler>
 8001c7a:	bf00      	nop
 8001c7c:	20018cc0 	.word	0x20018cc0

08001c80 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001c80:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c84:	f002 bd4c 	b.w	8004720 <HAL_GPIO_EXTI_IRQHandler>

08001c88 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c88:	4927      	ldr	r1, [pc, #156]	; (8001d28 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c8a:	4a28      	ldr	r2, [pc, #160]	; (8001d2c <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c8c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8001c94:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c9a:	6813      	ldr	r3, [r2, #0]
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	2b06      	cmp	r3, #6
 8001ca2:	d805      	bhi.n	8001cb0 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ca4:	6813      	ldr	r3, [r2, #0]
 8001ca6:	f023 030f 	bic.w	r3, r3, #15
 8001caa:	f043 0307 	orr.w	r3, r3, #7
 8001cae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cb2:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001cb4:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8001cb6:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cb8:	481c      	ldr	r0, [pc, #112]	; (8001d2c <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8001cba:	f041 0101 	orr.w	r1, r1, #1
 8001cbe:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001cc0:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001cc2:	6819      	ldr	r1, [r3, #0]
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cc8:	6803      	ldr	r3, [r0, #0]
 8001cca:	071b      	lsls	r3, r3, #28
 8001ccc:	d505      	bpl.n	8001cda <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cce:	6803      	ldr	r3, [r0, #0]
 8001cd0:	f023 030f 	bic.w	r3, r3, #15
 8001cd4:	f043 0307 	orr.w	r3, r3, #7
 8001cd8:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <SystemInit+0xa8>)
 8001cdc:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001cde:	4916      	ldr	r1, [pc, #88]	; (8001d38 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8001ce0:	4c16      	ldr	r4, [pc, #88]	; (8001d3c <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8001ce2:	4817      	ldr	r0, [pc, #92]	; (8001d40 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8001ce4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001ce6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001ce8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001cea:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8001cec:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001cee:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001cf2:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001cf4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001cf6:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cfa:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001cfc:	4c11      	ldr	r4, [pc, #68]	; (8001d44 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8001cfe:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d02:	4911      	ldr	r1, [pc, #68]	; (8001d48 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8001d04:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8001d06:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	4019      	ands	r1, r3
 8001d0c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001d10:	d203      	bcs.n	8001d1a <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <SystemInit+0xc4>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <SystemInit+0xc8>)
 8001d1c:	f243 02d2 	movw	r2, #12498	; 0x30d2
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001d20:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d24:	601a      	str	r2, [r3, #0]
}
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00
 8001d2c:	52002000 	.word	0x52002000
 8001d30:	58024400 	.word	0x58024400
 8001d34:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d38:	01010280 	.word	0x01010280
 8001d3c:	02020200 	.word	0x02020200
 8001d40:	01ff0000 	.word	0x01ff0000
 8001d44:	5c001000 	.word	0x5c001000
 8001d48:	ffff0000 	.word	0xffff0000
 8001d4c:	51008000 	.word	0x51008000
 8001d50:	52004000 	.word	0x52004000
 8001d54:	00000000 	.word	0x00000000

08001d58 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d58:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5a:	2400      	movs	r4, #0
{
 8001d5c:	b0a1      	sub	sp, #132	; 0x84
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d5e:	222c      	movs	r2, #44	; 0x2c

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d60:	4d43      	ldr	r5, [pc, #268]	; (8001e70 <MX_TIM1_Init+0x118>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d62:	4621      	mov	r1, r4
 8001d64:	a814      	add	r0, sp, #80	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d66:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d68:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6a:	e9cd 4403 	strd	r4, r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d6e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001d72:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8001d76:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d7a:	f006 fa1f 	bl	80081bc <memset>
  htim1.Instance = TIM1;
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <MX_TIM1_Init+0x11c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001d80:	4628      	mov	r0, r5
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d82:	61ac      	str	r4, [r5, #24]
  htim1.Instance = TIM1;
 8001d84:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = 65535;
 8001d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8a:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim1.Init.RepetitionCounter = 0;
 8001d8e:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.Period = 65535;
 8001d92:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001d94:	f005 fb04 	bl	80073a0 <HAL_TIM_OC_Init>
 8001d98:	2800      	cmp	r0, #0
 8001d9a:	d13d      	bne.n	8001e18 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2200      	movs	r2, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001da0:	a902      	add	r1, sp, #8
 8001da2:	4833      	ldr	r0, [pc, #204]	; (8001e70 <MX_TIM1_Init+0x118>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dac:	f005 fcb8 	bl	8007720 <HAL_TIMEx_MasterConfigSynchronization>
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d13a      	bne.n	8001e2a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001db4:	2200      	movs	r2, #0
 8001db6:	2300      	movs	r3, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001db8:	a90c      	add	r1, sp, #48	; 0x30
 8001dba:	482d      	ldr	r0, [pc, #180]	; (8001e70 <MX_TIM1_Init+0x118>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dbc:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001dbe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001dc2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001dc6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dca:	f005 fbe1 	bl	8007590 <HAL_TIM_OC_ConfigChannel>
 8001dce:	bb48      	cbnz	r0, 8001e24 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dd4:	a914      	add	r1, sp, #80	; 0x50
 8001dd6:	4826      	ldr	r0, [pc, #152]	; (8001e70 <MX_TIM1_Init+0x118>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dd8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8001ddc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8001de0:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001de4:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001de6:	2200      	movs	r2, #0
 8001de8:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8001e60 <MX_TIM1_Init+0x108>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dec:	931e      	str	r3, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df2:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8001df6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dfa:	f005 fceb 	bl	80077d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dfe:	b970      	cbnz	r0, 8001e1e <MX_TIM1_Init+0xc6>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8001e00:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <MX_TIM1_Init+0x11c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e02:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8001e04:	6829      	ldr	r1, [r5, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e06:	930a      	str	r3, [sp, #40]	; 0x28
  if(timHandle->Instance==TIM1)
 8001e08:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001e0e:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if(timHandle->Instance==TIM1)
 8001e12:	d00d      	beq.n	8001e30 <MX_TIM1_Init+0xd8>
}
 8001e14:	b021      	add	sp, #132	; 0x84
 8001e16:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001e18:	f7ff fd60 	bl	80018dc <Error_Handler>
 8001e1c:	e7be      	b.n	8001d9c <MX_TIM1_Init+0x44>
    Error_Handler();
 8001e1e:	f7ff fd5d 	bl	80018dc <Error_Handler>
 8001e22:	e7ed      	b.n	8001e00 <MX_TIM1_Init+0xa8>
    Error_Handler();
 8001e24:	f7ff fd5a 	bl	80018dc <Error_Handler>
 8001e28:	e7d2      	b.n	8001dd0 <MX_TIM1_Init+0x78>
    Error_Handler();
 8001e2a:	f7ff fd57 	bl	80018dc <Error_Handler>
 8001e2e:	e7c1      	b.n	8001db4 <MX_TIM1_Init+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_TIM1_Init+0x120>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e32:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	a906      	add	r1, sp, #24
 8001e36:	4811      	ldr	r0, [pc, #68]	; (8001e7c <MX_TIM1_Init+0x124>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001e3c:	4322      	orrs	r2, r4
 8001e3e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e46:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e48:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e4a:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8001e68 <MX_TIM1_Init+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e52:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f002 fb1f 	bl	8004498 <HAL_GPIO_Init>
}
 8001e5a:	b021      	add	sp, #132	; 0x84
 8001e5c:	bd30      	pop	{r4, r5, pc}
 8001e5e:	bf00      	nop
 8001e60:	02000000 	.word	0x02000000
 8001e64:	00000000 	.word	0x00000000
 8001e68:	00000100 	.word	0x00000100
 8001e6c:	00000002 	.word	0x00000002
 8001e70:	20018d48 	.word	0x20018d48
 8001e74:	40010000 	.word	0x40010000
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	58020000 	.word	0x58020000

08001e80 <HAL_TIM_OC_MspInit>:
  if(tim_ocHandle->Instance==TIM1)
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_TIM_OC_MspInit+0x2c>)
 8001e82:	6802      	ldr	r2, [r0, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d000      	beq.n	8001e8a <HAL_TIM_OC_MspInit+0xa>
 8001e88:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_TIM_OC_MspInit+0x30>)
{
 8001e8c:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e8e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	9b01      	ldr	r3, [sp, #4]
}
 8001ea6:	b002      	add	sp, #8
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	58024400 	.word	0x58024400

08001eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001eb8:	f7ff fee6 	bl	8001c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ebc:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ebe:	490d      	ldr	r1, [pc, #52]	; (8001ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec4:	e002      	b.n	8001ecc <LoopCopyDataInit>

08001ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eca:	3304      	adds	r3, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed0:	d3f9      	bcc.n	8001ec6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ed4:	4c0a      	ldr	r4, [pc, #40]	; (8001f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed8:	e001      	b.n	8001ede <LoopFillZerobss>

08001eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001edc:	3204      	adds	r2, #4

08001ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee0:	d3fb      	bcc.n	8001eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f006 f947 	bl	8008174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee6:	f7fe ff65 	bl	8000db4 <main>
  bx  lr
 8001eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001ef8:	080099bc 	.word	0x080099bc
  ldr r2, =_sbss
 8001efc:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001f00:	20018d98 	.word	0x20018d98

08001f04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC3_IRQHandler>
	...

08001f08 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <HAL_InitTick+0x40>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b90b      	cbnz	r3, 8001f12 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001f0e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001f10:	4770      	bx	lr
{
 8001f12:	b510      	push	{r4, lr}
 8001f14:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f1a:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <HAL_InitTick+0x44>)
 8001f1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f20:	6810      	ldr	r0, [r2, #0]
 8001f22:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f26:	f000 fecd 	bl	8002cc4 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	2c0f      	cmp	r4, #15
 8001f2c:	d800      	bhi.n	8001f30 <HAL_InitTick+0x28>
 8001f2e:	b108      	cbz	r0, 8001f34 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001f30:	2001      	movs	r0, #1
}
 8001f32:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f34:	2200      	movs	r2, #0
 8001f36:	4621      	mov	r1, r4
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f3c:	f000 fe76 	bl	8002c2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_InitTick+0x48>)
 8001f42:	2000      	movs	r0, #0
 8001f44:	601c      	str	r4, [r3, #0]
}
 8001f46:	bd10      	pop	{r4, pc}
 8001f48:	2000003c 	.word	0x2000003c
 8001f4c:	20000034 	.word	0x20000034
 8001f50:	20000040 	.word	0x20000040

08001f54 <HAL_Init>:
{
 8001f54:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f56:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f58:	4c12      	ldr	r4, [pc, #72]	; (8001fa4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5a:	f000 fe55 	bl	8002c08 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f5e:	f003 f897 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_Init+0x54>)
 8001f64:	4911      	ldr	r1, [pc, #68]	; (8001fac <HAL_Init+0x58>)
 8001f66:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f68:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f6a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f6e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f72:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f74:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f76:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8001f7a:	490d      	ldr	r1, [pc, #52]	; (8001fb0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f7c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f80:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f82:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8001f86:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f88:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f8a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f8c:	f7ff ffbc 	bl	8001f08 <HAL_InitTick>
 8001f90:	b110      	cbz	r0, 8001f98 <HAL_Init+0x44>
    return HAL_ERROR;
 8001f92:	2401      	movs	r4, #1
}
 8001f94:	4620      	mov	r0, r4
 8001f96:	bd10      	pop	{r4, pc}
 8001f98:	4604      	mov	r4, r0
  HAL_MspInit();
 8001f9a:	f7ff fe35 	bl	8001c08 <HAL_MspInit>
}
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	bd10      	pop	{r4, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000038 	.word	0x20000038
 8001fa8:	58024400 	.word	0x58024400
 8001fac:	08009238 	.word	0x08009238
 8001fb0:	20000034 	.word	0x20000034

08001fb4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001fb4:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <HAL_IncTick+0x10>)
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <HAL_IncTick+0x14>)
 8001fb8:	6811      	ldr	r1, [r2, #0]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	440b      	add	r3, r1
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20018d94 	.word	0x20018d94
 8001fc8:	2000003c 	.word	0x2000003c

08001fcc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001fcc:	4b01      	ldr	r3, [pc, #4]	; (8001fd4 <HAL_GetTick+0x8>)
 8001fce:	6818      	ldr	r0, [r3, #0]
}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20018d94 	.word	0x20018d94

08001fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd8:	b538      	push	{r3, r4, r5, lr}
 8001fda:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff fff6 	bl	8001fcc <HAL_GetTick>
 8001fe0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fe2:	1c63      	adds	r3, r4, #1
 8001fe4:	d002      	beq.n	8001fec <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <HAL_Delay+0x20>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fec:	f7ff ffee 	bl	8001fcc <HAL_GetTick>
 8001ff0:	1b43      	subs	r3, r0, r5
 8001ff2:	42a3      	cmp	r3, r4
 8001ff4:	d3fa      	bcc.n	8001fec <HAL_Delay+0x14>
  {
  }
}
 8001ff6:	bd38      	pop	{r3, r4, r5, pc}
 8001ff8:	2000003c 	.word	0x2000003c

08001ffc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001ffc:	4b01      	ldr	r3, [pc, #4]	; (8002004 <HAL_GetREVID+0x8>)
 8001ffe:	6818      	ldr	r0, [r3, #0]
}
 8002000:	0c00      	lsrs	r0, r0, #16
 8002002:	4770      	bx	lr
 8002004:	5c001000 	.word	0x5c001000

08002008 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002008:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800200a:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800200c:	f7ff fb1c 	bl	8001648 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002010:	bd08      	pop	{r3, pc}
 8002012:	bf00      	nop

08002014 <HAL_ADC_ErrorCallback>:
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop

08002018 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002018:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800201a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800201c:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8002022:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002024:	d11d      	bne.n	8002062 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002026:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800202e:	680a      	ldr	r2, [r1, #0]
 8002030:	f012 0f08 	tst.w	r2, #8
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002034:	68ca      	ldr	r2, [r1, #12]
 8002036:	d01b      	beq.n	8002070 <ADC_DMAConvCplt+0x58>
 8002038:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800203c:	d10d      	bne.n	800205a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800203e:	68ca      	ldr	r2, [r1, #12]
 8002040:	0494      	lsls	r4, r2, #18
 8002042:	d40a      	bmi.n	800205a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800204c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800204e:	04d1      	lsls	r1, r2, #19
 8002050:	d403      	bmi.n	800205a <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002052:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002054:	f042 0201 	orr.w	r2, r2, #1
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff faea 	bl	8001634 <HAL_ADC_ConvCpltCallback>
}
 8002060:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002062:	06d2      	lsls	r2, r2, #27
 8002064:	d40a      	bmi.n	800207c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002070:	0790      	lsls	r0, r2, #30
 8002072:	d0e7      	beq.n	8002044 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fadd 	bl	8001634 <HAL_ADC_ConvCpltCallback>
 800207a:	e7f1      	b.n	8002060 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ffc9 	bl	8002014 <HAL_ADC_ErrorCallback>
}
 8002082:	bd10      	pop	{r4, pc}

08002084 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002084:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002086:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002088:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800208a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800208e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002090:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002098:	f7ff ffbc 	bl	8002014 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800209c:	bd08      	pop	{r3, pc}
 800209e:	bf00      	nop

080020a0 <HAL_ADC_ConfigChannel>:
{
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80020a2:	2200      	movs	r2, #0
{
 80020a4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80020a6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80020a8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80020ac:	2a01      	cmp	r2, #1
 80020ae:	f000 813b 	beq.w	8002328 <HAL_ADC_ConfigChannel+0x288>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020b6:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80020b8:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020bc:	6894      	ldr	r4, [r2, #8]
 80020be:	0764      	lsls	r4, r4, #29
 80020c0:	f100 8099 	bmi.w	80021f6 <HAL_ADC_ConfigChannel+0x156>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80020c4:	680c      	ldr	r4, [r1, #0]
 80020c6:	f3c4 0513 	ubfx	r5, r4, #0, #20
 80020ca:	2d00      	cmp	r5, #0
 80020cc:	f040 809e 	bne.w	800220c <HAL_ADC_ConfigChannel+0x16c>
 80020d0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80020d4:	40a0      	lsls	r0, r4
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020d6:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(*preg,
 80020d8:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80020dc:	69d6      	ldr	r6, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020de:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 80020e2:	4330      	orrs	r0, r6
 80020e4:	f00c 0c0c 	and.w	ip, ip, #12
 80020e8:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
 80020ea:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020ee:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 80020f2:	4084      	lsls	r4, r0
 80020f4:	fa0e fe00 	lsl.w	lr, lr, r0
 80020f8:	f85c 0005 	ldr.w	r0, [ip, r5]
 80020fc:	ea20 000e 	bic.w	r0, r0, lr
 8002100:	4304      	orrs	r4, r0
 8002102:	f84c 4005 	str.w	r4, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002106:	6890      	ldr	r0, [r2, #8]
 8002108:	0740      	lsls	r0, r0, #29
 800210a:	d47d      	bmi.n	8002208 <HAL_ADC_ConfigChannel+0x168>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800210c:	6895      	ldr	r5, [r2, #8]
 800210e:	f015 0508 	ands.w	r5, r5, #8
 8002112:	d156      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x122>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002114:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(*preg,
 8002116:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002118:	f102 0614 	add.w	r6, r2, #20
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800211c:	4fb7      	ldr	r7, [pc, #732]	; (80023fc <HAL_ADC_ConfigChannel+0x35c>)
 800211e:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8002122:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002126:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 800212a:	fa00 fe04 	lsl.w	lr, r0, r4
 800212e:	6888      	ldr	r0, [r1, #8]
 8002130:	fa00 f404 	lsl.w	r4, r0, r4
 8002134:	f85c 0006 	ldr.w	r0, [ip, r6]
 8002138:	ea20 000e 	bic.w	r0, r0, lr
 800213c:	4320      	orrs	r0, r4
 800213e:	f84c 0006 	str.w	r0, [ip, r6]
 8002142:	6838      	ldr	r0, [r7, #0]
 8002144:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8002148:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800214c:	f000 8095 	beq.w	800227a <HAL_ADC_ConfigChannel+0x1da>
 8002150:	68d0      	ldr	r0, [r2, #12]
 8002152:	68d6      	ldr	r6, [r2, #12]
 8002154:	06c7      	lsls	r7, r0, #27
 8002156:	f100 8107 	bmi.w	8002368 <HAL_ADC_ConfigChannel+0x2c8>
 800215a:	f3c6 0682 	ubfx	r6, r6, #2, #3
 800215e:	6948      	ldr	r0, [r1, #20]
 8002160:	0076      	lsls	r6, r6, #1
 8002162:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002166:	690f      	ldr	r7, [r1, #16]
 8002168:	2f04      	cmp	r7, #4
 800216a:	f000 80e0 	beq.w	800232e <HAL_ADC_ConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800216e:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8002172:	6808      	ldr	r0, [r1, #0]
 8002174:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8002178:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800217c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8002180:	ea40 000c 	orr.w	r0, r0, ip
 8002184:	4330      	orrs	r0, r6
 8002186:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800218a:	7e48      	ldrb	r0, [r1, #25]
 800218c:	690e      	ldr	r6, [r1, #16]
 800218e:	2801      	cmp	r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002190:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8002194:	bf0c      	ite	eq
 8002196:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 800219a:	2700      	movne	r7, #0
 800219c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80021a0:	4338      	orrs	r0, r7
 80021a2:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80021a6:	7e0c      	ldrb	r4, [r1, #24]
 80021a8:	6908      	ldr	r0, [r1, #16]
 80021aa:	2c01      	cmp	r4, #1
 80021ac:	d104      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x118>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80021ae:	f000 001f 	and.w	r0, r0, #31
 80021b2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80021b6:	4085      	lsls	r5, r0
 80021b8:	6910      	ldr	r0, [r2, #16]
 80021ba:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 80021be:	4305      	orrs	r5, r0
 80021c0:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021c2:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c4:	07c4      	lsls	r4, r0, #31
 80021c6:	d414      	bmi.n	80021f2 <HAL_ADC_ConfigChannel+0x152>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021c8:	68ce      	ldr	r6, [r1, #12]
 80021ca:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80021cc:	f006 0718 	and.w	r7, r6, #24
 80021d0:	488b      	ldr	r0, [pc, #556]	; (8002400 <HAL_ADC_ConfigChannel+0x360>)
 80021d2:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 80021d6:	40f8      	lsrs	r0, r7
 80021d8:	f3c4 0713 	ubfx	r7, r4, #0, #20
 80021dc:	4020      	ands	r0, r4
 80021de:	ea25 0507 	bic.w	r5, r5, r7
 80021e2:	4328      	orrs	r0, r5
 80021e4:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021e8:	4886      	ldr	r0, [pc, #536]	; (8002404 <HAL_ADC_ConfigChannel+0x364>)
 80021ea:	4286      	cmp	r6, r0
 80021ec:	d04d      	beq.n	800228a <HAL_ADC_ConfigChannel+0x1ea>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021ee:	2c00      	cmp	r4, #0
 80021f0:	db15      	blt.n	800221e <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f2:	2000      	movs	r0, #0
 80021f4:	e003      	b.n	80021fe <HAL_ADC_ConfigChannel+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021f8:	f042 0220 	orr.w	r2, r2, #32
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8002204:	b003      	add	sp, #12
 8002206:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002208:	6890      	ldr	r0, [r2, #8]
 800220a:	e7da      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x122>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002210:	b115      	cbz	r5, 8002218 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002212:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002216:	40a8      	lsls	r0, r5
 8002218:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800221c:	e75b      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800221e:	497a      	ldr	r1, [pc, #488]	; (8002408 <HAL_ADC_ConfigChannel+0x368>)
 8002220:	428a      	cmp	r2, r1
 8002222:	f000 80c7 	beq.w	80023b4 <HAL_ADC_ConfigChannel+0x314>
 8002226:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800222a:	428a      	cmp	r2, r1
 800222c:	f000 80c2 	beq.w	80023b4 <HAL_ADC_ConfigChannel+0x314>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002230:	4d76      	ldr	r5, [pc, #472]	; (800240c <HAL_ADC_ConfigChannel+0x36c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002232:	4877      	ldr	r0, [pc, #476]	; (8002410 <HAL_ADC_ConfigChannel+0x370>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002234:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002236:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002238:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800223c:	43c0      	mvns	r0, r0
 800223e:	f000 0001 	and.w	r0, r0, #1
 8002242:	2800      	cmp	r0, #0
 8002244:	f000 80c5 	beq.w	80023d2 <HAL_ADC_ConfigChannel+0x332>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002248:	4872      	ldr	r0, [pc, #456]	; (8002414 <HAL_ADC_ConfigChannel+0x374>)
 800224a:	4284      	cmp	r4, r0
 800224c:	f000 810e 	beq.w	800246c <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002250:	4871      	ldr	r0, [pc, #452]	; (8002418 <HAL_ADC_ConfigChannel+0x378>)
 8002252:	4284      	cmp	r4, r0
 8002254:	f000 812d 	beq.w	80024b2 <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002258:	4870      	ldr	r0, [pc, #448]	; (800241c <HAL_ADC_ConfigChannel+0x37c>)
 800225a:	4284      	cmp	r4, r0
 800225c:	d1c9      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 800225e:	0249      	lsls	r1, r1, #9
 8002260:	d4c7      	bmi.n	80021f2 <HAL_ADC_ConfigChannel+0x152>
 8002262:	496b      	ldr	r1, [pc, #428]	; (8002410 <HAL_ADC_ConfigChannel+0x370>)
 8002264:	428a      	cmp	r2, r1
 8002266:	d1c4      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002268:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226a:	2000      	movs	r0, #0
 800226c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002270:	4332      	orrs	r2, r6
 8002272:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002276:	60aa      	str	r2, [r5, #8]
}
 8002278:	e7c1      	b.n	80021fe <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800227a:	68d6      	ldr	r6, [r2, #12]
 800227c:	6948      	ldr	r0, [r1, #20]
 800227e:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8002282:	0076      	lsls	r6, r6, #1
 8002284:	fa00 f606 	lsl.w	r6, r0, r6
 8002288:	e76d      	b.n	8002166 <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800228a:	2f00      	cmp	r7, #0
 800228c:	d073      	beq.n	8002376 <HAL_ADC_ConfigChannel+0x2d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8002292:	2800      	cmp	r0, #0
 8002294:	f000 80c6 	beq.w	8002424 <HAL_ADC_ConfigChannel+0x384>
  return __builtin_clz(value);
 8002298:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800229c:	3001      	adds	r0, #1
 800229e:	f000 001f 	and.w	r0, r0, #31
 80022a2:	2809      	cmp	r0, #9
 80022a4:	f240 80be 	bls.w	8002424 <HAL_ADC_ConfigChannel+0x384>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 80022ac:	2800      	cmp	r0, #0
 80022ae:	f000 8114 	beq.w	80024da <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80022b2:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022b6:	3001      	adds	r0, #1
 80022b8:	0680      	lsls	r0, r0, #26
 80022ba:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80022c2:	2d00      	cmp	r5, #0
 80022c4:	f000 8107 	beq.w	80024d6 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 80022c8:	fab5 f585 	clz	r5, r5
 80022cc:	2601      	movs	r6, #1
 80022ce:	3501      	adds	r5, #1
 80022d0:	f005 051f 	and.w	r5, r5, #31
 80022d4:	fa06 f505 	lsl.w	r5, r6, r5
 80022d8:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80022de:	2c00      	cmp	r4, #0
 80022e0:	f000 80f7 	beq.w	80024d2 <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 80022e4:	fab4 f484 	clz	r4, r4
 80022e8:	f06f 061d 	mvn.w	r6, #29
 80022ec:	1c60      	adds	r0, r4, #1
 80022ee:	f000 041f 	and.w	r4, r0, #31
 80022f2:	2003      	movs	r0, #3
 80022f4:	fb10 6004 	smlabb	r0, r0, r4, r6
 80022f8:	0500      	lsls	r0, r0, #20
 80022fa:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022fe:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8002300:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002302:	f102 0514 	add.w	r5, r2, #20
 8002306:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8002308:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800230c:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8002310:	fa04 f700 	lsl.w	r7, r4, r0
 8002314:	5974      	ldr	r4, [r6, r5]
 8002316:	ea24 0407 	bic.w	r4, r4, r7
 800231a:	688f      	ldr	r7, [r1, #8]
 800231c:	fa07 f000 	lsl.w	r0, r7, r0
 8002320:	4320      	orrs	r0, r4
 8002322:	5170      	str	r0, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002324:	680c      	ldr	r4, [r1, #0]
}
 8002326:	e762      	b.n	80021ee <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8002328:	2002      	movs	r0, #2
}
 800232a:	b003      	add	sp, #12
 800232c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800232e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002330:	680c      	ldr	r4, [r1, #0]
 8002332:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002336:	06a5      	lsls	r5, r4, #26
 8002338:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 800233c:	d030      	beq.n	80023a0 <HAL_ADC_ConfigChannel+0x300>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800233e:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002340:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002344:	4285      	cmp	r5, r0
 8002346:	d026      	beq.n	8002396 <HAL_ADC_ConfigChannel+0x2f6>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002348:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800234a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800234e:	4285      	cmp	r5, r0
 8002350:	d02b      	beq.n	80023aa <HAL_ADC_ConfigChannel+0x30a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002352:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002354:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002358:	4285      	cmp	r5, r0
 800235a:	f47f af32 	bne.w	80021c2 <HAL_ADC_ConfigChannel+0x122>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800235e:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002360:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002364:	66d0      	str	r0, [r2, #108]	; 0x6c
 8002366:	e72c      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x122>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002368:	0876      	lsrs	r6, r6, #1
 800236a:	6948      	ldr	r0, [r1, #20]
 800236c:	f006 0608 	and.w	r6, r6, #8
 8002370:	fa00 f606 	lsl.w	r6, r0, r6
 8002374:	e6f7      	b.n	8002166 <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002376:	0ea4      	lsrs	r4, r4, #26
 8002378:	3401      	adds	r4, #1
 800237a:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800237e:	2e09      	cmp	r6, #9
 8002380:	d82d      	bhi.n	80023de <HAL_ADC_ConfigChannel+0x33e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002382:	06a5      	lsls	r5, r4, #26
 8002384:	2001      	movs	r0, #1
 8002386:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800238a:	40b0      	lsls	r0, r6
 800238c:	4305      	orrs	r5, r0
 800238e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8002392:	0500      	lsls	r0, r0, #20
 8002394:	e7b3      	b.n	80022fe <HAL_ADC_ConfigChannel+0x25e>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002396:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002398:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800239c:	6650      	str	r0, [r2, #100]	; 0x64
 800239e:	e7d3      	b.n	8002348 <HAL_ADC_ConfigChannel+0x2a8>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023a0:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80023a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80023a6:	6610      	str	r0, [r2, #96]	; 0x60
 80023a8:	e7c9      	b.n	800233e <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80023aa:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80023ac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80023b0:	6690      	str	r0, [r2, #104]	; 0x68
 80023b2:	e7ce      	b.n	8002352 <HAL_ADC_ConfigChannel+0x2b2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023b4:	4814      	ldr	r0, [pc, #80]	; (8002408 <HAL_ADC_ConfigChannel+0x368>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023b6:	4d1a      	ldr	r5, [pc, #104]	; (8002420 <HAL_ADC_ConfigChannel+0x380>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023b8:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023bc:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023be:	f850 6cf8 	ldr.w	r6, [r0, #-248]
 80023c2:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023c4:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023c6:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 80023ca:	43c0      	mvns	r0, r0
 80023cc:	f000 0001 	and.w	r0, r0, #1
 80023d0:	e737      	b.n	8002242 <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80023d4:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d6:	f042 0220 	orr.w	r2, r2, #32
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80023dc:	e70f      	b.n	80021fe <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023de:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80023e2:	06a5      	lsls	r5, r4, #26
 80023e4:	2401      	movs	r4, #1
 80023e6:	381e      	subs	r0, #30
 80023e8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80023ec:	fa04 f606 	lsl.w	r6, r4, r6
 80023f0:	0500      	lsls	r0, r0, #20
 80023f2:	4335      	orrs	r5, r6
 80023f4:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80023f8:	e781      	b.n	80022fe <HAL_ADC_ConfigChannel+0x25e>
 80023fa:	bf00      	nop
 80023fc:	5c001000 	.word	0x5c001000
 8002400:	000fffff 	.word	0x000fffff
 8002404:	47ff0000 	.word	0x47ff0000
 8002408:	40022000 	.word	0x40022000
 800240c:	58026300 	.word	0x58026300
 8002410:	58026000 	.word	0x58026000
 8002414:	cb840000 	.word	0xcb840000
 8002418:	c7520000 	.word	0xc7520000
 800241c:	cfb80000 	.word	0xcfb80000
 8002420:	40022300 	.word	0x40022300
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8002428:	2800      	cmp	r0, #0
 800242a:	d05e      	beq.n	80024ea <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 800242c:	fab0 f080 	clz	r0, r0
 8002430:	3001      	adds	r0, #1
 8002432:	0680      	lsls	r0, r0, #26
 8002434:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800243c:	2d00      	cmp	r5, #0
 800243e:	d052      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002440:	fab5 f585 	clz	r5, r5
 8002444:	2601      	movs	r6, #1
 8002446:	3501      	adds	r5, #1
 8002448:	f005 051f 	and.w	r5, r5, #31
 800244c:	fa06 f505 	lsl.w	r5, r6, r5
 8002450:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8002456:	2c00      	cmp	r4, #0
 8002458:	d042      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 800245a:	fab4 f484 	clz	r4, r4
 800245e:	3401      	adds	r4, #1
 8002460:	f004 041f 	and.w	r4, r4, #31
 8002464:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002468:	0520      	lsls	r0, r4, #20
 800246a:	e748      	b.n	80022fe <HAL_ADC_ConfigChannel+0x25e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800246c:	0208      	lsls	r0, r1, #8
 800246e:	f53f aec0 	bmi.w	80021f2 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002472:	491f      	ldr	r1, [pc, #124]	; (80024f0 <HAL_ADC_ConfigChannel+0x450>)
 8002474:	428a      	cmp	r2, r1
 8002476:	f47f aebc 	bne.w	80021f2 <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800247a:	4a1e      	ldr	r2, [pc, #120]	; (80024f4 <HAL_ADC_ConfigChannel+0x454>)
 800247c:	481e      	ldr	r0, [pc, #120]	; (80024f8 <HAL_ADC_ConfigChannel+0x458>)
 800247e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002480:	68a9      	ldr	r1, [r5, #8]
 8002482:	0992      	lsrs	r2, r2, #6
 8002484:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002488:	fba0 0202 	umull	r0, r2, r0, r2
 800248c:	4331      	orrs	r1, r6
 800248e:	0992      	lsrs	r2, r2, #6
 8002490:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002494:	3201      	adds	r2, #1
 8002496:	60a9      	str	r1, [r5, #8]
 8002498:	0052      	lsls	r2, r2, #1
 800249a:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 800249c:	9a01      	ldr	r2, [sp, #4]
 800249e:	2a00      	cmp	r2, #0
 80024a0:	f43f aea7 	beq.w	80021f2 <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 80024a4:	9a01      	ldr	r2, [sp, #4]
 80024a6:	3a01      	subs	r2, #1
 80024a8:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80024aa:	9a01      	ldr	r2, [sp, #4]
 80024ac:	2a00      	cmp	r2, #0
 80024ae:	d1f9      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x404>
 80024b0:	e69f      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024b2:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 80024b6:	f47f ae9c 	bne.w	80021f2 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024ba:	490d      	ldr	r1, [pc, #52]	; (80024f0 <HAL_ADC_ConfigChannel+0x450>)
 80024bc:	428a      	cmp	r2, r1
 80024be:	f47f ae98 	bne.w	80021f2 <HAL_ADC_ConfigChannel+0x152>
 80024c2:	68aa      	ldr	r2, [r5, #8]
 80024c4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80024c8:	4332      	orrs	r2, r6
 80024ca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80024ce:	60aa      	str	r2, [r5, #8]
}
 80024d0:	e695      	b.n	80021fe <HAL_ADC_ConfigChannel+0x15e>
 80024d2:	480a      	ldr	r0, [pc, #40]	; (80024fc <HAL_ADC_ConfigChannel+0x45c>)
 80024d4:	e713      	b.n	80022fe <HAL_ADC_ConfigChannel+0x25e>
 80024d6:	2502      	movs	r5, #2
 80024d8:	e6fe      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x238>
 80024da:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80024de:	e6ee      	b.n	80022be <HAL_ADC_ConfigChannel+0x21e>
 80024e0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80024e4:	e70b      	b.n	80022fe <HAL_ADC_ConfigChannel+0x25e>
 80024e6:	2502      	movs	r5, #2
 80024e8:	e7b2      	b.n	8002450 <HAL_ADC_ConfigChannel+0x3b0>
 80024ea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80024ee:	e7a3      	b.n	8002438 <HAL_ADC_ConfigChannel+0x398>
 80024f0:	58026000 	.word	0x58026000
 80024f4:	20000034 	.word	0x20000034
 80024f8:	053e2d63 	.word	0x053e2d63
 80024fc:	fe500000 	.word	0xfe500000

08002500 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002500:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	07d1      	lsls	r1, r2, #31
 8002506:	d501      	bpl.n	800250c <ADC_Enable+0xc>
  return HAL_OK;
 8002508:	2000      	movs	r0, #0
}
 800250a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800250c:	6899      	ldr	r1, [r3, #8]
 800250e:	4a21      	ldr	r2, [pc, #132]	; (8002594 <ADC_Enable+0x94>)
 8002510:	4211      	tst	r1, r2
{
 8002512:	b570      	push	{r4, r5, r6, lr}
 8002514:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002516:	d12c      	bne.n	8002572 <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8002518:	6899      	ldr	r1, [r3, #8]
 800251a:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <ADC_Enable+0x98>)
 800251c:	400a      	ands	r2, r1
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002524:	f7ff fd52 	bl	8001fcc <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	4a1c      	ldr	r2, [pc, #112]	; (800259c <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 800252c:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800252e:	4293      	cmp	r3, r2
 8002530:	d028      	beq.n	8002584 <ADC_Enable+0x84>
 8002532:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002536:	4293      	cmp	r3, r2
 8002538:	d024      	beq.n	8002584 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800253a:	4a19      	ldr	r2, [pc, #100]	; (80025a0 <ADC_Enable+0xa0>)
 800253c:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	07d6      	lsls	r6, r2, #31
 8002542:	d414      	bmi.n	800256e <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 8002544:	4e14      	ldr	r6, [pc, #80]	; (8002598 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002546:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002548:	07d0      	lsls	r0, r2, #31
 800254a:	d404      	bmi.n	8002556 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	4032      	ands	r2, r6
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002556:	f7ff fd39 	bl	8001fcc <HAL_GetTick>
 800255a:	1b43      	subs	r3, r0, r5
 800255c:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800255e:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002560:	d902      	bls.n	8002568 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	07d1      	lsls	r1, r2, #31
 8002566:	d504      	bpl.n	8002572 <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	07d2      	lsls	r2, r2, #31
 800256c:	d5eb      	bpl.n	8002546 <ADC_Enable+0x46>
  return HAL_OK;
 800256e:	2000      	movs	r0, #0
}
 8002570:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 8002574:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002576:	f043 0310 	orr.w	r3, r3, #16
 800257a:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800257e:	4303      	orrs	r3, r0
 8002580:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8002582:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002584:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <ADC_Enable+0xa4>)
 8002586:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002588:	06d2      	lsls	r2, r2, #27
 800258a:	d0d8      	beq.n	800253e <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800258c:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800258e:	4293      	cmp	r3, r2
 8002590:	d1d5      	bne.n	800253e <ADC_Enable+0x3e>
 8002592:	e7ec      	b.n	800256e <ADC_Enable+0x6e>
 8002594:	8000003f 	.word	0x8000003f
 8002598:	7fffffc0 	.word	0x7fffffc0
 800259c:	40022000 	.word	0x40022000
 80025a0:	58026300 	.word	0x58026300
 80025a4:	40022300 	.word	0x40022300
 80025a8:	40022100 	.word	0x40022100

080025ac <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025ac:	4a39      	ldr	r2, [pc, #228]	; (8002694 <HAL_ADC_Start+0xe8>)
 80025ae:	6803      	ldr	r3, [r0, #0]
 80025b0:	4293      	cmp	r3, r2
{
 80025b2:	b570      	push	{r4, r5, r6, lr}
 80025b4:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025b6:	d046      	beq.n	8002646 <HAL_ADC_Start+0x9a>
 80025b8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80025bc:	4293      	cmp	r3, r2
 80025be:	d042      	beq.n	8002646 <HAL_ADC_Start+0x9a>
 80025c0:	4a35      	ldr	r2, [pc, #212]	; (8002698 <HAL_ADC_Start+0xec>)
 80025c2:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025c4:	689d      	ldr	r5, [r3, #8]
 80025c6:	f015 0504 	ands.w	r5, r5, #4
 80025ca:	d142      	bne.n	8002652 <HAL_ADC_Start+0xa6>
    __HAL_LOCK(hadc);
 80025cc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d03e      	beq.n	8002652 <HAL_ADC_Start+0xa6>
 80025d4:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80025d6:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80025d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 80025dc:	f7ff ff90 	bl	8002500 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80025e0:	2800      	cmp	r0, #0
 80025e2:	d138      	bne.n	8002656 <HAL_ADC_Start+0xaa>
      ADC_STATE_CLR_SET(hadc->State,
 80025e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025e6:	f006 061f 	and.w	r6, r6, #31
 80025ea:	4a2c      	ldr	r2, [pc, #176]	; (800269c <HAL_ADC_Start+0xf0>)
 80025ec:	401a      	ands	r2, r3
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025ee:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80025f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f4:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025f6:	4a2a      	ldr	r2, [pc, #168]	; (80026a0 <HAL_ADC_Start+0xf4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d045      	beq.n	8002688 <HAL_ADC_Start+0xdc>
 80025fc:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025fe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002600:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002604:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002606:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002608:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800260c:	d040      	beq.n	8002690 <HAL_ADC_Start+0xe4>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800260e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002610:	f022 0206 	bic.w	r2, r2, #6
 8002614:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002616:	221c      	movs	r2, #28
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002618:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800261a:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002624:	d020      	beq.n	8002668 <HAL_ADC_Start+0xbc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002626:	2e09      	cmp	r6, #9
 8002628:	d918      	bls.n	800265c <HAL_ADC_Start+0xb0>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800262a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800262c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002630:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002632:	68cb      	ldr	r3, [r1, #12]
 8002634:	019b      	lsls	r3, r3, #6
 8002636:	d505      	bpl.n	8002644 <HAL_ADC_Start+0x98>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002638:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800263a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800263e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002642:	6563      	str	r3, [r4, #84]	; 0x54
}
 8002644:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002646:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <HAL_ADC_Start+0xf8>)
 8002648:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800264a:	689d      	ldr	r5, [r3, #8]
 800264c:	f015 0504 	ands.w	r5, r5, #4
 8002650:	d0bc      	beq.n	80025cc <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
 8002652:	2002      	movs	r0, #2
}
 8002654:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8002656:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
 800265a:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800265c:	f240 2221 	movw	r2, #545	; 0x221
 8002660:	fa22 f606 	lsr.w	r6, r2, r6
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002664:	07f5      	lsls	r5, r6, #31
 8002666:	d5e0      	bpl.n	800262a <HAL_ADC_Start+0x7e>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	0192      	lsls	r2, r2, #6
 800266c:	d505      	bpl.n	800267a <HAL_ADC_Start+0xce>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800266e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002670:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002674:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002678:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 800267a:	6899      	ldr	r1, [r3, #8]
 800267c:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <HAL_ADC_Start+0xfc>)
 800267e:	400a      	ands	r2, r1
 8002680:	f042 0204 	orr.w	r2, r2, #4
 8002684:	609a      	str	r2, [r3, #8]
}
 8002686:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002688:	4902      	ldr	r1, [pc, #8]	; (8002694 <HAL_ADC_Start+0xe8>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800268a:	2e00      	cmp	r6, #0
 800268c:	d0b7      	beq.n	80025fe <HAL_ADC_Start+0x52>
 800268e:	e7ba      	b.n	8002606 <HAL_ADC_Start+0x5a>
        ADC_CLEAR_ERRORCODE(hadc);
 8002690:	65a2      	str	r2, [r4, #88]	; 0x58
 8002692:	e7c0      	b.n	8002616 <HAL_ADC_Start+0x6a>
 8002694:	40022000 	.word	0x40022000
 8002698:	58026300 	.word	0x58026300
 800269c:	fffff0fe 	.word	0xfffff0fe
 80026a0:	40022100 	.word	0x40022100
 80026a4:	40022300 	.word	0x40022300
 80026a8:	7fffffc0 	.word	0x7fffffc0

080026ac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80026ac:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80026ae:	4a56      	ldr	r2, [pc, #344]	; (8002808 <ADC_ConfigureBoostMode+0x15c>)
{
 80026b0:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80026b2:	6803      	ldr	r3, [r0, #0]
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d025      	beq.n	8002704 <ADC_ConfigureBoostMode+0x58>
 80026b8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80026bc:	4293      	cmp	r3, r2
 80026be:	d021      	beq.n	8002704 <ADC_ConfigureBoostMode+0x58>
 80026c0:	4b52      	ldr	r3, [pc, #328]	; (800280c <ADC_ConfigureBoostMode+0x160>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80026c8:	d021      	beq.n	800270e <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026ca:	f002 fea9 	bl	8005420 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80026ce:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80026d0:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80026d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026d6:	f000 8086 	beq.w	80027e6 <ADC_ConfigureBoostMode+0x13a>
 80026da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026de:	d06a      	beq.n	80027b6 <ADC_ConfigureBoostMode+0x10a>
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d07f      	beq.n	80027e6 <ADC_ConfigureBoostMode+0x13a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80026e6:	f7ff fc89 	bl	8001ffc <HAL_GetREVID>
 80026ea:	f241 0303 	movw	r3, #4099	; 0x1003
 80026ee:	4298      	cmp	r0, r3
 80026f0:	d84a      	bhi.n	8002788 <ADC_ConfigureBoostMode+0xdc>
  {
    if (freq > 20000000UL)
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <ADC_ConfigureBoostMode+0x164>)
 80026f4:	429d      	cmp	r5, r3
 80026f6:	d929      	bls.n	800274c <ADC_ConfigureBoostMode+0xa0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026f8:	6822      	ldr	r2, [r4, #0]
 80026fa:	6893      	ldr	r3, [r2, #8]
 80026fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002700:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002702:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002704:	4b43      	ldr	r3, [pc, #268]	; (8002814 <ADC_ConfigureBoostMode+0x168>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800270c:	d1dd      	bne.n	80026ca <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800270e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002712:	f003 ff05 	bl	8006520 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002716:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002718:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800271a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800271e:	d06c      	beq.n	80027fa <ADC_ConfigureBoostMode+0x14e>
 8002720:	d808      	bhi.n	8002734 <ADC_ConfigureBoostMode+0x88>
 8002722:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002726:	d050      	beq.n	80027ca <ADC_ConfigureBoostMode+0x11e>
 8002728:	d916      	bls.n	8002758 <ADC_ConfigureBoostMode+0xac>
 800272a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800272e:	d1da      	bne.n	80026e6 <ADC_ConfigureBoostMode+0x3a>
        freq /= 32UL;
 8002730:	0945      	lsrs	r5, r0, #5
        break;
 8002732:	e7d8      	b.n	80026e6 <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 8002734:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002738:	d045      	beq.n	80027c6 <ADC_ConfigureBoostMode+0x11a>
 800273a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800273e:	d1d2      	bne.n	80026e6 <ADC_ConfigureBoostMode+0x3a>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002740:	f7ff fc5c 	bl	8001ffc <HAL_GetREVID>
 8002744:	f241 0303 	movw	r3, #4099	; 0x1003
 8002748:	4298      	cmp	r0, r3
 800274a:	d840      	bhi.n	80027ce <ADC_ConfigureBoostMode+0x122>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800274c:	6822      	ldr	r2, [r4, #0]
 800274e:	6893      	ldr	r3, [r2, #8]
 8002750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002754:	6093      	str	r3, [r2, #8]
}
 8002756:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8002758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800275c:	d006      	beq.n	800276c <ADC_ConfigureBoostMode+0xc0>
 800275e:	d90a      	bls.n	8002776 <ADC_ConfigureBoostMode+0xca>
 8002760:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002764:	d002      	beq.n	800276c <ADC_ConfigureBoostMode+0xc0>
 8002766:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800276a:	d1bc      	bne.n	80026e6 <ADC_ConfigureBoostMode+0x3a>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800276c:	0c9b      	lsrs	r3, r3, #18
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8002774:	e7b7      	b.n	80026e6 <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 8002776:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800277a:	d0f7      	beq.n	800276c <ADC_ConfigureBoostMode+0xc0>
 800277c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002780:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002784:	d0f2      	beq.n	800276c <ADC_ConfigureBoostMode+0xc0>
 8002786:	e7ae      	b.n	80026e6 <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 8002788:	4b23      	ldr	r3, [pc, #140]	; (8002818 <ADC_ConfigureBoostMode+0x16c>)
 800278a:	429d      	cmp	r5, r3
 800278c:	d805      	bhi.n	800279a <ADC_ConfigureBoostMode+0xee>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800278e:	6822      	ldr	r2, [r4, #0]
 8002790:	6893      	ldr	r3, [r2, #8]
 8002792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002796:	6093      	str	r3, [r2, #8]
}
 8002798:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <ADC_ConfigureBoostMode+0x170>)
 800279c:	429d      	cmp	r5, r3
 800279e:	d91a      	bls.n	80027d6 <ADC_ConfigureBoostMode+0x12a>
    else if (freq <= 25000000UL)
 80027a0:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <ADC_ConfigureBoostMode+0x174>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80027a2:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 80027a4:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80027a6:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 80027a8:	d829      	bhi.n	80027fe <ADC_ConfigureBoostMode+0x152>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80027aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b2:	6093      	str	r3, [r2, #8]
}
 80027b4:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 80027b6:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80027b8:	f7ff fc20 	bl	8001ffc <HAL_GetREVID>
 80027bc:	f241 0303 	movw	r3, #4099	; 0x1003
 80027c0:	4298      	cmp	r0, r3
 80027c2:	d8e1      	bhi.n	8002788 <ADC_ConfigureBoostMode+0xdc>
 80027c4:	e795      	b.n	80026f2 <ADC_ConfigureBoostMode+0x46>
        freq /= 128UL;
 80027c6:	09c5      	lsrs	r5, r0, #7
        break;
 80027c8:	e78d      	b.n	80026e6 <ADC_ConfigureBoostMode+0x3a>
        freq /= 16UL;
 80027ca:	0905      	lsrs	r5, r0, #4
        break;
 80027cc:	e78b      	b.n	80026e6 <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <ADC_ConfigureBoostMode+0x16c>)
 80027d0:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 80027d4:	d2db      	bcs.n	800278e <ADC_ConfigureBoostMode+0xe2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80027d6:	6822      	ldr	r2, [r4, #0]
 80027d8:	6893      	ldr	r3, [r2, #8]
 80027da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e2:	6093      	str	r3, [r2, #8]
}
 80027e4:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80027e6:	0c1b      	lsrs	r3, r3, #16
 80027e8:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80027ec:	f7ff fc06 	bl	8001ffc <HAL_GetREVID>
 80027f0:	f241 0303 	movw	r3, #4099	; 0x1003
 80027f4:	4298      	cmp	r0, r3
 80027f6:	d8c7      	bhi.n	8002788 <ADC_ConfigureBoostMode+0xdc>
 80027f8:	e77b      	b.n	80026f2 <ADC_ConfigureBoostMode+0x46>
        freq /= 64UL;
 80027fa:	0985      	lsrs	r5, r0, #6
        break;
 80027fc:	e773      	b.n	80026e6 <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80027fe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002802:	6093      	str	r3, [r2, #8]
}
 8002804:	bd38      	pop	{r3, r4, r5, pc}
 8002806:	bf00      	nop
 8002808:	40022000 	.word	0x40022000
 800280c:	58026300 	.word	0x58026300
 8002810:	01312d00 	.word	0x01312d00
 8002814:	40022300 	.word	0x40022300
 8002818:	00bebc21 	.word	0x00bebc21
 800281c:	017d7841 	.word	0x017d7841
 8002820:	02faf081 	.word	0x02faf081

08002824 <HAL_ADC_Init>:
{
 8002824:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002826:	2300      	movs	r3, #0
{
 8002828:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800282a:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 800282c:	2800      	cmp	r0, #0
 800282e:	f000 80d1 	beq.w	80029d4 <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002832:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8002834:	4604      	mov	r4, r0
 8002836:	2d00      	cmp	r5, #0
 8002838:	f000 80bb 	beq.w	80029b2 <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800283c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800283e:	6893      	ldr	r3, [r2, #8]
 8002840:	009d      	lsls	r5, r3, #2
 8002842:	d503      	bpl.n	800284c <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002844:	6891      	ldr	r1, [r2, #8]
 8002846:	4b72      	ldr	r3, [pc, #456]	; (8002a10 <HAL_ADC_Init+0x1ec>)
 8002848:	400b      	ands	r3, r1
 800284a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800284c:	6893      	ldr	r3, [r2, #8]
 800284e:	00d8      	lsls	r0, r3, #3
 8002850:	d416      	bmi.n	8002880 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002852:	4b70      	ldr	r3, [pc, #448]	; (8002a14 <HAL_ADC_Init+0x1f0>)
 8002854:	4970      	ldr	r1, [pc, #448]	; (8002a18 <HAL_ADC_Init+0x1f4>)
 8002856:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002858:	6890      	ldr	r0, [r2, #8]
 800285a:	099b      	lsrs	r3, r3, #6
 800285c:	fba1 1303 	umull	r1, r3, r1, r3
 8002860:	496e      	ldr	r1, [pc, #440]	; (8002a1c <HAL_ADC_Init+0x1f8>)
 8002862:	099b      	lsrs	r3, r3, #6
 8002864:	4001      	ands	r1, r0
 8002866:	3301      	adds	r3, #1
 8002868:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800286c:	6091      	str	r1, [r2, #8]
 800286e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002870:	9b01      	ldr	r3, [sp, #4]
 8002872:	b12b      	cbz	r3, 8002880 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8002874:	9b01      	ldr	r3, [sp, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800287a:	9b01      	ldr	r3, [sp, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f9      	bne.n	8002874 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002880:	6893      	ldr	r3, [r2, #8]
 8002882:	00d9      	lsls	r1, r3, #3
 8002884:	d424      	bmi.n	80028d0 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002886:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002888:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288a:	f043 0310 	orr.w	r3, r3, #16
 800288e:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002890:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002892:	432b      	orrs	r3, r5
 8002894:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002896:	6893      	ldr	r3, [r2, #8]
 8002898:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800289c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800289e:	d11d      	bne.n	80028dc <HAL_ADC_Init+0xb8>
 80028a0:	06db      	lsls	r3, r3, #27
 80028a2:	d41b      	bmi.n	80028dc <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 80028a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028a6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028aa:	f043 0302 	orr.w	r3, r3, #2
 80028ae:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028b0:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028b2:	07de      	lsls	r6, r3, #31
 80028b4:	d428      	bmi.n	8002908 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028b6:	4b5a      	ldr	r3, [pc, #360]	; (8002a20 <HAL_ADC_Init+0x1fc>)
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d017      	beq.n	80028ec <HAL_ADC_Init+0xc8>
 80028bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d013      	beq.n	80028ec <HAL_ADC_Init+0xc8>
 80028c4:	4b57      	ldr	r3, [pc, #348]	; (8002a24 <HAL_ADC_Init+0x200>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	07d9      	lsls	r1, r3, #31
 80028ca:	d41d      	bmi.n	8002908 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028cc:	4a56      	ldr	r2, [pc, #344]	; (8002a28 <HAL_ADC_Init+0x204>)
 80028ce:	e015      	b.n	80028fc <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028d0:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d2:	2500      	movs	r5, #0
 80028d4:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028da:	d0e1      	beq.n	80028a0 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80028de:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e0:	f043 0310 	orr.w	r3, r3, #16
}
 80028e4:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e6:	6563      	str	r3, [r4, #84]	; 0x54
}
 80028e8:	b002      	add	sp, #8
 80028ea:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028ec:	4a4c      	ldr	r2, [pc, #304]	; (8002a20 <HAL_ADC_Init+0x1fc>)
 80028ee:	4b4f      	ldr	r3, [pc, #316]	; (8002a2c <HAL_ADC_Init+0x208>)
 80028f0:	6892      	ldr	r2, [r2, #8]
 80028f2:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	07d8      	lsls	r0, r3, #31
 80028f8:	d406      	bmi.n	8002908 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028fa:	4a4d      	ldr	r2, [pc, #308]	; (8002a30 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028fc:	6893      	ldr	r3, [r2, #8]
 80028fe:	6861      	ldr	r1, [r4, #4]
 8002900:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002904:	430b      	orrs	r3, r1
 8002906:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002908:	f7ff fb78 	bl	8001ffc <HAL_GetREVID>
 800290c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002910:	68a1      	ldr	r1, [r4, #8]
 8002912:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002914:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002916:	d852      	bhi.n	80029be <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002918:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800291c:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800291e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002920:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8002924:	4302      	orrs	r2, r0
 8002926:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002928:	2b01      	cmp	r3, #1
 800292a:	d103      	bne.n	8002934 <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800292c:	6a23      	ldr	r3, [r4, #32]
 800292e:	3b01      	subs	r3, #1
 8002930:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002934:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002936:	b123      	cbz	r3, 8002942 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002938:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800293c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800293e:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002940:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	493b      	ldr	r1, [pc, #236]	; (8002a34 <HAL_ADC_Init+0x210>)
 8002946:	68d8      	ldr	r0, [r3, #12]
 8002948:	4001      	ands	r1, r0
 800294a:	430a      	orrs	r2, r1
 800294c:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002954:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002956:	d11c      	bne.n	8002992 <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002958:	0712      	lsls	r2, r2, #28
 800295a:	d41a      	bmi.n	8002992 <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800295c:	68d8      	ldr	r0, [r3, #12]
 800295e:	4a36      	ldr	r2, [pc, #216]	; (8002a38 <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002960:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002962:	4002      	ands	r2, r0
 8002964:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8002968:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800296a:	430a      	orrs	r2, r1
 800296c:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800296e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002972:	2a01      	cmp	r2, #1
 8002974:	d03a      	beq.n	80029ec <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800297e:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8002980:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002984:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002988:	430a      	orrs	r2, r1
 800298a:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800298c:	f7ff fe8e 	bl	80026ac <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002990:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002992:	68e2      	ldr	r2, [r4, #12]
 8002994:	2a01      	cmp	r2, #1
 8002996:	d021      	beq.n	80029dc <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800299a:	f022 020f 	bic.w	r2, r2, #15
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 80029a2:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029a4:	f023 0303 	bic.w	r3, r3, #3
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6563      	str	r3, [r4, #84]	; 0x54
}
 80029ae:	b002      	add	sp, #8
 80029b0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80029b2:	f7fd fd61 	bl	8000478 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80029b6:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80029b8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80029bc:	e73e      	b.n	800283c <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80029be:	2910      	cmp	r1, #16
 80029c0:	d1aa      	bne.n	8002918 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029c2:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029c4:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029c6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80029ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80029cc:	430a      	orrs	r2, r1
 80029ce:	f042 021c 	orr.w	r2, r2, #28
 80029d2:	e7a9      	b.n	8002928 <HAL_ADC_Init+0x104>
    return HAL_ERROR;
 80029d4:	2501      	movs	r5, #1
}
 80029d6:	4628      	mov	r0, r5
 80029d8:	b002      	add	sp, #8
 80029da:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029de:	69a2      	ldr	r2, [r4, #24]
 80029e0:	f021 010f 	bic.w	r1, r1, #15
 80029e4:	3a01      	subs	r2, #1
 80029e6:	430a      	orrs	r2, r1
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
 80029ea:	e7d9      	b.n	80029a0 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80029ec:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 80029f0:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80029f2:	3901      	subs	r1, #1
 80029f4:	6918      	ldr	r0, [r3, #16]
 80029f6:	4332      	orrs	r2, r6
 80029f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80029fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80029fe:	430a      	orrs	r2, r1
 8002a00:	490e      	ldr	r1, [pc, #56]	; (8002a3c <HAL_ADC_Init+0x218>)
 8002a02:	4001      	ands	r1, r0
 8002a04:	430a      	orrs	r2, r1
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	611a      	str	r2, [r3, #16]
 8002a0c:	e7b7      	b.n	800297e <HAL_ADC_Init+0x15a>
 8002a0e:	bf00      	nop
 8002a10:	5fffffc0 	.word	0x5fffffc0
 8002a14:	20000034 	.word	0x20000034
 8002a18:	053e2d63 	.word	0x053e2d63
 8002a1c:	6fffffc0 	.word	0x6fffffc0
 8002a20:	40022000 	.word	0x40022000
 8002a24:	58026000 	.word	0x58026000
 8002a28:	58026300 	.word	0x58026300
 8002a2c:	40022100 	.word	0x40022100
 8002a30:	40022300 	.word	0x40022300
 8002a34:	fff0c003 	.word	0xfff0c003
 8002a38:	ffffbffc 	.word	0xffffbffc
 8002a3c:	fc00f81e 	.word	0xfc00f81e

08002a40 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a44:	f8d0 8000 	ldr.w	r8, [r0]
{
 8002a48:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a4a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8002a4e:	f015 0504 	ands.w	r5, r5, #4
 8002a52:	d117      	bne.n	8002a84 <HAL_ADCEx_MultiModeStart_DMA+0x44>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a54:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002a58:	4604      	mov	r4, r0
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d012      	beq.n	8002a84 <HAL_ADCEx_MultiModeStart_DMA+0x44>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a5e:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <HAL_ADCEx_MultiModeStart_DMA+0xd4>)
    __HAL_LOCK(hadc);
 8002a60:	f04f 0c01 	mov.w	ip, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002a64:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a66:	4598      	cmp	r8, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002a68:	9517      	str	r5, [sp, #92]	; 0x5c
    __HAL_LOCK(hadc);
 8002a6a:	f880 c050 	strb.w	ip, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a6e:	d00d      	beq.n	8002a8c <HAL_ADCEx_MultiModeStart_DMA+0x4c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a70:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8002a72:	4660      	mov	r0, ip
      __HAL_UNLOCK(hadc);
 8002a74:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a78:	f043 0320 	orr.w	r3, r3, #32
 8002a7c:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8002a7e:	b01a      	add	sp, #104	; 0x68
 8002a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002a84:	2002      	movs	r0, #2
}
 8002a86:	b01a      	add	sp, #104	; 0x68
 8002a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a8c:	4d22      	ldr	r5, [pc, #136]	; (8002b18 <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
 8002a8e:	460e      	mov	r6, r1
 8002a90:	4617      	mov	r7, r2
 8002a92:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 8002a94:	f7ff fd34 	bl	8002500 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002a98:	b128      	cbz	r0, 8002aa6 <HAL_ADCEx_MultiModeStart_DMA+0x66>
      __HAL_UNLOCK(hadc);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002aa0:	b01a      	add	sp, #104	; 0x68
 8002aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002aa6:	a801      	add	r0, sp, #4
 8002aa8:	f7ff fd2a 	bl	8002500 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d1f4      	bne.n	8002a9a <HAL_ADCEx_MultiModeStart_DMA+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8002ab0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002ab2:	4a1a      	ldr	r2, [pc, #104]	; (8002b1c <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      ADC_STATE_CLR_SET(hadc->State,
 8002ab6:	400a      	ands	r2, r1
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ab8:	f8d4 c000 	ldr.w	ip, [r4]
      ADC_STATE_CLR_SET(hadc->State,
 8002abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ac0:	45c4      	cmp	ip, r8
      ADC_STATE_CLR_SET(hadc->State,
 8002ac2:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8002ac4:	65a0      	str	r0, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ac6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002ac8:	63c3      	str	r3, [r0, #60]	; 0x3c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002aca:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
 8002acc:	6403      	str	r3, [r0, #64]	; 0x40
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
 8002ad0:	64c3      	str	r3, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ad2:	d01d      	beq.n	8002b10 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8002ad4:	45ac      	cmp	ip, r5
 8002ad6:	d01b      	beq.n	8002b10 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8002ad8:	4914      	ldr	r1, [pc, #80]	; (8002b2c <HAL_ADCEx_MultiModeStart_DMA+0xec>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ada:	251c      	movs	r5, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8002adc:	463b      	mov	r3, r7
 8002ade:	4632      	mov	r2, r6
 8002ae0:	310c      	adds	r1, #12
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ae2:	f8cc 5000 	str.w	r5, [ip]
      __HAL_UNLOCK(hadc);
 8002ae6:	2500      	movs	r5, #0
 8002ae8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002aec:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8002af0:	f045 0510 	orr.w	r5, r5, #16
 8002af4:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8002af8:	f000 fda2 	bl	8003640 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002afc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002afe:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8002b00:	6891      	ldr	r1, [r2, #8]
 8002b02:	400b      	ands	r3, r1
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6093      	str	r3, [r2, #8]
}
 8002b0a:	b01a      	add	sp, #104	; 0x68
 8002b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b10:	4908      	ldr	r1, [pc, #32]	; (8002b34 <HAL_ADCEx_MultiModeStart_DMA+0xf4>)
 8002b12:	e7e2      	b.n	8002ada <HAL_ADCEx_MultiModeStart_DMA+0x9a>
 8002b14:	40022000 	.word	0x40022000
 8002b18:	40022100 	.word	0x40022100
 8002b1c:	fffff0fe 	.word	0xfffff0fe
 8002b20:	08002019 	.word	0x08002019
 8002b24:	08002009 	.word	0x08002009
 8002b28:	08002085 	.word	0x08002085
 8002b2c:	58026300 	.word	0x58026300
 8002b30:	7fffffc0 	.word	0x7fffffc0
 8002b34:	40022300 	.word	0x40022300

08002b38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b38:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b3a:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8002b3e:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b40:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8002b42:	2a01      	cmp	r2, #1
 8002b44:	d04d      	beq.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002b46:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b48:	4c2b      	ldr	r4, [pc, #172]	; (8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002b4a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002b4c:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b4e:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002b50:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b52:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8002b54:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002b58:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b5a:	d008      	beq.n	8002b6e <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b5c:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b62:	f041 0120 	orr.w	r1, r1, #32
 8002b66:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002b68:	b01a      	add	sp, #104	; 0x68
 8002b6a:	bcf0      	pop	{r4, r5, r6, r7}
 8002b6c:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b6e:	4c23      	ldr	r4, [pc, #140]	; (8002bfc <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8002b70:	68a2      	ldr	r2, [r4, #8]
 8002b72:	0752      	lsls	r2, r2, #29
 8002b74:	d50b      	bpl.n	8002b8e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b76:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002b7a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b7c:	f042 0220 	orr.w	r2, r2, #32
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8002b88:	b01a      	add	sp, #104	; 0x68
 8002b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8002b8c:	4770      	bx	lr
 8002b8e:	68a8      	ldr	r0, [r5, #8]
 8002b90:	f010 0004 	ands.w	r0, r0, #4
 8002b94:	d1f0      	bne.n	8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b96:	b1c6      	cbz	r6, 8002bca <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002b98:	f8df c068 	ldr.w	ip, [pc, #104]	; 8002c04 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002b9c:	684f      	ldr	r7, [r1, #4]
 8002b9e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8002ba2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002ba6:	433a      	orrs	r2, r7
 8002ba8:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bac:	68ad      	ldr	r5, [r5, #8]
 8002bae:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bb0:	432a      	orrs	r2, r5
 8002bb2:	07d4      	lsls	r4, r2, #31
 8002bb4:	d413      	bmi.n	8002bde <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8002bb6:	688a      	ldr	r2, [r1, #8]
 8002bb8:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8002bbc:	4316      	orrs	r6, r2
 8002bbe:	4a10      	ldr	r2, [pc, #64]	; (8002c00 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	4316      	orrs	r6, r2
 8002bc4:	f8cc 6008 	str.w	r6, [ip, #8]
 8002bc8:	e7db      	b.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002bca:	490e      	ldr	r1, [pc, #56]	; (8002c04 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8002bcc:	688a      	ldr	r2, [r1, #8]
 8002bce:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002bd2:	608a      	str	r2, [r1, #8]
 8002bd4:	68a8      	ldr	r0, [r5, #8]
 8002bd6:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bd8:	4302      	orrs	r2, r0
 8002bda:	07d0      	lsls	r0, r2, #31
 8002bdc:	d505      	bpl.n	8002bea <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bde:	2000      	movs	r0, #0
 8002be0:	e7cf      	b.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8002be2:	2002      	movs	r0, #2
}
 8002be4:	b01a      	add	sp, #104	; 0x68
 8002be6:	bcf0      	pop	{r4, r5, r6, r7}
 8002be8:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bea:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bec:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bee:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8002bf0:	4022      	ands	r2, r4
 8002bf2:	608a      	str	r2, [r1, #8]
 8002bf4:	e7c5      	b.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002bf6:	bf00      	nop
 8002bf8:	40022000 	.word	0x40022000
 8002bfc:	40022100 	.word	0x40022100
 8002c00:	fffff0e0 	.word	0xfffff0e0
 8002c04:	40022300 	.word	0x40022300

08002c08 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c08:	4906      	ldr	r1, [pc, #24]	; (8002c24 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c0e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c12:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c14:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c18:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c1c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8002c1e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002c20:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002c22:	4770      	bx	lr
 8002c24:	e000ed00 	.word	0xe000ed00
 8002c28:	05fa0000 	.word	0x05fa0000

08002c2c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c2c:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <HAL_NVIC_SetPriority+0x70>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c34:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c36:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c3e:	f1be 0f04 	cmp.w	lr, #4
 8002c42:	bf28      	it	cs
 8002c44:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c48:	f1bc 0f06 	cmp.w	ip, #6
 8002c4c:	d91a      	bls.n	8002c84 <HAL_NVIC_SetPriority+0x58>
 8002c4e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c50:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002c54:	fa0c fc03 	lsl.w	ip, ip, r3
 8002c58:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8002c60:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c62:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002c66:	ea21 010c 	bic.w	r1, r1, ip
 8002c6a:	fa01 f103 	lsl.w	r1, r1, r3
 8002c6e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002c72:	db0a      	blt.n	8002c8a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	0109      	lsls	r1, r1, #4
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_NVIC_SetPriority+0x74>)
 8002c78:	b2c9      	uxtb	r1, r1
 8002c7a:	4403      	add	r3, r0
 8002c7c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c80:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c84:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c86:	4613      	mov	r3, r2
 8002c88:	e7e8      	b.n	8002c5c <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	f000 000f 	and.w	r0, r0, #15
 8002c8e:	0109      	lsls	r1, r1, #4
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <HAL_NVIC_SetPriority+0x78>)
 8002c92:	b2c9      	uxtb	r1, r1
 8002c94:	4403      	add	r3, r0
 8002c96:	7619      	strb	r1, [r3, #24]
 8002c98:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c9c:	e000ed00 	.word	0xe000ed00
 8002ca0:	e000e100 	.word	0xe000e100
 8002ca4:	e000ecfc 	.word	0xe000ecfc

08002ca8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	db07      	blt.n	8002cbc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cac:	2301      	movs	r3, #1
 8002cae:	f000 011f 	and.w	r1, r0, #31
 8002cb2:	4a03      	ldr	r2, [pc, #12]	; (8002cc0 <HAL_NVIC_EnableIRQ+0x18>)
 8002cb4:	0940      	lsrs	r0, r0, #5
 8002cb6:	408b      	lsls	r3, r1
 8002cb8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc4:	1e43      	subs	r3, r0, #1
 8002cc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cca:	d20c      	bcs.n	8002ce6 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ccc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd2:	4906      	ldr	r1, [pc, #24]	; (8002cec <HAL_SYSTICK_Config+0x28>)
 8002cd4:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd8:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cda:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cdc:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce0:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce2:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002ce6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002cf0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002cf6:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cfa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cfe:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8002d00:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_MPU_Enable+0x1c>)
 8002d0e:	f040 0001 	orr.w	r0, r0, #1
 8002d12:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002d1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d22:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002d26:	4770      	bx	lr
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d2c:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <HAL_MPU_ConfigRegion+0x60>)
 8002d2e:	7843      	ldrb	r3, [r0, #1]
 8002d30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8002d34:	7801      	ldrb	r1, [r0, #0]
 8002d36:	b321      	cbz	r1, 8002d82 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002d38:	6843      	ldr	r3, [r0, #4]
{
 8002d3a:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8002d3c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d40:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d42:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d46:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d48:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d4c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d50:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d54:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d56:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d58:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d5c:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d60:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d64:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d68:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002d6c:	7a01      	ldrb	r1, [r0, #8]
 8002d6e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8002d72:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002d76:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d7a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002d7e:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 8002d82:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8002d86:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8002d90:	b188      	cbz	r0, 8002db6 <HAL_DAC_Init+0x26>
{
 8002d92:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d94:	7903      	ldrb	r3, [r0, #4]
 8002d96:	4604      	mov	r4, r0
 8002d98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d9c:	b13b      	cbz	r3, 8002dae <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d9e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002da0:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002da2:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002da4:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002da6:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002da8:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002daa:	7122      	strb	r2, [r4, #4]
}
 8002dac:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8002dae:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8002db0:	f7fd fc6a 	bl	8000688 <HAL_DAC_MspInit>
 8002db4:	e7f3      	b.n	8002d9e <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8002db6:	2001      	movs	r0, #1
}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop

08002dbc <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002dbc:	7942      	ldrb	r2, [r0, #5]
 8002dbe:	2a01      	cmp	r2, #1
 8002dc0:	d02e      	beq.n	8002e20 <HAL_DAC_Start+0x64>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f04f 0c02 	mov.w	ip, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002dc8:	6800      	ldr	r0, [r0, #0]
 8002dca:	2201      	movs	r2, #1
{
 8002dcc:	b510      	push	{r4, lr}
  __HAL_DAC_ENABLE(hdac, Channel);
 8002dce:	f001 0e10 	and.w	lr, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dd2:	f883 c004 	strb.w	ip, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8002dd6:	6804      	ldr	r4, [r0, #0]
 8002dd8:	fa02 f20e 	lsl.w	r2, r2, lr
 8002ddc:	4322      	orrs	r2, r4
 8002dde:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002de0:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 8002de2:	b969      	cbnz	r1, 8002e00 <HAL_DAC_Start+0x44>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002de4:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 8002de8:	4562      	cmp	r2, ip
 8002dea:	d103      	bne.n	8002df4 <HAL_DAC_Start+0x38>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002dec:	6842      	ldr	r2, [r0, #4]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002df4:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002df6:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 8002df8:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8002dfa:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8002dfc:	715a      	strb	r2, [r3, #5]
}
 8002dfe:	bd10      	pop	{r4, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002e00:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002e04:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8002e08:	4562      	cmp	r2, ip
 8002e0a:	d1f3      	bne.n	8002df4 <HAL_DAC_Start+0x38>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002e0c:	6842      	ldr	r2, [r0, #4]
  hdac->State = HAL_DAC_STATE_READY;
 8002e0e:	2101      	movs	r1, #1
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002e10:	f042 0202 	orr.w	r2, r2, #2
 8002e14:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 8002e16:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002e18:	7119      	strb	r1, [r3, #4]
  return HAL_OK;
 8002e1a:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdac);
 8002e1c:	715a      	strb	r2, [r3, #5]
}
 8002e1e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 8002e20:	2002      	movs	r0, #2
}
 8002e22:	4770      	bx	lr

08002e24 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002e24:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002e26:	6800      	ldr	r0, [r0, #0]
{
 8002e28:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8002e2a:	2400      	movs	r4, #0
 8002e2c:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8002e2e:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8002e30:	b951      	cbnz	r1, 8002e48 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e32:	9901      	ldr	r1, [sp, #4]
 8002e34:	3108      	adds	r1, #8
 8002e36:	440a      	add	r2, r1
 8002e38:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e3a:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8002e3c:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8002e3e:	6013      	str	r3, [r2, #0]
}
 8002e40:	b003      	add	sp, #12
 8002e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e46:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e48:	9901      	ldr	r1, [sp, #4]
 8002e4a:	3114      	adds	r1, #20
 8002e4c:	440a      	add	r2, r1
 8002e4e:	9201      	str	r2, [sp, #4]
 8002e50:	e7f3      	b.n	8002e3a <HAL_DAC_SetValue+0x16>
 8002e52:	bf00      	nop

08002e54 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e58:	7943      	ldrb	r3, [r0, #5]
{
 8002e5a:	460d      	mov	r5, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002e5c:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	f000 808d 	beq.w	8002f7e <HAL_DAC_ConfigChannel+0x12a>
 8002e64:	2301      	movs	r3, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e66:	2904      	cmp	r1, #4
 8002e68:	4604      	mov	r4, r0
 8002e6a:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 8002e6c:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e6e:	f04f 0302 	mov.w	r3, #2
 8002e72:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e74:	d045      	beq.n	8002f02 <HAL_DAC_ConfigChannel+0xae>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002e76:	f002 0210 	and.w	r2, r2, #16

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002e7a:	6800      	ldr	r0, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e7c:	692b      	ldr	r3, [r5, #16]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d108      	bne.n	8002e94 <HAL_DAC_ConfigChannel+0x40>
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e82:	261f      	movs	r6, #31
    tmpreg1 = hdac->Instance->CCR;
 8002e84:	6b83      	ldr	r3, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e86:	4096      	lsls	r6, r2
 8002e88:	ea23 0606 	bic.w	r6, r3, r6
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e8c:	696b      	ldr	r3, [r5, #20]
 8002e8e:	4093      	lsls	r3, r2
 8002e90:	4333      	orrs	r3, r6
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002e92:	6383      	str	r3, [r0, #56]	; 0x38
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e94:	2607      	movs	r6, #7
 8002e96:	fa06 f302 	lsl.w	r3, r6, r2
  tmpreg1 = hdac->Instance->MCR;
 8002e9a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e9c:	ea26 0603 	bic.w	r6, r6, r3
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002ea0:	e9d5 7302 	ldrd	r7, r3, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d028      	beq.n	8002efa <HAL_DAC_ConfigChannel+0xa6>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d028      	beq.n	8002efe <HAL_DAC_ConfigChannel+0xaa>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002eac:	fab7 f387 	clz	r3, r7
 8002eb0:	095b      	lsrs	r3, r3, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002eb2:	433b      	orrs	r3, r7
 8002eb4:	430b      	orrs	r3, r1
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002eb6:	6869      	ldr	r1, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002eb8:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ebc:	4093      	lsls	r3, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ebe:	4091      	lsls	r1, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002ec0:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ec2:	4333      	orrs	r3, r6
  hdac->Instance->MCR = tmpreg1;
 8002ec4:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002ec6:	6803      	ldr	r3, [r0, #0]
 8002ec8:	ea23 0305 	bic.w	r3, r3, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ecc:	f640 75fe 	movw	r5, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002ed0:	6003      	str	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ed2:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 8002ed4:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ed6:	ea23 0305 	bic.w	r3, r3, r5
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002eda:	2501      	movs	r5, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002edc:	430b      	orrs	r3, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ede:	21c0      	movs	r1, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8002ee0:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ee2:	fa01 f302 	lsl.w	r3, r1, r2
 8002ee6:	6802      	ldr	r2, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ee8:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002eea:	ea22 0203 	bic.w	r2, r2, r3
 8002eee:	6002      	str	r2, [r0, #0]

  /* Return function status */
  return HAL_OK;
 8002ef0:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 8002ef2:	7125      	strb	r5, [r4, #4]
  __HAL_UNLOCK(hdac);
 8002ef4:	7161      	strb	r1, [r4, #5]
}
 8002ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e7d9      	b.n	8002eb2 <HAL_DAC_ConfigChannel+0x5e>
    connectOnChip = DAC_MCR_MODE1_0;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e7d7      	b.n	8002eb2 <HAL_DAC_ConfigChannel+0x5e>
    tickstart = HAL_GetTick();
 8002f02:	f7ff f863 	bl	8001fcc <HAL_GetTick>
 8002f06:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8002f08:	b9c6      	cbnz	r6, 8002f3c <HAL_DAC_ConfigChannel+0xe8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f0a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8002f94 <HAL_DAC_ConfigChannel+0x140>
 8002f0e:	e004      	b.n	8002f1a <HAL_DAC_ConfigChannel+0xc6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f10:	f7ff f85c 	bl	8001fcc <HAL_GetTick>
 8002f14:	1bc3      	subs	r3, r0, r7
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d834      	bhi.n	8002f84 <HAL_DAC_ConfigChannel+0x130>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1e:	ea13 0f08 	tst.w	r3, r8
 8002f22:	d1f5      	bne.n	8002f10 <HAL_DAC_ConfigChannel+0xbc>
      HAL_Delay(1);
 8002f24:	2001      	movs	r0, #1
 8002f26:	f7ff f857 	bl	8001fd8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f2a:	6820      	ldr	r0, [r4, #0]
 8002f2c:	69ab      	ldr	r3, [r5, #24]
 8002f2e:	6403      	str	r3, [r0, #64]	; 0x40
 8002f30:	e00e      	b.n	8002f50 <HAL_DAC_ConfigChannel+0xfc>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f32:	f7ff f84b 	bl	8001fcc <HAL_GetTick>
 8002f36:	1bc3      	subs	r3, r0, r7
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d823      	bhi.n	8002f84 <HAL_DAC_ConfigChannel+0x130>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	dbf6      	blt.n	8002f32 <HAL_DAC_ConfigChannel+0xde>
      HAL_Delay(1U);
 8002f44:	2001      	movs	r0, #1
 8002f46:	f7ff f847 	bl	8001fd8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f4a:	6820      	ldr	r0, [r4, #0]
 8002f4c:	69ab      	ldr	r3, [r5, #24]
 8002f4e:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002f50:	f006 0210 	and.w	r2, r6, #16
 8002f54:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002f58:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002f5a:	4091      	lsls	r1, r2
 8002f5c:	ea23 0301 	bic.w	r3, r3, r1
 8002f60:	69e9      	ldr	r1, [r5, #28]
 8002f62:	4091      	lsls	r1, r2
 8002f64:	430b      	orrs	r3, r1
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002f66:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002f68:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002f6a:	4091      	lsls	r1, r2
 8002f6c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002f6e:	ea23 0301 	bic.w	r3, r3, r1
 8002f72:	6a29      	ldr	r1, [r5, #32]
 8002f74:	4091      	lsls	r1, r2
 8002f76:	430b      	orrs	r3, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002f78:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002f7a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002f7c:	e77e      	b.n	8002e7c <HAL_DAC_ConfigChannel+0x28>
  __HAL_LOCK(hdac);
 8002f7e:	2002      	movs	r0, #2
}
 8002f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f84:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f86:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f88:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 8002f8c:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f8e:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f90:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 8002f92:	e7b0      	b.n	8002ef6 <HAL_DAC_ConfigChannel+0xa2>
 8002f94:	20008000 	.word	0x20008000

08002f98 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f98:	6802      	ldr	r2, [r0, #0]
 8002f9a:	4b34      	ldr	r3, [pc, #208]	; (800306c <DMA_CalcBaseAndBitshift+0xd4>)
 8002f9c:	4934      	ldr	r1, [pc, #208]	; (8003070 <DMA_CalcBaseAndBitshift+0xd8>)
{
 8002f9e:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fa0:	4d34      	ldr	r5, [pc, #208]	; (8003074 <DMA_CalcBaseAndBitshift+0xdc>)
 8002fa2:	4c35      	ldr	r4, [pc, #212]	; (8003078 <DMA_CalcBaseAndBitshift+0xe0>)
 8002fa4:	42aa      	cmp	r2, r5
 8002fa6:	bf18      	it	ne
 8002fa8:	429a      	cmpne	r2, r3
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	428a      	cmp	r2, r1
 8002fb2:	bf08      	it	eq
 8002fb4:	f043 0301 	orreq.w	r3, r3, #1
 8002fb8:	3130      	adds	r1, #48	; 0x30
 8002fba:	42a2      	cmp	r2, r4
 8002fbc:	bf08      	it	eq
 8002fbe:	f043 0301 	orreq.w	r3, r3, #1
 8002fc2:	3430      	adds	r4, #48	; 0x30
 8002fc4:	428a      	cmp	r2, r1
 8002fc6:	bf08      	it	eq
 8002fc8:	f043 0301 	orreq.w	r3, r3, #1
 8002fcc:	3130      	adds	r1, #48	; 0x30
 8002fce:	42a2      	cmp	r2, r4
 8002fd0:	bf08      	it	eq
 8002fd2:	f043 0301 	orreq.w	r3, r3, #1
 8002fd6:	3430      	adds	r4, #48	; 0x30
 8002fd8:	428a      	cmp	r2, r1
 8002fda:	bf08      	it	eq
 8002fdc:	f043 0301 	orreq.w	r3, r3, #1
 8002fe0:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8002fe4:	42a2      	cmp	r2, r4
 8002fe6:	bf08      	it	eq
 8002fe8:	f043 0301 	orreq.w	r3, r3, #1
 8002fec:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8002ff0:	428a      	cmp	r2, r1
 8002ff2:	bf08      	it	eq
 8002ff4:	f043 0301 	orreq.w	r3, r3, #1
 8002ff8:	3130      	adds	r1, #48	; 0x30
 8002ffa:	42a2      	cmp	r2, r4
 8002ffc:	bf08      	it	eq
 8002ffe:	f043 0301 	orreq.w	r3, r3, #1
 8003002:	3430      	adds	r4, #48	; 0x30
 8003004:	428a      	cmp	r2, r1
 8003006:	bf08      	it	eq
 8003008:	f043 0301 	orreq.w	r3, r3, #1
 800300c:	3130      	adds	r1, #48	; 0x30
 800300e:	42a2      	cmp	r2, r4
 8003010:	bf08      	it	eq
 8003012:	f043 0301 	orreq.w	r3, r3, #1
 8003016:	3430      	adds	r4, #48	; 0x30
 8003018:	428a      	cmp	r2, r1
 800301a:	bf08      	it	eq
 800301c:	f043 0301 	orreq.w	r3, r3, #1
 8003020:	3130      	adds	r1, #48	; 0x30
 8003022:	42a2      	cmp	r2, r4
 8003024:	bf08      	it	eq
 8003026:	f043 0301 	orreq.w	r3, r3, #1
 800302a:	428a      	cmp	r2, r1
 800302c:	bf08      	it	eq
 800302e:	f043 0301 	orreq.w	r3, r3, #1
 8003032:	b913      	cbnz	r3, 800303a <DMA_CalcBaseAndBitshift+0xa2>
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <DMA_CalcBaseAndBitshift+0xe4>)
 8003036:	429a      	cmp	r2, r3
 8003038:	d113      	bne.n	8003062 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800303a:	b2d3      	uxtb	r3, r2
 800303c:	4910      	ldr	r1, [pc, #64]	; (8003080 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800303e:	4c11      	ldr	r4, [pc, #68]	; (8003084 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003040:	3b10      	subs	r3, #16
 8003042:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8003046:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800304a:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800304e:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003052:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003054:	bf88      	it	hi
 8003056:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003058:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800305a:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800305c:	4618      	mov	r0, r3
 800305e:	bc30      	pop	{r4, r5}
 8003060:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003062:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8003066:	6583      	str	r3, [r0, #88]	; 0x58
 8003068:	e7f8      	b.n	800305c <DMA_CalcBaseAndBitshift+0xc4>
 800306a:	bf00      	nop
 800306c:	40020010 	.word	0x40020010
 8003070:	40020040 	.word	0x40020040
 8003074:	40020028 	.word	0x40020028
 8003078:	40020058 	.word	0x40020058
 800307c:	400204b8 	.word	0x400204b8
 8003080:	aaaaaaab 	.word	0xaaaaaaab
 8003084:	08009248 	.word	0x08009248
 8003088:	fffffc00 	.word	0xfffffc00

0800308c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800308c:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800308e:	4a29      	ldr	r2, [pc, #164]	; (8003134 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8003090:	4929      	ldr	r1, [pc, #164]	; (8003138 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8003092:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003094:	4d29      	ldr	r5, [pc, #164]	; (800313c <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8003096:	4c2a      	ldr	r4, [pc, #168]	; (8003140 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8003098:	42ab      	cmp	r3, r5
 800309a:	bf18      	it	ne
 800309c:	4293      	cmpne	r3, r2
 800309e:	bf0c      	ite	eq
 80030a0:	2201      	moveq	r2, #1
 80030a2:	2200      	movne	r2, #0
 80030a4:	428b      	cmp	r3, r1
 80030a6:	bf08      	it	eq
 80030a8:	f042 0201 	orreq.w	r2, r2, #1
 80030ac:	3128      	adds	r1, #40	; 0x28
 80030ae:	42a3      	cmp	r3, r4
 80030b0:	bf08      	it	eq
 80030b2:	f042 0201 	orreq.w	r2, r2, #1
 80030b6:	3428      	adds	r4, #40	; 0x28
 80030b8:	428b      	cmp	r3, r1
 80030ba:	bf08      	it	eq
 80030bc:	f042 0201 	orreq.w	r2, r2, #1
 80030c0:	3128      	adds	r1, #40	; 0x28
 80030c2:	42a3      	cmp	r3, r4
 80030c4:	bf08      	it	eq
 80030c6:	f042 0201 	orreq.w	r2, r2, #1
 80030ca:	428b      	cmp	r3, r1
 80030cc:	bf08      	it	eq
 80030ce:	f042 0201 	orreq.w	r2, r2, #1
 80030d2:	b912      	cbnz	r2, 80030da <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 80030d4:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d113      	bne.n	8003102 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	4c1a      	ldr	r4, [pc, #104]	; (8003148 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80030de:	4a1b      	ldr	r2, [pc, #108]	; (800314c <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030e0:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80030e2:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80030e4:	4d1a      	ldr	r5, [pc, #104]	; (8003150 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80030e6:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80030ea:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80030ec:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030f0:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80030f4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80030fa:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030fc:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80030fe:	bc30      	pop	{r4, r5}
 8003100:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003102:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003104:	4913      	ldr	r1, [pc, #76]	; (8003154 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003106:	4c14      	ldr	r4, [pc, #80]	; (8003158 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003108:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800310a:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800310c:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800310e:	fba4 2302 	umull	r2, r3, r4, r2
 8003112:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003116:	d800      	bhi.n	800311a <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8003118:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800311a:	4a10      	ldr	r2, [pc, #64]	; (800315c <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800311c:	f003 051f 	and.w	r5, r3, #31
 8003120:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003122:	4c0f      	ldr	r4, [pc, #60]	; (8003160 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003124:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003126:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003128:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800312a:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800312c:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800312e:	6602      	str	r2, [r0, #96]	; 0x60
}
 8003130:	e7e5      	b.n	80030fe <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 8003132:	bf00      	nop
 8003134:	58025408 	.word	0x58025408
 8003138:	58025430 	.word	0x58025430
 800313c:	5802541c 	.word	0x5802541c
 8003140:	58025444 	.word	0x58025444
 8003144:	58025494 	.word	0x58025494
 8003148:	cccccccd 	.word	0xcccccccd
 800314c:	16009600 	.word	0x16009600
 8003150:	58025880 	.word	0x58025880
 8003154:	bffdfbf0 	.word	0xbffdfbf0
 8003158:	aaaaaaab 	.word	0xaaaaaaab
 800315c:	10008200 	.word	0x10008200
 8003160:	40020880 	.word	0x40020880

08003164 <HAL_DMA_Init>:
{
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003168:	f7fe ff30 	bl	8001fcc <HAL_GetTick>
  if(hdma == NULL)
 800316c:	2c00      	cmp	r4, #0
 800316e:	f000 8177 	beq.w	8003460 <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	4605      	mov	r5, r0
 8003176:	4a92      	ldr	r2, [pc, #584]	; (80033c0 <HAL_DMA_Init+0x25c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d048      	beq.n	800320e <HAL_DMA_Init+0xaa>
 800317c:	3218      	adds	r2, #24
 800317e:	4293      	cmp	r3, r2
 8003180:	d045      	beq.n	800320e <HAL_DMA_Init+0xaa>
 8003182:	3230      	adds	r2, #48	; 0x30
 8003184:	498f      	ldr	r1, [pc, #572]	; (80033c4 <HAL_DMA_Init+0x260>)
 8003186:	428b      	cmp	r3, r1
 8003188:	bf18      	it	ne
 800318a:	4293      	cmpne	r3, r2
 800318c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003190:	bf0c      	ite	eq
 8003192:	2201      	moveq	r2, #1
 8003194:	2200      	movne	r2, #0
 8003196:	428b      	cmp	r3, r1
 8003198:	bf08      	it	eq
 800319a:	f042 0201 	orreq.w	r2, r2, #1
 800319e:	3118      	adds	r1, #24
 80031a0:	428b      	cmp	r3, r1
 80031a2:	bf08      	it	eq
 80031a4:	f042 0201 	orreq.w	r2, r2, #1
 80031a8:	3118      	adds	r1, #24
 80031aa:	428b      	cmp	r3, r1
 80031ac:	bf08      	it	eq
 80031ae:	f042 0201 	orreq.w	r2, r2, #1
 80031b2:	3118      	adds	r1, #24
 80031b4:	428b      	cmp	r3, r1
 80031b6:	bf08      	it	eq
 80031b8:	f042 0201 	orreq.w	r2, r2, #1
 80031bc:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80031c0:	428b      	cmp	r3, r1
 80031c2:	bf08      	it	eq
 80031c4:	f042 0201 	orreq.w	r2, r2, #1
 80031c8:	3118      	adds	r1, #24
 80031ca:	428b      	cmp	r3, r1
 80031cc:	bf08      	it	eq
 80031ce:	f042 0201 	orreq.w	r2, r2, #1
 80031d2:	3118      	adds	r1, #24
 80031d4:	428b      	cmp	r3, r1
 80031d6:	bf08      	it	eq
 80031d8:	f042 0201 	orreq.w	r2, r2, #1
 80031dc:	3118      	adds	r1, #24
 80031de:	428b      	cmp	r3, r1
 80031e0:	bf08      	it	eq
 80031e2:	f042 0201 	orreq.w	r2, r2, #1
 80031e6:	3118      	adds	r1, #24
 80031e8:	428b      	cmp	r3, r1
 80031ea:	bf08      	it	eq
 80031ec:	f042 0201 	orreq.w	r2, r2, #1
 80031f0:	3118      	adds	r1, #24
 80031f2:	428b      	cmp	r3, r1
 80031f4:	bf08      	it	eq
 80031f6:	f042 0201 	orreq.w	r2, r2, #1
 80031fa:	3118      	adds	r1, #24
 80031fc:	428b      	cmp	r3, r1
 80031fe:	bf08      	it	eq
 8003200:	f042 0201 	orreq.w	r2, r2, #1
 8003204:	b91a      	cbnz	r2, 800320e <HAL_DMA_Init+0xaa>
 8003206:	4a70      	ldr	r2, [pc, #448]	; (80033c8 <HAL_DMA_Init+0x264>)
 8003208:	4293      	cmp	r3, r2
 800320a:	f040 8198 	bne.w	800353e <HAL_DMA_Init+0x3da>
    __HAL_UNLOCK(hdma);
 800320e:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8003210:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 8003212:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8003216:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e006      	b.n	8003232 <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003224:	f7fe fed2 	bl	8001fcc <HAL_GetTick>
 8003228:	1b43      	subs	r3, r0, r5
 800322a:	2b05      	cmp	r3, #5
 800322c:	f200 80ff 	bhi.w	800342e <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	07d6      	lsls	r6, r2, #31
 8003236:	d4f5      	bmi.n	8003224 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8003238:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323c:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800323e:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003240:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003242:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003244:	4302      	orrs	r2, r0
 8003246:	6960      	ldr	r0, [r4, #20]
 8003248:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324a:	69e0      	ldr	r0, [r4, #28]
 800324c:	430a      	orrs	r2, r1
 800324e:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003250:	485e      	ldr	r0, [pc, #376]	; (80033cc <HAL_DMA_Init+0x268>)
 8003252:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8003254:	6a25      	ldr	r5, [r4, #32]
 8003256:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003258:	4d5d      	ldr	r5, [pc, #372]	; (80033d0 <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 800325a:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800325c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800325e:	2804      	cmp	r0, #4
 8003260:	f000 8100 	beq.w	8003464 <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003264:	682e      	ldr	r6, [r5, #0]
 8003266:	4d5b      	ldr	r5, [pc, #364]	; (80033d4 <HAL_DMA_Init+0x270>)
 8003268:	4035      	ands	r5, r6
 800326a:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 800326e:	f080 80bb 	bcs.w	80033e8 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003272:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003274:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003276:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800327a:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800327c:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800327e:	4620      	mov	r0, r4
 8003280:	f7ff fe8a 	bl	8002f98 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003284:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003286:	233f      	movs	r3, #63	; 0x3f
 8003288:	f002 021f 	and.w	r2, r2, #31
 800328c:	4093      	lsls	r3, r2
 800328e:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003290:	6822      	ldr	r2, [r4, #0]
 8003292:	4b4b      	ldr	r3, [pc, #300]	; (80033c0 <HAL_DMA_Init+0x25c>)
 8003294:	4850      	ldr	r0, [pc, #320]	; (80033d8 <HAL_DMA_Init+0x274>)
 8003296:	494b      	ldr	r1, [pc, #300]	; (80033c4 <HAL_DMA_Init+0x260>)
 8003298:	4282      	cmp	r2, r0
 800329a:	bf18      	it	ne
 800329c:	429a      	cmpne	r2, r3
 800329e:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	428a      	cmp	r2, r1
 80032aa:	bf08      	it	eq
 80032ac:	f043 0301 	orreq.w	r3, r3, #1
 80032b0:	3130      	adds	r1, #48	; 0x30
 80032b2:	4282      	cmp	r2, r0
 80032b4:	bf08      	it	eq
 80032b6:	f043 0301 	orreq.w	r3, r3, #1
 80032ba:	3030      	adds	r0, #48	; 0x30
 80032bc:	428a      	cmp	r2, r1
 80032be:	bf08      	it	eq
 80032c0:	f043 0301 	orreq.w	r3, r3, #1
 80032c4:	3130      	adds	r1, #48	; 0x30
 80032c6:	4282      	cmp	r2, r0
 80032c8:	bf08      	it	eq
 80032ca:	f043 0301 	orreq.w	r3, r3, #1
 80032ce:	3030      	adds	r0, #48	; 0x30
 80032d0:	428a      	cmp	r2, r1
 80032d2:	bf08      	it	eq
 80032d4:	f043 0301 	orreq.w	r3, r3, #1
 80032d8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80032dc:	4282      	cmp	r2, r0
 80032de:	bf08      	it	eq
 80032e0:	f043 0301 	orreq.w	r3, r3, #1
 80032e4:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80032e8:	428a      	cmp	r2, r1
 80032ea:	bf08      	it	eq
 80032ec:	f043 0301 	orreq.w	r3, r3, #1
 80032f0:	3130      	adds	r1, #48	; 0x30
 80032f2:	4282      	cmp	r2, r0
 80032f4:	bf08      	it	eq
 80032f6:	f043 0301 	orreq.w	r3, r3, #1
 80032fa:	3030      	adds	r0, #48	; 0x30
 80032fc:	428a      	cmp	r2, r1
 80032fe:	bf08      	it	eq
 8003300:	f043 0301 	orreq.w	r3, r3, #1
 8003304:	3130      	adds	r1, #48	; 0x30
 8003306:	4282      	cmp	r2, r0
 8003308:	bf08      	it	eq
 800330a:	f043 0301 	orreq.w	r3, r3, #1
 800330e:	3030      	adds	r0, #48	; 0x30
 8003310:	428a      	cmp	r2, r1
 8003312:	bf08      	it	eq
 8003314:	f043 0301 	orreq.w	r3, r3, #1
 8003318:	3130      	adds	r1, #48	; 0x30
 800331a:	4282      	cmp	r2, r0
 800331c:	bf08      	it	eq
 800331e:	f043 0301 	orreq.w	r3, r3, #1
 8003322:	3030      	adds	r0, #48	; 0x30
 8003324:	428a      	cmp	r2, r1
 8003326:	bf08      	it	eq
 8003328:	f043 0301 	orreq.w	r3, r3, #1
 800332c:	492b      	ldr	r1, [pc, #172]	; (80033dc <HAL_DMA_Init+0x278>)
 800332e:	4282      	cmp	r2, r0
 8003330:	bf08      	it	eq
 8003332:	f043 0301 	orreq.w	r3, r3, #1
 8003336:	482a      	ldr	r0, [pc, #168]	; (80033e0 <HAL_DMA_Init+0x27c>)
 8003338:	428a      	cmp	r2, r1
 800333a:	bf08      	it	eq
 800333c:	f043 0301 	orreq.w	r3, r3, #1
 8003340:	3128      	adds	r1, #40	; 0x28
 8003342:	4282      	cmp	r2, r0
 8003344:	bf08      	it	eq
 8003346:	f043 0301 	orreq.w	r3, r3, #1
 800334a:	3028      	adds	r0, #40	; 0x28
 800334c:	428a      	cmp	r2, r1
 800334e:	bf08      	it	eq
 8003350:	f043 0301 	orreq.w	r3, r3, #1
 8003354:	3128      	adds	r1, #40	; 0x28
 8003356:	4282      	cmp	r2, r0
 8003358:	bf08      	it	eq
 800335a:	f043 0301 	orreq.w	r3, r3, #1
 800335e:	3028      	adds	r0, #40	; 0x28
 8003360:	428a      	cmp	r2, r1
 8003362:	bf08      	it	eq
 8003364:	f043 0301 	orreq.w	r3, r3, #1
 8003368:	3128      	adds	r1, #40	; 0x28
 800336a:	4282      	cmp	r2, r0
 800336c:	bf08      	it	eq
 800336e:	f043 0301 	orreq.w	r3, r3, #1
 8003372:	428a      	cmp	r2, r1
 8003374:	bf08      	it	eq
 8003376:	f043 0301 	orreq.w	r3, r3, #1
 800337a:	b913      	cbnz	r3, 8003382 <HAL_DMA_Init+0x21e>
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <HAL_DMA_Init+0x280>)
 800337e:	429a      	cmp	r2, r3
 8003380:	d118      	bne.n	80033b4 <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003382:	4620      	mov	r0, r4
 8003384:	f7ff fe82 	bl	800308c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003388:	68a3      	ldr	r3, [r4, #8]
 800338a:	2b80      	cmp	r3, #128	; 0x80
 800338c:	d05c      	beq.n	8003448 <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800338e:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003390:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003392:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003394:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003396:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800339a:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800339c:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800339e:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80033a0:	d859      	bhi.n	8003456 <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80033a2:	1e50      	subs	r0, r2, #1
 80033a4:	2807      	cmp	r0, #7
 80033a6:	d96e      	bls.n	8003486 <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033a8:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80033aa:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80033ae:	2000      	movs	r0, #0
 80033b0:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033b2:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80033b6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80033ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80033be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033c0:	40020010 	.word	0x40020010
 80033c4:	40020040 	.word	0x40020040
 80033c8:	400204b8 	.word	0x400204b8
 80033cc:	fe10803f 	.word	0xfe10803f
 80033d0:	5c001000 	.word	0x5c001000
 80033d4:	ffff0000 	.word	0xffff0000
 80033d8:	40020028 	.word	0x40020028
 80033dc:	58025408 	.word	0x58025408
 80033e0:	5802541c 	.word	0x5802541c
 80033e4:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033e8:	6865      	ldr	r5, [r4, #4]
 80033ea:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 80033ee:	2e1f      	cmp	r6, #31
 80033f0:	d924      	bls.n	800343c <HAL_DMA_Init+0x2d8>
 80033f2:	3d4f      	subs	r5, #79	; 0x4f
 80033f4:	2d03      	cmp	r5, #3
 80033f6:	d801      	bhi.n	80033fc <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 80033f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80033fc:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033fe:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003400:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003402:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8003406:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800340a:	f47f af37 	bne.w	800327c <HAL_DMA_Init+0x118>
 800340e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8003410:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003412:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003414:	2d00      	cmp	r5, #0
 8003416:	f43f af31 	beq.w	800327c <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800341a:	2900      	cmp	r1, #0
 800341c:	d169      	bne.n	80034f2 <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 800341e:	2801      	cmp	r0, #1
 8003420:	f000 8088 	beq.w	8003534 <HAL_DMA_Init+0x3d0>
 8003424:	f030 0102 	bics.w	r1, r0, #2
 8003428:	f47f af28 	bne.w	800327c <HAL_DMA_Init+0x118>
 800342c:	e069      	b.n	8003502 <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800342e:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8003430:	2303      	movs	r3, #3
        return HAL_ERROR;
 8003432:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003434:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8003436:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800343a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800343c:	4d73      	ldr	r5, [pc, #460]	; (800360c <HAL_DMA_Init+0x4a8>)
 800343e:	fa25 f606 	lsr.w	r6, r5, r6
 8003442:	07f5      	lsls	r5, r6, #31
 8003444:	d5da      	bpl.n	80033fc <HAL_DMA_Init+0x298>
 8003446:	e7d7      	b.n	80033f8 <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003448:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800344a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800344c:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003450:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003452:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003454:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8003456:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8003458:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800345c:	6763      	str	r3, [r4, #116]	; 0x74
 800345e:	e7a9      	b.n	80033b4 <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 8003460:	2001      	movs	r0, #1
}
 8003462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003464:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003466:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 800346a:	432e      	orrs	r6, r5
 800346c:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800346e:	4e68      	ldr	r6, [pc, #416]	; (8003610 <HAL_DMA_Init+0x4ac>)
 8003470:	403e      	ands	r6, r7
 8003472:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8003476:	d2b7      	bcs.n	80033e8 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003478:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800347a:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800347c:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8003480:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003484:	e7c4      	b.n	8003410 <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003486:	6821      	ldr	r1, [r4, #0]
 8003488:	4b62      	ldr	r3, [pc, #392]	; (8003614 <HAL_DMA_Init+0x4b0>)
 800348a:	4d63      	ldr	r5, [pc, #396]	; (8003618 <HAL_DMA_Init+0x4b4>)
 800348c:	42a9      	cmp	r1, r5
 800348e:	bf18      	it	ne
 8003490:	4299      	cmpne	r1, r3
 8003492:	f105 0514 	add.w	r5, r5, #20
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	42a9      	cmp	r1, r5
 800349e:	bf08      	it	eq
 80034a0:	f043 0301 	orreq.w	r3, r3, #1
 80034a4:	3514      	adds	r5, #20
 80034a6:	42a9      	cmp	r1, r5
 80034a8:	bf08      	it	eq
 80034aa:	f043 0301 	orreq.w	r3, r3, #1
 80034ae:	3514      	adds	r5, #20
 80034b0:	42a9      	cmp	r1, r5
 80034b2:	bf08      	it	eq
 80034b4:	f043 0301 	orreq.w	r3, r3, #1
 80034b8:	3514      	adds	r5, #20
 80034ba:	42a9      	cmp	r1, r5
 80034bc:	bf08      	it	eq
 80034be:	f043 0301 	orreq.w	r3, r3, #1
 80034c2:	3514      	adds	r5, #20
 80034c4:	42a9      	cmp	r1, r5
 80034c6:	bf08      	it	eq
 80034c8:	f043 0301 	orreq.w	r3, r3, #1
 80034cc:	b93b      	cbnz	r3, 80034de <HAL_DMA_Init+0x37a>
 80034ce:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_DMA_Init+0x4b8>)
 80034d0:	4299      	cmp	r1, r3
 80034d2:	d004      	beq.n	80034de <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034d4:	4b52      	ldr	r3, [pc, #328]	; (8003620 <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034d6:	4953      	ldr	r1, [pc, #332]	; (8003624 <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034dc:	e003      	b.n	80034e6 <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80034de:	4b52      	ldr	r3, [pc, #328]	; (8003628 <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80034e0:	4952      	ldr	r1, [pc, #328]	; (800362c <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80034e6:	2201      	movs	r2, #1
 80034e8:	4082      	lsls	r2, r0
 80034ea:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 80034ee:	6762      	str	r2, [r4, #116]	; 0x74
 80034f0:	e75d      	b.n	80033ae <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034f2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80034f6:	d00e      	beq.n	8003516 <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 80034f8:	2802      	cmp	r0, #2
 80034fa:	d905      	bls.n	8003508 <HAL_DMA_Init+0x3a4>
 80034fc:	2803      	cmp	r0, #3
 80034fe:	f47f aebd 	bne.w	800327c <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003502:	01e9      	lsls	r1, r5, #7
 8003504:	f57f aeba 	bpl.w	800327c <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 8003508:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800350a:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 800350c:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800350e:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8003510:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 8003516:	2803      	cmp	r0, #3
 8003518:	f63f aeb0 	bhi.w	800327c <HAL_DMA_Init+0x118>
 800351c:	a101      	add	r1, pc, #4	; (adr r1, 8003524 <HAL_DMA_Init+0x3c0>)
 800351e:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003509 	.word	0x08003509
 8003528:	08003503 	.word	0x08003503
 800352c:	08003509 	.word	0x08003509
 8003530:	08003535 	.word	0x08003535
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003534:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003538:	f47f aea0 	bne.w	800327c <HAL_DMA_Init+0x118>
 800353c:	e7e4      	b.n	8003508 <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800353e:	4a35      	ldr	r2, [pc, #212]	; (8003614 <HAL_DMA_Init+0x4b0>)
 8003540:	4835      	ldr	r0, [pc, #212]	; (8003618 <HAL_DMA_Init+0x4b4>)
 8003542:	493b      	ldr	r1, [pc, #236]	; (8003630 <HAL_DMA_Init+0x4cc>)
 8003544:	4283      	cmp	r3, r0
 8003546:	bf18      	it	ne
 8003548:	4293      	cmpne	r3, r2
 800354a:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800354e:	bf0c      	ite	eq
 8003550:	2201      	moveq	r2, #1
 8003552:	2200      	movne	r2, #0
 8003554:	428b      	cmp	r3, r1
 8003556:	bf08      	it	eq
 8003558:	f042 0201 	orreq.w	r2, r2, #1
 800355c:	3128      	adds	r1, #40	; 0x28
 800355e:	4283      	cmp	r3, r0
 8003560:	bf08      	it	eq
 8003562:	f042 0201 	orreq.w	r2, r2, #1
 8003566:	3028      	adds	r0, #40	; 0x28
 8003568:	428b      	cmp	r3, r1
 800356a:	bf08      	it	eq
 800356c:	f042 0201 	orreq.w	r2, r2, #1
 8003570:	3128      	adds	r1, #40	; 0x28
 8003572:	4283      	cmp	r3, r0
 8003574:	bf08      	it	eq
 8003576:	f042 0201 	orreq.w	r2, r2, #1
 800357a:	428b      	cmp	r3, r1
 800357c:	bf08      	it	eq
 800357e:	f042 0201 	orreq.w	r2, r2, #1
 8003582:	b912      	cbnz	r2, 800358a <HAL_DMA_Init+0x426>
 8003584:	4a25      	ldr	r2, [pc, #148]	; (800361c <HAL_DMA_Init+0x4b8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d138      	bne.n	80035fc <HAL_DMA_Init+0x498>
    __HAL_UNLOCK(hdma);
 800358a:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800358c:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800358e:	4d29      	ldr	r5, [pc, #164]	; (8003634 <HAL_DMA_Init+0x4d0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8003590:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8003594:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003598:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800359a:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800359c:	68a2      	ldr	r2, [r4, #8]
 800359e:	2a40      	cmp	r2, #64	; 0x40
 80035a0:	d02a      	beq.n	80035f8 <HAL_DMA_Init+0x494>
 80035a2:	2a80      	cmp	r2, #128	; 0x80
 80035a4:	bf0c      	ite	eq
 80035a6:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 80035aa:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035ac:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035ae:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80035b2:	08d2      	lsrs	r2, r2, #3
 80035b4:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035b8:	6961      	ldr	r1, [r4, #20]
 80035ba:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035be:	69a1      	ldr	r1, [r4, #24]
 80035c0:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035c4:	69e1      	ldr	r1, [r4, #28]
 80035c6:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035ca:	491b      	ldr	r1, [pc, #108]	; (8003638 <HAL_DMA_Init+0x4d4>)
 80035cc:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 80035d0:	4419      	add	r1, r3
 80035d2:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035d4:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035d6:	4819      	ldr	r0, [pc, #100]	; (800363c <HAL_DMA_Init+0x4d8>)
 80035d8:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035dc:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80035de:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035e0:	090b      	lsrs	r3, r1, #4
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035e6:	f7ff fcd7 	bl	8002f98 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80035ec:	2301      	movs	r3, #1
 80035ee:	f002 021f 	and.w	r2, r2, #31
 80035f2:	4093      	lsls	r3, r2
 80035f4:	6043      	str	r3, [r0, #4]
 80035f6:	e64b      	b.n	8003290 <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035f8:	2010      	movs	r0, #16
 80035fa:	e7d7      	b.n	80035ac <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035fc:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80035fe:	2303      	movs	r3, #3
    return HAL_ERROR;
 8003600:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003602:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003604:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800360a:	bf00      	nop
 800360c:	c3c0003f 	.word	0xc3c0003f
 8003610:	ffff0000 	.word	0xffff0000
 8003614:	58025408 	.word	0x58025408
 8003618:	5802541c 	.word	0x5802541c
 800361c:	58025494 	.word	0x58025494
 8003620:	1000823f 	.word	0x1000823f
 8003624:	40020940 	.word	0x40020940
 8003628:	1600963f 	.word	0x1600963f
 800362c:	58025940 	.word	0x58025940
 8003630:	58025430 	.word	0x58025430
 8003634:	fffe000f 	.word	0xfffe000f
 8003638:	a7fdabf8 	.word	0xa7fdabf8
 800363c:	cccccccd 	.word	0xcccccccd

08003640 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8003640:	2800      	cmp	r0, #0
 8003642:	f000 8177 	beq.w	8003934 <HAL_DMA_Start_IT+0x2f4>
 8003646:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8003648:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800364c:	2801      	cmp	r0, #1
 800364e:	f000 8173 	beq.w	8003938 <HAL_DMA_Start_IT+0x2f8>
 8003652:	2001      	movs	r0, #1
{
 8003654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8003658:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 800365c:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003660:	4284      	cmp	r4, r0
 8003662:	d008      	beq.n	8003676 <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003664:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8003668:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800366a:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800366e:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8003672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003676:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8003678:	f8dc 4000 	ldr.w	r4, [ip]
 800367c:	4d53      	ldr	r5, [pc, #332]	; (80037cc <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800367e:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003682:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8003684:	4e52      	ldr	r6, [pc, #328]	; (80037d0 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003686:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800368a:	4852      	ldr	r0, [pc, #328]	; (80037d4 <HAL_DMA_Start_IT+0x194>)
 800368c:	42ac      	cmp	r4, r5
 800368e:	bf18      	it	ne
 8003690:	4284      	cmpne	r4, r0
 8003692:	f105 0518 	add.w	r5, r5, #24
 8003696:	bf0c      	ite	eq
 8003698:	2001      	moveq	r0, #1
 800369a:	2000      	movne	r0, #0
 800369c:	42ac      	cmp	r4, r5
 800369e:	bf08      	it	eq
 80036a0:	f040 0001 	orreq.w	r0, r0, #1
 80036a4:	3518      	adds	r5, #24
 80036a6:	42ac      	cmp	r4, r5
 80036a8:	bf08      	it	eq
 80036aa:	f040 0001 	orreq.w	r0, r0, #1
 80036ae:	3518      	adds	r5, #24
 80036b0:	42ac      	cmp	r4, r5
 80036b2:	bf08      	it	eq
 80036b4:	f040 0001 	orreq.w	r0, r0, #1
 80036b8:	3518      	adds	r5, #24
 80036ba:	42ac      	cmp	r4, r5
 80036bc:	bf08      	it	eq
 80036be:	f040 0001 	orreq.w	r0, r0, #1
 80036c2:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80036c6:	42ac      	cmp	r4, r5
 80036c8:	bf08      	it	eq
 80036ca:	f040 0001 	orreq.w	r0, r0, #1
 80036ce:	3518      	adds	r5, #24
 80036d0:	42ac      	cmp	r4, r5
 80036d2:	bf08      	it	eq
 80036d4:	f040 0001 	orreq.w	r0, r0, #1
 80036d8:	3518      	adds	r5, #24
 80036da:	42ac      	cmp	r4, r5
 80036dc:	bf08      	it	eq
 80036de:	f040 0001 	orreq.w	r0, r0, #1
 80036e2:	3518      	adds	r5, #24
 80036e4:	42ac      	cmp	r4, r5
 80036e6:	bf08      	it	eq
 80036e8:	f040 0001 	orreq.w	r0, r0, #1
 80036ec:	3518      	adds	r5, #24
 80036ee:	42ac      	cmp	r4, r5
 80036f0:	bf08      	it	eq
 80036f2:	f040 0001 	orreq.w	r0, r0, #1
 80036f6:	3518      	adds	r5, #24
 80036f8:	42ac      	cmp	r4, r5
 80036fa:	bf08      	it	eq
 80036fc:	f040 0001 	orreq.w	r0, r0, #1
 8003700:	3518      	adds	r5, #24
 8003702:	42ac      	cmp	r4, r5
 8003704:	bf08      	it	eq
 8003706:	f040 0001 	orreq.w	r0, r0, #1
 800370a:	3518      	adds	r5, #24
 800370c:	42ac      	cmp	r4, r5
 800370e:	bf14      	ite	ne
 8003710:	4681      	movne	r9, r0
 8003712:	f040 0901 	orreq.w	r9, r0, #1
 8003716:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 800371a:	42ac      	cmp	r4, r5
 800371c:	bf18      	it	ne
 800371e:	42b4      	cmpne	r4, r6
 8003720:	bf0c      	ite	eq
 8003722:	2501      	moveq	r5, #1
 8003724:	2500      	movne	r5, #0
 8003726:	d002      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 8003728:	f1b9 0f00 	cmp.w	r9, #0
 800372c:	d054      	beq.n	80037d8 <HAL_DMA_Start_IT+0x198>
 800372e:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003730:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8003734:	f026 0601 	bic.w	r6, r6, #1
 8003738:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800373a:	2d00      	cmp	r5, #0
 800373c:	d078      	beq.n	8003830 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800373e:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8003742:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003744:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8003748:	b117      	cbz	r7, 8003750 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800374a:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 800374e:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003750:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8003754:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8003758:	f006 081f 	and.w	r8, r6, #31
 800375c:	fa0e fe08 	lsl.w	lr, lr, r8
 8003760:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003764:	6826      	ldr	r6, [r4, #0]
 8003766:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 800376a:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800376c:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800376e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8003772:	2b40      	cmp	r3, #64	; 0x40
 8003774:	f000 80e2 	beq.w	800393c <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003778:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800377a:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800377c:	b91d      	cbnz	r5, 8003786 <HAL_DMA_Start_IT+0x146>
 800377e:	f1b9 0f00 	cmp.w	r9, #0
 8003782:	f000 80e1 	beq.w	8003948 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	f023 031e 	bic.w	r3, r3, #30
 800378c:	f043 0316 	orr.w	r3, r3, #22
 8003790:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003792:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8003796:	b11b      	cbz	r3, 80037a0 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	f043 0308 	orr.w	r3, r3, #8
 800379e:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037a0:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	03d2      	lsls	r2, r2, #15
 80037a8:	d503      	bpl.n	80037b2 <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b0:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80037b2:	b11f      	cbz	r7, 80037bc <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ba:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 80037bc:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	6023      	str	r3, [r4, #0]
}
 80037c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ca:	bf00      	nop
 80037cc:	40020058 	.word	0x40020058
 80037d0:	40020010 	.word	0x40020010
 80037d4:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037d8:	4f61      	ldr	r7, [pc, #388]	; (8003960 <HAL_DMA_Start_IT+0x320>)
 80037da:	4e62      	ldr	r6, [pc, #392]	; (8003964 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037dc:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037e0:	42b4      	cmp	r4, r6
 80037e2:	bf18      	it	ne
 80037e4:	42bc      	cmpne	r4, r7
 80037e6:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80037ea:	bf0c      	ite	eq
 80037ec:	2701      	moveq	r7, #1
 80037ee:	2700      	movne	r7, #0
 80037f0:	42b4      	cmp	r4, r6
 80037f2:	bf08      	it	eq
 80037f4:	f047 0701 	orreq.w	r7, r7, #1
 80037f8:	3614      	adds	r6, #20
 80037fa:	42b4      	cmp	r4, r6
 80037fc:	bf08      	it	eq
 80037fe:	f047 0701 	orreq.w	r7, r7, #1
 8003802:	3614      	adds	r6, #20
 8003804:	42b4      	cmp	r4, r6
 8003806:	bf08      	it	eq
 8003808:	f047 0701 	orreq.w	r7, r7, #1
 800380c:	3614      	adds	r6, #20
 800380e:	42b4      	cmp	r4, r6
 8003810:	bf08      	it	eq
 8003812:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8003816:	6826      	ldr	r6, [r4, #0]
 8003818:	f026 0601 	bic.w	r6, r6, #1
 800381c:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800381e:	4e52      	ldr	r6, [pc, #328]	; (8003968 <HAL_DMA_Start_IT+0x328>)
 8003820:	42b4      	cmp	r4, r6
 8003822:	bf08      	it	eq
 8003824:	f047 0701 	orreq.w	r7, r7, #1
 8003828:	b917      	cbnz	r7, 8003830 <HAL_DMA_Start_IT+0x1f0>
 800382a:	4f50      	ldr	r7, [pc, #320]	; (800396c <HAL_DMA_Start_IT+0x32c>)
 800382c:	42bc      	cmp	r4, r7
 800382e:	d10b      	bne.n	8003848 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003830:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8003834:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003836:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800383a:	b117      	cbz	r7, 8003842 <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800383c:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 8003840:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003842:	f1b9 0f00 	cmp.w	r9, #0
 8003846:	d183      	bne.n	8003750 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003848:	4f46      	ldr	r7, [pc, #280]	; (8003964 <HAL_DMA_Start_IT+0x324>)
 800384a:	f8df e114 	ldr.w	lr, [pc, #276]	; 8003960 <HAL_DMA_Start_IT+0x320>
 800384e:	4574      	cmp	r4, lr
 8003850:	bf18      	it	ne
 8003852:	42bc      	cmpne	r4, r7
 8003854:	f10e 0e14 	add.w	lr, lr, #20
 8003858:	bf0c      	ite	eq
 800385a:	2701      	moveq	r7, #1
 800385c:	2700      	movne	r7, #0
 800385e:	4574      	cmp	r4, lr
 8003860:	bf08      	it	eq
 8003862:	f047 0701 	orreq.w	r7, r7, #1
 8003866:	f10e 0e14 	add.w	lr, lr, #20
 800386a:	4574      	cmp	r4, lr
 800386c:	bf08      	it	eq
 800386e:	f047 0701 	orreq.w	r7, r7, #1
 8003872:	f10e 0e14 	add.w	lr, lr, #20
 8003876:	4574      	cmp	r4, lr
 8003878:	bf08      	it	eq
 800387a:	f047 0701 	orreq.w	r7, r7, #1
 800387e:	f10e 0e14 	add.w	lr, lr, #20
 8003882:	4574      	cmp	r4, lr
 8003884:	bf08      	it	eq
 8003886:	f047 0701 	orreq.w	r7, r7, #1
 800388a:	f10e 0e14 	add.w	lr, lr, #20
 800388e:	4574      	cmp	r4, lr
 8003890:	bf08      	it	eq
 8003892:	f047 0701 	orreq.w	r7, r7, #1
 8003896:	b917      	cbnz	r7, 800389e <HAL_DMA_Start_IT+0x25e>
 8003898:	4f34      	ldr	r7, [pc, #208]	; (800396c <HAL_DMA_Start_IT+0x32c>)
 800389a:	42bc      	cmp	r4, r7
 800389c:	d154      	bne.n	8003948 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800389e:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 80038a2:	2701      	movs	r7, #1
 80038a4:	f000 0e1f 	and.w	lr, r0, #31
 80038a8:	fa07 f70e 	lsl.w	r7, r7, lr
 80038ac:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80038b0:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038b2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	d043      	beq.n	8003942 <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80038ba:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80038bc:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	f023 030e 	bic.w	r3, r3, #14
 80038c4:	f043 030a 	orr.w	r3, r3, #10
 80038c8:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80038ca:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02d      	beq.n	800392e <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	f043 0304 	orr.w	r3, r3, #4
 80038d8:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038da:	4b21      	ldr	r3, [pc, #132]	; (8003960 <HAL_DMA_Start_IT+0x320>)
 80038dc:	4a21      	ldr	r2, [pc, #132]	; (8003964 <HAL_DMA_Start_IT+0x324>)
 80038de:	4294      	cmp	r4, r2
 80038e0:	bf18      	it	ne
 80038e2:	429c      	cmpne	r4, r3
 80038e4:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80038e8:	bf0c      	ite	eq
 80038ea:	2301      	moveq	r3, #1
 80038ec:	2300      	movne	r3, #0
 80038ee:	4294      	cmp	r4, r2
 80038f0:	bf08      	it	eq
 80038f2:	f043 0301 	orreq.w	r3, r3, #1
 80038f6:	3214      	adds	r2, #20
 80038f8:	4294      	cmp	r4, r2
 80038fa:	bf08      	it	eq
 80038fc:	f043 0301 	orreq.w	r3, r3, #1
 8003900:	3214      	adds	r2, #20
 8003902:	4294      	cmp	r4, r2
 8003904:	bf08      	it	eq
 8003906:	f043 0301 	orreq.w	r3, r3, #1
 800390a:	3214      	adds	r2, #20
 800390c:	4294      	cmp	r4, r2
 800390e:	bf08      	it	eq
 8003910:	f043 0301 	orreq.w	r3, r3, #1
 8003914:	3214      	adds	r2, #20
 8003916:	4294      	cmp	r4, r2
 8003918:	bf08      	it	eq
 800391a:	f043 0301 	orreq.w	r3, r3, #1
 800391e:	3214      	adds	r2, #20
 8003920:	4294      	cmp	r4, r2
 8003922:	bf08      	it	eq
 8003924:	f043 0301 	orreq.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	f43f af47 	beq.w	80037bc <HAL_DMA_Start_IT+0x17c>
 800392e:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8003932:	e735      	b.n	80037a0 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8003934:	2001      	movs	r0, #1
 8003936:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8003938:	2002      	movs	r0, #2
}
 800393a:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800393c:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800393e:	60e1      	str	r1, [r4, #12]
 8003940:	e71c      	b.n	800377c <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003942:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003944:	60e1      	str	r1, [r4, #12]
 8003946:	e7ba      	b.n	80038be <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	f023 030e 	bic.w	r3, r3, #14
 800394e:	f043 030a 	orr.w	r3, r3, #10
 8003952:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003954:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ba      	bne.n	80038d2 <HAL_DMA_Start_IT+0x292>
 800395c:	e7bd      	b.n	80038da <HAL_DMA_Start_IT+0x29a>
 800395e:	bf00      	nop
 8003960:	5802541c 	.word	0x5802541c
 8003964:	58025408 	.word	0x58025408
 8003968:	58025480 	.word	0x58025480
 800396c:	58025494 	.word	0x58025494

08003970 <HAL_DMA_Abort>:
{
 8003970:	b570      	push	{r4, r5, r6, lr}
 8003972:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003974:	f7fe fb2a 	bl	8001fcc <HAL_GetTick>
  if(hdma == NULL)
 8003978:	2d00      	cmp	r5, #0
 800397a:	f000 8124 	beq.w	8003bc6 <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800397e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8003982:	2b02      	cmp	r3, #2
 8003984:	f040 80dd 	bne.w	8003b42 <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003988:	682c      	ldr	r4, [r5, #0]
 800398a:	4606      	mov	r6, r0
 800398c:	4b8f      	ldr	r3, [pc, #572]	; (8003bcc <HAL_DMA_Abort+0x25c>)
 800398e:	4890      	ldr	r0, [pc, #576]	; (8003bd0 <HAL_DMA_Abort+0x260>)
 8003990:	4a90      	ldr	r2, [pc, #576]	; (8003bd4 <HAL_DMA_Abort+0x264>)
 8003992:	4284      	cmp	r4, r0
 8003994:	bf18      	it	ne
 8003996:	429c      	cmpne	r4, r3
 8003998:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800399c:	498e      	ldr	r1, [pc, #568]	; (8003bd8 <HAL_DMA_Abort+0x268>)
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	4284      	cmp	r4, r0
 80039a6:	bf08      	it	eq
 80039a8:	f043 0301 	orreq.w	r3, r3, #1
 80039ac:	3018      	adds	r0, #24
 80039ae:	4284      	cmp	r4, r0
 80039b0:	bf08      	it	eq
 80039b2:	f043 0301 	orreq.w	r3, r3, #1
 80039b6:	3018      	adds	r0, #24
 80039b8:	4284      	cmp	r4, r0
 80039ba:	bf08      	it	eq
 80039bc:	f043 0301 	orreq.w	r3, r3, #1
 80039c0:	3018      	adds	r0, #24
 80039c2:	4284      	cmp	r4, r0
 80039c4:	bf08      	it	eq
 80039c6:	f043 0301 	orreq.w	r3, r3, #1
 80039ca:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80039ce:	4284      	cmp	r4, r0
 80039d0:	bf08      	it	eq
 80039d2:	f043 0301 	orreq.w	r3, r3, #1
 80039d6:	3018      	adds	r0, #24
 80039d8:	4284      	cmp	r4, r0
 80039da:	bf08      	it	eq
 80039dc:	f043 0301 	orreq.w	r3, r3, #1
 80039e0:	3018      	adds	r0, #24
 80039e2:	4284      	cmp	r4, r0
 80039e4:	bf08      	it	eq
 80039e6:	f043 0301 	orreq.w	r3, r3, #1
 80039ea:	3018      	adds	r0, #24
 80039ec:	4284      	cmp	r4, r0
 80039ee:	bf08      	it	eq
 80039f0:	f043 0301 	orreq.w	r3, r3, #1
 80039f4:	3018      	adds	r0, #24
 80039f6:	4284      	cmp	r4, r0
 80039f8:	bf08      	it	eq
 80039fa:	f043 0301 	orreq.w	r3, r3, #1
 80039fe:	3018      	adds	r0, #24
 8003a00:	4284      	cmp	r4, r0
 8003a02:	bf08      	it	eq
 8003a04:	f043 0301 	orreq.w	r3, r3, #1
 8003a08:	3018      	adds	r0, #24
 8003a0a:	4284      	cmp	r4, r0
 8003a0c:	bf08      	it	eq
 8003a0e:	f043 0301 	orreq.w	r3, r3, #1
 8003a12:	3018      	adds	r0, #24
 8003a14:	4284      	cmp	r4, r0
 8003a16:	bf08      	it	eq
 8003a18:	f043 0301 	orreq.w	r3, r3, #1
 8003a1c:	428c      	cmp	r4, r1
 8003a1e:	bf18      	it	ne
 8003a20:	4294      	cmpne	r4, r2
 8003a22:	bf0c      	ite	eq
 8003a24:	2201      	moveq	r2, #1
 8003a26:	2200      	movne	r2, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_DMA_Abort+0xc0>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 8090 	beq.w	8003b50 <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003a30:	6821      	ldr	r1, [r4, #0]
 8003a32:	f021 011e 	bic.w	r1, r1, #30
 8003a36:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a38:	6961      	ldr	r1, [r4, #20]
 8003a3a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003a3e:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a40:	2a00      	cmp	r2, #0
 8003a42:	f000 80b0 	beq.w	8003ba6 <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a46:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8003a48:	6813      	ldr	r3, [r2, #0]
 8003a4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a4e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	6023      	str	r3, [r4, #0]
 8003a58:	e005      	b.n	8003a66 <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a5a:	f7fe fab7 	bl	8001fcc <HAL_GetTick>
 8003a5e:	1b83      	subs	r3, r0, r6
 8003a60:	2b05      	cmp	r3, #5
 8003a62:	f200 80a6 	bhi.w	8003bb2 <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	07db      	lsls	r3, r3, #31
 8003a6a:	d4f6      	bmi.n	8003a5a <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a6c:	682a      	ldr	r2, [r5, #0]
 8003a6e:	4b57      	ldr	r3, [pc, #348]	; (8003bcc <HAL_DMA_Abort+0x25c>)
 8003a70:	4857      	ldr	r0, [pc, #348]	; (8003bd0 <HAL_DMA_Abort+0x260>)
 8003a72:	495a      	ldr	r1, [pc, #360]	; (8003bdc <HAL_DMA_Abort+0x26c>)
 8003a74:	4282      	cmp	r2, r0
 8003a76:	bf18      	it	ne
 8003a78:	429a      	cmpne	r2, r3
 8003a7a:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	428a      	cmp	r2, r1
 8003a86:	bf08      	it	eq
 8003a88:	f043 0301 	orreq.w	r3, r3, #1
 8003a8c:	3130      	adds	r1, #48	; 0x30
 8003a8e:	4282      	cmp	r2, r0
 8003a90:	bf08      	it	eq
 8003a92:	f043 0301 	orreq.w	r3, r3, #1
 8003a96:	3030      	adds	r0, #48	; 0x30
 8003a98:	428a      	cmp	r2, r1
 8003a9a:	bf08      	it	eq
 8003a9c:	f043 0301 	orreq.w	r3, r3, #1
 8003aa0:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003aa4:	4282      	cmp	r2, r0
 8003aa6:	bf08      	it	eq
 8003aa8:	f043 0301 	orreq.w	r3, r3, #1
 8003aac:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003ab0:	428a      	cmp	r2, r1
 8003ab2:	bf08      	it	eq
 8003ab4:	f043 0301 	orreq.w	r3, r3, #1
 8003ab8:	3130      	adds	r1, #48	; 0x30
 8003aba:	4282      	cmp	r2, r0
 8003abc:	bf08      	it	eq
 8003abe:	f043 0301 	orreq.w	r3, r3, #1
 8003ac2:	3030      	adds	r0, #48	; 0x30
 8003ac4:	428a      	cmp	r2, r1
 8003ac6:	bf08      	it	eq
 8003ac8:	f043 0301 	orreq.w	r3, r3, #1
 8003acc:	3130      	adds	r1, #48	; 0x30
 8003ace:	4282      	cmp	r2, r0
 8003ad0:	bf08      	it	eq
 8003ad2:	f043 0301 	orreq.w	r3, r3, #1
 8003ad6:	3030      	adds	r0, #48	; 0x30
 8003ad8:	428a      	cmp	r2, r1
 8003ada:	bf08      	it	eq
 8003adc:	f043 0301 	orreq.w	r3, r3, #1
 8003ae0:	3130      	adds	r1, #48	; 0x30
 8003ae2:	4282      	cmp	r2, r0
 8003ae4:	bf08      	it	eq
 8003ae6:	f043 0301 	orreq.w	r3, r3, #1
 8003aea:	428a      	cmp	r2, r1
 8003aec:	bf08      	it	eq
 8003aee:	f043 0301 	orreq.w	r3, r3, #1
 8003af2:	3118      	adds	r1, #24
 8003af4:	428a      	cmp	r2, r1
 8003af6:	bf08      	it	eq
 8003af8:	f043 0301 	orreq.w	r3, r3, #1
 8003afc:	b933      	cbnz	r3, 8003b0c <HAL_DMA_Abort+0x19c>
 8003afe:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 8003b02:	4b35      	ldr	r3, [pc, #212]	; (8003bd8 <HAL_DMA_Abort+0x268>)
 8003b04:	429a      	cmp	r2, r3
 8003b06:	bf18      	it	ne
 8003b08:	428a      	cmpne	r2, r1
 8003b0a:	d16f      	bne.n	8003bec <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b0c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003b0e:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b10:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b12:	f002 021f 	and.w	r2, r2, #31
 8003b16:	4093      	lsls	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 8003b1a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b1c:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 8003b20:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8003b22:	b133      	cbz	r3, 8003b32 <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b24:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b26:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b2e:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b30:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003b32:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003b34:	2201      	movs	r2, #1
  return HAL_OK;
 8003b36:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8003b38:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8003b3c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8003b40:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b42:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8003b44:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003b46:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b48:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003b4a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b50:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b52:	4923      	ldr	r1, [pc, #140]	; (8003be0 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b54:	f022 020e 	bic.w	r2, r2, #14
 8003b58:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b5a:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <HAL_DMA_Abort+0x274>)
 8003b5c:	428c      	cmp	r4, r1
 8003b5e:	bf18      	it	ne
 8003b60:	4294      	cmpne	r4, r2
 8003b62:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8003b66:	bf0c      	ite	eq
 8003b68:	2201      	moveq	r2, #1
 8003b6a:	2200      	movne	r2, #0
 8003b6c:	428c      	cmp	r4, r1
 8003b6e:	bf08      	it	eq
 8003b70:	f042 0201 	orreq.w	r2, r2, #1
 8003b74:	3114      	adds	r1, #20
 8003b76:	428c      	cmp	r4, r1
 8003b78:	bf08      	it	eq
 8003b7a:	f042 0201 	orreq.w	r2, r2, #1
 8003b7e:	3114      	adds	r1, #20
 8003b80:	428c      	cmp	r4, r1
 8003b82:	bf08      	it	eq
 8003b84:	f042 0201 	orreq.w	r2, r2, #1
 8003b88:	3114      	adds	r1, #20
 8003b8a:	428c      	cmp	r4, r1
 8003b8c:	bf08      	it	eq
 8003b8e:	f042 0201 	orreq.w	r2, r2, #1
 8003b92:	3114      	adds	r1, #20
 8003b94:	428c      	cmp	r4, r1
 8003b96:	bf08      	it	eq
 8003b98:	f042 0201 	orreq.w	r2, r2, #1
 8003b9c:	b91a      	cbnz	r2, 8003ba6 <HAL_DMA_Abort+0x236>
 8003b9e:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <HAL_DMA_Abort+0x278>)
 8003ba0:	4294      	cmp	r4, r2
 8003ba2:	f47f af55 	bne.w	8003a50 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ba6:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8003ba8:	680a      	ldr	r2, [r1, #0]
 8003baa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bae:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003bb0:	e74e      	b.n	8003a50 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bb2:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bb4:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 8003bb6:	2300      	movs	r3, #0
        return HAL_ERROR;
 8003bb8:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bba:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8003bbc:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bc0:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 8003bc4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003bc6:	2001      	movs	r0, #1
}
 8003bc8:	bd70      	pop	{r4, r5, r6, pc}
 8003bca:	bf00      	nop
 8003bcc:	40020058 	.word	0x40020058
 8003bd0:	40020040 	.word	0x40020040
 8003bd4:	40020010 	.word	0x40020010
 8003bd8:	40020028 	.word	0x40020028
 8003bdc:	40020070 	.word	0x40020070
 8003be0:	58025408 	.word	0x58025408
 8003be4:	5802541c 	.word	0x5802541c
 8003be8:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bec:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8003bee:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bf0:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bf2:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bf6:	4c16      	ldr	r4, [pc, #88]	; (8003c50 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bf8:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bfa:	42a2      	cmp	r2, r4
 8003bfc:	bf18      	it	ne
 8003bfe:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c08:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c0a:	4812      	ldr	r0, [pc, #72]	; (8003c54 <HAL_DMA_Abort+0x2e4>)
 8003c0c:	4912      	ldr	r1, [pc, #72]	; (8003c58 <HAL_DMA_Abort+0x2e8>)
 8003c0e:	4282      	cmp	r2, r0
 8003c10:	bf08      	it	eq
 8003c12:	f043 0301 	orreq.w	r3, r3, #1
 8003c16:	3028      	adds	r0, #40	; 0x28
 8003c18:	428a      	cmp	r2, r1
 8003c1a:	bf08      	it	eq
 8003c1c:	f043 0301 	orreq.w	r3, r3, #1
 8003c20:	3128      	adds	r1, #40	; 0x28
 8003c22:	4282      	cmp	r2, r0
 8003c24:	bf08      	it	eq
 8003c26:	f043 0301 	orreq.w	r3, r3, #1
 8003c2a:	428a      	cmp	r2, r1
 8003c2c:	bf08      	it	eq
 8003c2e:	f043 0301 	orreq.w	r3, r3, #1
 8003c32:	3114      	adds	r1, #20
 8003c34:	428a      	cmp	r2, r1
 8003c36:	bf08      	it	eq
 8003c38:	f043 0301 	orreq.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f47f af6c 	bne.w	8003b1a <HAL_DMA_Abort+0x1aa>
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <HAL_DMA_Abort+0x2ec>)
 8003c44:	429a      	cmp	r2, r3
 8003c46:	f43f af68 	beq.w	8003b1a <HAL_DMA_Abort+0x1aa>
 8003c4a:	e772      	b.n	8003b32 <HAL_DMA_Abort+0x1c2>
 8003c4c:	5802541c 	.word	0x5802541c
 8003c50:	58025408 	.word	0x58025408
 8003c54:	58025430 	.word	0x58025430
 8003c58:	58025444 	.word	0x58025444
 8003c5c:	58025494 	.word	0x58025494

08003c60 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d05f      	beq.n	8003d24 <HAL_DMA_Abort_IT+0xc4>
{
 8003c64:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c66:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2a02      	cmp	r2, #2
 8003c6e:	d155      	bne.n	8003d1c <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c70:	6801      	ldr	r1, [r0, #0]
 8003c72:	4a57      	ldr	r2, [pc, #348]	; (8003dd0 <HAL_DMA_Abort_IT+0x170>)
 8003c74:	4291      	cmp	r1, r2
 8003c76:	d048      	beq.n	8003d0a <HAL_DMA_Abort_IT+0xaa>
 8003c78:	3218      	adds	r2, #24
 8003c7a:	4291      	cmp	r1, r2
 8003c7c:	d045      	beq.n	8003d0a <HAL_DMA_Abort_IT+0xaa>
 8003c7e:	3230      	adds	r2, #48	; 0x30
 8003c80:	4c54      	ldr	r4, [pc, #336]	; (8003dd4 <HAL_DMA_Abort_IT+0x174>)
 8003c82:	4855      	ldr	r0, [pc, #340]	; (8003dd8 <HAL_DMA_Abort_IT+0x178>)
 8003c84:	42a1      	cmp	r1, r4
 8003c86:	bf18      	it	ne
 8003c88:	4291      	cmpne	r1, r2
 8003c8a:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8003c8e:	bf0c      	ite	eq
 8003c90:	2201      	moveq	r2, #1
 8003c92:	2200      	movne	r2, #0
 8003c94:	4281      	cmp	r1, r0
 8003c96:	bf08      	it	eq
 8003c98:	f042 0201 	orreq.w	r2, r2, #1
 8003c9c:	3030      	adds	r0, #48	; 0x30
 8003c9e:	42a1      	cmp	r1, r4
 8003ca0:	bf08      	it	eq
 8003ca2:	f042 0201 	orreq.w	r2, r2, #1
 8003ca6:	3430      	adds	r4, #48	; 0x30
 8003ca8:	4281      	cmp	r1, r0
 8003caa:	bf08      	it	eq
 8003cac:	f042 0201 	orreq.w	r2, r2, #1
 8003cb0:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003cb4:	42a1      	cmp	r1, r4
 8003cb6:	bf08      	it	eq
 8003cb8:	f042 0201 	orreq.w	r2, r2, #1
 8003cbc:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8003cc0:	4281      	cmp	r1, r0
 8003cc2:	bf08      	it	eq
 8003cc4:	f042 0201 	orreq.w	r2, r2, #1
 8003cc8:	3030      	adds	r0, #48	; 0x30
 8003cca:	42a1      	cmp	r1, r4
 8003ccc:	bf08      	it	eq
 8003cce:	f042 0201 	orreq.w	r2, r2, #1
 8003cd2:	3430      	adds	r4, #48	; 0x30
 8003cd4:	4281      	cmp	r1, r0
 8003cd6:	bf08      	it	eq
 8003cd8:	f042 0201 	orreq.w	r2, r2, #1
 8003cdc:	3030      	adds	r0, #48	; 0x30
 8003cde:	42a1      	cmp	r1, r4
 8003ce0:	bf08      	it	eq
 8003ce2:	f042 0201 	orreq.w	r2, r2, #1
 8003ce6:	3430      	adds	r4, #48	; 0x30
 8003ce8:	4281      	cmp	r1, r0
 8003cea:	bf08      	it	eq
 8003cec:	f042 0201 	orreq.w	r2, r2, #1
 8003cf0:	3030      	adds	r0, #48	; 0x30
 8003cf2:	42a1      	cmp	r1, r4
 8003cf4:	bf08      	it	eq
 8003cf6:	f042 0201 	orreq.w	r2, r2, #1
 8003cfa:	4281      	cmp	r1, r0
 8003cfc:	bf08      	it	eq
 8003cfe:	f042 0201 	orreq.w	r2, r2, #1
 8003d02:	b912      	cbnz	r2, 8003d0a <HAL_DMA_Abort_IT+0xaa>
 8003d04:	4a35      	ldr	r2, [pc, #212]	; (8003ddc <HAL_DMA_Abort_IT+0x17c>)
 8003d06:	4291      	cmp	r1, r2
 8003d08:	d10e      	bne.n	8003d28 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d0a:	2204      	movs	r2, #4
  return HAL_OK;
 8003d0c:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003d12:	680b      	ldr	r3, [r1, #0]
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	600b      	str	r3, [r1, #0]
}
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d1c:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8003d1e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d20:	655a      	str	r2, [r3, #84]	; 0x54
}
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003d24:	2001      	movs	r0, #1
}
 8003d26:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d28:	4a2d      	ldr	r2, [pc, #180]	; (8003de0 <HAL_DMA_Abort_IT+0x180>)
 8003d2a:	4d2e      	ldr	r5, [pc, #184]	; (8003de4 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003d2c:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d2e:	42a9      	cmp	r1, r5
 8003d30:	bf18      	it	ne
 8003d32:	4291      	cmpne	r1, r2
 8003d34:	4c2c      	ldr	r4, [pc, #176]	; (8003de8 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003d36:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d3a:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8003d3e:	bf0c      	ite	eq
 8003d40:	2201      	moveq	r2, #1
 8003d42:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003d44:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d46:	42a1      	cmp	r1, r4
 8003d48:	bf08      	it	eq
 8003d4a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8003d4e:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d50:	3428      	adds	r4, #40	; 0x28
 8003d52:	42a9      	cmp	r1, r5
 8003d54:	bf08      	it	eq
 8003d56:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8003d5a:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d5e:	42a1      	cmp	r1, r4
 8003d60:	bf08      	it	eq
 8003d62:	f042 0201 	orreq.w	r2, r2, #1
 8003d66:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8003d68:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d6a:	42a1      	cmp	r1, r4
 8003d6c:	bf08      	it	eq
 8003d6e:	f042 0201 	orreq.w	r2, r2, #1
 8003d72:	481e      	ldr	r0, [pc, #120]	; (8003dec <HAL_DMA_Abort_IT+0x18c>)
 8003d74:	4281      	cmp	r1, r0
 8003d76:	bf08      	it	eq
 8003d78:	f042 0201 	orreq.w	r2, r2, #1
 8003d7c:	b912      	cbnz	r2, 8003d84 <HAL_DMA_Abort_IT+0x124>
 8003d7e:	4a1c      	ldr	r2, [pc, #112]	; (8003df0 <HAL_DMA_Abort_IT+0x190>)
 8003d80:	4291      	cmp	r1, r2
 8003d82:	d117      	bne.n	8003db4 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d84:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d86:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d88:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d8c:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d8e:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d92:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d96:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d98:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d9a:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8003d9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d9e:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 8003da2:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8003da4:	b132      	cbz	r2, 8003db4 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003da6:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003da8:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dac:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003db0:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003db2:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8003db4:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8003db6:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8003db8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8003dba:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8003dbe:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8003dc2:	b11a      	cbz	r2, 8003dcc <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	4790      	blx	r2
  return HAL_OK;
 8003dc8:	4620      	mov	r0, r4
}
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003dcc:	4610      	mov	r0, r2
}
 8003dce:	bd38      	pop	{r3, r4, r5, pc}
 8003dd0:	40020010 	.word	0x40020010
 8003dd4:	40020040 	.word	0x40020040
 8003dd8:	40020070 	.word	0x40020070
 8003ddc:	400204b8 	.word	0x400204b8
 8003de0:	5802541c 	.word	0x5802541c
 8003de4:	58025408 	.word	0x58025408
 8003de8:	58025430 	.word	0x58025430
 8003dec:	58025480 	.word	0x58025480
 8003df0:	58025494 	.word	0x58025494

08003df4 <HAL_DMA_IRQHandler>:
{
 8003df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 8003df8:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dfa:	4b9c      	ldr	r3, [pc, #624]	; (800406c <HAL_DMA_IRQHandler+0x278>)
{
 8003dfc:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003dfe:	4e9c      	ldr	r6, [pc, #624]	; (8004070 <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e00:	681d      	ldr	r5, [r3, #0]
{
 8003e02:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 8003e04:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e06:	6803      	ldr	r3, [r0, #0]
 8003e08:	4a9a      	ldr	r2, [pc, #616]	; (8004074 <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e0a:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	bf18      	it	ne
 8003e10:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8003e12:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e14:	bf08      	it	eq
 8003e16:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 8003e18:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e1a:	bf18      	it	ne
 8003e1c:	2600      	movne	r6, #0
 8003e1e:	d045      	beq.n	8003eac <HAL_DMA_IRQHandler+0xb8>
 8003e20:	3218      	adds	r2, #24
 8003e22:	4895      	ldr	r0, [pc, #596]	; (8004078 <HAL_DMA_IRQHandler+0x284>)
 8003e24:	4283      	cmp	r3, r0
 8003e26:	bf18      	it	ne
 8003e28:	4293      	cmpne	r3, r2
 8003e2a:	f100 0018 	add.w	r0, r0, #24
 8003e2e:	bf0c      	ite	eq
 8003e30:	2201      	moveq	r2, #1
 8003e32:	2200      	movne	r2, #0
 8003e34:	4283      	cmp	r3, r0
 8003e36:	bf08      	it	eq
 8003e38:	f042 0201 	orreq.w	r2, r2, #1
 8003e3c:	3018      	adds	r0, #24
 8003e3e:	4283      	cmp	r3, r0
 8003e40:	bf08      	it	eq
 8003e42:	f042 0201 	orreq.w	r2, r2, #1
 8003e46:	3018      	adds	r0, #24
 8003e48:	4283      	cmp	r3, r0
 8003e4a:	bf08      	it	eq
 8003e4c:	f042 0201 	orreq.w	r2, r2, #1
 8003e50:	3018      	adds	r0, #24
 8003e52:	4283      	cmp	r3, r0
 8003e54:	bf08      	it	eq
 8003e56:	f042 0201 	orreq.w	r2, r2, #1
 8003e5a:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003e5e:	4283      	cmp	r3, r0
 8003e60:	bf08      	it	eq
 8003e62:	f042 0201 	orreq.w	r2, r2, #1
 8003e66:	3018      	adds	r0, #24
 8003e68:	4283      	cmp	r3, r0
 8003e6a:	bf08      	it	eq
 8003e6c:	f042 0201 	orreq.w	r2, r2, #1
 8003e70:	3018      	adds	r0, #24
 8003e72:	4283      	cmp	r3, r0
 8003e74:	bf08      	it	eq
 8003e76:	f042 0201 	orreq.w	r2, r2, #1
 8003e7a:	3018      	adds	r0, #24
 8003e7c:	4283      	cmp	r3, r0
 8003e7e:	bf08      	it	eq
 8003e80:	f042 0201 	orreq.w	r2, r2, #1
 8003e84:	3018      	adds	r0, #24
 8003e86:	4283      	cmp	r3, r0
 8003e88:	bf08      	it	eq
 8003e8a:	f042 0201 	orreq.w	r2, r2, #1
 8003e8e:	3018      	adds	r0, #24
 8003e90:	4283      	cmp	r3, r0
 8003e92:	bf08      	it	eq
 8003e94:	f042 0201 	orreq.w	r2, r2, #1
 8003e98:	3018      	adds	r0, #24
 8003e9a:	4283      	cmp	r3, r0
 8003e9c:	bf08      	it	eq
 8003e9e:	f042 0201 	orreq.w	r2, r2, #1
 8003ea2:	b91a      	cbnz	r2, 8003eac <HAL_DMA_IRQHandler+0xb8>
 8003ea4:	4a75      	ldr	r2, [pc, #468]	; (800407c <HAL_DMA_IRQHandler+0x288>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	f040 8250 	bne.w	800434c <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003eac:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	f001 0c1f 	and.w	ip, r1, #31
 8003eb6:	fa02 f20c 	lsl.w	r2, r2, ip
 8003eba:	4217      	tst	r7, r2
 8003ebc:	f040 8188 	bne.w	80041d0 <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ec0:	fa27 f20c 	lsr.w	r2, r7, ip
 8003ec4:	07d2      	lsls	r2, r2, #31
 8003ec6:	d50c      	bpl.n	8003ee2 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	0610      	lsls	r0, r2, #24
 8003ecc:	d509      	bpl.n	8003ee2 <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ece:	2201      	movs	r2, #1
 8003ed0:	fa02 f20c 	lsl.w	r2, r2, ip
 8003ed4:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ed6:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8003eda:	f042 0202 	orr.w	r2, r2, #2
 8003ede:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ee2:	f04f 0e04 	mov.w	lr, #4
 8003ee6:	fa0e f00c 	lsl.w	r0, lr, ip
 8003eea:	4238      	tst	r0, r7
 8003eec:	d05b      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003eee:	2e00      	cmp	r6, #0
 8003ef0:	d14f      	bne.n	8003f92 <HAL_DMA_IRQHandler+0x19e>
 8003ef2:	4a61      	ldr	r2, [pc, #388]	; (8004078 <HAL_DMA_IRQHandler+0x284>)
 8003ef4:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8004080 <HAL_DMA_IRQHandler+0x28c>
 8003ef8:	4543      	cmp	r3, r8
 8003efa:	bf18      	it	ne
 8003efc:	4293      	cmpne	r3, r2
 8003efe:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8003f02:	bf0c      	ite	eq
 8003f04:	2201      	moveq	r2, #1
 8003f06:	2200      	movne	r2, #0
 8003f08:	4543      	cmp	r3, r8
 8003f0a:	bf08      	it	eq
 8003f0c:	f042 0201 	orreq.w	r2, r2, #1
 8003f10:	f108 0818 	add.w	r8, r8, #24
 8003f14:	4543      	cmp	r3, r8
 8003f16:	bf08      	it	eq
 8003f18:	f042 0201 	orreq.w	r2, r2, #1
 8003f1c:	f108 0818 	add.w	r8, r8, #24
 8003f20:	4543      	cmp	r3, r8
 8003f22:	bf08      	it	eq
 8003f24:	f042 0201 	orreq.w	r2, r2, #1
 8003f28:	f108 0818 	add.w	r8, r8, #24
 8003f2c:	4543      	cmp	r3, r8
 8003f2e:	bf08      	it	eq
 8003f30:	f042 0201 	orreq.w	r2, r2, #1
 8003f34:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8003f38:	4543      	cmp	r3, r8
 8003f3a:	bf08      	it	eq
 8003f3c:	f042 0201 	orreq.w	r2, r2, #1
 8003f40:	f108 0818 	add.w	r8, r8, #24
 8003f44:	4543      	cmp	r3, r8
 8003f46:	bf08      	it	eq
 8003f48:	f042 0201 	orreq.w	r2, r2, #1
 8003f4c:	f108 0818 	add.w	r8, r8, #24
 8003f50:	4543      	cmp	r3, r8
 8003f52:	bf08      	it	eq
 8003f54:	f042 0201 	orreq.w	r2, r2, #1
 8003f58:	f108 0818 	add.w	r8, r8, #24
 8003f5c:	4543      	cmp	r3, r8
 8003f5e:	bf08      	it	eq
 8003f60:	f042 0201 	orreq.w	r2, r2, #1
 8003f64:	f108 0818 	add.w	r8, r8, #24
 8003f68:	4543      	cmp	r3, r8
 8003f6a:	bf08      	it	eq
 8003f6c:	f042 0201 	orreq.w	r2, r2, #1
 8003f70:	f108 0818 	add.w	r8, r8, #24
 8003f74:	4543      	cmp	r3, r8
 8003f76:	bf08      	it	eq
 8003f78:	f042 0201 	orreq.w	r2, r2, #1
 8003f7c:	f108 0818 	add.w	r8, r8, #24
 8003f80:	4543      	cmp	r3, r8
 8003f82:	bf08      	it	eq
 8003f84:	f042 0201 	orreq.w	r2, r2, #1
 8003f88:	b91a      	cbnz	r2, 8003f92 <HAL_DMA_IRQHandler+0x19e>
 8003f8a:	4a3c      	ldr	r2, [pc, #240]	; (800407c <HAL_DMA_IRQHandler+0x288>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	f040 8219 	bne.w	80043c4 <HAL_DMA_IRQHandler+0x5d0>
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	0792      	lsls	r2, r2, #30
 8003f96:	d506      	bpl.n	8003fa6 <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f98:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f9a:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8003f9e:	f042 0204 	orr.w	r2, r2, #4
 8003fa2:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fa6:	2210      	movs	r2, #16
 8003fa8:	fa02 fc0c 	lsl.w	ip, r2, ip
 8003fac:	ea1c 0f07 	tst.w	ip, r7
 8003fb0:	d06c      	beq.n	800408c <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003fb2:	2e00      	cmp	r6, #0
 8003fb4:	d145      	bne.n	8004042 <HAL_DMA_IRQHandler+0x24e>
 8003fb6:	4a30      	ldr	r2, [pc, #192]	; (8004078 <HAL_DMA_IRQHandler+0x284>)
 8003fb8:	4e31      	ldr	r6, [pc, #196]	; (8004080 <HAL_DMA_IRQHandler+0x28c>)
 8003fba:	42b3      	cmp	r3, r6
 8003fbc:	bf18      	it	ne
 8003fbe:	4293      	cmpne	r3, r2
 8003fc0:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8003fc4:	bf0c      	ite	eq
 8003fc6:	2201      	moveq	r2, #1
 8003fc8:	2200      	movne	r2, #0
 8003fca:	42b3      	cmp	r3, r6
 8003fcc:	bf08      	it	eq
 8003fce:	f042 0201 	orreq.w	r2, r2, #1
 8003fd2:	3618      	adds	r6, #24
 8003fd4:	42b3      	cmp	r3, r6
 8003fd6:	bf08      	it	eq
 8003fd8:	f042 0201 	orreq.w	r2, r2, #1
 8003fdc:	3618      	adds	r6, #24
 8003fde:	42b3      	cmp	r3, r6
 8003fe0:	bf08      	it	eq
 8003fe2:	f042 0201 	orreq.w	r2, r2, #1
 8003fe6:	3618      	adds	r6, #24
 8003fe8:	42b3      	cmp	r3, r6
 8003fea:	bf08      	it	eq
 8003fec:	f042 0201 	orreq.w	r2, r2, #1
 8003ff0:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8003ff4:	42b3      	cmp	r3, r6
 8003ff6:	bf08      	it	eq
 8003ff8:	f042 0201 	orreq.w	r2, r2, #1
 8003ffc:	3618      	adds	r6, #24
 8003ffe:	42b3      	cmp	r3, r6
 8004000:	bf08      	it	eq
 8004002:	f042 0201 	orreq.w	r2, r2, #1
 8004006:	3618      	adds	r6, #24
 8004008:	42b3      	cmp	r3, r6
 800400a:	bf08      	it	eq
 800400c:	f042 0201 	orreq.w	r2, r2, #1
 8004010:	3618      	adds	r6, #24
 8004012:	42b3      	cmp	r3, r6
 8004014:	bf08      	it	eq
 8004016:	f042 0201 	orreq.w	r2, r2, #1
 800401a:	3618      	adds	r6, #24
 800401c:	42b3      	cmp	r3, r6
 800401e:	bf08      	it	eq
 8004020:	f042 0201 	orreq.w	r2, r2, #1
 8004024:	3618      	adds	r6, #24
 8004026:	42b3      	cmp	r3, r6
 8004028:	bf08      	it	eq
 800402a:	f042 0201 	orreq.w	r2, r2, #1
 800402e:	3618      	adds	r6, #24
 8004030:	42b3      	cmp	r3, r6
 8004032:	bf08      	it	eq
 8004034:	f042 0201 	orreq.w	r2, r2, #1
 8004038:	b91a      	cbnz	r2, 8004042 <HAL_DMA_IRQHandler+0x24e>
 800403a:	4a10      	ldr	r2, [pc, #64]	; (800407c <HAL_DMA_IRQHandler+0x288>)
 800403c:	4293      	cmp	r3, r2
 800403e:	f040 81c9 	bne.w	80043d4 <HAL_DMA_IRQHandler+0x5e0>
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	0710      	lsls	r0, r2, #28
 8004046:	d521      	bpl.n	800408c <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004048:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	0356      	lsls	r6, r2, #13
 8004050:	f100 814c 	bmi.w	80042ec <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	05d2      	lsls	r2, r2, #23
 8004058:	d403      	bmi.n	8004062 <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	f022 0208 	bic.w	r2, r2, #8
 8004060:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8004062:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8004066:	b18b      	cbz	r3, 800408c <HAL_DMA_IRQHandler+0x298>
 8004068:	e00c      	b.n	8004084 <HAL_DMA_IRQHandler+0x290>
 800406a:	bf00      	nop
 800406c:	20000034 	.word	0x20000034
 8004070:	40020010 	.word	0x40020010
 8004074:	40020028 	.word	0x40020028
 8004078:	40020058 	.word	0x40020058
 800407c:	400204b8 	.word	0x400204b8
 8004080:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8004084:	4648      	mov	r0, r9
 8004086:	4798      	blx	r3
 8004088:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800408c:	f001 011f 	and.w	r1, r1, #31
 8004090:	2620      	movs	r6, #32
 8004092:	408e      	lsls	r6, r1
 8004094:	423e      	tst	r6, r7
 8004096:	d068      	beq.n	800416a <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004098:	f8d9 2000 	ldr.w	r2, [r9]
 800409c:	4ba5      	ldr	r3, [pc, #660]	; (8004334 <HAL_DMA_IRQHandler+0x540>)
 800409e:	4fa6      	ldr	r7, [pc, #664]	; (8004338 <HAL_DMA_IRQHandler+0x544>)
 80040a0:	42ba      	cmp	r2, r7
 80040a2:	bf18      	it	ne
 80040a4:	429a      	cmpne	r2, r3
 80040a6:	f107 0718 	add.w	r7, r7, #24
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	42ba      	cmp	r2, r7
 80040b2:	bf08      	it	eq
 80040b4:	f043 0301 	orreq.w	r3, r3, #1
 80040b8:	3718      	adds	r7, #24
 80040ba:	42ba      	cmp	r2, r7
 80040bc:	bf08      	it	eq
 80040be:	f043 0301 	orreq.w	r3, r3, #1
 80040c2:	3718      	adds	r7, #24
 80040c4:	42ba      	cmp	r2, r7
 80040c6:	bf08      	it	eq
 80040c8:	f043 0301 	orreq.w	r3, r3, #1
 80040cc:	3718      	adds	r7, #24
 80040ce:	42ba      	cmp	r2, r7
 80040d0:	bf08      	it	eq
 80040d2:	f043 0301 	orreq.w	r3, r3, #1
 80040d6:	3718      	adds	r7, #24
 80040d8:	42ba      	cmp	r2, r7
 80040da:	bf08      	it	eq
 80040dc:	f043 0301 	orreq.w	r3, r3, #1
 80040e0:	3718      	adds	r7, #24
 80040e2:	42ba      	cmp	r2, r7
 80040e4:	bf08      	it	eq
 80040e6:	f043 0301 	orreq.w	r3, r3, #1
 80040ea:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80040ee:	42ba      	cmp	r2, r7
 80040f0:	bf08      	it	eq
 80040f2:	f043 0301 	orreq.w	r3, r3, #1
 80040f6:	3718      	adds	r7, #24
 80040f8:	42ba      	cmp	r2, r7
 80040fa:	bf08      	it	eq
 80040fc:	f043 0301 	orreq.w	r3, r3, #1
 8004100:	3718      	adds	r7, #24
 8004102:	42ba      	cmp	r2, r7
 8004104:	bf08      	it	eq
 8004106:	f043 0301 	orreq.w	r3, r3, #1
 800410a:	3718      	adds	r7, #24
 800410c:	42ba      	cmp	r2, r7
 800410e:	bf08      	it	eq
 8004110:	f043 0301 	orreq.w	r3, r3, #1
 8004114:	3718      	adds	r7, #24
 8004116:	42ba      	cmp	r2, r7
 8004118:	bf08      	it	eq
 800411a:	f043 0301 	orreq.w	r3, r3, #1
 800411e:	3718      	adds	r7, #24
 8004120:	42ba      	cmp	r2, r7
 8004122:	bf08      	it	eq
 8004124:	f043 0301 	orreq.w	r3, r3, #1
 8004128:	3718      	adds	r7, #24
 800412a:	42ba      	cmp	r2, r7
 800412c:	bf08      	it	eq
 800412e:	f043 0301 	orreq.w	r3, r3, #1
 8004132:	b91b      	cbnz	r3, 800413c <HAL_DMA_IRQHandler+0x348>
 8004134:	4b81      	ldr	r3, [pc, #516]	; (800433c <HAL_DMA_IRQHandler+0x548>)
 8004136:	429a      	cmp	r2, r3
 8004138:	f040 8162 	bne.w	8004400 <HAL_DMA_IRQHandler+0x60c>
 800413c:	6813      	ldr	r3, [r2, #0]
 800413e:	06db      	lsls	r3, r3, #27
 8004140:	d513      	bpl.n	800416a <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004142:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004144:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 8004148:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800414a:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800414c:	f000 80ae 	beq.w	80042ac <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004150:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004154:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004156:	f000 80d3 	beq.w	8004300 <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800415a:	031c      	lsls	r4, r3, #12
 800415c:	f140 80de 	bpl.w	800431c <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 8004160:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8004164:	b10b      	cbz	r3, 800416a <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 8004166:	4648      	mov	r0, r9
 8004168:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800416a:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 80b9 	beq.w	80042e6 <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004174:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8004178:	07d8      	lsls	r0, r3, #31
 800417a:	d51f      	bpl.n	80041bc <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 800417c:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 8004180:	2104      	movs	r1, #4
 8004182:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8004186:	6813      	ldr	r3, [r2, #0]
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800418e:	4b6c      	ldr	r3, [pc, #432]	; (8004340 <HAL_DMA_IRQHandler+0x54c>)
 8004190:	fba3 3505 	umull	r3, r5, r3, r5
 8004194:	0aad      	lsrs	r5, r5, #10
 8004196:	e002      	b.n	800419e <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004198:	6813      	ldr	r3, [r2, #0]
 800419a:	07d9      	lsls	r1, r3, #31
 800419c:	d504      	bpl.n	80041a8 <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 800419e:	9b01      	ldr	r3, [sp, #4]
 80041a0:	3301      	adds	r3, #1
 80041a2:	42ab      	cmp	r3, r5
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	d9f7      	bls.n	8004198 <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041a8:	6813      	ldr	r3, [r2, #0]
 80041aa:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80041ac:	bf4c      	ite	mi
 80041ae:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80041b0:	2301      	movpl	r3, #1
 80041b2:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80041b6:	2300      	movs	r3, #0
 80041b8:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 80041bc:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 8090 	beq.w	80042e6 <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 80041c6:	4648      	mov	r0, r9
}
 80041c8:	b003      	add	sp, #12
 80041ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 80041ce:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	0740      	lsls	r0, r0, #29
 80041d4:	d50a      	bpl.n	80041ec <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	f020 0004 	bic.w	r0, r0, #4
 80041dc:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041de:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041e0:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041ec:	fa27 f20c 	lsr.w	r2, r7, ip
 80041f0:	07d2      	lsls	r2, r2, #31
 80041f2:	f57f ae76 	bpl.w	8003ee2 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80041f6:	4a53      	ldr	r2, [pc, #332]	; (8004344 <HAL_DMA_IRQHandler+0x550>)
 80041f8:	4853      	ldr	r0, [pc, #332]	; (8004348 <HAL_DMA_IRQHandler+0x554>)
 80041fa:	4283      	cmp	r3, r0
 80041fc:	bf18      	it	ne
 80041fe:	4293      	cmpne	r3, r2
 8004200:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8004204:	bf0c      	ite	eq
 8004206:	2201      	moveq	r2, #1
 8004208:	2200      	movne	r2, #0
 800420a:	4283      	cmp	r3, r0
 800420c:	bf08      	it	eq
 800420e:	f042 0201 	orreq.w	r2, r2, #1
 8004212:	3018      	adds	r0, #24
 8004214:	4283      	cmp	r3, r0
 8004216:	bf08      	it	eq
 8004218:	f042 0201 	orreq.w	r2, r2, #1
 800421c:	3018      	adds	r0, #24
 800421e:	4283      	cmp	r3, r0
 8004220:	bf08      	it	eq
 8004222:	f042 0201 	orreq.w	r2, r2, #1
 8004226:	3018      	adds	r0, #24
 8004228:	4283      	cmp	r3, r0
 800422a:	bf08      	it	eq
 800422c:	f042 0201 	orreq.w	r2, r2, #1
 8004230:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8004234:	4283      	cmp	r3, r0
 8004236:	bf08      	it	eq
 8004238:	f042 0201 	orreq.w	r2, r2, #1
 800423c:	3018      	adds	r0, #24
 800423e:	4283      	cmp	r3, r0
 8004240:	bf08      	it	eq
 8004242:	f042 0201 	orreq.w	r2, r2, #1
 8004246:	3018      	adds	r0, #24
 8004248:	4283      	cmp	r3, r0
 800424a:	bf08      	it	eq
 800424c:	f042 0201 	orreq.w	r2, r2, #1
 8004250:	3018      	adds	r0, #24
 8004252:	4283      	cmp	r3, r0
 8004254:	bf08      	it	eq
 8004256:	f042 0201 	orreq.w	r2, r2, #1
 800425a:	3018      	adds	r0, #24
 800425c:	4283      	cmp	r3, r0
 800425e:	bf08      	it	eq
 8004260:	f042 0201 	orreq.w	r2, r2, #1
 8004264:	3018      	adds	r0, #24
 8004266:	4283      	cmp	r3, r0
 8004268:	bf08      	it	eq
 800426a:	f042 0201 	orreq.w	r2, r2, #1
 800426e:	3018      	adds	r0, #24
 8004270:	4283      	cmp	r3, r0
 8004272:	bf08      	it	eq
 8004274:	f042 0201 	orreq.w	r2, r2, #1
 8004278:	3018      	adds	r0, #24
 800427a:	4283      	cmp	r3, r0
 800427c:	bf08      	it	eq
 800427e:	f042 0201 	orreq.w	r2, r2, #1
 8004282:	2a00      	cmp	r2, #0
 8004284:	f47f ae20 	bne.w	8003ec8 <HAL_DMA_IRQHandler+0xd4>
 8004288:	2e00      	cmp	r6, #0
 800428a:	f47f ae1d 	bne.w	8003ec8 <HAL_DMA_IRQHandler+0xd4>
 800428e:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004290:	2204      	movs	r2, #4
 8004292:	fa02 f20c 	lsl.w	r2, r2, ip
 8004296:	423a      	tst	r2, r7
 8004298:	f040 8094 	bne.w	80043c4 <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800429c:	2210      	movs	r2, #16
 800429e:	fa02 fc0c 	lsl.w	ip, r2, ip
 80042a2:	ea17 0f0c 	tst.w	r7, ip
 80042a6:	f43f aef1 	beq.w	800408c <HAL_DMA_IRQHandler+0x298>
 80042aa:	e684      	b.n	8003fb6 <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042ac:	f023 0316 	bic.w	r3, r3, #22
 80042b0:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80042b2:	6953      	ldr	r3, [r2, #20]
 80042b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b8:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042ba:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 80042be:	b39b      	cbz	r3, 8004328 <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042c0:	6813      	ldr	r3, [r2, #0]
 80042c2:	f023 0308 	bic.w	r3, r3, #8
 80042c6:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042c8:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 80042ca:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
 80042cc:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042ce:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 80042d2:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042d6:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80042d8:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80042dc:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f47f af70 	bne.w	80041c6 <HAL_DMA_IRQHandler+0x3d2>
}
 80042e6:	b003      	add	sp, #12
 80042e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	0318      	lsls	r0, r3, #12
 80042f0:	f57f aeb7 	bpl.w	8004062 <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042f4:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f47f aec3 	bne.w	8004084 <HAL_DMA_IRQHandler+0x290>
 80042fe:	e6c5      	b.n	800408c <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004300:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8004304:	f47f af2c 	bne.w	8004160 <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004308:	6811      	ldr	r1, [r2, #0]
 800430a:	f021 0110 	bic.w	r1, r1, #16
 800430e:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8004310:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8004312:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8004316:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 800431a:	e721      	b.n	8004160 <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 800431c:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8004320:	2b00      	cmp	r3, #0
 8004322:	f47f af20 	bne.w	8004166 <HAL_DMA_IRQHandler+0x372>
 8004326:	e720      	b.n	800416a <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004328:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1c7      	bne.n	80042c0 <HAL_DMA_IRQHandler+0x4cc>
 8004330:	e7ca      	b.n	80042c8 <HAL_DMA_IRQHandler+0x4d4>
 8004332:	bf00      	nop
 8004334:	40020010 	.word	0x40020010
 8004338:	40020028 	.word	0x40020028
 800433c:	400204b8 	.word	0x400204b8
 8004340:	1b4e81b5 	.word	0x1b4e81b5
 8004344:	40020058 	.word	0x40020058
 8004348:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800434c:	4a4e      	ldr	r2, [pc, #312]	; (8004488 <HAL_DMA_IRQHandler+0x694>)
 800434e:	4d4f      	ldr	r5, [pc, #316]	; (800448c <HAL_DMA_IRQHandler+0x698>)
 8004350:	42ab      	cmp	r3, r5
 8004352:	bf18      	it	ne
 8004354:	4293      	cmpne	r3, r2
 8004356:	f105 0514 	add.w	r5, r5, #20
 800435a:	bf0c      	ite	eq
 800435c:	2201      	moveq	r2, #1
 800435e:	2200      	movne	r2, #0
 8004360:	42ab      	cmp	r3, r5
 8004362:	bf08      	it	eq
 8004364:	f042 0201 	orreq.w	r2, r2, #1
 8004368:	3514      	adds	r5, #20
 800436a:	42ab      	cmp	r3, r5
 800436c:	bf08      	it	eq
 800436e:	f042 0201 	orreq.w	r2, r2, #1
 8004372:	3514      	adds	r5, #20
 8004374:	42ab      	cmp	r3, r5
 8004376:	bf08      	it	eq
 8004378:	f042 0201 	orreq.w	r2, r2, #1
 800437c:	3514      	adds	r5, #20
 800437e:	42ab      	cmp	r3, r5
 8004380:	bf08      	it	eq
 8004382:	f042 0201 	orreq.w	r2, r2, #1
 8004386:	3514      	adds	r5, #20
 8004388:	42ab      	cmp	r3, r5
 800438a:	bf08      	it	eq
 800438c:	f042 0201 	orreq.w	r2, r2, #1
 8004390:	b912      	cbnz	r2, 8004398 <HAL_DMA_IRQHandler+0x5a4>
 8004392:	4a3f      	ldr	r2, [pc, #252]	; (8004490 <HAL_DMA_IRQHandler+0x69c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d1a6      	bne.n	80042e6 <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004398:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 800439c:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800439e:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80043a0:	f005 051f 	and.w	r5, r5, #31
 80043a4:	40ae      	lsls	r6, r5
 80043a6:	420e      	tst	r6, r1
 80043a8:	d019      	beq.n	80043de <HAL_DMA_IRQHandler+0x5ea>
 80043aa:	0757      	lsls	r7, r2, #29
 80043ac:	d517      	bpl.n	80043de <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043ae:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80043b0:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043b2:	d54b      	bpl.n	800444c <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043b4:	03d1      	lsls	r1, r2, #15
 80043b6:	d44f      	bmi.n	8004458 <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043b8:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f47f af02 	bne.w	80041c6 <HAL_DMA_IRQHandler+0x3d2>
 80043c2:	e790      	b.n	80042e6 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80043c4:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043c6:	2210      	movs	r2, #16
 80043c8:	fa02 fc0c 	lsl.w	ip, r2, ip
 80043cc:	ea17 0f0c 	tst.w	r7, ip
 80043d0:	f43f ae5c 	beq.w	800408c <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	0752      	lsls	r2, r2, #29
 80043d8:	f57f ae58 	bpl.w	800408c <HAL_DMA_IRQHandler+0x298>
 80043dc:	e634      	b.n	8004048 <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80043de:	2602      	movs	r6, #2
 80043e0:	40ae      	lsls	r6, r5
 80043e2:	420e      	tst	r6, r1
 80043e4:	d011      	beq.n	800440a <HAL_DMA_IRQHandler+0x616>
 80043e6:	0797      	lsls	r7, r2, #30
 80043e8:	d50f      	bpl.n	800440a <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80043ea:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043ec:	0414      	lsls	r4, r2, #16
 80043ee:	d539      	bpl.n	8004464 <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043f0:	03d0      	lsls	r0, r2, #15
 80043f2:	d443      	bmi.n	800447c <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 80043f4:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f47f aee4 	bne.w	80041c6 <HAL_DMA_IRQHandler+0x3d2>
 80043fe:	e772      	b.n	80042e6 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004400:	6813      	ldr	r3, [r2, #0]
 8004402:	079f      	lsls	r7, r3, #30
 8004404:	f57f aeb1 	bpl.w	800416a <HAL_DMA_IRQHandler+0x376>
 8004408:	e69b      	b.n	8004142 <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800440a:	2608      	movs	r6, #8
 800440c:	40ae      	lsls	r6, r5
 800440e:	420e      	tst	r6, r1
 8004410:	f43f af69 	beq.w	80042e6 <HAL_DMA_IRQHandler+0x4f2>
 8004414:	0711      	lsls	r1, r2, #28
 8004416:	f57f af66 	bpl.w	80042e6 <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800441a:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 800441c:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800441e:	f022 020e 	bic.w	r2, r2, #14
 8004422:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004424:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8004426:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800442a:	fa03 f505 	lsl.w	r5, r3, r5
 800442e:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004430:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8004434:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004438:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800443c:	2a00      	cmp	r2, #0
 800443e:	f43f af52 	beq.w	80042e6 <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 8004442:	4648      	mov	r0, r9
}
 8004444:	b003      	add	sp, #12
 8004446:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 800444a:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800444c:	0692      	lsls	r2, r2, #26
 800444e:	d403      	bmi.n	8004458 <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	f022 0204 	bic.w	r2, r2, #4
 8004456:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8004458:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	f47f aeb2 	bne.w	80041c6 <HAL_DMA_IRQHandler+0x3d2>
 8004462:	e740      	b.n	80042e6 <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004464:	f012 0220 	ands.w	r2, r2, #32
 8004468:	d108      	bne.n	800447c <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800446a:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800446c:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800446e:	f021 010a 	bic.w	r1, r1, #10
 8004472:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004474:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8004478:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800447c:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8004480:	2b00      	cmp	r3, #0
 8004482:	f47f aea0 	bne.w	80041c6 <HAL_DMA_IRQHandler+0x3d2>
 8004486:	e72e      	b.n	80042e6 <HAL_DMA_IRQHandler+0x4f2>
 8004488:	58025408 	.word	0x58025408
 800448c:	5802541c 	.word	0x5802541c
 8004490:	58025494 	.word	0x58025494

08004494 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8004494:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8004496:	4770      	bx	lr

08004498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800449c:	680c      	ldr	r4, [r1, #0]
{
 800449e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044a0:	2c00      	cmp	r4, #0
 80044a2:	f000 80a6 	beq.w	80045f2 <HAL_GPIO_Init+0x15a>
 80044a6:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044aa:	4f8e      	ldr	r7, [pc, #568]	; (80046e4 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 80044ac:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044ae:	2201      	movs	r2, #1
 80044b0:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80044b2:	ea12 0e04 	ands.w	lr, r2, r4
 80044b6:	f000 8095 	beq.w	80045e4 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044ba:	684d      	ldr	r5, [r1, #4]
 80044bc:	f005 0903 	and.w	r9, r5, #3
 80044c0:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 80044c4:	2e01      	cmp	r6, #1
 80044c6:	f240 8097 	bls.w	80045f8 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044ca:	f1b9 0f03 	cmp.w	r9, #3
 80044ce:	f040 80d1 	bne.w	8004674 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044d2:	fa09 f20c 	lsl.w	r2, r9, ip
 80044d6:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 80044da:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044dc:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044e0:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044e4:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 80044e8:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044ea:	d07b      	beq.n	80045e4 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ec:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80044f0:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044f4:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f8:	f042 0202 	orr.w	r2, r2, #2
 80044fc:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004500:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004504:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004508:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 800450c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004510:	f002 0202 	and.w	r2, r2, #2
 8004514:	9201      	str	r2, [sp, #4]
 8004516:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004518:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 800451a:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800451e:	fa02 f209 	lsl.w	r2, r2, r9
 8004522:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004526:	4e70      	ldr	r6, [pc, #448]	; (80046e8 <HAL_GPIO_Init+0x250>)
 8004528:	42b0      	cmp	r0, r6
 800452a:	d029      	beq.n	8004580 <HAL_GPIO_Init+0xe8>
 800452c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004530:	42b0      	cmp	r0, r6
 8004532:	f000 80ac 	beq.w	800468e <HAL_GPIO_Init+0x1f6>
 8004536:	4e6d      	ldr	r6, [pc, #436]	; (80046ec <HAL_GPIO_Init+0x254>)
 8004538:	42b0      	cmp	r0, r6
 800453a:	f000 80ae 	beq.w	800469a <HAL_GPIO_Init+0x202>
 800453e:	4e6c      	ldr	r6, [pc, #432]	; (80046f0 <HAL_GPIO_Init+0x258>)
 8004540:	42b0      	cmp	r0, r6
 8004542:	f000 809e 	beq.w	8004682 <HAL_GPIO_Init+0x1ea>
 8004546:	4e6b      	ldr	r6, [pc, #428]	; (80046f4 <HAL_GPIO_Init+0x25c>)
 8004548:	42b0      	cmp	r0, r6
 800454a:	f000 80b2 	beq.w	80046b2 <HAL_GPIO_Init+0x21a>
 800454e:	4e6a      	ldr	r6, [pc, #424]	; (80046f8 <HAL_GPIO_Init+0x260>)
 8004550:	42b0      	cmp	r0, r6
 8004552:	f000 80b4 	beq.w	80046be <HAL_GPIO_Init+0x226>
 8004556:	4e69      	ldr	r6, [pc, #420]	; (80046fc <HAL_GPIO_Init+0x264>)
 8004558:	42b0      	cmp	r0, r6
 800455a:	f000 80a4 	beq.w	80046a6 <HAL_GPIO_Init+0x20e>
 800455e:	4e68      	ldr	r6, [pc, #416]	; (8004700 <HAL_GPIO_Init+0x268>)
 8004560:	42b0      	cmp	r0, r6
 8004562:	f000 80b2 	beq.w	80046ca <HAL_GPIO_Init+0x232>
 8004566:	4e67      	ldr	r6, [pc, #412]	; (8004704 <HAL_GPIO_Init+0x26c>)
 8004568:	42b0      	cmp	r0, r6
 800456a:	f000 80b4 	beq.w	80046d6 <HAL_GPIO_Init+0x23e>
 800456e:	4e66      	ldr	r6, [pc, #408]	; (8004708 <HAL_GPIO_Init+0x270>)
 8004570:	42b0      	cmp	r0, r6
 8004572:	bf0c      	ite	eq
 8004574:	2609      	moveq	r6, #9
 8004576:	260a      	movne	r6, #10
 8004578:	fa06 f909 	lsl.w	r9, r6, r9
 800457c:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004580:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004588:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800458a:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 800458e:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004590:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8004594:	bf54      	ite	pl
 8004596:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 800459a:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 800459e:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045a0:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 80045a2:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80045a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80045a8:	bf54      	ite	pl
 80045aa:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80045ae:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 80045b2:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80045b4:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045b8:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80045ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80045be:	bf54      	ite	pl
 80045c0:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80045c4:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045c8:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80045ca:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80045ce:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80045d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 80045d6:	bf54      	ite	pl
 80045d8:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 80045dc:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80045e0:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 80045e4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045e6:	f10c 0c02 	add.w	ip, ip, #2
 80045ea:	fa34 f203 	lsrs.w	r2, r4, r3
 80045ee:	f47f af5e 	bne.w	80044ae <HAL_GPIO_Init+0x16>
  }
}
 80045f2:	b003      	add	sp, #12
 80045f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045f8:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 80045fc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045fe:	fa08 f80c 	lsl.w	r8, r8, ip
 8004602:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004606:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004608:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800460c:	fa06 f60c 	lsl.w	r6, r6, ip
 8004610:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8004614:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004616:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 800461a:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800461e:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004620:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004624:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8004626:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8004628:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800462a:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800462e:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004630:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004634:	fa06 f60c 	lsl.w	r6, r6, ip
 8004638:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 800463c:	fa09 f20c 	lsl.w	r2, r9, ip
 8004640:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004642:	f47f af4a 	bne.w	80044da <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004646:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800464a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800464e:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 8004652:	260f      	movs	r6, #15
 8004654:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8004658:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 800465c:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004660:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004664:	690e      	ldr	r6, [r1, #16]
 8004666:	fa06 f60b 	lsl.w	r6, r6, fp
 800466a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 800466e:	f8c9 6020 	str.w	r6, [r9, #32]
 8004672:	e732      	b.n	80044da <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004674:	f04f 0803 	mov.w	r8, #3
 8004678:	fa08 f80c 	lsl.w	r8, r8, ip
 800467c:	ea6f 0808 	mvn.w	r8, r8
 8004680:	e7d2      	b.n	8004628 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004682:	2603      	movs	r6, #3
 8004684:	fa06 f909 	lsl.w	r9, r6, r9
 8004688:	ea42 0209 	orr.w	r2, r2, r9
 800468c:	e778      	b.n	8004580 <HAL_GPIO_Init+0xe8>
 800468e:	2601      	movs	r6, #1
 8004690:	fa06 f909 	lsl.w	r9, r6, r9
 8004694:	ea42 0209 	orr.w	r2, r2, r9
 8004698:	e772      	b.n	8004580 <HAL_GPIO_Init+0xe8>
 800469a:	2602      	movs	r6, #2
 800469c:	fa06 f909 	lsl.w	r9, r6, r9
 80046a0:	ea42 0209 	orr.w	r2, r2, r9
 80046a4:	e76c      	b.n	8004580 <HAL_GPIO_Init+0xe8>
 80046a6:	2606      	movs	r6, #6
 80046a8:	fa06 f909 	lsl.w	r9, r6, r9
 80046ac:	ea42 0209 	orr.w	r2, r2, r9
 80046b0:	e766      	b.n	8004580 <HAL_GPIO_Init+0xe8>
 80046b2:	2604      	movs	r6, #4
 80046b4:	fa06 f909 	lsl.w	r9, r6, r9
 80046b8:	ea42 0209 	orr.w	r2, r2, r9
 80046bc:	e760      	b.n	8004580 <HAL_GPIO_Init+0xe8>
 80046be:	2605      	movs	r6, #5
 80046c0:	fa06 f909 	lsl.w	r9, r6, r9
 80046c4:	ea42 0209 	orr.w	r2, r2, r9
 80046c8:	e75a      	b.n	8004580 <HAL_GPIO_Init+0xe8>
 80046ca:	2607      	movs	r6, #7
 80046cc:	fa06 f909 	lsl.w	r9, r6, r9
 80046d0:	ea42 0209 	orr.w	r2, r2, r9
 80046d4:	e754      	b.n	8004580 <HAL_GPIO_Init+0xe8>
 80046d6:	2608      	movs	r6, #8
 80046d8:	fa06 f909 	lsl.w	r9, r6, r9
 80046dc:	ea42 0209 	orr.w	r2, r2, r9
 80046e0:	e74e      	b.n	8004580 <HAL_GPIO_Init+0xe8>
 80046e2:	bf00      	nop
 80046e4:	58024400 	.word	0x58024400
 80046e8:	58020000 	.word	0x58020000
 80046ec:	58020800 	.word	0x58020800
 80046f0:	58020c00 	.word	0x58020c00
 80046f4:	58021000 	.word	0x58021000
 80046f8:	58021400 	.word	0x58021400
 80046fc:	58021800 	.word	0x58021800
 8004700:	58021c00 	.word	0x58021c00
 8004704:	58022000 	.word	0x58022000
 8004708:	58022400 	.word	0x58022400

0800470c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800470c:	6903      	ldr	r3, [r0, #16]
 800470e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004710:	bf14      	ite	ne
 8004712:	2001      	movne	r0, #1
 8004714:	2000      	moveq	r0, #0
 8004716:	4770      	bx	lr

08004718 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004718:	b902      	cbnz	r2, 800471c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800471a:	0409      	lsls	r1, r1, #16
 800471c:	6181      	str	r1, [r0, #24]
  }
}
 800471e:	4770      	bx	lr

08004720 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004724:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8004728:	4201      	tst	r1, r0
 800472a:	d100      	bne.n	800472e <HAL_GPIO_EXTI_IRQHandler+0xe>
 800472c:	4770      	bx	lr
{
 800472e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004730:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004734:	f7fd f8a2 	bl	800187c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004738:	bd08      	pop	{r3, pc}
 800473a:	bf00      	nop

0800473c <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800473c:	2800      	cmp	r0, #0
 800473e:	d04e      	beq.n	80047de <HAL_I2C_Init+0xa2>
{
 8004740:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004742:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004746:	4604      	mov	r4, r0
 8004748:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800474c:	2b00      	cmp	r3, #0
 800474e:	d041      	beq.n	80047d4 <HAL_I2C_Init+0x98>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004750:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004752:	2124      	movs	r1, #36	; 0x24

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004754:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004756:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800475a:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800475c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004760:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8004762:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004766:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8004768:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800476a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004772:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004774:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004776:	d029      	beq.n	80047cc <HAL_I2C_Init+0x90>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004778:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800477c:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800477e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004780:	d102      	bne.n	8004788 <HAL_I2C_Init+0x4c>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004782:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004786:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004788:	6858      	ldr	r0, [r3, #4]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 800478a:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800478e:	4915      	ldr	r1, [pc, #84]	; (80047e4 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004790:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004792:	4301      	orrs	r1, r0
 8004794:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004796:	68d9      	ldr	r1, [r3, #12]
 8004798:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800479c:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800479e:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047a2:	4302      	orrs	r2, r0
 80047a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047a8:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047ac:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ae:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047b0:	4301      	orrs	r1, r0
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 80047b2:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047b4:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80047b6:	6819      	ldr	r1, [r3, #0]
 80047b8:	f041 0101 	orr.w	r1, r1, #1
 80047bc:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047be:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047c0:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047c4:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80047ca:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047d0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047d2:	e7d9      	b.n	8004788 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 80047d4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80047d8:	f7fc f9ba 	bl	8000b50 <HAL_I2C_MspInit>
 80047dc:	e7b8      	b.n	8004750 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80047de:	2001      	movs	r0, #1
}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	02008000 	.word	0x02008000

080047e8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80047ec:	2a20      	cmp	r2, #32
 80047ee:	d123      	bne.n	8004838 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80047f0:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80047f8:	4603      	mov	r3, r0
 80047fa:	2a01      	cmp	r2, #1
 80047fc:	d01c      	beq.n	8004838 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047fe:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004800:	2024      	movs	r0, #36	; 0x24
{
 8004802:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004804:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004808:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 800480c:	6810      	ldr	r0, [r2, #0]
 800480e:	f020 0001 	bic.w	r0, r0, #1
 8004812:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004814:	6810      	ldr	r0, [r2, #0]
 8004816:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 800481a:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800481c:	6810      	ldr	r0, [r2, #0]
 800481e:	4301      	orrs	r1, r0

    return HAL_OK;
 8004820:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 8004822:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004824:	6811      	ldr	r1, [r2, #0]
 8004826:	f041 0101 	orr.w	r1, r1, #1
 800482a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800482c:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004830:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004834:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8004838:	2002      	movs	r0, #2
}
 800483a:	4770      	bx	lr

0800483c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800483c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004840:	2a20      	cmp	r2, #32
 8004842:	d122      	bne.n	800488a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8004844:	4603      	mov	r3, r0
{
 8004846:	b500      	push	{lr}
 8004848:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800484c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8004850:	2a01      	cmp	r2, #1
 8004852:	d01c      	beq.n	800488e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004854:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004856:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004858:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800485c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8004860:	6810      	ldr	r0, [r2, #0]
 8004862:	f020 0001 	bic.w	r0, r0, #1
 8004866:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8004868:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800486a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800486e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 8004872:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 8004874:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004876:	6811      	ldr	r1, [r2, #0]
 8004878:	f041 0101 	orr.w	r1, r1, #1
 800487c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800487e:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004882:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004886:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800488a:	2002      	movs	r0, #2
}
 800488c:	4770      	bx	lr
    return HAL_BUSY;
 800488e:	2002      	movs	r0, #2
}
 8004890:	f85d fb04 	ldr.w	pc, [sp], #4

08004894 <HAL_OPAMP_Init>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8004894:	2800      	cmp	r0, #0
 8004896:	d05a      	beq.n	800494e <HAL_OPAMP_Init+0xba>
{ 
 8004898:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800489a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800489e:	4604      	mov	r4, r0
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	d036      	beq.n	8004912 <HAL_OPAMP_Init+0x7e>
  {
    return HAL_ERROR;
  }  
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80048a4:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d032      	beq.n	8004912 <HAL_OPAMP_Init+0x7e>
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePHighSpeed));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNHighSpeed));
      }
    }
     
    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 80048ac:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80048b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80048b4:	b90b      	cbnz	r3, 80048ba <HAL_OPAMP_Init+0x26>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80048b6:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);    
#else    
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80048ba:	4620      	mov	r0, r4
 80048bc:	f7fd f82e 	bl	800191c <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80048c0:	6823      	ldr	r3, [r4, #0]
    /* In PGA mode InvertingInput is Not Applicable  */                                          
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 80048c2:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80048c4:	681a      	ldr	r2, [r3, #0]
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 80048c6:	2940      	cmp	r1, #64	; 0x40
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80048c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048cc:	601a      	str	r2, [r3, #0]
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 80048ce:	d040      	beq.n	8004952 <HAL_OPAMP_Init+0xbe>
                                        hopamp->Init.PgaConnect | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }
    
    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 80048d0:	2960      	cmp	r1, #96	; 0x60
 80048d2:	d120      	bne.n	8004916 <HAL_OPAMP_Init+0x82>
    {
  /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 80048d4:	6920      	ldr	r0, [r4, #16]
 80048d6:	6862      	ldr	r2, [r4, #4]
 80048d8:	681d      	ldr	r5, [r3, #0]
 80048da:	4302      	orrs	r2, r0
 80048dc:	482b      	ldr	r0, [pc, #172]	; (800498c <HAL_OPAMP_Init+0xf8>)
 80048de:	69e1      	ldr	r1, [r4, #28]
 80048e0:	4028      	ands	r0, r5
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    } 
    
    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 80048e2:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 80048e6:	ea42 0200 	orr.w	r2, r2, r0
 80048ea:	ea42 0201 	orr.w	r2, r2, r1
 80048ee:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80048f2:	601a      	str	r2, [r3, #0]
    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 80048f4:	d120      	bne.n	8004938 <HAL_OPAMP_Init+0xa4>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 80048f6:	6862      	ldr	r2, [r4, #4]
 80048f8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80048fc:	d03a      	beq.n	8004974 <HAL_OPAMP_Init+0xe0>
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
                         | (hopamp->Init.TrimmingValueN)); 
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80048fe:	6858      	ldr	r0, [r3, #4]
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004900:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 8004904:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8004908:	4921      	ldr	r1, [pc, #132]	; (8004990 <HAL_OPAMP_Init+0xfc>)
 800490a:	4001      	ands	r1, r0
 800490c:	430a      	orrs	r2, r1
 800490e:	605a      	str	r2, [r3, #4]
 8004910:	e012      	b.n	8004938 <HAL_OPAMP_Init+0xa4>
    return HAL_ERROR;
 8004912:	2001      	movs	r0, #1
      hopamp->State = HAL_OPAMP_STATE_READY;
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
  }
}
 8004914:	bd38      	pop	{r3, r4, r5, pc}
    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8004916:	2900      	cmp	r1, #0
 8004918:	d136      	bne.n	8004988 <HAL_OPAMP_Init+0xf4>
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 800491a:	6862      	ldr	r2, [r4, #4]
 800491c:	68e5      	ldr	r5, [r4, #12]
 800491e:	6920      	ldr	r0, [r4, #16]
 8004920:	432a      	orrs	r2, r5
 8004922:	6819      	ldr	r1, [r3, #0]
 8004924:	4302      	orrs	r2, r0
 8004926:	4819      	ldr	r0, [pc, #100]	; (800498c <HAL_OPAMP_Init+0xf8>)
 8004928:	4008      	ands	r0, r1
 800492a:	69e1      	ldr	r1, [r4, #28]
 800492c:	430a      	orrs	r2, r1
 800492e:	4302      	orrs	r2, r0
 8004930:	601a      	str	r2, [r3, #0]
    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8004932:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8004936:	d0de      	beq.n	80048f6 <HAL_OPAMP_Init+0x62>
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004938:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800493c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004940:	b91b      	cbnz	r3, 800494a <HAL_OPAMP_Init+0xb6>
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004942:	2301      	movs	r3, #1
 8004944:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 8004948:	bd38      	pop	{r3, r4, r5, pc}
    return status;
 800494a:	2000      	movs	r0, #0
}
 800494c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800494e:	2001      	movs	r0, #1
}
 8004950:	4770      	bx	lr
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8004952:	6960      	ldr	r0, [r4, #20]
 8004954:	6862      	ldr	r2, [r4, #4]
 8004956:	681d      	ldr	r5, [r3, #0]
 8004958:	4302      	orrs	r2, r0
 800495a:	480e      	ldr	r0, [pc, #56]	; (8004994 <HAL_OPAMP_Init+0x100>)
 800495c:	69e1      	ldr	r1, [r4, #28]
 800495e:	4028      	ands	r0, r5
 8004960:	4302      	orrs	r2, r0
 8004962:	69a0      	ldr	r0, [r4, #24]
 8004964:	4302      	orrs	r2, r0
 8004966:	6920      	ldr	r0, [r4, #16]
 8004968:	4302      	orrs	r2, r0
 800496a:	430a      	orrs	r2, r1
 800496c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004970:	601a      	str	r2, [r3, #0]
    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8004972:	e7de      	b.n	8004932 <HAL_OPAMP_Init+0x9e>
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8004974:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);     
 8004978:	6898      	ldr	r0, [r3, #8]
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 800497a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);     
 800497e:	4904      	ldr	r1, [pc, #16]	; (8004990 <HAL_OPAMP_Init+0xfc>)
 8004980:	4001      	ands	r1, r0
 8004982:	430a      	orrs	r2, r1
 8004984:	609a      	str	r2, [r3, #8]
 8004986:	e7d7      	b.n	8004938 <HAL_OPAMP_Init+0xa4>
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8004988:	69e1      	ldr	r1, [r4, #28]
 800498a:	e7d2      	b.n	8004932 <HAL_OPAMP_Init+0x9e>
 800498c:	fffbfe93 	.word	0xfffbfe93
 8004990:	ffffe0e0 	.word	0xffffe0e0
 8004994:	fff83e93 	.word	0xfff83e93

08004998 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004998:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800499a:	4c10      	ldr	r4, [pc, #64]	; (80049dc <HAL_PWREx_ConfigSupply+0x44>)
 800499c:	68e3      	ldr	r3, [r4, #12]
 800499e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049a2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80049a4:	d105      	bne.n	80049b2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049a6:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049aa:	1a18      	subs	r0, r3, r0
 80049ac:	bf18      	it	ne
 80049ae:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80049b0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049b2:	f023 0307 	bic.w	r3, r3, #7
 80049b6:	4318      	orrs	r0, r3
 80049b8:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80049ba:	f7fd fb07 	bl	8001fcc <HAL_GetTick>
 80049be:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049c0:	e005      	b.n	80049ce <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049c2:	f7fd fb03 	bl	8001fcc <HAL_GetTick>
 80049c6:	1b40      	subs	r0, r0, r5
 80049c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80049cc:	d804      	bhi.n	80049d8 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049ce:	6863      	ldr	r3, [r4, #4]
 80049d0:	049b      	lsls	r3, r3, #18
 80049d2:	d5f6      	bpl.n	80049c2 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 80049d4:	2000      	movs	r0, #0
}
 80049d6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80049d8:	2001      	movs	r0, #1
}
 80049da:	bd38      	pop	{r3, r4, r5, pc}
 80049dc:	58024800 	.word	0x58024800

080049e0 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049e0:	4b3b      	ldr	r3, [pc, #236]	; (8004ad0 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80049e2:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80049e6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049e8:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 80049ea:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80049ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80049f0:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 80049f4:	d038      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80049f6:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049fa:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049fe:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a02:	fb05 f101 	mul.w	r1, r5, r1
 8004a06:	2a01      	cmp	r2, #1
 8004a08:	ee07 1a90 	vmov	s15, r1
 8004a0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8004a10:	d002      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8004a12:	2a02      	cmp	r2, #2
 8004a14:	d04e      	beq.n	8004ab4 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8004a16:	b34a      	cbz	r2, 8004a6c <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a18:	ee07 0a90 	vmov	s15, r0
 8004a1c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8004ad4 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8004a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8004a2a:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8004ad8 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8004a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a32:	ee06 3a90 	vmov	s13, r3
 8004a36:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8004a3a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004a3e:	ee76 6a85 	vadd.f32	s13, s13, s10
 8004a42:	eee7 6a25 	vfma.f32	s13, s14, s11
 8004a46:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004a4a:	4b21      	ldr	r3, [pc, #132]	; (8004ad0 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004a52:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004a54:	ee07 3a90 	vmov	s15, r3
 8004a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a64:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8004a68:	bc30      	pop	{r4, r5}
 8004a6a:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	0692      	lsls	r2, r2, #26
 8004a70:	d527      	bpl.n	8004ac2 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a72:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a74:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a78:	4a18      	ldr	r2, [pc, #96]	; (8004adc <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a7a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a80:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a88:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8004ad8 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8004a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a90:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a92:	ee06 3a90 	vmov	s13, r3
 8004a96:	ee05 2a90 	vmov	s11, r2
 8004a9a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004a9e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004aa2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004aa6:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8004aaa:	eee7 6a05 	vfma.f32	s13, s14, s10
 8004aae:	ee66 6a26 	vmul.f32	s13, s12, s13
 8004ab2:	e7ca      	b.n	8004a4a <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ab4:	ee07 0a90 	vmov	s15, r0
 8004ab8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004ae0 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8004abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ac0:	e7b0      	b.n	8004a24 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ac2:	ee07 0a90 	vmov	s15, r0
 8004ac6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004ae4 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8004aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ace:	e7a9      	b.n	8004a24 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8004ad0:	58024400 	.word	0x58024400
 8004ad4:	4a742400 	.word	0x4a742400
 8004ad8:	39000000 	.word	0x39000000
 8004adc:	03d09000 	.word	0x03d09000
 8004ae0:	4b742400 	.word	0x4b742400
 8004ae4:	4c742400 	.word	0x4c742400

08004ae8 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	f000 81e8 	beq.w	8004ebe <HAL_RCC_OscConfig+0x3d6>
{
 8004aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af0:	6803      	ldr	r3, [r0, #0]
 8004af2:	4604      	mov	r4, r0
 8004af4:	07d9      	lsls	r1, r3, #31
 8004af6:	d52e      	bpl.n	8004b56 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af8:	49a4      	ldr	r1, [pc, #656]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004afa:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004afc:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004afe:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004b02:	2a10      	cmp	r2, #16
 8004b04:	f000 8107 	beq.w	8004d16 <HAL_RCC_OscConfig+0x22e>
 8004b08:	2a18      	cmp	r2, #24
 8004b0a:	f000 80ff 	beq.w	8004d0c <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b0e:	6863      	ldr	r3, [r4, #4]
 8004b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b14:	f000 812a 	beq.w	8004d6c <HAL_RCC_OscConfig+0x284>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 8168 	beq.w	8004dee <HAL_RCC_OscConfig+0x306>
 8004b1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b22:	4b9a      	ldr	r3, [pc, #616]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	f000 8269 	beq.w	8004ffc <HAL_RCC_OscConfig+0x514>
 8004b2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004b38:	f7fd fa48 	bl	8001fcc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b3c:	4e93      	ldr	r6, [pc, #588]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8004b3e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b40:	e005      	b.n	8004b4e <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b42:	f7fd fa43 	bl	8001fcc <HAL_GetTick>
 8004b46:	1b40      	subs	r0, r0, r5
 8004b48:	2864      	cmp	r0, #100	; 0x64
 8004b4a:	f200 814e 	bhi.w	8004dea <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b4e:	6833      	ldr	r3, [r6, #0]
 8004b50:	039b      	lsls	r3, r3, #14
 8004b52:	d5f6      	bpl.n	8004b42 <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	079d      	lsls	r5, r3, #30
 8004b58:	f100 808a 	bmi.w	8004c70 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b5c:	06d9      	lsls	r1, r3, #27
 8004b5e:	d533      	bpl.n	8004bc8 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b60:	4a8a      	ldr	r2, [pc, #552]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004b62:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b64:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b66:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	f000 80e3 	beq.w	8004d36 <HAL_RCC_OscConfig+0x24e>
 8004b70:	2b18      	cmp	r3, #24
 8004b72:	f000 80db 	beq.w	8004d2c <HAL_RCC_OscConfig+0x244>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004b76:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8004b78:	4d84      	ldr	r5, [pc, #528]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 816f 	beq.w	8004e5e <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b86:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b88:	f7fd fa20 	bl	8001fcc <HAL_GetTick>
 8004b8c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b8e:	e005      	b.n	8004b9c <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004b90:	f7fd fa1c 	bl	8001fcc <HAL_GetTick>
 8004b94:	1b80      	subs	r0, r0, r6
 8004b96:	2802      	cmp	r0, #2
 8004b98:	f200 8127 	bhi.w	8004dea <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	05db      	lsls	r3, r3, #23
 8004ba0:	d5f6      	bpl.n	8004b90 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ba2:	f7fd fa2b 	bl	8001ffc <HAL_GetREVID>
 8004ba6:	f241 0303 	movw	r3, #4099	; 0x1003
 8004baa:	4298      	cmp	r0, r3
 8004bac:	f200 8247 	bhi.w	800503e <HAL_RCC_OscConfig+0x556>
 8004bb0:	6a22      	ldr	r2, [r4, #32]
 8004bb2:	686b      	ldr	r3, [r5, #4]
 8004bb4:	2a20      	cmp	r2, #32
 8004bb6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004bba:	bf0c      	ite	eq
 8004bbc:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8004bc0:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8004bc4:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	071d      	lsls	r5, r3, #28
 8004bca:	d516      	bpl.n	8004bfa <HAL_RCC_OscConfig+0x112>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bcc:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004bce:	4d6f      	ldr	r5, [pc, #444]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8122 	beq.w	8004e1a <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 8004bd6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004bd8:	f043 0301 	orr.w	r3, r3, #1
 8004bdc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004bde:	f7fd f9f5 	bl	8001fcc <HAL_GetTick>
 8004be2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004be4:	e005      	b.n	8004bf2 <HAL_RCC_OscConfig+0x10a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be6:	f7fd f9f1 	bl	8001fcc <HAL_GetTick>
 8004bea:	1b80      	subs	r0, r0, r6
 8004bec:	2802      	cmp	r0, #2
 8004bee:	f200 80fc 	bhi.w	8004dea <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004bf2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004bf4:	0798      	lsls	r0, r3, #30
 8004bf6:	d5f6      	bpl.n	8004be6 <HAL_RCC_OscConfig+0xfe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	069a      	lsls	r2, r3, #26
 8004bfc:	d516      	bpl.n	8004c2c <HAL_RCC_OscConfig+0x144>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004bfe:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8004c00:	4d62      	ldr	r5, [pc, #392]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 811a 	beq.w	8004e3c <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c0e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004c10:	f7fd f9dc 	bl	8001fcc <HAL_GetTick>
 8004c14:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c16:	e005      	b.n	8004c24 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004c18:	f7fd f9d8 	bl	8001fcc <HAL_GetTick>
 8004c1c:	1b80      	subs	r0, r0, r6
 8004c1e:	2802      	cmp	r0, #2
 8004c20:	f200 80e3 	bhi.w	8004dea <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	049f      	lsls	r7, r3, #18
 8004c28:	d5f6      	bpl.n	8004c18 <HAL_RCC_OscConfig+0x130>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	0759      	lsls	r1, r3, #29
 8004c2e:	f100 80a3 	bmi.w	8004d78 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004c34:	b1d0      	cbz	r0, 8004c6c <HAL_RCC_OscConfig+0x184>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c36:	4d55      	ldr	r5, [pc, #340]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004c38:	692b      	ldr	r3, [r5, #16]
 8004c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c3e:	2b18      	cmp	r3, #24
 8004c40:	f000 81ae 	beq.w	8004fa0 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8004c44:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c46:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004c48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c4c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c4e:	f000 8142 	beq.w	8004ed6 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 8004c52:	f7fd f9bb 	bl	8001fcc <HAL_GetTick>
 8004c56:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c58:	e005      	b.n	8004c66 <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c5a:	f7fd f9b7 	bl	8001fcc <HAL_GetTick>
 8004c5e:	1b00      	subs	r0, r0, r4
 8004c60:	2802      	cmp	r0, #2
 8004c62:	f200 80c2 	bhi.w	8004dea <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c66:	682b      	ldr	r3, [r5, #0]
 8004c68:	019b      	lsls	r3, r3, #6
 8004c6a:	d4f6      	bmi.n	8004c5a <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8004c6c:	2000      	movs	r0, #0
}
 8004c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c70:	4a46      	ldr	r2, [pc, #280]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004c72:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c74:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c76:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8004c7a:	d12d      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c7c:	4b43      	ldr	r3, [pc, #268]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004c7e:	68e2      	ldr	r2, [r4, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	0759      	lsls	r1, r3, #29
 8004c84:	d501      	bpl.n	8004c8a <HAL_RCC_OscConfig+0x1a2>
 8004c86:	2a00      	cmp	r2, #0
 8004c88:	d04e      	beq.n	8004d28 <HAL_RCC_OscConfig+0x240>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c8a:	4d40      	ldr	r5, [pc, #256]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	f023 0319 	bic.w	r3, r3, #25
 8004c92:	4313      	orrs	r3, r2
 8004c94:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 8004c96:	f7fd f999 	bl	8001fcc <HAL_GetTick>
 8004c9a:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c9c:	e005      	b.n	8004caa <HAL_RCC_OscConfig+0x1c2>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c9e:	f7fd f995 	bl	8001fcc <HAL_GetTick>
 8004ca2:	1b80      	subs	r0, r0, r6
 8004ca4:	2802      	cmp	r0, #2
 8004ca6:	f200 80a0 	bhi.w	8004dea <HAL_RCC_OscConfig+0x302>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004caa:	682b      	ldr	r3, [r5, #0]
 8004cac:	075b      	lsls	r3, r3, #29
 8004cae:	d5f6      	bpl.n	8004c9e <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb0:	f7fd f9a4 	bl	8001ffc <HAL_GetREVID>
 8004cb4:	f241 0303 	movw	r3, #4099	; 0x1003
 8004cb8:	4298      	cmp	r0, r3
 8004cba:	f200 80f7 	bhi.w	8004eac <HAL_RCC_OscConfig+0x3c4>
 8004cbe:	6922      	ldr	r2, [r4, #16]
 8004cc0:	686b      	ldr	r3, [r5, #4]
 8004cc2:	2a40      	cmp	r2, #64	; 0x40
 8004cc4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004cc8:	bf0c      	ite	eq
 8004cca:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8004cce:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8004cd2:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	e741      	b.n	8004b5c <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004cd8:	2b18      	cmp	r3, #24
 8004cda:	f000 80e3 	beq.w	8004ea4 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cde:	4d2b      	ldr	r5, [pc, #172]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ce0:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ce2:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ce4:	2a00      	cmp	r2, #0
 8004ce6:	f000 80cc 	beq.w	8004e82 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cea:	f023 0319 	bic.w	r3, r3, #25
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004cf2:	f7fd f96b 	bl	8001fcc <HAL_GetTick>
 8004cf6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cf8:	e004      	b.n	8004d04 <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cfa:	f7fd f967 	bl	8001fcc <HAL_GetTick>
 8004cfe:	1b80      	subs	r0, r0, r6
 8004d00:	2802      	cmp	r0, #2
 8004d02:	d872      	bhi.n	8004dea <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d04:	682b      	ldr	r3, [r5, #0]
 8004d06:	075f      	lsls	r7, r3, #29
 8004d08:	d5f7      	bpl.n	8004cfa <HAL_RCC_OscConfig+0x212>
 8004d0a:	e7d1      	b.n	8004cb0 <HAL_RCC_OscConfig+0x1c8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d0c:	f001 0103 	and.w	r1, r1, #3
 8004d10:	2902      	cmp	r1, #2
 8004d12:	f47f aefc 	bne.w	8004b0e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d16:	4a1d      	ldr	r2, [pc, #116]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	0392      	lsls	r2, r2, #14
 8004d1c:	f57f af1b 	bpl.w	8004b56 <HAL_RCC_OscConfig+0x6e>
 8004d20:	6862      	ldr	r2, [r4, #4]
 8004d22:	2a00      	cmp	r2, #0
 8004d24:	f47f af17 	bne.w	8004b56 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8004d28:	2001      	movs	r0, #1
}
 8004d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d2c:	f002 0203 	and.w	r2, r2, #3
 8004d30:	2a01      	cmp	r2, #1
 8004d32:	f47f af20 	bne.w	8004b76 <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d36:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	05da      	lsls	r2, r3, #23
 8004d3c:	d502      	bpl.n	8004d44 <HAL_RCC_OscConfig+0x25c>
 8004d3e:	69e3      	ldr	r3, [r4, #28]
 8004d40:	2b80      	cmp	r3, #128	; 0x80
 8004d42:	d1f1      	bne.n	8004d28 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d44:	f7fd f95a 	bl	8001ffc <HAL_GetREVID>
 8004d48:	f241 0303 	movw	r3, #4099	; 0x1003
 8004d4c:	4298      	cmp	r0, r3
 8004d4e:	f200 80b8 	bhi.w	8004ec2 <HAL_RCC_OscConfig+0x3da>
 8004d52:	6a22      	ldr	r2, [r4, #32]
 8004d54:	2a20      	cmp	r2, #32
 8004d56:	f000 8187 	beq.w	8005068 <HAL_RCC_OscConfig+0x580>
 8004d5a:	490c      	ldr	r1, [pc, #48]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004d5c:	684b      	ldr	r3, [r1, #4]
 8004d5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d62:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8004d66:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	e72d      	b.n	8004bc8 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d6c:	4a07      	ldr	r2, [pc, #28]	; (8004d8c <HAL_RCC_OscConfig+0x2a4>)
 8004d6e:	6813      	ldr	r3, [r2, #0]
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d74:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d76:	e6df      	b.n	8004b38 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8004d78:	4d05      	ldr	r5, [pc, #20]	; (8004d90 <HAL_RCC_OscConfig+0x2a8>)
 8004d7a:	682b      	ldr	r3, [r5, #0]
 8004d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d80:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004d82:	f7fd f923 	bl	8001fcc <HAL_GetTick>
 8004d86:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d88:	e009      	b.n	8004d9e <HAL_RCC_OscConfig+0x2b6>
 8004d8a:	bf00      	nop
 8004d8c:	58024400 	.word	0x58024400
 8004d90:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d94:	f7fd f91a 	bl	8001fcc <HAL_GetTick>
 8004d98:	1b80      	subs	r0, r0, r6
 8004d9a:	2864      	cmp	r0, #100	; 0x64
 8004d9c:	d825      	bhi.n	8004dea <HAL_RCC_OscConfig+0x302>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d9e:	682b      	ldr	r3, [r5, #0]
 8004da0:	05da      	lsls	r2, r3, #23
 8004da2:	d5f7      	bpl.n	8004d94 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da4:	68a3      	ldr	r3, [r4, #8]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	f000 8158 	beq.w	800505c <HAL_RCC_OscConfig+0x574>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 812d 	beq.w	800500c <HAL_RCC_OscConfig+0x524>
 8004db2:	2b05      	cmp	r3, #5
 8004db4:	4ba6      	ldr	r3, [pc, #664]	; (8005050 <HAL_RCC_OscConfig+0x568>)
 8004db6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004db8:	f000 815f 	beq.w	800507a <HAL_RCC_OscConfig+0x592>
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	671a      	str	r2, [r3, #112]	; 0x70
 8004dc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dc4:	f022 0204 	bic.w	r2, r2, #4
 8004dc8:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004dca:	f7fd f8ff 	bl	8001fcc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dce:	4ea0      	ldr	r6, [pc, #640]	; (8005050 <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd0:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004dd4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dd6:	e004      	b.n	8004de2 <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd8:	f7fd f8f8 	bl	8001fcc <HAL_GetTick>
 8004ddc:	1b40      	subs	r0, r0, r5
 8004dde:	42b8      	cmp	r0, r7
 8004de0:	d803      	bhi.n	8004dea <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004de2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004de4:	079b      	lsls	r3, r3, #30
 8004de6:	d5f7      	bpl.n	8004dd8 <HAL_RCC_OscConfig+0x2f0>
 8004de8:	e723      	b.n	8004c32 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8004dea:	2003      	movs	r0, #3
}
 8004dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dee:	4d98      	ldr	r5, [pc, #608]	; (8005050 <HAL_RCC_OscConfig+0x568>)
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df6:	602b      	str	r3, [r5, #0]
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dfe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e00:	f7fd f8e4 	bl	8001fcc <HAL_GetTick>
 8004e04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e06:	e004      	b.n	8004e12 <HAL_RCC_OscConfig+0x32a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e08:	f7fd f8e0 	bl	8001fcc <HAL_GetTick>
 8004e0c:	1b80      	subs	r0, r0, r6
 8004e0e:	2864      	cmp	r0, #100	; 0x64
 8004e10:	d8eb      	bhi.n	8004dea <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e12:	682b      	ldr	r3, [r5, #0]
 8004e14:	039f      	lsls	r7, r3, #14
 8004e16:	d4f7      	bmi.n	8004e08 <HAL_RCC_OscConfig+0x320>
 8004e18:	e69c      	b.n	8004b54 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8004e1a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004e22:	f7fd f8d3 	bl	8001fcc <HAL_GetTick>
 8004e26:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e28:	e004      	b.n	8004e34 <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2a:	f7fd f8cf 	bl	8001fcc <HAL_GetTick>
 8004e2e:	1b80      	subs	r0, r0, r6
 8004e30:	2802      	cmp	r0, #2
 8004e32:	d8da      	bhi.n	8004dea <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e34:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004e36:	0799      	lsls	r1, r3, #30
 8004e38:	d4f7      	bmi.n	8004e2a <HAL_RCC_OscConfig+0x342>
 8004e3a:	e6dd      	b.n	8004bf8 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e42:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004e44:	f7fd f8c2 	bl	8001fcc <HAL_GetTick>
 8004e48:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e4a:	e004      	b.n	8004e56 <HAL_RCC_OscConfig+0x36e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e4c:	f7fd f8be 	bl	8001fcc <HAL_GetTick>
 8004e50:	1b80      	subs	r0, r0, r6
 8004e52:	2802      	cmp	r0, #2
 8004e54:	d8c9      	bhi.n	8004dea <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e56:	682b      	ldr	r3, [r5, #0]
 8004e58:	0498      	lsls	r0, r3, #18
 8004e5a:	d4f7      	bmi.n	8004e4c <HAL_RCC_OscConfig+0x364>
 8004e5c:	e6e5      	b.n	8004c2a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8004e5e:	682b      	ldr	r3, [r5, #0]
 8004e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e66:	f7fd f8b1 	bl	8001fcc <HAL_GetTick>
 8004e6a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e6c:	e004      	b.n	8004e78 <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e6e:	f7fd f8ad 	bl	8001fcc <HAL_GetTick>
 8004e72:	1b80      	subs	r0, r0, r6
 8004e74:	2802      	cmp	r0, #2
 8004e76:	d8b8      	bhi.n	8004dea <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	05df      	lsls	r7, r3, #23
 8004e7c:	d4f7      	bmi.n	8004e6e <HAL_RCC_OscConfig+0x386>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	e6a2      	b.n	8004bc8 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8004e82:	f023 0301 	bic.w	r3, r3, #1
 8004e86:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e88:	f7fd f8a0 	bl	8001fcc <HAL_GetTick>
 8004e8c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e8e:	e004      	b.n	8004e9a <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e90:	f7fd f89c 	bl	8001fcc <HAL_GetTick>
 8004e94:	1b80      	subs	r0, r0, r6
 8004e96:	2802      	cmp	r0, #2
 8004e98:	d8a7      	bhi.n	8004dea <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e9a:	682b      	ldr	r3, [r5, #0]
 8004e9c:	0758      	lsls	r0, r3, #29
 8004e9e:	d4f7      	bmi.n	8004e90 <HAL_RCC_OscConfig+0x3a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	e65b      	b.n	8004b5c <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ea4:	0790      	lsls	r0, r2, #30
 8004ea6:	f47f af1a 	bne.w	8004cde <HAL_RCC_OscConfig+0x1f6>
 8004eaa:	e6e7      	b.n	8004c7c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eac:	686b      	ldr	r3, [r5, #4]
 8004eae:	6922      	ldr	r2, [r4, #16]
 8004eb0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004eb4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004eb8:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	e64e      	b.n	8004b5c <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8004ebe:	2001      	movs	r0, #1
}
 8004ec0:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ec2:	4a63      	ldr	r2, [pc, #396]	; (8005050 <HAL_RCC_OscConfig+0x568>)
 8004ec4:	6a21      	ldr	r1, [r4, #32]
 8004ec6:	68d3      	ldr	r3, [r2, #12]
 8004ec8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004ecc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004ed0:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	e678      	b.n	8004bc8 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8004ed6:	f7fd f879 	bl	8001fcc <HAL_GetTick>
 8004eda:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004edc:	e004      	b.n	8004ee8 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ede:	f7fd f875 	bl	8001fcc <HAL_GetTick>
 8004ee2:	1b80      	subs	r0, r0, r6
 8004ee4:	2802      	cmp	r0, #2
 8004ee6:	d880      	bhi.n	8004dea <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	0199      	lsls	r1, r3, #6
 8004eec:	d4f7      	bmi.n	8004ede <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eee:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004ef0:	4b58      	ldr	r3, [pc, #352]	; (8005054 <HAL_RCC_OscConfig+0x56c>)
 8004ef2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004ef4:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ef6:	4958      	ldr	r1, [pc, #352]	; (8005058 <HAL_RCC_OscConfig+0x570>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ef8:	4e55      	ldr	r6, [pc, #340]	; (8005050 <HAL_RCC_OscConfig+0x568>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004efa:	4313      	orrs	r3, r2
 8004efc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004efe:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004f02:	62ab      	str	r3, [r5, #40]	; 0x28
 8004f04:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	3a01      	subs	r2, #1
 8004f0c:	025b      	lsls	r3, r3, #9
 8004f0e:	0412      	lsls	r2, r2, #16
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004f16:	4313      	orrs	r3, r2
 8004f18:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f1a:	3a01      	subs	r2, #1
 8004f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f20:	4313      	orrs	r3, r2
 8004f22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004f24:	3a01      	subs	r2, #1
 8004f26:	0612      	lsls	r2, r2, #24
 8004f28:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8004f30:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004f32:	f023 0301 	bic.w	r3, r3, #1
 8004f36:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f38:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004f3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004f3c:	4011      	ands	r1, r2
 8004f3e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004f42:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f44:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004f46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004f48:	f023 030c 	bic.w	r3, r3, #12
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f50:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004f52:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004f54:	f023 0302 	bic.w	r3, r3, #2
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f5c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f62:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f6c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004f6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f72:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8004f74:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f82:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004f84:	f7fd f822 	bl	8001fcc <HAL_GetTick>
 8004f88:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f8a:	e005      	b.n	8004f98 <HAL_RCC_OscConfig+0x4b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fd f81e 	bl	8001fcc <HAL_GetTick>
 8004f90:	1b00      	subs	r0, r0, r4
 8004f92:	2802      	cmp	r0, #2
 8004f94:	f63f af29 	bhi.w	8004dea <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f98:	6833      	ldr	r3, [r6, #0]
 8004f9a:	019a      	lsls	r2, r3, #6
 8004f9c:	d5f6      	bpl.n	8004f8c <HAL_RCC_OscConfig+0x4a4>
 8004f9e:	e665      	b.n	8004c6c <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fa0:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004fa2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004fa4:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fa6:	f43f ae62 	beq.w	8004c6e <HAL_RCC_OscConfig+0x186>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004faa:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004fb0:	428b      	cmp	r3, r1
 8004fb2:	f47f aeb9 	bne.w	8004d28 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fb6:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	f47f aeb3 	bne.w	8004d28 <HAL_RCC_OscConfig+0x240>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fc4:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8004fc8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	f47f aeac 	bne.w	8004d28 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fd2:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8004fd6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	f47f aea5 	bne.w	8004d28 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fe0:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8004fe4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	f47f ae9e 	bne.w	8004d28 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004fec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004fee:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8004ff2:	3801      	subs	r0, #1
  return HAL_OK;
 8004ff4:	1a28      	subs	r0, r5, r0
 8004ff6:	bf18      	it	ne
 8004ff8:	2001      	movne	r0, #1
}
 8004ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ffc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e595      	b.n	8004b38 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800500c:	4d10      	ldr	r5, [pc, #64]	; (8005050 <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800500e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005012:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	672b      	str	r3, [r5, #112]	; 0x70
 800501a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800501c:	f023 0304 	bic.w	r3, r3, #4
 8005020:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005022:	f7fc ffd3 	bl	8001fcc <HAL_GetTick>
 8005026:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005028:	e005      	b.n	8005036 <HAL_RCC_OscConfig+0x54e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800502a:	f7fc ffcf 	bl	8001fcc <HAL_GetTick>
 800502e:	1b80      	subs	r0, r0, r6
 8005030:	42b8      	cmp	r0, r7
 8005032:	f63f aeda 	bhi.w	8004dea <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005036:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005038:	0798      	lsls	r0, r3, #30
 800503a:	d4f6      	bmi.n	800502a <HAL_RCC_OscConfig+0x542>
 800503c:	e5f9      	b.n	8004c32 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800503e:	68eb      	ldr	r3, [r5, #12]
 8005040:	6a22      	ldr	r2, [r4, #32]
 8005042:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005046:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800504a:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	e5bb      	b.n	8004bc8 <HAL_RCC_OscConfig+0xe0>
 8005050:	58024400 	.word	0x58024400
 8005054:	fffffc0c 	.word	0xfffffc0c
 8005058:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800505c:	4a0b      	ldr	r2, [pc, #44]	; (800508c <HAL_RCC_OscConfig+0x5a4>)
 800505e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005066:	e6b0      	b.n	8004dca <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005068:	4a08      	ldr	r2, [pc, #32]	; (800508c <HAL_RCC_OscConfig+0x5a4>)
 800506a:	6853      	ldr	r3, [r2, #4]
 800506c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005074:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	e5a6      	b.n	8004bc8 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800507a:	f042 0204 	orr.w	r2, r2, #4
 800507e:	671a      	str	r2, [r3, #112]	; 0x70
 8005080:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	671a      	str	r2, [r3, #112]	; 0x70
 8005088:	e69f      	b.n	8004dca <HAL_RCC_OscConfig+0x2e2>
 800508a:	bf00      	nop
 800508c:	58024400 	.word	0x58024400

08005090 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005090:	4a47      	ldr	r2, [pc, #284]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x120>)
 8005092:	6913      	ldr	r3, [r2, #16]
 8005094:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005098:	2b10      	cmp	r3, #16
 800509a:	d004      	beq.n	80050a6 <HAL_RCC_GetSysClockFreq+0x16>
 800509c:	2b18      	cmp	r3, #24
 800509e:	d00d      	beq.n	80050bc <HAL_RCC_GetSysClockFreq+0x2c>
 80050a0:	b11b      	cbz	r3, 80050aa <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 80050a2:	4844      	ldr	r0, [pc, #272]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x124>)
 80050a4:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050a6:	4844      	ldr	r0, [pc, #272]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x128>)
 80050a8:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050aa:	6813      	ldr	r3, [r2, #0]
 80050ac:	0699      	lsls	r1, r3, #26
 80050ae:	d54a      	bpl.n	8005146 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050b0:	6813      	ldr	r3, [r2, #0]
 80050b2:	4842      	ldr	r0, [pc, #264]	; (80051bc <HAL_RCC_GetSysClockFreq+0x12c>)
 80050b4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80050b8:	40d8      	lsrs	r0, r3
 80050ba:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 80050be:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80050c0:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050c2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    if (pllm != 0U)
 80050c4:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80050c8:	6b51      	ldr	r1, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80050ca:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 80050ce:	d038      	beq.n	8005142 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80050d0:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050d4:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050d8:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80050dc:	fb05 f101 	mul.w	r1, r5, r1
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	ee07 1a90 	vmov	s15, r1
 80050e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 80050ea:	d002      	beq.n	80050f2 <HAL_RCC_GetSysClockFreq+0x62>
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d02c      	beq.n	800514a <HAL_RCC_GetSysClockFreq+0xba>
 80050f0:	b393      	cbz	r3, 8005158 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050f2:	ee07 0a90 	vmov	s15, r0
 80050f6:	eddf 6a32 	vldr	s13, [pc, #200]	; 80051c0 <HAL_RCC_GetSysClockFreq+0x130>
 80050fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005100:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8005104:	eddf 5a2f 	vldr	s11, [pc, #188]	; 80051c4 <HAL_RCC_GetSysClockFreq+0x134>
 8005108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510c:	ee06 3a90 	vmov	s13, r3
 8005110:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005114:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005118:	ee76 6a85 	vadd.f32	s13, s13, s10
 800511c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005120:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005124:	4b22      	ldr	r3, [pc, #136]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x120>)
 8005126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005128:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800512c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800513a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800513e:	ee17 0a90 	vmov	r0, s15
}
 8005142:	bc30      	pop	{r4, r5}
 8005144:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005146:	481d      	ldr	r0, [pc, #116]	; (80051bc <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8005148:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800514a:	ee07 0a90 	vmov	s15, r0
 800514e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80051c8 <HAL_RCC_GetSysClockFreq+0x138>
 8005152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005156:	e7d2      	b.n	80050fe <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005158:	6813      	ldr	r3, [r2, #0]
 800515a:	069b      	lsls	r3, r3, #26
 800515c:	d520      	bpl.n	80051a0 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800515e:	6814      	ldr	r4, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005160:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005164:	4915      	ldr	r1, [pc, #84]	; (80051bc <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005166:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800516a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800516c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005174:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80051c4 <HAL_RCC_GetSysClockFreq+0x134>
 8005178:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800517c:	40e1      	lsrs	r1, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800517e:	ee06 3a90 	vmov	s13, r3
 8005182:	ee05 1a90 	vmov	s11, r1
 8005186:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800518a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800518e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005192:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005196:	eee7 6a05 	vfma.f32	s13, s14, s10
 800519a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800519e:	e7c1      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051a0:	ee07 0a90 	vmov	s15, r0
 80051a4:	eddf 6a09 	vldr	s13, [pc, #36]	; 80051cc <HAL_RCC_GetSysClockFreq+0x13c>
 80051a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ac:	e7a7      	b.n	80050fe <HAL_RCC_GetSysClockFreq+0x6e>
 80051ae:	bf00      	nop
 80051b0:	58024400 	.word	0x58024400
 80051b4:	003d0900 	.word	0x003d0900
 80051b8:	00f42400 	.word	0x00f42400
 80051bc:	03d09000 	.word	0x03d09000
 80051c0:	4a742400 	.word	0x4a742400
 80051c4:	39000000 	.word	0x39000000
 80051c8:	4b742400 	.word	0x4b742400
 80051cc:	4c742400 	.word	0x4c742400

080051d0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80051d0:	2800      	cmp	r0, #0
 80051d2:	f000 810c 	beq.w	80053ee <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051d6:	4a8c      	ldr	r2, [pc, #560]	; (8005408 <HAL_RCC_ClockConfig+0x238>)
 80051d8:	6813      	ldr	r3, [r2, #0]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	428b      	cmp	r3, r1
{
 80051e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e4:	4604      	mov	r4, r0
 80051e6:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051e8:	d20c      	bcs.n	8005204 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ea:	6813      	ldr	r3, [r2, #0]
 80051ec:	f023 030f 	bic.w	r3, r3, #15
 80051f0:	430b      	orrs	r3, r1
 80051f2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f4:	6813      	ldr	r3, [r2, #0]
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	428b      	cmp	r3, r1
 80051fc:	d002      	beq.n	8005204 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80051fe:	2001      	movs	r0, #1
}
 8005200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	075f      	lsls	r7, r3, #29
 8005208:	d50b      	bpl.n	8005222 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800520a:	4980      	ldr	r1, [pc, #512]	; (800540c <HAL_RCC_ClockConfig+0x23c>)
 800520c:	6920      	ldr	r0, [r4, #16]
 800520e:	698a      	ldr	r2, [r1, #24]
 8005210:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005214:	4290      	cmp	r0, r2
 8005216:	d904      	bls.n	8005222 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005218:	698a      	ldr	r2, [r1, #24]
 800521a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800521e:	4302      	orrs	r2, r0
 8005220:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005222:	071e      	lsls	r6, r3, #28
 8005224:	d50b      	bpl.n	800523e <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005226:	4979      	ldr	r1, [pc, #484]	; (800540c <HAL_RCC_ClockConfig+0x23c>)
 8005228:	6960      	ldr	r0, [r4, #20]
 800522a:	69ca      	ldr	r2, [r1, #28]
 800522c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005230:	4290      	cmp	r0, r2
 8005232:	d904      	bls.n	800523e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005234:	69ca      	ldr	r2, [r1, #28]
 8005236:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800523a:	4302      	orrs	r2, r0
 800523c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800523e:	06d8      	lsls	r0, r3, #27
 8005240:	d50b      	bpl.n	800525a <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005242:	4972      	ldr	r1, [pc, #456]	; (800540c <HAL_RCC_ClockConfig+0x23c>)
 8005244:	69a0      	ldr	r0, [r4, #24]
 8005246:	69ca      	ldr	r2, [r1, #28]
 8005248:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800524c:	4290      	cmp	r0, r2
 800524e:	d904      	bls.n	800525a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005250:	69ca      	ldr	r2, [r1, #28]
 8005252:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005256:	4302      	orrs	r2, r0
 8005258:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800525a:	0699      	lsls	r1, r3, #26
 800525c:	d50b      	bpl.n	8005276 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800525e:	496b      	ldr	r1, [pc, #428]	; (800540c <HAL_RCC_ClockConfig+0x23c>)
 8005260:	69e0      	ldr	r0, [r4, #28]
 8005262:	6a0a      	ldr	r2, [r1, #32]
 8005264:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005268:	4290      	cmp	r0, r2
 800526a:	d904      	bls.n	8005276 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800526c:	6a0a      	ldr	r2, [r1, #32]
 800526e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005272:	4302      	orrs	r2, r0
 8005274:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005276:	079a      	lsls	r2, r3, #30
 8005278:	f140 80ab 	bpl.w	80053d2 <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800527c:	4863      	ldr	r0, [pc, #396]	; (800540c <HAL_RCC_ClockConfig+0x23c>)
 800527e:	68e1      	ldr	r1, [r4, #12]
 8005280:	6982      	ldr	r2, [r0, #24]
 8005282:	f002 020f 	and.w	r2, r2, #15
 8005286:	4291      	cmp	r1, r2
 8005288:	d904      	bls.n	8005294 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800528a:	6982      	ldr	r2, [r0, #24]
 800528c:	f022 020f 	bic.w	r2, r2, #15
 8005290:	430a      	orrs	r2, r1
 8005292:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005294:	07d8      	lsls	r0, r3, #31
 8005296:	d530      	bpl.n	80052fa <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005298:	4a5c      	ldr	r2, [pc, #368]	; (800540c <HAL_RCC_ClockConfig+0x23c>)
 800529a:	68a1      	ldr	r1, [r4, #8]
 800529c:	6993      	ldr	r3, [r2, #24]
 800529e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052a2:	430b      	orrs	r3, r1
 80052a4:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a6:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052a8:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052aa:	2902      	cmp	r1, #2
 80052ac:	f000 80a1 	beq.w	80053f2 <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052b0:	2903      	cmp	r1, #3
 80052b2:	f000 8098 	beq.w	80053e6 <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052b6:	2901      	cmp	r1, #1
 80052b8:	f000 80a1 	beq.w	80053fe <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052bc:	0758      	lsls	r0, r3, #29
 80052be:	d59e      	bpl.n	80051fe <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052c0:	4e52      	ldr	r6, [pc, #328]	; (800540c <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c2:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052c6:	6933      	ldr	r3, [r6, #16]
 80052c8:	f023 0307 	bic.w	r3, r3, #7
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 80052d0:	f7fc fe7c 	bl	8001fcc <HAL_GetTick>
 80052d4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052d6:	e005      	b.n	80052e4 <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d8:	f7fc fe78 	bl	8001fcc <HAL_GetTick>
 80052dc:	1bc0      	subs	r0, r0, r7
 80052de:	4540      	cmp	r0, r8
 80052e0:	f200 808b 	bhi.w	80053fa <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e4:	6933      	ldr	r3, [r6, #16]
 80052e6:	6862      	ldr	r2, [r4, #4]
 80052e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052ec:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80052f0:	d1f2      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	0799      	lsls	r1, r3, #30
 80052f6:	d506      	bpl.n	8005306 <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052f8:	68e1      	ldr	r1, [r4, #12]
 80052fa:	4844      	ldr	r0, [pc, #272]	; (800540c <HAL_RCC_ClockConfig+0x23c>)
 80052fc:	6982      	ldr	r2, [r0, #24]
 80052fe:	f002 020f 	and.w	r2, r2, #15
 8005302:	428a      	cmp	r2, r1
 8005304:	d869      	bhi.n	80053da <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005306:	4940      	ldr	r1, [pc, #256]	; (8005408 <HAL_RCC_ClockConfig+0x238>)
 8005308:	680a      	ldr	r2, [r1, #0]
 800530a:	f002 020f 	and.w	r2, r2, #15
 800530e:	42aa      	cmp	r2, r5
 8005310:	d90a      	bls.n	8005328 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005312:	680a      	ldr	r2, [r1, #0]
 8005314:	f022 020f 	bic.w	r2, r2, #15
 8005318:	432a      	orrs	r2, r5
 800531a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800531c:	680a      	ldr	r2, [r1, #0]
 800531e:	f002 020f 	and.w	r2, r2, #15
 8005322:	42aa      	cmp	r2, r5
 8005324:	f47f af6b 	bne.w	80051fe <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005328:	075a      	lsls	r2, r3, #29
 800532a:	d50b      	bpl.n	8005344 <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800532c:	4937      	ldr	r1, [pc, #220]	; (800540c <HAL_RCC_ClockConfig+0x23c>)
 800532e:	6920      	ldr	r0, [r4, #16]
 8005330:	698a      	ldr	r2, [r1, #24]
 8005332:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005336:	4290      	cmp	r0, r2
 8005338:	d204      	bcs.n	8005344 <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800533a:	698a      	ldr	r2, [r1, #24]
 800533c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005340:	4302      	orrs	r2, r0
 8005342:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005344:	071f      	lsls	r7, r3, #28
 8005346:	d50b      	bpl.n	8005360 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005348:	4930      	ldr	r1, [pc, #192]	; (800540c <HAL_RCC_ClockConfig+0x23c>)
 800534a:	6960      	ldr	r0, [r4, #20]
 800534c:	69ca      	ldr	r2, [r1, #28]
 800534e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005352:	4290      	cmp	r0, r2
 8005354:	d204      	bcs.n	8005360 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005356:	69ca      	ldr	r2, [r1, #28]
 8005358:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800535c:	4302      	orrs	r2, r0
 800535e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005360:	06de      	lsls	r6, r3, #27
 8005362:	d50b      	bpl.n	800537c <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005364:	4929      	ldr	r1, [pc, #164]	; (800540c <HAL_RCC_ClockConfig+0x23c>)
 8005366:	69a0      	ldr	r0, [r4, #24]
 8005368:	69ca      	ldr	r2, [r1, #28]
 800536a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800536e:	4290      	cmp	r0, r2
 8005370:	d204      	bcs.n	800537c <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005372:	69ca      	ldr	r2, [r1, #28]
 8005374:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005378:	4302      	orrs	r2, r0
 800537a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800537c:	069d      	lsls	r5, r3, #26
 800537e:	d50b      	bpl.n	8005398 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005380:	4a22      	ldr	r2, [pc, #136]	; (800540c <HAL_RCC_ClockConfig+0x23c>)
 8005382:	69e1      	ldr	r1, [r4, #28]
 8005384:	6a13      	ldr	r3, [r2, #32]
 8005386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800538a:	4299      	cmp	r1, r3
 800538c:	d204      	bcs.n	8005398 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800538e:	6a13      	ldr	r3, [r2, #32]
 8005390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005394:	430b      	orrs	r3, r1
 8005396:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005398:	f7ff fe7a 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 800539c:	4a1b      	ldr	r2, [pc, #108]	; (800540c <HAL_RCC_ClockConfig+0x23c>)
 800539e:	4603      	mov	r3, r0
 80053a0:	481b      	ldr	r0, [pc, #108]	; (8005410 <HAL_RCC_ClockConfig+0x240>)
 80053a2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053a4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053a6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80053aa:	4d1a      	ldr	r5, [pc, #104]	; (8005414 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053ac:	f002 020f 	and.w	r2, r2, #15
 80053b0:	4c19      	ldr	r4, [pc, #100]	; (8005418 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053b2:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053b4:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053b6:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 80053ba:	4818      	ldr	r0, [pc, #96]	; (800541c <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053bc:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053c0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 80053c2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80053c4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053c6:	40d3      	lsrs	r3, r2
 80053c8:	6023      	str	r3, [r4, #0]
}
 80053ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80053ce:	f7fc bd9b 	b.w	8001f08 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d2:	07da      	lsls	r2, r3, #31
 80053d4:	f53f af60 	bmi.w	8005298 <HAL_RCC_ClockConfig+0xc8>
 80053d8:	e795      	b.n	8005306 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053da:	6982      	ldr	r2, [r0, #24]
 80053dc:	f022 020f 	bic.w	r2, r2, #15
 80053e0:	4311      	orrs	r1, r2
 80053e2:	6181      	str	r1, [r0, #24]
 80053e4:	e78f      	b.n	8005306 <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053e6:	019f      	lsls	r7, r3, #6
 80053e8:	f53f af6a 	bmi.w	80052c0 <HAL_RCC_ClockConfig+0xf0>
 80053ec:	e707      	b.n	80051fe <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80053ee:	2001      	movs	r0, #1
}
 80053f0:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053f2:	039b      	lsls	r3, r3, #14
 80053f4:	f53f af64 	bmi.w	80052c0 <HAL_RCC_ClockConfig+0xf0>
 80053f8:	e701      	b.n	80051fe <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 80053fa:	2003      	movs	r0, #3
 80053fc:	e700      	b.n	8005200 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053fe:	05de      	lsls	r6, r3, #23
 8005400:	f53f af5e 	bmi.w	80052c0 <HAL_RCC_ClockConfig+0xf0>
 8005404:	e6fb      	b.n	80051fe <HAL_RCC_ClockConfig+0x2e>
 8005406:	bf00      	nop
 8005408:	52002000 	.word	0x52002000
 800540c:	58024400 	.word	0x58024400
 8005410:	08009238 	.word	0x08009238
 8005414:	20000034 	.word	0x20000034
 8005418:	20000038 	.word	0x20000038
 800541c:	20000040 	.word	0x20000040

08005420 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005420:	4a18      	ldr	r2, [pc, #96]	; (8005484 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005422:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005424:	6913      	ldr	r3, [r2, #16]
 8005426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800542a:	2b10      	cmp	r3, #16
 800542c:	d01a      	beq.n	8005464 <HAL_RCC_GetHCLKFreq+0x44>
 800542e:	2b18      	cmp	r3, #24
 8005430:	d023      	beq.n	800547a <HAL_RCC_GetHCLKFreq+0x5a>
 8005432:	b1cb      	cbz	r3, 8005468 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8005434:	4814      	ldr	r0, [pc, #80]	; (8005488 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005436:	4b13      	ldr	r3, [pc, #76]	; (8005484 <HAL_RCC_GetHCLKFreq+0x64>)
 8005438:	4914      	ldr	r1, [pc, #80]	; (800548c <HAL_RCC_GetHCLKFreq+0x6c>)
 800543a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800543c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800543e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005442:	4c13      	ldr	r4, [pc, #76]	; (8005490 <HAL_RCC_GetHCLKFreq+0x70>)
 8005444:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005448:	4d12      	ldr	r5, [pc, #72]	; (8005494 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800544a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800544c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800544e:	f002 021f 	and.w	r2, r2, #31
 8005452:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005456:	f003 001f 	and.w	r0, r3, #31
 800545a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800545e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005460:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8005462:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005464:	480c      	ldr	r0, [pc, #48]	; (8005498 <HAL_RCC_GetHCLKFreq+0x78>)
 8005466:	e7e6      	b.n	8005436 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005468:	6813      	ldr	r3, [r2, #0]
 800546a:	069b      	lsls	r3, r3, #26
 800546c:	d508      	bpl.n	8005480 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	480a      	ldr	r0, [pc, #40]	; (800549c <HAL_RCC_GetHCLKFreq+0x7c>)
 8005472:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005476:	40d0      	lsrs	r0, r2
 8005478:	e7dd      	b.n	8005436 <HAL_RCC_GetHCLKFreq+0x16>
 800547a:	f7ff fab1 	bl	80049e0 <HAL_RCC_GetSysClockFreq.part.0>
 800547e:	e7da      	b.n	8005436 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005480:	4806      	ldr	r0, [pc, #24]	; (800549c <HAL_RCC_GetHCLKFreq+0x7c>)
 8005482:	e7d8      	b.n	8005436 <HAL_RCC_GetHCLKFreq+0x16>
 8005484:	58024400 	.word	0x58024400
 8005488:	003d0900 	.word	0x003d0900
 800548c:	08009238 	.word	0x08009238
 8005490:	20000038 	.word	0x20000038
 8005494:	20000034 	.word	0x20000034
 8005498:	00f42400 	.word	0x00f42400
 800549c:	03d09000 	.word	0x03d09000

080054a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054a2:	4c3a      	ldr	r4, [pc, #232]	; (800558c <RCCEx_PLL2_Config+0xec>)
 80054a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d067      	beq.n	800557e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	4606      	mov	r6, r0
 80054b2:	460f      	mov	r7, r1
 80054b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054b8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ba:	f7fc fd87 	bl	8001fcc <HAL_GetTick>
 80054be:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054c0:	e004      	b.n	80054cc <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80054c2:	f7fc fd83 	bl	8001fcc <HAL_GetTick>
 80054c6:	1b43      	subs	r3, r0, r5
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d856      	bhi.n	800557a <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	011a      	lsls	r2, r3, #4
 80054d0:	d4f7      	bmi.n	80054c2 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80054d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054d4:	6832      	ldr	r2, [r6, #0]
 80054d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054da:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80054de:	62a3      	str	r3, [r4, #40]	; 0x28
 80054e0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	3a01      	subs	r2, #1
 80054e8:	025b      	lsls	r3, r3, #9
 80054ea:	0412      	lsls	r2, r2, #16
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80054f2:	4313      	orrs	r3, r2
 80054f4:	6872      	ldr	r2, [r6, #4]
 80054f6:	3a01      	subs	r2, #1
 80054f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054fc:	4313      	orrs	r3, r2
 80054fe:	6932      	ldr	r2, [r6, #16]
 8005500:	3a01      	subs	r2, #1
 8005502:	0612      	lsls	r2, r2, #24
 8005504:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005508:	4313      	orrs	r3, r2
 800550a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800550c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800550e:	6972      	ldr	r2, [r6, #20]
 8005510:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005514:	4313      	orrs	r3, r2
 8005516:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005518:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800551a:	69b3      	ldr	r3, [r6, #24]
 800551c:	f022 0220 	bic.w	r2, r2, #32
 8005520:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005522:	4b1b      	ldr	r3, [pc, #108]	; (8005590 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005524:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005526:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005528:	f022 0210 	bic.w	r2, r2, #16
 800552c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800552e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005530:	69f2      	ldr	r2, [r6, #28]
 8005532:	400b      	ands	r3, r1
 8005534:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005538:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800553a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800553c:	f043 0310 	orr.w	r3, r3, #16
 8005540:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005542:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8005544:	b1ef      	cbz	r7, 8005582 <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005546:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005548:	bf0c      	ite	eq
 800554a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800554e:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8005552:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005554:	4c0d      	ldr	r4, [pc, #52]	; (800558c <RCCEx_PLL2_Config+0xec>)
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800555c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800555e:	f7fc fd35 	bl	8001fcc <HAL_GetTick>
 8005562:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005564:	e004      	b.n	8005570 <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005566:	f7fc fd31 	bl	8001fcc <HAL_GetTick>
 800556a:	1b40      	subs	r0, r0, r5
 800556c:	2802      	cmp	r0, #2
 800556e:	d804      	bhi.n	800557a <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	d5f7      	bpl.n	8005566 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8005576:	2000      	movs	r0, #0
}
 8005578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800557a:	2003      	movs	r0, #3
}
 800557c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800557e:	2001      	movs	r0, #1
}
 8005580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005586:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005588:	e7e4      	b.n	8005554 <RCCEx_PLL2_Config+0xb4>
 800558a:	bf00      	nop
 800558c:	58024400 	.word	0x58024400
 8005590:	ffff0007 	.word	0xffff0007

08005594 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005596:	4c3a      	ldr	r4, [pc, #232]	; (8005680 <RCCEx_PLL3_Config+0xec>)
 8005598:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d067      	beq.n	8005672 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	4606      	mov	r6, r0
 80055a6:	460f      	mov	r7, r1
 80055a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ac:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ae:	f7fc fd0d 	bl	8001fcc <HAL_GetTick>
 80055b2:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055b4:	e004      	b.n	80055c0 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80055b6:	f7fc fd09 	bl	8001fcc <HAL_GetTick>
 80055ba:	1b43      	subs	r3, r0, r5
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d856      	bhi.n	800566e <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	009a      	lsls	r2, r3, #2
 80055c4:	d4f7      	bmi.n	80055b6 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80055c8:	6832      	ldr	r2, [r6, #0]
 80055ca:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80055ce:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80055d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80055d4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80055d8:	3b01      	subs	r3, #1
 80055da:	3a01      	subs	r2, #1
 80055dc:	025b      	lsls	r3, r3, #9
 80055de:	0412      	lsls	r2, r2, #16
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80055e6:	4313      	orrs	r3, r2
 80055e8:	6872      	ldr	r2, [r6, #4]
 80055ea:	3a01      	subs	r2, #1
 80055ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055f0:	4313      	orrs	r3, r2
 80055f2:	6932      	ldr	r2, [r6, #16]
 80055f4:	3a01      	subs	r2, #1
 80055f6:	0612      	lsls	r2, r2, #24
 80055f8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80055fc:	4313      	orrs	r3, r2
 80055fe:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005600:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005602:	6972      	ldr	r2, [r6, #20]
 8005604:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005608:	4313      	orrs	r3, r2
 800560a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800560c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800560e:	69b3      	ldr	r3, [r6, #24]
 8005610:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005614:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005616:	4b1b      	ldr	r3, [pc, #108]	; (8005684 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005618:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800561a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800561c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005620:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005622:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005624:	69f2      	ldr	r2, [r6, #28]
 8005626:	400b      	ands	r3, r1
 8005628:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800562c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800562e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005634:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005636:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8005638:	b1ef      	cbz	r7, 8005676 <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800563a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800563c:	bf0c      	ite	eq
 800563e:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005642:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8005646:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005648:	4c0d      	ldr	r4, [pc, #52]	; (8005680 <RCCEx_PLL3_Config+0xec>)
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005650:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005652:	f7fc fcbb 	bl	8001fcc <HAL_GetTick>
 8005656:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005658:	e004      	b.n	8005664 <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800565a:	f7fc fcb7 	bl	8001fcc <HAL_GetTick>
 800565e:	1b40      	subs	r0, r0, r5
 8005660:	2802      	cmp	r0, #2
 8005662:	d804      	bhi.n	800566e <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	d5f7      	bpl.n	800565a <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800566a:	2000      	movs	r0, #0
}
 800566c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800566e:	2003      	movs	r0, #3
}
 8005670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005672:	2001      	movs	r0, #1
}
 8005674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005676:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800567a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800567c:	e7e4      	b.n	8005648 <RCCEx_PLL3_Config+0xb4>
 800567e:	bf00      	nop
 8005680:	58024400 	.word	0x58024400
 8005684:	ffff0007 	.word	0xffff0007

08005688 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800568c:	6803      	ldr	r3, [r0, #0]
{
 800568e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005690:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8005694:	d022      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8005696:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005698:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800569c:	f000 8499 	beq.w	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80056a0:	d811      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80056a2:	2a00      	cmp	r2, #0
 80056a4:	f000 8503 	beq.w	80060ae <HAL_RCCEx_PeriphCLKConfig+0xa26>
 80056a8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80056ac:	f040 84fc 	bne.w	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056b0:	2102      	movs	r1, #2
 80056b2:	3004      	adds	r0, #4
 80056b4:	f7ff fef4 	bl	80054a0 <RCCEx_PLL2_Config>
 80056b8:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80056ba:	2e00      	cmp	r6, #0
 80056bc:	f040 8491 	bne.w	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	e003      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x46>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80056c6:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80056ca:	f040 84ed 	bne.w	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056ce:	48a8      	ldr	r0, [pc, #672]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056d0:	2600      	movs	r6, #0
 80056d2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80056d4:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80056d8:	430a      	orrs	r2, r1
 80056da:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056dc:	05dd      	lsls	r5, r3, #23
 80056de:	d50a      	bpl.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80056e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80056e2:	2a04      	cmp	r2, #4
 80056e4:	d806      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80056e6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80056ea:	04ad      	.short	0x04ad
 80056ec:	0493048c 	.word	0x0493048c
 80056f0:	02e902e9 	.word	0x02e902e9
 80056f4:	2601      	movs	r6, #1
 80056f6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80056f8:	0598      	lsls	r0, r3, #22
 80056fa:	d51b      	bpl.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai23ClockSelection)
 80056fc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80056fe:	2a80      	cmp	r2, #128	; 0x80
 8005700:	f000 8497 	beq.w	8006032 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8005704:	f200 80ec 	bhi.w	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8005708:	2a00      	cmp	r2, #0
 800570a:	f000 8394 	beq.w	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800570e:	2a40      	cmp	r2, #64	; 0x40
 8005710:	f040 80ed 	bne.w	80058ee <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005714:	2100      	movs	r1, #0
 8005716:	1d20      	adds	r0, r4, #4
 8005718:	f7ff fec2 	bl	80054a0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800571c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800571e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005720:	2d00      	cmp	r5, #0
 8005722:	f040 836e 	bne.w	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005726:	4992      	ldr	r1, [pc, #584]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800572a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800572c:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8005730:	4302      	orrs	r2, r0
 8005732:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005734:	0559      	lsls	r1, r3, #21
 8005736:	d51f      	bpl.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8005738:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800573c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8005740:	f000 8456 	beq.w	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005744:	f200 80d6 	bhi.w	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005748:	2a00      	cmp	r2, #0
 800574a:	f000 837a 	beq.w	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
 800574e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005752:	f040 80d7 	bne.w	8005904 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005756:	2100      	movs	r1, #0
 8005758:	1d20      	adds	r0, r4, #4
 800575a:	f7ff fea1 	bl	80054a0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800575e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005760:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005762:	2d00      	cmp	r5, #0
 8005764:	f040 8351 	bne.w	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x782>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005768:	4981      	ldr	r1, [pc, #516]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800576a:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800576e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005770:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8005774:	4302      	orrs	r2, r0
 8005776:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005778:	051a      	lsls	r2, r3, #20
 800577a:	d51f      	bpl.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->Sai4BClockSelection)
 800577c:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8005780:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8005784:	f000 8465 	beq.w	8006052 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8005788:	f200 80bf 	bhi.w	800590a <HAL_RCCEx_PeriphCLKConfig+0x282>
 800578c:	2a00      	cmp	r2, #0
 800578e:	f000 835e 	beq.w	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8005792:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8005796:	f040 80c0 	bne.w	800591a <HAL_RCCEx_PeriphCLKConfig+0x292>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800579a:	2100      	movs	r1, #0
 800579c:	1d20      	adds	r0, r4, #4
 800579e:	f7ff fe7f 	bl	80054a0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057a2:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057a4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80057a6:	2d00      	cmp	r5, #0
 80057a8:	f040 8333 	bne.w	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057ac:	4970      	ldr	r1, [pc, #448]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057ae:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80057b2:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80057b4:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80057b8:	4302      	orrs	r2, r0
 80057ba:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057bc:	019f      	lsls	r7, r3, #6
 80057be:	d518      	bpl.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->QspiClockSelection)
 80057c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80057c2:	2a20      	cmp	r2, #32
 80057c4:	f000 83ce 	beq.w	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80057c8:	f200 80aa 	bhi.w	8005920 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80057cc:	b13a      	cbz	r2, 80057de <HAL_RCCEx_PeriphCLKConfig+0x156>
 80057ce:	2a10      	cmp	r2, #16
 80057d0:	f040 80a9 	bne.w	8005926 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d4:	4966      	ldr	r1, [pc, #408]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80057d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80057dc:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80057de:	2d00      	cmp	r5, #0
 80057e0:	f040 8360 	bne.w	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057e4:	4962      	ldr	r1, [pc, #392]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057e6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80057e8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80057ea:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80057ee:	4302      	orrs	r2, r0
 80057f0:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80057f2:	04d8      	lsls	r0, r3, #19
 80057f4:	d51d      	bpl.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi123ClockSelection)
 80057f6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80057f8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80057fc:	f000 8410 	beq.w	8006020 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005800:	f200 8094 	bhi.w	800592c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8005804:	2a00      	cmp	r2, #0
 8005806:	f000 8328 	beq.w	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800580a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800580e:	f040 8095 	bne.w	800593c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005812:	2100      	movs	r1, #0
 8005814:	1d20      	adds	r0, r4, #4
 8005816:	f7ff fe43 	bl	80054a0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800581a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800581c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800581e:	2d00      	cmp	r5, #0
 8005820:	f040 82f1 	bne.w	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005824:	4952      	ldr	r1, [pc, #328]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005826:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005828:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800582a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800582e:	4302      	orrs	r2, r0
 8005830:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005832:	0499      	lsls	r1, r3, #18
 8005834:	d51a      	bpl.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi45ClockSelection)
 8005836:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005838:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800583c:	f000 8376 	beq.w	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8005840:	d87f      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005842:	b14a      	cbz	r2, 8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8005844:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005848:	f040 8083 	bne.w	8005952 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800584c:	2101      	movs	r1, #1
 800584e:	1d20      	adds	r0, r4, #4
 8005850:	f7ff fe26 	bl	80054a0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005854:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005856:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005858:	2d00      	cmp	r5, #0
 800585a:	f040 8325 	bne.w	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800585e:	4944      	ldr	r1, [pc, #272]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005860:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005862:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005864:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005868:	4302      	orrs	r2, r0
 800586a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800586c:	045a      	lsls	r2, r3, #17
 800586e:	d51b      	bpl.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x220>
    switch(PeriphClkInit->Spi6ClockSelection)
 8005870:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8005874:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8005878:	f000 8362 	beq.w	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800587c:	d86c      	bhi.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800587e:	b142      	cbz	r2, 8005892 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005880:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8005884:	d170      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005886:	2101      	movs	r1, #1
 8005888:	1d20      	adds	r0, r4, #4
 800588a:	f7ff fe09 	bl	80054a0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800588e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005890:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005892:	2d00      	cmp	r5, #0
 8005894:	f040 830a 	bne.w	8005eac <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005898:	4935      	ldr	r1, [pc, #212]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800589a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800589e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80058a0:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80058a4:	4302      	orrs	r2, r0
 80058a6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058a8:	041f      	lsls	r7, r3, #16
 80058aa:	d50d      	bpl.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->FdcanClockSelection)
 80058ac:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80058ae:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80058b2:	f000 834f 	beq.w	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 80058b6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80058ba:	f000 820b 	beq.w	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80058be:	2a00      	cmp	r2, #0
 80058c0:	f000 820e 	beq.w	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>
 80058c4:	2601      	movs	r6, #1
 80058c6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80058c8:	01d8      	lsls	r0, r3, #7
 80058ca:	d55d      	bpl.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 80058cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80058ce:	2a03      	cmp	r2, #3
 80058d0:	f200 8418 	bhi.w	8006104 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
 80058d4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80058d8:	035a0054 	.word	0x035a0054
 80058dc:	0054004e 	.word	0x0054004e
    switch(PeriphClkInit->Sai23ClockSelection)
 80058e0:	2ac0      	cmp	r2, #192	; 0xc0
 80058e2:	f43f af1d 	beq.w	8005720 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80058e6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80058ea:	f43f af19 	beq.w	8005720 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80058ee:	2601      	movs	r6, #1
 80058f0:	4635      	mov	r5, r6
 80058f2:	e71f      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai4AClockSelection)
 80058f4:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80058f8:	f43f af33 	beq.w	8005762 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80058fc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005900:	f43f af2f 	beq.w	8005762 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005904:	2601      	movs	r6, #1
 8005906:	4635      	mov	r5, r6
 8005908:	e736      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4BClockSelection)
 800590a:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800590e:	f43f af4a 	beq.w	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8005912:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8005916:	f43f af46 	beq.w	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800591a:	2601      	movs	r6, #1
 800591c:	4635      	mov	r5, r6
 800591e:	e74d      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->QspiClockSelection)
 8005920:	2a30      	cmp	r2, #48	; 0x30
 8005922:	f43f af5c 	beq.w	80057de <HAL_RCCEx_PeriphCLKConfig+0x156>
 8005926:	2601      	movs	r6, #1
 8005928:	4635      	mov	r5, r6
 800592a:	e762      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Spi123ClockSelection)
 800592c:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8005930:	f43f af75 	beq.w	800581e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005934:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005938:	f43f af71 	beq.w	800581e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800593c:	2601      	movs	r6, #1
 800593e:	4635      	mov	r5, r6
 8005940:	e777      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi45ClockSelection)
 8005942:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8005946:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800594a:	d085      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800594c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8005950:	d082      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8005952:	2601      	movs	r6, #1
 8005954:	4635      	mov	r5, r6
 8005956:	e789      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi6ClockSelection)
 8005958:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800595c:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8005960:	d097      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005962:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8005966:	d094      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005968:	2601      	movs	r6, #1
 800596a:	4635      	mov	r5, r6
 800596c:	e79c      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800596e:	bf00      	nop
 8005970:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005974:	2102      	movs	r1, #2
 8005976:	1d20      	adds	r0, r4, #4
 8005978:	f7ff fd92 	bl	80054a0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800597c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800597e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005980:	2d00      	cmp	r5, #0
 8005982:	f000 8272 	beq.w	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8005986:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005988:	0259      	lsls	r1, r3, #9
 800598a:	f100 81ee 	bmi.w	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800598e:	07df      	lsls	r7, r3, #31
 8005990:	d52f      	bpl.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8005992:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005994:	2a28      	cmp	r2, #40	; 0x28
 8005996:	d82a      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x366>
 8005998:	e8df f012 	tbh	[pc, r2, lsl #1]
 800599c:	002901dc 	.word	0x002901dc
 80059a0:	00290029 	.word	0x00290029
 80059a4:	00290029 	.word	0x00290029
 80059a8:	00290029 	.word	0x00290029
 80059ac:	00290378 	.word	0x00290378
 80059b0:	00290029 	.word	0x00290029
 80059b4:	00290029 	.word	0x00290029
 80059b8:	00290029 	.word	0x00290029
 80059bc:	002901d5 	.word	0x002901d5
 80059c0:	00290029 	.word	0x00290029
 80059c4:	00290029 	.word	0x00290029
 80059c8:	00290029 	.word	0x00290029
 80059cc:	002901dc 	.word	0x002901dc
 80059d0:	00290029 	.word	0x00290029
 80059d4:	00290029 	.word	0x00290029
 80059d8:	00290029 	.word	0x00290029
 80059dc:	002901dc 	.word	0x002901dc
 80059e0:	00290029 	.word	0x00290029
 80059e4:	00290029 	.word	0x00290029
 80059e8:	00290029 	.word	0x00290029
 80059ec:	01dc      	.short	0x01dc
 80059ee:	2601      	movs	r6, #1
 80059f0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80059f2:	0798      	lsls	r0, r3, #30
 80059f4:	d516      	bpl.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80059f6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80059f8:	2a05      	cmp	r2, #5
 80059fa:	f200 8380 	bhi.w	80060fe <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80059fe:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005a02:	000d      	.short	0x000d
 8005a04:	00060331 	.word	0x00060331
 8005a08:	000d000d 	.word	0x000d000d
 8005a0c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a0e:	2101      	movs	r1, #1
 8005a10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a14:	f7ff fdbe 	bl	8005594 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a18:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a1a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005a1c:	2d00      	cmp	r5, #0
 8005a1e:	f000 822e 	beq.w	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8005a22:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a24:	0759      	lsls	r1, r3, #29
 8005a26:	d517      	bpl.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005a28:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005a2c:	2a05      	cmp	r2, #5
 8005a2e:	f200 836c 	bhi.w	800610a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005a32:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005a36:	000d      	.short	0x000d
 8005a38:	00060321 	.word	0x00060321
 8005a3c:	000d000d 	.word	0x000d000d
 8005a40:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a42:	2101      	movs	r1, #1
 8005a44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a48:	f7ff fda4 	bl	8005594 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a4c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a4e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005a50:	2d00      	cmp	r5, #0
 8005a52:	f000 821c 	beq.w	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x806>
 8005a56:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a58:	069a      	lsls	r2, r3, #26
 8005a5a:	d51d      	bpl.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005a5c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005a60:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8005a64:	f000 8287 	beq.w	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005a68:	f200 80e6 	bhi.w	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8005a6c:	b14a      	cbz	r2, 8005a82 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005a6e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8005a72:	f040 80eb 	bne.w	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a76:	2100      	movs	r1, #0
 8005a78:	1d20      	adds	r0, r4, #4
 8005a7a:	f7ff fd11 	bl	80054a0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a7e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a80:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005a82:	2d00      	cmp	r5, #0
 8005a84:	f040 81ef 	bne.w	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a88:	49a4      	ldr	r1, [pc, #656]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8005a8a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8005a8e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005a90:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8005a94:	4302      	orrs	r2, r0
 8005a96:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a98:	065f      	lsls	r7, r3, #25
 8005a9a:	d51d      	bpl.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005a9c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8005aa0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005aa4:	f000 822e 	beq.w	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8005aa8:	f200 80d3 	bhi.w	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005aac:	b14a      	cbz	r2, 8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005aae:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005ab2:	f040 80d8 	bne.w	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	1d20      	adds	r0, r4, #4
 8005aba:	f7ff fcf1 	bl	80054a0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005abe:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ac0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005ac2:	2d00      	cmp	r5, #0
 8005ac4:	f040 81f4 	bne.w	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x828>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ac8:	4994      	ldr	r1, [pc, #592]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8005aca:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8005ace:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005ad0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8005ad4:	4302      	orrs	r2, r0
 8005ad6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ad8:	0618      	lsls	r0, r3, #24
 8005ada:	d51d      	bpl.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005adc:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8005ae0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005ae4:	f000 8218 	beq.w	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8005ae8:	f200 80c0 	bhi.w	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8005aec:	b14a      	cbz	r2, 8005b02 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005aee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005af2:	f040 80c5 	bne.w	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005af6:	2100      	movs	r1, #0
 8005af8:	1d20      	adds	r0, r4, #4
 8005afa:	f7ff fcd1 	bl	80054a0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005afe:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b00:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005b02:	2d00      	cmp	r5, #0
 8005b04:	f040 81b9 	bne.w	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b08:	4984      	ldr	r1, [pc, #528]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8005b0a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8005b0e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005b10:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005b14:	4302      	orrs	r2, r0
 8005b16:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b18:	0719      	lsls	r1, r3, #28
 8005b1a:	d50b      	bpl.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005b1c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005b20:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005b24:	f000 823b 	beq.w	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005b28:	487c      	ldr	r0, [pc, #496]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8005b2a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005b2c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005b30:	430a      	orrs	r2, r1
 8005b32:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b34:	06da      	lsls	r2, r3, #27
 8005b36:	d50b      	bpl.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005b38:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8005b3c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005b40:	f000 823a 	beq.w	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b44:	4875      	ldr	r0, [pc, #468]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8005b46:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005b48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b50:	031f      	lsls	r7, r3, #12
 8005b52:	d50e      	bpl.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch(PeriphClkInit->AdcClockSelection)
 8005b54:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005b58:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005b5c:	f000 80e0 	beq.w	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x698>
 8005b60:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8005b64:	f000 80e3 	beq.w	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8005b68:	2900      	cmp	r1, #0
 8005b6a:	f000 81c3 	beq.w	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8005b6e:	2601      	movs	r6, #1
 8005b70:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b72:	0358      	lsls	r0, r3, #13
 8005b74:	d50f      	bpl.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch(PeriphClkInit->UsbClockSelection)
 8005b76:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005b7a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005b7e:	f000 80ba 	beq.w	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005b82:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8005b86:	f000 80bd 	beq.w	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 8005b8a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005b8e:	f000 81a9 	beq.w	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8005b92:	2601      	movs	r6, #1
 8005b94:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005b96:	03d9      	lsls	r1, r3, #15
 8005b98:	d509      	bpl.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->SdmmcClockSelection)
 8005b9a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005b9c:	2a00      	cmp	r2, #0
 8005b9e:	f000 818f 	beq.w	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8005ba2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005ba6:	f000 8136 	beq.w	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8005baa:	2601      	movs	r6, #1
 8005bac:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bae:	009a      	lsls	r2, r3, #2
 8005bb0:	f100 811c 	bmi.w	8005dec <HAL_RCCEx_PeriphCLKConfig+0x764>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005bb4:	039f      	lsls	r7, r3, #14
 8005bb6:	d466      	bmi.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    return HAL_OK;
 8005bb8:	1e30      	subs	r0, r6, #0
 8005bba:	bf18      	it	ne
 8005bbc:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bbe:	02de      	lsls	r6, r3, #11
 8005bc0:	d506      	bpl.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bc2:	4956      	ldr	r1, [pc, #344]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8005bc4:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8005bc6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005bc8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005bcc:	432a      	orrs	r2, r5
 8005bce:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005bd0:	00dd      	lsls	r5, r3, #3
 8005bd2:	d507      	bpl.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005bd4:	4951      	ldr	r1, [pc, #324]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8005bd6:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8005bda:	690a      	ldr	r2, [r1, #16]
 8005bdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005be0:	432a      	orrs	r2, r5
 8005be2:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005be4:	0299      	lsls	r1, r3, #10
 8005be6:	d506      	bpl.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005be8:	494c      	ldr	r1, [pc, #304]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8005bea:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8005bec:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005bee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005bf2:	432a      	orrs	r2, r5
 8005bf4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005bf6:	005a      	lsls	r2, r3, #1
 8005bf8:	d509      	bpl.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x586>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bfa:	4a48      	ldr	r2, [pc, #288]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8005bfc:	6911      	ldr	r1, [r2, #16]
 8005bfe:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8005c02:	6111      	str	r1, [r2, #16]
 8005c04:	6911      	ldr	r1, [r2, #16]
 8005c06:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8005c0a:	4329      	orrs	r1, r5
 8005c0c:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	da06      	bge.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x598>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c12:	4942      	ldr	r1, [pc, #264]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8005c14:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8005c16:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005c18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c1c:	432a      	orrs	r2, r5
 8005c1e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	d507      	bpl.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c24:	4a3d      	ldr	r2, [pc, #244]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8005c26:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8005c2a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005c2c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005c30:	430b      	orrs	r3, r1
 8005c32:	6553      	str	r3, [r2, #84]	; 0x54
}
 8005c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005c38:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8005c3c:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8005c40:	f43f af1f 	beq.w	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005c44:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8005c48:	f43f af1b 	beq.w	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005c4c:	2601      	movs	r6, #1
 8005c4e:	4635      	mov	r5, r6
 8005c50:	e722      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005c52:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8005c56:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005c5a:	f43f af32 	beq.w	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005c5e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005c62:	f43f af2e 	beq.w	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005c66:	2601      	movs	r6, #1
 8005c68:	4635      	mov	r5, r6
 8005c6a:	e735      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005c6c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005c70:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005c74:	f43f af45 	beq.w	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005c78:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8005c7c:	f43f af41 	beq.w	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005c80:	2601      	movs	r6, #1
 8005c82:	4635      	mov	r5, r6
 8005c84:	e748      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->RngClockSelection)
 8005c86:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005c88:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005c8c:	f000 8121 	beq.w	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8005c90:	d906      	bls.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005c92:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8005c96:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005c9a:	d003      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	e78e      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x536>
 8005ca0:	2a00      	cmp	r2, #0
 8005ca2:	d1fb      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x614>
    if(ret == HAL_OK)
 8005ca4:	2d00      	cmp	r5, #0
 8005ca6:	d1f9      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x614>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ca8:	4d1c      	ldr	r5, [pc, #112]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
    return HAL_OK;
 8005caa:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cac:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 8005cae:	bf18      	it	ne
 8005cb0:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cb2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	656a      	str	r2, [r5, #84]	; 0x54
 8005cba:	e780      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005cbc:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8005cbe:	2d00      	cmp	r5, #0
 8005cc0:	f040 80a5 	bne.w	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cc4:	4915      	ldr	r1, [pc, #84]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8005cc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cc8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005cca:	f022 0207 	bic.w	r2, r2, #7
 8005cce:	4302      	orrs	r2, r0
 8005cd0:	650a      	str	r2, [r1, #80]	; 0x50
 8005cd2:	e511      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	1d20      	adds	r0, r4, #4
 8005cd8:	f7ff fbe2 	bl	80054a0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005cdc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cde:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005ce0:	2d00      	cmp	r5, #0
 8005ce2:	f040 80dd 	bne.w	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x818>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ce6:	490d      	ldr	r1, [pc, #52]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8005ce8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005cea:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005cf0:	4302      	orrs	r2, r0
 8005cf2:	650a      	str	r2, [r1, #80]	; 0x50
 8005cf4:	e5e8      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005cfc:	f7ff fc4a 	bl	8005594 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d00:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d02:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005d04:	2d00      	cmp	r5, #0
 8005d06:	f040 80d9 	bne.w	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d0a:	4904      	ldr	r1, [pc, #16]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8005d0c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8005d10:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005d12:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005d16:	4302      	orrs	r2, r0
 8005d18:	654a      	str	r2, [r1, #84]	; 0x54
 8005d1a:	e73c      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8005d1c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d20:	2102      	movs	r1, #2
 8005d22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005d26:	f7ff fc35 	bl	8005594 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d2a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d2c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005d2e:	2d00      	cmp	r5, #0
 8005d30:	f040 80c2 	bne.w	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x830>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d34:	49ac      	ldr	r1, [pc, #688]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005d36:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8005d3a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005d3c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005d40:	4302      	orrs	r2, r0
 8005d42:	658a      	str	r2, [r1, #88]	; 0x58
 8005d44:	e715      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d46:	2101      	movs	r1, #1
 8005d48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005d4c:	f7ff fc22 	bl	8005594 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d50:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d52:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005d54:	2d00      	cmp	r5, #0
 8005d56:	f040 80ad 	bne.w	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d5a:	49a3      	ldr	r1, [pc, #652]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005d5c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005d5e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005d60:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8005d64:	4302      	orrs	r2, r0
 8005d66:	654a      	str	r2, [r1, #84]	; 0x54
 8005d68:	e643      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d6a:	4fa0      	ldr	r7, [pc, #640]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d72:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8005d74:	f7fc f92a 	bl	8001fcc <HAL_GetTick>
 8005d78:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d7a:	e006      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x702>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7c:	f7fc f926 	bl	8001fcc <HAL_GetTick>
 8005d80:	eba0 0008 	sub.w	r0, r0, r8
 8005d84:	2864      	cmp	r0, #100	; 0x64
 8005d86:	f200 818b 	bhi.w	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	05da      	lsls	r2, r3, #23
 8005d8e:	d5f5      	bpl.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    if(ret == HAL_OK)
 8005d90:	2d00      	cmp	r5, #0
 8005d92:	f040 81b1 	bne.w	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d96:	4a94      	ldr	r2, [pc, #592]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005d98:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005d9c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005d9e:	4059      	eors	r1, r3
 8005da0:	f411 7f40 	tst.w	r1, #768	; 0x300
 8005da4:	d00b      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x736>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005da6:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005da8:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005daa:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dae:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8005db2:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005db4:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8005db6:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8005dba:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8005dbc:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc2:	f000 817b 	beq.w	80060bc <HAL_RCCEx_PeriphCLKConfig+0xa34>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dc6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005dca:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005dce:	f000 8189 	beq.w	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xa5c>
 8005dd2:	4985      	ldr	r1, [pc, #532]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005dd4:	690a      	ldr	r2, [r1, #16]
 8005dd6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005dda:	610a      	str	r2, [r1, #16]
 8005ddc:	4a82      	ldr	r2, [pc, #520]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005de4:	430b      	orrs	r3, r1
 8005de6:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	e5d0      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005dec:	2102      	movs	r1, #2
 8005dee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005df2:	f7ff fbcf 	bl	8005594 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005df6:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	f43f aedb 	beq.w	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      status=HAL_ERROR;
 8005dfe:	2601      	movs	r6, #1
 8005e00:	e6d8      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005e02:	462e      	mov	r6, r5
 8005e04:	e496      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005e06:	462e      	mov	r6, r5
 8005e08:	e513      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005e0a:	462e      	mov	r6, r5
 8005e0c:	e4b4      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8005e0e:	462e      	mov	r6, r5
 8005e10:	e472      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8005e12:	462e      	mov	r6, r5
 8005e14:	e4d2      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x134>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e16:	2102      	movs	r1, #2
 8005e18:	1d20      	adds	r0, r4, #4
 8005e1a:	f7ff fb41 	bl	80054a0 <RCCEx_PLL2_Config>
 8005e1e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e20:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	d153      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e26:	4970      	ldr	r1, [pc, #448]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005e28:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005e2a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005e2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e30:	4302      	orrs	r2, r0
 8005e32:	64ca      	str	r2, [r1, #76]	; 0x4c
 8005e34:	e6bb      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e36:	496c      	ldr	r1, [pc, #432]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005e38:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005e3a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005e3e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8005e40:	e46e      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e42:	4969      	ldr	r1, [pc, #420]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005e44:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005e46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005e4a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8005e4c:	e489      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xda>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e4e:	4966      	ldr	r1, [pc, #408]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005e50:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005e52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005e56:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8005e58:	e4a5      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e5a:	4963      	ldr	r1, [pc, #396]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005e5c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005e5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005e62:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8005e64:	e4db      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e66:	462e      	mov	r6, r5
 8005e68:	e616      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x410>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e6a:	495f      	ldr	r1, [pc, #380]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005e6c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005e6e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005e70:	f022 0203 	bic.w	r2, r2, #3
 8005e74:	4302      	orrs	r2, r0
 8005e76:	64ca      	str	r2, [r1, #76]	; 0x4c
 8005e78:	e586      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005e7a:	462e      	mov	r6, r5
 8005e7c:	e64c      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e7e:	495a      	ldr	r1, [pc, #360]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005e80:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005e82:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005e84:	f022 0207 	bic.w	r2, r2, #7
 8005e88:	4302      	orrs	r2, r0
 8005e8a:	654a      	str	r2, [r1, #84]	; 0x54
 8005e8c:	e5ca      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e8e:	4956      	ldr	r1, [pc, #344]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005e90:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8005e94:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005e96:	f022 0207 	bic.w	r2, r2, #7
 8005e9a:	4302      	orrs	r2, r0
 8005e9c:	658a      	str	r2, [r1, #88]	; 0x58
 8005e9e:	e5db      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005ea0:	462e      	mov	r6, r5
 8005ea2:	e511      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005ea4:	462e      	mov	r6, r5
 8005ea6:	e4a4      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8005ea8:	462e      	mov	r6, r5
 8005eaa:	e4df      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005eac:	462e      	mov	r6, r5
 8005eae:	e4fb      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005eb0:	462e      	mov	r6, r5
 8005eb2:	e611      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8005eb4:	462e      	mov	r6, r5
 8005eb6:	e59c      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005eb8:	462e      	mov	r6, r5
 8005eba:	e65a      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8005ebc:	462e      	mov	r6, r5
 8005ebe:	e66a      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec0:	4949      	ldr	r1, [pc, #292]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005ec2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005ec4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005ec8:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8005eca:	2d00      	cmp	r5, #0
 8005ecc:	d0ab      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8005ece:	462e      	mov	r6, r5
 8005ed0:	e66d      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed2:	4845      	ldr	r0, [pc, #276]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005ed4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005ed6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005eda:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8005edc:	2d00      	cmp	r5, #0
 8005ede:	f47f aedd 	bne.w	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005ee2:	e6e1      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee4:	4940      	ldr	r1, [pc, #256]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005ee6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005ee8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005eec:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8005eee:	2d00      	cmp	r5, #0
 8005ef0:	d1e4      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x834>
 8005ef2:	e70a      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x682>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ef4:	1d20      	adds	r0, r4, #4
 8005ef6:	f7ff fad3 	bl	80054a0 <RCCEx_PLL2_Config>
 8005efa:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005efc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005efe:	2d00      	cmp	r5, #0
 8005f00:	d1da      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8005f02:	e717      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f04:	2102      	movs	r1, #2
 8005f06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005f0a:	f7ff fb43 	bl	8005594 <RCCEx_PLL3_Config>
 8005f0e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f10:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005f12:	2d00      	cmp	r5, #0
 8005f14:	d1cc      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8005f16:	e5d7      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f18:	2102      	movs	r1, #2
 8005f1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005f1e:	f7ff fb39 	bl	8005594 <RCCEx_PLL3_Config>
 8005f22:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005f24:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005f26:	2d00      	cmp	r5, #0
 8005f28:	d1a7      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005f2a:	e5ed      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005f32:	f7ff fb2f 	bl	8005594 <RCCEx_PLL3_Config>
 8005f36:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f38:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005f3a:	2d00      	cmp	r5, #0
 8005f3c:	d1b4      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x820>
 8005f3e:	e48e      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f40:	2101      	movs	r1, #1
 8005f42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005f46:	f7ff fb25 	bl	8005594 <RCCEx_PLL3_Config>
 8005f4a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f4c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	d1ac      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x824>
 8005f52:	e4a1      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f54:	4924      	ldr	r1, [pc, #144]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005f56:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005f58:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005f5c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8005f5e:	2d00      	cmp	r5, #0
 8005f60:	d19e      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x818>
 8005f62:	e6c0      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f64:	2102      	movs	r1, #2
 8005f66:	1d20      	adds	r0, r4, #4
 8005f68:	f7ff fa9a 	bl	80054a0 <RCCEx_PLL2_Config>
 8005f6c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f6e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005f70:	2d00      	cmp	r5, #0
 8005f72:	d197      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8005f74:	e436      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f76:	2102      	movs	r1, #2
 8005f78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005f7c:	f7ff fb0a 	bl	8005594 <RCCEx_PLL3_Config>
 8005f80:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f82:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	f47f af6e 	bne.w	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 8005f8a:	e57d      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f8c:	4916      	ldr	r1, [pc, #88]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005f8e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005f90:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005f94:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8005f96:	2d00      	cmp	r5, #0
 8005f98:	f47f acf5 	bne.w	8005986 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005f9c:	e765      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005f9e:	2102      	movs	r1, #2
 8005fa0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005fa4:	f7ff faf6 	bl	8005594 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005fa8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fac:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	f43f adba 	beq.w	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
          status = HAL_ERROR;
 8005fb4:	2601      	movs	r6, #1
 8005fb6:	e5b7      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005fb8:	2102      	movs	r1, #2
 8005fba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005fbe:	f7ff fae9 	bl	8005594 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005fc2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fc6:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	f43f adbb 	beq.w	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
        status = HAL_ERROR;
 8005fce:	2601      	movs	r6, #1
 8005fd0:	e5b8      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	3024      	adds	r0, #36	; 0x24
 8005fd6:	f7ff fadd 	bl	8005594 <RCCEx_PLL3_Config>
 8005fda:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8005fdc:	2e00      	cmp	r6, #0
 8005fde:	f43f ab6f 	beq.w	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x38>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	f7ff bb7a 	b.w	80056dc <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005fe8:	58024400 	.word	0x58024400
 8005fec:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005ff6:	f7ff facd 	bl	8005594 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ffa:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ffc:	4605      	mov	r5, r0
      break;
 8005ffe:	f7ff bbb0 	b.w	8005762 <HAL_RCCEx_PeriphCLKConfig+0xda>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006002:	2100      	movs	r1, #0
 8006004:	1d20      	adds	r0, r4, #4
 8006006:	f7ff fa4b 	bl	80054a0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800600a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800600c:	4605      	mov	r5, r0
      break;
 800600e:	e656      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006010:	2100      	movs	r1, #0
 8006012:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006016:	f7ff fabd 	bl	8005594 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800601a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800601c:	4605      	mov	r5, r0
      break;
 800601e:	e64e      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006020:	2100      	movs	r1, #0
 8006022:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006026:	f7ff fab5 	bl	8005594 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800602a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800602c:	4605      	mov	r5, r0
      break;
 800602e:	f7ff bbf6 	b.w	800581e <HAL_RCCEx_PeriphCLKConfig+0x196>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006032:	2100      	movs	r1, #0
 8006034:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006038:	f7ff faac 	bl	8005594 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800603c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800603e:	4605      	mov	r5, r0
      break;
 8006040:	f7ff bb6e 	b.w	8005720 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006044:	4932      	ldr	r1, [pc, #200]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
      break;
 8006046:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006048:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800604a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800604e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8006050:	e635      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006052:	2100      	movs	r1, #0
 8006054:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006058:	f7ff fa9c 	bl	8005594 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800605c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800605e:	4605      	mov	r5, r0
      break;
 8006060:	f7ff bba1 	b.w	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006064:	2101      	movs	r1, #1
 8006066:	1d20      	adds	r0, r4, #4
 8006068:	f7ff fa1a 	bl	80054a0 <RCCEx_PLL2_Config>
 800606c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800606e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006070:	2d00      	cmp	r5, #0
 8006072:	f47f acd6 	bne.w	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8006076:	e702      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006078:	2101      	movs	r1, #1
 800607a:	1d20      	adds	r0, r4, #4
 800607c:	f7ff fa10 	bl	80054a0 <RCCEx_PLL2_Config>
 8006080:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006082:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006084:	2d00      	cmp	r5, #0
 8006086:	f47f ace6 	bne.w	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800608a:	e700      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800608c:	2101      	movs	r1, #1
 800608e:	1d20      	adds	r0, r4, #4
 8006090:	f7ff fa06 	bl	80054a0 <RCCEx_PLL2_Config>
 8006094:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006096:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006098:	2d00      	cmp	r5, #0
 800609a:	f47f af0b 	bne.w	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800609e:	e65c      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
            ret = HAL_TIMEOUT;
 80060a0:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060a2:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 80060a4:	4635      	mov	r5, r6
 80060a6:	e472      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80060a8:	2601      	movs	r6, #1
 80060aa:	f7ff bb17 	b.w	80056dc <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ae:	4818      	ldr	r0, [pc, #96]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80060b0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80060b2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80060b6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80060b8:	f7ff bb09 	b.w	80056ce <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 80060bc:	f7fb ff86 	bl	8001fcc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060c0:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8006110 <HAL_RCCEx_PeriphCLKConfig+0xa88>
        tickstart = HAL_GetTick();
 80060c4:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c6:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060ca:	e004      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060cc:	f7fb ff7e 	bl	8001fcc <HAL_GetTick>
 80060d0:	1bc0      	subs	r0, r0, r7
 80060d2:	4548      	cmp	r0, r9
 80060d4:	d8e4      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060d6:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80060da:	079b      	lsls	r3, r3, #30
 80060dc:	d5f6      	bpl.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xa44>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060de:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80060e2:	e670      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80060e4:	480a      	ldr	r0, [pc, #40]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80060e6:	4a0b      	ldr	r2, [pc, #44]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 80060e8:	6901      	ldr	r1, [r0, #16]
 80060ea:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80060ee:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80060f2:	430a      	orrs	r2, r1
 80060f4:	6102      	str	r2, [r0, #16]
 80060f6:	e671      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x754>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	462e      	mov	r6, r5
 80060fc:	e447      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80060fe:	2601      	movs	r6, #1
 8006100:	4635      	mov	r5, r6
 8006102:	e48f      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->FmcClockSelection)
 8006104:	2601      	movs	r6, #1
 8006106:	4635      	mov	r5, r6
 8006108:	e43e      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800610a:	2601      	movs	r6, #1
 800610c:	4635      	mov	r5, r6
 800610e:	e4a3      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006110:	58024400 	.word	0x58024400
 8006114:	00ffffcf 	.word	0x00ffffcf

08006118 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006118:	4b4f      	ldr	r3, [pc, #316]	; (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800611a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800611c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800611e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006120:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8006122:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006126:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800612a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800612c:	d05c      	beq.n	80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800612e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006132:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006136:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800613a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800613e:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006140:	ee07 4a90 	vmov	s15, r4
 8006144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8006148:	d003      	beq.n	8006152 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800614a:	2902      	cmp	r1, #2
 800614c:	d075      	beq.n	800623a <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800614e:	2900      	cmp	r1, #0
 8006150:	d04f      	beq.n	80061f2 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006152:	ee07 2a90 	vmov	s15, r2
 8006156:	eddf 6a41 	vldr	s13, [pc, #260]	; 800625c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800615a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8006164:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8006168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616c:	ee06 3a90 	vmov	s13, r3
 8006170:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8006174:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006178:	ee76 6a85 	vadd.f32	s13, s13, s10
 800617c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8006180:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006184:	4a34      	ldr	r2, [pc, #208]	; (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8006186:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800618a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800618c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006190:	ee07 3a10 	vmov	s14, r3
 8006194:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8006198:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800619a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800619e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a6:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80061aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80061ac:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80061b0:	ee07 3a10 	vmov	s14, r3
 80061b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80061b8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80061bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80061c8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80061ca:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80061da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061de:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80061e2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80061e6:	4770      	bx	lr
 80061e8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061ea:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80061ee:	6082      	str	r2, [r0, #8]
}
 80061f0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061f2:	6819      	ldr	r1, [r3, #0]
 80061f4:	0689      	lsls	r1, r1, #26
 80061f6:	d527      	bpl.n	8006248 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061f8:	681c      	ldr	r4, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061fa:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061fe:	4919      	ldr	r1, [pc, #100]	; (8006264 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006200:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006206:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800620a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800620e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8006212:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006216:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006218:	ee06 3a90 	vmov	s13, r3
 800621c:	ee05 1a90 	vmov	s11, r1
 8006220:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006224:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006228:	ee76 6a86 	vadd.f32	s13, s13, s12
 800622c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8006230:	eee7 6a05 	vfma.f32	s13, s14, s10
 8006234:	ee66 6a26 	vmul.f32	s13, s12, s13
 8006238:	e7a4      	b.n	8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800623a:	ee07 2a90 	vmov	s15, r2
 800623e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8006242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006246:	e78a      	b.n	800615e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006248:	ee07 2a90 	vmov	s15, r2
 800624c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800626c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8006250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006254:	e783      	b.n	800615e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8006256:	bf00      	nop
 8006258:	58024400 	.word	0x58024400
 800625c:	4a742400 	.word	0x4a742400
 8006260:	39000000 	.word	0x39000000
 8006264:	03d09000 	.word	0x03d09000
 8006268:	4b742400 	.word	0x4b742400
 800626c:	4c742400 	.word	0x4c742400

08006270 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006270:	4b4f      	ldr	r3, [pc, #316]	; (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8006272:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006274:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006276:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006278:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800627a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800627e:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006282:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8006284:	d05c      	beq.n	8006340 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006286:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800628a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800628e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006292:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8006296:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006298:	ee07 4a90 	vmov	s15, r4
 800629c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80062a0:	d003      	beq.n	80062aa <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 80062a2:	2902      	cmp	r1, #2
 80062a4:	d075      	beq.n	8006392 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 80062a6:	2900      	cmp	r1, #0
 80062a8:	d04f      	beq.n	800634a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062aa:	ee07 2a90 	vmov	s15, r2
 80062ae:	eddf 6a41 	vldr	s13, [pc, #260]	; 80063b4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80062b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80062bc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80063b8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80062c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c4:	ee06 3a90 	vmov	s13, r3
 80062c8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80062cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80062d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80062d4:	eee7 6a25 	vfma.f32	s13, s14, s11
 80062d8:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80062dc:	4a34      	ldr	r2, [pc, #208]	; (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 80062de:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80062e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80062e4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80062e8:	ee07 3a10 	vmov	s14, r3
 80062ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80062f0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80062f2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80062f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062fe:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006302:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006304:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006308:	ee07 3a10 	vmov	s14, r3
 800630c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006310:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800631c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006320:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006322:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006326:	ee07 3a90 	vmov	s15, r3
 800632a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800632e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006336:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800633a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800633e:	4770      	bx	lr
 8006340:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006342:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006346:	6082      	str	r2, [r0, #8]
}
 8006348:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800634a:	6819      	ldr	r1, [r3, #0]
 800634c:	0689      	lsls	r1, r1, #26
 800634e:	d527      	bpl.n	80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006350:	681c      	ldr	r4, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006352:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006356:	4919      	ldr	r1, [pc, #100]	; (80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006358:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800635e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006366:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80063b8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800636a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800636e:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006370:	ee06 3a90 	vmov	s13, r3
 8006374:	ee05 1a90 	vmov	s11, r1
 8006378:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800637c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006380:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006384:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8006388:	eee7 6a05 	vfma.f32	s13, s14, s10
 800638c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8006390:	e7a4      	b.n	80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006392:	ee07 2a90 	vmov	s15, r2
 8006396:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800639a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800639e:	e78a      	b.n	80062b6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063a0:	ee07 2a90 	vmov	s15, r2
 80063a4:	eddf 6a07 	vldr	s13, [pc, #28]	; 80063c4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 80063a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063ac:	e783      	b.n	80062b6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80063ae:	bf00      	nop
 80063b0:	58024400 	.word	0x58024400
 80063b4:	4a742400 	.word	0x4a742400
 80063b8:	39000000 	.word	0x39000000
 80063bc:	03d09000 	.word	0x03d09000
 80063c0:	4b742400 	.word	0x4b742400
 80063c4:	4c742400 	.word	0x4c742400

080063c8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063c8:	4b4f      	ldr	r3, [pc, #316]	; (8006508 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 80063ca:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80063ce:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80063d0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 80063d2:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80063d6:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063da:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 80063dc:	d05c      	beq.n	8006498 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063de:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80063e2:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063e6:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063ea:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80063ee:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063f0:	ee07 4a90 	vmov	s15, r4
 80063f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80063f8:	d07e      	beq.n	80064f8 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 80063fa:	2902      	cmp	r1, #2
 80063fc:	d075      	beq.n	80064ea <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 80063fe:	2900      	cmp	r1, #0
 8006400:	d04f      	beq.n	80064a2 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006402:	ee07 2a90 	vmov	s15, r2
 8006406:	eddf 6a41 	vldr	s13, [pc, #260]	; 800650c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800640a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8006414:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006510 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8006418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641c:	ee06 3a90 	vmov	s13, r3
 8006420:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8006424:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006428:	ee76 6a85 	vadd.f32	s13, s13, s10
 800642c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8006430:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006434:	4a34      	ldr	r2, [pc, #208]	; (8006508 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8006436:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800643a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800643c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006440:	ee07 3a10 	vmov	s14, r3
 8006444:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8006448:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800644a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800644e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006456:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800645a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800645c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006460:	ee07 3a10 	vmov	s14, r3
 8006464:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006468:	ee37 7a06 	vadd.f32	s14, s14, s12
 800646c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006474:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006478:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800647a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006486:	ee77 7a86 	vadd.f32	s15, s15, s12
 800648a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800648e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006492:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8006496:	4770      	bx	lr
 8006498:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800649a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800649e:	6082      	str	r2, [r0, #8]
}
 80064a0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064a2:	6819      	ldr	r1, [r3, #0]
 80064a4:	0689      	lsls	r1, r1, #26
 80064a6:	d5ac      	bpl.n	8006402 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064a8:	681c      	ldr	r4, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064aa:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064ae:	4919      	ldr	r1, [pc, #100]	; (8006514 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064b6:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064be:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8006510 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 80064c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064c6:	40d1      	lsrs	r1, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064c8:	ee06 3a90 	vmov	s13, r3
 80064cc:	ee05 1a90 	vmov	s11, r1
 80064d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80064d4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80064d8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80064dc:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80064e0:	eee7 6a05 	vfma.f32	s13, s14, s10
 80064e4:	ee66 6a26 	vmul.f32	s13, s12, s13
 80064e8:	e7a4      	b.n	8006434 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064ea:	ee07 2a90 	vmov	s15, r2
 80064ee:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006518 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 80064f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064f6:	e78a      	b.n	800640e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064f8:	ee07 2a90 	vmov	s15, r2
 80064fc:	eddf 6a07 	vldr	s13, [pc, #28]	; 800651c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8006500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006504:	e783      	b.n	800640e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8006506:	bf00      	nop
 8006508:	58024400 	.word	0x58024400
 800650c:	4c742400 	.word	0x4c742400
 8006510:	39000000 	.word	0x39000000
 8006514:	03d09000 	.word	0x03d09000
 8006518:	4b742400 	.word	0x4b742400
 800651c:	4a742400 	.word	0x4a742400

08006520 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006520:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8006524:	b500      	push	{lr}
 8006526:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006528:	d074      	beq.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800652a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800652e:	d02c      	beq.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006530:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006534:	f000 80cd 	beq.w	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006538:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800653c:	d07e      	beq.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800653e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006542:	d058      	beq.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006544:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8006548:	f000 8102 	beq.w	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800654c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8006550:	f000 810d 	beq.w	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006554:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8006558:	f000 80e1 	beq.w	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800655c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006560:	d138      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006562:	4b99      	ldr	r3, [pc, #612]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006566:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 800656a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800656e:	f000 808d 	beq.w	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8006572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006576:	f000 813d 	beq.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800657a:	bb5b      	cbnz	r3, 80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800657c:	4b92      	ldr	r3, [pc, #584]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8006584:	d043      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
            frequency = HSE_VALUE;
 8006586:	4891      	ldr	r0, [pc, #580]	; (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8006588:	e041      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800658a:	4a8f      	ldr	r2, [pc, #572]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800658c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800658e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8006592:	2b80      	cmp	r3, #128	; 0x80
 8006594:	f000 8098 	beq.w	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8006598:	d920      	bls.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800659a:	2bc0      	cmp	r3, #192	; 0xc0
 800659c:	d036      	beq.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800659e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a2:	d117      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80065a4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065a6:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80065a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065ac:	0749      	lsls	r1, r1, #29
 80065ae:	d502      	bpl.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 80ae 	beq.w	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065b6:	4a84      	ldr	r2, [pc, #528]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	05d0      	lsls	r0, r2, #23
 80065bc:	d503      	bpl.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80065be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065c2:	f000 80ff 	beq.w	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065c6:	4a80      	ldr	r2, [pc, #512]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80065c8:	6812      	ldr	r2, [r2, #0]
 80065ca:	0391      	lsls	r1, r2, #14
 80065cc:	d502      	bpl.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80065ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065d2:	d0d8      	beq.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      switch (srcclk)
 80065d4:	2000      	movs	r0, #0
}
 80065d6:	b005      	add	sp, #20
 80065d8:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d04c      	beq.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80065e0:	2b40      	cmp	r3, #64	; 0x40
 80065e2:	d1f7      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065e4:	6810      	ldr	r0, [r2, #0]
 80065e6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80065ea:	d010      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ec:	a801      	add	r0, sp, #4
 80065ee:	f7ff fd93 	bl	8006118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065f2:	9801      	ldr	r0, [sp, #4]
 80065f4:	e00b      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80065f6:	4a74      	ldr	r2, [pc, #464]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80065f8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80065fa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 80065fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006602:	d061      	beq.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8006604:	d937      	bls.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8006606:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800660a:	d179      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          frequency = EXTERNAL_CLOCK_VALUE;
 800660c:	4870      	ldr	r0, [pc, #448]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
}
 800660e:	b005      	add	sp, #20
 8006610:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006614:	4b6c      	ldr	r3, [pc, #432]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006618:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 800661c:	2b04      	cmp	r3, #4
 800661e:	d8d9      	bhi.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8006620:	a201      	add	r2, pc, #4	; (adr r2, 8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	0800668d 	.word	0x0800668d
 800662c:	080066b1 	.word	0x080066b1
 8006630:	0800669d 	.word	0x0800669d
 8006634:	0800660d 	.word	0x0800660d
 8006638:	08006699 	.word	0x08006699
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800663c:	4a62      	ldr	r2, [pc, #392]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800663e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006640:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8006644:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006648:	d03e      	beq.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800664a:	d937      	bls.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 800664c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006650:	d0dc      	beq.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006652:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006656:	d1bd      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006658:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800665a:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800665c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006660:	0752      	lsls	r2, r2, #29
 8006662:	d5a8      	bpl.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1a6      	bne.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006668:	4b57      	ldr	r3, [pc, #348]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800666a:	485a      	ldr	r0, [pc, #360]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006672:	40d8      	lsrs	r0, r3
 8006674:	e7cb      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 8006676:	2b00      	cmp	r3, #0
 8006678:	d146      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800667a:	6810      	ldr	r0, [r2, #0]
 800667c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8006680:	d0c5      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006682:	a801      	add	r0, sp, #4
 8006684:	f7ff fea0 	bl	80063c8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006688:	9802      	ldr	r0, [sp, #8]
 800668a:	e7c0      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800668c:	4b4e      	ldr	r3, [pc, #312]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8006694:	d0bb      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8006696:	e7f4      	b.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006698:	4a4b      	ldr	r2, [pc, #300]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800669a:	e783      	b.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800669c:	4b4a      	ldr	r3, [pc, #296]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800669e:	6818      	ldr	r0, [r3, #0]
 80066a0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80066a4:	d0b3      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066a6:	a801      	add	r0, sp, #4
 80066a8:	f7ff fde2 	bl	8006270 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066ac:	9801      	ldr	r0, [sp, #4]
 80066ae:	e7ae      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066b0:	4b45      	ldr	r3, [pc, #276]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80066b2:	6818      	ldr	r0, [r3, #0]
 80066b4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80066b8:	d0a9      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80066ba:	e797      	b.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      switch (saiclocksource)
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0dc      	beq.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80066c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066c4:	d08e      	beq.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80066c6:	e785      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066c8:	6810      	ldr	r0, [r2, #0]
 80066ca:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80066ce:	d09e      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80066d0:	e7e9      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80066d2:	4a3d      	ldr	r2, [pc, #244]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80066d4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80066d6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 80066da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066de:	d0f3      	beq.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80066e0:	d806      	bhi.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0c9      	beq.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80066e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066ea:	f43f af7b 	beq.w	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80066ee:	e771      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80066f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066f4:	d08a      	beq.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80066f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066fa:	f43f af53 	beq.w	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 80066fe:	e769      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      switch (srcclk)
 8006700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006704:	d0a8      	beq.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006706:	e765      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8006708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670c:	f43f af6a 	beq.w	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8006710:	e760      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006712:	6813      	ldr	r3, [r2, #0]
 8006714:	482f      	ldr	r0, [pc, #188]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006716:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800671a:	40d8      	lsrs	r0, r3
 800671c:	e777      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800671e:	4a2a      	ldr	r2, [pc, #168]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006720:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006722:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8006726:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800672a:	d06e      	beq.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800672c:	d83c      	bhi.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
 800672e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006732:	d05f      	beq.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8006734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006738:	d127      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800673a:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006742:	f43f af64 	beq.w	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006746:	a801      	add	r0, sp, #4
 8006748:	f7ff fd92 	bl	8006270 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800674c:	9802      	ldr	r0, [sp, #8]
 800674e:	e75e      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006750:	4a1d      	ldr	r2, [pc, #116]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006752:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8006758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800675c:	d040      	beq.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800675e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006762:	f43f af79 	beq.w	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006766:	2b00      	cmp	r3, #0
 8006768:	f47f af34 	bne.w	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800676c:	e73a      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800676e:	4b16      	ldr	r3, [pc, #88]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006770:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 8006772:	03d2      	lsls	r2, r2, #15
 8006774:	d58b      	bpl.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800677c:	f43f af47 	beq.w	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006780:	a801      	add	r0, sp, #4
 8006782:	f7ff fcc9 	bl	8006118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006786:	9803      	ldr	r0, [sp, #12]
 8006788:	e741      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 800678a:	2b00      	cmp	r3, #0
 800678c:	f47f af22 	bne.w	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006790:	f7fe fe46 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 8006794:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006796:	4a10      	ldr	r2, [pc, #64]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800679e:	5cd3      	ldrb	r3, [r2, r3]
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	40d8      	lsrs	r0, r3
          break;
 80067a6:	e732      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ac:	d004      	beq.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 80067ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067b2:	f43f aee3 	beq.w	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 80067b6:	e70d      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80067b8:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80067c0:	f43f af25 	beq.w	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
            frequency = CSI_VALUE;
 80067c4:	4805      	ldr	r0, [pc, #20]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80067c6:	e722      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80067c8:	58024400 	.word	0x58024400
 80067cc:	00f42400 	.word	0x00f42400
 80067d0:	00bb8000 	.word	0x00bb8000
 80067d4:	03d09000 	.word	0x03d09000
 80067d8:	08009238 	.word	0x08009238
 80067dc:	003d0900 	.word	0x003d0900
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067e0:	6810      	ldr	r0, [r2, #0]
 80067e2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80067e6:	f43f af12 	beq.w	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ea:	a801      	add	r0, sp, #4
 80067ec:	f7ff fd40 	bl	8006270 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80067f0:	9803      	ldr	r0, [sp, #12]
 80067f2:	e70c      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067f4:	4b08      	ldr	r3, [pc, #32]	; (8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80067fc:	f43f af07 	beq.w	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006800:	a801      	add	r0, sp, #4
 8006802:	f7ff fc89 	bl	8006118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006806:	9802      	ldr	r0, [sp, #8]
 8006808:	e701      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800680a:	6810      	ldr	r0, [r2, #0]
 800680c:	f010 0004 	ands.w	r0, r0, #4
 8006810:	f43f aefd 	beq.w	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8006814:	e728      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8006816:	bf00      	nop
 8006818:	58024400 	.word	0x58024400

0800681c <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800681c:	2800      	cmp	r0, #0
 800681e:	d039      	beq.n	8006894 <HAL_RNG_Init+0x78>
{
 8006820:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006822:	7a43      	ldrb	r3, [r0, #9]
 8006824:	4604      	mov	r4, r0
 8006826:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800682a:	b37b      	cbz	r3, 800688c <HAL_RNG_Init+0x70>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800682c:	6823      	ldr	r3, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800682e:	2202      	movs	r2, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8006830:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8006832:	7262      	strb	r2, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	f022 0220 	bic.w	r2, r2, #32
 800683a:	430a      	orrs	r2, r1
 800683c:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	f042 0204 	orr.w	r2, r2, #4
 8006844:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	0658      	lsls	r0, r3, #25
 800684a:	d503      	bpl.n	8006854 <HAL_RNG_Init+0x38>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800684c:	2304      	movs	r3, #4
    return HAL_ERROR;
 800684e:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8006850:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8006852:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8006854:	f7fb fbba 	bl	8001fcc <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006858:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800685a:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	0759      	lsls	r1, r3, #29
 8006860:	d50e      	bpl.n	8006880 <HAL_RNG_Init+0x64>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006862:	f7fb fbb3 	bl	8001fcc <HAL_GetTick>
 8006866:	1b43      	subs	r3, r0, r5
 8006868:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800686a:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800686c:	d9f6      	bls.n	800685c <HAL_RNG_Init+0x40>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	0752      	lsls	r2, r2, #29
 8006872:	d5f3      	bpl.n	800685c <HAL_RNG_Init+0x40>
        hrng->State = HAL_RNG_STATE_ERROR;
 8006874:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006876:	2302      	movs	r3, #2
        return HAL_ERROR;
 8006878:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 800687a:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800687c:	60e3      	str	r3, [r4, #12]
}
 800687e:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006880:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 8006882:	2201      	movs	r2, #1
  return HAL_OK;
 8006884:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8006886:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006888:	60e3      	str	r3, [r4, #12]
}
 800688a:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800688c:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800688e:	f7fb f8a7 	bl	80019e0 <HAL_RNG_MspInit>
 8006892:	e7cb      	b.n	800682c <HAL_RNG_Init+0x10>
    return HAL_ERROR;
 8006894:	2001      	movs	r0, #1
}
 8006896:	4770      	bx	lr

08006898 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800689a:	7a03      	ldrb	r3, [r0, #8]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d027      	beq.n	80068f0 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80068a0:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 80068a2:	2201      	movs	r2, #1
 80068a4:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
 80068aa:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 80068ac:	d006      	beq.n	80068bc <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80068ae:	2304      	movs	r3, #4
    status = HAL_ERROR;
 80068b0:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80068b2:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80068b4:	2300      	movs	r3, #0
 80068b6:	7223      	strb	r3, [r4, #8]

  return status;
}
 80068b8:	4630      	mov	r0, r6
 80068ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 80068bc:	2302      	movs	r3, #2
 80068be:	460d      	mov	r5, r1
 80068c0:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 80068c2:	f7fb fb83 	bl	8001fcc <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80068c6:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80068c8:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	07d2      	lsls	r2, r2, #31
 80068ce:	d412      	bmi.n	80068f6 <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80068d0:	f7fb fb7c 	bl	8001fcc <HAL_GetTick>
 80068d4:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80068d6:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80068d8:	2802      	cmp	r0, #2
 80068da:	d9f6      	bls.n	80068ca <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	f012 0201 	ands.w	r2, r2, #1
 80068e2:	d1f2      	bne.n	80068ca <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 80068e4:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80068e6:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 80068e8:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 80068ea:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80068ec:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 80068ee:	e7e3      	b.n	80068b8 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 80068f0:	2602      	movs	r6, #2
}
 80068f2:	4630      	mov	r0, r6
 80068f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 80068f6:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
 80068f8:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 80068fa:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
 80068fc:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 80068fe:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8006900:	7262      	strb	r2, [r4, #9]
 8006902:	e7d7      	b.n	80068b4 <HAL_RNG_GenerateRandomNumber+0x1c>

08006904 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006904:	b318      	cbz	r0, 800694e <HAL_SDRAM_Init+0x4a>
{
 8006906:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006908:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800690c:	4604      	mov	r4, r0
 800690e:	460d      	mov	r5, r1
 8006910:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006914:	b1b3      	cbz	r3, 8006944 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006916:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006918:	2302      	movs	r3, #2
 800691a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800691e:	f851 0b04 	ldr.w	r0, [r1], #4
 8006922:	f000 ff9d 	bl	8007860 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006926:	6862      	ldr	r2, [r4, #4]
 8006928:	4629      	mov	r1, r5
 800692a:	6820      	ldr	r0, [r4, #0]
 800692c:	f000 ffd6 	bl	80078dc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006930:	4a08      	ldr	r2, [pc, #32]	; (8006954 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006932:	2101      	movs	r1, #1

  return HAL_OK;
 8006934:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8006936:	6813      	ldr	r3, [r2, #0]
 8006938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800693c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800693e:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 8006942:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8006944:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8006948:	f7f9 ff3e 	bl	80007c8 <HAL_SDRAM_MspInit>
 800694c:	e7e3      	b.n	8006916 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800694e:	2001      	movs	r0, #1
}
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	52004000 	.word	0x52004000

08006958 <SPI_AbortTransfer>:
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006958:	6803      	ldr	r3, [r0, #0]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800695a:	2100      	movs	r1, #0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800695c:	4a17      	ldr	r2, [pc, #92]	; (80069bc <SPI_AbortTransfer+0x64>)
{
 800695e:	b410      	push	{r4}
  __HAL_SPI_DISABLE(hspi);
 8006960:	681c      	ldr	r4, [r3, #0]
 8006962:	f024 0401 	bic.w	r4, r4, #1
 8006966:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006968:	691c      	ldr	r4, [r3, #16]
 800696a:	4022      	ands	r2, r4
  hspi->RxXferCount = (uint16_t)0UL;
}
 800696c:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006970:	611a      	str	r2, [r3, #16]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006972:	699a      	ldr	r2, [r3, #24]
 8006974:	f042 0208 	orr.w	r2, r2, #8
 8006978:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800697a:	699a      	ldr	r2, [r3, #24]
 800697c:	f042 0210 	orr.w	r2, r2, #16
 8006980:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006988:	609a      	str	r2, [r3, #8]
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800698a:	699a      	ldr	r2, [r3, #24]
 800698c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006990:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006992:	699a      	ldr	r2, [r3, #24]
 8006994:	f042 0220 	orr.w	r2, r2, #32
 8006998:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800699a:	699a      	ldr	r2, [r3, #24]
 800699c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069a0:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80069a2:	699a      	ldr	r2, [r3, #24]
 80069a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069a8:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80069aa:	699a      	ldr	r2, [r3, #24]
 80069ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069b0:	619a      	str	r2, [r3, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 80069b2:	f8a0 1062 	strh.w	r1, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80069b6:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
}
 80069ba:	4770      	bx	lr
 80069bc:	fffffc90 	.word	0xfffffc90

080069c0 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 80069c0:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80069c2:	492c      	ldr	r1, [pc, #176]	; (8006a74 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 80069c4:	695a      	ldr	r2, [r3, #20]
{
 80069c6:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80069c8:	699c      	ldr	r4, [r3, #24]
 80069ca:	f044 0408 	orr.w	r4, r4, #8
 80069ce:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80069d0:	699c      	ldr	r4, [r3, #24]
 80069d2:	f044 0410 	orr.w	r4, r4, #16
 80069d6:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 80069d8:	681c      	ldr	r4, [r3, #0]
 80069da:	f024 0401 	bic.w	r4, r4, #1
 80069de:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80069e0:	691c      	ldr	r4, [r3, #16]
 80069e2:	4021      	ands	r1, r4
 80069e4:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80069e6:	6899      	ldr	r1, [r3, #8]
 80069e8:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80069ec:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069ee:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 80069f2:	2904      	cmp	r1, #4
 80069f4:	d001      	beq.n	80069fa <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80069f6:	0691      	lsls	r1, r2, #26
 80069f8:	d430      	bmi.n	8006a5c <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80069fa:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 80069fe:	2903      	cmp	r1, #3
 8006a00:	d001      	beq.n	8006a06 <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006a02:	0654      	lsls	r4, r2, #25
 8006a04:	d41f      	bmi.n	8006a46 <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006a06:	0591      	lsls	r1, r2, #22
 8006a08:	d509      	bpl.n	8006a1e <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a0a:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8006a0e:	f041 0101 	orr.w	r1, r1, #1
 8006a12:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a16:	6999      	ldr	r1, [r3, #24]
 8006a18:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006a1c:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006a1e:	05d2      	lsls	r2, r2, #23
 8006a20:	d509      	bpl.n	8006a36 <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006a22:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006a26:	f042 0208 	orr.w	r2, r2, #8
 8006a2a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a2e:	699a      	ldr	r2, [r3, #24]
 8006a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a34:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006a36:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8006a38:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8006a3c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006a40:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8006a44:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a46:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8006a4a:	f041 0104 	orr.w	r1, r1, #4
 8006a4e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a52:	6999      	ldr	r1, [r3, #24]
 8006a54:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006a58:	6199      	str	r1, [r3, #24]
 8006a5a:	e7d4      	b.n	8006a06 <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006a5c:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8006a60:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006a64:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006a68:	6999      	ldr	r1, [r3, #24]
 8006a6a:	f041 0120 	orr.w	r1, r1, #32
 8006a6e:	6199      	str	r1, [r3, #24]
 8006a70:	e7c3      	b.n	80069fa <SPI_CloseTransfer+0x3a>
 8006a72:	bf00      	nop
 8006a74:	fffffc90 	.word	0xfffffc90

08006a78 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	f000 80ac 	beq.w	8006bd6 <HAL_SPI_Init+0x15e>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006a7e:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a80:	2100      	movs	r1, #0
{
 8006a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006a84:	4b56      	ldr	r3, [pc, #344]	; (8006be0 <HAL_SPI_Init+0x168>)
 8006a86:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a88:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d016      	beq.n	8006abc <HAL_SPI_Init+0x44>
 8006a8e:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d012      	beq.n	8006abc <HAL_SPI_Init+0x44>
 8006a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a9a:	68c0      	ldr	r0, [r0, #12]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	f000 8092 	beq.w	8006bc6 <HAL_SPI_Init+0x14e>
 8006aa2:	280f      	cmp	r0, #15
 8006aa4:	d808      	bhi.n	8006ab8 <HAL_SPI_Init+0x40>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006aa6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006aa8:	f100 0308 	add.w	r3, r0, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006aac:	094d      	lsrs	r5, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8006aae:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8006ab0:	fb05 3303 	mla	r3, r5, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d915      	bls.n	8006ae4 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 8006ab8:	2001      	movs	r0, #1
}
 8006aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006abc:	68e0      	ldr	r0, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006abe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8006ac0:	f100 0308 	add.w	r3, r0, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ac4:	4e46      	ldr	r6, [pc, #280]	; (8006be0 <HAL_SPI_Init+0x168>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006ac6:	094d      	lsrs	r5, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8006ac8:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8006aca:	fb05 3303 	mla	r3, r5, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ace:	4d45      	ldr	r5, [pc, #276]	; (8006be4 <HAL_SPI_Init+0x16c>)
 8006ad0:	42aa      	cmp	r2, r5
 8006ad2:	bf18      	it	ne
 8006ad4:	42b2      	cmpne	r2, r6
 8006ad6:	d003      	beq.n	8006ae0 <HAL_SPI_Init+0x68>
 8006ad8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006adc:	42aa      	cmp	r2, r5
 8006ade:	d101      	bne.n	8006ae4 <HAL_SPI_Init+0x6c>
 8006ae0:	2b10      	cmp	r3, #16
 8006ae2:	d8e9      	bhi.n	8006ab8 <HAL_SPI_Init+0x40>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ae4:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006ae8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d060      	beq.n	8006bb2 <HAL_SPI_Init+0x13a>
 8006af0:	2700      	movs	r7, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8006af2:	2302      	movs	r3, #2
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006af4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 8006af6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8006afa:	6813      	ldr	r3, [r2, #0]
 8006afc:	f023 0301 	bic.w	r3, r3, #1
 8006b00:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006b02:	69a3      	ldr	r3, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006b04:	6895      	ldr	r5, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006b06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006b0a:	f405 1cf8 	and.w	ip, r5, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006b0e:	6865      	ldr	r5, [r4, #4]
 8006b10:	d040      	beq.n	8006b94 <HAL_SPI_Init+0x11c>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006b12:	4339      	orrs	r1, r7
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006b14:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8006b16:	433b      	orrs	r3, r7
 8006b18:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006b1a:	433b      	orrs	r3, r7
 8006b1c:	6927      	ldr	r7, [r4, #16]
 8006b1e:	433b      	orrs	r3, r7
 8006b20:	6967      	ldr	r7, [r4, #20]
 8006b22:	433b      	orrs	r3, r7
 8006b24:	6a27      	ldr	r7, [r4, #32]
 8006b26:	433b      	orrs	r3, r7
 8006b28:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8006b2a:	433b      	orrs	r3, r7
 8006b2c:	68a7      	ldr	r7, [r4, #8]
 8006b2e:	433b      	orrs	r3, r7
 8006b30:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8006b32:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006b34:	69e7      	ldr	r7, [r4, #28]
 8006b36:	4339      	orrs	r1, r7
 8006b38:	4308      	orrs	r0, r1
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006b3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006b3c:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006b3e:	ea40 000c 	orr.w	r0, r0, ip
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006b42:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006b44:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006b46:	4333      	orrs	r3, r6
 8006b48:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006b4a:	b9b5      	cbnz	r5, 8006b7a <HAL_SPI_Init+0x102>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006b4c:	6893      	ldr	r3, [r2, #8]
 8006b4e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8006b52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006b56:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006b58:	6893      	ldr	r3, [r2, #8]
 8006b5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b62:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b64:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006b66:	f023 0301 	bic.w	r3, r3, #1
 8006b6a:	6513      	str	r3, [r2, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b6c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8006b6e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b70:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006b74:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8006b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b7a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006b7c:	f023 0301 	bic.w	r3, r3, #1
 8006b80:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006b82:	026b      	lsls	r3, r5, #9
 8006b84:	d5f2      	bpl.n	8006b6c <HAL_SPI_Init+0xf4>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006b86:	68d3      	ldr	r3, [r2, #12]
 8006b88:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006b8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b8e:	430b      	orrs	r3, r1
 8006b90:	60d3      	str	r3, [r2, #12]
 8006b92:	e7eb      	b.n	8006b6c <HAL_SPI_Init+0xf4>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006b94:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8006b98:	d01f      	beq.n	8006bda <HAL_SPI_Init+0x162>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006b9a:	2d00      	cmp	r5, #0
 8006b9c:	d1b9      	bne.n	8006b12 <HAL_SPI_Init+0x9a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006b9e:	f1b6 5f80 	cmp.w	r6, #268435456	; 0x10000000
 8006ba2:	d1b6      	bne.n	8006b12 <HAL_SPI_Init+0x9a>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006ba4:	f8d2 e000 	ldr.w	lr, [r2]
 8006ba8:	f44e 5e80 	orr.w	lr, lr, #4096	; 0x1000
 8006bac:	f8c2 e000 	str.w	lr, [r2]
 8006bb0:	e7af      	b.n	8006b12 <HAL_SPI_Init+0x9a>
    HAL_SPI_MspInit(hspi);
 8006bb2:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006bb4:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8006bb8:	f7fa ff6a 	bl	8001a90 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8006bbc:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006bbe:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006bc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006bc2:	68e0      	ldr	r0, [r4, #12]
 8006bc4:	e795      	b.n	8006af2 <HAL_SPI_Init+0x7a>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006bc6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8006bc8:	f100 0308 	add.w	r3, r0, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006bcc:	094d      	lsrs	r5, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8006bce:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8006bd0:	fb05 3303 	mla	r3, r5, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006bd4:	e784      	b.n	8006ae0 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 8006bd6:	2001      	movs	r0, #1
}
 8006bd8:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006bda:	2e00      	cmp	r6, #0
 8006bdc:	d0e2      	beq.n	8006ba4 <HAL_SPI_Init+0x12c>
 8006bde:	e798      	b.n	8006b12 <HAL_SPI_Init+0x9a>
 8006be0:	40013000 	.word	0x40013000
 8006be4:	40003800 	.word	0x40003800

08006be8 <HAL_SPI_TransmitReceive_DMA>:
{
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8006bec:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	f000 8089 	beq.w	8006d08 <HAL_SPI_TransmitReceive_DMA+0x120>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tmp_state   = hspi->State;
 8006bfe:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c02:	2b01      	cmp	r3, #1
  tmp_state   = hspi->State;
 8006c04:	b2d8      	uxtb	r0, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c06:	d008      	beq.n	8006c1a <HAL_SPI_TransmitReceive_DMA+0x32>
 8006c08:	6863      	ldr	r3, [r4, #4]
 8006c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c0e:	d150      	bne.n	8006cb2 <HAL_SPI_TransmitReceive_DMA+0xca>
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006c10:	68a3      	ldr	r3, [r4, #8]
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d14d      	bne.n	8006cb2 <HAL_SPI_TransmitReceive_DMA+0xca>
 8006c16:	2804      	cmp	r0, #4
 8006c18:	d14b      	bne.n	8006cb2 <HAL_SPI_TransmitReceive_DMA+0xca>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006c1a:	2d00      	cmp	r5, #0
 8006c1c:	bf18      	it	ne
 8006c1e:	2a00      	cmpne	r2, #0
 8006c20:	d04c      	beq.n	8006cbc <HAL_SPI_TransmitReceive_DMA+0xd4>
 8006c22:	2900      	cmp	r1, #0
 8006c24:	d04a      	beq.n	8006cbc <HAL_SPI_TransmitReceive_DMA+0xd4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c26:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d002      	beq.n	8006c34 <HAL_SPI_TransmitReceive_DMA+0x4c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c2e:	2305      	movs	r3, #5
 8006c30:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c34:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c36:	65e1      	str	r1, [r4, #92]	; 0x5c
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006c38:	6821      	ldr	r1, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c3a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxXferCount = Size;
 8006c3e:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->RxXferCount = Size;
 8006c42:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 8006c46:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c4a:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006c4c:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->TxISR       = NULL;
 8006c50:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006c54:	688b      	ldr	r3, [r1, #8]
 8006c56:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006c5a:	608b      	str	r3, [r1, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006c5c:	68e3      	ldr	r3, [r4, #12]
 8006c5e:	2b0f      	cmp	r3, #15
 8006c60:	d931      	bls.n	8006cc6 <HAL_SPI_TransmitReceive_DMA+0xde>
 8006c62:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006c64:	6983      	ldr	r3, [r0, #24]
 8006c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c6a:	d127      	bne.n	8006cbc <HAL_SPI_TransmitReceive_DMA+0xd4>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006c6c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	f000 8096 	beq.w	8006da2 <HAL_SPI_TransmitReceive_DMA+0x1ba>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006c76:	4b60      	ldr	r3, [pc, #384]	; (8006df8 <HAL_SPI_TransmitReceive_DMA+0x210>)
 8006c78:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006c7a:	4b60      	ldr	r3, [pc, #384]	; (8006dfc <HAL_SPI_TransmitReceive_DMA+0x214>)
 8006c7c:	63c3      	str	r3, [r0, #60]	; 0x3c
                                 hspi->RxXferCount))
 8006c7e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  hspi->hdmarx->XferAbortCallback = NULL;
 8006c82:	2700      	movs	r7, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006c84:	4e5e      	ldr	r6, [pc, #376]	; (8006e00 <HAL_SPI_TransmitReceive_DMA+0x218>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8006c86:	3130      	adds	r1, #48	; 0x30
 8006c88:	b29b      	uxth	r3, r3
  hspi->hdmarx->XferAbortCallback = NULL;
 8006c8a:	6507      	str	r7, [r0, #80]	; 0x50
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006c8c:	64c6      	str	r6, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8006c8e:	f7fc fcd7 	bl	8003640 <HAL_DMA_Start_IT>
 8006c92:	4606      	mov	r6, r0
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d039      	beq.n	8006d0c <HAL_SPI_TransmitReceive_DMA+0x124>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006c98:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006c9c:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 8006c9e:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ca2:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 8006ca6:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ca8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006cac:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
}
 8006cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 8006cb2:	2300      	movs	r3, #0
    return errorcode;
 8006cb4:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 8006cb6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 8006cbc:	2300      	movs	r3, #0
    return errorcode;
 8006cbe:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8006cc0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006cc6:	2b07      	cmp	r3, #7
 8006cc8:	d870      	bhi.n	8006dac <HAL_SPI_TransmitReceive_DMA+0x1c4>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006cca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd2:	d051      	beq.n	8006d78 <HAL_SPI_TransmitReceive_DMA+0x190>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cd8:	d106      	bne.n	8006ce8 <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8006cda:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	3303      	adds	r3, #3
 8006ce2:	089b      	lsrs	r3, r3, #2
 8006ce4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006ce8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006cea:	6983      	ldr	r3, [r0, #24]
 8006cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf0:	d075      	beq.n	8006dde <HAL_SPI_TransmitReceive_DMA+0x1f6>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006cf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf6:	d1b9      	bne.n	8006c6c <HAL_SPI_TransmitReceive_DMA+0x84>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8006cf8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3303      	adds	r3, #3
 8006d00:	089b      	lsrs	r3, r3, #2
 8006d02:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8006d06:	e7b1      	b.n	8006c6c <HAL_SPI_TransmitReceive_DMA+0x84>
  __HAL_LOCK(hspi);
 8006d08:	2002      	movs	r0, #2
}
 8006d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006d0c:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006d0e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006d10:	6893      	ldr	r3, [r2, #8]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8006d12:	3220      	adds	r2, #32
 8006d14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d1a:	f842 3c18 	str.w	r3, [r2, #-24]
                                 hspi->TxXferCount))
 8006d1e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006d22:	e9c0 660f 	strd	r6, r6, [r0, #60]	; 0x3c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8006d26:	b29b      	uxth	r3, r3
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006d28:	e9c0 6613 	strd	r6, r6, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8006d2c:	f7fc fc88 	bl	8003640 <HAL_DMA_Start_IT>
 8006d30:	bb50      	cbnz	r0, 8006d88 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006d32:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006d3a:	6823      	ldr	r3, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006d3c:	d057      	beq.n	8006dee <HAL_SPI_TransmitReceive_DMA+0x206>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006d3e:	6859      	ldr	r1, [r3, #4]
 8006d40:	4a30      	ldr	r2, [pc, #192]	; (8006e04 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 8006d42:	400a      	ands	r2, r1
 8006d44:	432a      	orrs	r2, r5
 8006d46:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006d48:	689a      	ldr	r2, [r3, #8]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d4a:	6861      	ldr	r1, [r4, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006d4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d50:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006d54:	609a      	str	r2, [r3, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8006d5c:	611a      	str	r2, [r3, #16]
  __HAL_SPI_ENABLE(hspi);
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	f042 0201 	orr.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d66:	d103      	bne.n	8006d70 <HAL_SPI_TransmitReceive_DMA+0x188>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d6e:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8006d70:	2300      	movs	r3, #0
 8006d72:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006d78:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3301      	adds	r3, #1
 8006d80:	085b      	lsrs	r3, r3, #1
 8006d82:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006d86:	e7af      	b.n	8006ce8 <HAL_SPI_TransmitReceive_DMA+0x100>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d88:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006d8c:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 8006d8e:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d92:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 8006d96:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d98:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006d9c:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
}
 8006da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006da2:	4b19      	ldr	r3, [pc, #100]	; (8006e08 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8006da4:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006da6:	4b19      	ldr	r3, [pc, #100]	; (8006e0c <HAL_SPI_TransmitReceive_DMA+0x224>)
 8006da8:	63c3      	str	r3, [r0, #60]	; 0x3c
 8006daa:	e768      	b.n	8006c7e <HAL_SPI_TransmitReceive_DMA+0x96>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006dac:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006dae:	6983      	ldr	r3, [r0, #24]
 8006db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db4:	d003      	beq.n	8006dbe <HAL_SPI_TransmitReceive_DMA+0x1d6>
 8006db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dba:	f47f af7f 	bne.w	8006cbc <HAL_SPI_TransmitReceive_DMA+0xd4>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006dbe:	6fa6      	ldr	r6, [r4, #120]	; 0x78
 8006dc0:	69b6      	ldr	r6, [r6, #24]
 8006dc2:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 8006dc6:	d106      	bne.n	8006dd6 <HAL_SPI_TransmitReceive_DMA+0x1ee>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006dc8:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8006dcc:	b2b6      	uxth	r6, r6
 8006dce:	3601      	adds	r6, #1
 8006dd0:	0876      	lsrs	r6, r6, #1
 8006dd2:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dda:	f47f af47 	bne.w	8006c6c <HAL_SPI_TransmitReceive_DMA+0x84>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006dde:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3301      	adds	r3, #1
 8006de6:	085b      	lsrs	r3, r3, #1
 8006de8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8006dec:	e73e      	b.n	8006c6c <HAL_SPI_TransmitReceive_DMA+0x84>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006dee:	6859      	ldr	r1, [r3, #4]
 8006df0:	4a04      	ldr	r2, [pc, #16]	; (8006e04 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 8006df2:	400a      	ands	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
 8006df6:	e7a7      	b.n	8006d48 <HAL_SPI_TransmitReceive_DMA+0x160>
 8006df8:	08006f61 	.word	0x08006f61
 8006dfc:	08006f29 	.word	0x08006f29
 8006e00:	08006f71 	.word	0x08006f71
 8006e04:	ffff0000 	.word	0xffff0000
 8006e08:	08006f55 	.word	0x08006f55
 8006e0c:	08006f01 	.word	0x08006f01

08006e10 <HAL_SPI_Abort>:
  __HAL_LOCK(hspi);
 8006e10:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d069      	beq.n	8006eec <HAL_SPI_Abort+0xdc>
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 8006e18:	4b35      	ldr	r3, [pc, #212]	; (8006ef0 <HAL_SPI_Abort+0xe0>)
 8006e1a:	2164      	movs	r1, #100	; 0x64
 8006e1c:	4a35      	ldr	r2, [pc, #212]	; (8006ef4 <HAL_SPI_Abort+0xe4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	fba2 2303 	umull	r2, r3, r2, r3
{
 8006e24:	b510      	push	{r4, lr}
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 8006e26:	0a5b      	lsrs	r3, r3, #9
 8006e28:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8006e2a:	2001      	movs	r0, #1
{
 8006e2c:	b082      	sub	sp, #8
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 8006e2e:	fb01 f303 	mul.w	r3, r1, r3
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8006e32:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hspi);
 8006e34:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_ABORT;
 8006e38:	2007      	movs	r0, #7
 8006e3a:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 8006e3e:	9301      	str	r3, [sp, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8006e40:	6813      	ldr	r3, [r2, #0]
 8006e42:	059b      	lsls	r3, r3, #22
 8006e44:	d513      	bpl.n	8006e6e <HAL_SPI_Abort+0x5e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 8006e46:	6813      	ldr	r3, [r2, #0]
 8006e48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	e002      	b.n	8006e56 <HAL_SPI_Abort+0x46>
    } while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 8006e50:	6813      	ldr	r3, [r2, #0]
 8006e52:	0598      	lsls	r0, r3, #22
 8006e54:	d50b      	bpl.n	8006e6e <HAL_SPI_Abort+0x5e>
      count--;
 8006e56:	9b01      	ldr	r3, [sp, #4]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 8006e5c:	9b01      	ldr	r3, [sp, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f6      	bne.n	8006e50 <HAL_SPI_Abort+0x40>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e62:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e6a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8006e6e:	6893      	ldr	r3, [r2, #8]
 8006e70:	0419      	lsls	r1, r3, #16
 8006e72:	d507      	bpl.n	8006e84 <HAL_SPI_Abort+0x74>
    if (hspi->hdmatx != NULL)
 8006e74:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006e76:	b128      	cbz	r0, 8006e84 <HAL_SPI_Abort+0x74>
      hspi->hdmatx->XferAbortCallback = NULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8006e7c:	f7fc fd78 	bl	8003970 <HAL_DMA_Abort>
 8006e80:	bb50      	cbnz	r0, 8006ed8 <HAL_SPI_Abort+0xc8>
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8006e82:	6822      	ldr	r2, [r4, #0]
 8006e84:	6893      	ldr	r3, [r2, #8]
 8006e86:	045b      	lsls	r3, r3, #17
 8006e88:	d412      	bmi.n	8006eb0 <HAL_SPI_Abort+0xa0>
  SPI_AbortTransfer(hspi);
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f7ff fd64 	bl	8006958 <SPI_AbortTransfer>
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8006e90:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006e94:	2b40      	cmp	r3, #64	; 0x40
 8006e96:	d01d      	beq.n	8006ed4 <HAL_SPI_Abort+0xc4>
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e98:	2300      	movs	r3, #0
  errorcode = HAL_OK;
 8006e9a:	4618      	mov	r0, r3
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e9c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8006ea0:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 8006ea2:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 8006ea4:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 8006ea8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8006eac:	b002      	add	sp, #8
 8006eae:	bd10      	pop	{r4, pc}
    if (hspi->hdmarx != NULL)
 8006eb0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d0e9      	beq.n	8006e8a <HAL_SPI_Abort+0x7a>
      hspi->hdmarx->XferAbortCallback = NULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8006eba:	f7fc fd59 	bl	8003970 <HAL_DMA_Abort>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d0e3      	beq.n	8006e8a <HAL_SPI_Abort+0x7a>
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006ec2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006ec4:	f7fd fae6 	bl	8004494 <HAL_DMA_GetError>
 8006ec8:	2820      	cmp	r0, #32
 8006eca:	d1de      	bne.n	8006e8a <HAL_SPI_Abort+0x7a>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8006ecc:	2340      	movs	r3, #64	; 0x40
 8006ece:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006ed2:	e7da      	b.n	8006e8a <HAL_SPI_Abort+0x7a>
    errorcode = HAL_ERROR;
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	e7e3      	b.n	8006ea0 <HAL_SPI_Abort+0x90>
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006ed8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006eda:	f7fd fadb 	bl	8004494 <HAL_DMA_GetError>
 8006ede:	2820      	cmp	r0, #32
 8006ee0:	d1cf      	bne.n	8006e82 <HAL_SPI_Abort+0x72>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8006ee2:	2340      	movs	r3, #64	; 0x40
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8006ee4:	6822      	ldr	r2, [r4, #0]
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8006ee6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006eea:	e7cb      	b.n	8006e84 <HAL_SPI_Abort+0x74>
  __HAL_LOCK(hspi);
 8006eec:	2002      	movs	r0, #2
}
 8006eee:	4770      	bx	lr
 8006ef0:	20000034 	.word	0x20000034
 8006ef4:	057619f1 	.word	0x057619f1

08006ef8 <HAL_SPI_TxCpltCallback>:
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop

08006efc <HAL_SPI_RxCpltCallback>:
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop

08006f00 <SPI_DMAReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f00:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006f02:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006f04:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006f08:	2b07      	cmp	r3, #7
 8006f0a:	d009      	beq.n	8006f20 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006f0c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f14:	d005      	beq.n	8006f22 <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006f16:	6802      	ldr	r2, [r0, #0]
 8006f18:	6913      	ldr	r3, [r2, #16]
 8006f1a:	f043 0308 	orr.w	r3, r3, #8
 8006f1e:	6113      	str	r3, [r2, #16]
}
 8006f20:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8006f22:	f7ff ffeb 	bl	8006efc <HAL_SPI_RxCpltCallback>
}
 8006f26:	bd08      	pop	{r3, pc}

08006f28 <SPI_DMATransmitReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f28:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006f2a:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006f2c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006f30:	2b07      	cmp	r3, #7
 8006f32:	d009      	beq.n	8006f48 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006f34:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f3c:	d005      	beq.n	8006f4a <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006f3e:	6802      	ldr	r2, [r0, #0]
 8006f40:	6913      	ldr	r3, [r2, #16]
 8006f42:	f043 0308 	orr.w	r3, r3, #8
 8006f46:	6113      	str	r3, [r2, #16]
}
 8006f48:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 8006f4a:	f7fa fb87 	bl	800165c <HAL_SPI_TxRxCpltCallback>
}
 8006f4e:	bd08      	pop	{r3, pc}

08006f50 <HAL_SPI_RxHalfCpltCallback>:
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop

08006f54 <SPI_DMAHalfReceiveCplt>:
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006f54:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006f56:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006f58:	f7ff fffa 	bl	8006f50 <HAL_SPI_RxHalfCpltCallback>
}
 8006f5c:	bd08      	pop	{r3, pc}
 8006f5e:	bf00      	nop

08006f60 <SPI_DMAHalfTransmitReceiveCplt>:
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006f60:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006f62:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006f64:	f7fa fbfe 	bl	8001764 <HAL_SPI_TxRxHalfCpltCallback>
}
 8006f68:	bd08      	pop	{r3, pc}
 8006f6a:	bf00      	nop

08006f6c <HAL_SPI_ErrorCallback>:
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop

08006f70 <SPI_DMAError>:
{
 8006f70:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f72:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006f74:	f7fd fa8e 	bl	8004494 <HAL_DMA_GetError>
 8006f78:	2802      	cmp	r0, #2
 8006f7a:	d100      	bne.n	8006f7e <SPI_DMAError+0xe>
}
 8006f7c:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 8006f7e:	6823      	ldr	r3, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006f80:	4930      	ldr	r1, [pc, #192]	; (8007044 <SPI_DMAError+0xd4>)
  uint32_t itflag = hspi->Instance->SR;
 8006f82:	695a      	ldr	r2, [r3, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006f84:	6998      	ldr	r0, [r3, #24]
 8006f86:	f040 0008 	orr.w	r0, r0, #8
 8006f8a:	6198      	str	r0, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006f8c:	6998      	ldr	r0, [r3, #24]
 8006f8e:	f040 0010 	orr.w	r0, r0, #16
 8006f92:	6198      	str	r0, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 8006f94:	6818      	ldr	r0, [r3, #0]
 8006f96:	f020 0001 	bic.w	r0, r0, #1
 8006f9a:	6018      	str	r0, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006f9c:	6918      	ldr	r0, [r3, #16]
 8006f9e:	4001      	ands	r1, r0
 8006fa0:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006fa2:	6899      	ldr	r1, [r3, #8]
 8006fa4:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8006fa8:	6099      	str	r1, [r3, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006faa:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8006fae:	2904      	cmp	r1, #4
 8006fb0:	d001      	beq.n	8006fb6 <SPI_DMAError+0x46>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006fb2:	0691      	lsls	r1, r2, #26
 8006fb4:	d43a      	bmi.n	800702c <SPI_DMAError+0xbc>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006fb6:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8006fba:	2903      	cmp	r1, #3
 8006fbc:	d001      	beq.n	8006fc2 <SPI_DMAError+0x52>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006fbe:	0650      	lsls	r0, r2, #25
 8006fc0:	d429      	bmi.n	8007016 <SPI_DMAError+0xa6>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006fc2:	0591      	lsls	r1, r2, #22
 8006fc4:	d509      	bpl.n	8006fda <SPI_DMAError+0x6a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006fc6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8006fca:	f041 0101 	orr.w	r1, r1, #1
 8006fce:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006fd2:	6999      	ldr	r1, [r3, #24]
 8006fd4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006fd8:	6199      	str	r1, [r3, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006fda:	05d2      	lsls	r2, r2, #23
 8006fdc:	d509      	bpl.n	8006ff2 <SPI_DMAError+0x82>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006fde:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006fe2:	f042 0208 	orr.w	r2, r2, #8
 8006fe6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006fea:	699a      	ldr	r2, [r3, #24]
 8006fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ff0:	619a      	str	r2, [r3, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 8006ff2:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 8006ff4:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 8006ff6:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 8006ff8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006ffc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007000:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007004:	f043 0310 	orr.w	r3, r3, #16
 8007008:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800700c:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8007010:	f7ff ffac 	bl	8006f6c <HAL_SPI_ErrorCallback>
}
 8007014:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007016:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800701a:	f041 0104 	orr.w	r1, r1, #4
 800701e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007022:	6999      	ldr	r1, [r3, #24]
 8007024:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007028:	6199      	str	r1, [r3, #24]
 800702a:	e7ca      	b.n	8006fc2 <SPI_DMAError+0x52>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800702c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007030:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007034:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007038:	6999      	ldr	r1, [r3, #24]
 800703a:	f041 0120 	orr.w	r1, r1, #32
 800703e:	6199      	str	r1, [r3, #24]
 8007040:	e7b9      	b.n	8006fb6 <SPI_DMAError+0x46>
 8007042:	bf00      	nop
 8007044:	fffffc90 	.word	0xfffffc90

08007048 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 8007048:	6803      	ldr	r3, [r0, #0]
 800704a:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800704c:	695a      	ldr	r2, [r3, #20]
{
 800704e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t trigger  = itsource & itflag;
 8007052:	ea01 0502 	and.w	r5, r1, r2
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007056:	689f      	ldr	r7, [r3, #8]
{
 8007058:	4604      	mov	r4, r0
  HAL_SPI_StateTypeDef State = hspi->State;
 800705a:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800705e:	f005 0c64 	and.w	ip, r5, #100	; 0x64
 8007062:	f1bc 0f04 	cmp.w	ip, #4
 8007066:	d02f      	beq.n	80070c8 <HAL_SPI_IRQHandler+0x80>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007068:	f005 0045 	and.w	r0, r5, #69	; 0x45
 800706c:	2801      	cmp	r0, #1
 800706e:	d034      	beq.n	80070da <HAL_SPI_IRQHandler+0x92>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007070:	f005 0026 	and.w	r0, r5, #38	; 0x26
 8007074:	2802      	cmp	r0, #2
 8007076:	f000 80df 	beq.w	8007238 <HAL_SPI_IRQHandler+0x1f0>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800707a:	0728      	lsls	r0, r5, #28
 800707c:	d570      	bpl.n	8007160 <HAL_SPI_IRQHandler+0x118>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800707e:	699a      	ldr	r2, [r3, #24]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 8007080:	f417 4f40 	tst.w	r7, #49152	; 0xc000
 8007084:	b2f6      	uxtb	r6, r6
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007086:	f042 0208 	orr.w	r2, r2, #8
 800708a:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800708c:	699a      	ldr	r2, [r3, #24]
 800708e:	f042 0210 	orr.w	r2, r2, #16
 8007092:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007094:	699a      	ldr	r2, [r3, #24]
 8007096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800709a:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800709c:	691a      	ldr	r2, [r3, #16]
 800709e:	f022 0208 	bic.w	r2, r2, #8
 80070a2:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 80070a4:	d023      	beq.n	80070ee <HAL_SPI_IRQHandler+0xa6>
 80070a6:	2e04      	cmp	r6, #4
 80070a8:	f000 80df 	beq.w	800726a <HAL_SPI_IRQHandler+0x222>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 80070ac:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80070ae:	69d2      	ldr	r2, [r2, #28]
 80070b0:	b1ea      	cbz	r2, 80070ee <HAL_SPI_IRQHandler+0xa6>
 80070b2:	2e03      	cmp	r6, #3
 80070b4:	d050      	beq.n	8007158 <HAL_SPI_IRQHandler+0x110>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 80070b6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80070b8:	69d2      	ldr	r2, [r2, #28]
 80070ba:	b1c2      	cbz	r2, 80070ee <HAL_SPI_IRQHandler+0xa6>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80070bc:	2e05      	cmp	r6, #5
 80070be:	d114      	bne.n	80070ea <HAL_SPI_IRQHandler+0xa2>
      HAL_SPI_TxRxCpltCallback(hspi);
 80070c0:	4620      	mov	r0, r4
 80070c2:	f7fa facb 	bl	800165c <HAL_SPI_TxRxCpltCallback>
 80070c6:	e010      	b.n	80070ea <HAL_SPI_IRQHandler+0xa2>
    hspi->TxISR(hspi);
 80070c8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80070ca:	4798      	blx	r3
    hspi->RxISR(hspi);
 80070cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80070ce:	4620      	mov	r0, r4
 80070d0:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80070d2:	f005 0345 	and.w	r3, r5, #69	; 0x45
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d102      	bne.n	80070e0 <HAL_SPI_IRQHandler+0x98>
    hspi->RxISR(hspi);
 80070da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80070dc:	4620      	mov	r0, r4
 80070de:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80070e0:	f005 0526 	and.w	r5, r5, #38	; 0x26
 80070e4:	2d02      	cmp	r5, #2
 80070e6:	f000 80a7 	beq.w	8007238 <HAL_SPI_IRQHandler+0x1f0>
}
 80070ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 80070f4:	d11f      	bne.n	8007136 <HAL_SPI_IRQHandler+0xee>
        while (hspi->RxXferCount != 0UL)
 80070f6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80070fa:	b292      	uxth	r2, r2
 80070fc:	b1da      	cbz	r2, 8007136 <HAL_SPI_IRQHandler+0xee>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80070fe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007100:	e00e      	b.n	8007120 <HAL_SPI_IRQHandler+0xd8>
 8007102:	6822      	ldr	r2, [r4, #0]
 8007104:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007106:	f841 2b04 	str.w	r2, [r1], #4
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800710a:	6661      	str	r1, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800710c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8007110:	3a01      	subs	r2, #1
 8007112:	b292      	uxth	r2, r2
 8007114:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007118:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800711c:	b292      	uxth	r2, r2
 800711e:	b152      	cbz	r2, 8007136 <HAL_SPI_IRQHandler+0xee>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007120:	68e2      	ldr	r2, [r4, #12]
 8007122:	2a0f      	cmp	r2, #15
 8007124:	d8ed      	bhi.n	8007102 <HAL_SPI_IRQHandler+0xba>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007126:	2a07      	cmp	r2, #7
 8007128:	f240 8092 	bls.w	8007250 <HAL_SPI_IRQHandler+0x208>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800712c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800712e:	f821 2b02 	strh.w	r2, [r1], #2
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007132:	6661      	str	r1, [r4, #100]	; 0x64
 8007134:	e7ea      	b.n	800710c <HAL_SPI_IRQHandler+0xc4>
      SPI_CloseTransfer(hspi);
 8007136:	4620      	mov	r0, r4
 8007138:	f7ff fc42 	bl	80069c0 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 800713c:	2301      	movs	r3, #1
 800713e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007142:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007146:	2b00      	cmp	r3, #0
 8007148:	d17f      	bne.n	800724a <HAL_SPI_IRQHandler+0x202>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800714a:	2e05      	cmp	r6, #5
 800714c:	d0b8      	beq.n	80070c0 <HAL_SPI_IRQHandler+0x78>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800714e:	2e04      	cmp	r6, #4
 8007150:	f000 8090 	beq.w	8007274 <HAL_SPI_IRQHandler+0x22c>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007154:	2e03      	cmp	r6, #3
 8007156:	d1c8      	bne.n	80070ea <HAL_SPI_IRQHandler+0xa2>
      HAL_SPI_TxCpltCallback(hspi);
 8007158:	4620      	mov	r0, r4
 800715a:	f7ff fecd 	bl	8006ef8 <HAL_SPI_TxCpltCallback>
 800715e:	e7c4      	b.n	80070ea <HAL_SPI_IRQHandler+0xa2>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007160:	0510      	lsls	r0, r2, #20
 8007162:	d501      	bpl.n	8007168 <HAL_SPI_IRQHandler+0x120>
 8007164:	070a      	lsls	r2, r1, #28
 8007166:	d47b      	bmi.n	8007260 <HAL_SPI_IRQHandler+0x218>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007168:	f415 7f58 	tst.w	r5, #864	; 0x360
 800716c:	d0bd      	beq.n	80070ea <HAL_SPI_IRQHandler+0xa2>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800716e:	066e      	lsls	r6, r5, #25
 8007170:	d509      	bpl.n	8007186 <HAL_SPI_IRQHandler+0x13e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007172:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8007176:	f042 0204 	orr.w	r2, r2, #4
 800717a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800717e:	699a      	ldr	r2, [r3, #24]
 8007180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007184:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007186:	05a8      	lsls	r0, r5, #22
 8007188:	d509      	bpl.n	800719e <HAL_SPI_IRQHandler+0x156>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800718a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007196:	699a      	ldr	r2, [r3, #24]
 8007198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800719c:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800719e:	05e9      	lsls	r1, r5, #23
 80071a0:	d509      	bpl.n	80071b6 <HAL_SPI_IRQHandler+0x16e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80071a2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80071a6:	f042 0208 	orr.w	r2, r2, #8
 80071aa:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80071ae:	699a      	ldr	r2, [r3, #24]
 80071b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071b4:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80071b6:	06aa      	lsls	r2, r5, #26
 80071b8:	d509      	bpl.n	80071ce <HAL_SPI_IRQHandler+0x186>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80071ba:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80071be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071c2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80071c6:	699a      	ldr	r2, [r3, #24]
 80071c8:	f042 0220 	orr.w	r2, r2, #32
 80071cc:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071ce:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80071d2:	2a00      	cmp	r2, #0
 80071d4:	d089      	beq.n	80070ea <HAL_SPI_IRQHandler+0xa2>
      __HAL_SPI_DISABLE(hspi);
 80071d6:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80071d8:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80071dc:	4a27      	ldr	r2, [pc, #156]	; (800727c <HAL_SPI_IRQHandler+0x234>)
      __HAL_SPI_DISABLE(hspi);
 80071de:	f021 0101 	bic.w	r1, r1, #1
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80071e2:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 80071e6:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80071e8:	6919      	ldr	r1, [r3, #16]
 80071ea:	ea02 0201 	and.w	r2, r2, r1
 80071ee:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80071f0:	d127      	bne.n	8007242 <HAL_SPI_IRQHandler+0x1fa>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80071f2:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80071f4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80071f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80071fa:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80071fc:	b150      	cbz	r0, 8007214 <HAL_SPI_IRQHandler+0x1cc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80071fe:	4b20      	ldr	r3, [pc, #128]	; (8007280 <HAL_SPI_IRQHandler+0x238>)
 8007200:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007202:	f7fc fd2d 	bl	8003c60 <HAL_DMA_Abort_IT>
 8007206:	b128      	cbz	r0, 8007214 <HAL_SPI_IRQHandler+0x1cc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007208:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800720c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007210:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8007214:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007216:	2800      	cmp	r0, #0
 8007218:	f43f af67 	beq.w	80070ea <HAL_SPI_IRQHandler+0xa2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800721c:	4b18      	ldr	r3, [pc, #96]	; (8007280 <HAL_SPI_IRQHandler+0x238>)
 800721e:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007220:	f7fc fd1e 	bl	8003c60 <HAL_DMA_Abort_IT>
 8007224:	2800      	cmp	r0, #0
 8007226:	f43f af60 	beq.w	80070ea <HAL_SPI_IRQHandler+0xa2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800722a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800722e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007232:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8007236:	e758      	b.n	80070ea <HAL_SPI_IRQHandler+0xa2>
    hspi->TxISR(hspi);
 8007238:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800723a:	4620      	mov	r0, r4
}
 800723c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8007240:	4718      	bx	r3
        hspi->State = HAL_SPI_STATE_READY;
 8007242:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8007244:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 8007246:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800724a:	f7ff fe8f 	bl	8006f6c <HAL_SPI_ErrorCallback>
 800724e:	e74c      	b.n	80070ea <HAL_SPI_IRQHandler+0xa2>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007250:	6822      	ldr	r2, [r4, #0]
 8007252:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8007256:	700a      	strb	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007258:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800725a:	3101      	adds	r1, #1
 800725c:	6661      	str	r1, [r4, #100]	; 0x64
 800725e:	e755      	b.n	800710c <HAL_SPI_IRQHandler+0xc4>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007266:	619a      	str	r2, [r3, #24]
    return;
 8007268:	e73f      	b.n	80070ea <HAL_SPI_IRQHandler+0xa2>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800726a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800726c:	69d2      	ldr	r2, [r2, #28]
 800726e:	2a00      	cmp	r2, #0
 8007270:	f43f af3d 	beq.w	80070ee <HAL_SPI_IRQHandler+0xa6>
      HAL_SPI_RxCpltCallback(hspi);
 8007274:	4620      	mov	r0, r4
 8007276:	f7ff fe41 	bl	8006efc <HAL_SPI_RxCpltCallback>
 800727a:	e736      	b.n	80070ea <HAL_SPI_IRQHandler+0xa2>
 800727c:	fffffc94 	.word	0xfffffc94
 8007280:	08007285 	.word	0x08007285

08007284 <SPI_DMAAbortOnError>:
{
 8007284:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007286:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8007288:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800728a:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 800728c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007290:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8007294:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8007298:	f7ff fe68 	bl	8006f6c <HAL_SPI_ErrorCallback>
}
 800729c:	bd08      	pop	{r3, pc}
 800729e:	bf00      	nop

080072a0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072a0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072a2:	4a1b      	ldr	r2, [pc, #108]	; (8007310 <TIM_OC1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072a4:	f023 0301 	bic.w	r3, r3, #1
{
 80072a8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072aa:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80072ac:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80072ae:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80072b0:	6985      	ldr	r5, [r0, #24]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072b2:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072b6:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 80072b8:	680d      	ldr	r5, [r1, #0]
 80072ba:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072bc:	688d      	ldr	r5, [r1, #8]
 80072be:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072c0:	4d14      	ldr	r5, [pc, #80]	; (8007314 <TIM_OC1_SetConfig+0x74>)
 80072c2:	42a8      	cmp	r0, r5
 80072c4:	d00e      	beq.n	80072e4 <TIM_OC1_SetConfig+0x44>
 80072c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80072ca:	42a8      	cmp	r0, r5
 80072cc:	d00a      	beq.n	80072e4 <TIM_OC1_SetConfig+0x44>
 80072ce:	4e12      	ldr	r6, [pc, #72]	; (8007318 <TIM_OC1_SetConfig+0x78>)
 80072d0:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 80072d4:	42a8      	cmp	r0, r5
 80072d6:	bf18      	it	ne
 80072d8:	42b0      	cmpne	r0, r6
 80072da:	d003      	beq.n	80072e4 <TIM_OC1_SetConfig+0x44>
 80072dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80072e0:	42a8      	cmp	r0, r5
 80072e2:	d10d      	bne.n	8007300 <TIM_OC1_SetConfig+0x60>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072e4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80072e6:	f023 0308 	bic.w	r3, r3, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072ea:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 80072ee:	432b      	orrs	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072f0:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
 80072f4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80072f8:	ea46 0c05 	orr.w	ip, r6, r5
 80072fc:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007300:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007302:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007304:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8007306:	6341      	str	r1, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007308:	6203      	str	r3, [r0, #32]
}
 800730a:	bc70      	pop	{r4, r5, r6}
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	fffeff8c 	.word	0xfffeff8c
 8007314:	40010000 	.word	0x40010000
 8007318:	40014000 	.word	0x40014000

0800731c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800731c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800731e:	4a1c      	ldr	r2, [pc, #112]	; (8007390 <TIM_OC3_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8007324:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007326:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007328:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800732a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800732c:	69c5      	ldr	r5, [r0, #28]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800732e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007332:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8007334:	680d      	ldr	r5, [r1, #0]
 8007336:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007338:	688d      	ldr	r5, [r1, #8]
 800733a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800733e:	4d15      	ldr	r5, [pc, #84]	; (8007394 <TIM_OC3_SetConfig+0x78>)
 8007340:	42a8      	cmp	r0, r5
 8007342:	d00e      	beq.n	8007362 <TIM_OC3_SetConfig+0x46>
 8007344:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007348:	42a8      	cmp	r0, r5
 800734a:	d00a      	beq.n	8007362 <TIM_OC3_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800734c:	4e12      	ldr	r6, [pc, #72]	; (8007398 <TIM_OC3_SetConfig+0x7c>)
 800734e:	4d13      	ldr	r5, [pc, #76]	; (800739c <TIM_OC3_SetConfig+0x80>)
 8007350:	42a8      	cmp	r0, r5
 8007352:	bf18      	it	ne
 8007354:	42b0      	cmpne	r0, r6
 8007356:	d00b      	beq.n	8007370 <TIM_OC3_SetConfig+0x54>
 8007358:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800735c:	42a8      	cmp	r0, r5
 800735e:	d10f      	bne.n	8007380 <TIM_OC3_SetConfig+0x64>
 8007360:	e006      	b.n	8007370 <TIM_OC3_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC3NP;
 8007362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007366:	68cd      	ldr	r5, [r1, #12]
 8007368:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800736c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007370:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007374:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 8007378:	ea46 0c05 	orr.w	ip, r6, r5
 800737c:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007380:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007382:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007384:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8007386:	63c1      	str	r1, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007388:	6203      	str	r3, [r0, #32]
}
 800738a:	bc70      	pop	{r4, r5, r6}
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	fffeff8c 	.word	0xfffeff8c
 8007394:	40010000 	.word	0x40010000
 8007398:	40014000 	.word	0x40014000
 800739c:	40014400 	.word	0x40014400

080073a0 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80073a0:	2800      	cmp	r0, #0
 80073a2:	f000 80a5 	beq.w	80074f0 <HAL_TIM_OC_Init+0x150>
{
 80073a6:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80073a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80073ac:	4604      	mov	r4, r0
 80073ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d076      	beq.n	80074a4 <HAL_TIM_OC_Init+0x104>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80073b6:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80073b8:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073ba:	494e      	ldr	r1, [pc, #312]	; (80074f4 <HAL_TIM_OC_Init+0x154>)
 80073bc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 80073c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073c4:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 80073c8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073ca:	fab1 f181 	clz	r1, r1
 80073ce:	ea4f 1151 	mov.w	r1, r1, lsr #5
 80073d2:	d027      	beq.n	8007424 <HAL_TIM_OC_Init+0x84>
 80073d4:	bb31      	cbnz	r1, 8007424 <HAL_TIM_OC_Init+0x84>
 80073d6:	4848      	ldr	r0, [pc, #288]	; (80074f8 <HAL_TIM_OC_Init+0x158>)
 80073d8:	4d48      	ldr	r5, [pc, #288]	; (80074fc <HAL_TIM_OC_Init+0x15c>)
 80073da:	4282      	cmp	r2, r0
 80073dc:	d067      	beq.n	80074ae <HAL_TIM_OC_Init+0x10e>
 80073de:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80073e2:	4282      	cmp	r2, r0
 80073e4:	d063      	beq.n	80074ae <HAL_TIM_OC_Init+0x10e>
 80073e6:	1b55      	subs	r5, r2, r5
 80073e8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80073ec:	fab5 f585 	clz	r5, r5
 80073f0:	4282      	cmp	r2, r0
 80073f2:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80073f6:	d063      	beq.n	80074c0 <HAL_TIM_OC_Init+0x120>
 80073f8:	2d00      	cmp	r5, #0
 80073fa:	d161      	bne.n	80074c0 <HAL_TIM_OC_Init+0x120>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073fc:	4840      	ldr	r0, [pc, #256]	; (8007500 <HAL_TIM_OC_Init+0x160>)
 80073fe:	4941      	ldr	r1, [pc, #260]	; (8007504 <HAL_TIM_OC_Init+0x164>)
 8007400:	428a      	cmp	r2, r1
 8007402:	bf18      	it	ne
 8007404:	4282      	cmpne	r2, r0
 8007406:	d065      	beq.n	80074d4 <HAL_TIM_OC_Init+0x134>
 8007408:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800740c:	428a      	cmp	r2, r1
 800740e:	d061      	beq.n	80074d4 <HAL_TIM_OC_Init+0x134>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007410:	69a0      	ldr	r0, [r4, #24]
 8007412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007416:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007418:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800741a:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800741c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800741e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007420:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007422:	e023      	b.n	800746c <HAL_TIM_OC_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007424:	4d35      	ldr	r5, [pc, #212]	; (80074fc <HAL_TIM_OC_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800742a:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800742c:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800742e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007430:	fab5 f585 	clz	r5, r5
 8007434:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007436:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800743c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800743e:	69a0      	ldr	r0, [r4, #24]
 8007440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007444:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8007446:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007448:	68e3      	ldr	r3, [r4, #12]
 800744a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800744c:	6863      	ldr	r3, [r4, #4]
 800744e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007450:	b951      	cbnz	r1, 8007468 <HAL_TIM_OC_Init+0xc8>
 8007452:	b94d      	cbnz	r5, 8007468 <HAL_TIM_OC_Init+0xc8>
 8007454:	492a      	ldr	r1, [pc, #168]	; (8007500 <HAL_TIM_OC_Init+0x160>)
 8007456:	4b2b      	ldr	r3, [pc, #172]	; (8007504 <HAL_TIM_OC_Init+0x164>)
 8007458:	429a      	cmp	r2, r3
 800745a:	bf18      	it	ne
 800745c:	428a      	cmpne	r2, r1
 800745e:	d003      	beq.n	8007468 <HAL_TIM_OC_Init+0xc8>
 8007460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007464:	429a      	cmp	r2, r3
 8007466:	d101      	bne.n	800746c <HAL_TIM_OC_Init+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 8007468:	6963      	ldr	r3, [r4, #20]
 800746a:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800746c:	2301      	movs	r3, #1
  return HAL_OK;
 800746e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8007470:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007472:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007476:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800747a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800747e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007482:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007486:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800748a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800748e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007496:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800749a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800749e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 80074a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80074a8:	f7fa fcea 	bl	8001e80 <HAL_TIM_OC_MspInit>
 80074ac:	e783      	b.n	80073b6 <HAL_TIM_OC_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074ae:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80074b4:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074b6:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 80074ba:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074bc:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074be:	e7ba      	b.n	8007436 <HAL_TIM_OC_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 80074c0:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80074c6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074c8:	480f      	ldr	r0, [pc, #60]	; (8007508 <HAL_TIM_OC_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ca:	4282      	cmp	r2, r0
 80074cc:	d0b3      	beq.n	8007436 <HAL_TIM_OC_Init+0x96>
 80074ce:	2d00      	cmp	r5, #0
 80074d0:	d1b1      	bne.n	8007436 <HAL_TIM_OC_Init+0x96>
 80074d2:	e793      	b.n	80073fc <HAL_TIM_OC_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074d4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80074d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074da:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074dc:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074de:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074e4:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80074e6:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80074e8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074ea:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80074ec:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074ee:	e7b1      	b.n	8007454 <HAL_TIM_OC_Init+0xb4>
    return HAL_ERROR;
 80074f0:	2001      	movs	r0, #1
}
 80074f2:	4770      	bx	lr
 80074f4:	40010000 	.word	0x40010000
 80074f8:	40000400 	.word	0x40000400
 80074fc:	40010400 	.word	0x40010400
 8007500:	40014000 	.word	0x40014000
 8007504:	40014400 	.word	0x40014400
 8007508:	40000c00 	.word	0x40000c00

0800750c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800750c:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800750e:	4a1c      	ldr	r2, [pc, #112]	; (8007580 <TIM_OC2_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007510:	f023 0310 	bic.w	r3, r3, #16
{
 8007514:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007516:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007518:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800751a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800751c:	6985      	ldr	r5, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800751e:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007522:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007524:	680d      	ldr	r5, [r1, #0]
 8007526:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800752a:	688d      	ldr	r5, [r1, #8]
 800752c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007530:	4d14      	ldr	r5, [pc, #80]	; (8007584 <TIM_OC2_SetConfig+0x78>)
 8007532:	42a8      	cmp	r0, r5
 8007534:	d00e      	beq.n	8007554 <TIM_OC2_SetConfig+0x48>
 8007536:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800753a:	42a8      	cmp	r0, r5
 800753c:	d00a      	beq.n	8007554 <TIM_OC2_SetConfig+0x48>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753e:	4e12      	ldr	r6, [pc, #72]	; (8007588 <TIM_OC2_SetConfig+0x7c>)
 8007540:	4d12      	ldr	r5, [pc, #72]	; (800758c <TIM_OC2_SetConfig+0x80>)
 8007542:	42a8      	cmp	r0, r5
 8007544:	bf18      	it	ne
 8007546:	42b0      	cmpne	r0, r6
 8007548:	d00b      	beq.n	8007562 <TIM_OC2_SetConfig+0x56>
 800754a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800754e:	42a8      	cmp	r0, r5
 8007550:	d10f      	bne.n	8007572 <TIM_OC2_SetConfig+0x66>
 8007552:	e006      	b.n	8007562 <TIM_OC2_SetConfig+0x56>
    tmpccer &= ~TIM_CCER_CC2NP;
 8007554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007558:	68cd      	ldr	r5, [r1, #12]
 800755a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800755e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007562:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007566:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 800756a:	ea46 0c05 	orr.w	ip, r6, r5
 800756e:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8007572:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007574:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007576:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007578:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800757a:	6203      	str	r3, [r0, #32]
}
 800757c:	bc70      	pop	{r4, r5, r6}
 800757e:	4770      	bx	lr
 8007580:	feff8cff 	.word	0xfeff8cff
 8007584:	40010000 	.word	0x40010000
 8007588:	40014000 	.word	0x40014000
 800758c:	40014400 	.word	0x40014400

08007590 <HAL_TIM_OC_ConfigChannel>:
{
 8007590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8007592:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007596:	2b01      	cmp	r3, #1
 8007598:	f000 80b6 	beq.w	8007708 <HAL_TIM_OC_ConfigChannel+0x178>
 800759c:	2301      	movs	r3, #1
 800759e:	4604      	mov	r4, r0
 80075a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80075a4:	2a14      	cmp	r2, #20
 80075a6:	d80c      	bhi.n	80075c2 <HAL_TIM_OC_ConfigChannel+0x32>
 80075a8:	e8df f002 	tbb	[pc, r2]
 80075ac:	0b0b0b40 	.word	0x0b0b0b40
 80075b0:	0b0b0b45 	.word	0x0b0b0b45
 80075b4:	0b0b0b4a 	.word	0x0b0b0b4a
 80075b8:	0b0b0b4f 	.word	0x0b0b0b4f
 80075bc:	0b0b0b7f 	.word	0x0b0b0b7f
 80075c0:	10          	.byte	0x10
 80075c1:	00          	.byte	0x00
 80075c2:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80075c4:	2300      	movs	r3, #0
 80075c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80075ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80075cc:	6803      	ldr	r3, [r0, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075ce:	484f      	ldr	r0, [pc, #316]	; (800770c <HAL_TIM_OC_ConfigChannel+0x17c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075d0:	6a1a      	ldr	r2, [r3, #32]
 80075d2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80075d6:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80075d8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80075da:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80075dc:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80075de:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075e2:	4030      	ands	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075e4:	680e      	ldr	r6, [r1, #0]
 80075e6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80075ea:	688e      	ldr	r6, [r1, #8]
 80075ec:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f0:	4e47      	ldr	r6, [pc, #284]	; (8007710 <HAL_TIM_OC_ConfigChannel+0x180>)
 80075f2:	42b3      	cmp	r3, r6
 80075f4:	d00e      	beq.n	8007614 <HAL_TIM_OC_ConfigChannel+0x84>
 80075f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80075fa:	42b3      	cmp	r3, r6
 80075fc:	d00a      	beq.n	8007614 <HAL_TIM_OC_ConfigChannel+0x84>
 80075fe:	4f45      	ldr	r7, [pc, #276]	; (8007714 <HAL_TIM_OC_ConfigChannel+0x184>)
 8007600:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8007604:	42b3      	cmp	r3, r6
 8007606:	bf18      	it	ne
 8007608:	42bb      	cmpne	r3, r7
 800760a:	d003      	beq.n	8007614 <HAL_TIM_OC_ConfigChannel+0x84>
 800760c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007610:	42b3      	cmp	r3, r6
 8007612:	d104      	bne.n	800761e <HAL_TIM_OC_ConfigChannel+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007614:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007618:	694e      	ldr	r6, [r1, #20]
 800761a:	ea45 2586 	orr.w	r5, r5, r6, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800761e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007620:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007622:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8007624:	2000      	movs	r0, #0
  TIMx->CCR6 = OC_Config->Pulse;
 8007626:	65d9      	str	r1, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007628:	621a      	str	r2, [r3, #32]
}
 800762a:	e7cb      	b.n	80075c4 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800762c:	6800      	ldr	r0, [r0, #0]
 800762e:	f7ff fe37 	bl	80072a0 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007632:	2000      	movs	r0, #0
      break;
 8007634:	e7c6      	b.n	80075c4 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007636:	6800      	ldr	r0, [r0, #0]
 8007638:	f7ff ff68 	bl	800750c <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800763c:	2000      	movs	r0, #0
      break;
 800763e:	e7c1      	b.n	80075c4 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007640:	6800      	ldr	r0, [r0, #0]
 8007642:	f7ff fe6b 	bl	800731c <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007646:	2000      	movs	r0, #0
      break;
 8007648:	e7bc      	b.n	80075c4 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800764a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800764c:	4832      	ldr	r0, [pc, #200]	; (8007718 <HAL_TIM_OC_ConfigChannel+0x188>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800764e:	6a1a      	ldr	r2, [r3, #32]
 8007650:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007654:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8007656:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007658:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800765a:	69de      	ldr	r6, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800765c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007660:	4030      	ands	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007662:	680e      	ldr	r6, [r1, #0]
 8007664:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007668:	688e      	ldr	r6, [r1, #8]
 800766a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800766e:	4e28      	ldr	r6, [pc, #160]	; (8007710 <HAL_TIM_OC_ConfigChannel+0x180>)
 8007670:	42b3      	cmp	r3, r6
 8007672:	d00e      	beq.n	8007692 <HAL_TIM_OC_ConfigChannel+0x102>
 8007674:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007678:	42b3      	cmp	r3, r6
 800767a:	d00a      	beq.n	8007692 <HAL_TIM_OC_ConfigChannel+0x102>
 800767c:	4f25      	ldr	r7, [pc, #148]	; (8007714 <HAL_TIM_OC_ConfigChannel+0x184>)
 800767e:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8007682:	42b3      	cmp	r3, r6
 8007684:	bf18      	it	ne
 8007686:	42bb      	cmpne	r3, r7
 8007688:	d003      	beq.n	8007692 <HAL_TIM_OC_ConfigChannel+0x102>
 800768a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800768e:	42b3      	cmp	r3, r6
 8007690:	d104      	bne.n	800769c <HAL_TIM_OC_ConfigChannel+0x10c>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007692:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007696:	694e      	ldr	r6, [r1, #20]
 8007698:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 800769c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800769e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80076a0:	61d8      	str	r0, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80076a2:	2000      	movs	r0, #0
  TIMx->CCR4 = OC_Config->Pulse;
 80076a4:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80076a6:	621a      	str	r2, [r3, #32]
}
 80076a8:	e78c      	b.n	80075c4 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076aa:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076ac:	481b      	ldr	r0, [pc, #108]	; (800771c <HAL_TIM_OC_ConfigChannel+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076ae:	6a1a      	ldr	r2, [r3, #32]
 80076b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80076b4:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80076b6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80076b8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80076ba:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 80076bc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076c0:	4030      	ands	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 80076c2:	680e      	ldr	r6, [r1, #0]
 80076c4:	4330      	orrs	r0, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076c6:	688e      	ldr	r6, [r1, #8]
 80076c8:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076cc:	4e10      	ldr	r6, [pc, #64]	; (8007710 <HAL_TIM_OC_ConfigChannel+0x180>)
 80076ce:	42b3      	cmp	r3, r6
 80076d0:	d00e      	beq.n	80076f0 <HAL_TIM_OC_ConfigChannel+0x160>
 80076d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80076d6:	42b3      	cmp	r3, r6
 80076d8:	d00a      	beq.n	80076f0 <HAL_TIM_OC_ConfigChannel+0x160>
 80076da:	4f0e      	ldr	r7, [pc, #56]	; (8007714 <HAL_TIM_OC_ConfigChannel+0x184>)
 80076dc:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 80076e0:	42b3      	cmp	r3, r6
 80076e2:	bf18      	it	ne
 80076e4:	42bb      	cmpne	r3, r7
 80076e6:	d003      	beq.n	80076f0 <HAL_TIM_OC_ConfigChannel+0x160>
 80076e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80076ec:	42b3      	cmp	r3, r6
 80076ee:	d104      	bne.n	80076fa <HAL_TIM_OC_ConfigChannel+0x16a>
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076f0:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076f4:	694e      	ldr	r6, [r1, #20]
 80076f6:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 80076fa:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80076fc:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80076fe:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8007700:	2000      	movs	r0, #0
  TIMx->CCR5 = OC_Config->Pulse;
 8007702:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8007704:	621a      	str	r2, [r3, #32]
}
 8007706:	e75d      	b.n	80075c4 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 8007708:	2002      	movs	r0, #2
}
 800770a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800770c:	feff8fff 	.word	0xfeff8fff
 8007710:	40010000 	.word	0x40010000
 8007714:	40014000 	.word	0x40014000
 8007718:	feff8cff 	.word	0xfeff8cff
 800771c:	fffeff8f 	.word	0xfffeff8f

08007720 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007720:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007724:	2b01      	cmp	r3, #1
 8007726:	d04b      	beq.n	80077c0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007728:	6803      	ldr	r3, [r0, #0]
 800772a:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800772c:	2002      	movs	r0, #2
{
 800772e:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007730:	4d24      	ldr	r5, [pc, #144]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007732:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007736:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8007738:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800773a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800773c:	d029      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800773e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007742:	42ab      	cmp	r3, r5
 8007744:	d025      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007746:	4d20      	ldr	r5, [pc, #128]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8007748:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800774c:	42ab      	cmp	r3, r5
 800774e:	bf18      	it	ne
 8007750:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007754:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007758:	bf0c      	ite	eq
 800775a:	f04f 0c01 	moveq.w	ip, #1
 800775e:	f04f 0c00 	movne.w	ip, #0
 8007762:	42ab      	cmp	r3, r5
 8007764:	bf08      	it	eq
 8007766:	f04c 0c01 	orreq.w	ip, ip, #1
 800776a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800776e:	42ab      	cmp	r3, r5
 8007770:	bf08      	it	eq
 8007772:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007776:	680d      	ldr	r5, [r1, #0]
 8007778:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800777a:	4d14      	ldr	r5, [pc, #80]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800777c:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800777e:	42ab      	cmp	r3, r5
 8007780:	bf14      	ite	ne
 8007782:	4660      	movne	r0, ip
 8007784:	f04c 0001 	orreq.w	r0, ip, #1
 8007788:	b960      	cbnz	r0, 80077a4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800778a:	4811      	ldr	r0, [pc, #68]	; (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800778c:	4283      	cmp	r3, r0
 800778e:	d009      	beq.n	80077a4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007790:	e00d      	b.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007792:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007794:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007798:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800779a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800779c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a0:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80077a2:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077a4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077a6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077aa:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077ac:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80077ae:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80077b0:	2101      	movs	r1, #1

  return HAL_OK;
 80077b2:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80077b4:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80077b8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80077bc:	bc30      	pop	{r4, r5}
 80077be:	4770      	bx	lr
  __HAL_LOCK(htim);
 80077c0:	2002      	movs	r0, #2
}
 80077c2:	4770      	bx	lr
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40000400 	.word	0x40000400
 80077cc:	40001800 	.word	0x40001800
 80077d0:	40014000 	.word	0x40014000

080077d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d03d      	beq.n	8007858 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077dc:	4602      	mov	r2, r0
 80077de:	6848      	ldr	r0, [r1, #4]
{
 80077e0:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80077e2:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80077e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ea:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077ec:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077f2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077f4:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077fa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077fc:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007802:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007804:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007806:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800780a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800780c:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800780e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007812:	4303      	orrs	r3, r0
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007814:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007816:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800781a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800781e:	4c0f      	ldr	r4, [pc, #60]	; (800785c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8007820:	42a0      	cmp	r0, r4
 8007822:	d00b      	beq.n	800783c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8007824:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007828:	42a0      	cmp	r0, r4
 800782a:	d007      	beq.n	800783c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800782c:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800782e:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8007830:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8007834:	4608      	mov	r0, r1
}
 8007836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800783a:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800783c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800783e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007842:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007846:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800784a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800784e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007850:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007854:	430b      	orrs	r3, r1
 8007856:	e7e9      	b.n	800782c <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8007858:	2002      	movs	r0, #2
}
 800785a:	4770      	bx	lr
 800785c:	40010000 	.word	0x40010000

08007860 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007860:	680b      	ldr	r3, [r1, #0]
{
 8007862:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007864:	b9d3      	cbnz	r3, 800789c <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007866:	6804      	ldr	r4, [r0, #0]
 8007868:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800786c:	684a      	ldr	r2, [r1, #4]
 800786e:	4023      	ands	r3, r4
 8007870:	4313      	orrs	r3, r2
 8007872:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8007876:	4323      	orrs	r3, r4
 8007878:	4313      	orrs	r3, r2
 800787a:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800787e:	4323      	orrs	r3, r4
 8007880:	4313      	orrs	r3, r2
 8007882:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 8007886:	4323      	orrs	r3, r4
 8007888:	4313      	orrs	r3, r2
 800788a:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800788e:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8007890:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007894:	4313      	orrs	r3, r2
 8007896:	6003      	str	r3, [r0, #0]
}
 8007898:	2000      	movs	r0, #0
 800789a:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800789c:	6802      	ldr	r2, [r0, #0]
 800789e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 80078a2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80078a6:	4322      	orrs	r2, r4
 80078a8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80078aa:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80078ac:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80078ae:	4322      	orrs	r2, r4
 80078b0:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80078b2:	6842      	ldr	r2, [r0, #4]
 80078b4:	4013      	ands	r3, r2
 80078b6:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 80078ba:	4323      	orrs	r3, r4
 80078bc:	4313      	orrs	r3, r2
 80078be:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 80078c2:	4323      	orrs	r3, r4
 80078c4:	4313      	orrs	r3, r2
 80078c6:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 80078ca:	4323      	orrs	r3, r4
}
 80078cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80078d0:	4313      	orrs	r3, r2
 80078d2:	6043      	str	r3, [r0, #4]
}
 80078d4:	2000      	movs	r0, #0
 80078d6:	4770      	bx	lr
 80078d8:	ffff8000 	.word	0xffff8000

080078dc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80078dc:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80078de:	bb0a      	cbnz	r2, 8007924 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80078e0:	6883      	ldr	r3, [r0, #8]
 80078e2:	e9d1 2400 	ldrd	r2, r4, [r1]
 80078e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80078ea:	3c01      	subs	r4, #1
 80078ec:	3a01      	subs	r2, #1
 80078ee:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80078f2:	4313      	orrs	r3, r2
 80078f4:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80078f8:	3a01      	subs	r2, #1
 80078fa:	3c01      	subs	r4, #1
 80078fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007900:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
 8007904:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
 8007908:	6989      	ldr	r1, [r1, #24]
 800790a:	3b01      	subs	r3, #1
 800790c:	3c01      	subs	r4, #1
 800790e:	3901      	subs	r1, #1
 8007910:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8007914:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8007918:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800791c:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800791e:	6083      	str	r3, [r0, #8]
}
 8007920:	2000      	movs	r0, #0
 8007922:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007924:	6882      	ldr	r2, [r0, #8]
 8007926:	68cc      	ldr	r4, [r1, #12]
 8007928:	4b11      	ldr	r3, [pc, #68]	; (8007970 <FMC_SDRAM_Timing_Init+0x94>)
 800792a:	3c01      	subs	r4, #1
 800792c:	4013      	ands	r3, r2
 800792e:	694a      	ldr	r2, [r1, #20]
 8007930:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8007934:	1e54      	subs	r4, r2, #1
 8007936:	ea43 5404 	orr.w	r4, r3, r4, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800793a:	e9d1 2500 	ldrd	r2, r5, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800793e:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007940:	68c3      	ldr	r3, [r0, #12]
 8007942:	1e6c      	subs	r4, r5, #1
 8007944:	3a01      	subs	r2, #1
 8007946:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800794a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800794e:	690c      	ldr	r4, [r1, #16]
 8007950:	431a      	orrs	r2, r3
 8007952:	688b      	ldr	r3, [r1, #8]
 8007954:	3c01      	subs	r4, #1
 8007956:	6989      	ldr	r1, [r1, #24]
 8007958:	3b01      	subs	r3, #1
 800795a:	3901      	subs	r1, #1
 800795c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8007960:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007964:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 8007968:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800796a:	60c3      	str	r3, [r0, #12]
}
 800796c:	2000      	movs	r0, #0
 800796e:	4770      	bx	lr
 8007970:	ff0f0fff 	.word	0xff0f0fff

08007974 <tThreshold_init>:
}



void tThreshold_init (tThreshold* const th, float low, float high, LEAF* const leaf)
{
 8007974:	b538      	push	{r3, r4, r5, lr}
	tThreshold_initToPool(th, low, high, &leaf->mempool);
}

void tThreshold_initToPool (tThreshold* const th, float low, float high, tMempool* const mp)
{
    _tMempool* m = *mp;
 8007976:	698d      	ldr	r5, [r1, #24]
{
 8007978:	4604      	mov	r4, r0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 800797a:	2010      	movs	r0, #16
 800797c:	4629      	mov	r1, r5
{
 800797e:	ed2d 8b02 	vpush	{d8}
 8007982:	eeb0 8a40 	vmov.f32	s16, s0
 8007986:	eef0 8a60 	vmov.f32	s17, s1
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 800798a:	f000 fad9 	bl	8007f40 <mpool_alloc>
    t->mempool = m;
    
    t->highThresh = high;
    t->lowThresh = low;

    t->currentValue = 0;
 800798e:	2300      	movs	r3, #0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 8007990:	6020      	str	r0, [r4, #0]
    t->lowThresh = low;
 8007992:	ed80 8a02 	vstr	s16, [r0, #8]
    t->highThresh = high;
 8007996:	edc0 8a01 	vstr	s17, [r0, #4]
    t->mempool = m;
 800799a:	6005      	str	r5, [r0, #0]
    t->currentValue = 0;
 800799c:	60c3      	str	r3, [r0, #12]
}
 800799e:	ecbd 8b02 	vpop	{d8}
 80079a2:	bd38      	pop	{r3, r4, r5, pc}

080079a4 <tThreshold_tick>:
    mpool_free((char*)t, t->mempool);
}

int tThreshold_tick(tThreshold* const th, float in)
{
    _tThreshold* t = *th;
 80079a4:	6803      	ldr	r3, [r0, #0]

    if (in >= t->highThresh)
 80079a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80079aa:	eef4 7ac0 	vcmpe.f32	s15, s0
 80079ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b2:	d803      	bhi.n	80079bc <tThreshold_tick+0x18>
    {
    	t->currentValue = 1;
 80079b4:	2201      	movs	r2, #1
 80079b6:	4610      	mov	r0, r2
 80079b8:	60da      	str	r2, [r3, #12]
 80079ba:	4770      	bx	lr
    }
    else if (in <= t->lowThresh)
 80079bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80079c0:	eef4 7ac0 	vcmpe.f32	s15, s0
 80079c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c8:	db03      	blt.n	80079d2 <tThreshold_tick+0x2e>
	{
    	t->currentValue = 0;
 80079ca:	2200      	movs	r2, #0
 80079cc:	4610      	mov	r0, r2
 80079ce:	60da      	str	r2, [r3, #12]
	}

    return t->currentValue;
}
 80079d0:	4770      	bx	lr
    return t->currentValue;
 80079d2:	68d8      	ldr	r0, [r3, #12]
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop

080079d8 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 80079d8:	b538      	push	{r3, r4, r5, lr}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 80079da:	698d      	ldr	r5, [r1, #24]
{
 80079dc:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 80079de:	201c      	movs	r0, #28
 80079e0:	4629      	mov	r1, r5
{
 80079e2:	ed2d 8b02 	vpush	{d8}
 80079e6:	eef0 8a40 	vmov.f32	s17, s0
 80079ea:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 80079ee:	f000 faa7 	bl	8007f40 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 80079f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 80079f6:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 80079f8:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 80079fa:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 80079fc:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8007a00:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 8007a04:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8007a08:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8007a0a:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8007a0c:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8007a0e:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8007a10:	ee87 7aa0 	vdiv.f32	s14, s15, s1
}
 8007a14:	ecbd 8b02 	vpop	{d8}
    s->invUpSlide = 1.0f / upSlide;
 8007a18:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8007a1c:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8007a20:	bd38      	pop	{r3, r4, r5, pc}
 8007a22:	bf00      	nop

08007a24 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 8007a24:	6803      	ldr	r3, [r0, #0]
{
 8007a26:	eeb0 7a40 	vmov.f32	s14, s0


    if (in >= s->prevOut)
 8007a2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a2e:	eef4 7ac0 	vcmpe.f32	s15, s0
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8007a32:	ee30 6a67 	vsub.f32	s12, s0, s15
    if (in >= s->prevOut)
 8007a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8007a3a:	bf94      	ite	ls
 8007a3c:	edd3 6a04 	vldrls	s13, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8007a40:	edd3 6a05 	vldrhi	s13, [r3, #20]
 8007a44:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a48:	eeb0 0a67 	vmov.f32	s0, s15
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8007a4c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8007a80 <tSlide_tick+0x5c>
 8007a50:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a58:	d406      	bmi.n	8007a68 <tSlide_tick+0x44>
 8007a5a:	ed83 0a02 	vstr	s0, [r3, #8]
#endif
    s->prevIn = in;
 8007a5e:	ed83 7a03 	vstr	s14, [r3, #12]
    s->prevOut = s->currentOut;
 8007a62:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 8007a66:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8007a68:	eddf 7a06 	vldr	s15, [pc, #24]	; 8007a84 <tSlide_tick+0x60>
    s->prevIn = in;
 8007a6c:	ed83 7a03 	vstr	s14, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8007a70:	eeb0 0a67 	vmov.f32	s0, s15
 8007a74:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 8007a78:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	006ce3ee 	.word	0x006ce3ee
 8007a84:	00000000 	.word	0x00000000

08007a88 <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 8007a88:	b538      	push	{r3, r4, r5, lr}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 8007a8a:	698c      	ldr	r4, [r1, #24]
{
 8007a8c:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8007a8e:	2018      	movs	r0, #24
 8007a90:	4621      	mov	r1, r4
{
 8007a92:	ed2d 8b02 	vpush	{d8}
 8007a96:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8007a9a:	f000 fac5 	bl	8008028 <mpool_calloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8007a9e:	6862      	ldr	r2, [r4, #4]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8007aa0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->ys = 0.0f;
 8007aa4:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8007aa6:	ed92 7a03 	vldr	s14, [r2, #12]
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8007aaa:	6028      	str	r0, [r5, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8007aac:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
    
    f->frequency = freq;
 8007ab0:	ed80 8a04 	vstr	s16, [r0, #16]
    f->mempool = m;
 8007ab4:	6004      	str	r4, [r0, #0]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8007ab6:	ed80 7a05 	vstr	s14, [r0, #20]
    f->ys = 0.0f;
 8007aba:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 8007abc:	6043      	str	r3, [r0, #4]
}
 8007abe:	ecbd 8b02 	vpop	{d8}
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8007ac2:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8007ac6:	bd38      	pop	{r3, r4, r5, pc}

08007ac8 <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8007ac8:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8007aca:	edd3 7a01 	vldr	s15, [r3, #4]
 8007ace:	ed93 7a02 	vldr	s14, [r3, #8]
 8007ad2:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8007ad6:	ed83 0a01 	vstr	s0, [r3, #4]
 8007ada:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 8007ade:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007ae2:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8007ae6:	4770      	bx	lr

08007ae8 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

float   tVZFilter_tickEfficient             (tVZFilter* const vf, float in)
{
    _tVZFilter* f = *vf;
 8007ae8:	6803      	ldr	r3, [r0, #0]
    
    float yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8007aea:	edd3 6a03 	vldr	s13, [r3, #12]
 8007aee:	ed93 7a02 	vldr	s14, [r3, #8]
 8007af2:	ee70 7a66 	vsub.f32	s15, s0, s13
 8007af6:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 8007afa:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8007afe:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8007b02:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8007b06:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 8007b0a:	edd3 4a08 	vldr	s9, [r3, #32]
 8007b0e:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8007b12:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 8007b16:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8007b1a:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
 8007b1e:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8007b22:	eeb0 5a47 	vmov.f32	s10, s14
 8007b26:	eea4 0a87 	vfma.f32	s0, s9, s14
 8007b2a:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8007b2e:	eef0 7a66 	vmov.f32	s15, s13
}
 8007b32:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 8007b36:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8007b3a:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
 8007b3e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007b42:	4770      	bx	lr

08007b44 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8007b44:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 8007b46:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8007b48:	eddf 7a98 	vldr	s15, [pc, #608]	; 8007dac <tVZFilter_calcCoeffs+0x268>
 8007b4c:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
{
 8007b50:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8007b54:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8007b58:	ee68 8a87 	vmul.f32	s17, s17, s14
 8007b5c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8007b60:	eeb0 0a68 	vmov.f32	s0, s17
 8007b64:	f000 fd60 	bl	8008628 <tanf>
    
    switch( f->type )
 8007b68:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8007b6a:	eeb0 8a40 	vmov.f32	s16, s0
 8007b6e:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8007b72:	2b0a      	cmp	r3, #10
 8007b74:	f200 8117 	bhi.w	8007da6 <tVZFilter_calcCoeffs+0x262>
 8007b78:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007b7c:	002f0026 	.word	0x002f0026
 8007b80:	00410038 	.word	0x00410038
 8007b84:	0056004d 	.word	0x0056004d
 8007b88:	00a1008b 	.word	0x00a1008b
 8007b8c:	010a00b7 	.word	0x010a00b7
 8007b90:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8007b92:	edd4 7a05 	vldr	s15, [r4, #20]
 8007b96:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007b9a:	eeb1 7a67 	vneg.f32	s14, s15
 8007b9e:	61e3      	str	r3, [r4, #28]
 8007ba0:	6263      	str	r3, [r4, #36]	; 0x24
 8007ba2:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8007ba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8007baa:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8007bae:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8007bb2:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8007bb6:	eee7 6a88 	vfma.f32	s13, s15, s16
}
 8007bba:	ecbd 8b02 	vpop	{d8}
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8007bbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007bc2:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8007bc6:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8007bce:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8007bd2:	61e3      	str	r3, [r4, #28]
 8007bd4:	6223      	str	r3, [r4, #32]
 8007bd6:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8007bd8:	e7e5      	b.n	8007ba6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8007be0:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8007be4:	6223      	str	r3, [r4, #32]
 8007be6:	6263      	str	r3, [r4, #36]	; 0x24
 8007be8:	61e2      	str	r2, [r4, #28]
            break;
 8007bea:	e7dc      	b.n	8007ba6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8007bec:	2300      	movs	r3, #0
 8007bee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8007bf2:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8007bf6:	61e3      	str	r3, [r4, #28]
 8007bf8:	6263      	str	r3, [r4, #36]	; 0x24
 8007bfa:	6222      	str	r2, [r4, #32]
            break;
 8007bfc:	e7d3      	b.n	8007ba6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8007bfe:	edd4 7a05 	vldr	s15, [r4, #20]
 8007c02:	2300      	movs	r3, #0
 8007c04:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8007c08:	61e3      	str	r3, [r4, #28]
 8007c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c0e:	6263      	str	r3, [r4, #36]	; 0x24
 8007c10:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8007c14:	e7c7      	b.n	8007ba6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8007c16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007c1a:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 8007c1c:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8007c20:	6222      	str	r2, [r4, #32]
 8007c22:	61e3      	str	r3, [r4, #28]
 8007c24:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8007c26:	e7be      	b.n	8007ba6 <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8007c28:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8007c2c:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8007c30:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007c34:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007c38:	f000 fb96 	bl	8008368 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8007c3c:	ee28 0a80 	vmul.f32	s0, s17, s0
 8007c40:	f000 fcf2 	bl	8008628 <tanf>
            float r  = f->g/wl;
 8007c44:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8007c48:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8007c4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c50:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8007c54:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8007c58:	ed84 7a07 	vstr	s14, [r4, #28]
 8007c5c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8007c60:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8007c64:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8007c68:	eef0 6a47 	vmov.f32	s13, s14
 8007c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c70:	ee77 7a45 	vsub.f32	s15, s14, s10
 8007c74:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007c78:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8007c7c:	eef1 7ac7 	vsqrt.f32	s15, s14
 8007c80:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8007c84:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8007c88:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8007c8c:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8007c90:	e789      	b.n	8007ba6 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8007c92:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007c96:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8007c9a:	edd4 7a05 	vldr	s15, [r4, #20]
 8007c9e:	eef1 6ac7 	vsqrt.f32	s13, s14
 8007ca2:	ed84 7a07 	vstr	s14, [r4, #28]
 8007ca6:	6263      	str	r3, [r4, #36]	; 0x24
 8007ca8:	ee27 6a27 	vmul.f32	s12, s14, s15
 8007cac:	ed84 6a08 	vstr	s12, [r4, #32]
 8007cb0:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007cb4:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8007cb8:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8007cbc:	e773      	b.n	8007ba6 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8007cbe:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8007cc2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007cc6:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007cca:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8007cce:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8007cd2:	61e3      	str	r3, [r4, #28]
 8007cd4:	ee27 6a27 	vmul.f32	s12, s14, s15
 8007cd8:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007cdc:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8007ce0:	ee20 8a07 	vmul.f32	s16, s0, s14
 8007ce4:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8007ce8:	e75d      	b.n	8007ba6 <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
 8007cea:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007cee:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8007cf2:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8007cf6:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8007db0 <tVZFilter_calcCoeffs+0x26c>
 8007cfa:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8007cfe:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8007d02:	eeb0 0a48 	vmov.f32	s0, s16
 8007d06:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007d0a:	f000 f8fd 	bl	8007f08 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8007d0e:	eddf 0a28 	vldr	s1, [pc, #160]	; 8007db0 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8007d12:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8007d16:	eeb0 0a68 	vmov.f32	s0, s17
 8007d1a:	f000 f8f9 	bl	8007f10 <minimum>
            f->cB = 1.0f-x*x;
 8007d1e:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8007d22:	edd4 7a05 	vldr	s15, [r4, #20]
 8007d26:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8007d2a:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8007d2e:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8007d32:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8007d36:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8007d3a:	ee76 5a06 	vadd.f32	s11, s12, s12
 8007d3e:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8007d42:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8007d46:	eee6 7a06 	vfma.f32	s15, s12, s12
 8007d4a:	eee0 7a00 	vfma.f32	s15, s0, s0
 8007d4e:	eee0 7a65 	vfms.f32	s15, s0, s11
 8007d52:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8007d56:	f000 f87b 	bl	8007e50 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8007d5a:	edd4 5a07 	vldr	s11, [r4, #28]
 8007d5e:	ed94 6a08 	vldr	s12, [r4, #32]
 8007d62:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8007d66:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8007d6a:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8007d6e:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8007d72:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 8007d76:	ee65 5a80 	vmul.f32	s11, s11, s0
 8007d7a:	ee26 6a00 	vmul.f32	s12, s12, s0
 8007d7e:	ee26 0a80 	vmul.f32	s0, s13, s0
 8007d82:	edc4 5a07 	vstr	s11, [r4, #28]
 8007d86:	ed84 6a08 	vstr	s12, [r4, #32]
 8007d8a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8007d8e:	e70a      	b.n	8007ba6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 8007d90:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8007d94:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8007d98:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8007d9a:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8007d9e:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 8007da2:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8007da4:	e6ff      	b.n	8007ba6 <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
 8007da6:	edd4 7a05 	vldr	s15, [r4, #20]
 8007daa:	e6fc      	b.n	8007ba6 <tVZFilter_calcCoeffs+0x62>
 8007dac:	40490fdb 	.word	0x40490fdb
 8007db0:	00000000 	.word	0x00000000

08007db4 <tVZFilter_init>:
{
 8007db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 8007db6:	6997      	ldr	r7, [r2, #24]
{
 8007db8:	4605      	mov	r5, r0
 8007dba:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8007dbc:	204c      	movs	r0, #76	; 0x4c
 8007dbe:	4639      	mov	r1, r7
{
 8007dc0:	ed2d 8b04 	vpush	{d8-d9}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8007dca:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8007dce:	ed9f 8a1d 	vldr	s16, [pc, #116]	; 8007e44 <tVZFilter_init+0x90>
{
 8007dd2:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8007dd6:	f000 f8b3 	bl	8007f40 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
 8007dda:	687b      	ldr	r3, [r7, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8007ddc:	4604      	mov	r4, r0
 8007dde:	6028      	str	r0, [r5, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8007de0:	eeb0 0a48 	vmov.f32	s0, s16
    f->sampleRate = leaf->sampleRate;
 8007de4:	edd3 7a00 	vldr	s15, [r3]
    f->invSampleRate = leaf->invSampleRate;
 8007de8:	685b      	ldr	r3, [r3, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8007dea:	ee27 1a89 	vmul.f32	s2, s15, s18
    f->mempool = m;
 8007dee:	6007      	str	r7, [r0, #0]
    f->sampleRate = leaf->sampleRate;
 8007df0:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    f->invSampleRate = leaf->invSampleRate;
 8007df4:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8007df6:	eddd 0a01 	vldr	s1, [sp, #4]
 8007dfa:	f000 f84b 	bl	8007e94 <LEAF_clip>
    f->invG = 1.0f/ONE_OVER_SQRT2;
 8007dfe:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8007e48 <tVZFilter_init+0x94>
    f->R2Plusg = f->R2 + f->g;
 8007e02:	edd4 7a04 	vldr	s15, [r4, #16]
    tVZFilter_calcCoeffs(vf);
 8007e06:	4628      	mov	r0, r5
    f->G    = ONE_OVER_SQRT2;
 8007e08:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <tVZFilter_init+0x98>)
    f->R2Plusg = f->R2 + f->g;
 8007e0a:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8007e0e:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->type = type;
 8007e12:	7126      	strb	r6, [r4, #4]
    f->G    = ONE_OVER_SQRT2;
 8007e14:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->invG = 1.0f/ONE_OVER_SQRT2;
 8007e16:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->B    = bandWidth;
 8007e1a:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 8007e1e:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 8007e22:	ed84 9a0d 	vstr	s18, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 8007e26:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 8007e2a:	ed84 8a03 	vstr	s16, [r4, #12]
    f->R2   = f->invG;
 8007e2e:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 8007e32:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
}
 8007e36:	b003      	add	sp, #12
 8007e38:	ecbd 8b04 	vpop	{d8-d9}
 8007e3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 8007e40:	f7ff be80 	b.w	8007b44 <tVZFilter_calcCoeffs>
 8007e44:	00000000 	.word	0x00000000
 8007e48:	3fb504f3 	.word	0x3fb504f3
 8007e4c:	3f3504f3 	.word	0x3f3504f3

08007e50 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8007e50:	ee10 2a10 	vmov	r2, s0
 8007e54:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 8007e58:	4b0d      	ldr	r3, [pc, #52]	; (8007e90 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8007e5a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8007e5e:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8007e62:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007e66:	ee00 3a10 	vmov	s0, r3
 8007e6a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007e6e:	eea0 7a67 	vfms.f32	s14, s0, s15
 8007e72:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 8007e76:	ee10 3a10 	vmov	r3, s0
 8007e7a:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 8007e7e:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 8007e82:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 8007e86:	336e      	adds	r3, #110	; 0x6e
}
 8007e88:	ee00 3a10 	vmov	s0, r3
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	5f3759df 	.word	0x5f3759df

08007e94 <LEAF_clip>:

float   LEAF_clip(float min, float val, float max)
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 8007e94:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8007e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e9c:	dd05      	ble.n	8007eaa <LEAF_clip+0x16>
 8007e9e:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 8007ea2:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 8007ea6:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 8007eaa:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8007eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb2:	dc01      	bgt.n	8007eb8 <LEAF_clip+0x24>
    {
        return tempmin;
    }
    else if (val > tempmax)
 8007eb4:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop

08007ebc <LEAF_generate_atodb>:
    }
}

void LEAF_generate_atodb(float* buffer, int size)
{
    float increment = 1.0f / (float)size;
 8007ebc:	ee07 1a90 	vmov	s15, r1
 8007ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    for (int i = 0; i < size; i++)
 8007ec4:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)size;
 8007ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8007eca:	b538      	push	{r3, r4, r5, lr}
 8007ecc:	ed2d 8b04 	vpush	{d8-d9}
    float increment = 1.0f / (float)size;
 8007ed0:	eec7 8a27 	vdiv.f32	s17, s14, s15
    for (int i = 0; i < size; i++)
 8007ed4:	dd12      	ble.n	8007efc <LEAF_generate_atodb+0x40>
 8007ed6:	4604      	mov	r4, r0
    float x = 0.0f;
 8007ed8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007f04 <LEAF_generate_atodb+0x48>
 8007edc:	eb00 0581 	add.w	r5, r0, r1, lsl #2
}


float atodb(float a)
{
    return 20.0f*log10f(a);
 8007ee0:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 8007ee4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ee8:	f000 fbca 	bl	8008680 <log10f>
 8007eec:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 8007ef0:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 8007ef4:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8007ef8:	42a5      	cmp	r5, r4
 8007efa:	d1f3      	bne.n	8007ee4 <LEAF_generate_atodb+0x28>
}
 8007efc:	ecbd 8b04 	vpop	{d8-d9}
 8007f00:	bd38      	pop	{r3, r4, r5, pc}
 8007f02:	bf00      	nop
 8007f04:	00000000 	.word	0x00000000

08007f08 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8007f08:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop

08007f10 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 8007f10:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop

08007f18 <leaf_pool_init>:
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8007f18:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8007f1a:	6a04      	ldr	r4, [r0, #32]
 8007f1c:	2510      	movs	r5, #16
    pool->usize  = 0;
 8007f1e:	2300      	movs	r3, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8007f20:	6365      	str	r5, [r4, #52]	; 0x34
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 8007f22:	194c      	adds	r4, r1, r5
    pool->msize  = size;
 8007f24:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8007f26:	3a10      	subs	r2, #16
    pool->usize  = 0;
 8007f28:	e9c0 1309 	strd	r1, r3, [r0, #36]	; 0x24
    node->pool = block_location + header_size;
 8007f2c:	600c      	str	r4, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8007f2e:	f100 041c 	add.w	r4, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 8007f32:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 8007f34:	e9c1 3301 	strd	r3, r3, [r1, #4]
    leaf->mempool = &leaf->_internal_mempool;
 8007f38:	6184      	str	r4, [r0, #24]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8007f3a:	6301      	str	r1, [r0, #48]	; 0x30
}
 8007f3c:	bc30      	pop	{r4, r5}
 8007f3e:	4770      	bx	lr

08007f40 <mpool_alloc>:
{
 8007f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    pool->leaf->allocCount++;
 8007f44:	684d      	ldr	r5, [r1, #4]
    if (pool->head == NULL)
 8007f46:	694e      	ldr	r6, [r1, #20]
    pool->leaf->allocCount++;
 8007f48:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	64ab      	str	r3, [r5, #72]	; 0x48
    if (pool->head == NULL)
 8007f4e:	2e00      	cmp	r6, #0
 8007f50:	d056      	beq.n	8008000 <mpool_alloc+0xc0>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8007f52:	1dc2      	adds	r2, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 8007f54:	4634      	mov	r4, r6
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8007f56:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
 8007f5a:	e002      	b.n	8007f62 <mpool_alloc+0x22>
        node_to_alloc = node_to_alloc->next;
 8007f5c:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
 8007f5e:	2c00      	cmp	r4, #0
 8007f60:	d03d      	beq.n	8007fde <mpool_alloc+0x9e>
    while (node_to_alloc->size < size_to_alloc)
 8007f62:	68e3      	ldr	r3, [r4, #12]
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d3f9      	bcc.n	8007f5c <mpool_alloc+0x1c>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8007f68:	1a9f      	subs	r7, r3, r2
    if (leftover > pool->leaf->header_size)
 8007f6a:	6b68      	ldr	r0, [r5, #52]	; 0x34
    node_to_alloc->size = size_to_alloc;
 8007f6c:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
 8007f6e:	42b8      	cmp	r0, r7
 8007f70:	d242      	bcs.n	8007ff8 <mpool_alloc+0xb8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8007f72:	f8d1 c008 	ldr.w	ip, [r1, #8]
        new_node = create_node(&pool->mpool[offset],
 8007f76:	1a3b      	subs	r3, r7, r0
        offset += pool->leaf->header_size + node_to_alloc->size;
 8007f78:	4402      	add	r2, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8007f7a:	eba4 070c 	sub.w	r7, r4, ip
        offset += pool->leaf->header_size + node_to_alloc->size;
 8007f7e:	443a      	add	r2, r7
        new_node = create_node(&pool->mpool[offset],
 8007f80:	eb0c 0702 	add.w	r7, ip, r2
                               node_to_alloc->next,
 8007f84:	e9d4 8e01 	ldrd	r8, lr, [r4, #4]
    node->pool = block_location + header_size;
 8007f88:	eb07 0900 	add.w	r9, r7, r0
 8007f8c:	f84c 9002 	str.w	r9, [ip, r2]
    node->size = size;
 8007f90:	60fb      	str	r3, [r7, #12]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8007f92:	68e3      	ldr	r3, [r4, #12]
    node->next = next;
 8007f94:	e9c7 8e01 	strd	r8, lr, [r7, #4]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8007f98:	6862      	ldr	r2, [r4, #4]
    if (pool->head == node_to_alloc)
 8007f9a:	42a6      	cmp	r6, r4
        pool->head = new_node;
 8007f9c:	bf08      	it	eq
 8007f9e:	614f      	streq	r7, [r1, #20]
    if (node->next != NULL)
 8007fa0:	b10a      	cbz	r2, 8007fa6 <mpool_alloc+0x66>
    {
        // Close the link
        node->next->prev = node->prev;
 8007fa2:	68a6      	ldr	r6, [r4, #8]
 8007fa4:	6096      	str	r6, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8007fa6:	68a6      	ldr	r6, [r4, #8]
 8007fa8:	b106      	cbz	r6, 8007fac <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 8007faa:	6072      	str	r2, [r6, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8007fac:	68ca      	ldr	r2, [r1, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8007fae:	696d      	ldr	r5, [r5, #20]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8007fb0:	4402      	add	r2, r0
    }
    
    node->next = NULL;
 8007fb2:	2000      	movs	r0, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8007fb4:	441a      	add	r2, r3
    if (pool->leaf->clearOnAllocation > 0)
 8007fb6:	4285      	cmp	r5, r0
    node->prev = NULL;
 8007fb8:	e9c4 0001 	strd	r0, r0, [r4, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8007fbc:	60ca      	str	r2, [r1, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8007fbe:	dd0a      	ble.n	8007fd6 <mpool_alloc+0x96>
        char* new_pool = (char*)node_to_alloc->pool;
 8007fc0:	6825      	ldr	r5, [r4, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8007fc2:	b373      	cbz	r3, 8008022 <mpool_alloc+0xe2>
 8007fc4:	1e6a      	subs	r2, r5, #1
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	f802 0f01 	strb.w	r0, [r2, #1]!
 8007fcc:	68e1      	ldr	r1, [r4, #12]
 8007fce:	3302      	adds	r3, #2
 8007fd0:	1b5b      	subs	r3, r3, r5
 8007fd2:	4299      	cmp	r1, r3
 8007fd4:	d8f7      	bhi.n	8007fc6 <mpool_alloc+0x86>
    return node_to_alloc->pool;
 8007fd6:	6824      	ldr	r4, [r4, #0]
}
 8007fd8:	4620      	mov	r0, r4
 8007fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if ((pool->msize - pool->usize) > asize)
 8007fde:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 8007fe2:	1a9b      	subs	r3, r3, r2
 8007fe4:	4283      	cmp	r3, r0
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007fe6:	4628      	mov	r0, r5
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8007fe8:	bf8c      	ite	hi
 8007fea:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007fec:	4621      	movls	r1, r4
 8007fee:	f000 f8b1 	bl	8008154 <LEAF_internalErrorCallback>
}
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_node = node_to_alloc->next;
 8007ff8:	6867      	ldr	r7, [r4, #4]
        node_to_alloc->size += leftover;
 8007ffa:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
 8007ffc:	463a      	mov	r2, r7
 8007ffe:	e7cc      	b.n	8007f9a <mpool_alloc+0x5a>
        if ((pool->msize - pool->usize) > asize)
 8008000:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 8008004:	1a9b      	subs	r3, r3, r2
 8008006:	4283      	cmp	r3, r0
 8008008:	d905      	bls.n	8008016 <mpool_alloc+0xd6>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800800a:	2101      	movs	r1, #1
 800800c:	4628      	mov	r0, r5
        return NULL;
 800800e:	4634      	mov	r4, r6
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8008010:	f000 f8a0 	bl	8008154 <LEAF_internalErrorCallback>
 8008014:	e7e0      	b.n	8007fd8 <mpool_alloc+0x98>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8008016:	4631      	mov	r1, r6
 8008018:	4628      	mov	r0, r5
        return NULL;
 800801a:	4634      	mov	r4, r6
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800801c:	f000 f89a 	bl	8008154 <LEAF_internalErrorCallback>
 8008020:	e7da      	b.n	8007fd8 <mpool_alloc+0x98>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8008022:	462c      	mov	r4, r5
    return node_to_alloc->pool;
 8008024:	e7d8      	b.n	8007fd8 <mpool_alloc+0x98>
 8008026:	bf00      	nop

08008028 <mpool_calloc>:
{
 8008028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pool->leaf->allocCount++;
 800802c:	684e      	ldr	r6, [r1, #4]
    if (pool->head == NULL)
 800802e:	694d      	ldr	r5, [r1, #20]
    pool->leaf->allocCount++;
 8008030:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8008032:	3301      	adds	r3, #1
 8008034:	64b3      	str	r3, [r6, #72]	; 0x48
    if (pool->head == NULL)
 8008036:	2d00      	cmp	r5, #0
 8008038:	d04e      	beq.n	80080d8 <mpool_calloc+0xb0>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800803a:	1dc2      	adds	r2, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 800803c:	462c      	mov	r4, r5
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800803e:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
 8008042:	e002      	b.n	800804a <mpool_calloc+0x22>
        node_to_alloc = node_to_alloc->next;
 8008044:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
 8008046:	2c00      	cmp	r4, #0
 8008048:	d035      	beq.n	80080b6 <mpool_calloc+0x8e>
    while (node_to_alloc->size < size_to_alloc)
 800804a:	68e3      	ldr	r3, [r4, #12]
 800804c:	4293      	cmp	r3, r2
 800804e:	d3f9      	bcc.n	8008044 <mpool_calloc+0x1c>
    if (leftover > pool->leaf->header_size)
 8008050:	6b70      	ldr	r0, [r6, #52]	; 0x34
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8008052:	1a9e      	subs	r6, r3, r2
    node_to_alloc->size = size_to_alloc;
 8008054:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
 8008056:	42b0      	cmp	r0, r6
 8008058:	d23a      	bcs.n	80080d0 <mpool_calloc+0xa8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800805a:	688f      	ldr	r7, [r1, #8]
        new_node = create_node(&pool->mpool[offset],
 800805c:	1a33      	subs	r3, r6, r0
        offset += pool->leaf->header_size + node_to_alloc->size;
 800805e:	4402      	add	r2, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8008060:	1be6      	subs	r6, r4, r7
        offset += pool->leaf->header_size + node_to_alloc->size;
 8008062:	4432      	add	r2, r6
        new_node = create_node(&pool->mpool[offset],
 8008064:	18be      	adds	r6, r7, r2
                               node_to_alloc->next,
 8008066:	e9d4 ec01 	ldrd	lr, ip, [r4, #4]
    node->pool = block_location + header_size;
 800806a:	eb06 0800 	add.w	r8, r6, r0
 800806e:	f847 8002 	str.w	r8, [r7, r2]
    node->size = size;
 8008072:	60f3      	str	r3, [r6, #12]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8008074:	68e3      	ldr	r3, [r4, #12]
    node->next = next;
 8008076:	e9c6 ec01 	strd	lr, ip, [r6, #4]
    if (node->next != NULL)
 800807a:	6862      	ldr	r2, [r4, #4]
    if (pool->head == node_to_alloc)
 800807c:	42a5      	cmp	r5, r4
        pool->head = new_node;
 800807e:	bf08      	it	eq
 8008080:	614e      	streq	r6, [r1, #20]
    if (node->next != NULL)
 8008082:	b10a      	cbz	r2, 8008088 <mpool_calloc+0x60>
        node->next->prev = node->prev;
 8008084:	68a5      	ldr	r5, [r4, #8]
 8008086:	6095      	str	r5, [r2, #8]
    if (node->prev != NULL)
 8008088:	68a5      	ldr	r5, [r4, #8]
 800808a:	b105      	cbz	r5, 800808e <mpool_calloc+0x66>
        node->prev->next = node->next;
 800808c:	606a      	str	r2, [r5, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800808e:	68cd      	ldr	r5, [r1, #12]
    node->next = NULL;
 8008090:	2200      	movs	r2, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8008092:	4428      	add	r0, r5
 8008094:	4418      	add	r0, r3
    node->prev = NULL;
 8008096:	e9c4 2201 	strd	r2, r2, [r4, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800809a:	60c8      	str	r0, [r1, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 800809c:	b13b      	cbz	r3, 80080ae <mpool_calloc+0x86>
 800809e:	4613      	mov	r3, r2
 80080a0:	4611      	mov	r1, r2
 80080a2:	6822      	ldr	r2, [r4, #0]
 80080a4:	54d1      	strb	r1, [r2, r3]
 80080a6:	3301      	adds	r3, #1
 80080a8:	68e2      	ldr	r2, [r4, #12]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d8f9      	bhi.n	80080a2 <mpool_calloc+0x7a>
    return node_to_alloc->pool;
 80080ae:	6824      	ldr	r4, [r4, #0]
}
 80080b0:	4620      	mov	r0, r4
 80080b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if ((pool->msize - pool->usize) > asize)
 80080b6:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 80080ba:	1a9b      	subs	r3, r3, r2
 80080bc:	4283      	cmp	r3, r0
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80080be:	4630      	mov	r0, r6
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80080c0:	bf8c      	ite	hi
 80080c2:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80080c4:	4621      	movls	r1, r4
 80080c6:	f000 f845 	bl	8008154 <LEAF_internalErrorCallback>
}
 80080ca:	4620      	mov	r0, r4
 80080cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        new_node = node_to_alloc->next;
 80080d0:	6866      	ldr	r6, [r4, #4]
        node_to_alloc->size += leftover;
 80080d2:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
 80080d4:	4632      	mov	r2, r6
 80080d6:	e7d1      	b.n	800807c <mpool_calloc+0x54>
        if ((pool->msize - pool->usize) > asize)
 80080d8:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 80080dc:	1a9b      	subs	r3, r3, r2
 80080de:	4283      	cmp	r3, r0
 80080e0:	d905      	bls.n	80080ee <mpool_calloc+0xc6>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80080e2:	2101      	movs	r1, #1
 80080e4:	4630      	mov	r0, r6
        return NULL;
 80080e6:	462c      	mov	r4, r5
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80080e8:	f000 f834 	bl	8008154 <LEAF_internalErrorCallback>
 80080ec:	e7e0      	b.n	80080b0 <mpool_calloc+0x88>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80080ee:	4629      	mov	r1, r5
 80080f0:	4630      	mov	r0, r6
        return NULL;
 80080f2:	462c      	mov	r4, r5
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80080f4:	f000 f82e 	bl	8008154 <LEAF_internalErrorCallback>
 80080f8:	e7da      	b.n	80080b0 <mpool_calloc+0x88>
 80080fa:	bf00      	nop

080080fc <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop

08008100 <LEAF_init>:
{
 8008100:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 8008102:	6200      	str	r0, [r0, #32]
{
 8008104:	4604      	mov	r4, r0
 8008106:	461d      	mov	r5, r3
 8008108:	ed2d 8b02 	vpush	{d8}
 800810c:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 8008110:	f7ff ff02 	bl	8007f18 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 8008114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8008118:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800814c <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 800811c:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800811e:	4b0c      	ldr	r3, [pc, #48]	; (8008150 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 8008120:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 8008124:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 8008128:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 800812a:	6162      	str	r2, [r4, #20]
}
 800812c:	ecbd 8b02 	vpop	{d8}
        leaf->errorState[i] = 0;
 8008130:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8008134:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 8008138:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800813c:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 8008140:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8008144:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8008148:	bd38      	pop	{r3, r4, r5, pc}
 800814a:	bf00      	nop
 800814c:	40c90fdb 	.word	0x40c90fdb
 8008150:	080080fd 	.word	0x080080fd

08008154 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8008154:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 8008156:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800815a:	2401      	movs	r4, #1
    leaf->errorCallback(leaf, whichone);
 800815c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    leaf->errorState[whichone] = 1;
 800815e:	63d4      	str	r4, [r2, #60]	; 0x3c
}
 8008160:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 8008164:	4718      	bx	r3
 8008166:	bf00      	nop

08008168 <__errno>:
 8008168:	4b01      	ldr	r3, [pc, #4]	; (8008170 <__errno+0x8>)
 800816a:	6818      	ldr	r0, [r3, #0]
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	20000044 	.word	0x20000044

08008174 <__libc_init_array>:
 8008174:	b570      	push	{r4, r5, r6, lr}
 8008176:	4d0d      	ldr	r5, [pc, #52]	; (80081ac <__libc_init_array+0x38>)
 8008178:	4c0d      	ldr	r4, [pc, #52]	; (80081b0 <__libc_init_array+0x3c>)
 800817a:	1b64      	subs	r4, r4, r5
 800817c:	10a4      	asrs	r4, r4, #2
 800817e:	2600      	movs	r6, #0
 8008180:	42a6      	cmp	r6, r4
 8008182:	d109      	bne.n	8008198 <__libc_init_array+0x24>
 8008184:	4d0b      	ldr	r5, [pc, #44]	; (80081b4 <__libc_init_array+0x40>)
 8008186:	4c0c      	ldr	r4, [pc, #48]	; (80081b8 <__libc_init_array+0x44>)
 8008188:	f001 f84a 	bl	8009220 <_init>
 800818c:	1b64      	subs	r4, r4, r5
 800818e:	10a4      	asrs	r4, r4, #2
 8008190:	2600      	movs	r6, #0
 8008192:	42a6      	cmp	r6, r4
 8008194:	d105      	bne.n	80081a2 <__libc_init_array+0x2e>
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	f855 3b04 	ldr.w	r3, [r5], #4
 800819c:	4798      	blx	r3
 800819e:	3601      	adds	r6, #1
 80081a0:	e7ee      	b.n	8008180 <__libc_init_array+0xc>
 80081a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a6:	4798      	blx	r3
 80081a8:	3601      	adds	r6, #1
 80081aa:	e7f2      	b.n	8008192 <__libc_init_array+0x1e>
 80081ac:	080099b4 	.word	0x080099b4
 80081b0:	080099b4 	.word	0x080099b4
 80081b4:	080099b4 	.word	0x080099b4
 80081b8:	080099b8 	.word	0x080099b8

080081bc <memset>:
 80081bc:	4402      	add	r2, r0
 80081be:	4603      	mov	r3, r0
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d100      	bne.n	80081c6 <memset+0xa>
 80081c4:	4770      	bx	lr
 80081c6:	f803 1b01 	strb.w	r1, [r3], #1
 80081ca:	e7f9      	b.n	80081c0 <memset+0x4>

080081cc <with_errnof>:
 80081cc:	b513      	push	{r0, r1, r4, lr}
 80081ce:	4604      	mov	r4, r0
 80081d0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80081d4:	f7ff ffc8 	bl	8008168 <__errno>
 80081d8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80081dc:	6004      	str	r4, [r0, #0]
 80081de:	b002      	add	sp, #8
 80081e0:	bd10      	pop	{r4, pc}

080081e2 <xflowf>:
 80081e2:	b130      	cbz	r0, 80081f2 <xflowf+0x10>
 80081e4:	eef1 7a40 	vneg.f32	s15, s0
 80081e8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80081ec:	2022      	movs	r0, #34	; 0x22
 80081ee:	f7ff bfed 	b.w	80081cc <with_errnof>
 80081f2:	eef0 7a40 	vmov.f32	s15, s0
 80081f6:	e7f7      	b.n	80081e8 <xflowf+0x6>

080081f8 <__math_uflowf>:
 80081f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008200 <__math_uflowf+0x8>
 80081fc:	f7ff bff1 	b.w	80081e2 <xflowf>
 8008200:	10000000 	.word	0x10000000

08008204 <__math_may_uflowf>:
 8008204:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800820c <__math_may_uflowf+0x8>
 8008208:	f7ff bfeb 	b.w	80081e2 <xflowf>
 800820c:	1a200000 	.word	0x1a200000

08008210 <__math_oflowf>:
 8008210:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008218 <__math_oflowf+0x8>
 8008214:	f7ff bfe5 	b.w	80081e2 <xflowf>
 8008218:	70000000 	.word	0x70000000

0800821c <__math_divzerof>:
 800821c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008220:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8008224:	2800      	cmp	r0, #0
 8008226:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800822a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8008238 <__math_divzerof+0x1c>
 800822e:	2022      	movs	r0, #34	; 0x22
 8008230:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008234:	f7ff bfca 	b.w	80081cc <with_errnof>
 8008238:	00000000 	.word	0x00000000

0800823c <__math_invalidf>:
 800823c:	eef0 7a40 	vmov.f32	s15, s0
 8008240:	ee30 7a40 	vsub.f32	s14, s0, s0
 8008244:	eef4 7a67 	vcmp.f32	s15, s15
 8008248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800824c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8008250:	d602      	bvs.n	8008258 <__math_invalidf+0x1c>
 8008252:	2021      	movs	r0, #33	; 0x21
 8008254:	f7ff bfba 	b.w	80081cc <with_errnof>
 8008258:	4770      	bx	lr

0800825a <fabsf>:
 800825a:	ee10 3a10 	vmov	r3, s0
 800825e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008262:	ee00 3a10 	vmov	s0, r3
 8008266:	4770      	bx	lr

08008268 <logf>:
 8008268:	ee10 3a10 	vmov	r3, s0
 800826c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8008270:	b410      	push	{r4}
 8008272:	d055      	beq.n	8008320 <logf+0xb8>
 8008274:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8008278:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800827c:	d31a      	bcc.n	80082b4 <logf+0x4c>
 800827e:	005a      	lsls	r2, r3, #1
 8008280:	d104      	bne.n	800828c <logf+0x24>
 8008282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008286:	2001      	movs	r0, #1
 8008288:	f7ff bfc8 	b.w	800821c <__math_divzerof>
 800828c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008290:	d043      	beq.n	800831a <logf+0xb2>
 8008292:	2b00      	cmp	r3, #0
 8008294:	db02      	blt.n	800829c <logf+0x34>
 8008296:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800829a:	d303      	bcc.n	80082a4 <logf+0x3c>
 800829c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a0:	f7ff bfcc 	b.w	800823c <__math_invalidf>
 80082a4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8008328 <logf+0xc0>
 80082a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80082ac:	ee10 3a10 	vmov	r3, s0
 80082b0:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80082b4:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 80082b8:	491c      	ldr	r1, [pc, #112]	; (800832c <logf+0xc4>)
 80082ba:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 80082be:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80082c2:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80082c6:	0dd4      	lsrs	r4, r2, #23
 80082c8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80082cc:	05e4      	lsls	r4, r4, #23
 80082ce:	ed90 6b00 	vldr	d6, [r0]
 80082d2:	1b1b      	subs	r3, r3, r4
 80082d4:	ee07 3a90 	vmov	s15, r3
 80082d8:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 80082dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80082e0:	15d2      	asrs	r2, r2, #23
 80082e2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80082e6:	ed90 6b02 	vldr	d6, [r0, #8]
 80082ea:	ee20 4b00 	vmul.f64	d4, d0, d0
 80082ee:	ee07 2a90 	vmov	s15, r2
 80082f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80082f6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80082fa:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 80082fe:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8008302:	eea5 7b00 	vfma.f64	d7, d5, d0
 8008306:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800830a:	ee30 0b06 	vadd.f64	d0, d0, d6
 800830e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8008312:	eea4 0b07 	vfma.f64	d0, d4, d7
 8008316:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800831a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8008330 <logf+0xc8>
 8008324:	e7f9      	b.n	800831a <logf+0xb2>
 8008326:	bf00      	nop
 8008328:	4b000000 	.word	0x4b000000
 800832c:	08009398 	.word	0x08009398
 8008330:	00000000 	.word	0x00000000

08008334 <checkint>:
 8008334:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008338:	2b7e      	cmp	r3, #126	; 0x7e
 800833a:	dd10      	ble.n	800835e <checkint+0x2a>
 800833c:	2b96      	cmp	r3, #150	; 0x96
 800833e:	dc0c      	bgt.n	800835a <checkint+0x26>
 8008340:	2201      	movs	r2, #1
 8008342:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8008346:	fa02 f303 	lsl.w	r3, r2, r3
 800834a:	1e5a      	subs	r2, r3, #1
 800834c:	4202      	tst	r2, r0
 800834e:	d106      	bne.n	800835e <checkint+0x2a>
 8008350:	4203      	tst	r3, r0
 8008352:	bf0c      	ite	eq
 8008354:	2002      	moveq	r0, #2
 8008356:	2001      	movne	r0, #1
 8008358:	4770      	bx	lr
 800835a:	2002      	movs	r0, #2
 800835c:	4770      	bx	lr
 800835e:	2000      	movs	r0, #0
 8008360:	4770      	bx	lr
 8008362:	0000      	movs	r0, r0
 8008364:	0000      	movs	r0, r0
	...

08008368 <powf>:
 8008368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800836a:	ee10 1a10 	vmov	r1, s0
 800836e:	ee10 4a90 	vmov	r4, s1
 8008372:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8008376:	0062      	lsls	r2, r4, #1
 8008378:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800837c:	eef0 7a40 	vmov.f32	s15, s0
 8008380:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8008384:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8008388:	d252      	bcs.n	8008430 <powf+0xc8>
 800838a:	4298      	cmp	r0, r3
 800838c:	d252      	bcs.n	8008434 <powf+0xcc>
 800838e:	2000      	movs	r0, #0
 8008390:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8008394:	4ca0      	ldr	r4, [pc, #640]	; (8008618 <powf+0x2b0>)
 8008396:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800839a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800839e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 80083a2:	0dd2      	lsrs	r2, r2, #23
 80083a4:	05d2      	lsls	r2, r2, #23
 80083a6:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 80083aa:	1a8b      	subs	r3, r1, r2
 80083ac:	ed95 6b00 	vldr	d6, [r5]
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	15d2      	asrs	r2, r2, #23
 80083b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80083ba:	eea6 5b07 	vfma.f64	d5, d6, d7
 80083be:	ed95 6b02 	vldr	d6, [r5, #8]
 80083c2:	ee25 2b05 	vmul.f64	d2, d5, d5
 80083c6:	ee22 1b02 	vmul.f64	d1, d2, d2
 80083ca:	ee07 2a90 	vmov	s15, r2
 80083ce:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 80083d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80083da:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 80083de:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 80083e2:	eea5 3b06 	vfma.f64	d3, d5, d6
 80083e6:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 80083ea:	eea5 6b04 	vfma.f64	d6, d5, d4
 80083ee:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 80083f2:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80083f6:	eea5 7b04 	vfma.f64	d7, d5, d4
 80083fa:	eea2 7b06 	vfma.f64	d7, d2, d6
 80083fe:	eea3 7b01 	vfma.f64	d7, d3, d1
 8008402:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008406:	ee10 3a90 	vmov	r3, s1
 800840a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 800840e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8008412:	429a      	cmp	r2, r3
 8008414:	f0c0 80b1 	bcc.w	800857a <powf+0x212>
 8008418:	ed9f 7b77 	vldr	d7, [pc, #476]	; 80085f8 <powf+0x290>
 800841c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008424:	dd79      	ble.n	800851a <powf+0x1b2>
 8008426:	b003      	add	sp, #12
 8008428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800842c:	f7ff bef0 	b.w	8008210 <__math_oflowf>
 8008430:	4298      	cmp	r0, r3
 8008432:	d32d      	bcc.n	8008490 <powf+0x128>
 8008434:	b952      	cbnz	r2, 800844c <powf+0xe4>
 8008436:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8008440:	f240 80c9 	bls.w	80085d6 <powf+0x26e>
 8008444:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8008448:	b003      	add	sp, #12
 800844a:	bd30      	pop	{r4, r5, pc}
 800844c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8008450:	d105      	bne.n	800845e <powf+0xf6>
 8008452:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8008456:	0064      	lsls	r4, r4, #1
 8008458:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800845c:	e7f0      	b.n	8008440 <powf+0xd8>
 800845e:	004b      	lsls	r3, r1, #1
 8008460:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8008464:	d8ee      	bhi.n	8008444 <powf+0xdc>
 8008466:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800846a:	d1eb      	bne.n	8008444 <powf+0xdc>
 800846c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8008470:	f000 80b1 	beq.w	80085d6 <powf+0x26e>
 8008474:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8008478:	ea6f 0404 	mvn.w	r4, r4
 800847c:	bf34      	ite	cc
 800847e:	2300      	movcc	r3, #0
 8008480:	2301      	movcs	r3, #1
 8008482:	0fe4      	lsrs	r4, r4, #31
 8008484:	42a3      	cmp	r3, r4
 8008486:	f040 80a9 	bne.w	80085dc <powf+0x274>
 800848a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800848e:	e7db      	b.n	8008448 <powf+0xe0>
 8008490:	004d      	lsls	r5, r1, #1
 8008492:	1e6a      	subs	r2, r5, #1
 8008494:	429a      	cmp	r2, r3
 8008496:	d31c      	bcc.n	80084d2 <powf+0x16a>
 8008498:	2900      	cmp	r1, #0
 800849a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800849e:	da0f      	bge.n	80084c0 <powf+0x158>
 80084a0:	ee10 0a90 	vmov	r0, s1
 80084a4:	f7ff ff46 	bl	8008334 <checkint>
 80084a8:	2801      	cmp	r0, #1
 80084aa:	d109      	bne.n	80084c0 <powf+0x158>
 80084ac:	eeb1 0a40 	vneg.f32	s0, s0
 80084b0:	b945      	cbnz	r5, 80084c4 <powf+0x15c>
 80084b2:	2c00      	cmp	r4, #0
 80084b4:	dac8      	bge.n	8008448 <powf+0xe0>
 80084b6:	b003      	add	sp, #12
 80084b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084bc:	f7ff beae 	b.w	800821c <__math_divzerof>
 80084c0:	2000      	movs	r0, #0
 80084c2:	e7f5      	b.n	80084b0 <powf+0x148>
 80084c4:	2c00      	cmp	r4, #0
 80084c6:	dabf      	bge.n	8008448 <powf+0xe0>
 80084c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80084cc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80084d0:	e7ba      	b.n	8008448 <powf+0xe0>
 80084d2:	2900      	cmp	r1, #0
 80084d4:	da1f      	bge.n	8008516 <powf+0x1ae>
 80084d6:	ee10 0a90 	vmov	r0, s1
 80084da:	f7ff ff2b 	bl	8008334 <checkint>
 80084de:	b920      	cbnz	r0, 80084ea <powf+0x182>
 80084e0:	b003      	add	sp, #12
 80084e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084e6:	f7ff bea9 	b.w	800823c <__math_invalidf>
 80084ea:	2801      	cmp	r0, #1
 80084ec:	bf14      	ite	ne
 80084ee:	2000      	movne	r0, #0
 80084f0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80084f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80084f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80084fc:	f4bf af48 	bcs.w	8008390 <powf+0x28>
 8008500:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800861c <powf+0x2b4>
 8008504:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008508:	ee10 3a10 	vmov	r3, s0
 800850c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008510:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8008514:	e73c      	b.n	8008390 <powf+0x28>
 8008516:	2000      	movs	r0, #0
 8008518:	e7ee      	b.n	80084f8 <powf+0x190>
 800851a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8008600 <powf+0x298>
 800851e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008526:	dd10      	ble.n	800854a <powf+0x1e2>
 8008528:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800852c:	2800      	cmp	r0, #0
 800852e:	d158      	bne.n	80085e2 <powf+0x27a>
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	eddd 7a00 	vldr	s15, [sp]
 8008536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800853a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800853e:	eef4 7a47 	vcmp.f32	s15, s14
 8008542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008546:	f47f af6e 	bne.w	8008426 <powf+0xbe>
 800854a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008608 <powf+0x2a0>
 800854e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008556:	d804      	bhi.n	8008562 <powf+0x1fa>
 8008558:	b003      	add	sp, #12
 800855a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800855e:	f7ff be4b 	b.w	80081f8 <__math_uflowf>
 8008562:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8008610 <powf+0x2a8>
 8008566:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800856a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800856e:	d504      	bpl.n	800857a <powf+0x212>
 8008570:	b003      	add	sp, #12
 8008572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008576:	f7ff be45 	b.w	8008204 <__math_may_uflowf>
 800857a:	4b29      	ldr	r3, [pc, #164]	; (8008620 <powf+0x2b8>)
 800857c:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8008580:	ee30 6b07 	vadd.f64	d6, d0, d7
 8008584:	ee16 2a10 	vmov	r2, s12
 8008588:	ee36 7b47 	vsub.f64	d7, d6, d7
 800858c:	f002 011f 	and.w	r1, r2, #31
 8008590:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8008594:	ee30 7b47 	vsub.f64	d7, d0, d7
 8008598:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800859c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80085a0:	ee27 4b07 	vmul.f64	d4, d7, d7
 80085a4:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80085a8:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80085ac:	eea7 6b05 	vfma.f64	d6, d7, d5
 80085b0:	686d      	ldr	r5, [r5, #4]
 80085b2:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80085b6:	1882      	adds	r2, r0, r2
 80085b8:	2300      	movs	r3, #0
 80085ba:	1918      	adds	r0, r3, r4
 80085bc:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80085c0:	eea7 0b05 	vfma.f64	d0, d7, d5
 80085c4:	ec41 0b17 	vmov	d7, r0, r1
 80085c8:	eea6 0b04 	vfma.f64	d0, d6, d4
 80085cc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80085d0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80085d4:	e738      	b.n	8008448 <powf+0xe0>
 80085d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80085da:	e735      	b.n	8008448 <powf+0xe0>
 80085dc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8008624 <powf+0x2bc>
 80085e0:	e732      	b.n	8008448 <powf+0xe0>
 80085e2:	9301      	str	r3, [sp, #4]
 80085e4:	eddd 7a01 	vldr	s15, [sp, #4]
 80085e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80085ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085f0:	e7a5      	b.n	800853e <powf+0x1d6>
 80085f2:	bf00      	nop
 80085f4:	f3af 8000 	nop.w
 80085f8:	ffd1d571 	.word	0xffd1d571
 80085fc:	405fffff 	.word	0x405fffff
 8008600:	ffa3aae2 	.word	0xffa3aae2
 8008604:	405fffff 	.word	0x405fffff
 8008608:	00000000 	.word	0x00000000
 800860c:	c062c000 	.word	0xc062c000
 8008610:	00000000 	.word	0x00000000
 8008614:	c062a000 	.word	0xc062a000
 8008618:	080094b8 	.word	0x080094b8
 800861c:	4b000000 	.word	0x4b000000
 8008620:	08009250 	.word	0x08009250
 8008624:	00000000 	.word	0x00000000

08008628 <tanf>:
 8008628:	ee10 3a10 	vmov	r3, s0
 800862c:	b507      	push	{r0, r1, r2, lr}
 800862e:	4a12      	ldr	r2, [pc, #72]	; (8008678 <tanf+0x50>)
 8008630:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008634:	4293      	cmp	r3, r2
 8008636:	dc07      	bgt.n	8008648 <tanf+0x20>
 8008638:	eddf 0a10 	vldr	s1, [pc, #64]	; 800867c <tanf+0x54>
 800863c:	2001      	movs	r0, #1
 800863e:	b003      	add	sp, #12
 8008640:	f85d eb04 	ldr.w	lr, [sp], #4
 8008644:	f000 bc54 	b.w	8008ef0 <__kernel_tanf>
 8008648:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800864c:	db04      	blt.n	8008658 <tanf+0x30>
 800864e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008652:	b003      	add	sp, #12
 8008654:	f85d fb04 	ldr.w	pc, [sp], #4
 8008658:	4668      	mov	r0, sp
 800865a:	f000 f897 	bl	800878c <__ieee754_rem_pio2f>
 800865e:	0040      	lsls	r0, r0, #1
 8008660:	f000 0002 	and.w	r0, r0, #2
 8008664:	eddd 0a01 	vldr	s1, [sp, #4]
 8008668:	ed9d 0a00 	vldr	s0, [sp]
 800866c:	f1c0 0001 	rsb	r0, r0, #1
 8008670:	f000 fc3e 	bl	8008ef0 <__kernel_tanf>
 8008674:	e7ed      	b.n	8008652 <tanf+0x2a>
 8008676:	bf00      	nop
 8008678:	3f490fda 	.word	0x3f490fda
 800867c:	00000000 	.word	0x00000000

08008680 <log10f>:
 8008680:	b508      	push	{r3, lr}
 8008682:	ed2d 8b02 	vpush	{d8}
 8008686:	eeb0 8a40 	vmov.f32	s16, s0
 800868a:	f000 f827 	bl	80086dc <__ieee754_log10f>
 800868e:	eeb4 8a48 	vcmp.f32	s16, s16
 8008692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008696:	d60f      	bvs.n	80086b8 <log10f+0x38>
 8008698:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800869c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086a0:	d80a      	bhi.n	80086b8 <log10f+0x38>
 80086a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80086a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086aa:	d108      	bne.n	80086be <log10f+0x3e>
 80086ac:	f7ff fd5c 	bl	8008168 <__errno>
 80086b0:	2322      	movs	r3, #34	; 0x22
 80086b2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80086d4 <log10f+0x54>
 80086b6:	6003      	str	r3, [r0, #0]
 80086b8:	ecbd 8b02 	vpop	{d8}
 80086bc:	bd08      	pop	{r3, pc}
 80086be:	f7ff fd53 	bl	8008168 <__errno>
 80086c2:	ecbd 8b02 	vpop	{d8}
 80086c6:	2321      	movs	r3, #33	; 0x21
 80086c8:	6003      	str	r3, [r0, #0]
 80086ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80086ce:	4802      	ldr	r0, [pc, #8]	; (80086d8 <log10f+0x58>)
 80086d0:	f000 bd30 	b.w	8009134 <nanf>
 80086d4:	ff800000 	.word	0xff800000
 80086d8:	080095e0 	.word	0x080095e0

080086dc <__ieee754_log10f>:
 80086dc:	b508      	push	{r3, lr}
 80086de:	ee10 2a10 	vmov	r2, s0
 80086e2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80086e6:	ed2d 8b02 	vpush	{d8}
 80086ea:	d108      	bne.n	80086fe <__ieee754_log10f+0x22>
 80086ec:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8008774 <__ieee754_log10f+0x98>
 80086f0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8008778 <__ieee754_log10f+0x9c>
 80086f4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80086f8:	ecbd 8b02 	vpop	{d8}
 80086fc:	bd08      	pop	{r3, pc}
 80086fe:	2a00      	cmp	r2, #0
 8008700:	da02      	bge.n	8008708 <__ieee754_log10f+0x2c>
 8008702:	ee30 7a40 	vsub.f32	s14, s0, s0
 8008706:	e7f3      	b.n	80086f0 <__ieee754_log10f+0x14>
 8008708:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800870c:	db02      	blt.n	8008714 <__ieee754_log10f+0x38>
 800870e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008712:	e7f1      	b.n	80086f8 <__ieee754_log10f+0x1c>
 8008714:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008718:	bfbf      	itttt	lt
 800871a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800877c <__ieee754_log10f+0xa0>
 800871e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8008722:	f06f 0118 	mvnlt.w	r1, #24
 8008726:	ee17 2a90 	vmovlt	r2, s15
 800872a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800872e:	bfa8      	it	ge
 8008730:	2100      	movge	r1, #0
 8008732:	3b7f      	subs	r3, #127	; 0x7f
 8008734:	440b      	add	r3, r1
 8008736:	0fd9      	lsrs	r1, r3, #31
 8008738:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800873c:	ee07 3a90 	vmov	s15, r3
 8008740:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8008744:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8008748:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800874c:	ee00 3a10 	vmov	s0, r3
 8008750:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8008754:	f7ff fd88 	bl	8008268 <logf>
 8008758:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008780 <__ieee754_log10f+0xa4>
 800875c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008760:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008784 <__ieee754_log10f+0xa8>
 8008764:	eea8 0a27 	vfma.f32	s0, s16, s15
 8008768:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008788 <__ieee754_log10f+0xac>
 800876c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8008770:	e7c2      	b.n	80086f8 <__ieee754_log10f+0x1c>
 8008772:	bf00      	nop
 8008774:	cc000000 	.word	0xcc000000
 8008778:	00000000 	.word	0x00000000
 800877c:	4c000000 	.word	0x4c000000
 8008780:	3ede5bd9 	.word	0x3ede5bd9
 8008784:	355427db 	.word	0x355427db
 8008788:	3e9a2080 	.word	0x3e9a2080

0800878c <__ieee754_rem_pio2f>:
 800878c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800878e:	ee10 6a10 	vmov	r6, s0
 8008792:	4b8e      	ldr	r3, [pc, #568]	; (80089cc <__ieee754_rem_pio2f+0x240>)
 8008794:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008798:	429d      	cmp	r5, r3
 800879a:	b087      	sub	sp, #28
 800879c:	eef0 7a40 	vmov.f32	s15, s0
 80087a0:	4604      	mov	r4, r0
 80087a2:	dc05      	bgt.n	80087b0 <__ieee754_rem_pio2f+0x24>
 80087a4:	2300      	movs	r3, #0
 80087a6:	ed80 0a00 	vstr	s0, [r0]
 80087aa:	6043      	str	r3, [r0, #4]
 80087ac:	2000      	movs	r0, #0
 80087ae:	e01a      	b.n	80087e6 <__ieee754_rem_pio2f+0x5a>
 80087b0:	4b87      	ldr	r3, [pc, #540]	; (80089d0 <__ieee754_rem_pio2f+0x244>)
 80087b2:	429d      	cmp	r5, r3
 80087b4:	dc46      	bgt.n	8008844 <__ieee754_rem_pio2f+0xb8>
 80087b6:	2e00      	cmp	r6, #0
 80087b8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80089d4 <__ieee754_rem_pio2f+0x248>
 80087bc:	4b86      	ldr	r3, [pc, #536]	; (80089d8 <__ieee754_rem_pio2f+0x24c>)
 80087be:	f025 050f 	bic.w	r5, r5, #15
 80087c2:	dd1f      	ble.n	8008804 <__ieee754_rem_pio2f+0x78>
 80087c4:	429d      	cmp	r5, r3
 80087c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80087ca:	d00e      	beq.n	80087ea <__ieee754_rem_pio2f+0x5e>
 80087cc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80089dc <__ieee754_rem_pio2f+0x250>
 80087d0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80087d4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80087d8:	ed80 0a00 	vstr	s0, [r0]
 80087dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087e0:	2001      	movs	r0, #1
 80087e2:	edc4 7a01 	vstr	s15, [r4, #4]
 80087e6:	b007      	add	sp, #28
 80087e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ea:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80089e0 <__ieee754_rem_pio2f+0x254>
 80087ee:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80089e4 <__ieee754_rem_pio2f+0x258>
 80087f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80087f6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80087fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80087fe:	edc0 6a00 	vstr	s13, [r0]
 8008802:	e7eb      	b.n	80087dc <__ieee754_rem_pio2f+0x50>
 8008804:	429d      	cmp	r5, r3
 8008806:	ee77 7a80 	vadd.f32	s15, s15, s0
 800880a:	d00e      	beq.n	800882a <__ieee754_rem_pio2f+0x9e>
 800880c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80089dc <__ieee754_rem_pio2f+0x250>
 8008810:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008814:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008818:	ed80 0a00 	vstr	s0, [r0]
 800881c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008824:	edc4 7a01 	vstr	s15, [r4, #4]
 8008828:	e7dd      	b.n	80087e6 <__ieee754_rem_pio2f+0x5a>
 800882a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80089e0 <__ieee754_rem_pio2f+0x254>
 800882e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80089e4 <__ieee754_rem_pio2f+0x258>
 8008832:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008836:	ee77 6a87 	vadd.f32	s13, s15, s14
 800883a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800883e:	edc0 6a00 	vstr	s13, [r0]
 8008842:	e7eb      	b.n	800881c <__ieee754_rem_pio2f+0x90>
 8008844:	4b68      	ldr	r3, [pc, #416]	; (80089e8 <__ieee754_rem_pio2f+0x25c>)
 8008846:	429d      	cmp	r5, r3
 8008848:	dc72      	bgt.n	8008930 <__ieee754_rem_pio2f+0x1a4>
 800884a:	f7ff fd06 	bl	800825a <fabsf>
 800884e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80089ec <__ieee754_rem_pio2f+0x260>
 8008852:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008856:	eee0 7a07 	vfma.f32	s15, s0, s14
 800885a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800885e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008862:	ee17 0a90 	vmov	r0, s15
 8008866:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80089d4 <__ieee754_rem_pio2f+0x248>
 800886a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800886e:	281f      	cmp	r0, #31
 8008870:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80089dc <__ieee754_rem_pio2f+0x250>
 8008874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008878:	eeb1 6a47 	vneg.f32	s12, s14
 800887c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008880:	ee16 2a90 	vmov	r2, s13
 8008884:	dc1c      	bgt.n	80088c0 <__ieee754_rem_pio2f+0x134>
 8008886:	495a      	ldr	r1, [pc, #360]	; (80089f0 <__ieee754_rem_pio2f+0x264>)
 8008888:	1e47      	subs	r7, r0, #1
 800888a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800888e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008892:	428b      	cmp	r3, r1
 8008894:	d014      	beq.n	80088c0 <__ieee754_rem_pio2f+0x134>
 8008896:	6022      	str	r2, [r4, #0]
 8008898:	ed94 7a00 	vldr	s14, [r4]
 800889c:	ee30 0a47 	vsub.f32	s0, s0, s14
 80088a0:	2e00      	cmp	r6, #0
 80088a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80088a6:	ed84 0a01 	vstr	s0, [r4, #4]
 80088aa:	da9c      	bge.n	80087e6 <__ieee754_rem_pio2f+0x5a>
 80088ac:	eeb1 7a47 	vneg.f32	s14, s14
 80088b0:	eeb1 0a40 	vneg.f32	s0, s0
 80088b4:	ed84 7a00 	vstr	s14, [r4]
 80088b8:	ed84 0a01 	vstr	s0, [r4, #4]
 80088bc:	4240      	negs	r0, r0
 80088be:	e792      	b.n	80087e6 <__ieee754_rem_pio2f+0x5a>
 80088c0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80088c4:	15eb      	asrs	r3, r5, #23
 80088c6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80088ca:	2d08      	cmp	r5, #8
 80088cc:	dde3      	ble.n	8008896 <__ieee754_rem_pio2f+0x10a>
 80088ce:	eddf 7a44 	vldr	s15, [pc, #272]	; 80089e0 <__ieee754_rem_pio2f+0x254>
 80088d2:	eddf 5a44 	vldr	s11, [pc, #272]	; 80089e4 <__ieee754_rem_pio2f+0x258>
 80088d6:	eef0 6a40 	vmov.f32	s13, s0
 80088da:	eee6 6a27 	vfma.f32	s13, s12, s15
 80088de:	ee30 0a66 	vsub.f32	s0, s0, s13
 80088e2:	eea6 0a27 	vfma.f32	s0, s12, s15
 80088e6:	eef0 7a40 	vmov.f32	s15, s0
 80088ea:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80088ee:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80088f2:	ee15 2a90 	vmov	r2, s11
 80088f6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80088fa:	1a5b      	subs	r3, r3, r1
 80088fc:	2b19      	cmp	r3, #25
 80088fe:	dc04      	bgt.n	800890a <__ieee754_rem_pio2f+0x17e>
 8008900:	edc4 5a00 	vstr	s11, [r4]
 8008904:	eeb0 0a66 	vmov.f32	s0, s13
 8008908:	e7c6      	b.n	8008898 <__ieee754_rem_pio2f+0x10c>
 800890a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80089f4 <__ieee754_rem_pio2f+0x268>
 800890e:	eeb0 0a66 	vmov.f32	s0, s13
 8008912:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008916:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800891a:	eddf 6a37 	vldr	s13, [pc, #220]	; 80089f8 <__ieee754_rem_pio2f+0x26c>
 800891e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008922:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008926:	ee30 7a67 	vsub.f32	s14, s0, s15
 800892a:	ed84 7a00 	vstr	s14, [r4]
 800892e:	e7b3      	b.n	8008898 <__ieee754_rem_pio2f+0x10c>
 8008930:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008934:	db06      	blt.n	8008944 <__ieee754_rem_pio2f+0x1b8>
 8008936:	ee70 7a40 	vsub.f32	s15, s0, s0
 800893a:	edc0 7a01 	vstr	s15, [r0, #4]
 800893e:	edc0 7a00 	vstr	s15, [r0]
 8008942:	e733      	b.n	80087ac <__ieee754_rem_pio2f+0x20>
 8008944:	15ea      	asrs	r2, r5, #23
 8008946:	3a86      	subs	r2, #134	; 0x86
 8008948:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800894c:	ee07 3a90 	vmov	s15, r3
 8008950:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008954:	eddf 6a29 	vldr	s13, [pc, #164]	; 80089fc <__ieee754_rem_pio2f+0x270>
 8008958:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800895c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008960:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008964:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008968:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800896c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008970:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008974:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008978:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800897c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008984:	edcd 7a05 	vstr	s15, [sp, #20]
 8008988:	d11e      	bne.n	80089c8 <__ieee754_rem_pio2f+0x23c>
 800898a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800898e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008992:	bf14      	ite	ne
 8008994:	2302      	movne	r3, #2
 8008996:	2301      	moveq	r3, #1
 8008998:	4919      	ldr	r1, [pc, #100]	; (8008a00 <__ieee754_rem_pio2f+0x274>)
 800899a:	9101      	str	r1, [sp, #4]
 800899c:	2102      	movs	r1, #2
 800899e:	9100      	str	r1, [sp, #0]
 80089a0:	a803      	add	r0, sp, #12
 80089a2:	4621      	mov	r1, r4
 80089a4:	f000 f82e 	bl	8008a04 <__kernel_rem_pio2f>
 80089a8:	2e00      	cmp	r6, #0
 80089aa:	f6bf af1c 	bge.w	80087e6 <__ieee754_rem_pio2f+0x5a>
 80089ae:	edd4 7a00 	vldr	s15, [r4]
 80089b2:	eef1 7a67 	vneg.f32	s15, s15
 80089b6:	edc4 7a00 	vstr	s15, [r4]
 80089ba:	edd4 7a01 	vldr	s15, [r4, #4]
 80089be:	eef1 7a67 	vneg.f32	s15, s15
 80089c2:	edc4 7a01 	vstr	s15, [r4, #4]
 80089c6:	e779      	b.n	80088bc <__ieee754_rem_pio2f+0x130>
 80089c8:	2303      	movs	r3, #3
 80089ca:	e7e5      	b.n	8008998 <__ieee754_rem_pio2f+0x20c>
 80089cc:	3f490fd8 	.word	0x3f490fd8
 80089d0:	4016cbe3 	.word	0x4016cbe3
 80089d4:	3fc90f80 	.word	0x3fc90f80
 80089d8:	3fc90fd0 	.word	0x3fc90fd0
 80089dc:	37354443 	.word	0x37354443
 80089e0:	37354400 	.word	0x37354400
 80089e4:	2e85a308 	.word	0x2e85a308
 80089e8:	43490f80 	.word	0x43490f80
 80089ec:	3f22f984 	.word	0x3f22f984
 80089f0:	080095e4 	.word	0x080095e4
 80089f4:	2e85a300 	.word	0x2e85a300
 80089f8:	248d3132 	.word	0x248d3132
 80089fc:	43800000 	.word	0x43800000
 8008a00:	08009664 	.word	0x08009664

08008a04 <__kernel_rem_pio2f>:
 8008a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a08:	ed2d 8b04 	vpush	{d8-d9}
 8008a0c:	b0d9      	sub	sp, #356	; 0x164
 8008a0e:	4688      	mov	r8, r1
 8008a10:	9002      	str	r0, [sp, #8]
 8008a12:	49bb      	ldr	r1, [pc, #748]	; (8008d00 <__kernel_rem_pio2f+0x2fc>)
 8008a14:	9866      	ldr	r0, [sp, #408]	; 0x198
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008a1c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8008a20:	1e59      	subs	r1, r3, #1
 8008a22:	1d13      	adds	r3, r2, #4
 8008a24:	db27      	blt.n	8008a76 <__kernel_rem_pio2f+0x72>
 8008a26:	f1b2 0b03 	subs.w	fp, r2, #3
 8008a2a:	bf48      	it	mi
 8008a2c:	f102 0b04 	addmi.w	fp, r2, #4
 8008a30:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8008a34:	1c45      	adds	r5, r0, #1
 8008a36:	00ec      	lsls	r4, r5, #3
 8008a38:	1a47      	subs	r7, r0, r1
 8008a3a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008d10 <__kernel_rem_pio2f+0x30c>
 8008a3e:	9403      	str	r4, [sp, #12]
 8008a40:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008a44:	eb0a 0c01 	add.w	ip, sl, r1
 8008a48:	ae1c      	add	r6, sp, #112	; 0x70
 8008a4a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8008a4e:	2400      	movs	r4, #0
 8008a50:	4564      	cmp	r4, ip
 8008a52:	dd12      	ble.n	8008a7a <__kernel_rem_pio2f+0x76>
 8008a54:	9b01      	ldr	r3, [sp, #4]
 8008a56:	ac1c      	add	r4, sp, #112	; 0x70
 8008a58:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008a5c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8008a60:	f04f 0c00 	mov.w	ip, #0
 8008a64:	45d4      	cmp	ip, sl
 8008a66:	dc27      	bgt.n	8008ab8 <__kernel_rem_pio2f+0xb4>
 8008a68:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008a6c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008d10 <__kernel_rem_pio2f+0x30c>
 8008a70:	4627      	mov	r7, r4
 8008a72:	2600      	movs	r6, #0
 8008a74:	e016      	b.n	8008aa4 <__kernel_rem_pio2f+0xa0>
 8008a76:	2000      	movs	r0, #0
 8008a78:	e7dc      	b.n	8008a34 <__kernel_rem_pio2f+0x30>
 8008a7a:	42e7      	cmn	r7, r4
 8008a7c:	bf5d      	ittte	pl
 8008a7e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8008a82:	ee07 3a90 	vmovpl	s15, r3
 8008a86:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008a8a:	eef0 7a47 	vmovmi.f32	s15, s14
 8008a8e:	ece6 7a01 	vstmia	r6!, {s15}
 8008a92:	3401      	adds	r4, #1
 8008a94:	e7dc      	b.n	8008a50 <__kernel_rem_pio2f+0x4c>
 8008a96:	ecf9 6a01 	vldmia	r9!, {s13}
 8008a9a:	ed97 7a00 	vldr	s14, [r7]
 8008a9e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008aa2:	3601      	adds	r6, #1
 8008aa4:	428e      	cmp	r6, r1
 8008aa6:	f1a7 0704 	sub.w	r7, r7, #4
 8008aaa:	ddf4      	ble.n	8008a96 <__kernel_rem_pio2f+0x92>
 8008aac:	eceb 7a01 	vstmia	fp!, {s15}
 8008ab0:	f10c 0c01 	add.w	ip, ip, #1
 8008ab4:	3404      	adds	r4, #4
 8008ab6:	e7d5      	b.n	8008a64 <__kernel_rem_pio2f+0x60>
 8008ab8:	ab08      	add	r3, sp, #32
 8008aba:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008abe:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008d0c <__kernel_rem_pio2f+0x308>
 8008ac2:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008d08 <__kernel_rem_pio2f+0x304>
 8008ac6:	9304      	str	r3, [sp, #16]
 8008ac8:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008acc:	4656      	mov	r6, sl
 8008ace:	00b3      	lsls	r3, r6, #2
 8008ad0:	9305      	str	r3, [sp, #20]
 8008ad2:	ab58      	add	r3, sp, #352	; 0x160
 8008ad4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008ad8:	ac08      	add	r4, sp, #32
 8008ada:	ab44      	add	r3, sp, #272	; 0x110
 8008adc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008ae0:	46a4      	mov	ip, r4
 8008ae2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008ae6:	4637      	mov	r7, r6
 8008ae8:	2f00      	cmp	r7, #0
 8008aea:	f1a0 0004 	sub.w	r0, r0, #4
 8008aee:	dc4f      	bgt.n	8008b90 <__kernel_rem_pio2f+0x18c>
 8008af0:	4628      	mov	r0, r5
 8008af2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008af6:	f000 fb23 	bl	8009140 <scalbnf>
 8008afa:	eeb0 8a40 	vmov.f32	s16, s0
 8008afe:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008b02:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008b06:	f000 fad3 	bl	80090b0 <floorf>
 8008b0a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008b0e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008b12:	2d00      	cmp	r5, #0
 8008b14:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008b18:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008b1c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008b20:	ee17 9a90 	vmov	r9, s15
 8008b24:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008b28:	dd44      	ble.n	8008bb4 <__kernel_rem_pio2f+0x1b0>
 8008b2a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8008b2e:	ab08      	add	r3, sp, #32
 8008b30:	f1c5 0e08 	rsb	lr, r5, #8
 8008b34:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008b38:	fa47 f00e 	asr.w	r0, r7, lr
 8008b3c:	4481      	add	r9, r0
 8008b3e:	fa00 f00e 	lsl.w	r0, r0, lr
 8008b42:	1a3f      	subs	r7, r7, r0
 8008b44:	f1c5 0007 	rsb	r0, r5, #7
 8008b48:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8008b4c:	4107      	asrs	r7, r0
 8008b4e:	2f00      	cmp	r7, #0
 8008b50:	dd3f      	ble.n	8008bd2 <__kernel_rem_pio2f+0x1ce>
 8008b52:	f04f 0e00 	mov.w	lr, #0
 8008b56:	f109 0901 	add.w	r9, r9, #1
 8008b5a:	4673      	mov	r3, lr
 8008b5c:	4576      	cmp	r6, lr
 8008b5e:	dc6b      	bgt.n	8008c38 <__kernel_rem_pio2f+0x234>
 8008b60:	2d00      	cmp	r5, #0
 8008b62:	dd04      	ble.n	8008b6e <__kernel_rem_pio2f+0x16a>
 8008b64:	2d01      	cmp	r5, #1
 8008b66:	d078      	beq.n	8008c5a <__kernel_rem_pio2f+0x256>
 8008b68:	2d02      	cmp	r5, #2
 8008b6a:	f000 8081 	beq.w	8008c70 <__kernel_rem_pio2f+0x26c>
 8008b6e:	2f02      	cmp	r7, #2
 8008b70:	d12f      	bne.n	8008bd2 <__kernel_rem_pio2f+0x1ce>
 8008b72:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008b76:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008b7a:	b353      	cbz	r3, 8008bd2 <__kernel_rem_pio2f+0x1ce>
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008b82:	f000 fadd 	bl	8009140 <scalbnf>
 8008b86:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008b8a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008b8e:	e020      	b.n	8008bd2 <__kernel_rem_pio2f+0x1ce>
 8008b90:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008b94:	3f01      	subs	r7, #1
 8008b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b9e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008ba2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008ba6:	ecac 0a01 	vstmia	ip!, {s0}
 8008baa:	ed90 0a00 	vldr	s0, [r0]
 8008bae:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008bb2:	e799      	b.n	8008ae8 <__kernel_rem_pio2f+0xe4>
 8008bb4:	d105      	bne.n	8008bc2 <__kernel_rem_pio2f+0x1be>
 8008bb6:	1e70      	subs	r0, r6, #1
 8008bb8:	ab08      	add	r3, sp, #32
 8008bba:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008bbe:	11ff      	asrs	r7, r7, #7
 8008bc0:	e7c5      	b.n	8008b4e <__kernel_rem_pio2f+0x14a>
 8008bc2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008bc6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bce:	da31      	bge.n	8008c34 <__kernel_rem_pio2f+0x230>
 8008bd0:	2700      	movs	r7, #0
 8008bd2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bda:	f040 809b 	bne.w	8008d14 <__kernel_rem_pio2f+0x310>
 8008bde:	1e74      	subs	r4, r6, #1
 8008be0:	46a4      	mov	ip, r4
 8008be2:	2000      	movs	r0, #0
 8008be4:	45d4      	cmp	ip, sl
 8008be6:	da4a      	bge.n	8008c7e <__kernel_rem_pio2f+0x27a>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d07a      	beq.n	8008ce2 <__kernel_rem_pio2f+0x2de>
 8008bec:	ab08      	add	r3, sp, #32
 8008bee:	3d08      	subs	r5, #8
 8008bf0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 8081 	beq.w	8008cfc <__kernel_rem_pio2f+0x2f8>
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008c00:	00a5      	lsls	r5, r4, #2
 8008c02:	f000 fa9d 	bl	8009140 <scalbnf>
 8008c06:	aa44      	add	r2, sp, #272	; 0x110
 8008c08:	1d2b      	adds	r3, r5, #4
 8008c0a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008d0c <__kernel_rem_pio2f+0x308>
 8008c0e:	18d1      	adds	r1, r2, r3
 8008c10:	4622      	mov	r2, r4
 8008c12:	2a00      	cmp	r2, #0
 8008c14:	f280 80ae 	bge.w	8008d74 <__kernel_rem_pio2f+0x370>
 8008c18:	4622      	mov	r2, r4
 8008c1a:	2a00      	cmp	r2, #0
 8008c1c:	f2c0 80cc 	blt.w	8008db8 <__kernel_rem_pio2f+0x3b4>
 8008c20:	a944      	add	r1, sp, #272	; 0x110
 8008c22:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8008c26:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008d04 <__kernel_rem_pio2f+0x300>
 8008c2a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008d10 <__kernel_rem_pio2f+0x30c>
 8008c2e:	2000      	movs	r0, #0
 8008c30:	1aa1      	subs	r1, r4, r2
 8008c32:	e0b6      	b.n	8008da2 <__kernel_rem_pio2f+0x39e>
 8008c34:	2702      	movs	r7, #2
 8008c36:	e78c      	b.n	8008b52 <__kernel_rem_pio2f+0x14e>
 8008c38:	6820      	ldr	r0, [r4, #0]
 8008c3a:	b94b      	cbnz	r3, 8008c50 <__kernel_rem_pio2f+0x24c>
 8008c3c:	b118      	cbz	r0, 8008c46 <__kernel_rem_pio2f+0x242>
 8008c3e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008c42:	6020      	str	r0, [r4, #0]
 8008c44:	2001      	movs	r0, #1
 8008c46:	f10e 0e01 	add.w	lr, lr, #1
 8008c4a:	3404      	adds	r4, #4
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	e785      	b.n	8008b5c <__kernel_rem_pio2f+0x158>
 8008c50:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008c54:	6020      	str	r0, [r4, #0]
 8008c56:	4618      	mov	r0, r3
 8008c58:	e7f5      	b.n	8008c46 <__kernel_rem_pio2f+0x242>
 8008c5a:	1e74      	subs	r4, r6, #1
 8008c5c:	a808      	add	r0, sp, #32
 8008c5e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008c62:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008c66:	f10d 0c20 	add.w	ip, sp, #32
 8008c6a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008c6e:	e77e      	b.n	8008b6e <__kernel_rem_pio2f+0x16a>
 8008c70:	1e74      	subs	r4, r6, #1
 8008c72:	a808      	add	r0, sp, #32
 8008c74:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008c78:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008c7c:	e7f3      	b.n	8008c66 <__kernel_rem_pio2f+0x262>
 8008c7e:	ab08      	add	r3, sp, #32
 8008c80:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008c84:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008c88:	4318      	orrs	r0, r3
 8008c8a:	e7ab      	b.n	8008be4 <__kernel_rem_pio2f+0x1e0>
 8008c8c:	f10c 0c01 	add.w	ip, ip, #1
 8008c90:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8008c94:	2c00      	cmp	r4, #0
 8008c96:	d0f9      	beq.n	8008c8c <__kernel_rem_pio2f+0x288>
 8008c98:	9b05      	ldr	r3, [sp, #20]
 8008c9a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008c9e:	eb0d 0003 	add.w	r0, sp, r3
 8008ca2:	9b01      	ldr	r3, [sp, #4]
 8008ca4:	18f4      	adds	r4, r6, r3
 8008ca6:	ab1c      	add	r3, sp, #112	; 0x70
 8008ca8:	1c77      	adds	r7, r6, #1
 8008caa:	384c      	subs	r0, #76	; 0x4c
 8008cac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008cb0:	4466      	add	r6, ip
 8008cb2:	42be      	cmp	r6, r7
 8008cb4:	f6ff af0b 	blt.w	8008ace <__kernel_rem_pio2f+0xca>
 8008cb8:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008cbc:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008cc0:	ee07 3a90 	vmov	s15, r3
 8008cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cc8:	f04f 0c00 	mov.w	ip, #0
 8008ccc:	ece4 7a01 	vstmia	r4!, {s15}
 8008cd0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008d10 <__kernel_rem_pio2f+0x30c>
 8008cd4:	46a1      	mov	r9, r4
 8008cd6:	458c      	cmp	ip, r1
 8008cd8:	dd07      	ble.n	8008cea <__kernel_rem_pio2f+0x2e6>
 8008cda:	ece0 7a01 	vstmia	r0!, {s15}
 8008cde:	3701      	adds	r7, #1
 8008ce0:	e7e7      	b.n	8008cb2 <__kernel_rem_pio2f+0x2ae>
 8008ce2:	9804      	ldr	r0, [sp, #16]
 8008ce4:	f04f 0c01 	mov.w	ip, #1
 8008ce8:	e7d2      	b.n	8008c90 <__kernel_rem_pio2f+0x28c>
 8008cea:	ecfe 6a01 	vldmia	lr!, {s13}
 8008cee:	ed39 7a01 	vldmdb	r9!, {s14}
 8008cf2:	f10c 0c01 	add.w	ip, ip, #1
 8008cf6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008cfa:	e7ec      	b.n	8008cd6 <__kernel_rem_pio2f+0x2d2>
 8008cfc:	3c01      	subs	r4, #1
 8008cfe:	e775      	b.n	8008bec <__kernel_rem_pio2f+0x1e8>
 8008d00:	080099a8 	.word	0x080099a8
 8008d04:	0800997c 	.word	0x0800997c
 8008d08:	43800000 	.word	0x43800000
 8008d0c:	3b800000 	.word	0x3b800000
 8008d10:	00000000 	.word	0x00000000
 8008d14:	9b03      	ldr	r3, [sp, #12]
 8008d16:	eeb0 0a48 	vmov.f32	s0, s16
 8008d1a:	1a98      	subs	r0, r3, r2
 8008d1c:	f000 fa10 	bl	8009140 <scalbnf>
 8008d20:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008d08 <__kernel_rem_pio2f+0x304>
 8008d24:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d2c:	db19      	blt.n	8008d62 <__kernel_rem_pio2f+0x35e>
 8008d2e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008d0c <__kernel_rem_pio2f+0x308>
 8008d32:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008d36:	aa08      	add	r2, sp, #32
 8008d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d3c:	1c74      	adds	r4, r6, #1
 8008d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d42:	3508      	adds	r5, #8
 8008d44:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d4c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008d50:	ee10 3a10 	vmov	r3, s0
 8008d54:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008d58:	ee17 3a90 	vmov	r3, s15
 8008d5c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008d60:	e74b      	b.n	8008bfa <__kernel_rem_pio2f+0x1f6>
 8008d62:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008d66:	aa08      	add	r2, sp, #32
 8008d68:	ee10 3a10 	vmov	r3, s0
 8008d6c:	4634      	mov	r4, r6
 8008d6e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008d72:	e742      	b.n	8008bfa <__kernel_rem_pio2f+0x1f6>
 8008d74:	a808      	add	r0, sp, #32
 8008d76:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008d7a:	9001      	str	r0, [sp, #4]
 8008d7c:	ee07 0a90 	vmov	s15, r0
 8008d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d84:	3a01      	subs	r2, #1
 8008d86:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008d8a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008d8e:	ed61 7a01 	vstmdb	r1!, {s15}
 8008d92:	e73e      	b.n	8008c12 <__kernel_rem_pio2f+0x20e>
 8008d94:	ecfc 6a01 	vldmia	ip!, {s13}
 8008d98:	ecb6 7a01 	vldmia	r6!, {s14}
 8008d9c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008da0:	3001      	adds	r0, #1
 8008da2:	4550      	cmp	r0, sl
 8008da4:	dc01      	bgt.n	8008daa <__kernel_rem_pio2f+0x3a6>
 8008da6:	4288      	cmp	r0, r1
 8008da8:	ddf4      	ble.n	8008d94 <__kernel_rem_pio2f+0x390>
 8008daa:	a858      	add	r0, sp, #352	; 0x160
 8008dac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008db0:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008db4:	3a01      	subs	r2, #1
 8008db6:	e730      	b.n	8008c1a <__kernel_rem_pio2f+0x216>
 8008db8:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8008dba:	2a02      	cmp	r2, #2
 8008dbc:	dc09      	bgt.n	8008dd2 <__kernel_rem_pio2f+0x3ce>
 8008dbe:	2a00      	cmp	r2, #0
 8008dc0:	dc2a      	bgt.n	8008e18 <__kernel_rem_pio2f+0x414>
 8008dc2:	d043      	beq.n	8008e4c <__kernel_rem_pio2f+0x448>
 8008dc4:	f009 0007 	and.w	r0, r9, #7
 8008dc8:	b059      	add	sp, #356	; 0x164
 8008dca:	ecbd 8b04 	vpop	{d8-d9}
 8008dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d1f5      	bne.n	8008dc4 <__kernel_rem_pio2f+0x3c0>
 8008dd8:	ab30      	add	r3, sp, #192	; 0xc0
 8008dda:	442b      	add	r3, r5
 8008ddc:	461a      	mov	r2, r3
 8008dde:	4619      	mov	r1, r3
 8008de0:	4620      	mov	r0, r4
 8008de2:	2800      	cmp	r0, #0
 8008de4:	f1a1 0104 	sub.w	r1, r1, #4
 8008de8:	dc51      	bgt.n	8008e8e <__kernel_rem_pio2f+0x48a>
 8008dea:	4621      	mov	r1, r4
 8008dec:	2901      	cmp	r1, #1
 8008dee:	f1a2 0204 	sub.w	r2, r2, #4
 8008df2:	dc5c      	bgt.n	8008eae <__kernel_rem_pio2f+0x4aa>
 8008df4:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008d10 <__kernel_rem_pio2f+0x30c>
 8008df8:	3304      	adds	r3, #4
 8008dfa:	2c01      	cmp	r4, #1
 8008dfc:	dc67      	bgt.n	8008ece <__kernel_rem_pio2f+0x4ca>
 8008dfe:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008e02:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008e06:	2f00      	cmp	r7, #0
 8008e08:	d167      	bne.n	8008eda <__kernel_rem_pio2f+0x4d6>
 8008e0a:	edc8 6a00 	vstr	s13, [r8]
 8008e0e:	ed88 7a01 	vstr	s14, [r8, #4]
 8008e12:	edc8 7a02 	vstr	s15, [r8, #8]
 8008e16:	e7d5      	b.n	8008dc4 <__kernel_rem_pio2f+0x3c0>
 8008e18:	aa30      	add	r2, sp, #192	; 0xc0
 8008e1a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008d10 <__kernel_rem_pio2f+0x30c>
 8008e1e:	4413      	add	r3, r2
 8008e20:	4622      	mov	r2, r4
 8008e22:	2a00      	cmp	r2, #0
 8008e24:	da24      	bge.n	8008e70 <__kernel_rem_pio2f+0x46c>
 8008e26:	b34f      	cbz	r7, 8008e7c <__kernel_rem_pio2f+0x478>
 8008e28:	eef1 7a47 	vneg.f32	s15, s14
 8008e2c:	edc8 7a00 	vstr	s15, [r8]
 8008e30:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008e34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e38:	aa31      	add	r2, sp, #196	; 0xc4
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	429c      	cmp	r4, r3
 8008e3e:	da20      	bge.n	8008e82 <__kernel_rem_pio2f+0x47e>
 8008e40:	b10f      	cbz	r7, 8008e46 <__kernel_rem_pio2f+0x442>
 8008e42:	eef1 7a67 	vneg.f32	s15, s15
 8008e46:	edc8 7a01 	vstr	s15, [r8, #4]
 8008e4a:	e7bb      	b.n	8008dc4 <__kernel_rem_pio2f+0x3c0>
 8008e4c:	aa30      	add	r2, sp, #192	; 0xc0
 8008e4e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008d10 <__kernel_rem_pio2f+0x30c>
 8008e52:	4413      	add	r3, r2
 8008e54:	2c00      	cmp	r4, #0
 8008e56:	da05      	bge.n	8008e64 <__kernel_rem_pio2f+0x460>
 8008e58:	b10f      	cbz	r7, 8008e5e <__kernel_rem_pio2f+0x45a>
 8008e5a:	eef1 7a67 	vneg.f32	s15, s15
 8008e5e:	edc8 7a00 	vstr	s15, [r8]
 8008e62:	e7af      	b.n	8008dc4 <__kernel_rem_pio2f+0x3c0>
 8008e64:	ed33 7a01 	vldmdb	r3!, {s14}
 8008e68:	3c01      	subs	r4, #1
 8008e6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e6e:	e7f1      	b.n	8008e54 <__kernel_rem_pio2f+0x450>
 8008e70:	ed73 7a01 	vldmdb	r3!, {s15}
 8008e74:	3a01      	subs	r2, #1
 8008e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e7a:	e7d2      	b.n	8008e22 <__kernel_rem_pio2f+0x41e>
 8008e7c:	eef0 7a47 	vmov.f32	s15, s14
 8008e80:	e7d4      	b.n	8008e2c <__kernel_rem_pio2f+0x428>
 8008e82:	ecb2 7a01 	vldmia	r2!, {s14}
 8008e86:	3301      	adds	r3, #1
 8008e88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e8c:	e7d6      	b.n	8008e3c <__kernel_rem_pio2f+0x438>
 8008e8e:	edd1 7a00 	vldr	s15, [r1]
 8008e92:	edd1 6a01 	vldr	s13, [r1, #4]
 8008e96:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008e9a:	3801      	subs	r0, #1
 8008e9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ea0:	ed81 7a00 	vstr	s14, [r1]
 8008ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ea8:	edc1 7a01 	vstr	s15, [r1, #4]
 8008eac:	e799      	b.n	8008de2 <__kernel_rem_pio2f+0x3de>
 8008eae:	edd2 7a00 	vldr	s15, [r2]
 8008eb2:	edd2 6a01 	vldr	s13, [r2, #4]
 8008eb6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008eba:	3901      	subs	r1, #1
 8008ebc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ec0:	ed82 7a00 	vstr	s14, [r2]
 8008ec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ec8:	edc2 7a01 	vstr	s15, [r2, #4]
 8008ecc:	e78e      	b.n	8008dec <__kernel_rem_pio2f+0x3e8>
 8008ece:	ed33 7a01 	vldmdb	r3!, {s14}
 8008ed2:	3c01      	subs	r4, #1
 8008ed4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ed8:	e78f      	b.n	8008dfa <__kernel_rem_pio2f+0x3f6>
 8008eda:	eef1 6a66 	vneg.f32	s13, s13
 8008ede:	eeb1 7a47 	vneg.f32	s14, s14
 8008ee2:	edc8 6a00 	vstr	s13, [r8]
 8008ee6:	ed88 7a01 	vstr	s14, [r8, #4]
 8008eea:	eef1 7a67 	vneg.f32	s15, s15
 8008eee:	e790      	b.n	8008e12 <__kernel_rem_pio2f+0x40e>

08008ef0 <__kernel_tanf>:
 8008ef0:	b508      	push	{r3, lr}
 8008ef2:	ee10 3a10 	vmov	r3, s0
 8008ef6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008efa:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8008efe:	eef0 7a40 	vmov.f32	s15, s0
 8008f02:	da17      	bge.n	8008f34 <__kernel_tanf+0x44>
 8008f04:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8008f08:	ee17 1a10 	vmov	r1, s14
 8008f0c:	bb41      	cbnz	r1, 8008f60 <__kernel_tanf+0x70>
 8008f0e:	1c43      	adds	r3, r0, #1
 8008f10:	4313      	orrs	r3, r2
 8008f12:	d108      	bne.n	8008f26 <__kernel_tanf+0x36>
 8008f14:	f7ff f9a1 	bl	800825a <fabsf>
 8008f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f1c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008f20:	eeb0 0a67 	vmov.f32	s0, s15
 8008f24:	bd08      	pop	{r3, pc}
 8008f26:	2801      	cmp	r0, #1
 8008f28:	d0fa      	beq.n	8008f20 <__kernel_tanf+0x30>
 8008f2a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008f2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008f32:	e7f5      	b.n	8008f20 <__kernel_tanf+0x30>
 8008f34:	494c      	ldr	r1, [pc, #304]	; (8009068 <__kernel_tanf+0x178>)
 8008f36:	428a      	cmp	r2, r1
 8008f38:	db12      	blt.n	8008f60 <__kernel_tanf+0x70>
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	bfb8      	it	lt
 8008f3e:	eef1 7a40 	vneglt.f32	s15, s0
 8008f42:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800906c <__kernel_tanf+0x17c>
 8008f46:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008f4a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8009070 <__kernel_tanf+0x180>
 8008f4e:	bfb8      	it	lt
 8008f50:	eef1 0a60 	vneglt.f32	s1, s1
 8008f54:	ee70 0a60 	vsub.f32	s1, s0, s1
 8008f58:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8008f5c:	eddf 0a45 	vldr	s1, [pc, #276]	; 8009074 <__kernel_tanf+0x184>
 8008f60:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009078 <__kernel_tanf+0x188>
 8008f64:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800907c <__kernel_tanf+0x18c>
 8008f68:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8009080 <__kernel_tanf+0x190>
 8008f6c:	493e      	ldr	r1, [pc, #248]	; (8009068 <__kernel_tanf+0x178>)
 8008f6e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8008f72:	428a      	cmp	r2, r1
 8008f74:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008f78:	eea7 6a25 	vfma.f32	s12, s14, s11
 8008f7c:	eddf 5a41 	vldr	s11, [pc, #260]	; 8009084 <__kernel_tanf+0x194>
 8008f80:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008f84:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8009088 <__kernel_tanf+0x198>
 8008f88:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008f8c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800908c <__kernel_tanf+0x19c>
 8008f90:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008f94:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8009090 <__kernel_tanf+0x1a0>
 8008f98:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008f9c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8009094 <__kernel_tanf+0x1a4>
 8008fa0:	eee7 5a05 	vfma.f32	s11, s14, s10
 8008fa4:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8009098 <__kernel_tanf+0x1a8>
 8008fa8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8008fac:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800909c <__kernel_tanf+0x1ac>
 8008fb0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8008fb4:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80090a0 <__kernel_tanf+0x1b0>
 8008fb8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8008fbc:	eddf 5a39 	vldr	s11, [pc, #228]	; 80090a4 <__kernel_tanf+0x1b4>
 8008fc0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8008fc4:	eeb0 7a46 	vmov.f32	s14, s12
 8008fc8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008fcc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8008fd0:	eeb0 6a60 	vmov.f32	s12, s1
 8008fd4:	eea7 6a05 	vfma.f32	s12, s14, s10
 8008fd8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80090a8 <__kernel_tanf+0x1b8>
 8008fdc:	eee6 0a26 	vfma.f32	s1, s12, s13
 8008fe0:	eee5 0a07 	vfma.f32	s1, s10, s14
 8008fe4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8008fe8:	db1d      	blt.n	8009026 <__kernel_tanf+0x136>
 8008fea:	ee06 0a90 	vmov	s13, r0
 8008fee:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8008ff2:	ee27 6a07 	vmul.f32	s12, s14, s14
 8008ff6:	ee37 7a00 	vadd.f32	s14, s14, s0
 8008ffa:	179b      	asrs	r3, r3, #30
 8008ffc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	f1c3 0301 	rsb	r3, r3, #1
 8009008:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800900c:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8009010:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009014:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009018:	ee07 3a90 	vmov	s15, r3
 800901c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009020:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009024:	e77c      	b.n	8008f20 <__kernel_tanf+0x30>
 8009026:	2801      	cmp	r0, #1
 8009028:	d01b      	beq.n	8009062 <__kernel_tanf+0x172>
 800902a:	4b20      	ldr	r3, [pc, #128]	; (80090ac <__kernel_tanf+0x1bc>)
 800902c:	ee17 2a10 	vmov	r2, s14
 8009030:	401a      	ands	r2, r3
 8009032:	ee06 2a10 	vmov	s12, r2
 8009036:	ee76 7a67 	vsub.f32	s15, s12, s15
 800903a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800903e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8009042:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800904a:	ee16 2a90 	vmov	r2, s13
 800904e:	4013      	ands	r3, r2
 8009050:	ee07 3a90 	vmov	s15, r3
 8009054:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009058:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800905c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009060:	e75e      	b.n	8008f20 <__kernel_tanf+0x30>
 8009062:	eef0 7a47 	vmov.f32	s15, s14
 8009066:	e75b      	b.n	8008f20 <__kernel_tanf+0x30>
 8009068:	3f2ca140 	.word	0x3f2ca140
 800906c:	3f490fda 	.word	0x3f490fda
 8009070:	33222168 	.word	0x33222168
 8009074:	00000000 	.word	0x00000000
 8009078:	b79bae5f 	.word	0xb79bae5f
 800907c:	38a3f445 	.word	0x38a3f445
 8009080:	37d95384 	.word	0x37d95384
 8009084:	3a1a26c8 	.word	0x3a1a26c8
 8009088:	3b6b6916 	.word	0x3b6b6916
 800908c:	3cb327a4 	.word	0x3cb327a4
 8009090:	3e088889 	.word	0x3e088889
 8009094:	3895c07a 	.word	0x3895c07a
 8009098:	398137b9 	.word	0x398137b9
 800909c:	3abede48 	.word	0x3abede48
 80090a0:	3c11371f 	.word	0x3c11371f
 80090a4:	3d5d0dd1 	.word	0x3d5d0dd1
 80090a8:	3eaaaaab 	.word	0x3eaaaaab
 80090ac:	fffff000 	.word	0xfffff000

080090b0 <floorf>:
 80090b0:	ee10 3a10 	vmov	r3, s0
 80090b4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80090b8:	3a7f      	subs	r2, #127	; 0x7f
 80090ba:	2a16      	cmp	r2, #22
 80090bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80090c0:	dc2a      	bgt.n	8009118 <floorf+0x68>
 80090c2:	2a00      	cmp	r2, #0
 80090c4:	da11      	bge.n	80090ea <floorf+0x3a>
 80090c6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009128 <floorf+0x78>
 80090ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 80090ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80090d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d6:	dd05      	ble.n	80090e4 <floorf+0x34>
 80090d8:	2b00      	cmp	r3, #0
 80090da:	da23      	bge.n	8009124 <floorf+0x74>
 80090dc:	4a13      	ldr	r2, [pc, #76]	; (800912c <floorf+0x7c>)
 80090de:	2900      	cmp	r1, #0
 80090e0:	bf18      	it	ne
 80090e2:	4613      	movne	r3, r2
 80090e4:	ee00 3a10 	vmov	s0, r3
 80090e8:	4770      	bx	lr
 80090ea:	4911      	ldr	r1, [pc, #68]	; (8009130 <floorf+0x80>)
 80090ec:	4111      	asrs	r1, r2
 80090ee:	420b      	tst	r3, r1
 80090f0:	d0fa      	beq.n	80090e8 <floorf+0x38>
 80090f2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009128 <floorf+0x78>
 80090f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80090fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80090fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009102:	ddef      	ble.n	80090e4 <floorf+0x34>
 8009104:	2b00      	cmp	r3, #0
 8009106:	bfbe      	ittt	lt
 8009108:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800910c:	fa40 f202 	asrlt.w	r2, r0, r2
 8009110:	189b      	addlt	r3, r3, r2
 8009112:	ea23 0301 	bic.w	r3, r3, r1
 8009116:	e7e5      	b.n	80090e4 <floorf+0x34>
 8009118:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800911c:	d3e4      	bcc.n	80090e8 <floorf+0x38>
 800911e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009122:	4770      	bx	lr
 8009124:	2300      	movs	r3, #0
 8009126:	e7dd      	b.n	80090e4 <floorf+0x34>
 8009128:	7149f2ca 	.word	0x7149f2ca
 800912c:	bf800000 	.word	0xbf800000
 8009130:	007fffff 	.word	0x007fffff

08009134 <nanf>:
 8009134:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800913c <nanf+0x8>
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	7fc00000 	.word	0x7fc00000

08009140 <scalbnf>:
 8009140:	ee10 3a10 	vmov	r3, s0
 8009144:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009148:	d024      	beq.n	8009194 <scalbnf+0x54>
 800914a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800914e:	d302      	bcc.n	8009156 <scalbnf+0x16>
 8009150:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009154:	4770      	bx	lr
 8009156:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800915a:	d121      	bne.n	80091a0 <scalbnf+0x60>
 800915c:	4b29      	ldr	r3, [pc, #164]	; (8009204 <scalbnf+0xc4>)
 800915e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8009208 <scalbnf+0xc8>
 8009162:	4298      	cmp	r0, r3
 8009164:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009168:	db15      	blt.n	8009196 <scalbnf+0x56>
 800916a:	ee10 3a10 	vmov	r3, s0
 800916e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009172:	3a19      	subs	r2, #25
 8009174:	4402      	add	r2, r0
 8009176:	2afe      	cmp	r2, #254	; 0xfe
 8009178:	dd14      	ble.n	80091a4 <scalbnf+0x64>
 800917a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800920c <scalbnf+0xcc>
 800917e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009210 <scalbnf+0xd0>
 8009182:	ee10 3a10 	vmov	r3, s0
 8009186:	eeb0 7a67 	vmov.f32	s14, s15
 800918a:	2b00      	cmp	r3, #0
 800918c:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8009190:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009194:	4770      	bx	lr
 8009196:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009214 <scalbnf+0xd4>
 800919a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800919e:	4770      	bx	lr
 80091a0:	0dd2      	lsrs	r2, r2, #23
 80091a2:	e7e7      	b.n	8009174 <scalbnf+0x34>
 80091a4:	2a00      	cmp	r2, #0
 80091a6:	dd06      	ble.n	80091b6 <scalbnf+0x76>
 80091a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80091ac:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80091b0:	ee00 3a10 	vmov	s0, r3
 80091b4:	4770      	bx	lr
 80091b6:	f112 0f16 	cmn.w	r2, #22
 80091ba:	da19      	bge.n	80091f0 <scalbnf+0xb0>
 80091bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80091c0:	4298      	cmp	r0, r3
 80091c2:	ee10 3a10 	vmov	r3, s0
 80091c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091ca:	dd09      	ble.n	80091e0 <scalbnf+0xa0>
 80091cc:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800920c <scalbnf+0xcc>
 80091d0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009210 <scalbnf+0xd0>
 80091d4:	eef0 7a40 	vmov.f32	s15, s0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	fe00 0a07 	vseleq.f32	s0, s0, s14
 80091de:	e7dc      	b.n	800919a <scalbnf+0x5a>
 80091e0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009214 <scalbnf+0xd4>
 80091e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009218 <scalbnf+0xd8>
 80091e8:	eef0 7a40 	vmov.f32	s15, s0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	e7f4      	b.n	80091da <scalbnf+0x9a>
 80091f0:	3219      	adds	r2, #25
 80091f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80091f6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80091fa:	eddf 7a08 	vldr	s15, [pc, #32]	; 800921c <scalbnf+0xdc>
 80091fe:	ee07 3a10 	vmov	s14, r3
 8009202:	e7c5      	b.n	8009190 <scalbnf+0x50>
 8009204:	ffff3cb0 	.word	0xffff3cb0
 8009208:	4c000000 	.word	0x4c000000
 800920c:	7149f2ca 	.word	0x7149f2ca
 8009210:	f149f2ca 	.word	0xf149f2ca
 8009214:	0da24260 	.word	0x0da24260
 8009218:	8da24260 	.word	0x8da24260
 800921c:	33000000 	.word	0x33000000

08009220 <_init>:
 8009220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009222:	bf00      	nop
 8009224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009226:	bc08      	pop	{r3}
 8009228:	469e      	mov	lr, r3
 800922a:	4770      	bx	lr

0800922c <_fini>:
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	bf00      	nop
 8009230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009232:	bc08      	pop	{r3}
 8009234:	469e      	mov	lr, r3
 8009236:	4770      	bx	lr
