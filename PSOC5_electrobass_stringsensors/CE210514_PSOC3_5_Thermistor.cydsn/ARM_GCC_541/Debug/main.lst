ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	usbActivityCounter
  20              		.bss
  21              		.type	usbActivityCounter, %object
  22              		.size	usbActivityCounter, 1
  23              	usbActivityCounter:
  24 0000 00       		.space	1
  25              		.comm	midiMsg,4,4
  26              		.global	currentVBUS
  27              		.type	currentVBUS, %object
  28              		.size	currentVBUS, 1
  29              	currentVBUS:
  30 0001 00       		.space	1
  31              		.global	prevVBUS
  32              		.type	prevVBUS, %object
  33              		.size	prevVBUS, 1
  34              	prevVBUS:
  35 0002 00       		.space	1
  36              		.global	USB_active
  37              		.type	USB_active, %object
  38              		.size	USB_active, 1
  39              	USB_active:
  40 0003 00       		.space	1
  41              		.global	USB_check_flag
  42              		.type	USB_check_flag, %object
  43              		.size	USB_check_flag, 1
  44              	USB_check_flag:
  45 0004 00       		.space	1
  46              		.global	midiSent
  47 0005 00       		.align	1
  48              		.type	midiSent, %object
  49              		.size	midiSent, 2
  50              	midiSent:
  51 0006 0000     		.space	2
  52              		.global	midiOverflow
  53              		.align	1
  54              		.type	midiOverflow, %object
  55              		.size	midiOverflow, 2
  56              	midiOverflow:
  57 0008 0000     		.space	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 2


  58              		.global	scanPart
  59 000a 0000     		.align	2
  60              		.type	scanPart, %object
  61              		.size	scanPart, 4
  62              	scanPart:
  63 000c 00000000 		.space	4
  64              		.global	channel
  65              		.align	2
  66              		.type	channel, %object
  67              		.size	channel, 4
  68              	channel:
  69 0010 00000000 		.space	4
  70              		.global	currentOutPointer
  71              		.align	2
  72              		.type	currentOutPointer, %object
  73              		.size	currentOutPointer, 4
  74              	currentOutPointer:
  75 0014 00000000 		.space	4
  76              		.global	outChanged
  77              		.align	2
  78              		.type	outChanged, %object
  79              		.size	outChanged, 4
  80              	outChanged:
  81 0018 00000000 		.space	4
  82              		.comm	I2Cbuff1,256,4
  83              		.comm	stringCapSensorsOnOff,1,4
  84              		.comm	stringCapSensorsRaw,16,4
  85              		.global	thresholdArray
  86              		.data
  87              		.align	2
  88              		.type	thresholdArray, %object
  89              		.size	thresholdArray, 8
  90              	thresholdArray:
  91 0000 1E       		.byte	30
  92 0001 1E       		.byte	30
  93 0002 1E       		.byte	30
  94 0003 1E       		.byte	30
  95 0004 1E       		.byte	30
  96 0005 1E       		.byte	30
  97 0006 1E       		.byte	30
  98 0007 1E       		.byte	30
  99              		.global	fretMeasurements
 100              		.align	2
 101              		.type	fretMeasurements, %object
 102              		.size	fretMeasurements, 32
 103              	fretMeasurements:
 104 0008 14270100 		.word	75540
 105 000c 17580000 		.word	22551
 106 0010 2DFD0000 		.word	64813
 107 0014 BF4B0000 		.word	19391
 108 0018 80F80000 		.word	63616
 109 001c 6C4A0000 		.word	19052
 110 0020 32190100 		.word	71986
 111 0024 03530000 		.word	21251
 112              		.global	fretRatios
 113              		.align	2
 114              		.type	fretRatios, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 3


 115              		.size	fretRatios, 8
 116              	fretRatios:
 117 0028 C1A1713F 		.word	1064411585
 118 002c C1A1F13E 		.word	1056022977
 119              		.comm	linearPotValue32Bit,16,4
 120              		.global	i
 121              		.bss
 122              		.type	i, %object
 123              		.size	i, 1
 124              	i:
 125 001c 00       		.space	1
 126              		.global	counter
 127              		.type	counter, %object
 128              		.size	counter, 1
 129              	counter:
 130 001d 00       		.space	1
 131              		.comm	temper,4,4
 132              		.comm	previousButtons,44,4
 133              		.global	octave
 134 001e 0000     		.align	2
 135              		.type	octave, %object
 136              		.size	octave, 4
 137              	octave:
 138 0020 00000000 		.space	4
 139              		.comm	stringPlucks,16,4
 140              		.comm	stringPlucksPrev,16,4
 141              		.comm	knobsFIR,160,4
 142              		.comm	hysteresisStates,16,4
 143              		.global	hysteresisLowThresh
 144              		.data
 145              		.align	2
 146              		.type	hysteresisLowThresh, %object
 147              		.size	hysteresisLowThresh, 4
 148              	hysteresisLowThresh:
 149 0030 CDCCCC3E 		.word	1053609165
 150              		.global	hysteresisHighThresh
 151              		.align	2
 152              		.type	hysteresisHighThresh, %object
 153              		.size	hysteresisHighThresh, 4
 154              	hysteresisHighThresh:
 155 0034 9A99193F 		.word	1058642330
 156              		.comm	txChannel,1,1
 157              		.comm	txTD,1,1
 158              		.comm	txBuffer,16,4
 159              		.comm	rxChannel,1,1
 160              		.comm	rxTD,1,1
 161              		.comm	rxBuffer,16,4
 162              		.comm	tx2Channel,1,1
 163              		.comm	tx2TD,1,1
 164              		.comm	tx2Buffer,16,4
 165              		.comm	rx2Channel,1,1
 166              		.comm	rx2TD,1,1
 167              		.comm	rx2Buffer,16,4
 168              		.comm	tx2BufferTemp,16,4
 169              		.bss
 170              		.align	2
 171              	eepromArray:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 4


 172 0024 0000     		.space	2
 173              		.global	array
 174 0026 0000     		.align	2
 175              		.type	array, %object
 176              		.size	array, 2
 177              	array:
 178 0028 0000     		.space	2
 179              		.comm	eepromReturnValue,1,1
 180              		.global	Em_EEPROM_em_EepromStorage
 181              		.section	.rodata
 182              		.align	8
 183              		.type	Em_EEPROM_em_EepromStorage, %object
 184              		.size	Em_EEPROM_em_EepromStorage, 1024
 185              	Em_EEPROM_em_EepromStorage:
 186 0000 00000000 		.space	1024
 186      00000000 
 186      00000000 
 186      00000000 
 186      00000000 
 187              		.comm	eeprom_cnt,1,1
 188              		.comm	status,4,4
 189              		.comm	ptr,4,4
 190              		.global	barCount
 191              		.bss
 192 002a 0000     		.align	2
 193              		.type	barCount, %object
 194              		.size	barCount, 4
 195              	barCount:
 196 002c 00000000 		.space	4
 197              		.global	stringStates
 198              		.align	2
 199              		.type	stringStates, %object
 200              		.size	stringStates, 32
 201              	stringStates:
 202 0030 00000000 		.space	32
 202      00000000 
 202      00000000 
 202      00000000 
 202      00000000 
 203              		.section	.text.button_press_ISR,"ax",%progbits
 204              		.align	2
 205              		.global	button_press_ISR
 206              		.thumb
 207              		.thumb_func
 208              		.type	button_press_ISR, %function
 209              	button_press_ISR:
 210              	.LFB64:
 211              		.file 1 "main.c"
   1:main.c        **** /*****************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** *
   4:main.c        **** * Version: 3.0
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *   
   8:main.c        **** * 
   9:main.c        **** * Note:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 5


  10:main.c        **** * 	The main project includes the ADC and other components required for the
  11:main.c        **** *   temperature measurement. The Thermistor component is a complete firmware component
  12:main.c        **** *   as decribed in the component datahseet and application note
  13:main.c        **** ******************************************************************************
  14:main.c        **** * Copyright (C) 2015, Cypress Semiconductor Corporation.
  15:main.c        **** ******************************************************************************
  16:main.c        **** * This software is owned by Cypress Semiconductor Corporation (Cypress) and is
  17:main.c        **** * protected by and subject to worldwide patent protection (United States and
  18:main.c        **** * foreign), United States copyright laws and international treaty provisions.
  19:main.c        **** * Cypress hereby grants to licensee a personal, non-exclusive, non-transferable
  20:main.c        **** * license to copy, use, modify, create derivative works of, and compile the
  21:main.c        **** * Cypress Source Code and derivative works for the sole purpose of creating
  22:main.c        **** * custom software in support of licensee product to be used only in conjunction
  23:main.c        **** * with a Cypress integrated circuit as specified in the applicable agreement.
  24:main.c        **** * Any reproduction, modification, translation, compilation, or representation of
  25:main.c        **** * this software except as specified above is prohibited without the express
  26:main.c        **** * written permission of Cypress.
  27:main.c        **** *
  28:main.c        **** * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH
  29:main.c        **** * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  30:main.c        **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  31:main.c        **** * Cypress reserves the right to make changes without further notice to the
  32:main.c        **** * materials described herein. Cypress does not assume any liability arising out
  33:main.c        **** * of the application or use of any product or circuit described herein. Cypress
  34:main.c        **** * does not authorize its products for use as critical components in life-support
  35:main.c        **** * systems where a malfunction or failure may reasonably be expected to result in
  36:main.c        **** * significant injury to the user. The inclusion of Cypress' product in a life-
  37:main.c        **** * support systems application implies that the manufacturer assumes all risk of
  38:main.c        **** * such use and in doing so indemnifies Cypress against all charges. Use may be
  39:main.c        **** * limited by and subject to the applicable Cypress software license agreement.
  40:main.c        **** *****************************************************************************/
  41:main.c        **** #include <device.h>
  42:main.c        **** 
  43:main.c        **** #include <stdio.h>
  44:main.c        **** #include "math.h"
  45:main.c        **** 
  46:main.c        **** //#define MAPLE1 1
  47:main.c        **** #define GREEN3 1
  48:main.c        **** 
  49:main.c        **** volatile uint8 usbActivityCounter = 0u;
  50:main.c        ****  uint8 midiMsg[4];
  51:main.c        **** volatile uint8_t currentVBUS = 0;
  52:main.c        **** volatile uint8_t prevVBUS = 0;
  53:main.c        **** volatile uint8_t USB_active = 0;
  54:main.c        **** volatile uint8_t USB_check_flag = 0;
  55:main.c        **** 
  56:main.c        **** uint16_t midiSent = 0;
  57:main.c        **** uint16_t midiOverflow = 0;
  58:main.c        **** 
  59:main.c        **** uint scanPart = 0;
  60:main.c        **** uint channel = 0;
  61:main.c        **** 
  62:main.c        **** uint currentOutPointer = 0;
  63:main.c        **** uint outChanged = 0;
  64:main.c        **** 
  65:main.c        **** void checkUSB_Vbus(void);
  66:main.c        **** void sendMIDIAllNotesOff(void);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 6


  67:main.c        **** void sendMIDIPitchBend(int val, int channel);
  68:main.c        **** void firstCheckUSB_Vbus(void);
  69:main.c        **** void restartSystemCheck(void);
  70:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel);
  71:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel);
  72:main.c        **** CY_ISR_PROTO(SleepIsr_function);
  73:main.c        **** void noteEvent(int string);
  74:main.c        **** void I2C_reset(void);
  75:main.c        **** void CCEvent(int bar);
  76:main.c        **** 
  77:main.c        **** union breakFloat {
  78:main.c        ****  float f;
  79:main.c        ****  uint8_t b[4];  
  80:main.c        ****  uint32_t u32;
  81:main.c        **** };
  82:main.c        **** volatile uint8_t I2Cbuff1[256];
  83:main.c        **** uint8_t stringCapSensorsOnOff[1];
  84:main.c        **** uint8_t stringCapSensorsRaw[16];
  85:main.c        **** uint8_t thresholdArray[8] = {30, 30, 30, 30, 30, 30, 30, 30};
  86:main.c        **** #if MAPLE1
  87:main.c        **** uint32_t fretMeasurements[4][2] = {
  88:main.c        ****     {68958,19847},
  89:main.c        ****     {67974,20532},
  90:main.c        ****     {68984,20665},
  91:main.c        ****     {85647,24651}
  92:main.c        **** };
  93:main.c        **** #elif defined GREEN3
  94:main.c        ****  uint32_t fretMeasurements[4][2] = {
  95:main.c        ****     {75540,22551},
  96:main.c        ****     {64813,19391},
  97:main.c        ****     {63616,19052},
  98:main.c        ****     {71986,21251}
  99:main.c        **** };
 100:main.c        **** #else
 101:main.c        **** uint16_t fretMeasurements[4][2] = {
 102:main.c        ****     {57984,17489},
 103:main.c        ****     {53292,15779},
 104:main.c        ****     {52933,15582},
 105:main.c        ****     {57784,16450}
 106:main.c        **** };
 107:main.c        ****     #endif
 108:main.c        **** float fretRatios[2] = {0.94387439674627617953623675390268f,0.47193719837313808976811837695134f}; 
 109:main.c        **** 
 110:main.c        **** 
 111:main.c        **** 
 112:main.c        **** int32_t linearPotValue32Bit[4];
 113:main.c        **** uint8_t i = 0;
 114:main.c        **** uint8_t counter = 0;
 115:main.c        **** int32_t temper;
 116:main.c        **** int previousButtons[11];
 117:main.c        **** int octave = 0;
 118:main.c        **** void scanLinearResistor();
 119:main.c        **** int stringPlucks[4];
 120:main.c        **** int stringPlucksPrev[4];
 121:main.c        **** 
 122:main.c        **** #define KNOB_FIR_SIZE 8
 123:main.c        **** #define KNOB_FIR_SIZE_MASK 7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 7


 124:main.c        **** #define KNOB_FIR_SIZE_BITSHIFT 3
 125:main.c        **** uint32_t knobsFIR[5][KNOB_FIR_SIZE];
 126:main.c        **** 
 127:main.c        **** 
 128:main.c        **** #define LINEAR_FIR_SIZE 2
 129:main.c        **** #define LINEAR_FIR_SIZE_MASK 1
 130:main.c        **** #define LINEAR_FIR_SIZE_BITSHIFT 1
 131:main.c        **** 
 132:main.c        **** float hysteresisStates[4];
 133:main.c        **** float hysteresisLowThresh = 0.4f;
 134:main.c        **** float hysteresisHighThresh = 0.6f;
 135:main.c        **** 
 136:main.c        **** void DmaTxConfiguration(void);
 137:main.c        **** void DmaRxConfiguration(void);
 138:main.c        **** 
 139:main.c        **** /* DMA Configuration for DMA_TX */
 140:main.c        **** #define DMA_TX_BYTES_PER_BURST      (1u)
 141:main.c        **** #define DMA_TX_REQUEST_PER_BURST    (1u)
 142:main.c        **** #define DMA_TX_SRC_BASE             (CYDEV_SRAM_BASE)
 143:main.c        **** #define DMA_TX_DST_BASE             (CYDEV_PERIPH_BASE)
 144:main.c        **** 
 145:main.c        **** /* DMA Configuration for DMA_RX */
 146:main.c        **** #define DMA_RX_BYTES_PER_BURST      (1u)
 147:main.c        **** #define DMA_RX_REQUEST_PER_BURST    (1u)
 148:main.c        **** #define DMA_RX_SRC_BASE             (CYDEV_PERIPH_BASE)
 149:main.c        **** #define DMA_RX_DST_BASE             (CYDEV_SRAM_BASE)
 150:main.c        **** 
 151:main.c        **** #define BUFFER_SIZE                 (16u)
 152:main.c        **** #define BUFFER_2_SIZE               (16u)
 153:main.c        **** #define STORE_TD_CFG_ONCMPLT        (1u)
 154:main.c        **** 
 155:main.c        **** /* Variable declarations for DMA_TX*/
 156:main.c        **** volatile uint8 txChannel;
 157:main.c        **** volatile uint8 txTD;
 158:main.c        **** volatile uint8 txBuffer[BUFFER_SIZE];
 159:main.c        **** 
 160:main.c        **** volatile uint8 rxChannel;
 161:main.c        **** volatile uint8 rxTD;
 162:main.c        **** volatile uint8 rxBuffer[BUFFER_SIZE];
 163:main.c        **** 
 164:main.c        **** /* Variable declarations for DMA_2*/
 165:main.c        **** volatile uint8 tx2Channel;
 166:main.c        **** volatile uint8 tx2TD;
 167:main.c        **** volatile uint8 tx2Buffer[BUFFER_2_SIZE];
 168:main.c        **** 
 169:main.c        **** volatile uint8 rx2Channel;
 170:main.c        **** volatile uint8 rx2TD;
 171:main.c        **** volatile uint8 rx2Buffer[BUFFER_2_SIZE];
 172:main.c        **** 
 173:main.c        **** volatile uint8 tx2BufferTemp[BUFFER_2_SIZE];
 174:main.c        **** 
 175:main.c        ****     static uint8 CYCODE eepromArray[]={ 0, 0 };
 176:main.c        ****                                             
 177:main.c        ****     uint8 array[] ={ 0, 0 };
 178:main.c        ****                                 
 179:main.c        ****     /*Return status for EEPROM and UART*/ 
 180:main.c        **** cy_en_em_eeprom_status_t eepromReturnValue;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 8


 181:main.c        **** 
 182:main.c        **** 
 183:main.c        **** /* EEPROM storage in work flash, this is defined in Em_EEPROM.c*/
 184:main.c        **** #if defined (__ICCARM__)
 185:main.c        **** #pragma data_alignment = CY_FLASH_SIZEOF_ROW
 186:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE] = {0u};
 187:main.c        **** #else
 188:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE]
 189:main.c        **** __ALIGNED(CY_FLASH_SIZEOF_ROW) = {0u};
 190:main.c        **** #endif /* defined (__ICCARM__) */
 191:main.c        **** 
 192:main.c        ****     uint8 eeprom_cnt;
 193:main.c        ****     cystatus status;
 194:main.c        ****     volatile const uint8 * ptr;
 195:main.c        **** volatile int barCount = 0;
 196:main.c        **** 
 197:main.c        **** void handleNotes(int note, int velocity, int string);
 198:main.c        **** 
 199:main.c        **** int stringStates[4][2] = {{0,0},{0,0},{0,0},{0,0}};
 200:main.c        **** 
 201:main.c        **** CY_ISR(button_press_ISR) {     /* No need to clear any interrupt source; interrupt component should
 212              		.loc 1 201 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 1, uses_anonymous_args = 0
 216              		@ link register save eliminated.
 217 0000 80B4     		push	{r7}
 218              		.cfi_def_cfa_offset 4
 219              		.cfi_offset 7, -4
 220 0002 00AF     		add	r7, sp, #0
 221              		.cfi_def_cfa_register 7
 202:main.c        ****  //FiltReg_Read(); 
 203:main.c        ****     //
 204:main.c        **** }
 222              		.loc 1 204 0
 223 0004 00BF     		nop
 224 0006 BD46     		mov	sp, r7
 225              		.cfi_def_cfa_register 13
 226              		@ sp needed
 227 0008 80BC     		pop	{r7}
 228              		.cfi_restore 7
 229              		.cfi_def_cfa_offset 0
 230 000a 7047     		bx	lr
 231              		.cfi_endproc
 232              	.LFE64:
 233              		.size	button_press_ISR, .-button_press_ISR
 234              		.global	__aeabi_fcmpgt
 235              		.global	__aeabi_fcmplt
 236              		.section	.text.LEAF_clip,"ax",%progbits
 237              		.align	2
 238              		.global	LEAF_clip
 239              		.thumb
 240              		.thumb_func
 241              		.type	LEAF_clip, %function
 242              	LEAF_clip:
 243              	.LFB65:
 205:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 9


 206:main.c        **** 
 207:main.c        **** #define INV_440 0.0022727272727273f
 208:main.c        **** 
 209:main.c        **** float   LEAF_clip(float min, float val, float max)
 210:main.c        **** {
 244              		.loc 1 210 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 24
 247              		@ frame_needed = 1, uses_anonymous_args = 0
 248 0000 80B5     		push	{r7, lr}
 249              		.cfi_def_cfa_offset 8
 250              		.cfi_offset 7, -8
 251              		.cfi_offset 14, -4
 252 0002 86B0     		sub	sp, sp, #24
 253              		.cfi_def_cfa_offset 32
 254 0004 00AF     		add	r7, sp, #0
 255              		.cfi_def_cfa_register 7
 256 0006 F860     		str	r0, [r7, #12]	@ float
 257 0008 B960     		str	r1, [r7, #8]	@ float
 258 000a 7A60     		str	r2, [r7, #4]	@ float
 211:main.c        ****     float tempmin = min;
 259              		.loc 1 211 0
 260 000c FB68     		ldr	r3, [r7, #12]	@ float
 261 000e 7B61     		str	r3, [r7, #20]	@ float
 212:main.c        ****     float tempmax = max;
 262              		.loc 1 212 0
 263 0010 7B68     		ldr	r3, [r7, #4]	@ float
 264 0012 3B61     		str	r3, [r7, #16]	@ float
 213:main.c        ****     if (min > max)
 265              		.loc 1 213 0
 266 0014 7968     		ldr	r1, [r7, #4]	@ float
 267 0016 F868     		ldr	r0, [r7, #12]	@ float
 268 0018 FFF7FEFF 		bl	__aeabi_fcmpgt
 269 001c 0346     		mov	r3, r0
 270 001e 002B     		cmp	r3, #0
 271 0020 03D0     		beq	.L3
 214:main.c        ****     {
 215:main.c        ****         tempmin = max;
 272              		.loc 1 215 0
 273 0022 7B68     		ldr	r3, [r7, #4]	@ float
 274 0024 7B61     		str	r3, [r7, #20]	@ float
 216:main.c        ****         tempmax = min;
 275              		.loc 1 216 0
 276 0026 FB68     		ldr	r3, [r7, #12]	@ float
 277 0028 3B61     		str	r3, [r7, #16]	@ float
 278              	.L3:
 217:main.c        ****     }
 218:main.c        ****     if (val < tempmin)
 279              		.loc 1 218 0
 280 002a 7969     		ldr	r1, [r7, #20]	@ float
 281 002c B868     		ldr	r0, [r7, #8]	@ float
 282 002e FFF7FEFF 		bl	__aeabi_fcmplt
 283 0032 0346     		mov	r3, r0
 284 0034 002B     		cmp	r3, #0
 285 0036 01D0     		beq	.L13
 219:main.c        ****     {
 220:main.c        ****         return tempmin;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 10


 286              		.loc 1 220 0
 287 0038 7B69     		ldr	r3, [r7, #20]	@ float
 288 003a 09E0     		b	.L7
 289              	.L13:
 221:main.c        ****     }
 222:main.c        ****     else if (val > tempmax)
 290              		.loc 1 222 0
 291 003c 3969     		ldr	r1, [r7, #16]	@ float
 292 003e B868     		ldr	r0, [r7, #8]	@ float
 293 0040 FFF7FEFF 		bl	__aeabi_fcmpgt
 294 0044 0346     		mov	r3, r0
 295 0046 002B     		cmp	r3, #0
 296 0048 01D0     		beq	.L14
 223:main.c        ****     {
 224:main.c        ****         return tempmax;
 297              		.loc 1 224 0
 298 004a 3B69     		ldr	r3, [r7, #16]	@ float
 299 004c 00E0     		b	.L7
 300              	.L14:
 225:main.c        ****     }
 226:main.c        ****     else
 227:main.c        ****     {
 228:main.c        ****         return val;
 301              		.loc 1 228 0
 302 004e BB68     		ldr	r3, [r7, #8]	@ float
 303              	.L7:
 229:main.c        ****     }
 230:main.c        **** }
 304              		.loc 1 230 0
 305 0050 1846     		mov	r0, r3
 306 0052 1837     		adds	r7, r7, #24
 307              		.cfi_def_cfa_offset 8
 308 0054 BD46     		mov	sp, r7
 309              		.cfi_def_cfa_register 13
 310              		@ sp needed
 311 0056 80BD     		pop	{r7, pc}
 312              		.cfi_endproc
 313              	.LFE65:
 314              		.size	LEAF_clip, .-LEAF_clip
 315              		.global	__aeabi_fcmple
 316              		.global	__aeabi_fmul
 317              		.section	.text.mtof,"ax",%progbits
 318              		.align	2
 319              		.global	mtof
 320              		.thumb
 321              		.thumb_func
 322              		.type	mtof, %function
 323              	mtof:
 324              	.LFB66:
 231:main.c        **** float mtof(float f)
 232:main.c        **** {
 325              		.loc 1 232 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 8
 328              		@ frame_needed = 1, uses_anonymous_args = 0
 329 0000 80B5     		push	{r7, lr}
 330              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 11


 331              		.cfi_offset 7, -8
 332              		.cfi_offset 14, -4
 333 0002 82B0     		sub	sp, sp, #8
 334              		.cfi_def_cfa_offset 16
 335 0004 00AF     		add	r7, sp, #0
 336              		.cfi_def_cfa_register 7
 337 0006 7860     		str	r0, [r7, #4]	@ float
 233:main.c        ****     if (f <= -1500.0f) return(0);
 338              		.loc 1 233 0
 339 0008 1349     		ldr	r1, .L25
 340 000a 7868     		ldr	r0, [r7, #4]	@ float
 341 000c FFF7FEFF 		bl	__aeabi_fcmple
 342 0010 0346     		mov	r3, r0
 343 0012 002B     		cmp	r3, #0
 344 0014 02D0     		beq	.L23
 345              		.loc 1 233 0 is_stmt 0 discriminator 1
 346 0016 4FF00003 		mov	r3, #0
 347 001a 19E0     		b	.L18
 348              	.L23:
 234:main.c        ****     else if (f > 1499.0f) return(mtof(1499.0f));
 349              		.loc 1 234 0 is_stmt 1
 350 001c 0F49     		ldr	r1, .L25+4
 351 001e 7868     		ldr	r0, [r7, #4]	@ float
 352 0020 FFF7FEFF 		bl	__aeabi_fcmpgt
 353 0024 0346     		mov	r3, r0
 354 0026 002B     		cmp	r3, #0
 355 0028 04D0     		beq	.L24
 356              		.loc 1 234 0 is_stmt 0 discriminator 1
 357 002a 0C48     		ldr	r0, .L25+4
 358 002c FFF7FEFF 		bl	mtof
 359 0030 0346     		mov	r3, r0
 360 0032 0DE0     		b	.L18
 361              	.L24:
 235:main.c        ****     else return (8.17579891564f * expf(0.0577622650f * f));
 362              		.loc 1 235 0 is_stmt 1
 363 0034 0A49     		ldr	r1, .L25+8
 364 0036 7868     		ldr	r0, [r7, #4]	@ float
 365 0038 FFF7FEFF 		bl	__aeabi_fmul
 366 003c 0346     		mov	r3, r0
 367 003e 1846     		mov	r0, r3
 368 0040 FFF7FEFF 		bl	expf
 369 0044 0346     		mov	r3, r0
 370 0046 0749     		ldr	r1, .L25+12
 371 0048 1846     		mov	r0, r3
 372 004a FFF7FEFF 		bl	__aeabi_fmul
 373 004e 0346     		mov	r3, r0
 374              	.L18:
 236:main.c        **** }
 375              		.loc 1 236 0
 376 0050 1846     		mov	r0, r3
 377 0052 0837     		adds	r7, r7, #8
 378              		.cfi_def_cfa_offset 8
 379 0054 BD46     		mov	sp, r7
 380              		.cfi_def_cfa_register 13
 381              		@ sp needed
 382 0056 80BD     		pop	{r7, pc}
 383              	.L26:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 12


 384              		.align	2
 385              	.L25:
 386 0058 0080BBC4 		.word	-994344960
 387 005c 0060BB44 		.word	1153130496
 388 0060 20986C3D 		.word	1030527008
 389 0064 13D00241 		.word	1090703379
 390              		.cfi_endproc
 391              	.LFE66:
 392              		.size	mtof, .-mtof
 393              		.section	.text.ftom,"ax",%progbits
 394              		.align	2
 395              		.global	ftom
 396              		.thumb
 397              		.thumb_func
 398              		.type	ftom, %function
 399              	ftom:
 400              	.LFB67:
 237:main.c        **** 
 238:main.c        **** float ftom(float f)
 239:main.c        **** {
 401              		.loc 1 239 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 8
 404              		@ frame_needed = 1, uses_anonymous_args = 0
 405 0000 80B5     		push	{r7, lr}
 406              		.cfi_def_cfa_offset 8
 407              		.cfi_offset 7, -8
 408              		.cfi_offset 14, -4
 409 0002 82B0     		sub	sp, sp, #8
 410              		.cfi_def_cfa_offset 16
 411 0004 00AF     		add	r7, sp, #0
 412              		.cfi_def_cfa_register 7
 413 0006 7860     		str	r0, [r7, #4]	@ float
 240:main.c        ****     return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 414              		.loc 1 240 0
 415 0008 4FF00001 		mov	r1, #0
 416 000c 7868     		ldr	r0, [r7, #4]	@ float
 417 000e FFF7FEFF 		bl	__aeabi_fcmpgt
 418 0012 0346     		mov	r3, r0
 419 0014 002B     		cmp	r3, #0
 420 0016 0ED0     		beq	.L33
 421              		.loc 1 240 0 is_stmt 0 discriminator 1
 422 0018 0949     		ldr	r1, .L34
 423 001a 7868     		ldr	r0, [r7, #4]	@ float
 424 001c FFF7FEFF 		bl	__aeabi_fmul
 425 0020 0346     		mov	r3, r0
 426 0022 1846     		mov	r0, r3
 427 0024 FFF7FEFF 		bl	logf
 428 0028 0346     		mov	r3, r0
 429 002a 0649     		ldr	r1, .L34+4
 430 002c 1846     		mov	r0, r3
 431 002e FFF7FEFF 		bl	__aeabi_fmul
 432 0032 0346     		mov	r3, r0
 433 0034 00E0     		b	.L31
 434              	.L33:
 435              		.loc 1 240 0 discriminator 2
 436 0036 044B     		ldr	r3, .L34+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 13


 437              	.L31:
 241:main.c        **** }
 438              		.loc 1 241 0 is_stmt 1 discriminator 5
 439 0038 1846     		mov	r0, r3
 440 003a 0837     		adds	r7, r7, #8
 441              		.cfi_def_cfa_offset 8
 442 003c BD46     		mov	sp, r7
 443              		.cfi_def_cfa_register 13
 444              		@ sp needed
 445 003e 80BD     		pop	{r7, pc}
 446              	.L35:
 447              		.align	2
 448              	.L34:
 449 0040 D27EFA3D 		.word	1039826642
 450 0044 AC7F8A41 		.word	1099595692
 451 0048 0080BBC4 		.word	-994344960
 452              		.cfi_endproc
 453              	.LFE67:
 454              		.size	ftom, .-ftom
 455              		.global	__aeabi_fsub
 456              		.global	__aeabi_fadd
 457              		.section	.text.LEAF_interpolation_linear,"ax",%progbits
 458              		.align	2
 459              		.global	LEAF_interpolation_linear
 460              		.thumb
 461              		.thumb_func
 462              		.type	LEAF_interpolation_linear, %function
 463              	LEAF_interpolation_linear:
 464              	.LFB68:
 242:main.c        **** 
 243:main.c        **** // alpha, [0.0, 1.0]
 244:main.c        **** float LEAF_interpolation_linear (float A, float B, float alpha)
 245:main.c        **** {
 465              		.loc 1 245 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 24
 468              		@ frame_needed = 1, uses_anonymous_args = 0
 469 0000 80B5     		push	{r7, lr}
 470              		.cfi_def_cfa_offset 8
 471              		.cfi_offset 7, -8
 472              		.cfi_offset 14, -4
 473 0002 86B0     		sub	sp, sp, #24
 474              		.cfi_def_cfa_offset 32
 475 0004 00AF     		add	r7, sp, #0
 476              		.cfi_def_cfa_register 7
 477 0006 F860     		str	r0, [r7, #12]	@ float
 478 0008 B960     		str	r1, [r7, #8]	@ float
 479 000a 7A60     		str	r2, [r7, #4]	@ float
 246:main.c        ****     float omAlpha = 1.0f - alpha;
 480              		.loc 1 246 0
 481 000c 7968     		ldr	r1, [r7, #4]	@ float
 482 000e 4FF07E50 		mov	r0, #1065353216
 483 0012 FFF7FEFF 		bl	__aeabi_fsub
 484 0016 0346     		mov	r3, r0
 485 0018 7B61     		str	r3, [r7, #20]	@ float
 247:main.c        ****     
 248:main.c        ****     // First 1/2 of interpolation
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 14


 249:main.c        ****     float out = A * omAlpha;
 486              		.loc 1 249 0
 487 001a 7969     		ldr	r1, [r7, #20]	@ float
 488 001c F868     		ldr	r0, [r7, #12]	@ float
 489 001e FFF7FEFF 		bl	__aeabi_fmul
 490 0022 0346     		mov	r3, r0
 491 0024 3B61     		str	r3, [r7, #16]	@ float
 250:main.c        ****     
 251:main.c        ****     out += B * alpha;
 492              		.loc 1 251 0
 493 0026 7968     		ldr	r1, [r7, #4]	@ float
 494 0028 B868     		ldr	r0, [r7, #8]	@ float
 495 002a FFF7FEFF 		bl	__aeabi_fmul
 496 002e 0346     		mov	r3, r0
 497 0030 1946     		mov	r1, r3
 498 0032 3869     		ldr	r0, [r7, #16]	@ float
 499 0034 FFF7FEFF 		bl	__aeabi_fadd
 500 0038 0346     		mov	r3, r0
 501 003a 3B61     		str	r3, [r7, #16]	@ float
 252:main.c        ****     
 253:main.c        ****     return out;
 502              		.loc 1 253 0
 503 003c 3B69     		ldr	r3, [r7, #16]	@ float
 254:main.c        **** }
 504              		.loc 1 254 0
 505 003e 1846     		mov	r0, r3
 506 0040 1837     		adds	r7, r7, #24
 507              		.cfi_def_cfa_offset 8
 508 0042 BD46     		mov	sp, r7
 509              		.cfi_def_cfa_register 13
 510              		@ sp needed
 511 0044 80BD     		pop	{r7, pc}
 512              		.cfi_endproc
 513              	.LFE68:
 514              		.size	LEAF_interpolation_linear, .-LEAF_interpolation_linear
 515              		.global	whichLinearSensor
 516 0046 00BF     		.bss
 517              		.align	2
 518              		.type	whichLinearSensor, %object
 519              		.size	whichLinearSensor, 4
 520              	whichLinearSensor:
 521 0050 00000000 		.space	4
 522              		.global	__aeabi_fdiv
 523              		.section	.text.map,"ax",%progbits
 524              		.align	2
 525              		.global	map
 526              		.thumb
 527              		.thumb_func
 528              		.type	map, %function
 529              	map:
 530              	.LFB69:
 255:main.c        **** void USB_service(void);
 256:main.c        **** 
 257:main.c        **** volatile int whichLinearSensor = 0;
 258:main.c        **** 
 259:main.c        **** float map(float value, float istart, float istop, float ostart, float ostop)
 260:main.c        **** {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 15


 531              		.loc 1 260 0
 532              		.cfi_startproc
 533              		@ args = 4, pretend = 0, frame = 16
 534              		@ frame_needed = 1, uses_anonymous_args = 0
 535 0000 B0B5     		push	{r4, r5, r7, lr}
 536              		.cfi_def_cfa_offset 16
 537              		.cfi_offset 4, -16
 538              		.cfi_offset 5, -12
 539              		.cfi_offset 7, -8
 540              		.cfi_offset 14, -4
 541 0002 84B0     		sub	sp, sp, #16
 542              		.cfi_def_cfa_offset 32
 543 0004 00AF     		add	r7, sp, #0
 544              		.cfi_def_cfa_register 7
 545 0006 F860     		str	r0, [r7, #12]	@ float
 546 0008 B960     		str	r1, [r7, #8]	@ float
 547 000a 7A60     		str	r2, [r7, #4]	@ float
 548 000c 3B60     		str	r3, [r7]	@ float
 261:main.c        ****     return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 549              		.loc 1 261 0
 550 000e 3968     		ldr	r1, [r7]	@ float
 551 0010 386A     		ldr	r0, [r7, #32]	@ float
 552 0012 FFF7FEFF 		bl	__aeabi_fsub
 553 0016 0346     		mov	r3, r0
 554 0018 1C46     		mov	r4, r3
 555 001a B968     		ldr	r1, [r7, #8]	@ float
 556 001c F868     		ldr	r0, [r7, #12]	@ float
 557 001e FFF7FEFF 		bl	__aeabi_fsub
 558 0022 0346     		mov	r3, r0
 559 0024 1D46     		mov	r5, r3
 560 0026 B968     		ldr	r1, [r7, #8]	@ float
 561 0028 7868     		ldr	r0, [r7, #4]	@ float
 562 002a FFF7FEFF 		bl	__aeabi_fsub
 563 002e 0346     		mov	r3, r0
 564 0030 1946     		mov	r1, r3
 565 0032 2846     		mov	r0, r5
 566 0034 FFF7FEFF 		bl	__aeabi_fdiv
 567 0038 0346     		mov	r3, r0
 568 003a 1946     		mov	r1, r3
 569 003c 2046     		mov	r0, r4
 570 003e FFF7FEFF 		bl	__aeabi_fmul
 571 0042 0346     		mov	r3, r0
 572 0044 3968     		ldr	r1, [r7]	@ float
 573 0046 1846     		mov	r0, r3
 574 0048 FFF7FEFF 		bl	__aeabi_fadd
 575 004c 0346     		mov	r3, r0
 262:main.c        **** }
 576              		.loc 1 262 0
 577 004e 1846     		mov	r0, r3
 578 0050 1037     		adds	r7, r7, #16
 579              		.cfi_def_cfa_offset 16
 580 0052 BD46     		mov	sp, r7
 581              		.cfi_def_cfa_register 13
 582              		@ sp needed
 583 0054 B0BD     		pop	{r4, r5, r7, pc}
 584              		.cfi_endproc
 585              	.LFE69:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 16


 586              		.size	map, .-map
 587              		.global	testVar
 588 0056 00BF     		.bss
 589              		.align	2
 590              		.type	testVar, %object
 591              		.size	testVar, 4
 592              	testVar:
 593 0054 00000000 		.space	4
 594              		.global	lastNotes
 595              		.align	2
 596              		.type	lastNotes, %object
 597              		.size	lastNotes, 16
 598              	lastNotes:
 599 0058 00000000 		.space	16
 599      00000000 
 599      00000000 
 599      00000000 
 600              		.global	frettedState
 601              		.data
 602              		.align	2
 603              		.type	frettedState, %object
 604              		.size	frettedState, 4
 605              	frettedState:
 606 0038 01000000 		.word	1
 607              		.global	polyMode
 608              		.bss
 609              		.align	2
 610              		.type	polyMode, %object
 611              		.size	polyMode, 4
 612              	polyMode:
 613 0068 00000000 		.space	4
 614              		.comm	pitchBendsPerString,16,4
 615              		.global	openStringCount
 616              		.align	2
 617              		.type	openStringCount, %object
 618              		.size	openStringCount, 16
 619              	openStringCount:
 620 006c 00000000 		.space	16
 620      00000000 
 620      00000000 
 620      00000000 
 621              		.global	loudestString
 622              		.align	2
 623              		.type	loudestString, %object
 624              		.size	loudestString, 4
 625              	loudestString:
 626 007c 00000000 		.space	4
 627              		.global	timeSinceLastAttack
 628              		.align	3
 629              		.type	timeSinceLastAttack, %object
 630              		.size	timeSinceLastAttack, 8
 631              	timeSinceLastAttack:
 632 0080 00000000 		.space	8
 632      00000000 
 633              		.global	previousHysteresisStates
 634              		.align	2
 635              		.type	previousHysteresisStates, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 17


 636              		.size	previousHysteresisStates, 16
 637              	previousHysteresisStates:
 638 0088 00000000 		.space	16
 638      00000000 
 638      00000000 
 638      00000000 
 639              		.global	openStringFreqs
 640              		.data
 641              		.align	2
 642              		.type	openStringFreqs, %object
 643              		.size	openStringFreqs, 16
 644              	openStringFreqs:
 645 003c DFCF2442 		.word	1109708767
 646 0040 00005C42 		.word	1113325568
 647 0044 FED49242 		.word	1116919038
 648 0048 7DFFC342 		.word	1120141181
 649              		.global	openStringMIDI
 650              		.align	2
 651              		.type	openStringMIDI, %object
 652              		.size	openStringMIDI, 16
 653              	openStringMIDI:
 654 004c 0000E041 		.word	1105199104
 655 0050 00000442 		.word	1107558400
 656 0054 00001842 		.word	1108869120
 657 0058 00002C42 		.word	1110179840
 658              		.global	invStringMappedPositions
 659              		.bss
 660              		.align	2
 661              		.type	invStringMappedPositions, %object
 662              		.size	invStringMappedPositions, 16
 663              	invStringMappedPositions:
 664 0098 00000000 		.space	16
 664      00000000 
 664      00000000 
 664      00000000 
 665              		.global	stringMIDI
 666              		.align	2
 667              		.type	stringMIDI, %object
 668              		.size	stringMIDI, 16
 669              	stringMIDI:
 670 00a8 00000000 		.space	16
 670      00000000 
 670      00000000 
 670      00000000 
 671              		.global	stringMIDIPrev
 672              		.align	2
 673              		.type	stringMIDIPrev, %object
 674              		.size	stringMIDIPrev, 16
 675              	stringMIDIPrev:
 676 00b8 00000000 		.space	16
 676      00000000 
 676      00000000 
 676      00000000 
 677              		.global	linearHysteresis
 678              		.data
 679              		.align	2
 680              		.type	linearHysteresis, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 18


 681              		.size	linearHysteresis, 4
 682              	linearHysteresis:
 683 005c 9A99193F 		.word	1058642330
 684              		.comm	hp_y,16,4
 685              		.comm	hp_x,16,4
 686              		.comm	hp_R,4,4
 687              		.comm	vibratoCrossfade,16,4
 688              		.comm	crossFadeStartCount,16,4
 689              		.global	previousPitchBendsSent
 690              		.bss
 691              		.align	2
 692              		.type	previousPitchBendsSent, %object
 693              		.size	previousPitchBendsSent, 4
 694              	previousPitchBendsSent:
 695 00c8 00000000 		.space	4
 696              		.comm	knobs,20,4
 697              		.comm	buttons,4,4
 698              		.global	firPointer
 699              		.align	2
 700              		.type	firPointer, %object
 701              		.size	firPointer, 4
 702              	firPointer:
 703 00cc 00000000 		.space	4
 704              		.global	knobs7bit
 705              		.align	2
 706              		.type	knobs7bit, %object
 707              		.size	knobs7bit, 5
 708              	knobs7bit:
 709 00d0 00000000 		.space	5
 709      00
 710              		.global	knobs7bitPrev
 711 00d5 000000   		.align	2
 712              		.type	knobs7bitPrev, %object
 713              		.size	knobs7bitPrev, 10
 714              	knobs7bitPrev:
 715 00d8 00000000 		.space	10
 715      00000000 
 715      0000
 716              		.global	knobs7bitPrevLS
 717 00e2 0000     		.align	2
 718              		.type	knobs7bitPrevLS, %object
 719              		.size	knobs7bitPrevLS, 10
 720              	knobs7bitPrevLS:
 721 00e4 00000000 		.space	10
 721      00000000 
 721      0000
 722              		.global	knobs7bitHysteresis
 723              		.data
 724              		.align	1
 725              		.type	knobs7bitHysteresis, %object
 726              		.size	knobs7bitHysteresis, 2
 727              	knobs7bitHysteresis:
 728 0060 1900     		.short	25
 729              		.global	linFirPointer
 730              		.bss
 731 00ee 0000     		.align	2
 732              		.type	linFirPointer, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 19


 733              		.size	linFirPointer, 4
 734              	linFirPointer:
 735 00f0 00000000 		.space	4
 736              		.comm	linearFIR,32,4
 737              		.global	linearSmoothed
 738              		.align	2
 739              		.type	linearSmoothed, %object
 740              		.size	linearSmoothed, 16
 741              	linearSmoothed:
 742 00f4 00000000 		.space	16
 742      00000000 
 742      00000000 
 742      00000000 
 743              		.global	linearSmoothedPrev
 744              		.align	2
 745              		.type	linearSmoothedPrev, %object
 746              		.size	linearSmoothedPrev, 16
 747              	linearSmoothedPrev:
 748 0104 00000000 		.space	16
 748      00000000 
 748      00000000 
 748      00000000 
 749              		.global	LHMuteCounter
 750              		.align	2
 751              		.type	LHMuteCounter, %object
 752              		.size	LHMuteCounter, 16
 753              	LHMuteCounter:
 754 0114 00000000 		.space	16
 754      00000000 
 754      00000000 
 754      00000000 
 755              		.global	LHMute
 756              		.align	2
 757              		.type	LHMute, %object
 758              		.size	LHMute, 4
 759              	LHMute:
 760 0124 00000000 		.space	4
 761              		.global	pitchFreeze
 762              		.align	2
 763              		.type	pitchFreeze, %object
 764              		.size	pitchFreeze, 4
 765              	pitchFreeze:
 766 0128 00000000 		.space	4
 767              		.comm	pitchBendHistory,512,4
 768              		.global	pitchBendHistoryPointer
 769              		.align	2
 770              		.type	pitchBendHistoryPointer, %object
 771              		.size	pitchBendHistoryPointer, 8
 772              	pitchBendHistoryPointer:
 773 012c 00000000 		.space	8
 773      00000000 
 774              		.comm	skippedNotes,640,4
 775              		.global	skipPointer
 776              		.align	2
 777              		.type	skipPointer, %object
 778              		.size	skipPointer, 4
 779              	skipPointer:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 20


 780 0134 00000000 		.space	4
 781              		.global	bufCount
 782              		.type	bufCount, %object
 783              		.size	bufCount, 1
 784              	bufCount:
 785 0138 00       		.space	1
 786              		.section	.text.SleepIsr_function,"ax",%progbits
 787              		.align	2
 788              		.global	SleepIsr_function
 789              		.thumb
 790              		.thumb_func
 791              		.type	SleepIsr_function, %function
 792              	SleepIsr_function:
 793              	.LFB70:
 263:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode);
 264:main.c        **** //Main
 265:main.c        **** 
 266:main.c        **** volatile int testVar = 0;
 267:main.c        **** int lastNotes[4] = {0,0,0,0};
 268:main.c        **** int frettedState = 1;
 269:main.c        **** int polyMode = 0;
 270:main.c        **** 
 271:main.c        **** float pitchBendsPerString[4];
 272:main.c        **** int openStringCount[4] = {0,0,0,0};
 273:main.c        **** int loudestString = 0;
 274:main.c        **** int64_t timeSinceLastAttack = 0;
 275:main.c        **** float previousHysteresisStates[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 276:main.c        **** float openStringFreqs[4] = {41.203f, 55.0f, 73.416f, 97.999f};
 277:main.c        **** float openStringMIDI[4] = {28.0f, 33.0f, 38.0f, 43.0f};
 278:main.c        **** float invStringMappedPositions[4] = {0,0,0,0};
 279:main.c        **** float stringMIDI[4] = {0,0,0,0};
 280:main.c        **** float stringMIDIPrev[4] = {0,0,0,0};
 281:main.c        **** float linearHysteresis = 0.6f;
 282:main.c        **** float hp_y[4];
 283:main.c        **** float hp_x[4]; 
 284:main.c        **** float hp_R;
 285:main.c        **** 
 286:main.c        **** float vibratoCrossfade[4];
 287:main.c        **** int crossFadeStartCount[4];
 288:main.c        **** 
 289:main.c        **** int previousPitchBendsSent = 0;
 290:main.c        **** uint32_t knobs[5];
 291:main.c        **** int buttons;
 292:main.c        **** 
 293:main.c        **** int firPointer = 0;
 294:main.c        **** uint8_t knobs7bit[5] = {0,0,0,0,0};
 295:main.c        **** uint16_t knobs7bitPrev[5] = {0,0,0,0,0};
 296:main.c        **** uint16_t knobs7bitPrevLS[5] = {0,0,0,0,0};
 297:main.c        **** uint16_t knobs7bitHysteresis = 25;
 298:main.c        **** 
 299:main.c        **** uint8_t linFirPointer[4] = {0,0,0,0};
 300:main.c        **** uint32_t linearFIR[4][LINEAR_FIR_SIZE];
 301:main.c        **** uint32_t linearSmoothed[4] = {0,0,0,0};
 302:main.c        **** uint32_t linearSmoothedPrev[4] = {0,0,0,0};         
 303:main.c        **** uint32_t LHMuteCounter[4] = {0,0,0,0};
 304:main.c        **** uint8_t LHMute[4] = {0,0,0,0};
 305:main.c        **** uint8_t pitchFreeze[4] = {0,0,0,0};
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 21


 306:main.c        **** float pitchBendHistory[4][32];
 307:main.c        **** uint16_t pitchBendHistoryPointer[4] = {0,0,0,0};
 308:main.c        **** 
 309:main.c        **** int skippedNotes[32][5];
 310:main.c        **** int skipPointer = 0;
 311:main.c        **** 
 312:main.c        **** uint8_t bufCount = 0;
 313:main.c        **** 
 314:main.c        **** CY_ISR(SleepIsr_function)
 315:main.c        **** {
 794              		.loc 1 315 0
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 0
 797              		@ frame_needed = 1, uses_anonymous_args = 0
 798 0000 80B5     		push	{r7, lr}
 799              		.cfi_def_cfa_offset 8
 800              		.cfi_offset 7, -8
 801              		.cfi_offset 14, -4
 802 0002 00AF     		add	r7, sp, #0
 803              		.cfi_def_cfa_register 7
 316:main.c        ****     if (USB_active)
 804              		.loc 1 316 0
 805 0004 0C4B     		ldr	r3, .L43
 806 0006 1B78     		ldrb	r3, [r3]
 807 0008 DBB2     		uxtb	r3, r3
 808 000a 002B     		cmp	r3, #0
 809 000c 0FD0     		beq	.L41
 317:main.c        ****     {
 318:main.c        ****         //check USB activity
 319:main.c        ****         if( USB_CheckActivity() != 0u ) 
 810              		.loc 1 319 0
 811 000e FFF7FEFF 		bl	USB_CheckActivity
 812 0012 0346     		mov	r3, r0
 813 0014 002B     		cmp	r3, #0
 814 0016 03D0     		beq	.L42
 320:main.c        ****         {
 321:main.c        ****             usbActivityCounter = 0u;
 815              		.loc 1 321 0
 816 0018 084B     		ldr	r3, .L43+4
 817 001a 0022     		movs	r2, #0
 818 001c 1A70     		strb	r2, [r3]
 819 001e 06E0     		b	.L41
 820              	.L42:
 322:main.c        ****         } 
 323:main.c        ****         else 
 324:main.c        ****         {
 325:main.c        ****             usbActivityCounter++;
 821              		.loc 1 325 0
 822 0020 064B     		ldr	r3, .L43+4
 823 0022 1B78     		ldrb	r3, [r3]
 824 0024 DBB2     		uxtb	r3, r3
 825 0026 0133     		adds	r3, r3, #1
 826 0028 DAB2     		uxtb	r2, r3
 827 002a 044B     		ldr	r3, .L43+4
 828 002c 1A70     		strb	r2, [r3]
 829              	.L41:
 326:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 22


 327:main.c        **** 
 328:main.c        ****     }
 329:main.c        ****     //Clear pending interrupt
 330:main.c        ****     SleepTimer_GetStatus();
 830              		.loc 1 330 0
 831 002e FFF7FEFF 		bl	SleepTimer_GetStatus
 331:main.c        **** }
 832              		.loc 1 331 0
 833 0032 00BF     		nop
 834 0034 80BD     		pop	{r7, pc}
 835              	.L44:
 836 0036 00BF     		.align	2
 837              	.L43:
 838 0038 00000000 		.word	USB_active
 839 003c 00000000 		.word	usbActivityCounter
 840              		.cfi_endproc
 841              	.LFE70:
 842              		.size	SleepIsr_function, .-SleepIsr_function
 843              		.section	.text.Vbus_function,"ax",%progbits
 844              		.align	2
 845              		.global	Vbus_function
 846              		.thumb
 847              		.thumb_func
 848              		.type	Vbus_function, %function
 849              	Vbus_function:
 850              	.LFB71:
 332:main.c        **** CY_ISR(Vbus_function)
 333:main.c        **** {
 851              		.loc 1 333 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 0
 854              		@ frame_needed = 1, uses_anonymous_args = 0
 855 0000 80B5     		push	{r7, lr}
 856              		.cfi_def_cfa_offset 8
 857              		.cfi_offset 7, -8
 858              		.cfi_offset 14, -4
 859 0002 00AF     		add	r7, sp, #0
 860              		.cfi_def_cfa_register 7
 334:main.c        ****     //plug or unplug event
 335:main.c        ****     //check if eeprom has a flag saying you just restarted. If so, don't restart again
 336:main.c        ****     //otherwise, restart
 337:main.c        ****     my_Vbus_ISR_ClearPending();
 861              		.loc 1 337 0
 862 0004 FFF7FEFF 		bl	my_Vbus_ISR_ClearPending
 338:main.c        ****     vBusPin_ClearInterrupt();
 863              		.loc 1 338 0
 864 0008 FFF7FEFF 		bl	vBusPin_ClearInterrupt
 339:main.c        ****     restartSystemCheck();
 865              		.loc 1 339 0
 866 000c FFF7FEFF 		bl	restartSystemCheck
 340:main.c        **** 
 341:main.c        **** }
 867              		.loc 1 341 0
 868 0010 00BF     		nop
 869 0012 80BD     		pop	{r7, pc}
 870              		.cfi_endproc
 871              	.LFE71:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 23


 872              		.size	Vbus_function, .-Vbus_function
 873              		.section	.text.restartSystemCheck,"ax",%progbits
 874              		.align	2
 875              		.global	restartSystemCheck
 876              		.thumb
 877              		.thumb_func
 878              		.type	restartSystemCheck, %function
 879              	restartSystemCheck:
 880              	.LFB72:
 342:main.c        **** 
 343:main.c        **** void restartSystemCheck()
 344:main.c        **** {
 881              		.loc 1 344 0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 0
 884              		@ frame_needed = 1, uses_anonymous_args = 0
 885 0000 80B5     		push	{r7, lr}
 886              		.cfi_def_cfa_offset 8
 887              		.cfi_offset 7, -8
 888              		.cfi_offset 14, -4
 889 0002 00AF     		add	r7, sp, #0
 890              		.cfi_def_cfa_register 7
 345:main.c        ****     eepromReturnValue = Em_EEPROM_Read(0u, eepromArray, 2u);
 891              		.loc 1 345 0
 892 0004 184B     		ldr	r3, .L50
 893 0006 0222     		movs	r2, #2
 894 0008 1849     		ldr	r1, .L50+4
 895 000a 0020     		movs	r0, #0
 896 000c FFF7FEFF 		bl	Cy_Em_EEPROM_Read
 897 0010 0346     		mov	r3, r0
 898 0012 1A46     		mov	r2, r3
 899 0014 164B     		ldr	r3, .L50+8
 900 0016 1A70     		strb	r2, [r3]
 346:main.c        ****     //only do the restart check if there is a USB cable plugged in (to avoid restarting while tryin
 347:main.c        ****     if (USB_VBusPresent() == 1)
 901              		.loc 1 347 0
 902 0018 FFF7FEFF 		bl	USB_VBusPresent
 903 001c 0346     		mov	r3, r0
 904 001e 012B     		cmp	r3, #1
 905 0020 20D1     		bne	.L49
 348:main.c        ****     {
 349:main.c        ****         if (*(volatile uint8 *) &eepromArray[0] == 1u)
 906              		.loc 1 349 0
 907 0022 124B     		ldr	r3, .L50+4
 908 0024 1B78     		ldrb	r3, [r3]
 909 0026 DBB2     		uxtb	r3, r3
 910 0028 012B     		cmp	r3, #1
 911 002a 0CD1     		bne	.L48
 350:main.c        ****         {
 351:main.c        ****             //a flag says we just restarted
 352:main.c        ****             //write a zero so it knows next time that it's OK to restart
 353:main.c        ****             array[0] = 0;
 912              		.loc 1 353 0
 913 002c 114B     		ldr	r3, .L50+12
 914 002e 0022     		movs	r2, #0
 915 0030 1A70     		strb	r2, [r3]
 354:main.c        ****             Em_EEPROM_Write(0u,array,2u);     
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 24


 916              		.loc 1 354 0
 917 0032 0D4B     		ldr	r3, .L50
 918 0034 0222     		movs	r2, #2
 919 0036 0F49     		ldr	r1, .L50+12
 920 0038 0020     		movs	r0, #0
 921 003a FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 355:main.c        ****             USB_check_flag = 1;
 922              		.loc 1 355 0
 923 003e 0E4B     		ldr	r3, .L50+16
 924 0040 0122     		movs	r2, #1
 925 0042 1A70     		strb	r2, [r3]
 356:main.c        ****         }
 357:main.c        ****         else
 358:main.c        ****         {
 359:main.c        ****            //otherwise, we need to restart
 360:main.c        ****            array[0] = 1;
 361:main.c        ****            Em_EEPROM_Write(0u,array,2u);  
 362:main.c        ****             USB_Stop();
 363:main.c        ****             I2C_1_Stop();
 364:main.c        ****             CySoftwareReset();
 365:main.c        ****         }
 366:main.c        ****     }
 367:main.c        **** }
 926              		.loc 1 367 0
 927 0044 0EE0     		b	.L49
 928              	.L48:
 360:main.c        ****            Em_EEPROM_Write(0u,array,2u);  
 929              		.loc 1 360 0
 930 0046 0B4B     		ldr	r3, .L50+12
 931 0048 0122     		movs	r2, #1
 932 004a 1A70     		strb	r2, [r3]
 361:main.c        ****             USB_Stop();
 933              		.loc 1 361 0
 934 004c 064B     		ldr	r3, .L50
 935 004e 0222     		movs	r2, #2
 936 0050 0849     		ldr	r1, .L50+12
 937 0052 0020     		movs	r0, #0
 938 0054 FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 362:main.c        ****             I2C_1_Stop();
 939              		.loc 1 362 0
 940 0058 FFF7FEFF 		bl	USB_Stop
 363:main.c        ****             CySoftwareReset();
 941              		.loc 1 363 0
 942 005c FFF7FEFF 		bl	I2C_1_Stop
 364:main.c        ****         }
 943              		.loc 1 364 0
 944 0060 FFF7FEFF 		bl	CySoftwareReset
 945              	.L49:
 946              		.loc 1 367 0
 947 0064 00BF     		nop
 948 0066 80BD     		pop	{r7, pc}
 949              	.L51:
 950              		.align	2
 951              	.L50:
 952 0068 00000000 		.word	Em_EEPROM_context
 953 006c 24000000 		.word	eepromArray
 954 0070 00000000 		.word	eepromReturnValue
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 25


 955 0074 00000000 		.word	array
 956 0078 00000000 		.word	USB_check_flag
 957              		.cfi_endproc
 958              	.LFE72:
 959              		.size	restartSystemCheck, .-restartSystemCheck
 960              		.global	__aeabi_ui2f
 961              		.global	__aeabi_f2iz
 962              		.global	__aeabi_f2uiz
 963              		.section	.text.main,"ax",%progbits
 964              		.align	2
 965              		.global	main
 966              		.thumb
 967              		.thumb_func
 968              		.type	main, %function
 969              	main:
 970              	.LFB73:
 368:main.c        **** 
 369:main.c        **** int main(void)
 370:main.c        **** {
 971              		.loc 1 370 0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 24
 974              		@ frame_needed = 1, uses_anonymous_args = 0
 975 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 976              		.cfi_def_cfa_offset 20
 977              		.cfi_offset 4, -20
 978              		.cfi_offset 5, -16
 979              		.cfi_offset 6, -12
 980              		.cfi_offset 7, -8
 981              		.cfi_offset 14, -4
 982 0002 89B0     		sub	sp, sp, #36
 983              		.cfi_def_cfa_offset 56
 984 0004 02AF     		add	r7, sp, #8
 985              		.cfi_def_cfa 7, 48
 371:main.c        **** 
 372:main.c        **** 	CYGlobalIntEnable; 
 986              		.loc 1 372 0
 987              		.syntax unified
 988              	@ 372 "main.c" 1
 989 0006 62B6     		CPSIE   i
 990              	@ 0 "" 2
 373:main.c        ****     SPI_ready_Write(0);
 991              		.loc 1 373 0
 992              		.thumb
 993              		.syntax unified
 994 0008 0020     		movs	r0, #0
 995 000a FFF7FEFF 		bl	SPI_ready_Write
 374:main.c        ****     
 375:main.c        ****     //EEPROM_Start();
 376:main.c        ****     
 377:main.c        ****     eepromReturnValue = Em_EEPROM_Init((uint32_t)Em_EEPROM_em_EepromStorage);
 996              		.loc 1 377 0
 997 000e A44B     		ldr	r3, .L113
 998 0010 1846     		mov	r0, r3
 999 0012 FFF7FEFF 		bl	Em_EEPROM_Init
 1000 0016 0346     		mov	r3, r0
 1001 0018 1A46     		mov	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 26


 1002 001a A24B     		ldr	r3, .L113+4
 1003 001c 1A70     		strb	r2, [r3]
 378:main.c        ****     if(eepromReturnValue != CY_EM_EEPROM_SUCCESS)
 379:main.c        ****     {
 380:main.c        ****        // HandleError();
 381:main.c        ****     }
 382:main.c        ****     USB_SetPowerStatus(USB_DEVICE_STATUS_SELF_POWERED);
 1004              		.loc 1 382 0
 1005 001e 0120     		movs	r0, #1
 1006 0020 FFF7FEFF 		bl	USB_SetPowerStatus
 383:main.c        ****     my_Vbus_ISR_StartEx(Vbus_function);
 1007              		.loc 1 383 0
 1008 0024 A048     		ldr	r0, .L113+8
 1009 0026 FFF7FEFF 		bl	my_Vbus_ISR_StartEx
 384:main.c        ****     
 385:main.c        ****     if (!USB_VBusPresent())
 1010              		.loc 1 385 0
 1011 002a FFF7FEFF 		bl	USB_VBusPresent
 1012 002e 0346     		mov	r3, r0
 1013 0030 002B     		cmp	r3, #0
 1014 0032 01D1     		bne	.L53
 386:main.c        ****     {
 387:main.c        ****        restartSystemCheck();
 1015              		.loc 1 387 0
 1016 0034 FFF7FEFF 		bl	restartSystemCheck
 1017              	.L53:
 388:main.c        ****     }
 389:main.c        ****     
 390:main.c        ****     
 391:main.c        ****     IDAC8_1_Start();
 1018              		.loc 1 391 0
 1019 0038 FFF7FEFF 		bl	IDAC8_1_Start
 392:main.c        **** 	ADC_1_Start();
 1020              		.loc 1 392 0
 1021 003c FFF7FEFF 		bl	ADC_1_Start
 393:main.c        **** 	AMux_1_Start();
 1022              		.loc 1 393 0
 1023 0040 FFF7FEFF 		bl	AMux_1_Start
 394:main.c        ****     DmaTxConfiguration();
 1024              		.loc 1 394 0
 1025 0044 FFF7FEFF 		bl	DmaTxConfiguration
 395:main.c        ****     DmaRxConfiguration();
 1026              		.loc 1 395 0
 1027 0048 FFF7FEFF 		bl	DmaRxConfiguration
 396:main.c        ****     ADC_SAR_Seq_1_Start();
 1028              		.loc 1 396 0
 1029 004c FFF7FEFF 		bl	ADC_SAR_Seq_1_Start
 397:main.c        ****     ADC_SAR_Seq_1_StartConvert();
 1030              		.loc 1 397 0
 1031 0050 FFF7FEFF 		bl	ADC_SAR_Seq_1_StartConvert
 398:main.c        ****     SPIM_1_Start();
 1032              		.loc 1 398 0
 1033 0054 FFF7FEFF 		bl	SPIM_1_Start
 399:main.c        ****     SPIM_2_Start();
 1034              		.loc 1 399 0
 1035 0058 FFF7FEFF 		bl	SPIM_2_Start
 400:main.c        ****     //I2C_1_Start();
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 27


 401:main.c        ****     
 402:main.c        **** 
 403:main.c        ****     
 404:main.c        ****     CapSense_Start();     
 1036              		.loc 1 404 0
 1037 005c FFF7FEFF 		bl	CapSense_Start
 405:main.c        ****     
 406:main.c        ****     hp_R = 1.0f - (3.14159265358979f * 2.0f * 2.0f / 200.0f);
 1038              		.loc 1 406 0
 1039 0060 924B     		ldr	r3, .L113+12
 1040 0062 934A     		ldr	r2, .L113+16
 1041 0064 1A60     		str	r2, [r3]	@ float
 407:main.c        **** 
 408:main.c        ****     CyDelay(10);
 1042              		.loc 1 408 0
 1043 0066 0A20     		movs	r0, #10
 1044 0068 FFF7FEFF 		bl	CyDelay
 409:main.c        ****     CapSense_InitializeAllBaselines() ;
 1045              		.loc 1 409 0
 1046 006c FFF7FEFF 		bl	CapSense_InitializeAllBaselines
 410:main.c        ****     
 411:main.c        ****     SPI_ready_Write(1);
 1047              		.loc 1 411 0
 1048 0070 0120     		movs	r0, #1
 1049 0072 FFF7FEFF 		bl	SPI_ready_Write
 412:main.c        ****     CyDelay(10);
 1050              		.loc 1 412 0
 1051 0076 0A20     		movs	r0, #10
 1052 0078 FFF7FEFF 		bl	CyDelay
 1053              	.L108:
 413:main.c        **** 
 414:main.c        ****     //tSimplePoly_init(&myPoly);
 415:main.c        **** 	for(;;)
 416:main.c        ****     {
 417:main.c        **** 
 418:main.c        **** 
 419:main.c        ****         //turn on the multiplexer channels that set up the resistive sensors
 420:main.c        ****         //#if 0
 421:main.c        ****         ExtMUX_EN_Write(0);
 1054              		.loc 1 421 0
 1055 007c 0020     		movs	r0, #0
 1056 007e FFF7FEFF 		bl	ExtMUX_EN_Write
 422:main.c        ****         //CyDelayUs(5);
 423:main.c        ****         scanLinearResistor();
 1057              		.loc 1 423 0
 1058 0082 FFF7FEFF 		bl	scanLinearResistor
 424:main.c        **** 
 425:main.c        ****         //now disconnect resistive sensors so that they don't interfere with CapSense
 426:main.c        ****        // #endif
 427:main.c        ****         ExtMUX_EN_Write(1);
 1059              		.loc 1 427 0
 1060 0086 0120     		movs	r0, #1
 1061 0088 FFF7FEFF 		bl	ExtMUX_EN_Write
 428:main.c        ****         CyDelayUs(5);
 1062              		.loc 1 428 0
 1063 008c 0520     		movs	r0, #5
 1064 008e FFF7FEFF 		bl	CyDelayUs
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 28


 429:main.c        ****         CapSense_ClearSensors();
 1065              		.loc 1 429 0
 1066 0092 FFF7FEFF 		bl	CapSense_ClearSensors
 430:main.c        ****         CapSense_UpdateEnabledBaselines();
 1067              		.loc 1 430 0
 1068 0096 FFF7FEFF 		bl	CapSense_UpdateEnabledBaselines
 431:main.c        ****         CapSense_ScanEnabledWidgets();  
 1069              		.loc 1 431 0
 1070 009a FFF7FEFF 		bl	CapSense_ScanEnabledWidgets
 432:main.c        ****         currentOutPointer = 1;
 1071              		.loc 1 432 0
 1072 009e 854B     		ldr	r3, .L113+20
 1073 00a0 0122     		movs	r2, #1
 1074 00a2 1A60     		str	r2, [r3]
 433:main.c        ****         if (scanPart == 0)
 1075              		.loc 1 433 0
 1076 00a4 844B     		ldr	r3, .L113+24
 1077 00a6 1B68     		ldr	r3, [r3]
 1078 00a8 002B     		cmp	r3, #0
 1079 00aa 40F08F82 		bne	.L54
 1080              	.LBB2:
 434:main.c        ****         {
 435:main.c        **** 
 436:main.c        ****             //buttons = Status_Reg_1_Read();
 437:main.c        ****             #if 0
 438:main.c        ****             
 439:main.c        ****             
 440:main.c        ****           //  sendMIDIControlChange(whichLinearSensor*3, (linearPotValue32Bit[whichLinearSensor] >>
 441:main.c        ****           //  sendMIDIControlChange(whichLinearSensor*3+1, (linearPotValue32Bit[whichLinearSensor] 
 442:main.c        ****           //  sendMIDIControlChange(whichLinearSensor*3+2, (linearPotValue32Bit[whichLinearSensor] 
 443:main.c        ****             uint8_t fretAbove = binarySearch(fretMeasurements[whichLinearSensor], 0, 21, linearPotV
 444:main.c        ****             float pitchBendVal = 8192.0;
 445:main.c        ****             float midiFloat = 0.0f;
 446:main.c        ****             if (fretAbove > 0)
 447:main.c        ****             {
 448:main.c        ****                 float range = fretMeasurements[whichLinearSensor][fretAbove-1] - fretMeasurements[w
 449:main.c        ****                 float ratio = ((float)(linearPotValue32Bit[whichLinearSensor]  - fretMeasurements[w
 450:main.c        ****                 midiFloat = (1.0f - ratio) + (float)(fretAbove - 1);
 451:main.c        ****             }
 452:main.c        ****             if (frettedState)
 453:main.c        ****             {
 454:main.c        ****                 float roundedMidiFloat = roundf(midiFloat);
 455:main.c        ****                 if (midiFloat < hysteresisStates[whichLinearSensor] - 0.6f)
 456:main.c        ****                 {
 457:main.c        ****                     hysteresisStates[whichLinearSensor] = roundedMidiFloat;   
 458:main.c        ****                 }
 459:main.c        ****                 else if (midiFloat > hysteresisStates[whichLinearSensor] + 0.6f)
 460:main.c        ****                 {
 461:main.c        ****                     hysteresisStates[whichLinearSensor] = roundedMidiFloat;   
 462:main.c        ****                 }
 463:main.c        ****                 if (hysteresisStates[whichLinearSensor] != previousHysteresisStates[whichLinearSens
 464:main.c        ****                 {
 465:main.c        ****                     vibratoCrossfade[whichLinearSensor] = 0.0f;
 466:main.c        ****                     crossFadeStartCount[whichLinearSensor] = 0;
 467:main.c        ****                 }
 468:main.c        ****                 //64 is the number of passes through this loop that it waits before applying the hi
 469:main.c        ****                 //otherwise you get glitches as the filter picks up fret changes and smoothes them 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 29


 470:main.c        ****                 // would be better to do highpass and lowpass to narrow to bandwidth of 1Hz to 10Hz
 471:main.c        ****                 else if ((vibratoCrossfade[whichLinearSensor] < 1.5f) && (crossFadeStartCount[which
 472:main.c        ****                 {
 473:main.c        ****                     vibratoCrossfade[whichLinearSensor] += 0.01f;
 474:main.c        ****                    
 475:main.c        ****                 }
 476:main.c        ****                 else if (crossFadeStartCount[whichLinearSensor] <= 64)
 477:main.c        ****                 {
 478:main.c        ****                     crossFadeStartCount[whichLinearSensor]++;
 479:main.c        ****                 }
 480:main.c        ****          
 481:main.c        ****                 previousHysteresisStates[whichLinearSensor] = hysteresisStates[whichLinearSensor];
 482:main.c        ****                                 //high pass filter to get fast changes to add later
 483:main.c        ****                 float vibrato = midiFloat - hp_x[whichLinearSensor] + hp_R * hp_y[whichLinearSensor
 484:main.c        ****                 hp_x[whichLinearSensor] = midiFloat;
 485:main.c        ****                 hp_y[whichLinearSensor] = vibrato;
 486:main.c        ****                 
 487:main.c        ****                 midiFloat = hysteresisStates[whichLinearSensor]+ (vibrato * vibratoCrossfade[whichL
 488:main.c        ****             }                
 489:main.c        ****             #endif
 490:main.c        ****             
 491:main.c        ****              
 492:main.c        ****             float pitchBendVal = 8192.0;
 1081              		.loc 1 492 0
 1082 00ae 4FF08C43 		mov	r3, #1174405120
 1083 00b2 3B60     		str	r3, [r7]	@ float
 493:main.c        ****             
 494:main.c        ****             if (linearPotValue32Bit[whichLinearSensor] == 65535)
 1084              		.loc 1 494 0
 1085 00b4 814B     		ldr	r3, .L113+28
 1086 00b6 1B68     		ldr	r3, [r3]
 1087 00b8 814A     		ldr	r2, .L113+32
 1088 00ba 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1089 00be 4FF6FF72 		movw	r2, #65535
 1090 00c2 9342     		cmp	r3, r2
 1091 00c4 40F01481 		bne	.L55
 495:main.c        ****             {
 496:main.c        ****                 stringMIDI[whichLinearSensor] = openStringMIDI[whichLinearSensor];
 1092              		.loc 1 496 0
 1093 00c8 7C4B     		ldr	r3, .L113+28
 1094 00ca 1B68     		ldr	r3, [r3]
 1095 00cc 7B4A     		ldr	r2, .L113+28
 1096 00ce 1268     		ldr	r2, [r2]
 1097 00d0 7C49     		ldr	r1, .L113+36
 1098 00d2 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1099 00d6 7C49     		ldr	r1, .L113+40
 1100 00d8 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 497:main.c        ****                  //pitchBendVal  = (stringMIDI[whichLinearSensor] * 341.0f) + 8192.0f;
 498:main.c        ****                 //if ((openStringCount[whichLinearSensor] < 5) || (CapSense_sensorOnMask[whichLinea
 499:main.c        ****                 //{
 500:main.c        ****                 //    openStringCount[whichLinearSensor]++;
 501:main.c        ****                 //}
 502:main.c        ****                 //else
 503:main.c        ****                 //{
 504:main.c        ****                 //    pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 505:main.c        ****                // }
 506:main.c        ****                 if (pitchFreeze[whichLinearSensor])
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 30


 1101              		.loc 1 506 0
 1102 00dc 774B     		ldr	r3, .L113+28
 1103 00de 1B68     		ldr	r3, [r3]
 1104 00e0 7A4A     		ldr	r2, .L113+44
 1105 00e2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1106 00e4 002B     		cmp	r3, #0
 1107 00e6 00F0B380 		beq	.L56
 507:main.c        ****                 {
 508:main.c        ****                     stringMIDI[whichLinearSensor] = pitchBendHistory[whichLinearSensor][((pitchBend
 1108              		.loc 1 508 0
 1109 00ea 744B     		ldr	r3, .L113+28
 1110 00ec 1B68     		ldr	r3, [r3]
 1111 00ee 734A     		ldr	r2, .L113+28
 1112 00f0 1168     		ldr	r1, [r2]
 1113 00f2 724A     		ldr	r2, .L113+28
 1114 00f4 1268     		ldr	r2, [r2]
 1115 00f6 7648     		ldr	r0, .L113+48
 1116 00f8 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 1117 00fc 0132     		adds	r2, r2, #1
 1118 00fe 02F01F02 		and	r2, r2, #31
 1119 0102 7448     		ldr	r0, .L113+52
 1120 0104 4901     		lsls	r1, r1, #5
 1121 0106 0A44     		add	r2, r2, r1
 1122 0108 50F82220 		ldr	r2, [r0, r2, lsl #2]	@ float
 1123 010c 6E49     		ldr	r1, .L113+40
 1124 010e 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 509:main.c        ****                     pitchBendHistory[whichLinearSensor][pitchBendHistoryPointer[whichLinearSensor]]
 1125              		.loc 1 509 0
 1126 0112 6A4B     		ldr	r3, .L113+28
 1127 0114 1B68     		ldr	r3, [r3]
 1128 0116 694A     		ldr	r2, .L113+28
 1129 0118 1268     		ldr	r2, [r2]
 1130 011a 6D49     		ldr	r1, .L113+48
 1131 011c 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1132 0120 1046     		mov	r0, r2
 1133 0122 664A     		ldr	r2, .L113+28
 1134 0124 1268     		ldr	r2, [r2]
 1135 0126 6849     		ldr	r1, .L113+40
 1136 0128 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1137 012c 6949     		ldr	r1, .L113+52
 1138 012e 5B01     		lsls	r3, r3, #5
 1139 0130 0344     		add	r3, r3, r0
 1140 0132 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 510:main.c        ****                     pitchBendHistoryPointer[whichLinearSensor] =  (pitchBendHistoryPointer[whichLin
 1141              		.loc 1 510 0
 1142 0136 614B     		ldr	r3, .L113+28
 1143 0138 1B68     		ldr	r3, [r3]
 1144 013a 604A     		ldr	r2, .L113+28
 1145 013c 1268     		ldr	r2, [r2]
 1146 013e 6449     		ldr	r1, .L113+48
 1147 0140 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1148 0144 0132     		adds	r2, r2, #1
 1149 0146 92B2     		uxth	r2, r2
 1150 0148 02F01F02 		and	r2, r2, #31
 1151 014c 91B2     		uxth	r1, r2
 1152 014e 604A     		ldr	r2, .L113+48
 1153 0150 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 31


 511:main.c        ****                     if (frettedState)
 1154              		.loc 1 511 0
 1155 0154 604B     		ldr	r3, .L113+56
 1156 0156 1B68     		ldr	r3, [r3]
 1157 0158 002B     		cmp	r3, #0
 1158 015a 52D0     		beq	.L57
 512:main.c        ****                     { 
 513:main.c        ****                         if ((stringMIDI[whichLinearSensor] > (stringMIDIPrev[whichLinearSensor] + l
 1159              		.loc 1 513 0
 1160 015c 574B     		ldr	r3, .L113+28
 1161 015e 1B68     		ldr	r3, [r3]
 1162 0160 594A     		ldr	r2, .L113+40
 1163 0162 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
 1164 0166 554B     		ldr	r3, .L113+28
 1165 0168 1B68     		ldr	r3, [r3]
 1166 016a 5C4A     		ldr	r2, .L113+60
 1167 016c 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1168 0170 5B4B     		ldr	r3, .L113+64
 1169 0172 1B68     		ldr	r3, [r3]	@ float
 1170 0174 1946     		mov	r1, r3
 1171 0176 1046     		mov	r0, r2
 1172 0178 FFF7FEFF 		bl	__aeabi_fadd
 1173 017c 0346     		mov	r3, r0
 1174 017e 1946     		mov	r1, r3
 1175 0180 2046     		mov	r0, r4
 1176 0182 FFF7FEFF 		bl	__aeabi_fcmpgt
 1177 0186 0346     		mov	r3, r0
 1178 0188 002B     		cmp	r3, #0
 1179 018a 17D1     		bne	.L58
 1180              		.loc 1 513 0 is_stmt 0 discriminator 1
 1181 018c 4B4B     		ldr	r3, .L113+28
 1182 018e 1B68     		ldr	r3, [r3]
 1183 0190 4D4A     		ldr	r2, .L113+40
 1184 0192 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
 1185 0196 494B     		ldr	r3, .L113+28
 1186 0198 1B68     		ldr	r3, [r3]
 1187 019a 504A     		ldr	r2, .L113+60
 1188 019c 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1189 01a0 4F4B     		ldr	r3, .L113+64
 1190 01a2 1B68     		ldr	r3, [r3]	@ float
 1191 01a4 1946     		mov	r1, r3
 1192 01a6 1046     		mov	r0, r2
 1193 01a8 FFF7FEFF 		bl	__aeabi_fsub
 1194 01ac 0346     		mov	r3, r0
 1195 01ae 1946     		mov	r1, r3
 1196 01b0 2046     		mov	r0, r4
 1197 01b2 FFF7FEFF 		bl	__aeabi_fcmplt
 1198 01b6 0346     		mov	r3, r0
 1199 01b8 002B     		cmp	r3, #0
 1200 01ba 18D0     		beq	.L109
 1201              	.L58:
 514:main.c        ****                         {
 515:main.c        ****                             stringMIDI[whichLinearSensor] = roundf(stringMIDI[whichLinearSensor]);
 1202              		.loc 1 515 0 is_stmt 1
 1203 01bc 3F4B     		ldr	r3, .L113+28
 1204 01be 1C68     		ldr	r4, [r3]
 1205 01c0 3E4B     		ldr	r3, .L113+28
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 32


 1206 01c2 1B68     		ldr	r3, [r3]
 1207 01c4 404A     		ldr	r2, .L113+40
 1208 01c6 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1209 01ca 1846     		mov	r0, r3
 1210 01cc FFF7FEFF 		bl	roundf
 1211 01d0 0246     		mov	r2, r0
 1212 01d2 3D4B     		ldr	r3, .L113+40
 1213 01d4 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 516:main.c        ****                             stringMIDIPrev[whichLinearSensor] = stringMIDI[whichLinearSensor];
 1214              		.loc 1 516 0
 1215 01d8 384B     		ldr	r3, .L113+28
 1216 01da 1B68     		ldr	r3, [r3]
 1217 01dc 374A     		ldr	r2, .L113+28
 1218 01de 1268     		ldr	r2, [r2]
 1219 01e0 3949     		ldr	r1, .L113+40
 1220 01e2 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1221 01e6 3D49     		ldr	r1, .L113+60
 1222 01e8 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1223 01ec 09E0     		b	.L57
 1224              	.L109:
 517:main.c        ****                         }
 518:main.c        ****                         else
 519:main.c        ****                         {
 520:main.c        ****                            stringMIDI[whichLinearSensor] =  stringMIDIPrev[whichLinearSensor];
 1225              		.loc 1 520 0
 1226 01ee 334B     		ldr	r3, .L113+28
 1227 01f0 1B68     		ldr	r3, [r3]
 1228 01f2 324A     		ldr	r2, .L113+28
 1229 01f4 1268     		ldr	r2, [r2]
 1230 01f6 3949     		ldr	r1, .L113+60
 1231 01f8 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1232 01fc 3249     		ldr	r1, .L113+40
 1233 01fe 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1234              	.L57:
 521:main.c        ****                         }
 522:main.c        ****                     }
 523:main.c        ****                     pitchBendVal  = ((stringMIDI[whichLinearSensor] - openStringMIDI[whichLinearSen
 1235              		.loc 1 523 0
 1236 0202 2E4B     		ldr	r3, .L113+28
 1237 0204 1B68     		ldr	r3, [r3]
 1238 0206 304A     		ldr	r2, .L113+40
 1239 0208 52F82300 		ldr	r0, [r2, r3, lsl #2]	@ float
 1240 020c 2B4B     		ldr	r3, .L113+28
 1241 020e 1B68     		ldr	r3, [r3]
 1242 0210 2C4A     		ldr	r2, .L113+36
 1243 0212 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1244 0216 1946     		mov	r1, r3
 1245 0218 FFF7FEFF 		bl	__aeabi_fsub
 1246 021c 0346     		mov	r3, r0
 1247 021e 3149     		ldr	r1, .L113+68
 1248 0220 1846     		mov	r0, r3
 1249 0222 FFF7FEFF 		bl	__aeabi_fmul
 1250 0226 0346     		mov	r3, r0
 1251 0228 4FF08C41 		mov	r1, #1174405120
 1252 022c 1846     		mov	r0, r3
 1253 022e FFF7FEFF 		bl	__aeabi_fadd
 1254 0232 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 33


 1255 0234 3B60     		str	r3, [r7]	@ float
 524:main.c        ****                     openStringCount[whichLinearSensor] = 0;
 1256              		.loc 1 524 0
 1257 0236 214B     		ldr	r3, .L113+28
 1258 0238 1B68     		ldr	r3, [r3]
 1259 023a 2B4A     		ldr	r2, .L113+72
 1260 023c 0021     		movs	r1, #0
 1261 023e 42F82310 		str	r1, [r2, r3, lsl #2]
 525:main.c        ****                     pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 1262              		.loc 1 525 0
 1263 0242 1E4B     		ldr	r3, .L113+28
 1264 0244 1B68     		ldr	r3, [r3]
 1265 0246 2949     		ldr	r1, .L113+76
 1266 0248 3A68     		ldr	r2, [r7]	@ float
 1267 024a 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1268 024e BDE1     		b	.L54
 1269              	.L56:
 526:main.c        ****                 }
 527:main.c        ****                 else
 528:main.c        ****                 {
 529:main.c        ****                     pitchBendHistory[whichLinearSensor][pitchBendHistoryPointer[whichLinearSensor]]
 1270              		.loc 1 529 0
 1271 0250 1A4B     		ldr	r3, .L113+28
 1272 0252 1B68     		ldr	r3, [r3]
 1273 0254 194A     		ldr	r2, .L113+28
 1274 0256 1268     		ldr	r2, [r2]
 1275 0258 1D49     		ldr	r1, .L113+48
 1276 025a 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1277 025e 1046     		mov	r0, r2
 1278 0260 164A     		ldr	r2, .L113+28
 1279 0262 1268     		ldr	r2, [r2]
 1280 0264 1749     		ldr	r1, .L113+36
 1281 0266 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1282 026a 1A49     		ldr	r1, .L113+52
 1283 026c 5B01     		lsls	r3, r3, #5
 1284 026e 0344     		add	r3, r3, r0
 1285 0270 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 530:main.c        ****                     pitchBendHistoryPointer[whichLinearSensor] =  (pitchBendHistoryPointer[whichLin
 1286              		.loc 1 530 0
 1287 0274 114B     		ldr	r3, .L113+28
 1288 0276 1B68     		ldr	r3, [r3]
 1289 0278 104A     		ldr	r2, .L113+28
 1290 027a 1268     		ldr	r2, [r2]
 1291 027c 1449     		ldr	r1, .L113+48
 1292 027e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1293 0282 0132     		adds	r2, r2, #1
 1294 0284 92B2     		uxth	r2, r2
 1295 0286 02F01F02 		and	r2, r2, #31
 1296 028a 91B2     		uxth	r1, r2
 1297 028c 104A     		ldr	r2, .L113+48
 1298 028e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 531:main.c        ****                     pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 1299              		.loc 1 531 0
 1300 0292 0A4B     		ldr	r3, .L113+28
 1301 0294 1B68     		ldr	r3, [r3]
 1302 0296 1549     		ldr	r1, .L113+76
 1303 0298 3A68     		ldr	r2, [r7]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 34


 1304 029a 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1305 029e 95E1     		b	.L54
 1306              	.L114:
 1307              		.align	2
 1308              	.L113:
 1309 02a0 00000000 		.word	Em_EEPROM_em_EepromStorage
 1310 02a4 00000000 		.word	eepromReturnValue
 1311 02a8 00000000 		.word	Vbus_function
 1312 02ac 00000000 		.word	hp_R
 1313 02b0 40EA6F3F 		.word	1064299072
 1314 02b4 00000000 		.word	currentOutPointer
 1315 02b8 00000000 		.word	scanPart
 1316 02bc 00000000 		.word	whichLinearSensor
 1317 02c0 00000000 		.word	linearPotValue32Bit
 1318 02c4 00000000 		.word	openStringMIDI
 1319 02c8 00000000 		.word	stringMIDI
 1320 02cc 00000000 		.word	pitchFreeze
 1321 02d0 00000000 		.word	pitchBendHistoryPointer
 1322 02d4 00000000 		.word	pitchBendHistory
 1323 02d8 00000000 		.word	frettedState
 1324 02dc 00000000 		.word	stringMIDIPrev
 1325 02e0 00000000 		.word	linearHysteresis
 1326 02e4 0080AA43 		.word	1135247360
 1327 02e8 00000000 		.word	openStringCount
 1328 02ec 00000000 		.word	pitchBendsPerString
 1329              	.L55:
 532:main.c        ****                 }  
 533:main.c        ****             }
 534:main.c        ****             else
 535:main.c        ****             {
 536:main.c        ****                 
 537:main.c        **** 
 538:main.c        ****                 
 539:main.c        ****                 if (pitchFreeze[whichLinearSensor])
 1330              		.loc 1 539 0
 1331 02f0 8E4B     		ldr	r3, .L115
 1332 02f2 1B68     		ldr	r3, [r3]
 1333 02f4 8E4A     		ldr	r2, .L115+4
 1334 02f6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1335 02f8 002B     		cmp	r3, #0
 1336 02fa 14D0     		beq	.L62
 540:main.c        ****                 {
 541:main.c        ****                    stringMIDI[whichLinearSensor] = pitchBendHistory[whichLinearSensor][((pitchBendH
 1337              		.loc 1 541 0
 1338 02fc 8B4B     		ldr	r3, .L115
 1339 02fe 1B68     		ldr	r3, [r3]
 1340 0300 8A4A     		ldr	r2, .L115
 1341 0302 1168     		ldr	r1, [r2]
 1342 0304 894A     		ldr	r2, .L115
 1343 0306 1268     		ldr	r2, [r2]
 1344 0308 8A48     		ldr	r0, .L115+8
 1345 030a 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 1346 030e 0132     		adds	r2, r2, #1
 1347 0310 02F01F02 		and	r2, r2, #31
 1348 0314 8848     		ldr	r0, .L115+12
 1349 0316 4901     		lsls	r1, r1, #5
 1350 0318 0A44     		add	r2, r2, r1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 35


 1351 031a 50F82220 		ldr	r2, [r0, r2, lsl #2]	@ float
 1352 031e 8749     		ldr	r1, .L115+16
 1353 0320 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1354 0324 B5E0     		b	.L63
 1355              	.L62:
 542:main.c        ****                 }
 543:main.c        ****                 else
 544:main.c        ****                 {
 545:main.c        ****                     linearFIR[whichLinearSensor][linFirPointer[whichLinearSensor]] = linearPotValue
 1356              		.loc 1 545 0
 1357 0326 814B     		ldr	r3, .L115
 1358 0328 1B68     		ldr	r3, [r3]
 1359 032a 804A     		ldr	r2, .L115
 1360 032c 1268     		ldr	r2, [r2]
 1361 032e 8449     		ldr	r1, .L115+20
 1362 0330 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 1363 0332 1046     		mov	r0, r2
 1364 0334 7D4A     		ldr	r2, .L115
 1365 0336 1268     		ldr	r2, [r2]
 1366 0338 8249     		ldr	r1, .L115+24
 1367 033a 51F82220 		ldr	r2, [r1, r2, lsl #2]
 1368 033e 1146     		mov	r1, r2
 1369 0340 814A     		ldr	r2, .L115+28
 1370 0342 5B00     		lsls	r3, r3, #1
 1371 0344 0344     		add	r3, r3, r0
 1372 0346 42F82310 		str	r1, [r2, r3, lsl #2]
 546:main.c        ****                     linearSmoothed[whichLinearSensor] = 0;
 1373              		.loc 1 546 0
 1374 034a 784B     		ldr	r3, .L115
 1375 034c 1B68     		ldr	r3, [r3]
 1376 034e 7F4A     		ldr	r2, .L115+32
 1377 0350 0021     		movs	r1, #0
 1378 0352 42F82310 		str	r1, [r2, r3, lsl #2]
 1379              	.LBB3:
 547:main.c        ****                     for (int j = 0; j < LINEAR_FIR_SIZE; j++)
 1380              		.loc 1 547 0
 1381 0356 0023     		movs	r3, #0
 1382 0358 7B61     		str	r3, [r7, #20]
 1383 035a 13E0     		b	.L64
 1384              	.L65:
 548:main.c        ****                     {
 549:main.c        ****                         linearSmoothed[whichLinearSensor] += linearFIR[whichLinearSensor][j];
 1385              		.loc 1 549 0 discriminator 3
 1386 035c 734B     		ldr	r3, .L115
 1387 035e 1B68     		ldr	r3, [r3]
 1388 0360 7949     		ldr	r1, .L115+28
 1389 0362 5A00     		lsls	r2, r3, #1
 1390 0364 7B69     		ldr	r3, [r7, #20]
 1391 0366 1344     		add	r3, r3, r2
 1392 0368 51F82320 		ldr	r2, [r1, r3, lsl #2]
 1393 036c 6F4B     		ldr	r3, .L115
 1394 036e 1B68     		ldr	r3, [r3]
 1395 0370 7649     		ldr	r1, .L115+32
 1396 0372 51F82310 		ldr	r1, [r1, r3, lsl #2]
 1397 0376 0A44     		add	r2, r2, r1
 1398 0378 7449     		ldr	r1, .L115+32
 1399 037a 41F82320 		str	r2, [r1, r3, lsl #2]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 36


 547:main.c        ****                     for (int j = 0; j < LINEAR_FIR_SIZE; j++)
 1400              		.loc 1 547 0 discriminator 3
 1401 037e 7B69     		ldr	r3, [r7, #20]
 1402 0380 0133     		adds	r3, r3, #1
 1403 0382 7B61     		str	r3, [r7, #20]
 1404              	.L64:
 547:main.c        ****                     for (int j = 0; j < LINEAR_FIR_SIZE; j++)
 1405              		.loc 1 547 0 is_stmt 0 discriminator 1
 1406 0384 7B69     		ldr	r3, [r7, #20]
 1407 0386 012B     		cmp	r3, #1
 1408 0388 E8DD     		ble	.L65
 1409              	.LBE3:
 550:main.c        ****                     }             
 551:main.c        ****                     linFirPointer[whichLinearSensor] = (linFirPointer[whichLinearSensor] + 1) & LIN
 1410              		.loc 1 551 0 is_stmt 1
 1411 038a 684B     		ldr	r3, .L115
 1412 038c 1B68     		ldr	r3, [r3]
 1413 038e 674A     		ldr	r2, .L115
 1414 0390 1268     		ldr	r2, [r2]
 1415 0392 6B49     		ldr	r1, .L115+20
 1416 0394 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 1417 0396 0132     		adds	r2, r2, #1
 1418 0398 D2B2     		uxtb	r2, r2
 1419 039a 02F00102 		and	r2, r2, #1
 1420 039e D1B2     		uxtb	r1, r2
 1421 03a0 674A     		ldr	r2, .L115+20
 1422 03a2 D154     		strb	r1, [r2, r3]
 552:main.c        ****                     linearSmoothed[whichLinearSensor] = linearSmoothed[whichLinearSensor] >> LINEAR
 1423              		.loc 1 552 0
 1424 03a4 614B     		ldr	r3, .L115
 1425 03a6 1B68     		ldr	r3, [r3]
 1426 03a8 604A     		ldr	r2, .L115
 1427 03aa 1268     		ldr	r2, [r2]
 1428 03ac 6749     		ldr	r1, .L115+32
 1429 03ae 51F82220 		ldr	r2, [r1, r2, lsl #2]
 1430 03b2 5208     		lsrs	r2, r2, #1
 1431 03b4 6549     		ldr	r1, .L115+32
 1432 03b6 41F82320 		str	r2, [r1, r3, lsl #2]
 553:main.c        ****                     invStringMappedPositions[whichLinearSensor] = (1.0f /  map((float)linearSmoothe
 1433              		.loc 1 553 0
 1434 03ba 5C4B     		ldr	r3, .L115
 1435 03bc 1C68     		ldr	r4, [r3]
 1436 03be 5B4B     		ldr	r3, .L115
 1437 03c0 1B68     		ldr	r3, [r3]
 1438 03c2 624A     		ldr	r2, .L115+32
 1439 03c4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1440 03c8 1846     		mov	r0, r3
 1441 03ca FFF7FEFF 		bl	__aeabi_ui2f
 1442 03ce 0546     		mov	r5, r0
 1443 03d0 564B     		ldr	r3, .L115
 1444 03d2 1B68     		ldr	r3, [r3]
 1445 03d4 5E4A     		ldr	r2, .L115+36
 1446 03d6 52F83330 		ldr	r3, [r2, r3, lsl #3]
 1447 03da 1846     		mov	r0, r3
 1448 03dc FFF7FEFF 		bl	__aeabi_ui2f
 1449 03e0 0646     		mov	r6, r0
 1450 03e2 524B     		ldr	r3, .L115
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 37


 1451 03e4 1B68     		ldr	r3, [r3]
 1452 03e6 5A4A     		ldr	r2, .L115+36
 1453 03e8 DB00     		lsls	r3, r3, #3
 1454 03ea 1344     		add	r3, r3, r2
 1455 03ec 5B68     		ldr	r3, [r3, #4]
 1456 03ee 1846     		mov	r0, r3
 1457 03f0 FFF7FEFF 		bl	__aeabi_ui2f
 1458 03f4 0146     		mov	r1, r0
 1459 03f6 574B     		ldr	r3, .L115+40
 1460 03f8 1A68     		ldr	r2, [r3]	@ float
 1461 03fa 564B     		ldr	r3, .L115+40
 1462 03fc 5B68     		ldr	r3, [r3, #4]	@ float
 1463 03fe 0093     		str	r3, [sp]	@ float
 1464 0400 1346     		mov	r3, r2
 1465 0402 0A46     		mov	r2, r1
 1466 0404 3146     		mov	r1, r6
 1467 0406 2846     		mov	r0, r5
 1468 0408 FFF7FEFF 		bl	map
 1469 040c 0346     		mov	r3, r0
 1470 040e 1946     		mov	r1, r3
 1471 0410 4FF07E50 		mov	r0, #1065353216
 1472 0414 FFF7FEFF 		bl	__aeabi_fdiv
 1473 0418 0346     		mov	r3, r0
 1474 041a 1A46     		mov	r2, r3
 1475 041c 4E4B     		ldr	r3, .L115+44
 1476 041e 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 554:main.c        ****                     stringMIDI[whichLinearSensor] = ftom(invStringMappedPositions[whichLinearSensor
 1477              		.loc 1 554 0
 1478 0422 424B     		ldr	r3, .L115
 1479 0424 1C68     		ldr	r4, [r3]
 1480 0426 414B     		ldr	r3, .L115
 1481 0428 1B68     		ldr	r3, [r3]
 1482 042a 4B4A     		ldr	r2, .L115+44
 1483 042c 52F82300 		ldr	r0, [r2, r3, lsl #2]	@ float
 1484 0430 3E4B     		ldr	r3, .L115
 1485 0432 1B68     		ldr	r3, [r3]
 1486 0434 494A     		ldr	r2, .L115+48
 1487 0436 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1488 043a 1946     		mov	r1, r3
 1489 043c FFF7FEFF 		bl	__aeabi_fmul
 1490 0440 0346     		mov	r3, r0
 1491 0442 1846     		mov	r0, r3
 1492 0444 FFF7FEFF 		bl	ftom
 1493 0448 0246     		mov	r2, r0
 1494 044a 3C4B     		ldr	r3, .L115+16
 1495 044c 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 555:main.c        ****                     pitchBendHistory[whichLinearSensor][pitchBendHistoryPointer[whichLinearSensor]]
 1496              		.loc 1 555 0
 1497 0450 364B     		ldr	r3, .L115
 1498 0452 1B68     		ldr	r3, [r3]
 1499 0454 354A     		ldr	r2, .L115
 1500 0456 1268     		ldr	r2, [r2]
 1501 0458 3649     		ldr	r1, .L115+8
 1502 045a 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1503 045e 1046     		mov	r0, r2
 1504 0460 324A     		ldr	r2, .L115
 1505 0462 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 38


 1506 0464 3549     		ldr	r1, .L115+16
 1507 0466 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1508 046a 3349     		ldr	r1, .L115+12
 1509 046c 5B01     		lsls	r3, r3, #5
 1510 046e 0344     		add	r3, r3, r0
 1511 0470 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 556:main.c        ****                     pitchBendHistoryPointer[whichLinearSensor] =  (pitchBendHistoryPointer[whichLin
 1512              		.loc 1 556 0
 1513 0474 2D4B     		ldr	r3, .L115
 1514 0476 1B68     		ldr	r3, [r3]
 1515 0478 2C4A     		ldr	r2, .L115
 1516 047a 1268     		ldr	r2, [r2]
 1517 047c 2D49     		ldr	r1, .L115+8
 1518 047e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1519 0482 0132     		adds	r2, r2, #1
 1520 0484 92B2     		uxth	r2, r2
 1521 0486 02F01F02 		and	r2, r2, #31
 1522 048a 91B2     		uxth	r1, r2
 1523 048c 294A     		ldr	r2, .L115+8
 1524 048e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 1525              	.L63:
 557:main.c        ****                 }
 558:main.c        **** 
 559:main.c        ****                 if (frettedState)
 1526              		.loc 1 559 0
 1527 0492 334B     		ldr	r3, .L115+52
 1528 0494 1B68     		ldr	r3, [r3]
 1529 0496 002B     		cmp	r3, #0
 1530 0498 72D0     		beq	.L66
 560:main.c        ****                 { 
 561:main.c        ****                     if ((stringMIDI[whichLinearSensor] > (stringMIDIPrev[whichLinearSensor] + linea
 1531              		.loc 1 561 0
 1532 049a 244B     		ldr	r3, .L115
 1533 049c 1B68     		ldr	r3, [r3]
 1534 049e 274A     		ldr	r2, .L115+16
 1535 04a0 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
 1536 04a4 214B     		ldr	r3, .L115
 1537 04a6 1B68     		ldr	r3, [r3]
 1538 04a8 2E4A     		ldr	r2, .L115+56
 1539 04aa 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1540 04ae 2E4B     		ldr	r3, .L115+60
 1541 04b0 1B68     		ldr	r3, [r3]	@ float
 1542 04b2 1946     		mov	r1, r3
 1543 04b4 1046     		mov	r0, r2
 1544 04b6 FFF7FEFF 		bl	__aeabi_fadd
 1545 04ba 0346     		mov	r3, r0
 1546 04bc 1946     		mov	r1, r3
 1547 04be 2046     		mov	r0, r4
 1548 04c0 FFF7FEFF 		bl	__aeabi_fcmpgt
 1549 04c4 0346     		mov	r3, r0
 1550 04c6 002B     		cmp	r3, #0
 1551 04c8 17D1     		bne	.L67
 1552              		.loc 1 561 0 is_stmt 0 discriminator 1
 1553 04ca 184B     		ldr	r3, .L115
 1554 04cc 1B68     		ldr	r3, [r3]
 1555 04ce 1B4A     		ldr	r2, .L115+16
 1556 04d0 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 39


 1557 04d4 154B     		ldr	r3, .L115
 1558 04d6 1B68     		ldr	r3, [r3]
 1559 04d8 224A     		ldr	r2, .L115+56
 1560 04da 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1561 04de 224B     		ldr	r3, .L115+60
 1562 04e0 1B68     		ldr	r3, [r3]	@ float
 1563 04e2 1946     		mov	r1, r3
 1564 04e4 1046     		mov	r0, r2
 1565 04e6 FFF7FEFF 		bl	__aeabi_fsub
 1566 04ea 0346     		mov	r3, r0
 1567 04ec 1946     		mov	r1, r3
 1568 04ee 2046     		mov	r0, r4
 1569 04f0 FFF7FEFF 		bl	__aeabi_fcmplt
 1570 04f4 0346     		mov	r3, r0
 1571 04f6 002B     		cmp	r3, #0
 1572 04f8 38D0     		beq	.L110
 1573              	.L67:
 562:main.c        ****                     {
 563:main.c        ****                         stringMIDI[whichLinearSensor] = roundf(stringMIDI[whichLinearSensor]);
 1574              		.loc 1 563 0 is_stmt 1
 1575 04fa 0C4B     		ldr	r3, .L115
 1576 04fc 1C68     		ldr	r4, [r3]
 1577 04fe 0B4B     		ldr	r3, .L115
 1578 0500 1B68     		ldr	r3, [r3]
 1579 0502 0E4A     		ldr	r2, .L115+16
 1580 0504 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1581 0508 1846     		mov	r0, r3
 1582 050a FFF7FEFF 		bl	roundf
 1583 050e 0246     		mov	r2, r0
 1584 0510 0A4B     		ldr	r3, .L115+16
 1585 0512 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 564:main.c        ****                         stringMIDIPrev[whichLinearSensor] = stringMIDI[whichLinearSensor];
 1586              		.loc 1 564 0
 1587 0516 054B     		ldr	r3, .L115
 1588 0518 1B68     		ldr	r3, [r3]
 1589 051a 044A     		ldr	r2, .L115
 1590 051c 1268     		ldr	r2, [r2]
 1591 051e 0749     		ldr	r1, .L115+16
 1592 0520 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1593 0524 0F49     		ldr	r1, .L115+56
 1594 0526 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1595 052a 29E0     		b	.L66
 1596              	.L116:
 1597              		.align	2
 1598              	.L115:
 1599 052c 00000000 		.word	whichLinearSensor
 1600 0530 00000000 		.word	pitchFreeze
 1601 0534 00000000 		.word	pitchBendHistoryPointer
 1602 0538 00000000 		.word	pitchBendHistory
 1603 053c 00000000 		.word	stringMIDI
 1604 0540 00000000 		.word	linFirPointer
 1605 0544 00000000 		.word	linearPotValue32Bit
 1606 0548 00000000 		.word	linearFIR
 1607 054c 00000000 		.word	linearSmoothed
 1608 0550 00000000 		.word	fretMeasurements
 1609 0554 00000000 		.word	fretRatios
 1610 0558 00000000 		.word	invStringMappedPositions
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 40


 1611 055c 00000000 		.word	openStringFreqs
 1612 0560 00000000 		.word	frettedState
 1613 0564 00000000 		.word	stringMIDIPrev
 1614 0568 00000000 		.word	linearHysteresis
 1615              	.L110:
 565:main.c        ****                     }
 566:main.c        ****                     else
 567:main.c        ****                     {
 568:main.c        ****                        stringMIDI[whichLinearSensor] =  stringMIDIPrev[whichLinearSensor];
 1616              		.loc 1 568 0
 1617 056c A74B     		ldr	r3, .L117
 1618 056e 1B68     		ldr	r3, [r3]
 1619 0570 A64A     		ldr	r2, .L117
 1620 0572 1268     		ldr	r2, [r2]
 1621 0574 A649     		ldr	r1, .L117+4
 1622 0576 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1623 057a A649     		ldr	r1, .L117+8
 1624 057c 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1625              	.L66:
 569:main.c        ****                     }
 570:main.c        ****                 }
 571:main.c        ****                 pitchBendVal  = ((stringMIDI[whichLinearSensor] - openStringMIDI[whichLinearSensor]
 1626              		.loc 1 571 0
 1627 0580 A24B     		ldr	r3, .L117
 1628 0582 1B68     		ldr	r3, [r3]
 1629 0584 A34A     		ldr	r2, .L117+8
 1630 0586 52F82300 		ldr	r0, [r2, r3, lsl #2]	@ float
 1631 058a A04B     		ldr	r3, .L117
 1632 058c 1B68     		ldr	r3, [r3]
 1633 058e A24A     		ldr	r2, .L117+12
 1634 0590 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1635 0594 1946     		mov	r1, r3
 1636 0596 FFF7FEFF 		bl	__aeabi_fsub
 1637 059a 0346     		mov	r3, r0
 1638 059c 9F49     		ldr	r1, .L117+16
 1639 059e 1846     		mov	r0, r3
 1640 05a0 FFF7FEFF 		bl	__aeabi_fmul
 1641 05a4 0346     		mov	r3, r0
 1642 05a6 4FF08C41 		mov	r1, #1174405120
 1643 05aa 1846     		mov	r0, r3
 1644 05ac FFF7FEFF 		bl	__aeabi_fadd
 1645 05b0 0346     		mov	r3, r0
 1646 05b2 3B60     		str	r3, [r7]	@ float
 572:main.c        ****                 openStringCount[whichLinearSensor] = 0;
 1647              		.loc 1 572 0
 1648 05b4 954B     		ldr	r3, .L117
 1649 05b6 1B68     		ldr	r3, [r3]
 1650 05b8 994A     		ldr	r2, .L117+20
 1651 05ba 0021     		movs	r1, #0
 1652 05bc 42F82310 		str	r1, [r2, r3, lsl #2]
 573:main.c        ****                 pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 1653              		.loc 1 573 0
 1654 05c0 924B     		ldr	r3, .L117
 1655 05c2 1B68     		ldr	r3, [r3]
 1656 05c4 9749     		ldr	r1, .L117+24
 1657 05c6 3A68     		ldr	r2, [r7]	@ float
 1658 05c8 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 41


 1659              	.L54:
 1660              	.LBE2:
 574:main.c        ****             }
 575:main.c        ****            
 576:main.c        ****         }
 577:main.c        ****        
 578:main.c        ****         if (!polyMode)
 1661              		.loc 1 578 0
 1662 05cc 964B     		ldr	r3, .L117+28
 1663 05ce 1B68     		ldr	r3, [r3]
 1664 05d0 002B     		cmp	r3, #0
 1665 05d2 2BD1     		bne	.L70
 579:main.c        ****         {     
 580:main.c        ****             if (stringStates[whichLinearSensor][0] >= 0)
 1666              		.loc 1 580 0
 1667 05d4 8D4B     		ldr	r3, .L117
 1668 05d6 1B68     		ldr	r3, [r3]
 1669 05d8 944A     		ldr	r2, .L117+32
 1670 05da 52F83330 		ldr	r3, [r2, r3, lsl #3]
 1671 05de 002B     		cmp	r3, #0
 1672 05e0 24DB     		blt	.L70
 581:main.c        ****             {
 582:main.c        ****                 //if (pitchFreeze[whichLinearSensor])
 583:main.c        ****                // {
 584:main.c        ****                     //pitchBendsPerString[whichLinearSensor] =  pitchBendHistory[whichLinearSensor]
 585:main.c        ****                // }
 586:main.c        ****                 
 587:main.c        ****                 if (((int)pitchBendsPerString[whichLinearSensor]) != previousPitchBendsSent)
 1673              		.loc 1 587 0
 1674 05e2 8A4B     		ldr	r3, .L117
 1675 05e4 1B68     		ldr	r3, [r3]
 1676 05e6 8F4A     		ldr	r2, .L117+24
 1677 05e8 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1678 05ec 1846     		mov	r0, r3
 1679 05ee FFF7FEFF 		bl	__aeabi_f2iz
 1680 05f2 0246     		mov	r2, r0
 1681 05f4 8E4B     		ldr	r3, .L117+36
 1682 05f6 1B68     		ldr	r3, [r3]
 1683 05f8 9A42     		cmp	r2, r3
 1684 05fa 17D0     		beq	.L70
 588:main.c        ****                 {
 589:main.c        **** 
 590:main.c        ****                     sendMIDIPitchBend((uint)pitchBendsPerString[whichLinearSensor], 0);
 1685              		.loc 1 590 0
 1686 05fc 834B     		ldr	r3, .L117
 1687 05fe 1B68     		ldr	r3, [r3]
 1688 0600 884A     		ldr	r2, .L117+24
 1689 0602 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1690 0606 1846     		mov	r0, r3
 1691 0608 FFF7FEFF 		bl	__aeabi_f2uiz
 1692 060c 0346     		mov	r3, r0
 1693 060e 0021     		movs	r1, #0
 1694 0610 1846     		mov	r0, r3
 1695 0612 FFF7FEFF 		bl	sendMIDIPitchBend
 591:main.c        ****                     previousPitchBendsSent = (int)pitchBendsPerString[whichLinearSensor];
 1696              		.loc 1 591 0
 1697 0616 7D4B     		ldr	r3, .L117
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 42


 1698 0618 1B68     		ldr	r3, [r3]
 1699 061a 824A     		ldr	r2, .L117+24
 1700 061c 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1701 0620 1846     		mov	r0, r3
 1702 0622 FFF7FEFF 		bl	__aeabi_f2iz
 1703 0626 0246     		mov	r2, r0
 1704 0628 814B     		ldr	r3, .L117+36
 1705 062a 1A60     		str	r2, [r3]
 1706              	.L70:
 592:main.c        ****                 }
 593:main.c        ****             }
 594:main.c        ****         }
 595:main.c        ****         
 596:main.c        ****         //read knobs, joystick, and cv pedal
 597:main.c        ****         if (ADC_SAR_Seq_1_IsEndConversion(ADC_SAR_Seq_1_RETURN_STATUS))
 1707              		.loc 1 597 0
 1708 062c 0120     		movs	r0, #1
 1709 062e FFF7FEFF 		bl	ADC_SAR_Seq_1_IsEndConversion
 1710 0632 0346     		mov	r3, r0
 1711 0634 002B     		cmp	r3, #0
 1712 0636 00F0B080 		beq	.L111
 1713              	.LBB4:
 598:main.c        ****         {
 599:main.c        ****             for (int i = 0; i < 5; i++)
 1714              		.loc 1 599 0
 1715 063a 0023     		movs	r3, #0
 1716 063c 3B61     		str	r3, [r7, #16]
 1717 063e A1E0     		b	.L72
 1718              	.L79:
 600:main.c        ****             {
 601:main.c        ****                 knobsFIR[i][firPointer] = ADC_SAR_Seq_1_GetResult16(i);
 1719              		.loc 1 601 0
 1720 0640 7C4B     		ldr	r3, .L117+40
 1721 0642 1C68     		ldr	r4, [r3]
 1722 0644 3B69     		ldr	r3, [r7, #16]
 1723 0646 9BB2     		uxth	r3, r3
 1724 0648 1846     		mov	r0, r3
 1725 064a FFF7FEFF 		bl	ADC_SAR_Seq_1_GetResult16
 1726 064e 0346     		mov	r3, r0
 1727 0650 1946     		mov	r1, r3
 1728 0652 794A     		ldr	r2, .L117+44
 1729 0654 3B69     		ldr	r3, [r7, #16]
 1730 0656 DB00     		lsls	r3, r3, #3
 1731 0658 2344     		add	r3, r3, r4
 1732 065a 42F82310 		str	r1, [r2, r3, lsl #2]
 602:main.c        ****                 knobs[i] = 0;
 1733              		.loc 1 602 0
 1734 065e 774A     		ldr	r2, .L117+48
 1735 0660 3B69     		ldr	r3, [r7, #16]
 1736 0662 0021     		movs	r1, #0
 1737 0664 42F82310 		str	r1, [r2, r3, lsl #2]
 1738              	.LBB5:
 603:main.c        ****                 for (int j = 0; j < KNOB_FIR_SIZE; j++)
 1739              		.loc 1 603 0
 1740 0668 0023     		movs	r3, #0
 1741 066a FB60     		str	r3, [r7, #12]
 1742 066c 12E0     		b	.L73
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 43


 1743              	.L74:
 604:main.c        ****                 {
 605:main.c        ****                     knobs[i] += knobsFIR[i][j];
 1744              		.loc 1 605 0 discriminator 3
 1745 066e 734A     		ldr	r2, .L117+48
 1746 0670 3B69     		ldr	r3, [r7, #16]
 1747 0672 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1748 0676 7048     		ldr	r0, .L117+44
 1749 0678 3B69     		ldr	r3, [r7, #16]
 1750 067a D900     		lsls	r1, r3, #3
 1751 067c FB68     		ldr	r3, [r7, #12]
 1752 067e 0B44     		add	r3, r3, r1
 1753 0680 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1754 0684 1A44     		add	r2, r2, r3
 1755 0686 6D49     		ldr	r1, .L117+48
 1756 0688 3B69     		ldr	r3, [r7, #16]
 1757 068a 41F82320 		str	r2, [r1, r3, lsl #2]
 603:main.c        ****                 for (int j = 0; j < KNOB_FIR_SIZE; j++)
 1758              		.loc 1 603 0 discriminator 3
 1759 068e FB68     		ldr	r3, [r7, #12]
 1760 0690 0133     		adds	r3, r3, #1
 1761 0692 FB60     		str	r3, [r7, #12]
 1762              	.L73:
 603:main.c        ****                 for (int j = 0; j < KNOB_FIR_SIZE; j++)
 1763              		.loc 1 603 0 is_stmt 0 discriminator 1
 1764 0694 FB68     		ldr	r3, [r7, #12]
 1765 0696 072B     		cmp	r3, #7
 1766 0698 E9DD     		ble	.L74
 1767              	.LBE5:
 606:main.c        ****                 }             
 607:main.c        ****                 knobs[i] = knobs[i] >> KNOB_FIR_SIZE_BITSHIFT;
 1768              		.loc 1 607 0 is_stmt 1
 1769 069a 684A     		ldr	r2, .L117+48
 1770 069c 3B69     		ldr	r3, [r7, #16]
 1771 069e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1772 06a2 DA08     		lsrs	r2, r3, #3
 1773 06a4 6549     		ldr	r1, .L117+48
 1774 06a6 3B69     		ldr	r3, [r7, #16]
 1775 06a8 41F82320 		str	r2, [r1, r3, lsl #2]
 608:main.c        ****                 
 609:main.c        ****                 //now squish down to 7 bit with hysteresis
 610:main.c        ****                 
 611:main.c        ****                 if ((knobs[i] > (knobs7bitPrevLS[i] + knobs7bitHysteresis)) || (knobs[i] < (knobs7b
 1776              		.loc 1 611 0
 1777 06ac 634A     		ldr	r2, .L117+48
 1778 06ae 3B69     		ldr	r3, [r7, #16]
 1779 06b0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1780 06b4 6249     		ldr	r1, .L117+52
 1781 06b6 3A69     		ldr	r2, [r7, #16]
 1782 06b8 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1783 06bc 1146     		mov	r1, r2
 1784 06be 614A     		ldr	r2, .L117+56
 1785 06c0 1288     		ldrh	r2, [r2]
 1786 06c2 0A44     		add	r2, r2, r1
 1787 06c4 9342     		cmp	r3, r2
 1788 06c6 0DD8     		bhi	.L75
 1789              		.loc 1 611 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 44


 1790 06c8 5C4A     		ldr	r2, .L117+48
 1791 06ca 3B69     		ldr	r3, [r7, #16]
 1792 06cc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1793 06d0 5B49     		ldr	r1, .L117+52
 1794 06d2 3A69     		ldr	r2, [r7, #16]
 1795 06d4 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1796 06d8 1146     		mov	r1, r2
 1797 06da 5A4A     		ldr	r2, .L117+56
 1798 06dc 1288     		ldrh	r2, [r2]
 1799 06de 8A1A     		subs	r2, r1, r2
 1800 06e0 9342     		cmp	r3, r2
 1801 06e2 0AD2     		bcs	.L76
 1802              	.L75:
 612:main.c        ****                 {
 613:main.c        ****                     knobs7bit[i] = knobs[i] >> 5;
 1803              		.loc 1 613 0 is_stmt 1
 1804 06e4 554A     		ldr	r2, .L117+48
 1805 06e6 3B69     		ldr	r3, [r7, #16]
 1806 06e8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1807 06ec 5B09     		lsrs	r3, r3, #5
 1808 06ee D9B2     		uxtb	r1, r3
 1809 06f0 554A     		ldr	r2, .L117+60
 1810 06f2 3B69     		ldr	r3, [r7, #16]
 1811 06f4 1344     		add	r3, r3, r2
 1812 06f6 0A46     		mov	r2, r1
 1813 06f8 1A70     		strb	r2, [r3]
 1814              	.L76:
 614:main.c        ****                 }
 615:main.c        ****                 if (knobs7bit[i] != knobs7bitPrev[i])
 1815              		.loc 1 615 0
 1816 06fa 534A     		ldr	r2, .L117+60
 1817 06fc 3B69     		ldr	r3, [r7, #16]
 1818 06fe 1344     		add	r3, r3, r2
 1819 0700 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1820 0702 9AB2     		uxth	r2, r3
 1821 0704 5149     		ldr	r1, .L117+64
 1822 0706 3B69     		ldr	r3, [r7, #16]
 1823 0708 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 1824 070c 9A42     		cmp	r2, r3
 1825 070e 22D0     		beq	.L77
 616:main.c        ****                 {
 617:main.c        ****                     if (i < 4)
 1826              		.loc 1 617 0
 1827 0710 3B69     		ldr	r3, [r7, #16]
 1828 0712 032B     		cmp	r3, #3
 1829 0714 0CDC     		bgt	.L78
 618:main.c        ****                     {
 619:main.c        ****                         sendMIDIControlChange(17 + i , 127-knobs7bit[i], 0);
 1830              		.loc 1 619 0
 1831 0716 3B69     		ldr	r3, [r7, #16]
 1832 0718 03F11100 		add	r0, r3, #17
 1833 071c 4A4A     		ldr	r2, .L117+60
 1834 071e 3B69     		ldr	r3, [r7, #16]
 1835 0720 1344     		add	r3, r3, r2
 1836 0722 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1837 0724 C3F17F03 		rsb	r3, r3, #127
 1838 0728 0022     		movs	r2, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 45


 1839 072a 1946     		mov	r1, r3
 1840 072c FFF7FEFF 		bl	sendMIDIControlChange
 1841              	.L78:
 620:main.c        ****                     }
 621:main.c        ****                     if ((i == 4) && (CV_pedal_sense_Read()))
 1842              		.loc 1 621 0
 1843 0730 3B69     		ldr	r3, [r7, #16]
 1844 0732 042B     		cmp	r3, #4
 1845 0734 0FD1     		bne	.L77
 1846              		.loc 1 621 0 is_stmt 0 discriminator 1
 1847 0736 FFF7FEFF 		bl	CV_pedal_sense_Read
 1848 073a 0346     		mov	r3, r0
 1849 073c 002B     		cmp	r3, #0
 1850 073e 0AD0     		beq	.L77
 622:main.c        ****                     {
 623:main.c        ****                         sendMIDIControlChange(17 + i , knobs7bit[i], 0);
 1851              		.loc 1 623 0 is_stmt 1
 1852 0740 3B69     		ldr	r3, [r7, #16]
 1853 0742 03F11100 		add	r0, r3, #17
 1854 0746 404A     		ldr	r2, .L117+60
 1855 0748 3B69     		ldr	r3, [r7, #16]
 1856 074a 1344     		add	r3, r3, r2
 1857 074c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1858 074e 0022     		movs	r2, #0
 1859 0750 1946     		mov	r1, r3
 1860 0752 FFF7FEFF 		bl	sendMIDIControlChange
 1861              	.L77:
 624:main.c        ****                         //sendMIDIControlChange(19 + i+1 , 0, 0);
 625:main.c        ****                     }
 626:main.c        ****                 }
 627:main.c        ****                 knobs7bitPrev[i] = knobs7bit[i];
 1862              		.loc 1 627 0 discriminator 2
 1863 0756 3C4A     		ldr	r2, .L117+60
 1864 0758 3B69     		ldr	r3, [r7, #16]
 1865 075a 1344     		add	r3, r3, r2
 1866 075c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1867 075e 99B2     		uxth	r1, r3
 1868 0760 3A4A     		ldr	r2, .L117+64
 1869 0762 3B69     		ldr	r3, [r7, #16]
 1870 0764 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 628:main.c        ****                 knobs7bitPrevLS[i] = knobs7bit[i] << 5;
 1871              		.loc 1 628 0 discriminator 2
 1872 0768 374A     		ldr	r2, .L117+60
 1873 076a 3B69     		ldr	r3, [r7, #16]
 1874 076c 1344     		add	r3, r3, r2
 1875 076e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1876 0770 9BB2     		uxth	r3, r3
 1877 0772 5B01     		lsls	r3, r3, #5
 1878 0774 99B2     		uxth	r1, r3
 1879 0776 324A     		ldr	r2, .L117+52
 1880 0778 3B69     		ldr	r3, [r7, #16]
 1881 077a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 599:main.c        ****             {
 1882              		.loc 1 599 0 discriminator 2
 1883 077e 3B69     		ldr	r3, [r7, #16]
 1884 0780 0133     		adds	r3, r3, #1
 1885 0782 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 46


 1886              	.L72:
 599:main.c        ****             {
 1887              		.loc 1 599 0 is_stmt 0 discriminator 1
 1888 0784 3B69     		ldr	r3, [r7, #16]
 1889 0786 042B     		cmp	r3, #4
 1890 0788 7FF75AAF 		ble	.L79
 1891              	.LBE4:
 629:main.c        ****             }
 630:main.c        ****             firPointer = (firPointer + 1) & KNOB_FIR_SIZE_MASK;
 1892              		.loc 1 630 0 is_stmt 1
 1893 078c 294B     		ldr	r3, .L117+40
 1894 078e 1B68     		ldr	r3, [r3]
 1895 0790 0133     		adds	r3, r3, #1
 1896 0792 03F00703 		and	r3, r3, #7
 1897 0796 274A     		ldr	r2, .L117+40
 1898 0798 1360     		str	r3, [r2]
 1899              	.L111:
 631:main.c        ****         }
 632:main.c        ****         
 633:main.c        ****         //make sure previous SPI1 transmission has completed before checking the received SPI data
 634:main.c        ****         while (0u == ((SPIM_1_ReadTxStatus() & SPIM_1_STS_SPI_DONE) || (SPIM_1_ReadTxStatus() & SPI
 1900              		.loc 1 634 0
 1901 079a 00BF     		nop
 1902              	.L83:
 1903              		.loc 1 634 0 is_stmt 0 discriminator 7
 1904 079c FFF7FEFF 		bl	SPIM_1_ReadTxStatus
 1905 07a0 0346     		mov	r3, r0
 1906 07a2 03F00103 		and	r3, r3, #1
 1907 07a6 002B     		cmp	r3, #0
 1908 07a8 06D1     		bne	.L80
 1909              		.loc 1 634 0 discriminator 2
 1910 07aa FFF7FEFF 		bl	SPIM_1_ReadTxStatus
 1911 07ae 0346     		mov	r3, r0
 1912 07b0 03F01003 		and	r3, r3, #16
 1913 07b4 002B     		cmp	r3, #0
 1914 07b6 01D0     		beq	.L81
 1915              	.L80:
 1916              		.loc 1 634 0 discriminator 3
 1917 07b8 0123     		movs	r3, #1
 1918 07ba 00E0     		b	.L82
 1919              	.L81:
 1920              		.loc 1 634 0 discriminator 4
 1921 07bc 0023     		movs	r3, #0
 1922              	.L82:
 1923              		.loc 1 634 0 discriminator 6
 1924 07be 002B     		cmp	r3, #0
 1925 07c0 ECD0     		beq	.L83
 1926              	.LBB6:
 635:main.c        ****         {
 636:main.c        ****             ;
 637:main.c        ****         }
 638:main.c        **** 
 639:main.c        ****         //handle string plucks/noteoffs
 640:main.c        ****         for (int i = 0; i < 4; i++)
 1927              		.loc 1 640 0 is_stmt 1
 1928 07c2 0023     		movs	r3, #0
 1929 07c4 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 47


 1930 07c6 DEE0     		b	.L84
 1931              	.L92:
 641:main.c        ****         {
 642:main.c        ****             if (((CapSense_sensorOnMask[0] >> (i + 4)) & 1) &&  (linearPotValue32Bit[i] == 65535))
 1932              		.loc 1 642 0
 1933 07c8 214B     		ldr	r3, .L117+68
 1934 07ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1935 07cc 1A46     		mov	r2, r3
 1936 07ce BB68     		ldr	r3, [r7, #8]
 1937 07d0 0433     		adds	r3, r3, #4
 1938 07d2 42FA03F3 		asr	r3, r2, r3
 1939 07d6 03F00103 		and	r3, r3, #1
 1940 07da 002B     		cmp	r3, #0
 1941 07dc 40D0     		beq	.L85
 1942              		.loc 1 642 0 is_stmt 0 discriminator 1
 1943 07de 1D4A     		ldr	r2, .L117+72
 1944 07e0 BB68     		ldr	r3, [r7, #8]
 1945 07e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1946 07e6 4FF6FF72 		movw	r2, #65535
 1947 07ea 9342     		cmp	r3, r2
 1948 07ec 38D1     		bne	.L85
 643:main.c        ****             {
 644:main.c        ****                LHMute[i] = 1; 
 1949              		.loc 1 644 0 is_stmt 1
 1950 07ee 1A4A     		ldr	r2, .L117+76
 1951 07f0 BB68     		ldr	r3, [r7, #8]
 1952 07f2 1344     		add	r3, r3, r2
 1953 07f4 0122     		movs	r2, #1
 1954 07f6 1A70     		strb	r2, [r3]
 645:main.c        ****                LHMuteCounter[i]++;
 1955              		.loc 1 645 0
 1956 07f8 184A     		ldr	r2, .L117+80
 1957 07fa BB68     		ldr	r3, [r7, #8]
 1958 07fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1959 0800 5A1C     		adds	r2, r3, #1
 1960 0802 1649     		ldr	r1, .L117+80
 1961 0804 BB68     		ldr	r3, [r7, #8]
 1962 0806 41F82320 		str	r2, [r1, r3, lsl #2]
 1963 080a 33E0     		b	.L86
 1964              	.L118:
 1965              		.align	2
 1966              	.L117:
 1967 080c 00000000 		.word	whichLinearSensor
 1968 0810 00000000 		.word	stringMIDIPrev
 1969 0814 00000000 		.word	stringMIDI
 1970 0818 00000000 		.word	openStringMIDI
 1971 081c 0080AA43 		.word	1135247360
 1972 0820 00000000 		.word	openStringCount
 1973 0824 00000000 		.word	pitchBendsPerString
 1974 0828 00000000 		.word	polyMode
 1975 082c 00000000 		.word	stringStates
 1976 0830 00000000 		.word	previousPitchBendsSent
 1977 0834 00000000 		.word	firPointer
 1978 0838 00000000 		.word	knobsFIR
 1979 083c 00000000 		.word	knobs
 1980 0840 00000000 		.word	knobs7bitPrevLS
 1981 0844 00000000 		.word	knobs7bitHysteresis
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 48


 1982 0848 00000000 		.word	knobs7bit
 1983 084c 00000000 		.word	knobs7bitPrev
 1984 0850 00000000 		.word	CapSense_sensorOnMask
 1985 0854 00000000 		.word	linearPotValue32Bit
 1986 0858 00000000 		.word	LHMute
 1987 085c 00000000 		.word	LHMuteCounter
 1988              	.L85:
 646:main.c        ****             }
 647:main.c        ****             else
 648:main.c        ****             {
 649:main.c        ****                 LHMute[i] = 0;
 1989              		.loc 1 649 0
 1990 0860 A24A     		ldr	r2, .L119
 1991 0862 BB68     		ldr	r3, [r7, #8]
 1992 0864 1344     		add	r3, r3, r2
 1993 0866 0022     		movs	r2, #0
 1994 0868 1A70     		strb	r2, [r3]
 650:main.c        ****                 LHMuteCounter[i] = 0;
 1995              		.loc 1 650 0
 1996 086a A14A     		ldr	r2, .L119+4
 1997 086c BB68     		ldr	r3, [r7, #8]
 1998 086e 0021     		movs	r1, #0
 1999 0870 42F82310 		str	r1, [r2, r3, lsl #2]
 2000              	.L86:
 651:main.c        ****             }
 652:main.c        ****             //left hand mute just began
 653:main.c        ****             //freeze pitch bend at value from 12 sends ago (to avoid dip before mute due to sensor 
 654:main.c        ****             if ((LHMute[i]) && (stringStates[i][0])>=0)
 2001              		.loc 1 654 0
 2002 0874 9D4A     		ldr	r2, .L119
 2003 0876 BB68     		ldr	r3, [r7, #8]
 2004 0878 1344     		add	r3, r3, r2
 2005 087a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2006 087c 002B     		cmp	r3, #0
 2007 087e 0BD0     		beq	.L87
 2008              		.loc 1 654 0 is_stmt 0 discriminator 1
 2009 0880 9C4A     		ldr	r2, .L119+8
 2010 0882 BB68     		ldr	r3, [r7, #8]
 2011 0884 52F83330 		ldr	r3, [r2, r3, lsl #3]
 2012 0888 002B     		cmp	r3, #0
 2013 088a 05DB     		blt	.L87
 655:main.c        ****             {
 656:main.c        ****                 pitchFreeze[i] = 1;
 2014              		.loc 1 656 0 is_stmt 1
 2015 088c 9A4A     		ldr	r2, .L119+12
 2016 088e BB68     		ldr	r3, [r7, #8]
 2017 0890 1344     		add	r3, r3, r2
 2018 0892 0122     		movs	r2, #1
 2019 0894 1A70     		strb	r2, [r3]
 2020 0896 04E0     		b	.L88
 2021              	.L87:
 657:main.c        ****             }
 658:main.c        ****             else
 659:main.c        ****             {
 660:main.c        ****                  pitchFreeze[i] = 0;
 2022              		.loc 1 660 0
 2023 0898 974A     		ldr	r2, .L119+12
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 49


 2024 089a BB68     		ldr	r3, [r7, #8]
 2025 089c 1344     		add	r3, r3, r2
 2026 089e 0022     		movs	r2, #0
 2027 08a0 1A70     		strb	r2, [r3]
 2028              	.L88:
 661:main.c        ****             }
 662:main.c        ****             //left hand mute has counted to max time
 663:main.c        ****             //send note off
 664:main.c        ****             if ((LHMuteCounter[i] > 128) && (stringStates[i][0] >= 0))
 2029              		.loc 1 664 0
 2030 08a2 934A     		ldr	r2, .L119+4
 2031 08a4 BB68     		ldr	r3, [r7, #8]
 2032 08a6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2033 08aa 802B     		cmp	r3, #128
 2034 08ac 0ED9     		bls	.L89
 2035              		.loc 1 664 0 is_stmt 0 discriminator 1
 2036 08ae 914A     		ldr	r2, .L119+8
 2037 08b0 BB68     		ldr	r3, [r7, #8]
 2038 08b2 52F83330 		ldr	r3, [r2, r3, lsl #3]
 2039 08b6 002B     		cmp	r3, #0
 2040 08b8 08DB     		blt	.L89
 665:main.c        ****             {
 666:main.c        ****                  handleNotes(lastNotes[i], 0, i);
 2041              		.loc 1 666 0 is_stmt 1
 2042 08ba 904A     		ldr	r2, .L119+16
 2043 08bc BB68     		ldr	r3, [r7, #8]
 2044 08be 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2045 08c2 BA68     		ldr	r2, [r7, #8]
 2046 08c4 0021     		movs	r1, #0
 2047 08c6 1846     		mov	r0, r3
 2048 08c8 FFF7FEFF 		bl	handleNotes
 2049              	.L89:
 667:main.c        ****             }
 668:main.c        ****             
 669:main.c        ****             stringPlucks[i] = (rxBuffer[i*2] << 8) + rxBuffer[i*2+1];
 2050              		.loc 1 669 0
 2051 08cc BB68     		ldr	r3, [r7, #8]
 2052 08ce 5B00     		lsls	r3, r3, #1
 2053 08d0 8B4A     		ldr	r2, .L119+20
 2054 08d2 D35C     		ldrb	r3, [r2, r3]
 2055 08d4 DBB2     		uxtb	r3, r3
 2056 08d6 1B02     		lsls	r3, r3, #8
 2057 08d8 BA68     		ldr	r2, [r7, #8]
 2058 08da 5200     		lsls	r2, r2, #1
 2059 08dc 0132     		adds	r2, r2, #1
 2060 08de 8849     		ldr	r1, .L119+20
 2061 08e0 8A5C     		ldrb	r2, [r1, r2]
 2062 08e2 D2B2     		uxtb	r2, r2
 2063 08e4 1A44     		add	r2, r2, r3
 2064 08e6 8749     		ldr	r1, .L119+24
 2065 08e8 BB68     		ldr	r3, [r7, #8]
 2066 08ea 41F82320 		str	r2, [r1, r3, lsl #2]
 670:main.c        ****             
 671:main.c        ****             //note-on from pluck sensor
 672:main.c        ****             if ((stringPlucks[i] > 0) && (stringPlucksPrev[i] == 0))
 2067              		.loc 1 672 0
 2068 08ee 854A     		ldr	r2, .L119+24
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 50


 2069 08f0 BB68     		ldr	r3, [r7, #8]
 2070 08f2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2071 08f6 002B     		cmp	r3, #0
 2072 08f8 25DD     		ble	.L90
 2073              		.loc 1 672 0 is_stmt 0 discriminator 1
 2074 08fa 834A     		ldr	r2, .L119+28
 2075 08fc BB68     		ldr	r3, [r7, #8]
 2076 08fe 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2077 0902 002B     		cmp	r3, #0
 2078 0904 1FD1     		bne	.L90
 673:main.c        ****             {
 674:main.c        ****                 lastNotes[i] = (int)openStringMIDI[i] + (octave * 12);
 2079              		.loc 1 674 0 is_stmt 1
 2080 0906 814A     		ldr	r2, .L119+32
 2081 0908 BB68     		ldr	r3, [r7, #8]
 2082 090a 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2083 090e 1846     		mov	r0, r3
 2084 0910 FFF7FEFF 		bl	__aeabi_f2iz
 2085 0914 0146     		mov	r1, r0
 2086 0916 7E4B     		ldr	r3, .L119+36
 2087 0918 1A68     		ldr	r2, [r3]
 2088 091a 1346     		mov	r3, r2
 2089 091c 5B00     		lsls	r3, r3, #1
 2090 091e 1344     		add	r3, r3, r2
 2091 0920 9B00     		lsls	r3, r3, #2
 2092 0922 CA18     		adds	r2, r1, r3
 2093 0924 7549     		ldr	r1, .L119+16
 2094 0926 BB68     		ldr	r3, [r7, #8]
 2095 0928 41F82320 		str	r2, [r1, r3, lsl #2]
 675:main.c        ****                 handleNotes(lastNotes[i], stringPlucks[i], i);
 2096              		.loc 1 675 0
 2097 092c 734A     		ldr	r2, .L119+16
 2098 092e BB68     		ldr	r3, [r7, #8]
 2099 0930 52F82300 		ldr	r0, [r2, r3, lsl #2]
 2100 0934 734A     		ldr	r2, .L119+24
 2101 0936 BB68     		ldr	r3, [r7, #8]
 2102 0938 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2103 093c BA68     		ldr	r2, [r7, #8]
 2104 093e 1946     		mov	r1, r3
 2105 0940 FFF7FEFF 		bl	handleNotes
 2106 0944 14E0     		b	.L91
 2107              	.L90:
 676:main.c        ****             }
 677:main.c        ****             //note-off from pluck sensor (RH Mute)
 678:main.c        ****             else if ((stringPlucks[i] == 0) && (stringPlucksPrev[i] > 0))
 2108              		.loc 1 678 0
 2109 0946 6F4A     		ldr	r2, .L119+24
 2110 0948 BB68     		ldr	r3, [r7, #8]
 2111 094a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2112 094e 002B     		cmp	r3, #0
 2113 0950 0ED1     		bne	.L91
 2114              		.loc 1 678 0 is_stmt 0 discriminator 1
 2115 0952 6D4A     		ldr	r2, .L119+28
 2116 0954 BB68     		ldr	r3, [r7, #8]
 2117 0956 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2118 095a 002B     		cmp	r3, #0
 2119 095c 08DD     		ble	.L91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 51


 679:main.c        ****             {
 680:main.c        ****                 handleNotes(lastNotes[i], 0, i);
 2120              		.loc 1 680 0 is_stmt 1
 2121 095e 674A     		ldr	r2, .L119+16
 2122 0960 BB68     		ldr	r3, [r7, #8]
 2123 0962 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2124 0966 BA68     		ldr	r2, [r7, #8]
 2125 0968 0021     		movs	r1, #0
 2126 096a 1846     		mov	r0, r3
 2127 096c FFF7FEFF 		bl	handleNotes
 2128              	.L91:
 681:main.c        ****             }
 682:main.c        ****             
 683:main.c        **** 
 684:main.c        ****             stringPlucksPrev[i] = stringPlucks[i];
 2129              		.loc 1 684 0 discriminator 2
 2130 0970 644A     		ldr	r2, .L119+24
 2131 0972 BB68     		ldr	r3, [r7, #8]
 2132 0974 52F82320 		ldr	r2, [r2, r3, lsl #2]
 2133 0978 6349     		ldr	r1, .L119+28
 2134 097a BB68     		ldr	r3, [r7, #8]
 2135 097c 41F82320 		str	r2, [r1, r3, lsl #2]
 640:main.c        ****         {
 2136              		.loc 1 640 0 discriminator 2
 2137 0980 BB68     		ldr	r3, [r7, #8]
 2138 0982 0133     		adds	r3, r3, #1
 2139 0984 BB60     		str	r3, [r7, #8]
 2140              	.L84:
 640:main.c        ****         {
 2141              		.loc 1 640 0 is_stmt 0 discriminator 1
 2142 0986 BB68     		ldr	r3, [r7, #8]
 2143 0988 032B     		cmp	r3, #3
 2144 098a 7FF71DAF 		ble	.L92
 2145              	.LBE6:
 685:main.c        ****             
 686:main.c        ****         }
 687:main.c        ****         //make sure previous SPI2 transmission has completed before transferring the remaining midi
 688:main.c        ****         while (0u == ((SPIM_2_ReadTxStatus() & SPIM_2_STS_SPI_DONE) || (SPIM_2_ReadTxStatus() & SPI
 2146              		.loc 1 688 0 is_stmt 1
 2147 098e 00BF     		nop
 2148              	.L96:
 2149              		.loc 1 688 0 is_stmt 0 discriminator 7
 2150 0990 FFF7FEFF 		bl	SPIM_2_ReadTxStatus
 2151 0994 0346     		mov	r3, r0
 2152 0996 03F00103 		and	r3, r3, #1
 2153 099a 002B     		cmp	r3, #0
 2154 099c 06D1     		bne	.L93
 2155              		.loc 1 688 0 discriminator 2
 2156 099e FFF7FEFF 		bl	SPIM_2_ReadTxStatus
 2157 09a2 0346     		mov	r3, r0
 2158 09a4 03F01003 		and	r3, r3, #16
 2159 09a8 002B     		cmp	r3, #0
 2160 09aa 01D0     		beq	.L94
 2161              	.L93:
 2162              		.loc 1 688 0 discriminator 3
 2163 09ac 0123     		movs	r3, #1
 2164 09ae 00E0     		b	.L95
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 52


 2165              	.L94:
 2166              		.loc 1 688 0 discriminator 4
 2167 09b0 0023     		movs	r3, #0
 2168              	.L95:
 2169              		.loc 1 688 0 discriminator 6
 2170 09b2 002B     		cmp	r3, #0
 2171 09b4 ECD0     		beq	.L96
 2172              	.LBB7:
 689:main.c        ****         {
 690:main.c        ****             ;
 691:main.c        ****         }
 692:main.c        ****         //send midi data to internal synth
 693:main.c        ****         //copy the temp buffer into the send buffer now that we are done filling it and sending the
 694:main.c        ****         for (uint i = 0 ; i < BUFFER_2_SIZE; i++)
 2173              		.loc 1 694 0 is_stmt 1
 2174 09b6 0023     		movs	r3, #0
 2175 09b8 7B60     		str	r3, [r7, #4]
 2176 09ba 11E0     		b	.L97
 2177              	.L98:
 695:main.c        ****         {
 696:main.c        ****             tx2Buffer[i] = tx2BufferTemp[i];
 2178              		.loc 1 696 0 discriminator 3
 2179 09bc 554A     		ldr	r2, .L119+40
 2180 09be 7B68     		ldr	r3, [r7, #4]
 2181 09c0 1344     		add	r3, r3, r2
 2182 09c2 1B78     		ldrb	r3, [r3]
 2183 09c4 D9B2     		uxtb	r1, r3
 2184 09c6 544A     		ldr	r2, .L119+44
 2185 09c8 7B68     		ldr	r3, [r7, #4]
 2186 09ca 1344     		add	r3, r3, r2
 2187 09cc 0A46     		mov	r2, r1
 2188 09ce 1A70     		strb	r2, [r3]
 697:main.c        ****             tx2BufferTemp[i] = 0;
 2189              		.loc 1 697 0 discriminator 3
 2190 09d0 504A     		ldr	r2, .L119+40
 2191 09d2 7B68     		ldr	r3, [r7, #4]
 2192 09d4 1344     		add	r3, r3, r2
 2193 09d6 0022     		movs	r2, #0
 2194 09d8 1A70     		strb	r2, [r3]
 694:main.c        ****         {
 2195              		.loc 1 694 0 discriminator 3
 2196 09da 7B68     		ldr	r3, [r7, #4]
 2197 09dc 0133     		adds	r3, r3, #1
 2198 09de 7B60     		str	r3, [r7, #4]
 2199              	.L97:
 694:main.c        ****         {
 2200              		.loc 1 694 0 is_stmt 0 discriminator 1
 2201 09e0 7B68     		ldr	r3, [r7, #4]
 2202 09e2 0F2B     		cmp	r3, #15
 2203 09e4 EAD9     		bls	.L98
 2204              	.LBE7:
 698:main.c        ****         }
 699:main.c        ****         if (outChanged)
 2205              		.loc 1 699 0 is_stmt 1
 2206 09e6 4D4B     		ldr	r3, .L119+48
 2207 09e8 1B68     		ldr	r3, [r3]
 2208 09ea 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 53


 2209 09ec 03D0     		beq	.L99
 700:main.c        ****         {
 701:main.c        ****             tx2Buffer[0] = 1;
 2210              		.loc 1 701 0
 2211 09ee 4A4B     		ldr	r3, .L119+44
 2212 09f0 0122     		movs	r2, #1
 2213 09f2 1A70     		strb	r2, [r3]
 2214 09f4 02E0     		b	.L100
 2215              	.L99:
 702:main.c        ****         }
 703:main.c        ****         else
 704:main.c        ****         {
 705:main.c        ****             tx2Buffer[0] = 0;
 2216              		.loc 1 705 0
 2217 09f6 484B     		ldr	r3, .L119+44
 2218 09f8 0022     		movs	r2, #0
 2219 09fa 1A70     		strb	r2, [r3]
 2220              	.L100:
 706:main.c        ****         }
 707:main.c        ****         outChanged = 0;
 2221              		.loc 1 707 0
 2222 09fc 474B     		ldr	r3, .L119+48
 2223 09fe 0022     		movs	r2, #0
 2224 0a00 1A60     		str	r2, [r3]
 708:main.c        ****         if (currentOutPointer > BUFFER_2_SIZE)
 2225              		.loc 1 708 0
 2226 0a02 474B     		ldr	r3, .L119+52
 2227 0a04 1B68     		ldr	r3, [r3]
 2228 0a06 102B     		cmp	r3, #16
 2229 0a08 02D9     		bls	.L101
 709:main.c        ****         {
 710:main.c        ****             LED1_Write(1);
 2230              		.loc 1 710 0
 2231 0a0a 0120     		movs	r0, #1
 2232 0a0c FFF7FEFF 		bl	LED1_Write
 2233              	.L101:
 711:main.c        ****             //overflow
 712:main.c        ****         }
 713:main.c        ****         currentOutPointer = 1;
 2234              		.loc 1 713 0
 2235 0a10 434B     		ldr	r3, .L119+52
 2236 0a12 0122     		movs	r2, #1
 2237 0a14 1A60     		str	r2, [r3]
 714:main.c        ****         CyDmaChEnable(rx2Channel, STORE_TD_CFG_ONCMPLT);
 2238              		.loc 1 714 0
 2239 0a16 434B     		ldr	r3, .L119+56
 2240 0a18 1B78     		ldrb	r3, [r3]
 2241 0a1a DBB2     		uxtb	r3, r3
 2242 0a1c 0121     		movs	r1, #1
 2243 0a1e 1846     		mov	r0, r3
 2244 0a20 FFF7FEFF 		bl	CyDmaChEnable
 715:main.c        ****         CyDmaChEnable(tx2Channel, STORE_TD_CFG_ONCMPLT);
 2245              		.loc 1 715 0
 2246 0a24 404B     		ldr	r3, .L119+60
 2247 0a26 1B78     		ldrb	r3, [r3]
 2248 0a28 DBB2     		uxtb	r3, r3
 2249 0a2a 0121     		movs	r1, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 54


 2250 0a2c 1846     		mov	r0, r3
 2251 0a2e FFF7FEFF 		bl	CyDmaChEnable
 716:main.c        ****         
 717:main.c        ****         //check if USB device has just been plugged in
 718:main.c        ****         if (USB_check_flag)
 2252              		.loc 1 718 0
 2253 0a32 3E4B     		ldr	r3, .L119+64
 2254 0a34 1B78     		ldrb	r3, [r3]
 2255 0a36 DBB2     		uxtb	r3, r3
 2256 0a38 002B     		cmp	r3, #0
 2257 0a3a 01D0     		beq	.L102
 719:main.c        ****         {
 720:main.c        ****             checkUSB_Vbus();
 2258              		.loc 1 720 0
 2259 0a3c FFF7FEFF 		bl	checkUSB_Vbus
 2260              	.L102:
 721:main.c        ****         }
 722:main.c        ****         
 723:main.c        ****         //only service the USB bus if there is a computer plugged in
 724:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 2261              		.loc 1 724 0
 2262 0a40 3B4B     		ldr	r3, .L119+68
 2263 0a42 1B78     		ldrb	r3, [r3]
 2264 0a44 DBB2     		uxtb	r3, r3
 2265 0a46 002B     		cmp	r3, #0
 2266 0a48 13D0     		beq	.L112
 2267              		.loc 1 724 0 is_stmt 0 discriminator 1
 2268 0a4a FFF7FEFF 		bl	USB_VBusPresent
 2269 0a4e 0346     		mov	r3, r0
 2270 0a50 002B     		cmp	r3, #0
 2271 0a52 0ED0     		beq	.L112
 725:main.c        ****         {
 726:main.c        ****             if (midiSent > 64)
 2272              		.loc 1 726 0 is_stmt 1
 2273 0a54 374B     		ldr	r3, .L119+72
 2274 0a56 1B88     		ldrh	r3, [r3]
 2275 0a58 402B     		cmp	r3, #64
 2276 0a5a 05D9     		bls	.L104
 727:main.c        ****             {
 728:main.c        ****                 midiOverflow++;
 2277              		.loc 1 728 0
 2278 0a5c 364B     		ldr	r3, .L119+76
 2279 0a5e 1B88     		ldrh	r3, [r3]
 2280 0a60 0133     		adds	r3, r3, #1
 2281 0a62 9AB2     		uxth	r2, r3
 2282 0a64 344B     		ldr	r3, .L119+76
 2283 0a66 1A80     		strh	r2, [r3]	@ movhi
 2284              	.L104:
 729:main.c        ****             }
 730:main.c        ****             midiSent = 0;
 2285              		.loc 1 730 0
 2286 0a68 324B     		ldr	r3, .L119+72
 2287 0a6a 0022     		movs	r2, #0
 2288 0a6c 1A80     		strh	r2, [r3]	@ movhi
 731:main.c        ****             USB_service();
 2289              		.loc 1 731 0
 2290 0a6e FFF7FEFF 		bl	USB_service
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 55


 2291              	.L112:
 732:main.c        ****         }
 733:main.c        ****                
 734:main.c        **** 
 735:main.c        ****         while(CapSense_IsBusy() != 0)  
 2292              		.loc 1 735 0
 2293 0a72 00BF     		nop
 2294              	.L105:
 2295              		.loc 1 735 0 is_stmt 0 discriminator 1
 2296 0a74 FFF7FEFF 		bl	CapSense_IsBusy
 2297 0a78 0346     		mov	r3, r0
 2298 0a7a 002B     		cmp	r3, #0
 2299 0a7c FAD1     		bne	.L105
 736:main.c        ****         {
 737:main.c        ****             ;//wait until scan is complete
 738:main.c        ****         }  
 739:main.c        **** 
 740:main.c        ****         CapSense_CheckIsAnyWidgetActive();
 2300              		.loc 1 740 0 is_stmt 1
 2301 0a7e FFF7FEFF 		bl	CapSense_CheckIsAnyWidgetActive
 741:main.c        ****         
 742:main.c        ****         /*txBuffer[8] = 0;
 743:main.c        ****         for (int i = 0; i < 8; i++)
 744:main.c        ****         {
 745:main.c        ****            txBuffer[8] += (CapSense_sensorSignal[i] > 0) << i;
 746:main.c        ****         }
 747:main.c        ****         */
 748:main.c        ****         //SPIM_1_ClearTxBuffer();
 749:main.c        ****         //CyDelay(1);
 750:main.c        **** 
 751:main.c        ****         txBuffer[8] = CapSense_sensorOnMask[0];
 2302              		.loc 1 751 0
 2303 0a82 2E4B     		ldr	r3, .L119+80
 2304 0a84 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2305 0a86 2E4B     		ldr	r3, .L119+84
 2306 0a88 1A72     		strb	r2, [r3, #8]
 752:main.c        ****         txBuffer[whichLinearSensor*2] = ((uint16_t) linearPotValue32Bit[whichLinearSensor]) >> 8;
 2307              		.loc 1 752 0
 2308 0a8a 2E4B     		ldr	r3, .L119+88
 2309 0a8c 1B68     		ldr	r3, [r3]
 2310 0a8e 5B00     		lsls	r3, r3, #1
 2311 0a90 2C4A     		ldr	r2, .L119+88
 2312 0a92 1268     		ldr	r2, [r2]
 2313 0a94 2C49     		ldr	r1, .L119+92
 2314 0a96 51F82220 		ldr	r2, [r1, r2, lsl #2]
 2315 0a9a 92B2     		uxth	r2, r2
 2316 0a9c 1212     		asrs	r2, r2, #8
 2317 0a9e D1B2     		uxtb	r1, r2
 2318 0aa0 274A     		ldr	r2, .L119+84
 2319 0aa2 D154     		strb	r1, [r2, r3]
 753:main.c        ****         txBuffer[whichLinearSensor*2+1] = linearPotValue32Bit[whichLinearSensor] & 0xff;
 2320              		.loc 1 753 0
 2321 0aa4 274B     		ldr	r3, .L119+88
 2322 0aa6 1B68     		ldr	r3, [r3]
 2323 0aa8 5B00     		lsls	r3, r3, #1
 2324 0aaa 0133     		adds	r3, r3, #1
 2325 0aac 254A     		ldr	r2, .L119+88
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 56


 2326 0aae 1268     		ldr	r2, [r2]
 2327 0ab0 2549     		ldr	r1, .L119+92
 2328 0ab2 51F82220 		ldr	r2, [r1, r2, lsl #2]
 2329 0ab6 D1B2     		uxtb	r1, r2
 2330 0ab8 214A     		ldr	r2, .L119+84
 2331 0aba D154     		strb	r1, [r2, r3]
 754:main.c        ****         
 755:main.c        ****         txBuffer[15] = bufCount % 16;
 2332              		.loc 1 755 0
 2333 0abc 234B     		ldr	r3, .L119+96
 2334 0abe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2335 0ac0 03F00F03 		and	r3, r3, #15
 2336 0ac4 DAB2     		uxtb	r2, r3
 2337 0ac6 1E4B     		ldr	r3, .L119+84
 2338 0ac8 DA73     		strb	r2, [r3, #15]
 756:main.c        ****         bufCount++;
 2339              		.loc 1 756 0
 2340 0aca 204B     		ldr	r3, .L119+96
 2341 0acc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2342 0ace 0133     		adds	r3, r3, #1
 2343 0ad0 DAB2     		uxtb	r2, r3
 2344 0ad2 1E4B     		ldr	r3, .L119+96
 2345 0ad4 1A70     		strb	r2, [r3]
 757:main.c        ****         
 758:main.c        ****         if (txBuffer[8] & 1)
 2346              		.loc 1 758 0
 2347 0ad6 1A4B     		ldr	r3, .L119+84
 2348 0ad8 1B7A     		ldrb	r3, [r3, #8]
 2349 0ada DBB2     		uxtb	r3, r3
 2350 0adc 03F00103 		and	r3, r3, #1
 2351 0ae0 002B     		cmp	r3, #0
 2352 0ae2 35D0     		beq	.L106
 759:main.c        ****         {
 760:main.c        ****             blue_LED_Write(1);
 2353              		.loc 1 760 0
 2354 0ae4 0120     		movs	r0, #1
 2355 0ae6 FFF7FEFF 		bl	blue_LED_Write
 2356 0aea 34E0     		b	.L107
 2357              	.L120:
 2358              		.align	2
 2359              	.L119:
 2360 0aec 00000000 		.word	LHMute
 2361 0af0 00000000 		.word	LHMuteCounter
 2362 0af4 00000000 		.word	stringStates
 2363 0af8 00000000 		.word	pitchFreeze
 2364 0afc 00000000 		.word	lastNotes
 2365 0b00 00000000 		.word	rxBuffer
 2366 0b04 00000000 		.word	stringPlucks
 2367 0b08 00000000 		.word	stringPlucksPrev
 2368 0b0c 00000000 		.word	openStringMIDI
 2369 0b10 00000000 		.word	octave
 2370 0b14 00000000 		.word	tx2BufferTemp
 2371 0b18 00000000 		.word	tx2Buffer
 2372 0b1c 00000000 		.word	outChanged
 2373 0b20 00000000 		.word	currentOutPointer
 2374 0b24 00000000 		.word	rx2Channel
 2375 0b28 00000000 		.word	tx2Channel
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 57


 2376 0b2c 00000000 		.word	USB_check_flag
 2377 0b30 00000000 		.word	USB_active
 2378 0b34 00000000 		.word	midiSent
 2379 0b38 00000000 		.word	midiOverflow
 2380 0b3c 00000000 		.word	CapSense_sensorOnMask
 2381 0b40 00000000 		.word	txBuffer
 2382 0b44 00000000 		.word	whichLinearSensor
 2383 0b48 00000000 		.word	linearPotValue32Bit
 2384 0b4c 00000000 		.word	bufCount
 2385              	.L106:
 761:main.c        ****             
 762:main.c        ****         }
 763:main.c        ****         else
 764:main.c        ****         {
 765:main.c        ****             blue_LED_Write(0);
 2386              		.loc 1 765 0
 2387 0b50 0020     		movs	r0, #0
 2388 0b52 FFF7FEFF 		bl	blue_LED_Write
 2389              	.L107:
 766:main.c        ****            
 767:main.c        ****         }
 768:main.c        ****         SPIM_1_ClearRxBuffer();
 2390              		.loc 1 768 0
 2391 0b56 FFF7FEFF 		bl	SPIM_1_ClearRxBuffer
 769:main.c        ****         SPIM_2_ClearRxBuffer();
 2392              		.loc 1 769 0
 2393 0b5a FFF7FEFF 		bl	SPIM_2_ClearRxBuffer
 770:main.c        ****         //CyDelay(1);
 771:main.c        ****         //send SPI data
 772:main.c        ****         CyDmaChEnable(rxChannel, STORE_TD_CFG_ONCMPLT);
 2394              		.loc 1 772 0
 2395 0b5e 0C4B     		ldr	r3, .L121
 2396 0b60 1B78     		ldrb	r3, [r3]
 2397 0b62 DBB2     		uxtb	r3, r3
 2398 0b64 0121     		movs	r1, #1
 2399 0b66 1846     		mov	r0, r3
 2400 0b68 FFF7FEFF 		bl	CyDmaChEnable
 773:main.c        ****         CyDmaChEnable(txChannel, STORE_TD_CFG_ONCMPLT);
 2401              		.loc 1 773 0
 2402 0b6c 094B     		ldr	r3, .L121+4
 2403 0b6e 1B78     		ldrb	r3, [r3]
 2404 0b70 DBB2     		uxtb	r3, r3
 2405 0b72 0121     		movs	r1, #1
 2406 0b74 1846     		mov	r0, r3
 2407 0b76 FFF7FEFF 		bl	CyDmaChEnable
 774:main.c        ****         
 775:main.c        **** 
 776:main.c        ****        //CyDelay(1);
 777:main.c        **** 
 778:main.c        ****         
 779:main.c        ****         timeSinceLastAttack++;
 2408              		.loc 1 779 0
 2409 0b7a 074B     		ldr	r3, .L121+8
 2410 0b7c 18CB     		ldmia	r3, {r3-r4}
 2411 0b7e 0133     		adds	r3, r3, #1
 2412 0b80 44F10004 		adc	r4, r4, #0
 2413 0b84 044A     		ldr	r2, .L121+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 58


 2414 0b86 C2E90034 		strd	r3, [r2]
 780:main.c        ****      }
 2415              		.loc 1 780 0
 2416 0b8a FFF777BA 		b	.L108
 2417              	.L122:
 2418 0b8e 00BF     		.align	2
 2419              	.L121:
 2420 0b90 00000000 		.word	rxChannel
 2421 0b94 00000000 		.word	txChannel
 2422 0b98 00000000 		.word	timeSinceLastAttack
 2423              		.cfi_endproc
 2424              	.LFE73:
 2425              		.size	main, .-main
 2426              		.section	.text.checkUSB_Vbus,"ax",%progbits
 2427              		.align	2
 2428              		.global	checkUSB_Vbus
 2429              		.thumb
 2430              		.thumb_func
 2431              		.type	checkUSB_Vbus, %function
 2432              	checkUSB_Vbus:
 2433              	.LFB74:
 781:main.c        **** }
 782:main.c        **** 
 783:main.c        **** void checkUSB_Vbus(void)
 784:main.c        **** {
 2434              		.loc 1 784 0
 2435              		.cfi_startproc
 2436              		@ args = 0, pretend = 0, frame = 0
 2437              		@ frame_needed = 1, uses_anonymous_args = 0
 2438 0000 80B5     		push	{r7, lr}
 2439              		.cfi_def_cfa_offset 8
 2440              		.cfi_offset 7, -8
 2441              		.cfi_offset 14, -4
 2442 0002 00AF     		add	r7, sp, #0
 2443              		.cfi_def_cfa_register 7
 785:main.c        ****    if (USB_VBusPresent() == 0)
 2444              		.loc 1 785 0
 2445 0004 FFF7FEFF 		bl	USB_VBusPresent
 2446 0008 0346     		mov	r3, r0
 2447 000a 002B     		cmp	r3, #0
 2448 000c 05D1     		bne	.L124
 786:main.c        ****    {
 787:main.c        ****        USB_Stop();
 2449              		.loc 1 787 0
 2450 000e FFF7FEFF 		bl	USB_Stop
 788:main.c        ****        //LED_PWM_Write(0);
 789:main.c        ****        USB_active = 0; 
 2451              		.loc 1 789 0
 2452 0012 0E4B     		ldr	r3, .L127
 2453 0014 0022     		movs	r2, #0
 2454 0016 1A70     		strb	r2, [r3]
 2455 0018 13E0     		b	.L125
 2456              	.L124:
 790:main.c        ****         //CySoftwareReset();
 791:main.c        ****    }
 792:main.c        ****    else if (USB_active == 0 )
 2457              		.loc 1 792 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 59


 2458 001a 0C4B     		ldr	r3, .L127
 2459 001c 1B78     		ldrb	r3, [r3]
 2460 001e DBB2     		uxtb	r3, r3
 2461 0020 002B     		cmp	r3, #0
 2462 0022 0ED1     		bne	.L125
 793:main.c        ****    {
 794:main.c        ****        USB_Start(0u, USB_5V_OPERATION ); 
 2463              		.loc 1 794 0
 2464 0024 0121     		movs	r1, #1
 2465 0026 0020     		movs	r0, #0
 2466 0028 FFF7FEFF 		bl	USB_Start
 795:main.c        ****         while (0u == USB_GetConfiguration());
 2467              		.loc 1 795 0
 2468 002c 00BF     		nop
 2469              	.L126:
 2470              		.loc 1 795 0 is_stmt 0 discriminator 1
 2471 002e FFF7FEFF 		bl	USB_GetConfiguration
 2472 0032 0346     		mov	r3, r0
 2473 0034 002B     		cmp	r3, #0
 2474 0036 FAD0     		beq	.L126
 796:main.c        ****         USB_MIDI_EP_Init();
 2475              		.loc 1 796 0 is_stmt 1
 2476 0038 FFF7FEFF 		bl	USB_MIDI_Init
 797:main.c        ****        //LED_PWM_Write(255);
 798:main.c        ****        USB_active = 1;
 2477              		.loc 1 798 0
 2478 003c 034B     		ldr	r3, .L127
 2479 003e 0122     		movs	r2, #1
 2480 0040 1A70     		strb	r2, [r3]
 2481              	.L125:
 799:main.c        ****    }
 800:main.c        ****    USB_check_flag = 0;
 2482              		.loc 1 800 0
 2483 0042 034B     		ldr	r3, .L127+4
 2484 0044 0022     		movs	r2, #0
 2485 0046 1A70     		strb	r2, [r3]
 801:main.c        **** }
 2486              		.loc 1 801 0
 2487 0048 00BF     		nop
 2488 004a 80BD     		pop	{r7, pc}
 2489              	.L128:
 2490              		.align	2
 2491              	.L127:
 2492 004c 00000000 		.word	USB_active
 2493 0050 00000000 		.word	USB_check_flag
 2494              		.cfi_endproc
 2495              	.LFE74:
 2496              		.size	checkUSB_Vbus, .-checkUSB_Vbus
 2497              		.section	.text.USB_service,"ax",%progbits
 2498              		.align	2
 2499              		.global	USB_service
 2500              		.thumb
 2501              		.thumb_func
 2502              		.type	USB_service, %function
 2503              	USB_service:
 2504              	.LFB75:
 802:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 60


 803:main.c        **** void USB_service(void)
 804:main.c        **** {
 2505              		.loc 1 804 0
 2506              		.cfi_startproc
 2507              		@ args = 0, pretend = 0, frame = 0
 2508              		@ frame_needed = 1, uses_anonymous_args = 0
 2509 0000 80B5     		push	{r7, lr}
 2510              		.cfi_def_cfa_offset 8
 2511              		.cfi_offset 7, -8
 2512              		.cfi_offset 14, -4
 2513 0002 00AF     		add	r7, sp, #0
 2514              		.cfi_def_cfa_register 7
 805:main.c        ****     if(USB_IsConfigurationChanged() != 0u)
 2515              		.loc 1 805 0
 2516 0004 FFF7FEFF 		bl	USB_IsConfigurationChanged
 2517 0008 0346     		mov	r3, r0
 2518 000a 002B     		cmp	r3, #0
 2519 000c 10D0     		beq	.L130
 806:main.c        ****     {
 807:main.c        ****         if(USB_GetConfiguration() != 0u)   
 2520              		.loc 1 807 0
 2521 000e FFF7FEFF 		bl	USB_GetConfiguration
 2522 0012 0346     		mov	r3, r0
 2523 0014 002B     		cmp	r3, #0
 2524 0016 0BD0     		beq	.L130
 808:main.c        ****         {
 809:main.c        ****            // Sleep_isr_StartEx(SleepIsr_function);
 810:main.c        ****             
 811:main.c        ****             //SleepTimer_Start();
 812:main.c        ****         	
 813:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 2525              		.loc 1 813 0
 2526 0018 244B     		ldr	r3, .L136
 2527 001a 1B78     		ldrb	r3, [r3]
 2528 001c DBB2     		uxtb	r3, r3
 2529 001e 002B     		cmp	r3, #0
 2530 0020 06D0     		beq	.L130
 2531              		.loc 1 813 0 is_stmt 0 discriminator 1
 2532 0022 FFF7FEFF 		bl	USB_VBusPresent
 2533 0026 0346     		mov	r3, r0
 2534 0028 002B     		cmp	r3, #0
 2535 002a 01D0     		beq	.L130
 814:main.c        ****             {
 815:main.c        ****                 USB_MIDI_EP_Init();
 2536              		.loc 1 815 0 is_stmt 1
 2537 002c FFF7FEFF 		bl	USB_MIDI_Init
 2538              	.L130:
 816:main.c        ****             }
 817:main.c        ****         }
 818:main.c        ****         else
 819:main.c        ****         {
 820:main.c        ****             //SleepTimer_Stop();
 821:main.c        ****         }    
 822:main.c        ****     }        
 823:main.c        ****     
 824:main.c        ****     if(USB_GetConfiguration() != 0u)    
 2539              		.loc 1 824 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 61


 2540 0030 FFF7FEFF 		bl	USB_GetConfiguration
 2541 0034 0346     		mov	r3, r0
 2542 0036 002B     		cmp	r3, #0
 2543 0038 35D0     		beq	.L135
 825:main.c        ****     {
 826:main.c        **** 
 827:main.c        ****          /* Reinitialize after SET_CONFIGURATION or SET_INTERFACE Requests */
 828:main.c        ****         if(USB_IsConfigurationChanged() != 0x00)
 2544              		.loc 1 828 0
 2545 003a FFF7FEFF 		bl	USB_IsConfigurationChanged
 2546 003e 0346     		mov	r3, r0
 2547 0040 002B     		cmp	r3, #0
 2548 0042 18D0     		beq	.L133
 829:main.c        ****         {
 830:main.c        ****             USB_LoadInEP(USB_midi_in_ep, USB_midiInBuffer,(uint16) USB_midiInPointer);
 2549              		.loc 1 830 0
 2550 0044 1A4B     		ldr	r3, .L136+4
 2551 0046 1B78     		ldrb	r3, [r3]
 2552 0048 D8B2     		uxtb	r0, r3
 2553 004a 1A4B     		ldr	r3, .L136+8
 2554 004c 1B78     		ldrb	r3, [r3]
 2555 004e DBB2     		uxtb	r3, r3
 2556 0050 9BB2     		uxth	r3, r3
 2557 0052 1A46     		mov	r2, r3
 2558 0054 1849     		ldr	r1, .L136+12
 2559 0056 FFF7FEFF 		bl	USB_LoadInEP
 831:main.c        ****             USB_ReadOutEP(USB_midi_out_ep,USB_midiOutBuffer, 64);
 2560              		.loc 1 831 0
 2561 005a 184B     		ldr	r3, .L136+16
 2562 005c 1B78     		ldrb	r3, [r3]
 2563 005e DBB2     		uxtb	r3, r3
 2564 0060 4022     		movs	r2, #64
 2565 0062 1749     		ldr	r1, .L136+20
 2566 0064 1846     		mov	r0, r3
 2567 0066 FFF7FEFF 		bl	USB_ReadOutEP
 832:main.c        ****                                              /* configuring the DMAs for the first time only, the d
 833:main.c        ****                                              in the EP buffer is Transferred by DMA to the buffer a
 834:main.c        ****             USB_EnableOutEP(USB_midi_out_ep);       /* Note 3.*/
 2568              		.loc 1 834 0
 2569 006a 144B     		ldr	r3, .L136+16
 2570 006c 1B78     		ldrb	r3, [r3]
 2571 006e DBB2     		uxtb	r3, r3
 2572 0070 1846     		mov	r0, r3
 2573 0072 FFF7FEFF 		bl	USB_EnableOutEP
 2574              	.L133:
 835:main.c        ****         }
 836:main.c        **** #if 0
 837:main.c        ****          /* Check that all data has been transfered and IN Buffer is empty */
 838:main.c        ****          if (USB_GetEPState(USB_midi_in_ep) == USB_IN_BUFFER_EMPTY)
 839:main.c        ****          {
 840:main.c        ****             /*Rearm the IN Endpoint (EP1) */
 841:main.c        ****             USB_LoadInEP(USB_midi_in_ep, USB_NULL, (uint16) USB_midiInPointer);
 842:main.c        ****          }
 843:main.c        ****              
 844:main.c        ****          if (USB_GetEPState(USB_midi_out_ep) == USB_OUT_BUFFER_FULL)
 845:main.c        ****          {
 846:main.c        ****             USB_EnableOutEP(USB_midi_out_ep);       /* Note 3.*/
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 62


 847:main.c        ****          }
 848:main.c        ****  #endif
 849:main.c        **** 
 850:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 2575              		.loc 1 850 0
 2576 0076 0D4B     		ldr	r3, .L136
 2577 0078 1B78     		ldrb	r3, [r3]
 2578 007a DBB2     		uxtb	r3, r3
 2579 007c 002B     		cmp	r3, #0
 2580 007e 06D0     		beq	.L134
 2581              		.loc 1 850 0 is_stmt 0 discriminator 1
 2582 0080 FFF7FEFF 		bl	USB_VBusPresent
 2583 0084 0346     		mov	r3, r0
 2584 0086 002B     		cmp	r3, #0
 2585 0088 01D0     		beq	.L134
 851:main.c        ****             {
 852:main.c        ****                 USB_MIDI_IN_Service();
 2586              		.loc 1 852 0 is_stmt 1
 2587 008a FFF7FEFF 		bl	USB_MIDI_IN_Service
 2588              	.L134:
 853:main.c        ****             }
 854:main.c        **** 
 855:main.c        **** 
 856:main.c        **** 
 857:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 2589              		.loc 1 857 0
 2590 008e 074B     		ldr	r3, .L136
 2591 0090 1B78     		ldrb	r3, [r3]
 2592 0092 DBB2     		uxtb	r3, r3
 2593 0094 002B     		cmp	r3, #0
 2594 0096 06D0     		beq	.L135
 2595              		.loc 1 857 0 is_stmt 0 discriminator 1
 2596 0098 FFF7FEFF 		bl	USB_VBusPresent
 2597 009c 0346     		mov	r3, r0
 2598 009e 002B     		cmp	r3, #0
 2599 00a0 01D0     		beq	.L135
 858:main.c        ****             {
 859:main.c        ****                 USB_MIDI_OUT_Service();
 2600              		.loc 1 859 0 is_stmt 1
 2601 00a2 FFF7FEFF 		bl	USB_MIDI_OUT_Service
 2602              	.L135:
 860:main.c        ****             }
 861:main.c        **** 
 862:main.c        **** /*
 863:main.c        ****         if( usbActivityCounter >= 2u ) 
 864:main.c        ****         {
 865:main.c        **** 
 866:main.c        ****             USB_Suspend();
 867:main.c        **** 
 868:main.c        ****             CyPmSaveClocks();
 869:main.c        ****             CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_PICU);
 870:main.c        ****             CyPmRestoreClocks();
 871:main.c        **** 
 872:main.c        ****             USB_Resume();
 873:main.c        ****             USB_MIDI_EP_Init();
 874:main.c        ****             
 875:main.c        ****             usbActivityCounter = 0u; 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 63


 876:main.c        **** 
 877:main.c        ****         }
 878:main.c        ****         */
 879:main.c        ****     }
 880:main.c        ****         
 881:main.c        **** }
 2603              		.loc 1 881 0
 2604 00a6 00BF     		nop
 2605 00a8 80BD     		pop	{r7, pc}
 2606              	.L137:
 2607 00aa 00BF     		.align	2
 2608              	.L136:
 2609 00ac 00000000 		.word	USB_active
 2610 00b0 00000000 		.word	USB_midi_in_ep
 2611 00b4 00000000 		.word	USB_midiInPointer
 2612 00b8 00000000 		.word	USB_midiInBuffer
 2613 00bc 00000000 		.word	USB_midi_out_ep
 2614 00c0 00000000 		.word	USB_midiOutBuffer
 2615              		.cfi_endproc
 2616              	.LFE75:
 2617              		.size	USB_service, .-USB_service
 2618              		.comm	tempMIDI,4,4
 2619              		.section	.text.USB_callbackLocalMidiEvent,"ax",%progbits
 2620              		.align	2
 2621              		.global	USB_callbackLocalMidiEvent
 2622              		.thumb
 2623              		.thumb_func
 2624              		.type	USB_callbackLocalMidiEvent, %function
 2625              	USB_callbackLocalMidiEvent:
 2626              	.LFB76:
 882:main.c        **** uint8_t tempMIDI[4];
 883:main.c        **** void USB_callbackLocalMidiEvent(uint8 cable, uint8 *midiMsg) CYREENTRANT
 884:main.c        **** {
 2627              		.loc 1 884 0
 2628              		.cfi_startproc
 2629              		@ args = 0, pretend = 0, frame = 8
 2630              		@ frame_needed = 1, uses_anonymous_args = 0
 2631 0000 80B5     		push	{r7, lr}
 2632              		.cfi_def_cfa_offset 8
 2633              		.cfi_offset 7, -8
 2634              		.cfi_offset 14, -4
 2635 0002 82B0     		sub	sp, sp, #8
 2636              		.cfi_def_cfa_offset 16
 2637 0004 00AF     		add	r7, sp, #0
 2638              		.cfi_def_cfa_register 7
 2639 0006 0346     		mov	r3, r0
 2640 0008 3960     		str	r1, [r7]
 2641 000a FB71     		strb	r3, [r7, #7]
 885:main.c        ****      tempMIDI[0] = midiMsg[0];
 2642              		.loc 1 885 0
 2643 000c 3B68     		ldr	r3, [r7]
 2644 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2645 0010 0C4B     		ldr	r3, .L141
 2646 0012 1A70     		strb	r2, [r3]
 886:main.c        ****     tempMIDI[1] = midiMsg[1];
 2647              		.loc 1 886 0
 2648 0014 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 64


 2649 0016 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2650 0018 0A4B     		ldr	r3, .L141
 2651 001a 5A70     		strb	r2, [r3, #1]
 887:main.c        ****      tempMIDI[2] = midiMsg[2];
 2652              		.loc 1 887 0
 2653 001c 3B68     		ldr	r3, [r7]
 2654 001e 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 2655 0020 084B     		ldr	r3, .L141
 2656 0022 9A70     		strb	r2, [r3, #2]
 888:main.c        ****      tempMIDI[3] = midiMsg[3];
 2657              		.loc 1 888 0
 2658 0024 3B68     		ldr	r3, [r7]
 2659 0026 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2660 0028 064B     		ldr	r3, .L141
 2661 002a DA70     		strb	r2, [r3, #3]
 889:main.c        ****     //check that we got here
 890:main.c        ****     
 891:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 2662              		.loc 1 891 0
 2663 002c 064B     		ldr	r3, .L141+4
 2664 002e 1B78     		ldrb	r3, [r3]
 2665 0030 DBB2     		uxtb	r3, r3
 2666 0032 002B     		cmp	r3, #0
 2667 0034 01D0     		beq	.L140
 2668              		.loc 1 891 0 is_stmt 0 discriminator 1
 2669 0036 FFF7FEFF 		bl	USB_VBusPresent
 2670              	.L140:
 892:main.c        ****     { 
 893:main.c        ****     }
 894:main.c        ****     cable = cable;
 895:main.c        **** }
 2671              		.loc 1 895 0 is_stmt 1
 2672 003a 00BF     		nop
 2673 003c 0837     		adds	r7, r7, #8
 2674              		.cfi_def_cfa_offset 8
 2675 003e BD46     		mov	sp, r7
 2676              		.cfi_def_cfa_register 13
 2677              		@ sp needed
 2678 0040 80BD     		pop	{r7, pc}
 2679              	.L142:
 2680 0042 00BF     		.align	2
 2681              	.L141:
 2682 0044 00000000 		.word	tempMIDI
 2683 0048 00000000 		.word	USB_active
 2684              		.cfi_endproc
 2685              	.LFE76:
 2686              		.size	USB_callbackLocalMidiEvent, .-USB_callbackLocalMidiEvent
 2687              		.section	.text.sendMIDINoteOn,"ax",%progbits
 2688              		.align	2
 2689              		.global	sendMIDINoteOn
 2690              		.thumb
 2691              		.thumb_func
 2692              		.type	sendMIDINoteOn, %function
 2693              	sendMIDINoteOn:
 2694              	.LFB77:
 896:main.c        **** 
 897:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 65


 898:main.c        **** {  
 2695              		.loc 1 898 0
 2696              		.cfi_startproc
 2697              		@ args = 0, pretend = 0, frame = 16
 2698              		@ frame_needed = 1, uses_anonymous_args = 0
 2699 0000 80B5     		push	{r7, lr}
 2700              		.cfi_def_cfa_offset 8
 2701              		.cfi_offset 7, -8
 2702              		.cfi_offset 14, -4
 2703 0002 84B0     		sub	sp, sp, #16
 2704              		.cfi_def_cfa_offset 24
 2705 0004 00AF     		add	r7, sp, #0
 2706              		.cfi_def_cfa_register 7
 2707 0006 F860     		str	r0, [r7, #12]
 2708 0008 B960     		str	r1, [r7, #8]
 2709 000a 7A60     		str	r2, [r7, #4]
 899:main.c        ****    
 900:main.c        ****     midiMsg[0] = USB_MIDI_NOTE_ON + channel;
 2710              		.loc 1 900 0
 2711 000c 7B68     		ldr	r3, [r7, #4]
 2712 000e DBB2     		uxtb	r3, r3
 2713 0010 703B     		subs	r3, r3, #112
 2714 0012 DAB2     		uxtb	r2, r3
 2715 0014 254B     		ldr	r3, .L147
 2716 0016 1A70     		strb	r2, [r3]
 901:main.c        ****     midiMsg[1] = MIDInoteNum;
 2717              		.loc 1 901 0
 2718 0018 FB68     		ldr	r3, [r7, #12]
 2719 001a DAB2     		uxtb	r2, r3
 2720 001c 234B     		ldr	r3, .L147
 2721 001e 5A70     		strb	r2, [r3, #1]
 902:main.c        ****     midiMsg[2] = velocity;	
 2722              		.loc 1 902 0
 2723 0020 BB68     		ldr	r3, [r7, #8]
 2724 0022 DAB2     		uxtb	r2, r3
 2725 0024 214B     		ldr	r3, .L147
 2726 0026 9A70     		strb	r2, [r3, #2]
 903:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
 904:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 2727              		.loc 1 904 0
 2728 0028 214B     		ldr	r3, .L147+4
 2729 002a 1B78     		ldrb	r3, [r3]
 2730 002c DBB2     		uxtb	r3, r3
 2731 002e 002B     		cmp	r3, #0
 2732 0030 09D0     		beq	.L144
 2733              		.loc 1 904 0 is_stmt 0 discriminator 1
 2734 0032 FFF7FEFF 		bl	USB_VBusPresent
 2735 0036 0346     		mov	r3, r0
 2736 0038 002B     		cmp	r3, #0
 2737 003a 04D0     		beq	.L144
 905:main.c        ****     {
 906:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 2738              		.loc 1 906 0 is_stmt 1
 2739 003c 0022     		movs	r2, #0
 2740 003e 1B49     		ldr	r1, .L147
 2741 0040 0320     		movs	r0, #3
 2742 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 66


 2743              	.L144:
 907:main.c        ****     } 
 908:main.c        ****     midiSent += 4;
 2744              		.loc 1 908 0
 2745 0046 1B4B     		ldr	r3, .L147+8
 2746 0048 1B88     		ldrh	r3, [r3]
 2747 004a 0433     		adds	r3, r3, #4
 2748 004c 9AB2     		uxth	r2, r3
 2749 004e 194B     		ldr	r3, .L147+8
 2750 0050 1A80     		strh	r2, [r3]	@ movhi
 909:main.c        ****     
 910:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[0];
 2751              		.loc 1 910 0
 2752 0052 194B     		ldr	r3, .L147+12
 2753 0054 1B68     		ldr	r3, [r3]
 2754 0056 5A1C     		adds	r2, r3, #1
 2755 0058 1749     		ldr	r1, .L147+12
 2756 005a 0A60     		str	r2, [r1]
 2757 005c 134A     		ldr	r2, .L147
 2758 005e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 2759 0060 164A     		ldr	r2, .L147+16
 2760 0062 D154     		strb	r1, [r2, r3]
 911:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[1];
 2761              		.loc 1 911 0
 2762 0064 144B     		ldr	r3, .L147+12
 2763 0066 1B68     		ldr	r3, [r3]
 2764 0068 5A1C     		adds	r2, r3, #1
 2765 006a 1349     		ldr	r1, .L147+12
 2766 006c 0A60     		str	r2, [r1]
 2767 006e 0F4A     		ldr	r2, .L147
 2768 0070 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 2769 0072 124A     		ldr	r2, .L147+16
 2770 0074 D154     		strb	r1, [r2, r3]
 912:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[2];
 2771              		.loc 1 912 0
 2772 0076 104B     		ldr	r3, .L147+12
 2773 0078 1B68     		ldr	r3, [r3]
 2774 007a 5A1C     		adds	r2, r3, #1
 2775 007c 0E49     		ldr	r1, .L147+12
 2776 007e 0A60     		str	r2, [r1]
 2777 0080 0A4A     		ldr	r2, .L147
 2778 0082 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 2779 0084 0D4A     		ldr	r2, .L147+16
 2780 0086 D154     		strb	r1, [r2, r3]
 913:main.c        ****     if (velocity > 0)
 2781              		.loc 1 913 0
 2782 0088 BB68     		ldr	r3, [r7, #8]
 2783 008a 002B     		cmp	r3, #0
 2784 008c 03DD     		ble	.L145
 914:main.c        ****     {
 915:main.c        ****         LED1_Write(1);
 2785              		.loc 1 915 0
 2786 008e 0120     		movs	r0, #1
 2787 0090 FFF7FEFF 		bl	LED1_Write
 2788 0094 02E0     		b	.L146
 2789              	.L145:
 916:main.c        ****     }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 67


 917:main.c        ****     else
 918:main.c        ****     {
 919:main.c        ****         LED1_Write(0);
 2790              		.loc 1 919 0
 2791 0096 0020     		movs	r0, #0
 2792 0098 FFF7FEFF 		bl	LED1_Write
 2793              	.L146:
 920:main.c        ****     }
 921:main.c        ****     outChanged = 1;
 2794              		.loc 1 921 0
 2795 009c 084B     		ldr	r3, .L147+20
 2796 009e 0122     		movs	r2, #1
 2797 00a0 1A60     		str	r2, [r3]
 922:main.c        ****     
 923:main.c        **** }
 2798              		.loc 1 923 0
 2799 00a2 00BF     		nop
 2800 00a4 1037     		adds	r7, r7, #16
 2801              		.cfi_def_cfa_offset 8
 2802 00a6 BD46     		mov	sp, r7
 2803              		.cfi_def_cfa_register 13
 2804              		@ sp needed
 2805 00a8 80BD     		pop	{r7, pc}
 2806              	.L148:
 2807 00aa 00BF     		.align	2
 2808              	.L147:
 2809 00ac 00000000 		.word	midiMsg
 2810 00b0 00000000 		.word	USB_active
 2811 00b4 00000000 		.word	midiSent
 2812 00b8 00000000 		.word	currentOutPointer
 2813 00bc 00000000 		.word	tx2BufferTemp
 2814 00c0 00000000 		.word	outChanged
 2815              		.cfi_endproc
 2816              	.LFE77:
 2817              		.size	sendMIDINoteOn, .-sendMIDINoteOn
 2818              		.section	.text.sendMIDIPitchBend,"ax",%progbits
 2819              		.align	2
 2820              		.global	sendMIDIPitchBend
 2821              		.thumb
 2822              		.thumb_func
 2823              		.type	sendMIDIPitchBend, %function
 2824              	sendMIDIPitchBend:
 2825              	.LFB78:
 924:main.c        **** 
 925:main.c        **** void sendMIDIPitchBend(int val, int channel)
 926:main.c        **** {
 2826              		.loc 1 926 0
 2827              		.cfi_startproc
 2828              		@ args = 0, pretend = 0, frame = 8
 2829              		@ frame_needed = 1, uses_anonymous_args = 0
 2830 0000 80B5     		push	{r7, lr}
 2831              		.cfi_def_cfa_offset 8
 2832              		.cfi_offset 7, -8
 2833              		.cfi_offset 14, -4
 2834 0002 82B0     		sub	sp, sp, #8
 2835              		.cfi_def_cfa_offset 16
 2836 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 68


 2837              		.cfi_def_cfa_register 7
 2838 0006 7860     		str	r0, [r7, #4]
 2839 0008 3960     		str	r1, [r7]
 927:main.c        ****     midiMsg[0] = USB_MIDI_PITCH_BEND_CHANGE + channel;
 2840              		.loc 1 927 0
 2841 000a 3B68     		ldr	r3, [r7]
 2842 000c DBB2     		uxtb	r3, r3
 2843 000e 203B     		subs	r3, r3, #32
 2844 0010 DAB2     		uxtb	r2, r3
 2845 0012 224B     		ldr	r3, .L151
 2846 0014 1A70     		strb	r2, [r3]
 928:main.c        ****     midiMsg[1] = (val & 127); //LSB
 2847              		.loc 1 928 0
 2848 0016 7B68     		ldr	r3, [r7, #4]
 2849 0018 DBB2     		uxtb	r3, r3
 2850 001a 03F07F03 		and	r3, r3, #127
 2851 001e DAB2     		uxtb	r2, r3
 2852 0020 1E4B     		ldr	r3, .L151
 2853 0022 5A70     		strb	r2, [r3, #1]
 929:main.c        ****     midiMsg[2] = (val >> 7);	//MSB		
 2854              		.loc 1 929 0
 2855 0024 7B68     		ldr	r3, [r7, #4]
 2856 0026 DB11     		asrs	r3, r3, #7
 2857 0028 DAB2     		uxtb	r2, r3
 2858 002a 1C4B     		ldr	r3, .L151
 2859 002c 9A70     		strb	r2, [r3, #2]
 930:main.c        **** 
 931:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
 932:main.c        ****     
 933:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 2860              		.loc 1 933 0
 2861 002e 1C4B     		ldr	r3, .L151+4
 2862 0030 1B78     		ldrb	r3, [r3]
 2863 0032 DBB2     		uxtb	r3, r3
 2864 0034 002B     		cmp	r3, #0
 2865 0036 09D0     		beq	.L150
 2866              		.loc 1 933 0 is_stmt 0 discriminator 1
 2867 0038 FFF7FEFF 		bl	USB_VBusPresent
 2868 003c 0346     		mov	r3, r0
 2869 003e 002B     		cmp	r3, #0
 2870 0040 04D0     		beq	.L150
 934:main.c        ****     {
 935:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 2871              		.loc 1 935 0 is_stmt 1
 2872 0042 0022     		movs	r2, #0
 2873 0044 1549     		ldr	r1, .L151
 2874 0046 0320     		movs	r0, #3
 2875 0048 FFF7FEFF 		bl	USB_PutUsbMidiIn
 2876              	.L150:
 936:main.c        ****     } 
 937:main.c        ****     midiSent += 4;
 2877              		.loc 1 937 0
 2878 004c 154B     		ldr	r3, .L151+8
 2879 004e 1B88     		ldrh	r3, [r3]
 2880 0050 0433     		adds	r3, r3, #4
 2881 0052 9AB2     		uxth	r2, r3
 2882 0054 134B     		ldr	r3, .L151+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 69


 2883 0056 1A80     		strh	r2, [r3]	@ movhi
 938:main.c        ****     
 939:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[0];
 2884              		.loc 1 939 0
 2885 0058 134B     		ldr	r3, .L151+12
 2886 005a 1B68     		ldr	r3, [r3]
 2887 005c 5A1C     		adds	r2, r3, #1
 2888 005e 1249     		ldr	r1, .L151+12
 2889 0060 0A60     		str	r2, [r1]
 2890 0062 0E4A     		ldr	r2, .L151
 2891 0064 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 2892 0066 114A     		ldr	r2, .L151+16
 2893 0068 D154     		strb	r1, [r2, r3]
 940:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[1];
 2894              		.loc 1 940 0
 2895 006a 0F4B     		ldr	r3, .L151+12
 2896 006c 1B68     		ldr	r3, [r3]
 2897 006e 5A1C     		adds	r2, r3, #1
 2898 0070 0D49     		ldr	r1, .L151+12
 2899 0072 0A60     		str	r2, [r1]
 2900 0074 094A     		ldr	r2, .L151
 2901 0076 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 2902 0078 0C4A     		ldr	r2, .L151+16
 2903 007a D154     		strb	r1, [r2, r3]
 941:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[2];
 2904              		.loc 1 941 0
 2905 007c 0A4B     		ldr	r3, .L151+12
 2906 007e 1B68     		ldr	r3, [r3]
 2907 0080 5A1C     		adds	r2, r3, #1
 2908 0082 0949     		ldr	r1, .L151+12
 2909 0084 0A60     		str	r2, [r1]
 2910 0086 054A     		ldr	r2, .L151
 2911 0088 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 2912 008a 084A     		ldr	r2, .L151+16
 2913 008c D154     		strb	r1, [r2, r3]
 942:main.c        ****     outChanged = 1;
 2914              		.loc 1 942 0
 2915 008e 084B     		ldr	r3, .L151+20
 2916 0090 0122     		movs	r2, #1
 2917 0092 1A60     		str	r2, [r3]
 943:main.c        **** }
 2918              		.loc 1 943 0
 2919 0094 00BF     		nop
 2920 0096 0837     		adds	r7, r7, #8
 2921              		.cfi_def_cfa_offset 8
 2922 0098 BD46     		mov	sp, r7
 2923              		.cfi_def_cfa_register 13
 2924              		@ sp needed
 2925 009a 80BD     		pop	{r7, pc}
 2926              	.L152:
 2927              		.align	2
 2928              	.L151:
 2929 009c 00000000 		.word	midiMsg
 2930 00a0 00000000 		.word	USB_active
 2931 00a4 00000000 		.word	midiSent
 2932 00a8 00000000 		.word	currentOutPointer
 2933 00ac 00000000 		.word	tx2BufferTemp
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 70


 2934 00b0 00000000 		.word	outChanged
 2935              		.cfi_endproc
 2936              	.LFE78:
 2937              		.size	sendMIDIPitchBend, .-sendMIDIPitchBend
 2938              		.section	.text.sendMIDIControlChange,"ax",%progbits
 2939              		.align	2
 2940              		.global	sendMIDIControlChange
 2941              		.thumb
 2942              		.thumb_func
 2943              		.type	sendMIDIControlChange, %function
 2944              	sendMIDIControlChange:
 2945              	.LFB79:
 944:main.c        **** 
 945:main.c        **** 
 946:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel)
 947:main.c        **** {
 2946              		.loc 1 947 0
 2947              		.cfi_startproc
 2948              		@ args = 0, pretend = 0, frame = 16
 2949              		@ frame_needed = 1, uses_anonymous_args = 0
 2950 0000 80B5     		push	{r7, lr}
 2951              		.cfi_def_cfa_offset 8
 2952              		.cfi_offset 7, -8
 2953              		.cfi_offset 14, -4
 2954 0002 84B0     		sub	sp, sp, #16
 2955              		.cfi_def_cfa_offset 24
 2956 0004 00AF     		add	r7, sp, #0
 2957              		.cfi_def_cfa_register 7
 2958 0006 F860     		str	r0, [r7, #12]
 2959 0008 B960     		str	r1, [r7, #8]
 2960 000a 7A60     		str	r2, [r7, #4]
 948:main.c        ****     midiMsg[0] = USB_MIDI_CONTROL_CHANGE + channel;
 2961              		.loc 1 948 0
 2962 000c 7B68     		ldr	r3, [r7, #4]
 2963 000e DBB2     		uxtb	r3, r3
 2964 0010 503B     		subs	r3, r3, #80
 2965 0012 DAB2     		uxtb	r2, r3
 2966 0014 204B     		ldr	r3, .L155
 2967 0016 1A70     		strb	r2, [r3]
 949:main.c        ****     midiMsg[1] = CCnum;
 2968              		.loc 1 949 0
 2969 0018 FB68     		ldr	r3, [r7, #12]
 2970 001a DAB2     		uxtb	r2, r3
 2971 001c 1E4B     		ldr	r3, .L155
 2972 001e 5A70     		strb	r2, [r3, #1]
 950:main.c        ****     midiMsg[2] = CCval;			
 2973              		.loc 1 950 0
 2974 0020 BB68     		ldr	r3, [r7, #8]
 2975 0022 DAB2     		uxtb	r2, r3
 2976 0024 1C4B     		ldr	r3, .L155
 2977 0026 9A70     		strb	r2, [r3, #2]
 951:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
 952:main.c        ****     
 953:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 2978              		.loc 1 953 0
 2979 0028 1C4B     		ldr	r3, .L155+4
 2980 002a 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 71


 2981 002c DBB2     		uxtb	r3, r3
 2982 002e 002B     		cmp	r3, #0
 2983 0030 09D0     		beq	.L154
 2984              		.loc 1 953 0 is_stmt 0 discriminator 1
 2985 0032 FFF7FEFF 		bl	USB_VBusPresent
 2986 0036 0346     		mov	r3, r0
 2987 0038 002B     		cmp	r3, #0
 2988 003a 04D0     		beq	.L154
 954:main.c        ****     {
 955:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 2989              		.loc 1 955 0 is_stmt 1
 2990 003c 0022     		movs	r2, #0
 2991 003e 1649     		ldr	r1, .L155
 2992 0040 0320     		movs	r0, #3
 2993 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 2994              	.L154:
 956:main.c        ****     } 
 957:main.c        ****     midiSent += 4;
 2995              		.loc 1 957 0
 2996 0046 164B     		ldr	r3, .L155+8
 2997 0048 1B88     		ldrh	r3, [r3]
 2998 004a 0433     		adds	r3, r3, #4
 2999 004c 9AB2     		uxth	r2, r3
 3000 004e 144B     		ldr	r3, .L155+8
 3001 0050 1A80     		strh	r2, [r3]	@ movhi
 958:main.c        ****     
 959:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[0];
 3002              		.loc 1 959 0
 3003 0052 144B     		ldr	r3, .L155+12
 3004 0054 1B68     		ldr	r3, [r3]
 3005 0056 5A1C     		adds	r2, r3, #1
 3006 0058 1249     		ldr	r1, .L155+12
 3007 005a 0A60     		str	r2, [r1]
 3008 005c 0E4A     		ldr	r2, .L155
 3009 005e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3010 0060 114A     		ldr	r2, .L155+16
 3011 0062 D154     		strb	r1, [r2, r3]
 960:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[1];
 3012              		.loc 1 960 0
 3013 0064 0F4B     		ldr	r3, .L155+12
 3014 0066 1B68     		ldr	r3, [r3]
 3015 0068 5A1C     		adds	r2, r3, #1
 3016 006a 0E49     		ldr	r1, .L155+12
 3017 006c 0A60     		str	r2, [r1]
 3018 006e 0A4A     		ldr	r2, .L155
 3019 0070 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 3020 0072 0D4A     		ldr	r2, .L155+16
 3021 0074 D154     		strb	r1, [r2, r3]
 961:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[2];
 3022              		.loc 1 961 0
 3023 0076 0B4B     		ldr	r3, .L155+12
 3024 0078 1B68     		ldr	r3, [r3]
 3025 007a 5A1C     		adds	r2, r3, #1
 3026 007c 0949     		ldr	r1, .L155+12
 3027 007e 0A60     		str	r2, [r1]
 3028 0080 054A     		ldr	r2, .L155
 3029 0082 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 72


 3030 0084 084A     		ldr	r2, .L155+16
 3031 0086 D154     		strb	r1, [r2, r3]
 962:main.c        ****     outChanged = 1;
 3032              		.loc 1 962 0
 3033 0088 084B     		ldr	r3, .L155+20
 3034 008a 0122     		movs	r2, #1
 3035 008c 1A60     		str	r2, [r3]
 963:main.c        ****     
 964:main.c        **** }
 3036              		.loc 1 964 0
 3037 008e 00BF     		nop
 3038 0090 1037     		adds	r7, r7, #16
 3039              		.cfi_def_cfa_offset 8
 3040 0092 BD46     		mov	sp, r7
 3041              		.cfi_def_cfa_register 13
 3042              		@ sp needed
 3043 0094 80BD     		pop	{r7, pc}
 3044              	.L156:
 3045 0096 00BF     		.align	2
 3046              	.L155:
 3047 0098 00000000 		.word	midiMsg
 3048 009c 00000000 		.word	USB_active
 3049 00a0 00000000 		.word	midiSent
 3050 00a4 00000000 		.word	currentOutPointer
 3051 00a8 00000000 		.word	tx2BufferTemp
 3052 00ac 00000000 		.word	outChanged
 3053              		.cfi_endproc
 3054              	.LFE79:
 3055              		.size	sendMIDIControlChange, .-sendMIDIControlChange
 3056              		.global	iVtherm
 3057              		.bss
 3058 0139 000000   		.align	2
 3059              		.type	iVtherm, %object
 3060              		.size	iVtherm, 4
 3061              	iVtherm:
 3062 013c 00000000 		.space	4
 3063              		.global	__aeabi_i2f
 3064              		.section	.text.scanLinearResistor,"ax",%progbits
 3065              		.align	2
 3066              		.global	scanLinearResistor
 3067              		.thumb
 3068              		.thumb_func
 3069              		.type	scanLinearResistor, %function
 3070              	scanLinearResistor:
 3071              	.LFB80:
 965:main.c        **** 
 966:main.c        **** 
 967:main.c        **** int32 iVtherm = 0;
 968:main.c        **** 
 969:main.c        **** 
 970:main.c        **** void scanLinearResistor(void)
 971:main.c        **** {
 3072              		.loc 1 971 0
 3073              		.cfi_startproc
 3074              		@ args = 0, pretend = 0, frame = 16
 3075              		@ frame_needed = 1, uses_anonymous_args = 0
 3076 0000 90B5     		push	{r4, r7, lr}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 73


 3077              		.cfi_def_cfa_offset 12
 3078              		.cfi_offset 4, -12
 3079              		.cfi_offset 7, -8
 3080              		.cfi_offset 14, -4
 3081 0002 85B0     		sub	sp, sp, #20
 3082              		.cfi_def_cfa_offset 32
 3083 0004 00AF     		add	r7, sp, #0
 3084              		.cfi_def_cfa_register 7
 972:main.c        ****         int32 iVref = 0;
 3085              		.loc 1 972 0
 3086 0006 0023     		movs	r3, #0
 3087 0008 BB60     		str	r3, [r7, #8]
 973:main.c        ****         int32 iRes = 0;
 3088              		.loc 1 973 0
 3089 000a 0023     		movs	r3, #0
 3090 000c FB60     		str	r3, [r7, #12]
 974:main.c        ****         int32 offset = 0;
 3091              		.loc 1 974 0
 3092 000e 0023     		movs	r3, #0
 3093 0010 7B60     		str	r3, [r7, #4]
 975:main.c        ****     
 976:main.c        ****         ExtMUXS0_Write(whichLinearSensor & 1);
 3094              		.loc 1 976 0
 3095 0012 3F4B     		ldr	r3, .L160
 3096 0014 1B68     		ldr	r3, [r3]
 3097 0016 DBB2     		uxtb	r3, r3
 3098 0018 03F00103 		and	r3, r3, #1
 3099 001c DBB2     		uxtb	r3, r3
 3100 001e 1846     		mov	r0, r3
 3101 0020 FFF7FEFF 		bl	ExtMUXS0_Write
 977:main.c        ****         ExtMUXS1_Write((whichLinearSensor & 2)>>1);
 3102              		.loc 1 977 0
 3103 0024 3A4B     		ldr	r3, .L160
 3104 0026 1B68     		ldr	r3, [r3]
 3105 0028 03F00203 		and	r3, r3, #2
 3106 002c 5B10     		asrs	r3, r3, #1
 3107 002e DBB2     		uxtb	r3, r3
 3108 0030 1846     		mov	r0, r3
 3109 0032 FFF7FEFF 		bl	ExtMUXS1_Write
 978:main.c        **** 
 979:main.c        ****         scanPart = 0;
 3110              		.loc 1 979 0
 3111 0036 374B     		ldr	r3, .L160+4
 3112 0038 0022     		movs	r2, #0
 3113 003a 1A60     		str	r2, [r3]
 980:main.c        ****         //if (scanPart == 0)
 981:main.c        ****         {
 982:main.c        ****             AMux_1_FastSelect(scanPart);
 3114              		.loc 1 982 0
 3115 003c 354B     		ldr	r3, .L160+4
 3116 003e 1B68     		ldr	r3, [r3]
 3117 0040 DBB2     		uxtb	r3, r3
 3118 0042 1846     		mov	r0, r3
 3119 0044 FFF7FEFF 		bl	AMux_1_FastSelect
 983:main.c        ****             CyDelayUs(4); 
 3120              		.loc 1 983 0
 3121 0048 0420     		movs	r0, #4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 74


 3122 004a FFF7FEFF 		bl	CyDelayUs
 984:main.c        ****             ADC_1_StartConvert();
 3123              		.loc 1 984 0
 3124 004e FFF7FEFF 		bl	ADC_1_StartConvert
 985:main.c        ****             ADC_1_IsEndConversion(ADC_1_WAIT_FOR_RESULT);
 3125              		.loc 1 985 0
 3126 0052 0020     		movs	r0, #0
 3127 0054 FFF7FEFF 		bl	ADC_1_IsEndConversion
 986:main.c        ****             iVtherm = ADC_1_GetResult32();
 3128              		.loc 1 986 0
 3129 0058 FFF7FEFF 		bl	ADC_1_GetResult32
 3130 005c 0246     		mov	r2, r0
 3131 005e 2E4B     		ldr	r3, .L160+8
 3132 0060 1A60     		str	r2, [r3]
 987:main.c        ****             
 988:main.c        ****         }
 989:main.c        ****         scanPart = 1;
 3133              		.loc 1 989 0
 3134 0062 2C4B     		ldr	r3, .L160+4
 3135 0064 0122     		movs	r2, #1
 3136 0066 1A60     		str	r2, [r3]
 990:main.c        ****        // else
 991:main.c        ****         {
 992:main.c        **** 
 993:main.c        ****             AMux_1_FastSelect(scanPart);
 3137              		.loc 1 993 0
 3138 0068 2A4B     		ldr	r3, .L160+4
 3139 006a 1B68     		ldr	r3, [r3]
 3140 006c DBB2     		uxtb	r3, r3
 3141 006e 1846     		mov	r0, r3
 3142 0070 FFF7FEFF 		bl	AMux_1_FastSelect
 994:main.c        ****             CyDelayUs(4); 
 3143              		.loc 1 994 0
 3144 0074 0420     		movs	r0, #4
 3145 0076 FFF7FEFF 		bl	CyDelayUs
 995:main.c        ****             ADC_1_StartConvert();
 3146              		.loc 1 995 0
 3147 007a FFF7FEFF 		bl	ADC_1_StartConvert
 996:main.c        ****             ADC_1_IsEndConversion(ADC_1_WAIT_FOR_RESULT);
 3148              		.loc 1 996 0
 3149 007e 0020     		movs	r0, #0
 3150 0080 FFF7FEFF 		bl	ADC_1_IsEndConversion
 997:main.c        ****             iVref = ADC_1_GetResult32();
 3151              		.loc 1 997 0
 3152 0084 FFF7FEFF 		bl	ADC_1_GetResult32
 3153 0088 B860     		str	r0, [r7, #8]
 998:main.c        **** 
 999:main.c        ****             iVref =   iVref - offset;
 3154              		.loc 1 999 0
 3155 008a BA68     		ldr	r2, [r7, #8]
 3156 008c 7B68     		ldr	r3, [r7, #4]
 3157 008e D31A     		subs	r3, r2, r3
 3158 0090 BB60     		str	r3, [r7, #8]
1000:main.c        ****             
1001:main.c        ****             if ((iVref > 1000) && (iVtherm < 1000))
 3159              		.loc 1 1001 0
 3160 0092 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 75


 3161 0094 B3F57A7F 		cmp	r3, #1000
 3162 0098 08DD     		ble	.L158
 3163              		.loc 1 1001 0 is_stmt 0 discriminator 1
 3164 009a 1F4B     		ldr	r3, .L160+8
 3165 009c 1B68     		ldr	r3, [r3]
 3166 009e B3F57A7F 		cmp	r3, #1000
 3167 00a2 03DA     		bge	.L158
1002:main.c        ****             {
1003:main.c        ****                 iRes = 65535;
 3168              		.loc 1 1003 0 is_stmt 1
 3169 00a4 4FF6FF73 		movw	r3, #65535
 3170 00a8 FB60     		str	r3, [r7, #12]
 3171 00aa 18E0     		b	.L159
 3172              	.L158:
1004:main.c        ****             }
1005:main.c        ****             else
1006:main.c        ****             {
1007:main.c        ****                 iRes = (int32)(((float)iVref / (float)iVtherm) * 30000.0f);
 3173              		.loc 1 1007 0
 3174 00ac B868     		ldr	r0, [r7, #8]
 3175 00ae FFF7FEFF 		bl	__aeabi_i2f
 3176 00b2 0446     		mov	r4, r0
 3177 00b4 184B     		ldr	r3, .L160+8
 3178 00b6 1B68     		ldr	r3, [r3]
 3179 00b8 1846     		mov	r0, r3
 3180 00ba FFF7FEFF 		bl	__aeabi_i2f
 3181 00be 0346     		mov	r3, r0
 3182 00c0 1946     		mov	r1, r3
 3183 00c2 2046     		mov	r0, r4
 3184 00c4 FFF7FEFF 		bl	__aeabi_fdiv
 3185 00c8 0346     		mov	r3, r0
 3186 00ca 1449     		ldr	r1, .L160+12
 3187 00cc 1846     		mov	r0, r3
 3188 00ce FFF7FEFF 		bl	__aeabi_fmul
 3189 00d2 0346     		mov	r3, r0
 3190 00d4 1846     		mov	r0, r3
 3191 00d6 FFF7FEFF 		bl	__aeabi_f2iz
 3192 00da 0346     		mov	r3, r0
 3193 00dc FB60     		str	r3, [r7, #12]
 3194              	.L159:
1008:main.c        ****             }
1009:main.c        ****             linearPotValue32Bit[whichLinearSensor] = iRes;
 3195              		.loc 1 1009 0
 3196 00de 0C4B     		ldr	r3, .L160
 3197 00e0 1B68     		ldr	r3, [r3]
 3198 00e2 0F49     		ldr	r1, .L160+16
 3199 00e4 FA68     		ldr	r2, [r7, #12]
 3200 00e6 41F82320 		str	r2, [r1, r3, lsl #2]
1010:main.c        ****             whichLinearSensor = (whichLinearSensor + 1) & 3;
 3201              		.loc 1 1010 0
 3202 00ea 094B     		ldr	r3, .L160
 3203 00ec 1B68     		ldr	r3, [r3]
 3204 00ee 0133     		adds	r3, r3, #1
 3205 00f0 03F00303 		and	r3, r3, #3
 3206 00f4 064A     		ldr	r2, .L160
 3207 00f6 1360     		str	r3, [r2]
1011:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 76


1012:main.c        ****         scanPart = (scanPart + 1) & 1;
 3208              		.loc 1 1012 0
 3209 00f8 064B     		ldr	r3, .L160+4
 3210 00fa 1B68     		ldr	r3, [r3]
 3211 00fc 0133     		adds	r3, r3, #1
 3212 00fe 03F00103 		and	r3, r3, #1
 3213 0102 044A     		ldr	r2, .L160+4
 3214 0104 1360     		str	r3, [r2]
1013:main.c        ****         //scanPart = 0;
1014:main.c        **** 
1015:main.c        **** }
 3215              		.loc 1 1015 0
 3216 0106 00BF     		nop
 3217 0108 1437     		adds	r7, r7, #20
 3218              		.cfi_def_cfa_offset 12
 3219 010a BD46     		mov	sp, r7
 3220              		.cfi_def_cfa_register 13
 3221              		@ sp needed
 3222 010c 90BD     		pop	{r4, r7, pc}
 3223              	.L161:
 3224 010e 00BF     		.align	2
 3225              	.L160:
 3226 0110 00000000 		.word	whichLinearSensor
 3227 0114 00000000 		.word	scanPart
 3228 0118 00000000 		.word	iVtherm
 3229 011c 0060EA46 		.word	1189765120
 3230 0120 00000000 		.word	linearPotValue32Bit
 3231              		.cfi_endproc
 3232              	.LFE80:
 3233              		.size	scanLinearResistor, .-scanLinearResistor
 3234              		.section	.text.DmaTxConfiguration,"ax",%progbits
 3235              		.align	2
 3236              		.global	DmaTxConfiguration
 3237              		.thumb
 3238              		.thumb_func
 3239              		.type	DmaTxConfiguration, %function
 3240              	DmaTxConfiguration:
 3241              	.LFB81:
1016:main.c        **** 
1017:main.c        **** void DmaTxConfiguration()
1018:main.c        **** {
 3242              		.loc 1 1018 0
 3243              		.cfi_startproc
 3244              		@ args = 0, pretend = 0, frame = 0
 3245              		@ frame_needed = 1, uses_anonymous_args = 0
 3246 0000 80B5     		push	{r7, lr}
 3247              		.cfi_def_cfa_offset 8
 3248              		.cfi_offset 7, -8
 3249              		.cfi_offset 14, -4
 3250 0002 00AF     		add	r7, sp, #0
 3251              		.cfi_def_cfa_register 7
1019:main.c        ****     /* Init DMA, 1 byte bursts, each burst requires a request */ 
1020:main.c        ****     txChannel = DMA_1_TX_DmaInitialize(DMA_TX_BYTES_PER_BURST, DMA_TX_REQUEST_PER_BURST, 
 3252              		.loc 1 1020 0
 3253 0004 4FF48043 		mov	r3, #16384
 3254 0008 41F6FF72 		movw	r2, #8191
 3255 000c 0121     		movs	r1, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 77


 3256 000e 0120     		movs	r0, #1
 3257 0010 FFF7FEFF 		bl	DMA_1_TX_DmaInitialize
 3258 0014 0346     		mov	r3, r0
 3259 0016 1A46     		mov	r2, r3
 3260 0018 294B     		ldr	r3, .L163
 3261 001a 1A70     		strb	r2, [r3]
1021:main.c        ****                                         HI16(DMA_TX_SRC_BASE), HI16(DMA_TX_DST_BASE));
1022:main.c        **** 
1023:main.c        ****     txTD = CyDmaTdAllocate();
 3262              		.loc 1 1023 0
 3263 001c FFF7FEFF 		bl	CyDmaTdAllocate
 3264 0020 0346     		mov	r3, r0
 3265 0022 1A46     		mov	r2, r3
 3266 0024 274B     		ldr	r3, .L163+4
 3267 0026 1A70     		strb	r2, [r3]
1024:main.c        **** 
1025:main.c        ****     /* Configure this Td as follows:
1026:main.c        ****     *  - Increment the source address, but not the destination address   
1027:main.c        ****     */
1028:main.c        ****     CyDmaTdSetConfiguration(txTD, BUFFER_SIZE, CY_DMA_DISABLE_TD, TD_INC_SRC_ADR);
 3268              		.loc 1 1028 0
 3269 0028 264B     		ldr	r3, .L163+4
 3270 002a 1B78     		ldrb	r3, [r3]
 3271 002c D8B2     		uxtb	r0, r3
 3272 002e 0123     		movs	r3, #1
 3273 0030 FE22     		movs	r2, #254
 3274 0032 1021     		movs	r1, #16
 3275 0034 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1029:main.c        **** 
1030:main.c        ****     /* From the memory to the SPIM */
1031:main.c        ****     CyDmaTdSetAddress(txTD, LO16((uint32)txBuffer), LO16((uint32) SPIM_1_TXDATA_PTR));
 3276              		.loc 1 1031 0
 3277 0038 224B     		ldr	r3, .L163+4
 3278 003a 1B78     		ldrb	r3, [r3]
 3279 003c DBB2     		uxtb	r3, r3
 3280 003e 224A     		ldr	r2, .L163+8
 3281 0040 91B2     		uxth	r1, r2
 3282 0042 46F24442 		movw	r2, #25668
 3283 0046 1846     		mov	r0, r3
 3284 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
1032:main.c        ****     
1033:main.c        ****     /* Associate the TD with the channel */
1034:main.c        ****     CyDmaChSetInitialTd(txChannel, txTD); 
 3285              		.loc 1 1034 0
 3286 004c 1C4B     		ldr	r3, .L163
 3287 004e 1B78     		ldrb	r3, [r3]
 3288 0050 DAB2     		uxtb	r2, r3
 3289 0052 1C4B     		ldr	r3, .L163+4
 3290 0054 1B78     		ldrb	r3, [r3]
 3291 0056 DBB2     		uxtb	r3, r3
 3292 0058 1946     		mov	r1, r3
 3293 005a 1046     		mov	r0, r2
 3294 005c FFF7FEFF 		bl	CyDmaChSetInitialTd
1035:main.c        ****     
1036:main.c        ****     ////
1037:main.c        ****     
1038:main.c        ****         /* Init DMA, 1 byte bursts, each burst requires a request */ 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 78


1039:main.c        ****     tx2Channel = DMA_2_TX_DmaInitialize(DMA_TX_BYTES_PER_BURST, DMA_TX_REQUEST_PER_BURST, 
 3295              		.loc 1 1039 0
 3296 0060 4FF48043 		mov	r3, #16384
 3297 0064 41F6FF72 		movw	r2, #8191
 3298 0068 0121     		movs	r1, #1
 3299 006a 0120     		movs	r0, #1
 3300 006c FFF7FEFF 		bl	DMA_2_TX_DmaInitialize
 3301 0070 0346     		mov	r3, r0
 3302 0072 1A46     		mov	r2, r3
 3303 0074 154B     		ldr	r3, .L163+12
 3304 0076 1A70     		strb	r2, [r3]
1040:main.c        ****                                         HI16(DMA_TX_SRC_BASE), HI16(DMA_TX_DST_BASE));
1041:main.c        **** 
1042:main.c        ****     tx2TD = CyDmaTdAllocate();
 3305              		.loc 1 1042 0
 3306 0078 FFF7FEFF 		bl	CyDmaTdAllocate
 3307 007c 0346     		mov	r3, r0
 3308 007e 1A46     		mov	r2, r3
 3309 0080 134B     		ldr	r3, .L163+16
 3310 0082 1A70     		strb	r2, [r3]
1043:main.c        **** 
1044:main.c        ****     /* Configure this Td as follows:
1045:main.c        ****     *  - Increment the source address, but not the destination address   
1046:main.c        ****     */
1047:main.c        ****     CyDmaTdSetConfiguration(tx2TD, BUFFER_2_SIZE, CY_DMA_DISABLE_TD, TD_INC_SRC_ADR);
 3311              		.loc 1 1047 0
 3312 0084 124B     		ldr	r3, .L163+16
 3313 0086 1B78     		ldrb	r3, [r3]
 3314 0088 D8B2     		uxtb	r0, r3
 3315 008a 0123     		movs	r3, #1
 3316 008c FE22     		movs	r2, #254
 3317 008e 1021     		movs	r1, #16
 3318 0090 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1048:main.c        **** 
1049:main.c        ****     /* From the memory to the SPIM */
1050:main.c        ****     CyDmaTdSetAddress(tx2TD, LO16((uint32)tx2Buffer), LO16((uint32) SPIM_2_TXDATA_PTR));
 3319              		.loc 1 1050 0
 3320 0094 0E4B     		ldr	r3, .L163+16
 3321 0096 1B78     		ldrb	r3, [r3]
 3322 0098 DBB2     		uxtb	r3, r3
 3323 009a 0E4A     		ldr	r2, .L163+20
 3324 009c 91B2     		uxth	r1, r2
 3325 009e 46F24B42 		movw	r2, #25675
 3326 00a2 1846     		mov	r0, r3
 3327 00a4 FFF7FEFF 		bl	CyDmaTdSetAddress
1051:main.c        ****     
1052:main.c        ****     /* Associate the TD with the channel */
1053:main.c        ****     CyDmaChSetInitialTd(tx2Channel, tx2TD); 
 3328              		.loc 1 1053 0
 3329 00a8 084B     		ldr	r3, .L163+12
 3330 00aa 1B78     		ldrb	r3, [r3]
 3331 00ac DAB2     		uxtb	r2, r3
 3332 00ae 084B     		ldr	r3, .L163+16
 3333 00b0 1B78     		ldrb	r3, [r3]
 3334 00b2 DBB2     		uxtb	r3, r3
 3335 00b4 1946     		mov	r1, r3
 3336 00b6 1046     		mov	r0, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 79


 3337 00b8 FFF7FEFF 		bl	CyDmaChSetInitialTd
1054:main.c        **** }    
 3338              		.loc 1 1054 0
 3339 00bc 00BF     		nop
 3340 00be 80BD     		pop	{r7, pc}
 3341              	.L164:
 3342              		.align	2
 3343              	.L163:
 3344 00c0 00000000 		.word	txChannel
 3345 00c4 00000000 		.word	txTD
 3346 00c8 00000000 		.word	txBuffer
 3347 00cc 00000000 		.word	tx2Channel
 3348 00d0 00000000 		.word	tx2TD
 3349 00d4 00000000 		.word	tx2Buffer
 3350              		.cfi_endproc
 3351              	.LFE81:
 3352              		.size	DmaTxConfiguration, .-DmaTxConfiguration
 3353              		.section	.text.DmaRxConfiguration,"ax",%progbits
 3354              		.align	2
 3355              		.global	DmaRxConfiguration
 3356              		.thumb
 3357              		.thumb_func
 3358              		.type	DmaRxConfiguration, %function
 3359              	DmaRxConfiguration:
 3360              	.LFB82:
1055:main.c        **** 
1056:main.c        **** void DmaRxConfiguration()
1057:main.c        **** { 
 3361              		.loc 1 1057 0
 3362              		.cfi_startproc
 3363              		@ args = 0, pretend = 0, frame = 0
 3364              		@ frame_needed = 1, uses_anonymous_args = 0
 3365 0000 80B5     		push	{r7, lr}
 3366              		.cfi_def_cfa_offset 8
 3367              		.cfi_offset 7, -8
 3368              		.cfi_offset 14, -4
 3369 0002 00AF     		add	r7, sp, #0
 3370              		.cfi_def_cfa_register 7
1058:main.c        ****     /* Init DMA, 1 byte bursts, each burst requires a request */ 
1059:main.c        ****     rxChannel = DMA_1_RX_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 3371              		.loc 1 1059 0
 3372 0004 41F6FF73 		movw	r3, #8191
 3373 0008 4FF48042 		mov	r2, #16384
 3374 000c 0121     		movs	r1, #1
 3375 000e 0120     		movs	r0, #1
 3376 0010 FFF7FEFF 		bl	DMA_1_RX_DmaInitialize
 3377 0014 0346     		mov	r3, r0
 3378 0016 1A46     		mov	r2, r3
 3379 0018 294B     		ldr	r3, .L166
 3380 001a 1A70     		strb	r2, [r3]
1060:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1061:main.c        **** 
1062:main.c        ****     rxTD = CyDmaTdAllocate();
 3381              		.loc 1 1062 0
 3382 001c FFF7FEFF 		bl	CyDmaTdAllocate
 3383 0020 0346     		mov	r3, r0
 3384 0022 1A46     		mov	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 80


 3385 0024 274B     		ldr	r3, .L166+4
 3386 0026 1A70     		strb	r2, [r3]
1063:main.c        ****     
1064:main.c        ****     /* Configure this Td as follows:
1065:main.c        ****     *  - Increment the destination address, but not the source address
1066:main.c        ****     */
1067:main.c        ****     CyDmaTdSetConfiguration(rxTD, BUFFER_SIZE, CY_DMA_DISABLE_TD, TD_INC_DST_ADR);
 3387              		.loc 1 1067 0
 3388 0028 264B     		ldr	r3, .L166+4
 3389 002a 1B78     		ldrb	r3, [r3]
 3390 002c D8B2     		uxtb	r0, r3
 3391 002e 0223     		movs	r3, #2
 3392 0030 FE22     		movs	r2, #254
 3393 0032 1021     		movs	r1, #16
 3394 0034 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1068:main.c        **** 
1069:main.c        ****     /* From the SPIM to the memory */
1070:main.c        ****     CyDmaTdSetAddress(rxTD, LO16((uint32)SPIM_1_RXDATA_PTR), LO16((uint32)rxBuffer));
 3395              		.loc 1 1070 0
 3396 0038 224B     		ldr	r3, .L166+4
 3397 003a 1B78     		ldrb	r3, [r3]
 3398 003c DBB2     		uxtb	r3, r3
 3399 003e 224A     		ldr	r2, .L166+8
 3400 0040 92B2     		uxth	r2, r2
 3401 0042 46F25441 		movw	r1, #25684
 3402 0046 1846     		mov	r0, r3
 3403 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
1071:main.c        **** 
1072:main.c        ****     /* Associate the TD with the channel */
1073:main.c        ****     CyDmaChSetInitialTd(rxChannel, rxTD);
 3404              		.loc 1 1073 0
 3405 004c 1C4B     		ldr	r3, .L166
 3406 004e 1B78     		ldrb	r3, [r3]
 3407 0050 DAB2     		uxtb	r2, r3
 3408 0052 1C4B     		ldr	r3, .L166+4
 3409 0054 1B78     		ldrb	r3, [r3]
 3410 0056 DBB2     		uxtb	r3, r3
 3411 0058 1946     		mov	r1, r3
 3412 005a 1046     		mov	r0, r2
 3413 005c FFF7FEFF 		bl	CyDmaChSetInitialTd
1074:main.c        ****     
1075:main.c        ****     
1076:main.c        ****     
1077:main.c        ****     ///
1078:main.c        ****     
1079:main.c        ****         /* Init DMA, 1 byte bursts, each burst requires a request */ 
1080:main.c        ****     rx2Channel = DMA_2_RX_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 3414              		.loc 1 1080 0
 3415 0060 41F6FF73 		movw	r3, #8191
 3416 0064 4FF48042 		mov	r2, #16384
 3417 0068 0121     		movs	r1, #1
 3418 006a 0120     		movs	r0, #1
 3419 006c FFF7FEFF 		bl	DMA_2_RX_DmaInitialize
 3420 0070 0346     		mov	r3, r0
 3421 0072 1A46     		mov	r2, r3
 3422 0074 154B     		ldr	r3, .L166+12
 3423 0076 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 81


1081:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1082:main.c        **** 
1083:main.c        ****     rx2TD = CyDmaTdAllocate();
 3424              		.loc 1 1083 0
 3425 0078 FFF7FEFF 		bl	CyDmaTdAllocate
 3426 007c 0346     		mov	r3, r0
 3427 007e 1A46     		mov	r2, r3
 3428 0080 134B     		ldr	r3, .L166+16
 3429 0082 1A70     		strb	r2, [r3]
1084:main.c        ****     
1085:main.c        ****     /* Configure this Td as follows:
1086:main.c        ****     *  - Increment the destination address, but not the source address
1087:main.c        ****     */
1088:main.c        ****     CyDmaTdSetConfiguration(rx2TD, BUFFER_2_SIZE, CY_DMA_DISABLE_TD, TD_INC_DST_ADR);
 3430              		.loc 1 1088 0
 3431 0084 124B     		ldr	r3, .L166+16
 3432 0086 1B78     		ldrb	r3, [r3]
 3433 0088 D8B2     		uxtb	r0, r3
 3434 008a 0223     		movs	r3, #2
 3435 008c FE22     		movs	r2, #254
 3436 008e 1021     		movs	r1, #16
 3437 0090 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1089:main.c        **** 
1090:main.c        ****     /* From the SPIM to the memory */
1091:main.c        ****     CyDmaTdSetAddress(rx2TD, LO16((uint32)SPIM_2_RXDATA_PTR), LO16((uint32)rx2Buffer));
 3438              		.loc 1 1091 0
 3439 0094 0E4B     		ldr	r3, .L166+16
 3440 0096 1B78     		ldrb	r3, [r3]
 3441 0098 DBB2     		uxtb	r3, r3
 3442 009a 0E4A     		ldr	r2, .L166+20
 3443 009c 92B2     		uxth	r2, r2
 3444 009e 46F25B41 		movw	r1, #25691
 3445 00a2 1846     		mov	r0, r3
 3446 00a4 FFF7FEFF 		bl	CyDmaTdSetAddress
1092:main.c        **** 
1093:main.c        ****     /* Associate the TD with the channel */
1094:main.c        ****     CyDmaChSetInitialTd(rx2Channel, rx2TD);
 3447              		.loc 1 1094 0
 3448 00a8 084B     		ldr	r3, .L166+12
 3449 00aa 1B78     		ldrb	r3, [r3]
 3450 00ac DAB2     		uxtb	r2, r3
 3451 00ae 084B     		ldr	r3, .L166+16
 3452 00b0 1B78     		ldrb	r3, [r3]
 3453 00b2 DBB2     		uxtb	r3, r3
 3454 00b4 1946     		mov	r1, r3
 3455 00b6 1046     		mov	r0, r2
 3456 00b8 FFF7FEFF 		bl	CyDmaChSetInitialTd
1095:main.c        **** }
 3457              		.loc 1 1095 0
 3458 00bc 00BF     		nop
 3459 00be 80BD     		pop	{r7, pc}
 3460              	.L167:
 3461              		.align	2
 3462              	.L166:
 3463 00c0 00000000 		.word	rxChannel
 3464 00c4 00000000 		.word	rxTD
 3465 00c8 00000000 		.word	rxBuffer
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 82


 3466 00cc 00000000 		.word	rx2Channel
 3467 00d0 00000000 		.word	rx2TD
 3468 00d4 00000000 		.word	rx2Buffer
 3469              		.cfi_endproc
 3470              	.LFE82:
 3471              		.size	DmaRxConfiguration, .-DmaRxConfiguration
 3472              		.section	.text.I2C_MasterWriteBlocking,"ax",%progbits
 3473              		.align	2
 3474              		.global	I2C_MasterWriteBlocking
 3475              		.thumb
 3476              		.thumb_func
 3477              		.type	I2C_MasterWriteBlocking, %function
 3478              	I2C_MasterWriteBlocking:
 3479              	.LFB83:
1096:main.c        **** 
1097:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode)
1098:main.c        **** {
 3480              		.loc 1 1098 0
 3481              		.cfi_startproc
 3482              		@ args = 0, pretend = 0, frame = 16
 3483              		@ frame_needed = 1, uses_anonymous_args = 0
 3484 0000 80B5     		push	{r7, lr}
 3485              		.cfi_def_cfa_offset 8
 3486              		.cfi_offset 7, -8
 3487              		.cfi_offset 14, -4
 3488 0002 84B0     		sub	sp, sp, #16
 3489              		.cfi_def_cfa_offset 24
 3490 0004 00AF     		add	r7, sp, #0
 3491              		.cfi_def_cfa_register 7
 3492 0006 0346     		mov	r3, r0
 3493 0008 FB71     		strb	r3, [r7, #7]
 3494 000a 0B46     		mov	r3, r1	@ movhi
 3495 000c BB80     		strh	r3, [r7, #4]	@ movhi
 3496 000e 1346     		mov	r3, r2
 3497 0010 BB71     		strb	r3, [r7, #6]
1099:main.c        ****     uint8 volatile status;
1100:main.c        ****     uint32_t timeout = 50000;
 3498              		.loc 1 1100 0
 3499 0012 4CF25033 		movw	r3, #50000
 3500 0016 FB60     		str	r3, [r7, #12]
1101:main.c        ****     status = I2C_1_MasterClearStatus();
 3501              		.loc 1 1101 0
 3502 0018 FFF7FEFF 		bl	I2C_1_MasterClearStatus
 3503 001c 0346     		mov	r3, r0
 3504 001e FB72     		strb	r3, [r7, #11]
1102:main.c        ****     if(!(status & I2C_1_MSTAT_ERR_XFER))
 3505              		.loc 1 1102 0
 3506 0020 FB7A     		ldrb	r3, [r7, #11]
 3507 0022 DBB2     		uxtb	r3, r3
 3508 0024 5BB2     		sxtb	r3, r3
 3509 0026 002B     		cmp	r3, #0
 3510 0028 29DB     		blt	.L169
1103:main.c        ****     {
1104:main.c        ****         status = I2C_1_MasterWriteBuf(i2CAddr, (uint8 *)&I2Cbuff1, nbytes,
 3511              		.loc 1 1104 0
 3512 002a BB88     		ldrh	r3, [r7, #4]	@ movhi
 3513 002c DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 83


 3514 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 3515 0030 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 3516 0032 1649     		ldr	r1, .L174
 3517 0034 FFF7FEFF 		bl	I2C_1_MasterWriteBuf
 3518 0038 0346     		mov	r3, r0
 3519 003a FB72     		strb	r3, [r7, #11]
1105:main.c        ****                                      mode);
1106:main.c        ****         if(status == I2C_1_MSTR_NO_ERROR)
 3520              		.loc 1 1106 0
 3521 003c FB7A     		ldrb	r3, [r7, #11]
 3522 003e DBB2     		uxtb	r3, r3
 3523 0040 002B     		cmp	r3, #0
 3524 0042 1AD1     		bne	.L170
 3525              	.L172:
1107:main.c        ****         {
1108:main.c        ****             /* wait for write complete and no error */
1109:main.c        ****             do
1110:main.c        ****             {
1111:main.c        ****                 status = I2C_1_MasterStatus();
 3526              		.loc 1 1111 0
 3527 0044 FFF7FEFF 		bl	I2C_1_MasterStatus
 3528 0048 0346     		mov	r3, r0
 3529 004a FB72     		strb	r3, [r7, #11]
1112:main.c        ****                 timeout--;
 3530              		.loc 1 1112 0
 3531 004c FB68     		ldr	r3, [r7, #12]
 3532 004e 013B     		subs	r3, r3, #1
 3533 0050 FB60     		str	r3, [r7, #12]
1113:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 3534              		.loc 1 1113 0
 3535 0052 FB7A     		ldrb	r3, [r7, #11]
1114:main.c        ****                 {
1115:main.c        ****                     //I2C_reset();
1116:main.c        ****                 }
1117:main.c        ****                 if (timeout == 0)
 3536              		.loc 1 1117 0
 3537 0054 FB68     		ldr	r3, [r7, #12]
 3538 0056 002B     		cmp	r3, #0
 3539 0058 01D1     		bne	.L171
1118:main.c        ****                 {
1119:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 3540              		.loc 1 1119 0
 3541 005a 8023     		movs	r3, #128
 3542 005c FB72     		strb	r3, [r7, #11]
 3543              	.L171:
1120:main.c        ****                     //I2C_reset();
1121:main.c        ****                 }
1122:main.c        ****                 /*
1123:main.c        ****                 if (status == 0)
1124:main.c        ****                 {
1125:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
1126:main.c        ****                     I2C_reset();
1127:main.c        ****                 }
1128:main.c        ****                 */
1129:main.c        ****             } while(((status & (I2C_1_MSTAT_WR_CMPLT | I2C_1_MSTAT_ERR_XFER)) == 0u) && (status != 
 3544              		.loc 1 1129 0
 3545 005e FB7A     		ldrb	r3, [r7, #11]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 84


 3546 0060 DBB2     		uxtb	r3, r3
 3547 0062 03F08203 		and	r3, r3, #130
 3548 0066 002B     		cmp	r3, #0
 3549 0068 09D1     		bne	.L169
 3550              		.loc 1 1129 0 is_stmt 0 discriminator 1
 3551 006a FB7A     		ldrb	r3, [r7, #11]
 3552 006c DBB2     		uxtb	r3, r3
 3553 006e 002B     		cmp	r3, #0
 3554 0070 05D0     		beq	.L169
 3555              		.loc 1 1129 0 discriminator 2
 3556 0072 FB68     		ldr	r3, [r7, #12]
 3557 0074 002B     		cmp	r3, #0
 3558 0076 E5D1     		bne	.L172
 3559 0078 01E0     		b	.L169
 3560              	.L170:
1130:main.c        ****         }
1131:main.c        ****         else
1132:main.c        ****         {
1133:main.c        ****             /* translate from I2CM_MasterWriteBuf() error output to
1134:main.c        ****             *  I2CM_MasterStatus() error output */
1135:main.c        ****             status = I2C_1_MSTAT_ERR_XFER;
 3561              		.loc 1 1135 0 is_stmt 1
 3562 007a 8023     		movs	r3, #128
 3563 007c FB72     		strb	r3, [r7, #11]
 3564              	.L169:
1136:main.c        ****             //I2C_reset();
1137:main.c        ****         } 
1138:main.c        ****     }  
1139:main.c        ****     return status;
 3565              		.loc 1 1139 0
 3566 007e FB7A     		ldrb	r3, [r7, #11]
 3567 0080 DBB2     		uxtb	r3, r3
1140:main.c        **** }
 3568              		.loc 1 1140 0
 3569 0082 1846     		mov	r0, r3
 3570 0084 1037     		adds	r7, r7, #16
 3571              		.cfi_def_cfa_offset 8
 3572 0086 BD46     		mov	sp, r7
 3573              		.cfi_def_cfa_register 13
 3574              		@ sp needed
 3575 0088 80BD     		pop	{r7, pc}
 3576              	.L175:
 3577 008a 00BF     		.align	2
 3578              	.L174:
 3579 008c 00000000 		.word	I2Cbuff1
 3580              		.cfi_endproc
 3581              	.LFE83:
 3582              		.size	I2C_MasterWriteBlocking, .-I2C_MasterWriteBlocking
 3583              		.section	.text.handleNotes,"ax",%progbits
 3584              		.align	2
 3585              		.global	handleNotes
 3586              		.thumb
 3587              		.thumb_func
 3588              		.type	handleNotes, %function
 3589              	handleNotes:
 3590              	.LFB84:
1141:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 85


1142:main.c        **** 
1143:main.c        **** void handleNotes(int note, int velocity, int string)
1144:main.c        **** {
 3591              		.loc 1 1144 0
 3592              		.cfi_startproc
 3593              		@ args = 0, pretend = 0, frame = 32
 3594              		@ frame_needed = 1, uses_anonymous_args = 0
 3595 0000 90B5     		push	{r4, r7, lr}
 3596              		.cfi_def_cfa_offset 12
 3597              		.cfi_offset 4, -12
 3598              		.cfi_offset 7, -8
 3599              		.cfi_offset 14, -4
 3600 0002 89B0     		sub	sp, sp, #36
 3601              		.cfi_def_cfa_offset 48
 3602 0004 00AF     		add	r7, sp, #0
 3603              		.cfi_def_cfa_register 7
 3604 0006 F860     		str	r0, [r7, #12]
 3605 0008 B960     		str	r1, [r7, #8]
 3606 000a 7A60     		str	r2, [r7, #4]
1145:main.c        ****     if (velocity > 0)
 3607              		.loc 1 1145 0
 3608 000c BB68     		ldr	r3, [r7, #8]
 3609 000e 002B     		cmp	r3, #0
 3610 0010 25DD     		ble	.L177
 3611              	.LBB8:
1146:main.c        ****     {
1147:main.c        ****         //velocity = (((sqrtf((float)velocity) * 0.00001525878903f) - .0239372430f) * 130.114584436
1148:main.c        ****         float tempVel = (float)velocity;
 3612              		.loc 1 1148 0
 3613 0012 B868     		ldr	r0, [r7, #8]
 3614 0014 FFF7FEFF 		bl	__aeabi_i2f
 3615 0018 0346     		mov	r3, r0
 3616 001a 3B61     		str	r3, [r7, #16]	@ float
1149:main.c        ****         tempVel = tempVel * 0.00001525878903f;
 3617              		.loc 1 1149 0
 3618 001c 4FF05E51 		mov	r1, #931135488
 3619 0020 3869     		ldr	r0, [r7, #16]	@ float
 3620 0022 FFF7FEFF 		bl	__aeabi_fmul
 3621 0026 0346     		mov	r3, r0
 3622 0028 3B61     		str	r3, [r7, #16]	@ float
1150:main.c        ****         tempVel = sqrtf(tempVel);
 3623              		.loc 1 1150 0
 3624 002a 3869     		ldr	r0, [r7, #16]	@ float
 3625 002c FFF7FEFF 		bl	sqrtf
 3626 0030 3861     		str	r0, [r7, #16]	@ float
1151:main.c        ****         tempVel = tempVel - 0.0239372430f;
 3627              		.loc 1 1151 0
 3628 0032 8049     		ldr	r1, .L192
 3629 0034 3869     		ldr	r0, [r7, #16]	@ float
 3630 0036 FFF7FEFF 		bl	__aeabi_fsub
 3631 003a 0346     		mov	r3, r0
 3632 003c 3B61     		str	r3, [r7, #16]	@ float
1152:main.c        ****         tempVel = tempVel * 130.114584436252734f;
 3633              		.loc 1 1152 0
 3634 003e 7E49     		ldr	r1, .L192+4
 3635 0040 3869     		ldr	r0, [r7, #16]	@ float
 3636 0042 FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 86


 3637 0046 0346     		mov	r3, r0
 3638 0048 3B61     		str	r3, [r7, #16]	@ float
1153:main.c        ****         velocity = (int)tempVel;
 3639              		.loc 1 1153 0
 3640 004a 3869     		ldr	r0, [r7, #16]	@ float
 3641 004c FFF7FEFF 		bl	__aeabi_f2iz
 3642 0050 0346     		mov	r3, r0
 3643 0052 BB60     		str	r3, [r7, #8]
1154:main.c        ****         if (velocity > 127)
 3644              		.loc 1 1154 0
 3645 0054 BB68     		ldr	r3, [r7, #8]
 3646 0056 7F2B     		cmp	r3, #127
 3647 0058 01DD     		ble	.L177
1155:main.c        ****         {
1156:main.c        ****             velocity = 127;
 3648              		.loc 1 1156 0
 3649 005a 7F23     		movs	r3, #127
 3650 005c BB60     		str	r3, [r7, #8]
 3651              	.L177:
 3652              	.LBE8:
1157:main.c        ****         }
1158:main.c        ****     }
1159:main.c        ****     if (polyMode)
 3653              		.loc 1 1159 0
 3654 005e 774B     		ldr	r3, .L192+8
 3655 0060 1B68     		ldr	r3, [r3]
 3656 0062 002B     		cmp	r3, #0
 3657 0064 07D0     		beq	.L178
1160:main.c        ****     {
1161:main.c        ****         sendMIDINoteOn(note, velocity, string+1);
 3658              		.loc 1 1161 0
 3659 0066 7B68     		ldr	r3, [r7, #4]
 3660 0068 0133     		adds	r3, r3, #1
 3661 006a 1A46     		mov	r2, r3
 3662 006c B968     		ldr	r1, [r7, #8]
 3663 006e F868     		ldr	r0, [r7, #12]
 3664 0070 FFF7FEFF 		bl	sendMIDINoteOn
1162:main.c        ****     }
1163:main.c        ****     else
1164:main.c        ****     {
1165:main.c        ****         int loudestSoundingNote = 0;
1166:main.c        ****         if (velocity > 0)
1167:main.c        ****         {
1168:main.c        ****             // find the loudest currently sounding note
1169:main.c        ****             for (int i = 0; i < 4; i++)
1170:main.c        ****             {
1171:main.c        ****                 if (stringStates[i][1] > loudestSoundingNote)
1172:main.c        ****                 {
1173:main.c        ****                     loudestSoundingNote = stringStates[i][1];
1174:main.c        ****                     loudestString = i;
1175:main.c        ****                 }
1176:main.c        ****             }
1177:main.c        ****             //make sure if there is a sounding note that this one is not much lower velocity
1178:main.c        ****             //(would maybe mean this is just sympathetic bridge resonance and shouldn't interrupt t
1179:main.c        ****             // maybe need more complexity in time since attack? // or maybe do active suppression i
1180:main.c        ****             if ((velocity >= (loudestSoundingNote - 25)) || (velocity > 35))
1181:main.c        ****             {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 87


1182:main.c        ****                 for (int i = 0; i < 4; i++)
1183:main.c        ****                 {
1184:main.c        ****                     if (stringStates[i][0] >= 0)
1185:main.c        ****                     {
1186:main.c        **** 
1187:main.c        ****                         sendMIDINoteOn(stringStates[i][0], 0, 0);
1188:main.c        ****                         stringStates[i][0] = -1;
1189:main.c        ****                         stringStates[i][1] = 0;
1190:main.c        ****                     }
1191:main.c        ****                     openStringCount[i] = 10;
1192:main.c        ****                 }
1193:main.c        ****                 timeSinceLastAttack = 0;
1194:main.c        ****                 stringStates[string][0] = note;
1195:main.c        ****                 stringStates[string][1] = velocity;
1196:main.c        ****                  pitchFreeze[string] = 0;
1197:main.c        ****                 sendMIDINoteOn(note, velocity, 0);
1198:main.c        ****                  LHMuteCounter[i] = 0;
1199:main.c        ****                  LHMute[i] = 0;
1200:main.c        ****             }
1201:main.c        ****             else
1202:main.c        ****             {
1203:main.c        ****                 skippedNotes[skipPointer][0] = note;
1204:main.c        ****                 skippedNotes[skipPointer][1] = velocity;
1205:main.c        ****                 skippedNotes[skipPointer][2] = loudestSoundingNote;
1206:main.c        ****                 skippedNotes[skipPointer][3] = loudestString;
1207:main.c        ****                 skippedNotes[skipPointer][4] = string;
1208:main.c        ****                 skipPointer = (skipPointer + 1) & 31;
1209:main.c        ****             }
1210:main.c        ****             #if 0
1211:main.c        ****             else if (timeSinceLastAttack > 500)
1212:main.c        ****             {
1213:main.c        ****                 for (int i = 0; i < 4; i++)
1214:main.c        ****                 {
1215:main.c        ****                     if (stringStates[i][0] >= 0)
1216:main.c        ****                     {
1217:main.c        **** 
1218:main.c        ****                         sendMIDINoteOn(stringStates[i][0], 0, 0);
1219:main.c        ****                         stringStates[i][0] = -1;
1220:main.c        ****                     }
1221:main.c        ****                     openStringCount[i] = 10;
1222:main.c        ****                 }
1223:main.c        ****                 timeSinceLastAttack = 0;
1224:main.c        ****                 stringStates[string][0] = note;
1225:main.c        ****                 stringStates[string][1] = velocity;
1226:main.c        ****                  pitchFreeze[string] = 0;
1227:main.c        ****                 sendMIDINoteOn(note, velocity, 0);
1228:main.c        ****             
1229:main.c        ****             }
1230:main.c        ****             #endif
1231:main.c        ****         }
1232:main.c        ****         else
1233:main.c        ****         {
1234:main.c        ****             if (stringStates[string][0] > 0)
1235:main.c        ****             {
1236:main.c        ****                 sendMIDINoteOn(stringStates[string][0], 0, 0);
1237:main.c        ****             }
1238:main.c        ****             stringStates[string][0] = -1;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 88


1239:main.c        ****             stringStates[string][1] = 0;
1240:main.c        ****             pitchFreeze[string] = 0;
1241:main.c        ****         }
1242:main.c        ****     }       
1243:main.c        **** }...
 3665              		.loc 1 1243 0
 3666 0074 DAE0     		b	.L191
 3667              	.L178:
 3668              	.LBB9:
1165:main.c        ****         int loudestSoundingNote = 0;
 3669              		.loc 1 1165 0
 3670 0076 0023     		movs	r3, #0
 3671 0078 FB61     		str	r3, [r7, #28]
1166:main.c        ****         if (velocity > 0)
 3672              		.loc 1 1166 0
 3673 007a BB68     		ldr	r3, [r7, #8]
 3674 007c 002B     		cmp	r3, #0
 3675 007e 40F3B580 		ble	.L180
 3676              	.LBB10:
1169:main.c        ****             for (int i = 0; i < 4; i++)
 3677              		.loc 1 1169 0
 3678 0082 0023     		movs	r3, #0
 3679 0084 BB61     		str	r3, [r7, #24]
 3680 0086 13E0     		b	.L181
 3681              	.L183:
1171:main.c        ****                 if (stringStates[i][1] > loudestSoundingNote)
 3682              		.loc 1 1171 0
 3683 0088 6D4A     		ldr	r2, .L192+12
 3684 008a BB69     		ldr	r3, [r7, #24]
 3685 008c DB00     		lsls	r3, r3, #3
 3686 008e 1344     		add	r3, r3, r2
 3687 0090 5A68     		ldr	r2, [r3, #4]
 3688 0092 FB69     		ldr	r3, [r7, #28]
 3689 0094 9A42     		cmp	r2, r3
 3690 0096 08DD     		ble	.L182
1173:main.c        ****                     loudestSoundingNote = stringStates[i][1];
 3691              		.loc 1 1173 0
 3692 0098 694A     		ldr	r2, .L192+12
 3693 009a BB69     		ldr	r3, [r7, #24]
 3694 009c DB00     		lsls	r3, r3, #3
 3695 009e 1344     		add	r3, r3, r2
 3696 00a0 5B68     		ldr	r3, [r3, #4]
 3697 00a2 FB61     		str	r3, [r7, #28]
1174:main.c        ****                     loudestString = i;
 3698              		.loc 1 1174 0
 3699 00a4 674A     		ldr	r2, .L192+16
 3700 00a6 BB69     		ldr	r3, [r7, #24]
 3701 00a8 1360     		str	r3, [r2]
 3702              	.L182:
1169:main.c        ****             for (int i = 0; i < 4; i++)
 3703              		.loc 1 1169 0 discriminator 2
 3704 00aa BB69     		ldr	r3, [r7, #24]
 3705 00ac 0133     		adds	r3, r3, #1
 3706 00ae BB61     		str	r3, [r7, #24]
 3707              	.L181:
1169:main.c        ****             for (int i = 0; i < 4; i++)
 3708              		.loc 1 1169 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 89


 3709 00b0 BB69     		ldr	r3, [r7, #24]
 3710 00b2 032B     		cmp	r3, #3
 3711 00b4 E8DD     		ble	.L183
 3712              	.LBE10:
1180:main.c        ****             if ((velocity >= (loudestSoundingNote - 25)) || (velocity > 35))
 3713              		.loc 1 1180 0 is_stmt 1
 3714 00b6 FB69     		ldr	r3, [r7, #28]
 3715 00b8 A3F11902 		sub	r2, r3, #25
 3716 00bc BB68     		ldr	r3, [r7, #8]
 3717 00be 9A42     		cmp	r2, r3
 3718 00c0 02DD     		ble	.L184
1180:main.c        ****             if ((velocity >= (loudestSoundingNote - 25)) || (velocity > 35))
 3719              		.loc 1 1180 0 is_stmt 0 discriminator 1
 3720 00c2 BB68     		ldr	r3, [r7, #8]
 3721 00c4 232B     		cmp	r3, #35
 3722 00c6 52DD     		ble	.L185
 3723              	.L184:
 3724              	.LBB11:
1182:main.c        ****                 for (int i = 0; i < 4; i++)
 3725              		.loc 1 1182 0 is_stmt 1
 3726 00c8 0023     		movs	r3, #0
 3727 00ca 7B61     		str	r3, [r7, #20]
 3728 00cc 22E0     		b	.L186
 3729              	.L188:
1184:main.c        ****                     if (stringStates[i][0] >= 0)
 3730              		.loc 1 1184 0
 3731 00ce 5C4A     		ldr	r2, .L192+12
 3732 00d0 7B69     		ldr	r3, [r7, #20]
 3733 00d2 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3734 00d6 002B     		cmp	r3, #0
 3735 00d8 14DB     		blt	.L187
1187:main.c        ****                         sendMIDINoteOn(stringStates[i][0], 0, 0);
 3736              		.loc 1 1187 0
 3737 00da 594A     		ldr	r2, .L192+12
 3738 00dc 7B69     		ldr	r3, [r7, #20]
 3739 00de 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3740 00e2 0022     		movs	r2, #0
 3741 00e4 0021     		movs	r1, #0
 3742 00e6 1846     		mov	r0, r3
 3743 00e8 FFF7FEFF 		bl	sendMIDINoteOn
1188:main.c        ****                         stringStates[i][0] = -1;
 3744              		.loc 1 1188 0
 3745 00ec 544A     		ldr	r2, .L192+12
 3746 00ee 7B69     		ldr	r3, [r7, #20]
 3747 00f0 4FF0FF31 		mov	r1, #-1
 3748 00f4 42F83310 		str	r1, [r2, r3, lsl #3]
1189:main.c        ****                         stringStates[i][1] = 0;
 3749              		.loc 1 1189 0
 3750 00f8 514A     		ldr	r2, .L192+12
 3751 00fa 7B69     		ldr	r3, [r7, #20]
 3752 00fc DB00     		lsls	r3, r3, #3
 3753 00fe 1344     		add	r3, r3, r2
 3754 0100 0022     		movs	r2, #0
 3755 0102 5A60     		str	r2, [r3, #4]
 3756              	.L187:
1191:main.c        ****                     openStringCount[i] = 10;
 3757              		.loc 1 1191 0 discriminator 2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 90


 3758 0104 504A     		ldr	r2, .L192+20
 3759 0106 7B69     		ldr	r3, [r7, #20]
 3760 0108 0A21     		movs	r1, #10
 3761 010a 42F82310 		str	r1, [r2, r3, lsl #2]
1182:main.c        ****                 for (int i = 0; i < 4; i++)
 3762              		.loc 1 1182 0 discriminator 2
 3763 010e 7B69     		ldr	r3, [r7, #20]
 3764 0110 0133     		adds	r3, r3, #1
 3765 0112 7B61     		str	r3, [r7, #20]
 3766              	.L186:
1182:main.c        ****                 for (int i = 0; i < 4; i++)
 3767              		.loc 1 1182 0 is_stmt 0 discriminator 1
 3768 0114 7B69     		ldr	r3, [r7, #20]
 3769 0116 032B     		cmp	r3, #3
 3770 0118 D9DD     		ble	.L188
 3771              	.LBE11:
1193:main.c        ****                 timeSinceLastAttack = 0;
 3772              		.loc 1 1193 0 is_stmt 1
 3773 011a 4C4A     		ldr	r2, .L192+24
 3774 011c 4FF00003 		mov	r3, #0
 3775 0120 4FF00004 		mov	r4, #0
 3776 0124 C2E90034 		strd	r3, [r2]
1194:main.c        ****                 stringStates[string][0] = note;
 3777              		.loc 1 1194 0
 3778 0128 4549     		ldr	r1, .L192+12
 3779 012a 7B68     		ldr	r3, [r7, #4]
 3780 012c FA68     		ldr	r2, [r7, #12]
 3781 012e 41F83320 		str	r2, [r1, r3, lsl #3]
1195:main.c        ****                 stringStates[string][1] = velocity;
 3782              		.loc 1 1195 0
 3783 0132 434A     		ldr	r2, .L192+12
 3784 0134 7B68     		ldr	r3, [r7, #4]
 3785 0136 DB00     		lsls	r3, r3, #3
 3786 0138 1344     		add	r3, r3, r2
 3787 013a BA68     		ldr	r2, [r7, #8]
 3788 013c 5A60     		str	r2, [r3, #4]
1196:main.c        ****                  pitchFreeze[string] = 0;
 3789              		.loc 1 1196 0
 3790 013e 444A     		ldr	r2, .L192+28
 3791 0140 7B68     		ldr	r3, [r7, #4]
 3792 0142 1344     		add	r3, r3, r2
 3793 0144 0022     		movs	r2, #0
 3794 0146 1A70     		strb	r2, [r3]
1197:main.c        ****                 sendMIDINoteOn(note, velocity, 0);
 3795              		.loc 1 1197 0
 3796 0148 0022     		movs	r2, #0
 3797 014a B968     		ldr	r1, [r7, #8]
 3798 014c F868     		ldr	r0, [r7, #12]
 3799 014e FFF7FEFF 		bl	sendMIDINoteOn
1198:main.c        ****                  LHMuteCounter[i] = 0;
 3800              		.loc 1 1198 0
 3801 0152 404B     		ldr	r3, .L192+32
 3802 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3803 0156 1946     		mov	r1, r3
 3804 0158 3F4B     		ldr	r3, .L192+36
 3805 015a 0022     		movs	r2, #0
 3806 015c 43F82120 		str	r2, [r3, r1, lsl #2]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 91


1199:main.c        ****                  LHMute[i] = 0;
 3807              		.loc 1 1199 0
 3808 0160 3C4B     		ldr	r3, .L192+32
 3809 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3810 0164 1A46     		mov	r2, r3
 3811 0166 3D4B     		ldr	r3, .L192+40
 3812 0168 0021     		movs	r1, #0
 3813 016a 9954     		strb	r1, [r3, r2]
 3814              	.LBE9:
 3815              		.loc 1 1243 0
 3816 016c 5EE0     		b	.L191
 3817              	.L185:
 3818              	.LBB12:
1203:main.c        ****                 skippedNotes[skipPointer][0] = note;
 3819              		.loc 1 1203 0
 3820 016e 3C4B     		ldr	r3, .L192+44
 3821 0170 1A68     		ldr	r2, [r3]
 3822 0172 3C49     		ldr	r1, .L192+48
 3823 0174 1346     		mov	r3, r2
 3824 0176 9B00     		lsls	r3, r3, #2
 3825 0178 1344     		add	r3, r3, r2
 3826 017a 9B00     		lsls	r3, r3, #2
 3827 017c 0B44     		add	r3, r3, r1
 3828 017e FA68     		ldr	r2, [r7, #12]
 3829 0180 1A60     		str	r2, [r3]
1204:main.c        ****                 skippedNotes[skipPointer][1] = velocity;
 3830              		.loc 1 1204 0
 3831 0182 374B     		ldr	r3, .L192+44
 3832 0184 1A68     		ldr	r2, [r3]
 3833 0186 3749     		ldr	r1, .L192+48
 3834 0188 1346     		mov	r3, r2
 3835 018a 9B00     		lsls	r3, r3, #2
 3836 018c 1344     		add	r3, r3, r2
 3837 018e 9B00     		lsls	r3, r3, #2
 3838 0190 0B44     		add	r3, r3, r1
 3839 0192 0433     		adds	r3, r3, #4
 3840 0194 BA68     		ldr	r2, [r7, #8]
 3841 0196 1A60     		str	r2, [r3]
1205:main.c        ****                 skippedNotes[skipPointer][2] = loudestSoundingNote;
 3842              		.loc 1 1205 0
 3843 0198 314B     		ldr	r3, .L192+44
 3844 019a 1A68     		ldr	r2, [r3]
 3845 019c 3149     		ldr	r1, .L192+48
 3846 019e 1346     		mov	r3, r2
 3847 01a0 9B00     		lsls	r3, r3, #2
 3848 01a2 1344     		add	r3, r3, r2
 3849 01a4 9B00     		lsls	r3, r3, #2
 3850 01a6 0B44     		add	r3, r3, r1
 3851 01a8 0833     		adds	r3, r3, #8
 3852 01aa FA69     		ldr	r2, [r7, #28]
 3853 01ac 1A60     		str	r2, [r3]
1206:main.c        ****                 skippedNotes[skipPointer][3] = loudestString;
 3854              		.loc 1 1206 0
 3855 01ae 2C4B     		ldr	r3, .L192+44
 3856 01b0 1A68     		ldr	r2, [r3]
 3857 01b2 244B     		ldr	r3, .L192+16
 3858 01b4 1968     		ldr	r1, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 92


 3859 01b6 2B48     		ldr	r0, .L192+48
 3860 01b8 1346     		mov	r3, r2
 3861 01ba 9B00     		lsls	r3, r3, #2
 3862 01bc 1344     		add	r3, r3, r2
 3863 01be 9B00     		lsls	r3, r3, #2
 3864 01c0 0344     		add	r3, r3, r0
 3865 01c2 0C33     		adds	r3, r3, #12
 3866 01c4 1960     		str	r1, [r3]
1207:main.c        ****                 skippedNotes[skipPointer][4] = string;
 3867              		.loc 1 1207 0
 3868 01c6 264B     		ldr	r3, .L192+44
 3869 01c8 1A68     		ldr	r2, [r3]
 3870 01ca 2649     		ldr	r1, .L192+48
 3871 01cc 1346     		mov	r3, r2
 3872 01ce 9B00     		lsls	r3, r3, #2
 3873 01d0 1344     		add	r3, r3, r2
 3874 01d2 9B00     		lsls	r3, r3, #2
 3875 01d4 0B44     		add	r3, r3, r1
 3876 01d6 1033     		adds	r3, r3, #16
 3877 01d8 7A68     		ldr	r2, [r7, #4]
 3878 01da 1A60     		str	r2, [r3]
1208:main.c        ****                 skipPointer = (skipPointer + 1) & 31;
 3879              		.loc 1 1208 0
 3880 01dc 204B     		ldr	r3, .L192+44
 3881 01de 1B68     		ldr	r3, [r3]
 3882 01e0 0133     		adds	r3, r3, #1
 3883 01e2 03F01F03 		and	r3, r3, #31
 3884 01e6 1E4A     		ldr	r2, .L192+44
 3885 01e8 1360     		str	r3, [r2]
 3886              	.LBE12:
 3887              		.loc 1 1243 0
 3888 01ea 1FE0     		b	.L191
 3889              	.L180:
 3890              	.LBB13:
1234:main.c        ****             if (stringStates[string][0] > 0)
 3891              		.loc 1 1234 0
 3892 01ec 144A     		ldr	r2, .L192+12
 3893 01ee 7B68     		ldr	r3, [r7, #4]
 3894 01f0 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3895 01f4 002B     		cmp	r3, #0
 3896 01f6 08DD     		ble	.L190
1236:main.c        ****                 sendMIDINoteOn(stringStates[string][0], 0, 0);
 3897              		.loc 1 1236 0
 3898 01f8 114A     		ldr	r2, .L192+12
 3899 01fa 7B68     		ldr	r3, [r7, #4]
 3900 01fc 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3901 0200 0022     		movs	r2, #0
 3902 0202 0021     		movs	r1, #0
 3903 0204 1846     		mov	r0, r3
 3904 0206 FFF7FEFF 		bl	sendMIDINoteOn
 3905              	.L190:
1238:main.c        ****             stringStates[string][0] = -1;
 3906              		.loc 1 1238 0
 3907 020a 0D4A     		ldr	r2, .L192+12
 3908 020c 7B68     		ldr	r3, [r7, #4]
 3909 020e 4FF0FF31 		mov	r1, #-1
 3910 0212 42F83310 		str	r1, [r2, r3, lsl #3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 93


1239:main.c        ****             stringStates[string][1] = 0;
 3911              		.loc 1 1239 0
 3912 0216 0A4A     		ldr	r2, .L192+12
 3913 0218 7B68     		ldr	r3, [r7, #4]
 3914 021a DB00     		lsls	r3, r3, #3
 3915 021c 1344     		add	r3, r3, r2
 3916 021e 0022     		movs	r2, #0
 3917 0220 5A60     		str	r2, [r3, #4]
1240:main.c        ****             pitchFreeze[string] = 0;
 3918              		.loc 1 1240 0
 3919 0222 0B4A     		ldr	r2, .L192+28
 3920 0224 7B68     		ldr	r3, [r7, #4]
 3921 0226 1344     		add	r3, r3, r2
 3922 0228 0022     		movs	r2, #0
 3923 022a 1A70     		strb	r2, [r3]
 3924              	.L191:
 3925              	.LBE13:
 3926              		.loc 1 1243 0
 3927 022c 00BF     		nop
 3928 022e 2437     		adds	r7, r7, #36
 3929              		.cfi_def_cfa_offset 12
 3930 0230 BD46     		mov	sp, r7
 3931              		.cfi_def_cfa_register 13
 3932              		@ sp needed
 3933 0232 90BD     		pop	{r4, r7, pc}
 3934              	.L193:
 3935              		.align	2
 3936              	.L192:
 3937 0234 0918C43C 		.word	1019484169
 3938 0238 551D0243 		.word	1124212053
 3939 023c 00000000 		.word	polyMode
 3940 0240 00000000 		.word	stringStates
 3941 0244 00000000 		.word	loudestString
 3942 0248 00000000 		.word	openStringCount
 3943 024c 00000000 		.word	timeSinceLastAttack
 3944 0250 00000000 		.word	pitchFreeze
 3945 0254 00000000 		.word	i
 3946 0258 00000000 		.word	LHMuteCounter
 3947 025c 00000000 		.word	LHMute
 3948 0260 00000000 		.word	skipPointer
 3949 0264 00000000 		.word	skippedNotes
 3950              		.cfi_endproc
 3951              	.LFE84:
 3952              		.size	handleNotes, .-handleNotes
 3953              		.text
 3954              	.Letext0:
 3955              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3956              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3957              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3958              		.file 5 "Generated_Source\\PSoC5/cy_em_eeprom.h"
 3959              		.file 6 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3960              		.file 7 "Generated_Source\\PSoC5/CapSense_CSHL.h"
 3961              		.file 8 "Generated_Source\\PSoC5/USB_midi.h"
 3962              		.file 9 "Generated_Source\\PSoC5/Em_EEPROM.h"
 3963              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 3964              		.section	.debug_info,"",%progbits
 3965              	.Ldebug_info0:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 94


 3966 0000 D90F0000 		.4byte	0xfd9
 3967 0004 0400     		.2byte	0x4
 3968 0006 00000000 		.4byte	.Ldebug_abbrev0
 3969 000a 04       		.byte	0x4
 3970 000b 01       		.uleb128 0x1
 3971 000c 3A010000 		.4byte	.LASF193
 3972 0010 0C       		.byte	0xc
 3973 0011 60000000 		.4byte	.LASF194
 3974 0015 A0000000 		.4byte	.LASF195
 3975 0019 20000000 		.4byte	.Ldebug_ranges0+0x20
 3976 001d 00000000 		.4byte	0
 3977 0021 00000000 		.4byte	.Ldebug_line0
 3978 0025 02       		.uleb128 0x2
 3979 0026 01       		.byte	0x1
 3980 0027 06       		.byte	0x6
 3981 0028 7E090000 		.4byte	.LASF0
 3982 002c 03       		.uleb128 0x3
 3983 002d C4070000 		.4byte	.LASF3
 3984 0031 02       		.byte	0x2
 3985 0032 1D       		.byte	0x1d
 3986 0033 37000000 		.4byte	0x37
 3987 0037 02       		.uleb128 0x2
 3988 0038 01       		.byte	0x1
 3989 0039 08       		.byte	0x8
 3990 003a DE080000 		.4byte	.LASF1
 3991 003e 02       		.uleb128 0x2
 3992 003f 02       		.byte	0x2
 3993 0040 05       		.byte	0x5
 3994 0041 1B070000 		.4byte	.LASF2
 3995 0045 03       		.uleb128 0x3
 3996 0046 76030000 		.4byte	.LASF4
 3997 004a 02       		.byte	0x2
 3998 004b 2B       		.byte	0x2b
 3999 004c 50000000 		.4byte	0x50
 4000 0050 02       		.uleb128 0x2
 4001 0051 02       		.byte	0x2
 4002 0052 07       		.byte	0x7
 4003 0053 8A090000 		.4byte	.LASF5
 4004 0057 03       		.uleb128 0x3
 4005 0058 0F010000 		.4byte	.LASF6
 4006 005c 02       		.byte	0x2
 4007 005d 3F       		.byte	0x3f
 4008 005e 62000000 		.4byte	0x62
 4009 0062 02       		.uleb128 0x2
 4010 0063 04       		.byte	0x4
 4011 0064 05       		.byte	0x5
 4012 0065 2B070000 		.4byte	.LASF7
 4013 0069 03       		.uleb128 0x3
 4014 006a EC080000 		.4byte	.LASF8
 4015 006e 02       		.byte	0x2
 4016 006f 41       		.byte	0x41
 4017 0070 74000000 		.4byte	0x74
 4018 0074 02       		.uleb128 0x2
 4019 0075 04       		.byte	0x4
 4020 0076 07       		.byte	0x7
 4021 0077 28080000 		.4byte	.LASF9
 4022 007b 03       		.uleb128 0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 95


 4023 007c 4F060000 		.4byte	.LASF10
 4024 0080 02       		.byte	0x2
 4025 0081 59       		.byte	0x59
 4026 0082 86000000 		.4byte	0x86
 4027 0086 02       		.uleb128 0x2
 4028 0087 08       		.byte	0x8
 4029 0088 05       		.byte	0x5
 4030 0089 66050000 		.4byte	.LASF11
 4031 008d 02       		.uleb128 0x2
 4032 008e 08       		.byte	0x8
 4033 008f 07       		.byte	0x7
 4034 0090 FF020000 		.4byte	.LASF12
 4035 0094 04       		.uleb128 0x4
 4036 0095 04       		.byte	0x4
 4037 0096 05       		.byte	0x5
 4038 0097 696E7400 		.ascii	"int\000"
 4039 009b 02       		.uleb128 0x2
 4040 009c 04       		.byte	0x4
 4041 009d 07       		.byte	0x7
 4042 009e 93000000 		.4byte	.LASF13
 4043 00a2 03       		.uleb128 0x3
 4044 00a3 08050000 		.4byte	.LASF14
 4045 00a7 03       		.byte	0x3
 4046 00a8 18       		.byte	0x18
 4047 00a9 2C000000 		.4byte	0x2c
 4048 00ad 03       		.uleb128 0x3
 4049 00ae 75060000 		.4byte	.LASF15
 4050 00b2 03       		.byte	0x3
 4051 00b3 24       		.byte	0x24
 4052 00b4 45000000 		.4byte	0x45
 4053 00b8 03       		.uleb128 0x3
 4054 00b9 73080000 		.4byte	.LASF16
 4055 00bd 03       		.byte	0x3
 4056 00be 2C       		.byte	0x2c
 4057 00bf 57000000 		.4byte	0x57
 4058 00c3 03       		.uleb128 0x3
 4059 00c4 7E020000 		.4byte	.LASF17
 4060 00c8 03       		.byte	0x3
 4061 00c9 30       		.byte	0x30
 4062 00ca 69000000 		.4byte	0x69
 4063 00ce 03       		.uleb128 0x3
 4064 00cf D4030000 		.4byte	.LASF18
 4065 00d3 03       		.byte	0x3
 4066 00d4 38       		.byte	0x38
 4067 00d5 7B000000 		.4byte	0x7b
 4068 00d9 05       		.uleb128 0x5
 4069 00da CC090000 		.4byte	.LASF19
 4070 00de 04       		.byte	0x4
 4071 00df E401     		.2byte	0x1e4
 4072 00e1 37000000 		.4byte	0x37
 4073 00e5 05       		.uleb128 0x5
 4074 00e6 E5040000 		.4byte	.LASF20
 4075 00ea 04       		.byte	0x4
 4076 00eb E501     		.2byte	0x1e5
 4077 00ed 50000000 		.4byte	0x50
 4078 00f1 05       		.uleb128 0x5
 4079 00f2 F7050000 		.4byte	.LASF21
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 96


 4080 00f6 04       		.byte	0x4
 4081 00f7 E601     		.2byte	0x1e6
 4082 00f9 74000000 		.4byte	0x74
 4083 00fd 05       		.uleb128 0x5
 4084 00fe A9020000 		.4byte	.LASF22
 4085 0102 04       		.byte	0x4
 4086 0103 E901     		.2byte	0x1e9
 4087 0105 62000000 		.4byte	0x62
 4088 0109 02       		.uleb128 0x2
 4089 010a 04       		.byte	0x4
 4090 010b 04       		.byte	0x4
 4091 010c A3020000 		.4byte	.LASF23
 4092 0110 02       		.uleb128 0x2
 4093 0111 08       		.byte	0x8
 4094 0112 04       		.byte	0x4
 4095 0113 D2090000 		.4byte	.LASF24
 4096 0117 02       		.uleb128 0x2
 4097 0118 01       		.byte	0x1
 4098 0119 08       		.byte	0x8
 4099 011a B0040000 		.4byte	.LASF25
 4100 011e 05       		.uleb128 0x5
 4101 011f C4080000 		.4byte	.LASF26
 4102 0123 04       		.byte	0x4
 4103 0124 8602     		.2byte	0x286
 4104 0126 74000000 		.4byte	0x74
 4105 012a 05       		.uleb128 0x5
 4106 012b 19010000 		.4byte	.LASF27
 4107 012f 04       		.byte	0x4
 4108 0130 8E02     		.2byte	0x28e
 4109 0132 36010000 		.4byte	0x136
 4110 0136 06       		.uleb128 0x6
 4111 0137 D9000000 		.4byte	0xd9
 4112 013b 02       		.uleb128 0x2
 4113 013c 08       		.byte	0x8
 4114 013d 04       		.byte	0x4
 4115 013e 59060000 		.4byte	.LASF28
 4116 0142 02       		.uleb128 0x2
 4117 0143 04       		.byte	0x4
 4118 0144 07       		.byte	0x7
 4119 0145 0C080000 		.4byte	.LASF29
 4120 0149 07       		.uleb128 0x7
 4121 014a D9000000 		.4byte	0xd9
 4122 014e 59010000 		.4byte	0x159
 4123 0152 08       		.uleb128 0x8
 4124 0153 42010000 		.4byte	0x142
 4125 0157 03       		.byte	0x3
 4126 0158 00       		.byte	0
 4127 0159 09       		.uleb128 0x9
 4128 015a 1C       		.byte	0x1c
 4129 015b 05       		.byte	0x5
 4130 015c 1601     		.2byte	0x116
 4131 015e CB010000 		.4byte	0x1cb
 4132 0162 0A       		.uleb128 0xa
 4133 0163 29050000 		.4byte	.LASF30
 4134 0167 05       		.byte	0x5
 4135 0168 1B01     		.2byte	0x11b
 4136 016a F1000000 		.4byte	0xf1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 97


 4137 016e 00       		.byte	0
 4138 016f 0A       		.uleb128 0xa
 4139 0170 87020000 		.4byte	.LASF31
 4140 0174 05       		.byte	0x5
 4141 0175 2001     		.2byte	0x120
 4142 0177 F1000000 		.4byte	0xf1
 4143 017b 04       		.byte	0x4
 4144 017c 0A       		.uleb128 0xa
 4145 017d E3090000 		.4byte	.LASF32
 4146 0181 05       		.byte	0x5
 4147 0182 2301     		.2byte	0x123
 4148 0184 F1000000 		.4byte	0xf1
 4149 0188 08       		.byte	0x8
 4150 0189 0A       		.uleb128 0xa
 4151 018a DB020000 		.4byte	.LASF33
 4152 018e 05       		.byte	0x5
 4153 018f 2601     		.2byte	0x126
 4154 0191 F1000000 		.4byte	0xf1
 4155 0195 0C       		.byte	0xc
 4156 0196 0A       		.uleb128 0xa
 4157 0197 93080000 		.4byte	.LASF34
 4158 019b 05       		.byte	0x5
 4159 019c 2B01     		.2byte	0x12b
 4160 019e F1000000 		.4byte	0xf1
 4161 01a2 10       		.byte	0x10
 4162 01a3 0A       		.uleb128 0xa
 4163 01a4 0D090000 		.4byte	.LASF35
 4164 01a8 05       		.byte	0x5
 4165 01a9 2E01     		.2byte	0x12e
 4166 01ab D9000000 		.4byte	0xd9
 4167 01af 14       		.byte	0x14
 4168 01b0 0A       		.uleb128 0xa
 4169 01b1 BE030000 		.4byte	.LASF36
 4170 01b5 05       		.byte	0x5
 4171 01b6 3301     		.2byte	0x133
 4172 01b8 D9000000 		.4byte	0xd9
 4173 01bc 15       		.byte	0x15
 4174 01bd 0A       		.uleb128 0xa
 4175 01be 1E040000 		.4byte	.LASF37
 4176 01c2 05       		.byte	0x5
 4177 01c3 3601     		.2byte	0x136
 4178 01c5 F1000000 		.4byte	0xf1
 4179 01c9 18       		.byte	0x18
 4180 01ca 00       		.byte	0
 4181 01cb 05       		.uleb128 0x5
 4182 01cc 48000000 		.4byte	.LASF38
 4183 01d0 05       		.byte	0x5
 4184 01d1 3701     		.2byte	0x137
 4185 01d3 59010000 		.4byte	0x159
 4186 01d7 0B       		.uleb128 0xb
 4187 01d8 01       		.byte	0x1
 4188 01d9 37000000 		.4byte	0x37
 4189 01dd 05       		.byte	0x5
 4190 01de 5401     		.2byte	0x154
 4191 01e0 03020000 		.4byte	0x203
 4192 01e4 0C       		.uleb128 0xc
 4193 01e5 B5040000 		.4byte	.LASF39
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 98


 4194 01e9 00       		.byte	0
 4195 01ea 0C       		.uleb128 0xc
 4196 01eb 1D000000 		.4byte	.LASF40
 4197 01ef 01       		.byte	0x1
 4198 01f0 0C       		.uleb128 0xc
 4199 01f1 5C030000 		.4byte	.LASF41
 4200 01f5 02       		.byte	0x2
 4201 01f6 0C       		.uleb128 0xc
 4202 01f7 24010000 		.4byte	.LASF42
 4203 01fb 03       		.byte	0x3
 4204 01fc 0C       		.uleb128 0xc
 4205 01fd 42080000 		.4byte	.LASF43
 4206 0201 04       		.byte	0x4
 4207 0202 00       		.byte	0
 4208 0203 05       		.uleb128 0x5
 4209 0204 E6020000 		.4byte	.LASF44
 4210 0208 05       		.byte	0x5
 4211 0209 5A01     		.2byte	0x15a
 4212 020b D7010000 		.4byte	0x1d7
 4213 020f 06       		.uleb128 0x6
 4214 0210 A2000000 		.4byte	0xa2
 4215 0214 07       		.uleb128 0x7
 4216 0215 C3000000 		.4byte	0xc3
 4217 0219 24020000 		.4byte	0x224
 4218 021d 08       		.uleb128 0x8
 4219 021e 42010000 		.4byte	0x142
 4220 0222 04       		.byte	0x4
 4221 0223 00       		.byte	0
 4222 0224 03       		.uleb128 0x3
 4223 0225 C7090000 		.4byte	.LASF45
 4224 0229 06       		.byte	0x6
 4225 022a 6C       		.byte	0x6c
 4226 022b 9B000000 		.4byte	0x9b
 4227 022f 07       		.uleb128 0x7
 4228 0230 A2000000 		.4byte	0xa2
 4229 0234 3F020000 		.4byte	0x23f
 4230 0238 08       		.uleb128 0x8
 4231 0239 42010000 		.4byte	0x142
 4232 023d 03       		.byte	0x3
 4233 023e 00       		.byte	0
 4234 023f 0D       		.uleb128 0xd
 4235 0240 A6080000 		.4byte	.LASF59
 4236 0244 01       		.byte	0x1
 4237 0245 C9       		.byte	0xc9
 4238 0246 00000000 		.4byte	.LFB64
 4239 024a 0C000000 		.4byte	.LFE64-.LFB64
 4240 024e 01       		.uleb128 0x1
 4241 024f 9C       		.byte	0x9c
 4242 0250 0E       		.uleb128 0xe
 4243 0251 31040000 		.4byte	.LASF48
 4244 0255 01       		.byte	0x1
 4245 0256 D1       		.byte	0xd1
 4246 0257 09010000 		.4byte	0x109
 4247 025b 00000000 		.4byte	.LFB65
 4248 025f 58000000 		.4byte	.LFE65-.LFB65
 4249 0263 01       		.uleb128 0x1
 4250 0264 9C       		.byte	0x9c
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 99


 4251 0265 B0020000 		.4byte	0x2b0
 4252 0269 0F       		.uleb128 0xf
 4253 026a 6D696E00 		.ascii	"min\000"
 4254 026e 01       		.byte	0x1
 4255 026f D1       		.byte	0xd1
 4256 0270 09010000 		.4byte	0x109
 4257 0274 02       		.uleb128 0x2
 4258 0275 91       		.byte	0x91
 4259 0276 6C       		.sleb128 -20
 4260 0277 0F       		.uleb128 0xf
 4261 0278 76616C00 		.ascii	"val\000"
 4262 027c 01       		.byte	0x1
 4263 027d D1       		.byte	0xd1
 4264 027e 09010000 		.4byte	0x109
 4265 0282 02       		.uleb128 0x2
 4266 0283 91       		.byte	0x91
 4267 0284 68       		.sleb128 -24
 4268 0285 0F       		.uleb128 0xf
 4269 0286 6D617800 		.ascii	"max\000"
 4270 028a 01       		.byte	0x1
 4271 028b D1       		.byte	0xd1
 4272 028c 09010000 		.4byte	0x109
 4273 0290 02       		.uleb128 0x2
 4274 0291 91       		.byte	0x91
 4275 0292 64       		.sleb128 -28
 4276 0293 10       		.uleb128 0x10
 4277 0294 0E020000 		.4byte	.LASF46
 4278 0298 01       		.byte	0x1
 4279 0299 D3       		.byte	0xd3
 4280 029a 09010000 		.4byte	0x109
 4281 029e 02       		.uleb128 0x2
 4282 029f 91       		.byte	0x91
 4283 02a0 74       		.sleb128 -12
 4284 02a1 10       		.uleb128 0x10
 4285 02a2 A2060000 		.4byte	.LASF47
 4286 02a6 01       		.byte	0x1
 4287 02a7 D4       		.byte	0xd4
 4288 02a8 09010000 		.4byte	0x109
 4289 02ac 02       		.uleb128 0x2
 4290 02ad 91       		.byte	0x91
 4291 02ae 70       		.sleb128 -16
 4292 02af 00       		.byte	0
 4293 02b0 0E       		.uleb128 0xe
 4294 02b1 23090000 		.4byte	.LASF49
 4295 02b5 01       		.byte	0x1
 4296 02b6 E7       		.byte	0xe7
 4297 02b7 09010000 		.4byte	0x109
 4298 02bb 00000000 		.4byte	.LFB66
 4299 02bf 68000000 		.4byte	.LFE66-.LFB66
 4300 02c3 01       		.uleb128 0x1
 4301 02c4 9C       		.byte	0x9c
 4302 02c5 D6020000 		.4byte	0x2d6
 4303 02c9 0F       		.uleb128 0xf
 4304 02ca 6600     		.ascii	"f\000"
 4305 02cc 01       		.byte	0x1
 4306 02cd E7       		.byte	0xe7
 4307 02ce 09010000 		.4byte	0x109
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 100


 4308 02d2 02       		.uleb128 0x2
 4309 02d3 91       		.byte	0x91
 4310 02d4 74       		.sleb128 -12
 4311 02d5 00       		.byte	0
 4312 02d6 0E       		.uleb128 0xe
 4313 02d7 B7080000 		.4byte	.LASF50
 4314 02db 01       		.byte	0x1
 4315 02dc EE       		.byte	0xee
 4316 02dd 09010000 		.4byte	0x109
 4317 02e1 00000000 		.4byte	.LFB67
 4318 02e5 4C000000 		.4byte	.LFE67-.LFB67
 4319 02e9 01       		.uleb128 0x1
 4320 02ea 9C       		.byte	0x9c
 4321 02eb FC020000 		.4byte	0x2fc
 4322 02ef 0F       		.uleb128 0xf
 4323 02f0 6600     		.ascii	"f\000"
 4324 02f2 01       		.byte	0x1
 4325 02f3 EE       		.byte	0xee
 4326 02f4 09010000 		.4byte	0x109
 4327 02f8 02       		.uleb128 0x2
 4328 02f9 91       		.byte	0x91
 4329 02fa 74       		.sleb128 -12
 4330 02fb 00       		.byte	0
 4331 02fc 0E       		.uleb128 0xe
 4332 02fd 74050000 		.4byte	.LASF51
 4333 0301 01       		.byte	0x1
 4334 0302 F4       		.byte	0xf4
 4335 0303 09010000 		.4byte	0x109
 4336 0307 00000000 		.4byte	.LFB68
 4337 030b 46000000 		.4byte	.LFE68-.LFB68
 4338 030f 01       		.uleb128 0x1
 4339 0310 9C       		.byte	0x9c
 4340 0311 58030000 		.4byte	0x358
 4341 0315 0F       		.uleb128 0xf
 4342 0316 4100     		.ascii	"A\000"
 4343 0318 01       		.byte	0x1
 4344 0319 F4       		.byte	0xf4
 4345 031a 09010000 		.4byte	0x109
 4346 031e 02       		.uleb128 0x2
 4347 031f 91       		.byte	0x91
 4348 0320 6C       		.sleb128 -20
 4349 0321 0F       		.uleb128 0xf
 4350 0322 4200     		.ascii	"B\000"
 4351 0324 01       		.byte	0x1
 4352 0325 F4       		.byte	0xf4
 4353 0326 09010000 		.4byte	0x109
 4354 032a 02       		.uleb128 0x2
 4355 032b 91       		.byte	0x91
 4356 032c 68       		.sleb128 -24
 4357 032d 11       		.uleb128 0x11
 4358 032e 6D080000 		.4byte	.LASF52
 4359 0332 01       		.byte	0x1
 4360 0333 F4       		.byte	0xf4
 4361 0334 09010000 		.4byte	0x109
 4362 0338 02       		.uleb128 0x2
 4363 0339 91       		.byte	0x91
 4364 033a 64       		.sleb128 -28
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 101


 4365 033b 10       		.uleb128 0x10
 4366 033c 66040000 		.4byte	.LASF53
 4367 0340 01       		.byte	0x1
 4368 0341 F6       		.byte	0xf6
 4369 0342 09010000 		.4byte	0x109
 4370 0346 02       		.uleb128 0x2
 4371 0347 91       		.byte	0x91
 4372 0348 74       		.sleb128 -12
 4373 0349 12       		.uleb128 0x12
 4374 034a 6F757400 		.ascii	"out\000"
 4375 034e 01       		.byte	0x1
 4376 034f F9       		.byte	0xf9
 4377 0350 09010000 		.4byte	0x109
 4378 0354 02       		.uleb128 0x2
 4379 0355 91       		.byte	0x91
 4380 0356 70       		.sleb128 -16
 4381 0357 00       		.byte	0
 4382 0358 13       		.uleb128 0x13
 4383 0359 6D617000 		.ascii	"map\000"
 4384 035d 01       		.byte	0x1
 4385 035e 0301     		.2byte	0x103
 4386 0360 09010000 		.4byte	0x109
 4387 0364 00000000 		.4byte	.LFB69
 4388 0368 56000000 		.4byte	.LFE69-.LFB69
 4389 036c 01       		.uleb128 0x1
 4390 036d 9C       		.byte	0x9c
 4391 036e BE030000 		.4byte	0x3be
 4392 0372 14       		.uleb128 0x14
 4393 0373 A0030000 		.4byte	.LASF54
 4394 0377 01       		.byte	0x1
 4395 0378 0301     		.2byte	0x103
 4396 037a 09010000 		.4byte	0x109
 4397 037e 02       		.uleb128 0x2
 4398 037f 91       		.byte	0x91
 4399 0380 6C       		.sleb128 -20
 4400 0381 14       		.uleb128 0x14
 4401 0382 450A0000 		.4byte	.LASF55
 4402 0386 01       		.byte	0x1
 4403 0387 0301     		.2byte	0x103
 4404 0389 09010000 		.4byte	0x109
 4405 038d 02       		.uleb128 0x2
 4406 038e 91       		.byte	0x91
 4407 038f 68       		.sleb128 -24
 4408 0390 14       		.uleb128 0x14
 4409 0391 1E010000 		.4byte	.LASF56
 4410 0395 01       		.byte	0x1
 4411 0396 0301     		.2byte	0x103
 4412 0398 09010000 		.4byte	0x109
 4413 039c 02       		.uleb128 0x2
 4414 039d 91       		.byte	0x91
 4415 039e 64       		.sleb128 -28
 4416 039f 14       		.uleb128 0x14
 4417 03a0 22060000 		.4byte	.LASF57
 4418 03a4 01       		.byte	0x1
 4419 03a5 0301     		.2byte	0x103
 4420 03a7 09010000 		.4byte	0x109
 4421 03ab 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 102


 4422 03ac 91       		.byte	0x91
 4423 03ad 60       		.sleb128 -32
 4424 03ae 14       		.uleb128 0x14
 4425 03af 34000000 		.4byte	.LASF58
 4426 03b3 01       		.byte	0x1
 4427 03b4 0301     		.2byte	0x103
 4428 03b6 09010000 		.4byte	0x109
 4429 03ba 02       		.uleb128 0x2
 4430 03bb 91       		.byte	0x91
 4431 03bc 00       		.sleb128 0
 4432 03bd 00       		.byte	0
 4433 03be 15       		.uleb128 0x15
 4434 03bf 16020000 		.4byte	.LASF60
 4435 03c3 01       		.byte	0x1
 4436 03c4 3A01     		.2byte	0x13a
 4437 03c6 00000000 		.4byte	.LFB70
 4438 03ca 40000000 		.4byte	.LFE70-.LFB70
 4439 03ce 01       		.uleb128 0x1
 4440 03cf 9C       		.byte	0x9c
 4441 03d0 15       		.uleb128 0x15
 4442 03d1 28090000 		.4byte	.LASF61
 4443 03d5 01       		.byte	0x1
 4444 03d6 4C01     		.2byte	0x14c
 4445 03d8 00000000 		.4byte	.LFB71
 4446 03dc 14000000 		.4byte	.LFE71-.LFB71
 4447 03e0 01       		.uleb128 0x1
 4448 03e1 9C       		.byte	0x9c
 4449 03e2 15       		.uleb128 0x15
 4450 03e3 15080000 		.4byte	.LASF62
 4451 03e7 01       		.byte	0x1
 4452 03e8 5701     		.2byte	0x157
 4453 03ea 00000000 		.4byte	.LFB72
 4454 03ee 7C000000 		.4byte	.LFE72-.LFB72
 4455 03f2 01       		.uleb128 0x1
 4456 03f3 9C       		.byte	0x9c
 4457 03f4 16       		.uleb128 0x16
 4458 03f5 A3090000 		.4byte	.LASF63
 4459 03f9 01       		.byte	0x1
 4460 03fa 7101     		.2byte	0x171
 4461 03fc 94000000 		.4byte	0x94
 4462 0400 00000000 		.4byte	.LFB73
 4463 0404 9C0B0000 		.4byte	.LFE73-.LFB73
 4464 0408 01       		.uleb128 0x1
 4465 0409 9C       		.byte	0x9c
 4466 040a A7040000 		.4byte	0x4a7
 4467 040e 17       		.uleb128 0x17
 4468 040f AE000000 		.4byte	.LBB2
 4469 0413 1E050000 		.4byte	.LBE2-.LBB2
 4470 0417 42040000 		.4byte	0x442
 4471 041b 18       		.uleb128 0x18
 4472 041c 51090000 		.4byte	.LASF64
 4473 0420 01       		.byte	0x1
 4474 0421 EC01     		.2byte	0x1ec
 4475 0423 09010000 		.4byte	0x109
 4476 0427 02       		.uleb128 0x2
 4477 0428 91       		.byte	0x91
 4478 0429 50       		.sleb128 -48
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 103


 4479 042a 19       		.uleb128 0x19
 4480 042b 56030000 		.4byte	.LBB3
 4481 042f 34000000 		.4byte	.LBE3-.LBB3
 4482 0433 1A       		.uleb128 0x1a
 4483 0434 6A00     		.ascii	"j\000"
 4484 0436 01       		.byte	0x1
 4485 0437 2302     		.2byte	0x223
 4486 0439 94000000 		.4byte	0x94
 4487 043d 02       		.uleb128 0x2
 4488 043e 91       		.byte	0x91
 4489 043f 64       		.sleb128 -28
 4490 0440 00       		.byte	0
 4491 0441 00       		.byte	0
 4492 0442 17       		.uleb128 0x17
 4493 0443 3A060000 		.4byte	.LBB4
 4494 0447 52010000 		.4byte	.LBE4-.LBB4
 4495 044b 74040000 		.4byte	0x474
 4496 044f 1A       		.uleb128 0x1a
 4497 0450 6900     		.ascii	"i\000"
 4498 0452 01       		.byte	0x1
 4499 0453 5702     		.2byte	0x257
 4500 0455 94000000 		.4byte	0x94
 4501 0459 02       		.uleb128 0x2
 4502 045a 91       		.byte	0x91
 4503 045b 60       		.sleb128 -32
 4504 045c 19       		.uleb128 0x19
 4505 045d 68060000 		.4byte	.LBB5
 4506 0461 32000000 		.4byte	.LBE5-.LBB5
 4507 0465 1A       		.uleb128 0x1a
 4508 0466 6A00     		.ascii	"j\000"
 4509 0468 01       		.byte	0x1
 4510 0469 5B02     		.2byte	0x25b
 4511 046b 94000000 		.4byte	0x94
 4512 046f 02       		.uleb128 0x2
 4513 0470 91       		.byte	0x91
 4514 0471 5C       		.sleb128 -36
 4515 0472 00       		.byte	0
 4516 0473 00       		.byte	0
 4517 0474 17       		.uleb128 0x17
 4518 0475 C2070000 		.4byte	.LBB6
 4519 0479 CC010000 		.4byte	.LBE6-.LBB6
 4520 047d 8F040000 		.4byte	0x48f
 4521 0481 1A       		.uleb128 0x1a
 4522 0482 6900     		.ascii	"i\000"
 4523 0484 01       		.byte	0x1
 4524 0485 8002     		.2byte	0x280
 4525 0487 94000000 		.4byte	0x94
 4526 048b 02       		.uleb128 0x2
 4527 048c 91       		.byte	0x91
 4528 048d 58       		.sleb128 -40
 4529 048e 00       		.byte	0
 4530 048f 19       		.uleb128 0x19
 4531 0490 B6090000 		.4byte	.LBB7
 4532 0494 30000000 		.4byte	.LBE7-.LBB7
 4533 0498 1A       		.uleb128 0x1a
 4534 0499 6900     		.ascii	"i\000"
 4535 049b 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 104


 4536 049c B602     		.2byte	0x2b6
 4537 049e 24020000 		.4byte	0x224
 4538 04a2 02       		.uleb128 0x2
 4539 04a3 91       		.byte	0x91
 4540 04a4 54       		.sleb128 -44
 4541 04a5 00       		.byte	0
 4542 04a6 00       		.byte	0
 4543 04a7 15       		.uleb128 0x15
 4544 04a8 A6070000 		.4byte	.LASF65
 4545 04ac 01       		.byte	0x1
 4546 04ad 0F03     		.2byte	0x30f
 4547 04af 00000000 		.4byte	.LFB74
 4548 04b3 54000000 		.4byte	.LFE74-.LFB74
 4549 04b7 01       		.uleb128 0x1
 4550 04b8 9C       		.byte	0x9c
 4551 04b9 15       		.uleb128 0x15
 4552 04ba 5E090000 		.4byte	.LASF66
 4553 04be 01       		.byte	0x1
 4554 04bf 2303     		.2byte	0x323
 4555 04c1 00000000 		.4byte	.LFB75
 4556 04c5 C4000000 		.4byte	.LFE75-.LFB75
 4557 04c9 01       		.uleb128 0x1
 4558 04ca 9C       		.byte	0x9c
 4559 04cb 1B       		.uleb128 0x1b
 4560 04cc E3030000 		.4byte	.LASF69
 4561 04d0 01       		.byte	0x1
 4562 04d1 7303     		.2byte	0x373
 4563 04d3 00000000 		.4byte	.LFB76
 4564 04d7 4C000000 		.4byte	.LFE76-.LFB76
 4565 04db 01       		.uleb128 0x1
 4566 04dc 9C       		.byte	0x9c
 4567 04dd 00050000 		.4byte	0x500
 4568 04e1 14       		.uleb128 0x14
 4569 04e2 23050000 		.4byte	.LASF67
 4570 04e6 01       		.byte	0x1
 4571 04e7 7303     		.2byte	0x373
 4572 04e9 D9000000 		.4byte	0xd9
 4573 04ed 02       		.uleb128 0x2
 4574 04ee 91       		.byte	0x91
 4575 04ef 77       		.sleb128 -9
 4576 04f0 14       		.uleb128 0x14
 4577 04f1 65070000 		.4byte	.LASF68
 4578 04f5 01       		.byte	0x1
 4579 04f6 7303     		.2byte	0x373
 4580 04f8 00050000 		.4byte	0x500
 4581 04fc 02       		.uleb128 0x2
 4582 04fd 91       		.byte	0x91
 4583 04fe 70       		.sleb128 -16
 4584 04ff 00       		.byte	0
 4585 0500 1C       		.uleb128 0x1c
 4586 0501 04       		.byte	0x4
 4587 0502 D9000000 		.4byte	0xd9
 4588 0506 1B       		.uleb128 0x1b
 4589 0507 A8090000 		.4byte	.LASF70
 4590 050b 01       		.byte	0x1
 4591 050c 8103     		.2byte	0x381
 4592 050e 00000000 		.4byte	.LFB77
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 105


 4593 0512 C4000000 		.4byte	.LFE77-.LFB77
 4594 0516 01       		.uleb128 0x1
 4595 0517 9C       		.byte	0x9c
 4596 0518 4A050000 		.4byte	0x54a
 4597 051c 14       		.uleb128 0x14
 4598 051d 750A0000 		.4byte	.LASF71
 4599 0521 01       		.byte	0x1
 4600 0522 8103     		.2byte	0x381
 4601 0524 94000000 		.4byte	0x94
 4602 0528 02       		.uleb128 0x2
 4603 0529 91       		.byte	0x91
 4604 052a 74       		.sleb128 -12
 4605 052b 14       		.uleb128 0x14
 4606 052c 03080000 		.4byte	.LASF72
 4607 0530 01       		.byte	0x1
 4608 0531 8103     		.2byte	0x381
 4609 0533 94000000 		.4byte	0x94
 4610 0537 02       		.uleb128 0x2
 4611 0538 91       		.byte	0x91
 4612 0539 70       		.sleb128 -16
 4613 053a 14       		.uleb128 0x14
 4614 053b AA060000 		.4byte	.LASF73
 4615 053f 01       		.byte	0x1
 4616 0540 8103     		.2byte	0x381
 4617 0542 94000000 		.4byte	0x94
 4618 0546 02       		.uleb128 0x2
 4619 0547 91       		.byte	0x91
 4620 0548 6C       		.sleb128 -20
 4621 0549 00       		.byte	0
 4622 054a 1B       		.uleb128 0x1b
 4623 054b E0050000 		.4byte	.LASF74
 4624 054f 01       		.byte	0x1
 4625 0550 9D03     		.2byte	0x39d
 4626 0552 00000000 		.4byte	.LFB78
 4627 0556 B4000000 		.4byte	.LFE78-.LFB78
 4628 055a 01       		.uleb128 0x1
 4629 055b 9C       		.byte	0x9c
 4630 055c 7F050000 		.4byte	0x57f
 4631 0560 1D       		.uleb128 0x1d
 4632 0561 76616C00 		.ascii	"val\000"
 4633 0565 01       		.byte	0x1
 4634 0566 9D03     		.2byte	0x39d
 4635 0568 94000000 		.4byte	0x94
 4636 056c 02       		.uleb128 0x2
 4637 056d 91       		.byte	0x91
 4638 056e 74       		.sleb128 -12
 4639 056f 14       		.uleb128 0x14
 4640 0570 AA060000 		.4byte	.LASF73
 4641 0574 01       		.byte	0x1
 4642 0575 9D03     		.2byte	0x39d
 4643 0577 94000000 		.4byte	0x94
 4644 057b 02       		.uleb128 0x2
 4645 057c 91       		.byte	0x91
 4646 057d 70       		.sleb128 -16
 4647 057e 00       		.byte	0
 4648 057f 1B       		.uleb128 0x1b
 4649 0580 90040000 		.4byte	.LASF75
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 106


 4650 0584 01       		.byte	0x1
 4651 0585 B203     		.2byte	0x3b2
 4652 0587 00000000 		.4byte	.LFB79
 4653 058b B0000000 		.4byte	.LFE79-.LFB79
 4654 058f 01       		.uleb128 0x1
 4655 0590 9C       		.byte	0x9c
 4656 0591 C3050000 		.4byte	0x5c3
 4657 0595 14       		.uleb128 0x14
 4658 0596 25070000 		.4byte	.LASF76
 4659 059a 01       		.byte	0x1
 4660 059b B203     		.2byte	0x3b2
 4661 059d 94000000 		.4byte	0x94
 4662 05a1 02       		.uleb128 0x2
 4663 05a2 91       		.byte	0x91
 4664 05a3 74       		.sleb128 -12
 4665 05a4 14       		.uleb128 0x14
 4666 05a5 D3050000 		.4byte	.LASF77
 4667 05a9 01       		.byte	0x1
 4668 05aa B203     		.2byte	0x3b2
 4669 05ac 94000000 		.4byte	0x94
 4670 05b0 02       		.uleb128 0x2
 4671 05b1 91       		.byte	0x91
 4672 05b2 70       		.sleb128 -16
 4673 05b3 14       		.uleb128 0x14
 4674 05b4 AA060000 		.4byte	.LASF73
 4675 05b8 01       		.byte	0x1
 4676 05b9 B203     		.2byte	0x3b2
 4677 05bb 94000000 		.4byte	0x94
 4678 05bf 02       		.uleb128 0x2
 4679 05c0 91       		.byte	0x91
 4680 05c1 6C       		.sleb128 -20
 4681 05c2 00       		.byte	0
 4682 05c3 1B       		.uleb128 0x1b
 4683 05c4 F1090000 		.4byte	.LASF78
 4684 05c8 01       		.byte	0x1
 4685 05c9 CA03     		.2byte	0x3ca
 4686 05cb 00000000 		.4byte	.LFB80
 4687 05cf 24010000 		.4byte	.LFE80-.LFB80
 4688 05d3 01       		.uleb128 0x1
 4689 05d4 9C       		.byte	0x9c
 4690 05d5 07060000 		.4byte	0x607
 4691 05d9 18       		.uleb128 0x18
 4692 05da 9D090000 		.4byte	.LASF79
 4693 05de 01       		.byte	0x1
 4694 05df CC03     		.2byte	0x3cc
 4695 05e1 FD000000 		.4byte	0xfd
 4696 05e5 02       		.uleb128 0x2
 4697 05e6 91       		.byte	0x91
 4698 05e7 68       		.sleb128 -24
 4699 05e8 18       		.uleb128 0x18
 4700 05e9 AB040000 		.4byte	.LASF80
 4701 05ed 01       		.byte	0x1
 4702 05ee CD03     		.2byte	0x3cd
 4703 05f0 FD000000 		.4byte	0xfd
 4704 05f4 02       		.uleb128 0x2
 4705 05f5 91       		.byte	0x91
 4706 05f6 6C       		.sleb128 -20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 107


 4707 05f7 18       		.uleb128 0x18
 4708 05f8 DC030000 		.4byte	.LASF81
 4709 05fc 01       		.byte	0x1
 4710 05fd CE03     		.2byte	0x3ce
 4711 05ff FD000000 		.4byte	0xfd
 4712 0603 02       		.uleb128 0x2
 4713 0604 91       		.byte	0x91
 4714 0605 64       		.sleb128 -28
 4715 0606 00       		.byte	0
 4716 0607 15       		.uleb128 0x15
 4717 0608 67000000 		.4byte	.LASF82
 4718 060c 01       		.byte	0x1
 4719 060d F903     		.2byte	0x3f9
 4720 060f 00000000 		.4byte	.LFB81
 4721 0613 D8000000 		.4byte	.LFE81-.LFB81
 4722 0617 01       		.uleb128 0x1
 4723 0618 9C       		.byte	0x9c
 4724 0619 15       		.uleb128 0x15
 4725 061a 80000000 		.4byte	.LASF83
 4726 061e 01       		.byte	0x1
 4727 061f 2004     		.2byte	0x420
 4728 0621 00000000 		.4byte	.LFB82
 4729 0625 D8000000 		.4byte	.LFE82-.LFB82
 4730 0629 01       		.uleb128 0x1
 4731 062a 9C       		.byte	0x9c
 4732 062b 16       		.uleb128 0x16
 4733 062c 7B080000 		.4byte	.LASF84
 4734 0630 01       		.byte	0x1
 4735 0631 4904     		.2byte	0x449
 4736 0633 D9000000 		.4byte	0xd9
 4737 0637 00000000 		.4byte	.LFB83
 4738 063b 90000000 		.4byte	.LFE83-.LFB83
 4739 063f 01       		.uleb128 0x1
 4740 0640 9C       		.byte	0x9c
 4741 0641 91060000 		.4byte	0x691
 4742 0645 14       		.uleb128 0x14
 4743 0646 BC080000 		.4byte	.LASF85
 4744 064a 01       		.byte	0x1
 4745 064b 4904     		.2byte	0x449
 4746 064d D9000000 		.4byte	0xd9
 4747 0651 02       		.uleb128 0x2
 4748 0652 91       		.byte	0x91
 4749 0653 6F       		.sleb128 -17
 4750 0654 14       		.uleb128 0x14
 4751 0655 D9050000 		.4byte	.LASF86
 4752 0659 01       		.byte	0x1
 4753 065a 4904     		.2byte	0x449
 4754 065c E5000000 		.4byte	0xe5
 4755 0660 02       		.uleb128 0x2
 4756 0661 91       		.byte	0x91
 4757 0662 6C       		.sleb128 -20
 4758 0663 14       		.uleb128 0x14
 4759 0664 FC010000 		.4byte	.LASF87
 4760 0668 01       		.byte	0x1
 4761 0669 4904     		.2byte	0x449
 4762 066b A2000000 		.4byte	0xa2
 4763 066f 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 108


 4764 0670 91       		.byte	0x91
 4765 0671 6E       		.sleb128 -18
 4766 0672 18       		.uleb128 0x18
 4767 0673 10050000 		.4byte	.LASF88
 4768 0677 01       		.byte	0x1
 4769 0678 4B04     		.2byte	0x44b
 4770 067a 36010000 		.4byte	0x136
 4771 067e 02       		.uleb128 0x2
 4772 067f 91       		.byte	0x91
 4773 0680 73       		.sleb128 -13
 4774 0681 18       		.uleb128 0x18
 4775 0682 1B090000 		.4byte	.LASF89
 4776 0686 01       		.byte	0x1
 4777 0687 4C04     		.2byte	0x44c
 4778 0689 C3000000 		.4byte	0xc3
 4779 068d 02       		.uleb128 0x2
 4780 068e 91       		.byte	0x91
 4781 068f 74       		.sleb128 -12
 4782 0690 00       		.byte	0
 4783 0691 1B       		.uleb128 0x1b
 4784 0692 6D070000 		.4byte	.LASF90
 4785 0696 01       		.byte	0x1
 4786 0697 7704     		.2byte	0x477
 4787 0699 00000000 		.4byte	.LFB84
 4788 069d 68020000 		.4byte	.LFE84-.LFB84
 4789 06a1 01       		.uleb128 0x1
 4790 06a2 9C       		.byte	0x9c
 4791 06a3 39070000 		.4byte	0x739
 4792 06a7 14       		.uleb128 0x14
 4793 06a8 E2070000 		.4byte	.LASF91
 4794 06ac 01       		.byte	0x1
 4795 06ad 7704     		.2byte	0x477
 4796 06af 94000000 		.4byte	0x94
 4797 06b3 02       		.uleb128 0x2
 4798 06b4 91       		.byte	0x91
 4799 06b5 5C       		.sleb128 -36
 4800 06b6 14       		.uleb128 0x14
 4801 06b7 03080000 		.4byte	.LASF72
 4802 06bb 01       		.byte	0x1
 4803 06bc 7704     		.2byte	0x477
 4804 06be 94000000 		.4byte	0x94
 4805 06c2 02       		.uleb128 0x2
 4806 06c3 91       		.byte	0x91
 4807 06c4 58       		.sleb128 -40
 4808 06c5 14       		.uleb128 0x14
 4809 06c6 DE040000 		.4byte	.LASF92
 4810 06ca 01       		.byte	0x1
 4811 06cb 7704     		.2byte	0x477
 4812 06cd 94000000 		.4byte	0x94
 4813 06d1 02       		.uleb128 0x2
 4814 06d2 91       		.byte	0x91
 4815 06d3 54       		.sleb128 -44
 4816 06d4 17       		.uleb128 0x17
 4817 06d5 12000000 		.4byte	.LBB8
 4818 06d9 4C000000 		.4byte	.LBE8-.LBB8
 4819 06dd F1060000 		.4byte	0x6f1
 4820 06e1 18       		.uleb128 0x18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 109


 4821 06e2 E7070000 		.4byte	.LASF93
 4822 06e6 01       		.byte	0x1
 4823 06e7 7C04     		.2byte	0x47c
 4824 06e9 09010000 		.4byte	0x109
 4825 06ed 02       		.uleb128 0x2
 4826 06ee 91       		.byte	0x91
 4827 06ef 60       		.sleb128 -32
 4828 06f0 00       		.byte	0
 4829 06f1 1E       		.uleb128 0x1e
 4830 06f2 00000000 		.4byte	.Ldebug_ranges0+0
 4831 06f6 18       		.uleb128 0x18
 4832 06f7 EF070000 		.4byte	.LASF94
 4833 06fb 01       		.byte	0x1
 4834 06fc 8D04     		.2byte	0x48d
 4835 06fe 94000000 		.4byte	0x94
 4836 0702 02       		.uleb128 0x2
 4837 0703 91       		.byte	0x91
 4838 0704 6C       		.sleb128 -20
 4839 0705 17       		.uleb128 0x17
 4840 0706 82000000 		.4byte	.LBB10
 4841 070a 34000000 		.4byte	.LBE10-.LBB10
 4842 070e 20070000 		.4byte	0x720
 4843 0712 1A       		.uleb128 0x1a
 4844 0713 6900     		.ascii	"i\000"
 4845 0715 01       		.byte	0x1
 4846 0716 9104     		.2byte	0x491
 4847 0718 94000000 		.4byte	0x94
 4848 071c 02       		.uleb128 0x2
 4849 071d 91       		.byte	0x91
 4850 071e 68       		.sleb128 -24
 4851 071f 00       		.byte	0
 4852 0720 19       		.uleb128 0x19
 4853 0721 C8000000 		.4byte	.LBB11
 4854 0725 52000000 		.4byte	.LBE11-.LBB11
 4855 0729 1A       		.uleb128 0x1a
 4856 072a 6900     		.ascii	"i\000"
 4857 072c 01       		.byte	0x1
 4858 072d 9E04     		.2byte	0x49e
 4859 072f 94000000 		.4byte	0x94
 4860 0733 02       		.uleb128 0x2
 4861 0734 91       		.byte	0x91
 4862 0735 64       		.sleb128 -28
 4863 0736 00       		.byte	0
 4864 0737 00       		.byte	0
 4865 0738 00       		.byte	0
 4866 0739 07       		.uleb128 0x7
 4867 073a D9000000 		.4byte	0xd9
 4868 073e 49070000 		.4byte	0x749
 4869 0742 08       		.uleb128 0x8
 4870 0743 42010000 		.4byte	0x142
 4871 0747 01       		.byte	0x1
 4872 0748 00       		.byte	0
 4873 0749 10       		.uleb128 0x10
 4874 074a FE050000 		.4byte	.LASF95
 4875 074e 01       		.byte	0x1
 4876 074f AF       		.byte	0xaf
 4877 0750 39070000 		.4byte	0x739
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 110


 4878 0754 05       		.uleb128 0x5
 4879 0755 03       		.byte	0x3
 4880 0756 24000000 		.4byte	eepromArray
 4881 075a 07       		.uleb128 0x7
 4882 075b D9000000 		.4byte	0xd9
 4883 075f 6A070000 		.4byte	0x76a
 4884 0763 08       		.uleb128 0x8
 4885 0764 42010000 		.4byte	0x142
 4886 0768 00       		.byte	0
 4887 0769 00       		.byte	0
 4888 076a 1F       		.uleb128 0x1f
 4889 076b 810A0000 		.4byte	.LASF96
 4890 076f 07       		.byte	0x7
 4891 0770 1001     		.2byte	0x110
 4892 0772 5A070000 		.4byte	0x75a
 4893 0776 20       		.uleb128 0x20
 4894 0777 8E050000 		.4byte	.LASF97
 4895 077b 08       		.byte	0x8
 4896 077c F3       		.byte	0xf3
 4897 077d 36010000 		.4byte	0x136
 4898 0781 20       		.uleb128 0x20
 4899 0782 94020000 		.4byte	.LASF98
 4900 0786 08       		.byte	0x8
 4901 0787 F9       		.byte	0xf9
 4902 0788 36010000 		.4byte	0x136
 4903 078c 07       		.uleb128 0x7
 4904 078d D9000000 		.4byte	0xd9
 4905 0791 9C070000 		.4byte	0x79c
 4906 0795 08       		.uleb128 0x8
 4907 0796 42010000 		.4byte	0x142
 4908 079a 3F       		.byte	0x3f
 4909 079b 00       		.byte	0
 4910 079c 20       		.uleb128 0x20
 4911 079d 0B0A0000 		.4byte	.LASF99
 4912 07a1 08       		.byte	0x8
 4913 07a2 FA       		.byte	0xfa
 4914 07a3 8C070000 		.4byte	0x78c
 4915 07a7 20       		.uleb128 0x20
 4916 07a8 350A0000 		.4byte	.LASF100
 4917 07ac 08       		.byte	0x8
 4918 07ad FE       		.byte	0xfe
 4919 07ae 36010000 		.4byte	0x136
 4920 07b2 20       		.uleb128 0x20
 4921 07b3 16030000 		.4byte	.LASF101
 4922 07b7 08       		.byte	0x8
 4923 07b8 FF       		.byte	0xff
 4924 07b9 8C070000 		.4byte	0x78c
 4925 07bd 20       		.uleb128 0x20
 4926 07be EC040000 		.4byte	.LASF102
 4927 07c2 09       		.byte	0x9
 4928 07c3 82       		.byte	0x82
 4929 07c4 CB010000 		.4byte	0x1cb
 4930 07c8 07       		.uleb128 0x7
 4931 07c9 D9070000 		.4byte	0x7d9
 4932 07cd D9070000 		.4byte	0x7d9
 4933 07d1 21       		.uleb128 0x21
 4934 07d2 42010000 		.4byte	0x142
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 111


 4935 07d6 FF03     		.2byte	0x3ff
 4936 07d8 00       		.byte	0
 4937 07d9 22       		.uleb128 0x22
 4938 07da A2000000 		.4byte	0xa2
 4939 07de 23       		.uleb128 0x23
 4940 07df 28020000 		.4byte	.LASF103
 4941 07e3 01       		.byte	0x1
 4942 07e4 BC       		.byte	0xbc
 4943 07e5 EF070000 		.4byte	0x7ef
 4944 07e9 05       		.uleb128 0x5
 4945 07ea 03       		.byte	0x3
 4946 07eb 00000000 		.4byte	Em_EEPROM_em_EepromStorage
 4947 07ef 22       		.uleb128 0x22
 4948 07f0 C8070000 		.4byte	0x7c8
 4949 07f4 1F       		.uleb128 0x1f
 4950 07f5 47070000 		.4byte	.LASF104
 4951 07f9 0A       		.byte	0xa
 4952 07fa 1207     		.2byte	0x712
 4953 07fc 00080000 		.4byte	0x800
 4954 0800 06       		.uleb128 0x6
 4955 0801 B8000000 		.4byte	0xb8
 4956 0805 23       		.uleb128 0x23
 4957 0806 34070000 		.4byte	.LASF105
 4958 080a 01       		.byte	0x1
 4959 080b 31       		.byte	0x31
 4960 080c 36010000 		.4byte	0x136
 4961 0810 05       		.uleb128 0x5
 4962 0811 03       		.byte	0x3
 4963 0812 00000000 		.4byte	usbActivityCounter
 4964 0816 23       		.uleb128 0x23
 4965 0817 65070000 		.4byte	.LASF68
 4966 081b 01       		.byte	0x1
 4967 081c 32       		.byte	0x32
 4968 081d 49010000 		.4byte	0x149
 4969 0821 05       		.uleb128 0x5
 4970 0822 03       		.byte	0x3
 4971 0823 00000000 		.4byte	midiMsg
 4972 0827 23       		.uleb128 0x23
 4973 0828 36060000 		.4byte	.LASF106
 4974 082c 01       		.byte	0x1
 4975 082d 33       		.byte	0x33
 4976 082e 0F020000 		.4byte	0x20f
 4977 0832 05       		.uleb128 0x5
 4978 0833 03       		.byte	0x3
 4979 0834 00000000 		.4byte	currentVBUS
 4980 0838 23       		.uleb128 0x23
 4981 0839 E3010000 		.4byte	.LASF107
 4982 083d 01       		.byte	0x1
 4983 083e 34       		.byte	0x34
 4984 083f 0F020000 		.4byte	0x20f
 4985 0843 05       		.uleb128 0x5
 4986 0844 03       		.byte	0x3
 4987 0845 00000000 		.4byte	prevVBUS
 4988 0849 23       		.uleb128 0x23
 4989 084a 02090000 		.4byte	.LASF108
 4990 084e 01       		.byte	0x1
 4991 084f 35       		.byte	0x35
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 112


 4992 0850 0F020000 		.4byte	0x20f
 4993 0854 05       		.uleb128 0x5
 4994 0855 03       		.byte	0x3
 4995 0856 00000000 		.4byte	USB_active
 4996 085a 23       		.uleb128 0x23
 4997 085b 93060000 		.4byte	.LASF109
 4998 085f 01       		.byte	0x1
 4999 0860 36       		.byte	0x36
 5000 0861 0F020000 		.4byte	0x20f
 5001 0865 05       		.uleb128 0x5
 5002 0866 03       		.byte	0x3
 5003 0867 00000000 		.4byte	USB_check_flag
 5004 086b 23       		.uleb128 0x23
 5005 086c 36090000 		.4byte	.LASF110
 5006 0870 01       		.byte	0x1
 5007 0871 38       		.byte	0x38
 5008 0872 AD000000 		.4byte	0xad
 5009 0876 05       		.uleb128 0x5
 5010 0877 03       		.byte	0x3
 5011 0878 00000000 		.4byte	midiSent
 5012 087c 23       		.uleb128 0x23
 5013 087d C8010000 		.4byte	.LASF111
 5014 0881 01       		.byte	0x1
 5015 0882 39       		.byte	0x39
 5016 0883 AD000000 		.4byte	0xad
 5017 0887 05       		.uleb128 0x5
 5018 0888 03       		.byte	0x3
 5019 0889 00000000 		.4byte	midiOverflow
 5020 088d 23       		.uleb128 0x23
 5021 088e 00000000 		.4byte	.LASF112
 5022 0892 01       		.byte	0x1
 5023 0893 3B       		.byte	0x3b
 5024 0894 24020000 		.4byte	0x224
 5025 0898 05       		.uleb128 0x5
 5026 0899 03       		.byte	0x3
 5027 089a 00000000 		.4byte	scanPart
 5028 089e 23       		.uleb128 0x23
 5029 089f AA060000 		.4byte	.LASF73
 5030 08a3 01       		.byte	0x1
 5031 08a4 3C       		.byte	0x3c
 5032 08a5 24020000 		.4byte	0x224
 5033 08a9 05       		.uleb128 0x5
 5034 08aa 03       		.byte	0x3
 5035 08ab 00000000 		.4byte	channel
 5036 08af 23       		.uleb128 0x23
 5037 08b0 630A0000 		.4byte	.LASF113
 5038 08b4 01       		.byte	0x1
 5039 08b5 3E       		.byte	0x3e
 5040 08b6 24020000 		.4byte	0x224
 5041 08ba 05       		.uleb128 0x5
 5042 08bb 03       		.byte	0x3
 5043 08bc 00000000 		.4byte	currentOutPointer
 5044 08c0 23       		.uleb128 0x23
 5045 08c1 F7080000 		.4byte	.LASF114
 5046 08c5 01       		.byte	0x1
 5047 08c6 3F       		.byte	0x3f
 5048 08c7 24020000 		.4byte	0x224
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 113


 5049 08cb 05       		.uleb128 0x5
 5050 08cc 03       		.byte	0x3
 5051 08cd 00000000 		.4byte	outChanged
 5052 08d1 07       		.uleb128 0x7
 5053 08d2 0F020000 		.4byte	0x20f
 5054 08d6 E1080000 		.4byte	0x8e1
 5055 08da 08       		.uleb128 0x8
 5056 08db 42010000 		.4byte	0x142
 5057 08df FF       		.byte	0xff
 5058 08e0 00       		.byte	0
 5059 08e1 23       		.uleb128 0x23
 5060 08e2 14000000 		.4byte	.LASF115
 5061 08e6 01       		.byte	0x1
 5062 08e7 52       		.byte	0x52
 5063 08e8 F2080000 		.4byte	0x8f2
 5064 08ec 05       		.uleb128 0x5
 5065 08ed 03       		.byte	0x3
 5066 08ee 00000000 		.4byte	I2Cbuff1
 5067 08f2 06       		.uleb128 0x6
 5068 08f3 D1080000 		.4byte	0x8d1
 5069 08f7 07       		.uleb128 0x7
 5070 08f8 A2000000 		.4byte	0xa2
 5071 08fc 07090000 		.4byte	0x907
 5072 0900 08       		.uleb128 0x8
 5073 0901 42010000 		.4byte	0x142
 5074 0905 00       		.byte	0
 5075 0906 00       		.byte	0
 5076 0907 23       		.uleb128 0x23
 5077 0908 3B040000 		.4byte	.LASF116
 5078 090c 01       		.byte	0x1
 5079 090d 53       		.byte	0x53
 5080 090e F7080000 		.4byte	0x8f7
 5081 0912 05       		.uleb128 0x5
 5082 0913 03       		.byte	0x3
 5083 0914 00000000 		.4byte	stringCapSensorsOnOff
 5084 0918 07       		.uleb128 0x7
 5085 0919 A2000000 		.4byte	0xa2
 5086 091d 28090000 		.4byte	0x928
 5087 0921 08       		.uleb128 0x8
 5088 0922 42010000 		.4byte	0x142
 5089 0926 0F       		.byte	0xf
 5090 0927 00       		.byte	0
 5091 0928 23       		.uleb128 0x23
 5092 0929 41050000 		.4byte	.LASF117
 5093 092d 01       		.byte	0x1
 5094 092e 54       		.byte	0x54
 5095 092f 18090000 		.4byte	0x918
 5096 0933 05       		.uleb128 0x5
 5097 0934 03       		.byte	0x3
 5098 0935 00000000 		.4byte	stringCapSensorsRaw
 5099 0939 07       		.uleb128 0x7
 5100 093a A2000000 		.4byte	0xa2
 5101 093e 49090000 		.4byte	0x949
 5102 0942 08       		.uleb128 0x8
 5103 0943 42010000 		.4byte	0x142
 5104 0947 07       		.byte	0x7
 5105 0948 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 114


 5106 0949 23       		.uleb128 0x23
 5107 094a 6F020000 		.4byte	.LASF118
 5108 094e 01       		.byte	0x1
 5109 094f 55       		.byte	0x55
 5110 0950 39090000 		.4byte	0x939
 5111 0954 05       		.uleb128 0x5
 5112 0955 03       		.byte	0x3
 5113 0956 00000000 		.4byte	thresholdArray
 5114 095a 07       		.uleb128 0x7
 5115 095b C3000000 		.4byte	0xc3
 5116 095f 70090000 		.4byte	0x970
 5117 0963 08       		.uleb128 0x8
 5118 0964 42010000 		.4byte	0x142
 5119 0968 03       		.byte	0x3
 5120 0969 08       		.uleb128 0x8
 5121 096a 42010000 		.4byte	0x142
 5122 096e 01       		.byte	0x1
 5123 096f 00       		.byte	0
 5124 0970 23       		.uleb128 0x23
 5125 0971 55050000 		.4byte	.LASF119
 5126 0975 01       		.byte	0x1
 5127 0976 5E       		.byte	0x5e
 5128 0977 5A090000 		.4byte	0x95a
 5129 097b 05       		.uleb128 0x5
 5130 097c 03       		.byte	0x3
 5131 097d 00000000 		.4byte	fretMeasurements
 5132 0981 07       		.uleb128 0x7
 5133 0982 09010000 		.4byte	0x109
 5134 0986 91090000 		.4byte	0x991
 5135 098a 08       		.uleb128 0x8
 5136 098b 42010000 		.4byte	0x142
 5137 098f 01       		.byte	0x1
 5138 0990 00       		.byte	0
 5139 0991 23       		.uleb128 0x23
 5140 0992 13040000 		.4byte	.LASF120
 5141 0996 01       		.byte	0x1
 5142 0997 6C       		.byte	0x6c
 5143 0998 81090000 		.4byte	0x981
 5144 099c 05       		.uleb128 0x5
 5145 099d 03       		.byte	0x3
 5146 099e 00000000 		.4byte	fretRatios
 5147 09a2 07       		.uleb128 0x7
 5148 09a3 B8000000 		.4byte	0xb8
 5149 09a7 B2090000 		.4byte	0x9b2
 5150 09ab 08       		.uleb128 0x8
 5151 09ac 42010000 		.4byte	0x142
 5152 09b0 03       		.byte	0x3
 5153 09b1 00       		.byte	0
 5154 09b2 23       		.uleb128 0x23
 5155 09b3 CA040000 		.4byte	.LASF121
 5156 09b7 01       		.byte	0x1
 5157 09b8 70       		.byte	0x70
 5158 09b9 A2090000 		.4byte	0x9a2
 5159 09bd 05       		.uleb128 0x5
 5160 09be 03       		.byte	0x3
 5161 09bf 00000000 		.4byte	linearPotValue32Bit
 5162 09c3 24       		.uleb128 0x24
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 115


 5163 09c4 6900     		.ascii	"i\000"
 5164 09c6 01       		.byte	0x1
 5165 09c7 71       		.byte	0x71
 5166 09c8 A2000000 		.4byte	0xa2
 5167 09cc 05       		.uleb128 0x5
 5168 09cd 03       		.byte	0x3
 5169 09ce 00000000 		.4byte	i
 5170 09d2 23       		.uleb128 0x23
 5171 09d3 CC030000 		.4byte	.LASF122
 5172 09d7 01       		.byte	0x1
 5173 09d8 72       		.byte	0x72
 5174 09d9 A2000000 		.4byte	0xa2
 5175 09dd 05       		.uleb128 0x5
 5176 09de 03       		.byte	0x3
 5177 09df 00000000 		.4byte	counter
 5178 09e3 23       		.uleb128 0x23
 5179 09e4 42060000 		.4byte	.LASF123
 5180 09e8 01       		.byte	0x1
 5181 09e9 73       		.byte	0x73
 5182 09ea B8000000 		.4byte	0xb8
 5183 09ee 05       		.uleb128 0x5
 5184 09ef 03       		.byte	0x3
 5185 09f0 00000000 		.4byte	temper
 5186 09f4 07       		.uleb128 0x7
 5187 09f5 94000000 		.4byte	0x94
 5188 09f9 040A0000 		.4byte	0xa04
 5189 09fd 08       		.uleb128 0x8
 5190 09fe 42010000 		.4byte	0x142
 5191 0a02 0A       		.byte	0xa
 5192 0a03 00       		.byte	0
 5193 0a04 23       		.uleb128 0x23
 5194 0a05 65060000 		.4byte	.LASF124
 5195 0a09 01       		.byte	0x1
 5196 0a0a 74       		.byte	0x74
 5197 0a0b F4090000 		.4byte	0x9f4
 5198 0a0f 05       		.uleb128 0x5
 5199 0a10 03       		.byte	0x3
 5200 0a11 00000000 		.4byte	previousButtons
 5201 0a15 23       		.uleb128 0x23
 5202 0a16 040A0000 		.4byte	.LASF125
 5203 0a1a 01       		.byte	0x1
 5204 0a1b 75       		.byte	0x75
 5205 0a1c 94000000 		.4byte	0x94
 5206 0a20 05       		.uleb128 0x5
 5207 0a21 03       		.byte	0x3
 5208 0a22 00000000 		.4byte	octave
 5209 0a26 07       		.uleb128 0x7
 5210 0a27 94000000 		.4byte	0x94
 5211 0a2b 360A0000 		.4byte	0xa36
 5212 0a2f 08       		.uleb128 0x8
 5213 0a30 42010000 		.4byte	0x142
 5214 0a34 03       		.byte	0x3
 5215 0a35 00       		.byte	0
 5216 0a36 23       		.uleb128 0x23
 5217 0a37 29060000 		.4byte	.LASF126
 5218 0a3b 01       		.byte	0x1
 5219 0a3c 77       		.byte	0x77
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 116


 5220 0a3d 260A0000 		.4byte	0xa26
 5221 0a41 05       		.uleb128 0x5
 5222 0a42 03       		.byte	0x3
 5223 0a43 00000000 		.4byte	stringPlucks
 5224 0a47 23       		.uleb128 0x23
 5225 0a48 8D070000 		.4byte	.LASF127
 5226 0a4c 01       		.byte	0x1
 5227 0a4d 78       		.byte	0x78
 5228 0a4e 260A0000 		.4byte	0xa26
 5229 0a52 05       		.uleb128 0x5
 5230 0a53 03       		.byte	0x3
 5231 0a54 00000000 		.4byte	stringPlucksPrev
 5232 0a58 07       		.uleb128 0x7
 5233 0a59 C3000000 		.4byte	0xc3
 5234 0a5d 6E0A0000 		.4byte	0xa6e
 5235 0a61 08       		.uleb128 0x8
 5236 0a62 42010000 		.4byte	0x142
 5237 0a66 04       		.byte	0x4
 5238 0a67 08       		.uleb128 0x8
 5239 0a68 42010000 		.4byte	0x142
 5240 0a6c 07       		.byte	0x7
 5241 0a6d 00       		.byte	0
 5242 0a6e 23       		.uleb128 0x23
 5243 0a6f 05070000 		.4byte	.LASF128
 5244 0a73 01       		.byte	0x1
 5245 0a74 7D       		.byte	0x7d
 5246 0a75 580A0000 		.4byte	0xa58
 5247 0a79 05       		.uleb128 0x5
 5248 0a7a 03       		.byte	0x3
 5249 0a7b 00000000 		.4byte	knobsFIR
 5250 0a7f 07       		.uleb128 0x7
 5251 0a80 09010000 		.4byte	0x109
 5252 0a84 8F0A0000 		.4byte	0xa8f
 5253 0a88 08       		.uleb128 0x8
 5254 0a89 42010000 		.4byte	0x142
 5255 0a8d 03       		.byte	0x3
 5256 0a8e 00       		.byte	0
 5257 0a8f 23       		.uleb128 0x23
 5258 0a90 7F040000 		.4byte	.LASF129
 5259 0a94 01       		.byte	0x1
 5260 0a95 84       		.byte	0x84
 5261 0a96 7F0A0000 		.4byte	0xa7f
 5262 0a9a 05       		.uleb128 0x5
 5263 0a9b 03       		.byte	0x3
 5264 0a9c 00000000 		.4byte	hysteresisStates
 5265 0aa0 23       		.uleb128 0x23
 5266 0aa1 43020000 		.4byte	.LASF130
 5267 0aa5 01       		.byte	0x1
 5268 0aa6 85       		.byte	0x85
 5269 0aa7 09010000 		.4byte	0x109
 5270 0aab 05       		.uleb128 0x5
 5271 0aac 03       		.byte	0x3
 5272 0aad 00000000 		.4byte	hysteresisLowThresh
 5273 0ab1 23       		.uleb128 0x23
 5274 0ab2 8B030000 		.4byte	.LASF131
 5275 0ab6 01       		.byte	0x1
 5276 0ab7 86       		.byte	0x86
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 117


 5277 0ab8 09010000 		.4byte	0x109
 5278 0abc 05       		.uleb128 0x5
 5279 0abd 03       		.byte	0x3
 5280 0abe 00000000 		.4byte	hysteresisHighThresh
 5281 0ac2 23       		.uleb128 0x23
 5282 0ac3 C9050000 		.4byte	.LASF132
 5283 0ac7 01       		.byte	0x1
 5284 0ac8 9C       		.byte	0x9c
 5285 0ac9 36010000 		.4byte	0x136
 5286 0acd 05       		.uleb128 0x5
 5287 0ace 03       		.byte	0x3
 5288 0acf 00000000 		.4byte	txChannel
 5289 0ad3 23       		.uleb128 0x23
 5290 0ad4 F2050000 		.4byte	.LASF133
 5291 0ad8 01       		.byte	0x1
 5292 0ad9 9D       		.byte	0x9d
 5293 0ada 36010000 		.4byte	0x136
 5294 0ade 05       		.uleb128 0x5
 5295 0adf 03       		.byte	0x3
 5296 0ae0 00000000 		.4byte	txTD
 5297 0ae4 07       		.uleb128 0x7
 5298 0ae5 36010000 		.4byte	0x136
 5299 0ae9 F40A0000 		.4byte	0xaf4
 5300 0aed 08       		.uleb128 0x8
 5301 0aee 42010000 		.4byte	0x142
 5302 0af2 0F       		.byte	0xf
 5303 0af3 00       		.byte	0
 5304 0af4 23       		.uleb128 0x23
 5305 0af5 DD060000 		.4byte	.LASF134
 5306 0af9 01       		.byte	0x1
 5307 0afa 9E       		.byte	0x9e
 5308 0afb 050B0000 		.4byte	0xb05
 5309 0aff 05       		.uleb128 0x5
 5310 0b00 03       		.byte	0x3
 5311 0b01 00000000 		.4byte	txBuffer
 5312 0b05 06       		.uleb128 0x6
 5313 0b06 E40A0000 		.4byte	0xae4
 5314 0b0a 23       		.uleb128 0x23
 5315 0b0b B4030000 		.4byte	.LASF135
 5316 0b0f 01       		.byte	0x1
 5317 0b10 A0       		.byte	0xa0
 5318 0b11 36010000 		.4byte	0x136
 5319 0b15 05       		.uleb128 0x5
 5320 0b16 03       		.byte	0x3
 5321 0b17 00000000 		.4byte	rxChannel
 5322 0b1b 23       		.uleb128 0x23
 5323 0b1c A6040000 		.4byte	.LASF136
 5324 0b20 01       		.byte	0x1
 5325 0b21 A1       		.byte	0xa1
 5326 0b22 36010000 		.4byte	0x136
 5327 0b26 05       		.uleb128 0x5
 5328 0b27 03       		.byte	0x3
 5329 0b28 00000000 		.4byte	rxTD
 5330 0b2c 23       		.uleb128 0x23
 5331 0b2d 7E060000 		.4byte	.LASF137
 5332 0b31 01       		.byte	0x1
 5333 0b32 A2       		.byte	0xa2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 118


 5334 0b33 3D0B0000 		.4byte	0xb3d
 5335 0b37 05       		.uleb128 0x5
 5336 0b38 03       		.byte	0x3
 5337 0b39 00000000 		.4byte	rxBuffer
 5338 0b3d 06       		.uleb128 0x6
 5339 0b3e E40A0000 		.4byte	0xae4
 5340 0b42 23       		.uleb128 0x23
 5341 0b43 5A070000 		.4byte	.LASF138
 5342 0b47 01       		.byte	0x1
 5343 0b48 A5       		.byte	0xa5
 5344 0b49 36010000 		.4byte	0x136
 5345 0b4d 05       		.uleb128 0x5
 5346 0b4e 03       		.byte	0x3
 5347 0b4f 00000000 		.4byte	tx2Channel
 5348 0b53 23       		.uleb128 0x23
 5349 0b54 7A000000 		.4byte	.LASF139
 5350 0b58 01       		.byte	0x1
 5351 0b59 A6       		.byte	0xa6
 5352 0b5a 36010000 		.4byte	0x136
 5353 0b5e 05       		.uleb128 0x5
 5354 0b5f 03       		.byte	0x3
 5355 0b60 00000000 		.4byte	tx2TD
 5356 0b64 23       		.uleb128 0x23
 5357 0b65 D9090000 		.4byte	.LASF140
 5358 0b69 01       		.byte	0x1
 5359 0b6a A7       		.byte	0xa7
 5360 0b6b 750B0000 		.4byte	0xb75
 5361 0b6f 05       		.uleb128 0x5
 5362 0b70 03       		.byte	0x3
 5363 0b71 00000000 		.4byte	tx2Buffer
 5364 0b75 06       		.uleb128 0x6
 5365 0b76 E40A0000 		.4byte	0xae4
 5366 0b7a 23       		.uleb128 0x23
 5367 0b7b 28030000 		.4byte	.LASF141
 5368 0b7f 01       		.byte	0x1
 5369 0b80 A9       		.byte	0xa9
 5370 0b81 36010000 		.4byte	0x136
 5371 0b85 05       		.uleb128 0x5
 5372 0b86 03       		.byte	0x3
 5373 0b87 00000000 		.4byte	rx2Channel
 5374 0b8b 23       		.uleb128 0x23
 5375 0b8c CE070000 		.4byte	.LASF142
 5376 0b90 01       		.byte	0x1
 5377 0b91 AA       		.byte	0xaa
 5378 0b92 36010000 		.4byte	0x136
 5379 0b96 05       		.uleb128 0x5
 5380 0b97 03       		.byte	0x3
 5381 0b98 00000000 		.4byte	rx2TD
 5382 0b9c 23       		.uleb128 0x23
 5383 0b9d 5C040000 		.4byte	.LASF143
 5384 0ba1 01       		.byte	0x1
 5385 0ba2 AB       		.byte	0xab
 5386 0ba3 AD0B0000 		.4byte	0xbad
 5387 0ba7 05       		.uleb128 0x5
 5388 0ba8 03       		.byte	0x3
 5389 0ba9 00000000 		.4byte	rx2Buffer
 5390 0bad 06       		.uleb128 0x6
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 119


 5391 0bae E40A0000 		.4byte	0xae4
 5392 0bb2 23       		.uleb128 0x23
 5393 0bb3 33050000 		.4byte	.LASF144
 5394 0bb7 01       		.byte	0x1
 5395 0bb8 AD       		.byte	0xad
 5396 0bb9 C30B0000 		.4byte	0xbc3
 5397 0bbd 05       		.uleb128 0x5
 5398 0bbe 03       		.byte	0x3
 5399 0bbf 00000000 		.4byte	tx2BufferTemp
 5400 0bc3 06       		.uleb128 0x6
 5401 0bc4 E40A0000 		.4byte	0xae4
 5402 0bc8 23       		.uleb128 0x23
 5403 0bc9 49060000 		.4byte	.LASF145
 5404 0bcd 01       		.byte	0x1
 5405 0bce B1       		.byte	0xb1
 5406 0bcf 39070000 		.4byte	0x739
 5407 0bd3 05       		.uleb128 0x5
 5408 0bd4 03       		.byte	0x3
 5409 0bd5 00000000 		.4byte	array
 5410 0bd9 23       		.uleb128 0x23
 5411 0bda 3F090000 		.4byte	.LASF146
 5412 0bde 01       		.byte	0x1
 5413 0bdf B4       		.byte	0xb4
 5414 0be0 03020000 		.4byte	0x203
 5415 0be4 05       		.uleb128 0x5
 5416 0be5 03       		.byte	0x3
 5417 0be6 00000000 		.4byte	eepromReturnValue
 5418 0bea 23       		.uleb128 0x23
 5419 0beb 09000000 		.4byte	.LASF147
 5420 0bef 01       		.byte	0x1
 5421 0bf0 C0       		.byte	0xc0
 5422 0bf1 D9000000 		.4byte	0xd9
 5423 0bf5 05       		.uleb128 0x5
 5424 0bf6 03       		.byte	0x3
 5425 0bf7 00000000 		.4byte	eeprom_cnt
 5426 0bfb 23       		.uleb128 0x23
 5427 0bfc 10050000 		.4byte	.LASF88
 5428 0c00 01       		.byte	0x1
 5429 0c01 C1       		.byte	0xc1
 5430 0c02 1E010000 		.4byte	0x11e
 5431 0c06 05       		.uleb128 0x5
 5432 0c07 03       		.byte	0x3
 5433 0c08 00000000 		.4byte	status
 5434 0c0c 24       		.uleb128 0x24
 5435 0c0d 70747200 		.ascii	"ptr\000"
 5436 0c11 01       		.byte	0x1
 5437 0c12 C2       		.byte	0xc2
 5438 0c13 1D0C0000 		.4byte	0xc1d
 5439 0c17 05       		.uleb128 0x5
 5440 0c18 03       		.byte	0x3
 5441 0c19 00000000 		.4byte	ptr
 5442 0c1d 1C       		.uleb128 0x1c
 5443 0c1e 04       		.byte	0x4
 5444 0c1f 280C0000 		.4byte	0xc28
 5445 0c23 22       		.uleb128 0x22
 5446 0c24 D9000000 		.4byte	0xd9
 5447 0c28 06       		.uleb128 0x6
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 120


 5448 0c29 230C0000 		.4byte	0xc23
 5449 0c2d 23       		.uleb128 0x23
 5450 0c2e 19060000 		.4byte	.LASF148
 5451 0c32 01       		.byte	0x1
 5452 0c33 C3       		.byte	0xc3
 5453 0c34 3E0C0000 		.4byte	0xc3e
 5454 0c38 05       		.uleb128 0x5
 5455 0c39 03       		.byte	0x3
 5456 0c3a 00000000 		.4byte	barCount
 5457 0c3e 06       		.uleb128 0x6
 5458 0c3f 94000000 		.4byte	0x94
 5459 0c43 07       		.uleb128 0x7
 5460 0c44 94000000 		.4byte	0x94
 5461 0c48 590C0000 		.4byte	0xc59
 5462 0c4c 08       		.uleb128 0x8
 5463 0c4d 42010000 		.4byte	0x142
 5464 0c51 03       		.byte	0x3
 5465 0c52 08       		.uleb128 0x8
 5466 0c53 42010000 		.4byte	0x142
 5467 0c57 01       		.byte	0x1
 5468 0c58 00       		.byte	0
 5469 0c59 23       		.uleb128 0x23
 5470 0c5a 47030000 		.4byte	.LASF149
 5471 0c5e 01       		.byte	0x1
 5472 0c5f C7       		.byte	0xc7
 5473 0c60 430C0000 		.4byte	0xc43
 5474 0c64 05       		.uleb128 0x5
 5475 0c65 03       		.byte	0x3
 5476 0c66 00000000 		.4byte	stringStates
 5477 0c6a 25       		.uleb128 0x25
 5478 0c6b B2060000 		.4byte	.LASF150
 5479 0c6f 01       		.byte	0x1
 5480 0c70 0101     		.2byte	0x101
 5481 0c72 3E0C0000 		.4byte	0xc3e
 5482 0c76 05       		.uleb128 0x5
 5483 0c77 03       		.byte	0x3
 5484 0c78 00000000 		.4byte	whichLinearSensor
 5485 0c7c 25       		.uleb128 0x25
 5486 0c7d 9E070000 		.4byte	.LASF151
 5487 0c81 01       		.byte	0x1
 5488 0c82 0A01     		.2byte	0x10a
 5489 0c84 3E0C0000 		.4byte	0xc3e
 5490 0c88 05       		.uleb128 0x5
 5491 0c89 03       		.byte	0x3
 5492 0c8a 00000000 		.4byte	testVar
 5493 0c8e 25       		.uleb128 0x25
 5494 0c8f 81030000 		.4byte	.LASF152
 5495 0c93 01       		.byte	0x1
 5496 0c94 0B01     		.2byte	0x10b
 5497 0c96 260A0000 		.4byte	0xa26
 5498 0c9a 05       		.uleb128 0x5
 5499 0c9b 03       		.byte	0x3
 5500 0c9c 00000000 		.4byte	lastNotes
 5501 0ca0 25       		.uleb128 0x25
 5502 0ca1 0E070000 		.4byte	.LASF153
 5503 0ca5 01       		.byte	0x1
 5504 0ca6 0C01     		.2byte	0x10c
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 121


 5505 0ca8 94000000 		.4byte	0x94
 5506 0cac 05       		.uleb128 0x5
 5507 0cad 03       		.byte	0x3
 5508 0cae 00000000 		.4byte	frettedState
 5509 0cb2 25       		.uleb128 0x25
 5510 0cb3 A6030000 		.4byte	.LASF154
 5511 0cb7 01       		.byte	0x1
 5512 0cb8 0D01     		.2byte	0x10d
 5513 0cba 94000000 		.4byte	0x94
 5514 0cbe 05       		.uleb128 0x5
 5515 0cbf 03       		.byte	0x3
 5516 0cc0 00000000 		.4byte	polyMode
 5517 0cc4 25       		.uleb128 0x25
 5518 0cc5 6A090000 		.4byte	.LASF155
 5519 0cc9 01       		.byte	0x1
 5520 0cca 0F01     		.2byte	0x10f
 5521 0ccc 7F0A0000 		.4byte	0xa7f
 5522 0cd0 05       		.uleb128 0x5
 5523 0cd1 03       		.byte	0x3
 5524 0cd2 00000000 		.4byte	pitchBendsPerString
 5525 0cd6 25       		.uleb128 0x25
 5526 0cd7 EC010000 		.4byte	.LASF156
 5527 0cdb 01       		.byte	0x1
 5528 0cdc 1001     		.2byte	0x110
 5529 0cde 260A0000 		.4byte	0xa26
 5530 0ce2 05       		.uleb128 0x5
 5531 0ce3 03       		.byte	0x3
 5532 0ce4 00000000 		.4byte	openStringCount
 5533 0ce8 25       		.uleb128 0x25
 5534 0ce9 D5010000 		.4byte	.LASF157
 5535 0ced 01       		.byte	0x1
 5536 0cee 1101     		.2byte	0x111
 5537 0cf0 94000000 		.4byte	0x94
 5538 0cf4 05       		.uleb128 0x5
 5539 0cf5 03       		.byte	0x3
 5540 0cf6 00000000 		.4byte	loudestString
 5541 0cfa 25       		.uleb128 0x25
 5542 0cfb 33030000 		.4byte	.LASF158
 5543 0cff 01       		.byte	0x1
 5544 0d00 1201     		.2byte	0x112
 5545 0d02 CE000000 		.4byte	0xce
 5546 0d06 05       		.uleb128 0x5
 5547 0d07 03       		.byte	0x3
 5548 0d08 00000000 		.4byte	timeSinceLastAttack
 5549 0d0c 25       		.uleb128 0x25
 5550 0d0d C4060000 		.4byte	.LASF159
 5551 0d11 01       		.byte	0x1
 5552 0d12 1301     		.2byte	0x113
 5553 0d14 7F0A0000 		.4byte	0xa7f
 5554 0d18 05       		.uleb128 0x5
 5555 0d19 03       		.byte	0x3
 5556 0d1a 00000000 		.4byte	previousHysteresisStates
 5557 0d1e 25       		.uleb128 0x25
 5558 0d1f F5060000 		.4byte	.LASF160
 5559 0d23 01       		.byte	0x1
 5560 0d24 1401     		.2byte	0x114
 5561 0d26 7F0A0000 		.4byte	0xa7f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 122


 5562 0d2a 05       		.uleb128 0x5
 5563 0d2b 03       		.byte	0x3
 5564 0d2c 00000000 		.4byte	openStringFreqs
 5565 0d30 25       		.uleb128 0x25
 5566 0d31 E6060000 		.4byte	.LASF161
 5567 0d35 01       		.byte	0x1
 5568 0d36 1501     		.2byte	0x115
 5569 0d38 7F0A0000 		.4byte	0xa7f
 5570 0d3c 05       		.uleb128 0x5
 5571 0d3d 03       		.byte	0x3
 5572 0d3e 00000000 		.4byte	openStringMIDI
 5573 0d42 25       		.uleb128 0x25
 5574 0d43 1C0A0000 		.4byte	.LASF162
 5575 0d47 01       		.byte	0x1
 5576 0d48 1601     		.2byte	0x116
 5577 0d4a 7F0A0000 		.4byte	0xa7f
 5578 0d4e 05       		.uleb128 0x5
 5579 0d4f 03       		.byte	0x3
 5580 0d50 00000000 		.4byte	invStringMappedPositions
 5581 0d54 25       		.uleb128 0x25
 5582 0d55 FE030000 		.4byte	.LASF163
 5583 0d59 01       		.byte	0x1
 5584 0d5a 1701     		.2byte	0x117
 5585 0d5c 7F0A0000 		.4byte	0xa7f
 5586 0d60 05       		.uleb128 0x5
 5587 0d61 03       		.byte	0x3
 5588 0d62 00000000 		.4byte	stringMIDI
 5589 0d66 25       		.uleb128 0x25
 5590 0d67 0A060000 		.4byte	.LASF164
 5591 0d6b 01       		.byte	0x1
 5592 0d6c 1801     		.2byte	0x118
 5593 0d6e 7F0A0000 		.4byte	0xa7f
 5594 0d72 05       		.uleb128 0x5
 5595 0d73 03       		.byte	0x3
 5596 0d74 00000000 		.4byte	stringMIDIPrev
 5597 0d78 25       		.uleb128 0x25
 5598 0d79 6E040000 		.4byte	.LASF165
 5599 0d7d 01       		.byte	0x1
 5600 0d7e 1901     		.2byte	0x119
 5601 0d80 09010000 		.4byte	0x109
 5602 0d84 05       		.uleb128 0x5
 5603 0d85 03       		.byte	0x3
 5604 0d86 00000000 		.4byte	linearHysteresis
 5605 0d8a 25       		.uleb128 0x25
 5606 0d8b 0E040000 		.4byte	.LASF166
 5607 0d8f 01       		.byte	0x1
 5608 0d90 1A01     		.2byte	0x11a
 5609 0d92 7F0A0000 		.4byte	0xa7f
 5610 0d96 05       		.uleb128 0x5
 5611 0d97 03       		.byte	0x3
 5612 0d98 00000000 		.4byte	hp_y
 5613 0d9c 25       		.uleb128 0x25
 5614 0d9d 09040000 		.4byte	.LASF167
 5615 0da1 01       		.byte	0x1
 5616 0da2 1B01     		.2byte	0x11b
 5617 0da4 7F0A0000 		.4byte	0xa7f
 5618 0da8 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 123


 5619 0da9 03       		.byte	0x3
 5620 0daa 00000000 		.4byte	hp_x
 5621 0dae 25       		.uleb128 0x25
 5622 0daf AF030000 		.4byte	.LASF168
 5623 0db3 01       		.byte	0x1
 5624 0db4 1C01     		.2byte	0x11c
 5625 0db6 09010000 		.4byte	0x109
 5626 0dba 05       		.uleb128 0x5
 5627 0dbb 03       		.byte	0x3
 5628 0dbc 00000000 		.4byte	hp_R
 5629 0dc0 25       		.uleb128 0x25
 5630 0dc1 CD080000 		.4byte	.LASF169
 5631 0dc5 01       		.byte	0x1
 5632 0dc6 1E01     		.2byte	0x11e
 5633 0dc8 7F0A0000 		.4byte	0xa7f
 5634 0dcc 05       		.uleb128 0x5
 5635 0dcd 03       		.byte	0x3
 5636 0dce 00000000 		.4byte	vibratoCrossfade
 5637 0dd2 25       		.uleb128 0x25
 5638 0dd3 79070000 		.4byte	.LASF170
 5639 0dd7 01       		.byte	0x1
 5640 0dd8 1F01     		.2byte	0x11f
 5641 0dda 260A0000 		.4byte	0xa26
 5642 0dde 05       		.uleb128 0x5
 5643 0ddf 03       		.byte	0x3
 5644 0de0 00000000 		.4byte	crossFadeStartCount
 5645 0de4 25       		.uleb128 0x25
 5646 0de5 4C0A0000 		.4byte	.LASF171
 5647 0de9 01       		.byte	0x1
 5648 0dea 2101     		.2byte	0x121
 5649 0dec 94000000 		.4byte	0x94
 5650 0df0 05       		.uleb128 0x5
 5651 0df1 03       		.byte	0x3
 5652 0df2 00000000 		.4byte	previousPitchBendsSent
 5653 0df6 25       		.uleb128 0x25
 5654 0df7 54070000 		.4byte	.LASF172
 5655 0dfb 01       		.byte	0x1
 5656 0dfc 2201     		.2byte	0x122
 5657 0dfe 14020000 		.4byte	0x214
 5658 0e02 05       		.uleb128 0x5
 5659 0e03 03       		.byte	0x3
 5660 0e04 00000000 		.4byte	knobs
 5661 0e08 25       		.uleb128 0x25
 5662 0e09 3A080000 		.4byte	.LASF173
 5663 0e0d 01       		.byte	0x1
 5664 0e0e 2301     		.2byte	0x123
 5665 0e10 94000000 		.4byte	0x94
 5666 0e14 05       		.uleb128 0x5
 5667 0e15 03       		.byte	0x3
 5668 0e16 00000000 		.4byte	buttons
 5669 0e1a 25       		.uleb128 0x25
 5670 0e1b 51040000 		.4byte	.LASF174
 5671 0e1f 01       		.byte	0x1
 5672 0e20 2501     		.2byte	0x125
 5673 0e22 94000000 		.4byte	0x94
 5674 0e26 05       		.uleb128 0x5
 5675 0e27 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 124


 5676 0e28 00000000 		.4byte	firPointer
 5677 0e2c 07       		.uleb128 0x7
 5678 0e2d A2000000 		.4byte	0xa2
 5679 0e31 3C0E0000 		.4byte	0xe3c
 5680 0e35 08       		.uleb128 0x8
 5681 0e36 42010000 		.4byte	0x142
 5682 0e3a 04       		.byte	0x4
 5683 0e3b 00       		.byte	0
 5684 0e3c 25       		.uleb128 0x25
 5685 0e3d FE040000 		.4byte	.LASF175
 5686 0e41 01       		.byte	0x1
 5687 0e42 2601     		.2byte	0x126
 5688 0e44 2C0E0000 		.4byte	0xe2c
 5689 0e48 05       		.uleb128 0x5
 5690 0e49 03       		.byte	0x3
 5691 0e4a 00000000 		.4byte	knobs7bit
 5692 0e4e 07       		.uleb128 0x7
 5693 0e4f AD000000 		.4byte	0xad
 5694 0e53 5E0E0000 		.4byte	0xe5e
 5695 0e57 08       		.uleb128 0x8
 5696 0e58 42010000 		.4byte	0x142
 5697 0e5c 04       		.byte	0x4
 5698 0e5d 00       		.byte	0
 5699 0e5e 25       		.uleb128 0x25
 5700 0e5f D4070000 		.4byte	.LASF176
 5701 0e63 01       		.byte	0x1
 5702 0e64 2701     		.2byte	0x127
 5703 0e66 4E0E0000 		.4byte	0xe4e
 5704 0e6a 05       		.uleb128 0x5
 5705 0e6b 03       		.byte	0x3
 5706 0e6c 00000000 		.4byte	knobs7bitPrev
 5707 0e70 25       		.uleb128 0x25
 5708 0e71 B7090000 		.4byte	.LASF177
 5709 0e75 01       		.byte	0x1
 5710 0e76 2801     		.2byte	0x128
 5711 0e78 4E0E0000 		.4byte	0xe4e
 5712 0e7c 05       		.uleb128 0x5
 5713 0e7d 03       		.byte	0x3
 5714 0e7e 00000000 		.4byte	knobs7bitPrevLS
 5715 0e82 25       		.uleb128 0x25
 5716 0e83 AF020000 		.4byte	.LASF178
 5717 0e87 01       		.byte	0x1
 5718 0e88 2901     		.2byte	0x129
 5719 0e8a AD000000 		.4byte	0xad
 5720 0e8e 05       		.uleb128 0x5
 5721 0e8f 03       		.byte	0x3
 5722 0e90 00000000 		.4byte	knobs7bitHysteresis
 5723 0e94 25       		.uleb128 0x25
 5724 0e95 3A000000 		.4byte	.LASF179
 5725 0e99 01       		.byte	0x1
 5726 0e9a 2B01     		.2byte	0x12b
 5727 0e9c 2F020000 		.4byte	0x22f
 5728 0ea0 05       		.uleb128 0x5
 5729 0ea1 03       		.byte	0x3
 5730 0ea2 00000000 		.4byte	linFirPointer
 5731 0ea6 25       		.uleb128 0x25
 5732 0ea7 65020000 		.4byte	.LASF180
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 125


 5733 0eab 01       		.byte	0x1
 5734 0eac 2C01     		.2byte	0x12c
 5735 0eae 5A090000 		.4byte	0x95a
 5736 0eb2 05       		.uleb128 0x5
 5737 0eb3 03       		.byte	0x3
 5738 0eb4 00000000 		.4byte	linearFIR
 5739 0eb8 07       		.uleb128 0x7
 5740 0eb9 C3000000 		.4byte	0xc3
 5741 0ebd C80E0000 		.4byte	0xec8
 5742 0ec1 08       		.uleb128 0x8
 5743 0ec2 42010000 		.4byte	0x142
 5744 0ec6 03       		.byte	0x3
 5745 0ec7 00       		.byte	0
 5746 0ec8 25       		.uleb128 0x25
 5747 0ec9 BA050000 		.4byte	.LASF181
 5748 0ecd 01       		.byte	0x1
 5749 0ece 2D01     		.2byte	0x12d
 5750 0ed0 B80E0000 		.4byte	0xeb8
 5751 0ed4 05       		.uleb128 0x5
 5752 0ed5 03       		.byte	0x3
 5753 0ed6 00000000 		.4byte	linearSmoothed
 5754 0eda 25       		.uleb128 0x25
 5755 0edb 5A080000 		.4byte	.LASF182
 5756 0edf 01       		.byte	0x1
 5757 0ee0 2E01     		.2byte	0x12e
 5758 0ee2 B80E0000 		.4byte	0xeb8
 5759 0ee6 05       		.uleb128 0x5
 5760 0ee7 03       		.byte	0x3
 5761 0ee8 00000000 		.4byte	linearSmoothedPrev
 5762 0eec 25       		.uleb128 0x25
 5763 0eed 57020000 		.4byte	.LASF183
 5764 0ef1 01       		.byte	0x1
 5765 0ef2 2F01     		.2byte	0x12f
 5766 0ef4 B80E0000 		.4byte	0xeb8
 5767 0ef8 05       		.uleb128 0x5
 5768 0ef9 03       		.byte	0x3
 5769 0efa 00000000 		.4byte	LHMuteCounter
 5770 0efe 25       		.uleb128 0x25
 5771 0eff BD070000 		.4byte	.LASF184
 5772 0f03 01       		.byte	0x1
 5773 0f04 3001     		.2byte	0x130
 5774 0f06 2F020000 		.4byte	0x22f
 5775 0f0a 05       		.uleb128 0x5
 5776 0f0b 03       		.byte	0x3
 5777 0f0c 00000000 		.4byte	LHMute
 5778 0f10 25       		.uleb128 0x25
 5779 0f11 87060000 		.4byte	.LASF185
 5780 0f15 01       		.byte	0x1
 5781 0f16 3101     		.2byte	0x131
 5782 0f18 2F020000 		.4byte	0x22f
 5783 0f1c 05       		.uleb128 0x5
 5784 0f1d 03       		.byte	0x3
 5785 0f1e 00000000 		.4byte	pitchFreeze
 5786 0f22 07       		.uleb128 0x7
 5787 0f23 09010000 		.4byte	0x109
 5788 0f27 380F0000 		.4byte	0xf38
 5789 0f2b 08       		.uleb128 0x8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 126


 5790 0f2c 42010000 		.4byte	0x142
 5791 0f30 03       		.byte	0x3
 5792 0f31 08       		.uleb128 0x8
 5793 0f32 42010000 		.4byte	0x142
 5794 0f36 1F       		.byte	0x1f
 5795 0f37 00       		.byte	0
 5796 0f38 25       		.uleb128 0x25
 5797 0f39 A9050000 		.4byte	.LASF186
 5798 0f3d 01       		.byte	0x1
 5799 0f3e 3201     		.2byte	0x132
 5800 0f40 220F0000 		.4byte	0xf22
 5801 0f44 05       		.uleb128 0x5
 5802 0f45 03       		.byte	0x3
 5803 0f46 00000000 		.4byte	pitchBendHistory
 5804 0f4a 07       		.uleb128 0x7
 5805 0f4b AD000000 		.4byte	0xad
 5806 0f4f 5A0F0000 		.4byte	0xf5a
 5807 0f53 08       		.uleb128 0x8
 5808 0f54 42010000 		.4byte	0x142
 5809 0f58 03       		.byte	0x3
 5810 0f59 00       		.byte	0
 5811 0f5a 25       		.uleb128 0x25
 5812 0f5b C3020000 		.4byte	.LASF187
 5813 0f5f 01       		.byte	0x1
 5814 0f60 3301     		.2byte	0x133
 5815 0f62 4A0F0000 		.4byte	0xf4a
 5816 0f66 05       		.uleb128 0x5
 5817 0f67 03       		.byte	0x3
 5818 0f68 00000000 		.4byte	pitchBendHistoryPointer
 5819 0f6c 07       		.uleb128 0x7
 5820 0f6d 94000000 		.4byte	0x94
 5821 0f71 820F0000 		.4byte	0xf82
 5822 0f75 08       		.uleb128 0x8
 5823 0f76 42010000 		.4byte	0x142
 5824 0f7a 1F       		.byte	0x1f
 5825 0f7b 08       		.uleb128 0x8
 5826 0f7c 42010000 		.4byte	0x142
 5827 0f80 04       		.byte	0x4
 5828 0f81 00       		.byte	0
 5829 0f82 25       		.uleb128 0x25
 5830 0f83 01020000 		.4byte	.LASF188
 5831 0f87 01       		.byte	0x1
 5832 0f88 3501     		.2byte	0x135
 5833 0f8a 6C0F0000 		.4byte	0xf6c
 5834 0f8e 05       		.uleb128 0x5
 5835 0f8f 03       		.byte	0x3
 5836 0f90 00000000 		.4byte	skippedNotes
 5837 0f94 25       		.uleb128 0x25
 5838 0f95 17050000 		.4byte	.LASF189
 5839 0f99 01       		.byte	0x1
 5840 0f9a 3601     		.2byte	0x136
 5841 0f9c 94000000 		.4byte	0x94
 5842 0fa0 05       		.uleb128 0x5
 5843 0fa1 03       		.byte	0x3
 5844 0fa2 00000000 		.4byte	skipPointer
 5845 0fa6 25       		.uleb128 0x25
 5846 0fa7 A0050000 		.4byte	.LASF190
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 127


 5847 0fab 01       		.byte	0x1
 5848 0fac 3801     		.2byte	0x138
 5849 0fae A2000000 		.4byte	0xa2
 5850 0fb2 05       		.uleb128 0x5
 5851 0fb3 03       		.byte	0x3
 5852 0fb4 00000000 		.4byte	bufCount
 5853 0fb8 25       		.uleb128 0x25
 5854 0fb9 B4070000 		.4byte	.LASF191
 5855 0fbd 01       		.byte	0x1
 5856 0fbe 7203     		.2byte	0x372
 5857 0fc0 2F020000 		.4byte	0x22f
 5858 0fc4 05       		.uleb128 0x5
 5859 0fc5 03       		.byte	0x3
 5860 0fc6 00000000 		.4byte	tempMIDI
 5861 0fca 25       		.uleb128 0x25
 5862 0fcb 54030000 		.4byte	.LASF192
 5863 0fcf 01       		.byte	0x1
 5864 0fd0 C703     		.2byte	0x3c7
 5865 0fd2 FD000000 		.4byte	0xfd
 5866 0fd6 05       		.uleb128 0x5
 5867 0fd7 03       		.byte	0x3
 5868 0fd8 00000000 		.4byte	iVtherm
 5869 0fdc 00       		.byte	0
 5870              		.section	.debug_abbrev,"",%progbits
 5871              	.Ldebug_abbrev0:
 5872 0000 01       		.uleb128 0x1
 5873 0001 11       		.uleb128 0x11
 5874 0002 01       		.byte	0x1
 5875 0003 25       		.uleb128 0x25
 5876 0004 0E       		.uleb128 0xe
 5877 0005 13       		.uleb128 0x13
 5878 0006 0B       		.uleb128 0xb
 5879 0007 03       		.uleb128 0x3
 5880 0008 0E       		.uleb128 0xe
 5881 0009 1B       		.uleb128 0x1b
 5882 000a 0E       		.uleb128 0xe
 5883 000b 55       		.uleb128 0x55
 5884 000c 17       		.uleb128 0x17
 5885 000d 11       		.uleb128 0x11
 5886 000e 01       		.uleb128 0x1
 5887 000f 10       		.uleb128 0x10
 5888 0010 17       		.uleb128 0x17
 5889 0011 00       		.byte	0
 5890 0012 00       		.byte	0
 5891 0013 02       		.uleb128 0x2
 5892 0014 24       		.uleb128 0x24
 5893 0015 00       		.byte	0
 5894 0016 0B       		.uleb128 0xb
 5895 0017 0B       		.uleb128 0xb
 5896 0018 3E       		.uleb128 0x3e
 5897 0019 0B       		.uleb128 0xb
 5898 001a 03       		.uleb128 0x3
 5899 001b 0E       		.uleb128 0xe
 5900 001c 00       		.byte	0
 5901 001d 00       		.byte	0
 5902 001e 03       		.uleb128 0x3
 5903 001f 16       		.uleb128 0x16
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 128


 5904 0020 00       		.byte	0
 5905 0021 03       		.uleb128 0x3
 5906 0022 0E       		.uleb128 0xe
 5907 0023 3A       		.uleb128 0x3a
 5908 0024 0B       		.uleb128 0xb
 5909 0025 3B       		.uleb128 0x3b
 5910 0026 0B       		.uleb128 0xb
 5911 0027 49       		.uleb128 0x49
 5912 0028 13       		.uleb128 0x13
 5913 0029 00       		.byte	0
 5914 002a 00       		.byte	0
 5915 002b 04       		.uleb128 0x4
 5916 002c 24       		.uleb128 0x24
 5917 002d 00       		.byte	0
 5918 002e 0B       		.uleb128 0xb
 5919 002f 0B       		.uleb128 0xb
 5920 0030 3E       		.uleb128 0x3e
 5921 0031 0B       		.uleb128 0xb
 5922 0032 03       		.uleb128 0x3
 5923 0033 08       		.uleb128 0x8
 5924 0034 00       		.byte	0
 5925 0035 00       		.byte	0
 5926 0036 05       		.uleb128 0x5
 5927 0037 16       		.uleb128 0x16
 5928 0038 00       		.byte	0
 5929 0039 03       		.uleb128 0x3
 5930 003a 0E       		.uleb128 0xe
 5931 003b 3A       		.uleb128 0x3a
 5932 003c 0B       		.uleb128 0xb
 5933 003d 3B       		.uleb128 0x3b
 5934 003e 05       		.uleb128 0x5
 5935 003f 49       		.uleb128 0x49
 5936 0040 13       		.uleb128 0x13
 5937 0041 00       		.byte	0
 5938 0042 00       		.byte	0
 5939 0043 06       		.uleb128 0x6
 5940 0044 35       		.uleb128 0x35
 5941 0045 00       		.byte	0
 5942 0046 49       		.uleb128 0x49
 5943 0047 13       		.uleb128 0x13
 5944 0048 00       		.byte	0
 5945 0049 00       		.byte	0
 5946 004a 07       		.uleb128 0x7
 5947 004b 01       		.uleb128 0x1
 5948 004c 01       		.byte	0x1
 5949 004d 49       		.uleb128 0x49
 5950 004e 13       		.uleb128 0x13
 5951 004f 01       		.uleb128 0x1
 5952 0050 13       		.uleb128 0x13
 5953 0051 00       		.byte	0
 5954 0052 00       		.byte	0
 5955 0053 08       		.uleb128 0x8
 5956 0054 21       		.uleb128 0x21
 5957 0055 00       		.byte	0
 5958 0056 49       		.uleb128 0x49
 5959 0057 13       		.uleb128 0x13
 5960 0058 2F       		.uleb128 0x2f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 129


 5961 0059 0B       		.uleb128 0xb
 5962 005a 00       		.byte	0
 5963 005b 00       		.byte	0
 5964 005c 09       		.uleb128 0x9
 5965 005d 13       		.uleb128 0x13
 5966 005e 01       		.byte	0x1
 5967 005f 0B       		.uleb128 0xb
 5968 0060 0B       		.uleb128 0xb
 5969 0061 3A       		.uleb128 0x3a
 5970 0062 0B       		.uleb128 0xb
 5971 0063 3B       		.uleb128 0x3b
 5972 0064 05       		.uleb128 0x5
 5973 0065 01       		.uleb128 0x1
 5974 0066 13       		.uleb128 0x13
 5975 0067 00       		.byte	0
 5976 0068 00       		.byte	0
 5977 0069 0A       		.uleb128 0xa
 5978 006a 0D       		.uleb128 0xd
 5979 006b 00       		.byte	0
 5980 006c 03       		.uleb128 0x3
 5981 006d 0E       		.uleb128 0xe
 5982 006e 3A       		.uleb128 0x3a
 5983 006f 0B       		.uleb128 0xb
 5984 0070 3B       		.uleb128 0x3b
 5985 0071 05       		.uleb128 0x5
 5986 0072 49       		.uleb128 0x49
 5987 0073 13       		.uleb128 0x13
 5988 0074 38       		.uleb128 0x38
 5989 0075 0B       		.uleb128 0xb
 5990 0076 00       		.byte	0
 5991 0077 00       		.byte	0
 5992 0078 0B       		.uleb128 0xb
 5993 0079 04       		.uleb128 0x4
 5994 007a 01       		.byte	0x1
 5995 007b 0B       		.uleb128 0xb
 5996 007c 0B       		.uleb128 0xb
 5997 007d 49       		.uleb128 0x49
 5998 007e 13       		.uleb128 0x13
 5999 007f 3A       		.uleb128 0x3a
 6000 0080 0B       		.uleb128 0xb
 6001 0081 3B       		.uleb128 0x3b
 6002 0082 05       		.uleb128 0x5
 6003 0083 01       		.uleb128 0x1
 6004 0084 13       		.uleb128 0x13
 6005 0085 00       		.byte	0
 6006 0086 00       		.byte	0
 6007 0087 0C       		.uleb128 0xc
 6008 0088 28       		.uleb128 0x28
 6009 0089 00       		.byte	0
 6010 008a 03       		.uleb128 0x3
 6011 008b 0E       		.uleb128 0xe
 6012 008c 1C       		.uleb128 0x1c
 6013 008d 0B       		.uleb128 0xb
 6014 008e 00       		.byte	0
 6015 008f 00       		.byte	0
 6016 0090 0D       		.uleb128 0xd
 6017 0091 2E       		.uleb128 0x2e
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 130


 6018 0092 00       		.byte	0
 6019 0093 3F       		.uleb128 0x3f
 6020 0094 19       		.uleb128 0x19
 6021 0095 03       		.uleb128 0x3
 6022 0096 0E       		.uleb128 0xe
 6023 0097 3A       		.uleb128 0x3a
 6024 0098 0B       		.uleb128 0xb
 6025 0099 3B       		.uleb128 0x3b
 6026 009a 0B       		.uleb128 0xb
 6027 009b 27       		.uleb128 0x27
 6028 009c 19       		.uleb128 0x19
 6029 009d 11       		.uleb128 0x11
 6030 009e 01       		.uleb128 0x1
 6031 009f 12       		.uleb128 0x12
 6032 00a0 06       		.uleb128 0x6
 6033 00a1 40       		.uleb128 0x40
 6034 00a2 18       		.uleb128 0x18
 6035 00a3 9742     		.uleb128 0x2117
 6036 00a5 19       		.uleb128 0x19
 6037 00a6 00       		.byte	0
 6038 00a7 00       		.byte	0
 6039 00a8 0E       		.uleb128 0xe
 6040 00a9 2E       		.uleb128 0x2e
 6041 00aa 01       		.byte	0x1
 6042 00ab 3F       		.uleb128 0x3f
 6043 00ac 19       		.uleb128 0x19
 6044 00ad 03       		.uleb128 0x3
 6045 00ae 0E       		.uleb128 0xe
 6046 00af 3A       		.uleb128 0x3a
 6047 00b0 0B       		.uleb128 0xb
 6048 00b1 3B       		.uleb128 0x3b
 6049 00b2 0B       		.uleb128 0xb
 6050 00b3 27       		.uleb128 0x27
 6051 00b4 19       		.uleb128 0x19
 6052 00b5 49       		.uleb128 0x49
 6053 00b6 13       		.uleb128 0x13
 6054 00b7 11       		.uleb128 0x11
 6055 00b8 01       		.uleb128 0x1
 6056 00b9 12       		.uleb128 0x12
 6057 00ba 06       		.uleb128 0x6
 6058 00bb 40       		.uleb128 0x40
 6059 00bc 18       		.uleb128 0x18
 6060 00bd 9642     		.uleb128 0x2116
 6061 00bf 19       		.uleb128 0x19
 6062 00c0 01       		.uleb128 0x1
 6063 00c1 13       		.uleb128 0x13
 6064 00c2 00       		.byte	0
 6065 00c3 00       		.byte	0
 6066 00c4 0F       		.uleb128 0xf
 6067 00c5 05       		.uleb128 0x5
 6068 00c6 00       		.byte	0
 6069 00c7 03       		.uleb128 0x3
 6070 00c8 08       		.uleb128 0x8
 6071 00c9 3A       		.uleb128 0x3a
 6072 00ca 0B       		.uleb128 0xb
 6073 00cb 3B       		.uleb128 0x3b
 6074 00cc 0B       		.uleb128 0xb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 131


 6075 00cd 49       		.uleb128 0x49
 6076 00ce 13       		.uleb128 0x13
 6077 00cf 02       		.uleb128 0x2
 6078 00d0 18       		.uleb128 0x18
 6079 00d1 00       		.byte	0
 6080 00d2 00       		.byte	0
 6081 00d3 10       		.uleb128 0x10
 6082 00d4 34       		.uleb128 0x34
 6083 00d5 00       		.byte	0
 6084 00d6 03       		.uleb128 0x3
 6085 00d7 0E       		.uleb128 0xe
 6086 00d8 3A       		.uleb128 0x3a
 6087 00d9 0B       		.uleb128 0xb
 6088 00da 3B       		.uleb128 0x3b
 6089 00db 0B       		.uleb128 0xb
 6090 00dc 49       		.uleb128 0x49
 6091 00dd 13       		.uleb128 0x13
 6092 00de 02       		.uleb128 0x2
 6093 00df 18       		.uleb128 0x18
 6094 00e0 00       		.byte	0
 6095 00e1 00       		.byte	0
 6096 00e2 11       		.uleb128 0x11
 6097 00e3 05       		.uleb128 0x5
 6098 00e4 00       		.byte	0
 6099 00e5 03       		.uleb128 0x3
 6100 00e6 0E       		.uleb128 0xe
 6101 00e7 3A       		.uleb128 0x3a
 6102 00e8 0B       		.uleb128 0xb
 6103 00e9 3B       		.uleb128 0x3b
 6104 00ea 0B       		.uleb128 0xb
 6105 00eb 49       		.uleb128 0x49
 6106 00ec 13       		.uleb128 0x13
 6107 00ed 02       		.uleb128 0x2
 6108 00ee 18       		.uleb128 0x18
 6109 00ef 00       		.byte	0
 6110 00f0 00       		.byte	0
 6111 00f1 12       		.uleb128 0x12
 6112 00f2 34       		.uleb128 0x34
 6113 00f3 00       		.byte	0
 6114 00f4 03       		.uleb128 0x3
 6115 00f5 08       		.uleb128 0x8
 6116 00f6 3A       		.uleb128 0x3a
 6117 00f7 0B       		.uleb128 0xb
 6118 00f8 3B       		.uleb128 0x3b
 6119 00f9 0B       		.uleb128 0xb
 6120 00fa 49       		.uleb128 0x49
 6121 00fb 13       		.uleb128 0x13
 6122 00fc 02       		.uleb128 0x2
 6123 00fd 18       		.uleb128 0x18
 6124 00fe 00       		.byte	0
 6125 00ff 00       		.byte	0
 6126 0100 13       		.uleb128 0x13
 6127 0101 2E       		.uleb128 0x2e
 6128 0102 01       		.byte	0x1
 6129 0103 3F       		.uleb128 0x3f
 6130 0104 19       		.uleb128 0x19
 6131 0105 03       		.uleb128 0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 132


 6132 0106 08       		.uleb128 0x8
 6133 0107 3A       		.uleb128 0x3a
 6134 0108 0B       		.uleb128 0xb
 6135 0109 3B       		.uleb128 0x3b
 6136 010a 05       		.uleb128 0x5
 6137 010b 27       		.uleb128 0x27
 6138 010c 19       		.uleb128 0x19
 6139 010d 49       		.uleb128 0x49
 6140 010e 13       		.uleb128 0x13
 6141 010f 11       		.uleb128 0x11
 6142 0110 01       		.uleb128 0x1
 6143 0111 12       		.uleb128 0x12
 6144 0112 06       		.uleb128 0x6
 6145 0113 40       		.uleb128 0x40
 6146 0114 18       		.uleb128 0x18
 6147 0115 9642     		.uleb128 0x2116
 6148 0117 19       		.uleb128 0x19
 6149 0118 01       		.uleb128 0x1
 6150 0119 13       		.uleb128 0x13
 6151 011a 00       		.byte	0
 6152 011b 00       		.byte	0
 6153 011c 14       		.uleb128 0x14
 6154 011d 05       		.uleb128 0x5
 6155 011e 00       		.byte	0
 6156 011f 03       		.uleb128 0x3
 6157 0120 0E       		.uleb128 0xe
 6158 0121 3A       		.uleb128 0x3a
 6159 0122 0B       		.uleb128 0xb
 6160 0123 3B       		.uleb128 0x3b
 6161 0124 05       		.uleb128 0x5
 6162 0125 49       		.uleb128 0x49
 6163 0126 13       		.uleb128 0x13
 6164 0127 02       		.uleb128 0x2
 6165 0128 18       		.uleb128 0x18
 6166 0129 00       		.byte	0
 6167 012a 00       		.byte	0
 6168 012b 15       		.uleb128 0x15
 6169 012c 2E       		.uleb128 0x2e
 6170 012d 00       		.byte	0
 6171 012e 3F       		.uleb128 0x3f
 6172 012f 19       		.uleb128 0x19
 6173 0130 03       		.uleb128 0x3
 6174 0131 0E       		.uleb128 0xe
 6175 0132 3A       		.uleb128 0x3a
 6176 0133 0B       		.uleb128 0xb
 6177 0134 3B       		.uleb128 0x3b
 6178 0135 05       		.uleb128 0x5
 6179 0136 27       		.uleb128 0x27
 6180 0137 19       		.uleb128 0x19
 6181 0138 11       		.uleb128 0x11
 6182 0139 01       		.uleb128 0x1
 6183 013a 12       		.uleb128 0x12
 6184 013b 06       		.uleb128 0x6
 6185 013c 40       		.uleb128 0x40
 6186 013d 18       		.uleb128 0x18
 6187 013e 9642     		.uleb128 0x2116
 6188 0140 19       		.uleb128 0x19
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 133


 6189 0141 00       		.byte	0
 6190 0142 00       		.byte	0
 6191 0143 16       		.uleb128 0x16
 6192 0144 2E       		.uleb128 0x2e
 6193 0145 01       		.byte	0x1
 6194 0146 3F       		.uleb128 0x3f
 6195 0147 19       		.uleb128 0x19
 6196 0148 03       		.uleb128 0x3
 6197 0149 0E       		.uleb128 0xe
 6198 014a 3A       		.uleb128 0x3a
 6199 014b 0B       		.uleb128 0xb
 6200 014c 3B       		.uleb128 0x3b
 6201 014d 05       		.uleb128 0x5
 6202 014e 27       		.uleb128 0x27
 6203 014f 19       		.uleb128 0x19
 6204 0150 49       		.uleb128 0x49
 6205 0151 13       		.uleb128 0x13
 6206 0152 11       		.uleb128 0x11
 6207 0153 01       		.uleb128 0x1
 6208 0154 12       		.uleb128 0x12
 6209 0155 06       		.uleb128 0x6
 6210 0156 40       		.uleb128 0x40
 6211 0157 18       		.uleb128 0x18
 6212 0158 9642     		.uleb128 0x2116
 6213 015a 19       		.uleb128 0x19
 6214 015b 01       		.uleb128 0x1
 6215 015c 13       		.uleb128 0x13
 6216 015d 00       		.byte	0
 6217 015e 00       		.byte	0
 6218 015f 17       		.uleb128 0x17
 6219 0160 0B       		.uleb128 0xb
 6220 0161 01       		.byte	0x1
 6221 0162 11       		.uleb128 0x11
 6222 0163 01       		.uleb128 0x1
 6223 0164 12       		.uleb128 0x12
 6224 0165 06       		.uleb128 0x6
 6225 0166 01       		.uleb128 0x1
 6226 0167 13       		.uleb128 0x13
 6227 0168 00       		.byte	0
 6228 0169 00       		.byte	0
 6229 016a 18       		.uleb128 0x18
 6230 016b 34       		.uleb128 0x34
 6231 016c 00       		.byte	0
 6232 016d 03       		.uleb128 0x3
 6233 016e 0E       		.uleb128 0xe
 6234 016f 3A       		.uleb128 0x3a
 6235 0170 0B       		.uleb128 0xb
 6236 0171 3B       		.uleb128 0x3b
 6237 0172 05       		.uleb128 0x5
 6238 0173 49       		.uleb128 0x49
 6239 0174 13       		.uleb128 0x13
 6240 0175 02       		.uleb128 0x2
 6241 0176 18       		.uleb128 0x18
 6242 0177 00       		.byte	0
 6243 0178 00       		.byte	0
 6244 0179 19       		.uleb128 0x19
 6245 017a 0B       		.uleb128 0xb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 134


 6246 017b 01       		.byte	0x1
 6247 017c 11       		.uleb128 0x11
 6248 017d 01       		.uleb128 0x1
 6249 017e 12       		.uleb128 0x12
 6250 017f 06       		.uleb128 0x6
 6251 0180 00       		.byte	0
 6252 0181 00       		.byte	0
 6253 0182 1A       		.uleb128 0x1a
 6254 0183 34       		.uleb128 0x34
 6255 0184 00       		.byte	0
 6256 0185 03       		.uleb128 0x3
 6257 0186 08       		.uleb128 0x8
 6258 0187 3A       		.uleb128 0x3a
 6259 0188 0B       		.uleb128 0xb
 6260 0189 3B       		.uleb128 0x3b
 6261 018a 05       		.uleb128 0x5
 6262 018b 49       		.uleb128 0x49
 6263 018c 13       		.uleb128 0x13
 6264 018d 02       		.uleb128 0x2
 6265 018e 18       		.uleb128 0x18
 6266 018f 00       		.byte	0
 6267 0190 00       		.byte	0
 6268 0191 1B       		.uleb128 0x1b
 6269 0192 2E       		.uleb128 0x2e
 6270 0193 01       		.byte	0x1
 6271 0194 3F       		.uleb128 0x3f
 6272 0195 19       		.uleb128 0x19
 6273 0196 03       		.uleb128 0x3
 6274 0197 0E       		.uleb128 0xe
 6275 0198 3A       		.uleb128 0x3a
 6276 0199 0B       		.uleb128 0xb
 6277 019a 3B       		.uleb128 0x3b
 6278 019b 05       		.uleb128 0x5
 6279 019c 27       		.uleb128 0x27
 6280 019d 19       		.uleb128 0x19
 6281 019e 11       		.uleb128 0x11
 6282 019f 01       		.uleb128 0x1
 6283 01a0 12       		.uleb128 0x12
 6284 01a1 06       		.uleb128 0x6
 6285 01a2 40       		.uleb128 0x40
 6286 01a3 18       		.uleb128 0x18
 6287 01a4 9642     		.uleb128 0x2116
 6288 01a6 19       		.uleb128 0x19
 6289 01a7 01       		.uleb128 0x1
 6290 01a8 13       		.uleb128 0x13
 6291 01a9 00       		.byte	0
 6292 01aa 00       		.byte	0
 6293 01ab 1C       		.uleb128 0x1c
 6294 01ac 0F       		.uleb128 0xf
 6295 01ad 00       		.byte	0
 6296 01ae 0B       		.uleb128 0xb
 6297 01af 0B       		.uleb128 0xb
 6298 01b0 49       		.uleb128 0x49
 6299 01b1 13       		.uleb128 0x13
 6300 01b2 00       		.byte	0
 6301 01b3 00       		.byte	0
 6302 01b4 1D       		.uleb128 0x1d
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 135


 6303 01b5 05       		.uleb128 0x5
 6304 01b6 00       		.byte	0
 6305 01b7 03       		.uleb128 0x3
 6306 01b8 08       		.uleb128 0x8
 6307 01b9 3A       		.uleb128 0x3a
 6308 01ba 0B       		.uleb128 0xb
 6309 01bb 3B       		.uleb128 0x3b
 6310 01bc 05       		.uleb128 0x5
 6311 01bd 49       		.uleb128 0x49
 6312 01be 13       		.uleb128 0x13
 6313 01bf 02       		.uleb128 0x2
 6314 01c0 18       		.uleb128 0x18
 6315 01c1 00       		.byte	0
 6316 01c2 00       		.byte	0
 6317 01c3 1E       		.uleb128 0x1e
 6318 01c4 0B       		.uleb128 0xb
 6319 01c5 01       		.byte	0x1
 6320 01c6 55       		.uleb128 0x55
 6321 01c7 17       		.uleb128 0x17
 6322 01c8 00       		.byte	0
 6323 01c9 00       		.byte	0
 6324 01ca 1F       		.uleb128 0x1f
 6325 01cb 34       		.uleb128 0x34
 6326 01cc 00       		.byte	0
 6327 01cd 03       		.uleb128 0x3
 6328 01ce 0E       		.uleb128 0xe
 6329 01cf 3A       		.uleb128 0x3a
 6330 01d0 0B       		.uleb128 0xb
 6331 01d1 3B       		.uleb128 0x3b
 6332 01d2 05       		.uleb128 0x5
 6333 01d3 49       		.uleb128 0x49
 6334 01d4 13       		.uleb128 0x13
 6335 01d5 3F       		.uleb128 0x3f
 6336 01d6 19       		.uleb128 0x19
 6337 01d7 3C       		.uleb128 0x3c
 6338 01d8 19       		.uleb128 0x19
 6339 01d9 00       		.byte	0
 6340 01da 00       		.byte	0
 6341 01db 20       		.uleb128 0x20
 6342 01dc 34       		.uleb128 0x34
 6343 01dd 00       		.byte	0
 6344 01de 03       		.uleb128 0x3
 6345 01df 0E       		.uleb128 0xe
 6346 01e0 3A       		.uleb128 0x3a
 6347 01e1 0B       		.uleb128 0xb
 6348 01e2 3B       		.uleb128 0x3b
 6349 01e3 0B       		.uleb128 0xb
 6350 01e4 49       		.uleb128 0x49
 6351 01e5 13       		.uleb128 0x13
 6352 01e6 3F       		.uleb128 0x3f
 6353 01e7 19       		.uleb128 0x19
 6354 01e8 3C       		.uleb128 0x3c
 6355 01e9 19       		.uleb128 0x19
 6356 01ea 00       		.byte	0
 6357 01eb 00       		.byte	0
 6358 01ec 21       		.uleb128 0x21
 6359 01ed 21       		.uleb128 0x21
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 136


 6360 01ee 00       		.byte	0
 6361 01ef 49       		.uleb128 0x49
 6362 01f0 13       		.uleb128 0x13
 6363 01f1 2F       		.uleb128 0x2f
 6364 01f2 05       		.uleb128 0x5
 6365 01f3 00       		.byte	0
 6366 01f4 00       		.byte	0
 6367 01f5 22       		.uleb128 0x22
 6368 01f6 26       		.uleb128 0x26
 6369 01f7 00       		.byte	0
 6370 01f8 49       		.uleb128 0x49
 6371 01f9 13       		.uleb128 0x13
 6372 01fa 00       		.byte	0
 6373 01fb 00       		.byte	0
 6374 01fc 23       		.uleb128 0x23
 6375 01fd 34       		.uleb128 0x34
 6376 01fe 00       		.byte	0
 6377 01ff 03       		.uleb128 0x3
 6378 0200 0E       		.uleb128 0xe
 6379 0201 3A       		.uleb128 0x3a
 6380 0202 0B       		.uleb128 0xb
 6381 0203 3B       		.uleb128 0x3b
 6382 0204 0B       		.uleb128 0xb
 6383 0205 49       		.uleb128 0x49
 6384 0206 13       		.uleb128 0x13
 6385 0207 3F       		.uleb128 0x3f
 6386 0208 19       		.uleb128 0x19
 6387 0209 02       		.uleb128 0x2
 6388 020a 18       		.uleb128 0x18
 6389 020b 00       		.byte	0
 6390 020c 00       		.byte	0
 6391 020d 24       		.uleb128 0x24
 6392 020e 34       		.uleb128 0x34
 6393 020f 00       		.byte	0
 6394 0210 03       		.uleb128 0x3
 6395 0211 08       		.uleb128 0x8
 6396 0212 3A       		.uleb128 0x3a
 6397 0213 0B       		.uleb128 0xb
 6398 0214 3B       		.uleb128 0x3b
 6399 0215 0B       		.uleb128 0xb
 6400 0216 49       		.uleb128 0x49
 6401 0217 13       		.uleb128 0x13
 6402 0218 3F       		.uleb128 0x3f
 6403 0219 19       		.uleb128 0x19
 6404 021a 02       		.uleb128 0x2
 6405 021b 18       		.uleb128 0x18
 6406 021c 00       		.byte	0
 6407 021d 00       		.byte	0
 6408 021e 25       		.uleb128 0x25
 6409 021f 34       		.uleb128 0x34
 6410 0220 00       		.byte	0
 6411 0221 03       		.uleb128 0x3
 6412 0222 0E       		.uleb128 0xe
 6413 0223 3A       		.uleb128 0x3a
 6414 0224 0B       		.uleb128 0xb
 6415 0225 3B       		.uleb128 0x3b
 6416 0226 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 137


 6417 0227 49       		.uleb128 0x49
 6418 0228 13       		.uleb128 0x13
 6419 0229 3F       		.uleb128 0x3f
 6420 022a 19       		.uleb128 0x19
 6421 022b 02       		.uleb128 0x2
 6422 022c 18       		.uleb128 0x18
 6423 022d 00       		.byte	0
 6424 022e 00       		.byte	0
 6425 022f 00       		.byte	0
 6426              		.section	.debug_aranges,"",%progbits
 6427 0000 BC000000 		.4byte	0xbc
 6428 0004 0200     		.2byte	0x2
 6429 0006 00000000 		.4byte	.Ldebug_info0
 6430 000a 04       		.byte	0x4
 6431 000b 00       		.byte	0
 6432 000c 0000     		.2byte	0
 6433 000e 0000     		.2byte	0
 6434 0010 00000000 		.4byte	.LFB64
 6435 0014 0C000000 		.4byte	.LFE64-.LFB64
 6436 0018 00000000 		.4byte	.LFB65
 6437 001c 58000000 		.4byte	.LFE65-.LFB65
 6438 0020 00000000 		.4byte	.LFB66
 6439 0024 68000000 		.4byte	.LFE66-.LFB66
 6440 0028 00000000 		.4byte	.LFB67
 6441 002c 4C000000 		.4byte	.LFE67-.LFB67
 6442 0030 00000000 		.4byte	.LFB68
 6443 0034 46000000 		.4byte	.LFE68-.LFB68
 6444 0038 00000000 		.4byte	.LFB69
 6445 003c 56000000 		.4byte	.LFE69-.LFB69
 6446 0040 00000000 		.4byte	.LFB70
 6447 0044 40000000 		.4byte	.LFE70-.LFB70
 6448 0048 00000000 		.4byte	.LFB71
 6449 004c 14000000 		.4byte	.LFE71-.LFB71
 6450 0050 00000000 		.4byte	.LFB72
 6451 0054 7C000000 		.4byte	.LFE72-.LFB72
 6452 0058 00000000 		.4byte	.LFB73
 6453 005c 9C0B0000 		.4byte	.LFE73-.LFB73
 6454 0060 00000000 		.4byte	.LFB74
 6455 0064 54000000 		.4byte	.LFE74-.LFB74
 6456 0068 00000000 		.4byte	.LFB75
 6457 006c C4000000 		.4byte	.LFE75-.LFB75
 6458 0070 00000000 		.4byte	.LFB76
 6459 0074 4C000000 		.4byte	.LFE76-.LFB76
 6460 0078 00000000 		.4byte	.LFB77
 6461 007c C4000000 		.4byte	.LFE77-.LFB77
 6462 0080 00000000 		.4byte	.LFB78
 6463 0084 B4000000 		.4byte	.LFE78-.LFB78
 6464 0088 00000000 		.4byte	.LFB79
 6465 008c B0000000 		.4byte	.LFE79-.LFB79
 6466 0090 00000000 		.4byte	.LFB80
 6467 0094 24010000 		.4byte	.LFE80-.LFB80
 6468 0098 00000000 		.4byte	.LFB81
 6469 009c D8000000 		.4byte	.LFE81-.LFB81
 6470 00a0 00000000 		.4byte	.LFB82
 6471 00a4 D8000000 		.4byte	.LFE82-.LFB82
 6472 00a8 00000000 		.4byte	.LFB83
 6473 00ac 90000000 		.4byte	.LFE83-.LFB83
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 138


 6474 00b0 00000000 		.4byte	.LFB84
 6475 00b4 68020000 		.4byte	.LFE84-.LFB84
 6476 00b8 00000000 		.4byte	0
 6477 00bc 00000000 		.4byte	0
 6478              		.section	.debug_ranges,"",%progbits
 6479              	.Ldebug_ranges0:
 6480 0000 76000000 		.4byte	.LBB9
 6481 0004 6C010000 		.4byte	.LBE9
 6482 0008 6E010000 		.4byte	.LBB12
 6483 000c EA010000 		.4byte	.LBE12
 6484 0010 EC010000 		.4byte	.LBB13
 6485 0014 2C020000 		.4byte	.LBE13
 6486 0018 00000000 		.4byte	0
 6487 001c 00000000 		.4byte	0
 6488 0020 00000000 		.4byte	.LFB64
 6489 0024 0C000000 		.4byte	.LFE64
 6490 0028 00000000 		.4byte	.LFB65
 6491 002c 58000000 		.4byte	.LFE65
 6492 0030 00000000 		.4byte	.LFB66
 6493 0034 68000000 		.4byte	.LFE66
 6494 0038 00000000 		.4byte	.LFB67
 6495 003c 4C000000 		.4byte	.LFE67
 6496 0040 00000000 		.4byte	.LFB68
 6497 0044 46000000 		.4byte	.LFE68
 6498 0048 00000000 		.4byte	.LFB69
 6499 004c 56000000 		.4byte	.LFE69
 6500 0050 00000000 		.4byte	.LFB70
 6501 0054 40000000 		.4byte	.LFE70
 6502 0058 00000000 		.4byte	.LFB71
 6503 005c 14000000 		.4byte	.LFE71
 6504 0060 00000000 		.4byte	.LFB72
 6505 0064 7C000000 		.4byte	.LFE72
 6506 0068 00000000 		.4byte	.LFB73
 6507 006c 9C0B0000 		.4byte	.LFE73
 6508 0070 00000000 		.4byte	.LFB74
 6509 0074 54000000 		.4byte	.LFE74
 6510 0078 00000000 		.4byte	.LFB75
 6511 007c C4000000 		.4byte	.LFE75
 6512 0080 00000000 		.4byte	.LFB76
 6513 0084 4C000000 		.4byte	.LFE76
 6514 0088 00000000 		.4byte	.LFB77
 6515 008c C4000000 		.4byte	.LFE77
 6516 0090 00000000 		.4byte	.LFB78
 6517 0094 B4000000 		.4byte	.LFE78
 6518 0098 00000000 		.4byte	.LFB79
 6519 009c B0000000 		.4byte	.LFE79
 6520 00a0 00000000 		.4byte	.LFB80
 6521 00a4 24010000 		.4byte	.LFE80
 6522 00a8 00000000 		.4byte	.LFB81
 6523 00ac D8000000 		.4byte	.LFE81
 6524 00b0 00000000 		.4byte	.LFB82
 6525 00b4 D8000000 		.4byte	.LFE82
 6526 00b8 00000000 		.4byte	.LFB83
 6527 00bc 90000000 		.4byte	.LFE83
 6528 00c0 00000000 		.4byte	.LFB84
 6529 00c4 68020000 		.4byte	.LFE84
 6530 00c8 00000000 		.4byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 139


 6531 00cc 00000000 		.4byte	0
 6532              		.section	.debug_line,"",%progbits
 6533              	.Ldebug_line0:
 6534 0000 0E060000 		.section	.debug_str,"MS",%progbits,1
 6534      02009901 
 6534      00000201 
 6534      FB0E0D00 
 6534      01010101 
 6535              	.LASF112:
 6536 0000 7363616E 		.ascii	"scanPart\000"
 6536      50617274 
 6536      00
 6537              	.LASF147:
 6538 0009 65657072 		.ascii	"eeprom_cnt\000"
 6538      6F6D5F63 
 6538      6E7400
 6539              	.LASF115:
 6540 0014 49324362 		.ascii	"I2Cbuff1\000"
 6540      75666631 
 6540      00
 6541              	.LASF40:
 6542 001d 43595F45 		.ascii	"CY_EM_EEPROM_BAD_PARAM\000"
 6542      4D5F4545 
 6542      50524F4D 
 6542      5F424144 
 6542      5F504152 
 6543              	.LASF58:
 6544 0034 6F73746F 		.ascii	"ostop\000"
 6544      7000
 6545              	.LASF179:
 6546 003a 6C696E46 		.ascii	"linFirPointer\000"
 6546      6972506F 
 6546      696E7465 
 6546      7200
 6547              	.LASF38:
 6548 0048 63795F73 		.ascii	"cy_stc_eeprom_context_t\000"
 6548      74635F65 
 6548      6570726F 
 6548      6D5F636F 
 6548      6E746578 
 6549              	.LASF194:
 6550 0060 6D61696E 		.ascii	"main.c\000"
 6550      2E6300
 6551              	.LASF82:
 6552 0067 446D6154 		.ascii	"DmaTxConfiguration\000"
 6552      78436F6E 
 6552      66696775 
 6552      72617469 
 6552      6F6E00
 6553              	.LASF139:
 6554 007a 74783254 		.ascii	"tx2TD\000"
 6554      4400
 6555              	.LASF83:
 6556 0080 446D6152 		.ascii	"DmaRxConfiguration\000"
 6556      78436F6E 
 6556      66696775 
 6556      72617469 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 140


 6556      6F6E00
 6557              	.LASF13:
 6558 0093 756E7369 		.ascii	"unsigned int\000"
 6558      676E6564 
 6558      20696E74 
 6558      00
 6559              	.LASF195:
 6560 00a0 433A5C55 		.ascii	"C:\\Users\\JeffSnyder\\dev\\Electrobass_embedded\\P"
 6560      73657273 
 6560      5C4A6566 
 6560      66536E79 
 6560      6465725C 
 6561 00ce 534F4335 		.ascii	"SOC5_electrobass_stringsensors\\CE210514_PSOC3_5_Th"
 6561      5F656C65 
 6561      6374726F 
 6561      62617373 
 6561      5F737472 
 6562 0100 65726D69 		.ascii	"ermistor.cydsn\000"
 6562      73746F72 
 6562      2E637964 
 6562      736E00
 6563              	.LASF6:
 6564 010f 5F5F696E 		.ascii	"__int32_t\000"
 6564      7433325F 
 6564      7400
 6565              	.LASF27:
 6566 0119 72656738 		.ascii	"reg8\000"
 6566      00
 6567              	.LASF56:
 6568 011e 6973746F 		.ascii	"istop\000"
 6568      7000
 6569              	.LASF42:
 6570 0124 43595F45 		.ascii	"CY_EM_EEPROM_BAD_DATA\000"
 6570      4D5F4545 
 6570      50524F4D 
 6570      5F424144 
 6570      5F444154 
 6571              	.LASF193:
 6572 013a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 6572      43313120 
 6572      352E342E 
 6572      31203230 
 6572      31363036 
 6573 016d 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 6573      20726576 
 6573      6973696F 
 6573      6E203233 
 6573      37373135 
 6574 01a0 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 6574      66756E63 
 6574      74696F6E 
 6574      2D736563 
 6574      74696F6E 
 6575              	.LASF111:
 6576 01c8 6D696469 		.ascii	"midiOverflow\000"
 6576      4F766572 
 6576      666C6F77 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 141


 6576      00
 6577              	.LASF157:
 6578 01d5 6C6F7564 		.ascii	"loudestString\000"
 6578      65737453 
 6578      7472696E 
 6578      6700
 6579              	.LASF107:
 6580 01e3 70726576 		.ascii	"prevVBUS\000"
 6580      56425553 
 6580      00
 6581              	.LASF156:
 6582 01ec 6F70656E 		.ascii	"openStringCount\000"
 6582      53747269 
 6582      6E67436F 
 6582      756E7400 
 6583              	.LASF87:
 6584 01fc 6D6F6465 		.ascii	"mode\000"
 6584      00
 6585              	.LASF188:
 6586 0201 736B6970 		.ascii	"skippedNotes\000"
 6586      7065644E 
 6586      6F746573 
 6586      00
 6587              	.LASF46:
 6588 020e 74656D70 		.ascii	"tempmin\000"
 6588      6D696E00 
 6589              	.LASF60:
 6590 0216 536C6565 		.ascii	"SleepIsr_function\000"
 6590      70497372 
 6590      5F66756E 
 6590      6374696F 
 6590      6E00
 6591              	.LASF103:
 6592 0228 456D5F45 		.ascii	"Em_EEPROM_em_EepromStorage\000"
 6592      4550524F 
 6592      4D5F656D 
 6592      5F456570 
 6592      726F6D53 
 6593              	.LASF130:
 6594 0243 68797374 		.ascii	"hysteresisLowThresh\000"
 6594      65726573 
 6594      69734C6F 
 6594      77546872 
 6594      65736800 
 6595              	.LASF183:
 6596 0257 4C484D75 		.ascii	"LHMuteCounter\000"
 6596      7465436F 
 6596      756E7465 
 6596      7200
 6597              	.LASF180:
 6598 0265 6C696E65 		.ascii	"linearFIR\000"
 6598      61724649 
 6598      5200
 6599              	.LASF118:
 6600 026f 74687265 		.ascii	"thresholdArray\000"
 6600      73686F6C 
 6600      64417272 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 142


 6600      617900
 6601              	.LASF17:
 6602 027e 75696E74 		.ascii	"uint32_t\000"
 6602      33325F74 
 6602      00
 6603              	.LASF31:
 6604 0287 6E756D62 		.ascii	"numberOfRows\000"
 6604      65724F66 
 6604      526F7773 
 6604      00
 6605              	.LASF98:
 6606 0294 5553425F 		.ascii	"USB_midi_in_ep\000"
 6606      6D696469 
 6606      5F696E5F 
 6606      657000
 6607              	.LASF23:
 6608 02a3 666C6F61 		.ascii	"float\000"
 6608      7400
 6609              	.LASF22:
 6610 02a9 696E7433 		.ascii	"int32\000"
 6610      3200
 6611              	.LASF178:
 6612 02af 6B6E6F62 		.ascii	"knobs7bitHysteresis\000"
 6612      73376269 
 6612      74487973 
 6612      74657265 
 6612      73697300 
 6613              	.LASF187:
 6614 02c3 70697463 		.ascii	"pitchBendHistoryPointer\000"
 6614      6842656E 
 6614      64486973 
 6614      746F7279 
 6614      506F696E 
 6615              	.LASF33:
 6616 02db 65657072 		.ascii	"eepromSize\000"
 6616      6F6D5369 
 6616      7A6500
 6617              	.LASF44:
 6618 02e6 63795F65 		.ascii	"cy_en_em_eeprom_status_t\000"
 6618      6E5F656D 
 6618      5F656570 
 6618      726F6D5F 
 6618      73746174 
 6619              	.LASF12:
 6620 02ff 6C6F6E67 		.ascii	"long long unsigned int\000"
 6620      206C6F6E 
 6620      6720756E 
 6620      7369676E 
 6620      65642069 
 6621              	.LASF101:
 6622 0316 5553425F 		.ascii	"USB_midiOutBuffer\000"
 6622      6D696469 
 6622      4F757442 
 6622      75666665 
 6622      7200
 6623              	.LASF141:
 6624 0328 72783243 		.ascii	"rx2Channel\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 143


 6624      68616E6E 
 6624      656C00
 6625              	.LASF158:
 6626 0333 74696D65 		.ascii	"timeSinceLastAttack\000"
 6626      53696E63 
 6626      654C6173 
 6626      74417474 
 6626      61636B00 
 6627              	.LASF149:
 6628 0347 73747269 		.ascii	"stringStates\000"
 6628      6E675374 
 6628      61746573 
 6628      00
 6629              	.LASF192:
 6630 0354 69567468 		.ascii	"iVtherm\000"
 6630      65726D00 
 6631              	.LASF41:
 6632 035c 43595F45 		.ascii	"CY_EM_EEPROM_BAD_CHECKSUM\000"
 6632      4D5F4545 
 6632      50524F4D 
 6632      5F424144 
 6632      5F434845 
 6633              	.LASF4:
 6634 0376 5F5F7569 		.ascii	"__uint16_t\000"
 6634      6E743136 
 6634      5F7400
 6635              	.LASF152:
 6636 0381 6C617374 		.ascii	"lastNotes\000"
 6636      4E6F7465 
 6636      7300
 6637              	.LASF131:
 6638 038b 68797374 		.ascii	"hysteresisHighThresh\000"
 6638      65726573 
 6638      69734869 
 6638      67685468 
 6638      72657368 
 6639              	.LASF54:
 6640 03a0 76616C75 		.ascii	"value\000"
 6640      6500
 6641              	.LASF154:
 6642 03a6 706F6C79 		.ascii	"polyMode\000"
 6642      4D6F6465 
 6642      00
 6643              	.LASF168:
 6644 03af 68705F52 		.ascii	"hp_R\000"
 6644      00
 6645              	.LASF135:
 6646 03b4 72784368 		.ascii	"rxChannel\000"
 6646      616E6E65 
 6646      6C00
 6647              	.LASF36:
 6648 03be 626C6F63 		.ascii	"blockingWrite\000"
 6648      6B696E67 
 6648      57726974 
 6648      6500
 6649              	.LASF122:
 6650 03cc 636F756E 		.ascii	"counter\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 144


 6650      74657200 
 6651              	.LASF18:
 6652 03d4 696E7436 		.ascii	"int64_t\000"
 6652      345F7400 
 6653              	.LASF81:
 6654 03dc 6F666673 		.ascii	"offset\000"
 6654      657400
 6655              	.LASF69:
 6656 03e3 5553425F 		.ascii	"USB_callbackLocalMidiEvent\000"
 6656      63616C6C 
 6656      6261636B 
 6656      4C6F6361 
 6656      6C4D6964 
 6657              	.LASF163:
 6658 03fe 73747269 		.ascii	"stringMIDI\000"
 6658      6E674D49 
 6658      444900
 6659              	.LASF167:
 6660 0409 68705F78 		.ascii	"hp_x\000"
 6660      00
 6661              	.LASF166:
 6662 040e 68705F79 		.ascii	"hp_y\000"
 6662      00
 6663              	.LASF120:
 6664 0413 66726574 		.ascii	"fretRatios\000"
 6664      52617469 
 6664      6F7300
 6665              	.LASF37:
 6666 041e 75736572 		.ascii	"userFlashStartAddr\000"
 6666      466C6173 
 6666      68537461 
 6666      72744164 
 6666      647200
 6667              	.LASF48:
 6668 0431 4C454146 		.ascii	"LEAF_clip\000"
 6668      5F636C69 
 6668      7000
 6669              	.LASF116:
 6670 043b 73747269 		.ascii	"stringCapSensorsOnOff\000"
 6670      6E674361 
 6670      7053656E 
 6670      736F7273 
 6670      4F6E4F66 
 6671              	.LASF174:
 6672 0451 66697250 		.ascii	"firPointer\000"
 6672      6F696E74 
 6672      657200
 6673              	.LASF143:
 6674 045c 72783242 		.ascii	"rx2Buffer\000"
 6674      75666665 
 6674      7200
 6675              	.LASF53:
 6676 0466 6F6D416C 		.ascii	"omAlpha\000"
 6676      70686100 
 6677              	.LASF165:
 6678 046e 6C696E65 		.ascii	"linearHysteresis\000"
 6678      61724879 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 145


 6678      73746572 
 6678      65736973 
 6678      00
 6679              	.LASF129:
 6680 047f 68797374 		.ascii	"hysteresisStates\000"
 6680      65726573 
 6680      69735374 
 6680      61746573 
 6680      00
 6681              	.LASF75:
 6682 0490 73656E64 		.ascii	"sendMIDIControlChange\000"
 6682      4D494449 
 6682      436F6E74 
 6682      726F6C43 
 6682      68616E67 
 6683              	.LASF136:
 6684 04a6 72785444 		.ascii	"rxTD\000"
 6684      00
 6685              	.LASF80:
 6686 04ab 69526573 		.ascii	"iRes\000"
 6686      00
 6687              	.LASF25:
 6688 04b0 63686172 		.ascii	"char\000"
 6688      00
 6689              	.LASF39:
 6690 04b5 43595F45 		.ascii	"CY_EM_EEPROM_SUCCESS\000"
 6690      4D5F4545 
 6690      50524F4D 
 6690      5F535543 
 6690      43455353 
 6691              	.LASF121:
 6692 04ca 6C696E65 		.ascii	"linearPotValue32Bit\000"
 6692      6172506F 
 6692      7456616C 
 6692      75653332 
 6692      42697400 
 6693              	.LASF92:
 6694 04de 73747269 		.ascii	"string\000"
 6694      6E6700
 6695              	.LASF20:
 6696 04e5 75696E74 		.ascii	"uint16\000"
 6696      313600
 6697              	.LASF102:
 6698 04ec 456D5F45 		.ascii	"Em_EEPROM_context\000"
 6698      4550524F 
 6698      4D5F636F 
 6698      6E746578 
 6698      7400
 6699              	.LASF175:
 6700 04fe 6B6E6F62 		.ascii	"knobs7bit\000"
 6700      73376269 
 6700      7400
 6701              	.LASF14:
 6702 0508 75696E74 		.ascii	"uint8_t\000"
 6702      385F7400 
 6703              	.LASF88:
 6704 0510 73746174 		.ascii	"status\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 146


 6704      757300
 6705              	.LASF189:
 6706 0517 736B6970 		.ascii	"skipPointer\000"
 6706      506F696E 
 6706      74657200 
 6707              	.LASF67:
 6708 0523 6361626C 		.ascii	"cable\000"
 6708      6500
 6709              	.LASF30:
 6710 0529 776C456E 		.ascii	"wlEndAddr\000"
 6710      64416464 
 6710      7200
 6711              	.LASF144:
 6712 0533 74783242 		.ascii	"tx2BufferTemp\000"
 6712      75666665 
 6712      7254656D 
 6712      7000
 6713              	.LASF117:
 6714 0541 73747269 		.ascii	"stringCapSensorsRaw\000"
 6714      6E674361 
 6714      7053656E 
 6714      736F7273 
 6714      52617700 
 6715              	.LASF119:
 6716 0555 66726574 		.ascii	"fretMeasurements\000"
 6716      4D656173 
 6716      7572656D 
 6716      656E7473 
 6716      00
 6717              	.LASF11:
 6718 0566 6C6F6E67 		.ascii	"long long int\000"
 6718      206C6F6E 
 6718      6720696E 
 6718      7400
 6719              	.LASF51:
 6720 0574 4C454146 		.ascii	"LEAF_interpolation_linear\000"
 6720      5F696E74 
 6720      6572706F 
 6720      6C617469 
 6720      6F6E5F6C 
 6721              	.LASF97:
 6722 058e 5553425F 		.ascii	"USB_midiInPointer\000"
 6722      6D696469 
 6722      496E506F 
 6722      696E7465 
 6722      7200
 6723              	.LASF190:
 6724 05a0 62756643 		.ascii	"bufCount\000"
 6724      6F756E74 
 6724      00
 6725              	.LASF186:
 6726 05a9 70697463 		.ascii	"pitchBendHistory\000"
 6726      6842656E 
 6726      64486973 
 6726      746F7279 
 6726      00
 6727              	.LASF181:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 147


 6728 05ba 6C696E65 		.ascii	"linearSmoothed\000"
 6728      6172536D 
 6728      6F6F7468 
 6728      656400
 6729              	.LASF132:
 6730 05c9 74784368 		.ascii	"txChannel\000"
 6730      616E6E65 
 6730      6C00
 6731              	.LASF77:
 6732 05d3 43437661 		.ascii	"CCval\000"
 6732      6C00
 6733              	.LASF86:
 6734 05d9 6E627974 		.ascii	"nbytes\000"
 6734      657300
 6735              	.LASF74:
 6736 05e0 73656E64 		.ascii	"sendMIDIPitchBend\000"
 6736      4D494449 
 6736      50697463 
 6736      6842656E 
 6736      6400
 6737              	.LASF133:
 6738 05f2 74785444 		.ascii	"txTD\000"
 6738      00
 6739              	.LASF21:
 6740 05f7 75696E74 		.ascii	"uint32\000"
 6740      333200
 6741              	.LASF95:
 6742 05fe 65657072 		.ascii	"eepromArray\000"
 6742      6F6D4172 
 6742      72617900 
 6743              	.LASF164:
 6744 060a 73747269 		.ascii	"stringMIDIPrev\000"
 6744      6E674D49 
 6744      44495072 
 6744      657600
 6745              	.LASF148:
 6746 0619 62617243 		.ascii	"barCount\000"
 6746      6F756E74 
 6746      00
 6747              	.LASF57:
 6748 0622 6F737461 		.ascii	"ostart\000"
 6748      727400
 6749              	.LASF126:
 6750 0629 73747269 		.ascii	"stringPlucks\000"
 6750      6E67506C 
 6750      75636B73 
 6750      00
 6751              	.LASF106:
 6752 0636 63757272 		.ascii	"currentVBUS\000"
 6752      656E7456 
 6752      42555300 
 6753              	.LASF123:
 6754 0642 74656D70 		.ascii	"temper\000"
 6754      657200
 6755              	.LASF145:
 6756 0649 61727261 		.ascii	"array\000"
 6756      7900
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 148


 6757              	.LASF10:
 6758 064f 5F5F696E 		.ascii	"__int64_t\000"
 6758      7436345F 
 6758      7400
 6759              	.LASF28:
 6760 0659 6C6F6E67 		.ascii	"long double\000"
 6760      20646F75 
 6760      626C6500 
 6761              	.LASF124:
 6762 0665 70726576 		.ascii	"previousButtons\000"
 6762      696F7573 
 6762      42757474 
 6762      6F6E7300 
 6763              	.LASF15:
 6764 0675 75696E74 		.ascii	"uint16_t\000"
 6764      31365F74 
 6764      00
 6765              	.LASF137:
 6766 067e 72784275 		.ascii	"rxBuffer\000"
 6766      66666572 
 6766      00
 6767              	.LASF185:
 6768 0687 70697463 		.ascii	"pitchFreeze\000"
 6768      68467265 
 6768      657A6500 
 6769              	.LASF109:
 6770 0693 5553425F 		.ascii	"USB_check_flag\000"
 6770      63686563 
 6770      6B5F666C 
 6770      616700
 6771              	.LASF47:
 6772 06a2 74656D70 		.ascii	"tempmax\000"
 6772      6D617800 
 6773              	.LASF73:
 6774 06aa 6368616E 		.ascii	"channel\000"
 6774      6E656C00 
 6775              	.LASF150:
 6776 06b2 77686963 		.ascii	"whichLinearSensor\000"
 6776      684C696E 
 6776      65617253 
 6776      656E736F 
 6776      7200
 6777              	.LASF159:
 6778 06c4 70726576 		.ascii	"previousHysteresisStates\000"
 6778      696F7573 
 6778      48797374 
 6778      65726573 
 6778      69735374 
 6779              	.LASF134:
 6780 06dd 74784275 		.ascii	"txBuffer\000"
 6780      66666572 
 6780      00
 6781              	.LASF161:
 6782 06e6 6F70656E 		.ascii	"openStringMIDI\000"
 6782      53747269 
 6782      6E674D49 
 6782      444900
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 149


 6783              	.LASF160:
 6784 06f5 6F70656E 		.ascii	"openStringFreqs\000"
 6784      53747269 
 6784      6E674672 
 6784      65717300 
 6785              	.LASF128:
 6786 0705 6B6E6F62 		.ascii	"knobsFIR\000"
 6786      73464952 
 6786      00
 6787              	.LASF153:
 6788 070e 66726574 		.ascii	"frettedState\000"
 6788      74656453 
 6788      74617465 
 6788      00
 6789              	.LASF2:
 6790 071b 73686F72 		.ascii	"short int\000"
 6790      7420696E 
 6790      7400
 6791              	.LASF76:
 6792 0725 43436E75 		.ascii	"CCnum\000"
 6792      6D00
 6793              	.LASF7:
 6794 072b 6C6F6E67 		.ascii	"long int\000"
 6794      20696E74 
 6794      00
 6795              	.LASF105:
 6796 0734 75736241 		.ascii	"usbActivityCounter\000"
 6796      63746976 
 6796      69747943 
 6796      6F756E74 
 6796      657200
 6797              	.LASF104:
 6798 0747 49544D5F 		.ascii	"ITM_RxBuffer\000"
 6798      52784275 
 6798      66666572 
 6798      00
 6799              	.LASF172:
 6800 0754 6B6E6F62 		.ascii	"knobs\000"
 6800      7300
 6801              	.LASF138:
 6802 075a 74783243 		.ascii	"tx2Channel\000"
 6802      68616E6E 
 6802      656C00
 6803              	.LASF68:
 6804 0765 6D696469 		.ascii	"midiMsg\000"
 6804      4D736700 
 6805              	.LASF90:
 6806 076d 68616E64 		.ascii	"handleNotes\000"
 6806      6C654E6F 
 6806      74657300 
 6807              	.LASF170:
 6808 0779 63726F73 		.ascii	"crossFadeStartCount\000"
 6808      73466164 
 6808      65537461 
 6808      7274436F 
 6808      756E7400 
 6809              	.LASF127:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 150


 6810 078d 73747269 		.ascii	"stringPlucksPrev\000"
 6810      6E67506C 
 6810      75636B73 
 6810      50726576 
 6810      00
 6811              	.LASF151:
 6812 079e 74657374 		.ascii	"testVar\000"
 6812      56617200 
 6813              	.LASF65:
 6814 07a6 63686563 		.ascii	"checkUSB_Vbus\000"
 6814      6B555342 
 6814      5F566275 
 6814      7300
 6815              	.LASF191:
 6816 07b4 74656D70 		.ascii	"tempMIDI\000"
 6816      4D494449 
 6816      00
 6817              	.LASF184:
 6818 07bd 4C484D75 		.ascii	"LHMute\000"
 6818      746500
 6819              	.LASF3:
 6820 07c4 5F5F7569 		.ascii	"__uint8_t\000"
 6820      6E74385F 
 6820      7400
 6821              	.LASF142:
 6822 07ce 72783254 		.ascii	"rx2TD\000"
 6822      4400
 6823              	.LASF176:
 6824 07d4 6B6E6F62 		.ascii	"knobs7bitPrev\000"
 6824      73376269 
 6824      74507265 
 6824      7600
 6825              	.LASF91:
 6826 07e2 6E6F7465 		.ascii	"note\000"
 6826      00
 6827              	.LASF93:
 6828 07e7 74656D70 		.ascii	"tempVel\000"
 6828      56656C00 
 6829              	.LASF94:
 6830 07ef 6C6F7564 		.ascii	"loudestSoundingNote\000"
 6830      65737453 
 6830      6F756E64 
 6830      696E674E 
 6830      6F746500 
 6831              	.LASF72:
 6832 0803 76656C6F 		.ascii	"velocity\000"
 6832      63697479 
 6832      00
 6833              	.LASF29:
 6834 080c 73697A65 		.ascii	"sizetype\000"
 6834      74797065 
 6834      00
 6835              	.LASF62:
 6836 0815 72657374 		.ascii	"restartSystemCheck\000"
 6836      61727453 
 6836      79737465 
 6836      6D436865 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 151


 6836      636B00
 6837              	.LASF9:
 6838 0828 6C6F6E67 		.ascii	"long unsigned int\000"
 6838      20756E73 
 6838      69676E65 
 6838      6420696E 
 6838      7400
 6839              	.LASF173:
 6840 083a 62757474 		.ascii	"buttons\000"
 6840      6F6E7300 
 6841              	.LASF43:
 6842 0842 43595F45 		.ascii	"CY_EM_EEPROM_WRITE_FAIL\000"
 6842      4D5F4545 
 6842      50524F4D 
 6842      5F575249 
 6842      54455F46 
 6843              	.LASF182:
 6844 085a 6C696E65 		.ascii	"linearSmoothedPrev\000"
 6844      6172536D 
 6844      6F6F7468 
 6844      65645072 
 6844      657600
 6845              	.LASF52:
 6846 086d 616C7068 		.ascii	"alpha\000"
 6846      6100
 6847              	.LASF16:
 6848 0873 696E7433 		.ascii	"int32_t\000"
 6848      325F7400 
 6849              	.LASF84:
 6850 087b 4932435F 		.ascii	"I2C_MasterWriteBlocking\000"
 6850      4D617374 
 6850      65725772 
 6850      69746542 
 6850      6C6F636B 
 6851              	.LASF34:
 6852 0893 77656172 		.ascii	"wearLevelingFactor\000"
 6852      4C657665 
 6852      6C696E67 
 6852      46616374 
 6852      6F7200
 6853              	.LASF59:
 6854 08a6 62757474 		.ascii	"button_press_ISR\000"
 6854      6F6E5F70 
 6854      72657373 
 6854      5F495352 
 6854      00
 6855              	.LASF50:
 6856 08b7 66746F6D 		.ascii	"ftom\000"
 6856      00
 6857              	.LASF85:
 6858 08bc 69324341 		.ascii	"i2CAddr\000"
 6858      64647200 
 6859              	.LASF26:
 6860 08c4 63797374 		.ascii	"cystatus\000"
 6860      61747573 
 6860      00
 6861              	.LASF169:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 152


 6862 08cd 76696272 		.ascii	"vibratoCrossfade\000"
 6862      61746F43 
 6862      726F7373 
 6862      66616465 
 6862      00
 6863              	.LASF1:
 6864 08de 756E7369 		.ascii	"unsigned char\000"
 6864      676E6564 
 6864      20636861 
 6864      7200
 6865              	.LASF8:
 6866 08ec 5F5F7569 		.ascii	"__uint32_t\000"
 6866      6E743332 
 6866      5F7400
 6867              	.LASF114:
 6868 08f7 6F757443 		.ascii	"outChanged\000"
 6868      68616E67 
 6868      656400
 6869              	.LASF108:
 6870 0902 5553425F 		.ascii	"USB_active\000"
 6870      61637469 
 6870      766500
 6871              	.LASF35:
 6872 090d 72656475 		.ascii	"redundantCopy\000"
 6872      6E64616E 
 6872      74436F70 
 6872      7900
 6873              	.LASF89:
 6874 091b 74696D65 		.ascii	"timeout\000"
 6874      6F757400 
 6875              	.LASF49:
 6876 0923 6D746F66 		.ascii	"mtof\000"
 6876      00
 6877              	.LASF61:
 6878 0928 56627573 		.ascii	"Vbus_function\000"
 6878      5F66756E 
 6878      6374696F 
 6878      6E00
 6879              	.LASF110:
 6880 0936 6D696469 		.ascii	"midiSent\000"
 6880      53656E74 
 6880      00
 6881              	.LASF146:
 6882 093f 65657072 		.ascii	"eepromReturnValue\000"
 6882      6F6D5265 
 6882      7475726E 
 6882      56616C75 
 6882      6500
 6883              	.LASF64:
 6884 0951 70697463 		.ascii	"pitchBendVal\000"
 6884      6842656E 
 6884      6456616C 
 6884      00
 6885              	.LASF66:
 6886 095e 5553425F 		.ascii	"USB_service\000"
 6886      73657276 
 6886      69636500 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 153


 6887              	.LASF155:
 6888 096a 70697463 		.ascii	"pitchBendsPerString\000"
 6888      6842656E 
 6888      64735065 
 6888      72537472 
 6888      696E6700 
 6889              	.LASF0:
 6890 097e 7369676E 		.ascii	"signed char\000"
 6890      65642063 
 6890      68617200 
 6891              	.LASF5:
 6892 098a 73686F72 		.ascii	"short unsigned int\000"
 6892      7420756E 
 6892      7369676E 
 6892      65642069 
 6892      6E7400
 6893              	.LASF79:
 6894 099d 69567265 		.ascii	"iVref\000"
 6894      6600
 6895              	.LASF63:
 6896 09a3 6D61696E 		.ascii	"main\000"
 6896      00
 6897              	.LASF70:
 6898 09a8 73656E64 		.ascii	"sendMIDINoteOn\000"
 6898      4D494449 
 6898      4E6F7465 
 6898      4F6E00
 6899              	.LASF177:
 6900 09b7 6B6E6F62 		.ascii	"knobs7bitPrevLS\000"
 6900      73376269 
 6900      74507265 
 6900      764C5300 
 6901              	.LASF45:
 6902 09c7 75696E74 		.ascii	"uint\000"
 6902      00
 6903              	.LASF19:
 6904 09cc 75696E74 		.ascii	"uint8\000"
 6904      3800
 6905              	.LASF24:
 6906 09d2 646F7562 		.ascii	"double\000"
 6906      6C6500
 6907              	.LASF140:
 6908 09d9 74783242 		.ascii	"tx2Buffer\000"
 6908      75666665 
 6908      7200
 6909              	.LASF32:
 6910 09e3 6C617374 		.ascii	"lastWrRowAddr\000"
 6910      5772526F 
 6910      77416464 
 6910      7200
 6911              	.LASF78:
 6912 09f1 7363616E 		.ascii	"scanLinearResistor\000"
 6912      4C696E65 
 6912      61725265 
 6912      73697374 
 6912      6F7200
 6913              	.LASF125:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccAWhCZU.s 			page 154


 6914 0a04 6F637461 		.ascii	"octave\000"
 6914      766500
 6915              	.LASF99:
 6916 0a0b 5553425F 		.ascii	"USB_midiInBuffer\000"
 6916      6D696469 
 6916      496E4275 
 6916      66666572 
 6916      00
 6917              	.LASF162:
 6918 0a1c 696E7653 		.ascii	"invStringMappedPositions\000"
 6918      7472696E 
 6918      674D6170 
 6918      70656450 
 6918      6F736974 
 6919              	.LASF100:
 6920 0a35 5553425F 		.ascii	"USB_midi_out_ep\000"
 6920      6D696469 
 6920      5F6F7574 
 6920      5F657000 
 6921              	.LASF55:
 6922 0a45 69737461 		.ascii	"istart\000"
 6922      727400
 6923              	.LASF171:
 6924 0a4c 70726576 		.ascii	"previousPitchBendsSent\000"
 6924      696F7573 
 6924      50697463 
 6924      6842656E 
 6924      64735365 
 6925              	.LASF113:
 6926 0a63 63757272 		.ascii	"currentOutPointer\000"
 6926      656E744F 
 6926      7574506F 
 6926      696E7465 
 6926      7200
 6927              	.LASF71:
 6928 0a75 4D494449 		.ascii	"MIDInoteNum\000"
 6928      6E6F7465 
 6928      4E756D00 
 6929              	.LASF96:
 6930 0a81 43617053 		.ascii	"CapSense_sensorOnMask\000"
 6930      656E7365 
 6930      5F73656E 
 6930      736F724F 
 6930      6E4D6173 
 6931              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
