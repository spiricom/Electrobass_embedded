ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	usbActivityCounter
  20              		.bss
  21              		.type	usbActivityCounter, %object
  22              		.size	usbActivityCounter, 1
  23              	usbActivityCounter:
  24 0000 00       		.space	1
  25              		.comm	midiMsg,4,4
  26              		.global	currentVBUS
  27              		.type	currentVBUS, %object
  28              		.size	currentVBUS, 1
  29              	currentVBUS:
  30 0001 00       		.space	1
  31              		.global	prevVBUS
  32              		.type	prevVBUS, %object
  33              		.size	prevVBUS, 1
  34              	prevVBUS:
  35 0002 00       		.space	1
  36              		.global	USB_active
  37              		.type	USB_active, %object
  38              		.size	USB_active, 1
  39              	USB_active:
  40 0003 00       		.space	1
  41              		.global	USB_check_flag
  42              		.type	USB_check_flag, %object
  43              		.size	USB_check_flag, 1
  44              	USB_check_flag:
  45 0004 00       		.space	1
  46              		.global	midiSent
  47 0005 00       		.align	1
  48              		.type	midiSent, %object
  49              		.size	midiSent, 2
  50              	midiSent:
  51 0006 0000     		.space	2
  52              		.global	midiOverflow
  53              		.align	1
  54              		.type	midiOverflow, %object
  55              		.size	midiOverflow, 2
  56              	midiOverflow:
  57 0008 0000     		.space	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 2


  58              		.global	scanPart
  59 000a 0000     		.align	2
  60              		.type	scanPart, %object
  61              		.size	scanPart, 4
  62              	scanPart:
  63 000c 00000000 		.space	4
  64              		.global	channel
  65              		.align	2
  66              		.type	channel, %object
  67              		.size	channel, 4
  68              	channel:
  69 0010 00000000 		.space	4
  70              		.comm	I2Cbuff1,256,4
  71              		.comm	stringCapSensorsOnOff,1,4
  72              		.comm	stringCapSensorsRaw,16,4
  73              		.global	thresholdArray
  74              		.data
  75              		.align	2
  76              		.type	thresholdArray, %object
  77              		.size	thresholdArray, 8
  78              	thresholdArray:
  79 0000 1E       		.byte	30
  80 0001 1E       		.byte	30
  81 0002 1E       		.byte	30
  82 0003 1E       		.byte	30
  83 0004 1E       		.byte	30
  84 0005 1E       		.byte	30
  85 0006 1E       		.byte	30
  86 0007 1E       		.byte	30
  87              		.global	fretMeasurements
  88              		.align	2
  89              		.type	fretMeasurements, %object
  90              		.size	fretMeasurements, 32
  91              	fretMeasurements:
  92 0008 14270100 		.word	75540
  93 000c 17580000 		.word	22551
  94 0010 2DFD0000 		.word	64813
  95 0014 BF4B0000 		.word	19391
  96 0018 80F80000 		.word	63616
  97 001c 6C4A0000 		.word	19052
  98 0020 32190100 		.word	71986
  99 0024 03530000 		.word	21251
 100              		.global	fretRatios
 101              		.align	2
 102              		.type	fretRatios, %object
 103              		.size	fretRatios, 8
 104              	fretRatios:
 105 0028 C1A1713F 		.word	1064411585
 106 002c C1A1F13E 		.word	1056022977
 107              		.comm	linearPotValue32Bit,16,4
 108              		.global	i
 109              		.bss
 110              		.type	i, %object
 111              		.size	i, 1
 112              	i:
 113 0014 00       		.space	1
 114              		.global	counter
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 3


 115              		.type	counter, %object
 116              		.size	counter, 1
 117              	counter:
 118 0015 00       		.space	1
 119              		.comm	temper,4,4
 120              		.comm	previousButtons,44,4
 121              		.global	octave
 122 0016 0000     		.align	2
 123              		.type	octave, %object
 124              		.size	octave, 4
 125              	octave:
 126 0018 00000000 		.space	4
 127              		.comm	stringPlucks,16,4
 128              		.comm	stringPlucksPrev,16,4
 129              		.comm	knobsFIR,160,4
 130              		.comm	hysteresisStates,16,4
 131              		.global	hysteresisLowThresh
 132              		.data
 133              		.align	2
 134              		.type	hysteresisLowThresh, %object
 135              		.size	hysteresisLowThresh, 4
 136              	hysteresisLowThresh:
 137 0030 CDCCCC3E 		.word	1053609165
 138              		.global	hysteresisHighThresh
 139              		.align	2
 140              		.type	hysteresisHighThresh, %object
 141              		.size	hysteresisHighThresh, 4
 142              	hysteresisHighThresh:
 143 0034 9A99193F 		.word	1058642330
 144              		.comm	txChannel,1,1
 145              		.comm	txTD,1,1
 146              		.comm	txBuffer,16,4
 147              		.comm	rxChannel,1,1
 148              		.comm	rxTD,1,1
 149              		.comm	rxBuffer,16,4
 150              		.bss
 151              		.align	2
 152              	eepromArray:
 153 001c 0000     		.space	2
 154              		.global	array
 155 001e 0000     		.align	2
 156              		.type	array, %object
 157              		.size	array, 2
 158              	array:
 159 0020 0000     		.space	2
 160              		.comm	eepromReturnValue,1,1
 161              		.global	Em_EEPROM_em_EepromStorage
 162              		.section	.rodata
 163              		.align	8
 164              		.type	Em_EEPROM_em_EepromStorage, %object
 165              		.size	Em_EEPROM_em_EepromStorage, 1024
 166              	Em_EEPROM_em_EepromStorage:
 167 0000 00000000 		.space	1024
 167      00000000 
 167      00000000 
 167      00000000 
 167      00000000 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 4


 168              		.comm	eeprom_cnt,1,1
 169              		.comm	status,4,4
 170              		.comm	ptr,4,4
 171              		.global	barCount
 172              		.bss
 173 0022 0000     		.align	2
 174              		.type	barCount, %object
 175              		.size	barCount, 4
 176              	barCount:
 177 0024 00000000 		.space	4
 178              		.global	stringStates
 179              		.align	2
 180              		.type	stringStates, %object
 181              		.size	stringStates, 32
 182              	stringStates:
 183 0028 00000000 		.space	32
 183      00000000 
 183      00000000 
 183      00000000 
 183      00000000 
 184              		.section	.text.button_press_ISR,"ax",%progbits
 185              		.align	2
 186              		.global	button_press_ISR
 187              		.thumb
 188              		.thumb_func
 189              		.type	button_press_ISR, %function
 190              	button_press_ISR:
 191              	.LFB64:
 192              		.file 1 "main.c"
   1:main.c        **** /*****************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** *
   4:main.c        **** * Version: 3.0
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *   
   8:main.c        **** * 
   9:main.c        **** * Note:
  10:main.c        **** * 	The main project includes the ADC and other components required for the
  11:main.c        **** *   temperature measurement. The Thermistor component is a complete firmware component
  12:main.c        **** *   as decribed in the component datahseet and application note
  13:main.c        **** ******************************************************************************
  14:main.c        **** * Copyright (C) 2015, Cypress Semiconductor Corporation.
  15:main.c        **** ******************************************************************************
  16:main.c        **** * This software is owned by Cypress Semiconductor Corporation (Cypress) and is
  17:main.c        **** * protected by and subject to worldwide patent protection (United States and
  18:main.c        **** * foreign), United States copyright laws and international treaty provisions.
  19:main.c        **** * Cypress hereby grants to licensee a personal, non-exclusive, non-transferable
  20:main.c        **** * license to copy, use, modify, create derivative works of, and compile the
  21:main.c        **** * Cypress Source Code and derivative works for the sole purpose of creating
  22:main.c        **** * custom software in support of licensee product to be used only in conjunction
  23:main.c        **** * with a Cypress integrated circuit as specified in the applicable agreement.
  24:main.c        **** * Any reproduction, modification, translation, compilation, or representation of
  25:main.c        **** * this software except as specified above is prohibited without the express
  26:main.c        **** * written permission of Cypress.
  27:main.c        **** *
  28:main.c        **** * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 5


  29:main.c        **** * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  30:main.c        **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  31:main.c        **** * Cypress reserves the right to make changes without further notice to the
  32:main.c        **** * materials described herein. Cypress does not assume any liability arising out
  33:main.c        **** * of the application or use of any product or circuit described herein. Cypress
  34:main.c        **** * does not authorize its products for use as critical components in life-support
  35:main.c        **** * systems where a malfunction or failure may reasonably be expected to result in
  36:main.c        **** * significant injury to the user. The inclusion of Cypress' product in a life-
  37:main.c        **** * support systems application implies that the manufacturer assumes all risk of
  38:main.c        **** * such use and in doing so indemnifies Cypress against all charges. Use may be
  39:main.c        **** * limited by and subject to the applicable Cypress software license agreement.
  40:main.c        **** *****************************************************************************/
  41:main.c        **** #include <device.h>
  42:main.c        **** 
  43:main.c        **** #include <stdio.h>
  44:main.c        **** #include "math.h"
  45:main.c        **** 
  46:main.c        **** //#define MAPLE1 1
  47:main.c        **** #define GREEN3 1
  48:main.c        **** 
  49:main.c        **** volatile uint8 usbActivityCounter = 0u;
  50:main.c        ****  uint8 midiMsg[4];
  51:main.c        **** volatile uint8_t currentVBUS = 0;
  52:main.c        **** volatile uint8_t prevVBUS = 0;
  53:main.c        **** volatile uint8_t USB_active = 0;
  54:main.c        **** volatile uint8_t USB_check_flag = 0;
  55:main.c        **** 
  56:main.c        **** uint16_t midiSent = 0;
  57:main.c        **** uint16_t midiOverflow = 0;
  58:main.c        **** 
  59:main.c        **** uint scanPart = 0;
  60:main.c        **** uint channel = 0;
  61:main.c        **** 
  62:main.c        **** 
  63:main.c        **** void checkUSB_Vbus(void);
  64:main.c        **** void sendMIDIAllNotesOff(void);
  65:main.c        **** void sendMIDIPitchBend(int val, int channel);
  66:main.c        **** void firstCheckUSB_Vbus(void);
  67:main.c        **** void restartSystemCheck(void);
  68:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel);
  69:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel);
  70:main.c        **** CY_ISR_PROTO(SleepIsr_function);
  71:main.c        **** void noteEvent(int string);
  72:main.c        **** void I2C_reset(void);
  73:main.c        **** void CCEvent(int bar);
  74:main.c        **** 
  75:main.c        **** union breakFloat {
  76:main.c        ****  float f;
  77:main.c        ****  uint8_t b[4];  
  78:main.c        ****  uint32_t u32;
  79:main.c        **** };
  80:main.c        **** volatile uint8_t I2Cbuff1[256];
  81:main.c        **** uint8_t stringCapSensorsOnOff[1];
  82:main.c        **** uint8_t stringCapSensorsRaw[16];
  83:main.c        **** uint8_t thresholdArray[8] = {30, 30, 30, 30, 30, 30, 30, 30};
  84:main.c        **** #if MAPLE1
  85:main.c        **** uint32_t fretMeasurements[4][2] = {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 6


  86:main.c        ****     {68958,19847},
  87:main.c        ****     {67974,20532},
  88:main.c        ****     {68984,20665},
  89:main.c        ****     {85647,24651}
  90:main.c        **** };
  91:main.c        **** #elif defined GREEN3
  92:main.c        ****  uint32_t fretMeasurements[4][2] = {
  93:main.c        ****     {75540,22551},
  94:main.c        ****     {64813,19391},
  95:main.c        ****     {63616,19052},
  96:main.c        ****     {71986,21251}
  97:main.c        **** };
  98:main.c        **** #else
  99:main.c        **** uint16_t fretMeasurements[4][2] = {
 100:main.c        ****     {57984,17489},
 101:main.c        ****     {53292,15779},
 102:main.c        ****     {52933,15582},
 103:main.c        ****     {57784,16450}
 104:main.c        **** };
 105:main.c        ****     #endif
 106:main.c        **** float fretRatios[2] = {0.94387439674627617953623675390268f,0.47193719837313808976811837695134f}; 
 107:main.c        **** 
 108:main.c        **** 
 109:main.c        **** 
 110:main.c        **** int32_t linearPotValue32Bit[4];
 111:main.c        **** uint8_t i = 0;
 112:main.c        **** uint8_t counter = 0;
 113:main.c        **** int32_t temper;
 114:main.c        **** int previousButtons[11];
 115:main.c        **** int octave = 0;
 116:main.c        **** void scanLinearResistor();
 117:main.c        **** int stringPlucks[4];
 118:main.c        **** int stringPlucksPrev[4];
 119:main.c        **** 
 120:main.c        **** #define KNOB_FIR_SIZE 8
 121:main.c        **** #define KNOB_FIR_SIZE_MASK 7
 122:main.c        **** #define KNOB_FIR_SIZE_BITSHIFT 3
 123:main.c        **** uint32_t knobsFIR[5][KNOB_FIR_SIZE];
 124:main.c        **** 
 125:main.c        **** 
 126:main.c        **** #define LINEAR_FIR_SIZE 2
 127:main.c        **** #define LINEAR_FIR_SIZE_MASK 1
 128:main.c        **** #define LINEAR_FIR_SIZE_BITSHIFT 1
 129:main.c        **** 
 130:main.c        **** float hysteresisStates[4];
 131:main.c        **** float hysteresisLowThresh = 0.4f;
 132:main.c        **** float hysteresisHighThresh = 0.6f;
 133:main.c        **** 
 134:main.c        **** void DmaTxConfiguration(void);
 135:main.c        **** void DmaRxConfiguration(void);
 136:main.c        **** 
 137:main.c        **** /* DMA Configuration for DMA_TX */
 138:main.c        **** #define DMA_TX_BYTES_PER_BURST      (1u)
 139:main.c        **** #define DMA_TX_REQUEST_PER_BURST    (1u)
 140:main.c        **** #define DMA_TX_SRC_BASE             (CYDEV_SRAM_BASE)
 141:main.c        **** #define DMA_TX_DST_BASE             (CYDEV_PERIPH_BASE)
 142:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 7


 143:main.c        **** /* DMA Configuration for DMA_RX */
 144:main.c        **** #define DMA_RX_BYTES_PER_BURST      (1u)
 145:main.c        **** #define DMA_RX_REQUEST_PER_BURST    (1u)
 146:main.c        **** #define DMA_RX_SRC_BASE             (CYDEV_PERIPH_BASE)
 147:main.c        **** #define DMA_RX_DST_BASE             (CYDEV_SRAM_BASE)
 148:main.c        **** 
 149:main.c        **** #define BUFFER_SIZE                 (16u)
 150:main.c        **** #define STORE_TD_CFG_ONCMPLT        (1u)
 151:main.c        **** 
 152:main.c        **** /* Variable declarations for DMA_TX*/
 153:main.c        **** volatile uint8 txChannel;
 154:main.c        **** volatile uint8 txTD;
 155:main.c        **** volatile uint8 txBuffer[BUFFER_SIZE];
 156:main.c        **** 
 157:main.c        **** volatile uint8 rxChannel;
 158:main.c        **** volatile uint8 rxTD;
 159:main.c        **** volatile uint8 rxBuffer[BUFFER_SIZE];
 160:main.c        **** 
 161:main.c        ****     static uint8 CYCODE eepromArray[]={ 0, 0 };
 162:main.c        ****                                             
 163:main.c        ****     uint8 array[] ={ 0, 0 };
 164:main.c        ****                                 
 165:main.c        ****     /*Return status for EEPROM and UART*/ 
 166:main.c        **** cy_en_em_eeprom_status_t eepromReturnValue;
 167:main.c        **** 
 168:main.c        **** 
 169:main.c        **** /* EEPROM storage in work flash, this is defined in Em_EEPROM.c*/
 170:main.c        **** #if defined (__ICCARM__)
 171:main.c        **** #pragma data_alignment = CY_FLASH_SIZEOF_ROW
 172:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE] = {0u};
 173:main.c        **** #else
 174:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE]
 175:main.c        **** __ALIGNED(CY_FLASH_SIZEOF_ROW) = {0u};
 176:main.c        **** #endif /* defined (__ICCARM__) */
 177:main.c        **** 
 178:main.c        ****     uint8 eeprom_cnt;
 179:main.c        ****     cystatus status;
 180:main.c        ****     volatile const uint8 * ptr;
 181:main.c        **** volatile int barCount = 0;
 182:main.c        **** 
 183:main.c        **** void handleNotes(int note, int velocity, int string);
 184:main.c        **** 
 185:main.c        **** int stringStates[4][2] = {{0,0},{0,0},{0,0},{0,0}};
 186:main.c        **** 
 187:main.c        **** CY_ISR(button_press_ISR) {     /* No need to clear any interrupt source; interrupt component should
 193              		.loc 1 187 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 1, uses_anonymous_args = 0
 197              		@ link register save eliminated.
 198 0000 80B4     		push	{r7}
 199              		.cfi_def_cfa_offset 4
 200              		.cfi_offset 7, -4
 201 0002 00AF     		add	r7, sp, #0
 202              		.cfi_def_cfa_register 7
 188:main.c        ****  //FiltReg_Read(); 
 189:main.c        ****     //
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 8


 190:main.c        **** }
 203              		.loc 1 190 0
 204 0004 00BF     		nop
 205 0006 BD46     		mov	sp, r7
 206              		.cfi_def_cfa_register 13
 207              		@ sp needed
 208 0008 80BC     		pop	{r7}
 209              		.cfi_restore 7
 210              		.cfi_def_cfa_offset 0
 211 000a 7047     		bx	lr
 212              		.cfi_endproc
 213              	.LFE64:
 214              		.size	button_press_ISR, .-button_press_ISR
 215              		.global	__aeabi_fcmpgt
 216              		.global	__aeabi_fcmplt
 217              		.section	.text.LEAF_clip,"ax",%progbits
 218              		.align	2
 219              		.global	LEAF_clip
 220              		.thumb
 221              		.thumb_func
 222              		.type	LEAF_clip, %function
 223              	LEAF_clip:
 224              	.LFB65:
 191:main.c        **** 
 192:main.c        **** 
 193:main.c        **** #define INV_440 0.0022727272727273f
 194:main.c        **** 
 195:main.c        **** float   LEAF_clip(float min, float val, float max)
 196:main.c        **** {
 225              		.loc 1 196 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 24
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229 0000 80B5     		push	{r7, lr}
 230              		.cfi_def_cfa_offset 8
 231              		.cfi_offset 7, -8
 232              		.cfi_offset 14, -4
 233 0002 86B0     		sub	sp, sp, #24
 234              		.cfi_def_cfa_offset 32
 235 0004 00AF     		add	r7, sp, #0
 236              		.cfi_def_cfa_register 7
 237 0006 F860     		str	r0, [r7, #12]	@ float
 238 0008 B960     		str	r1, [r7, #8]	@ float
 239 000a 7A60     		str	r2, [r7, #4]	@ float
 197:main.c        ****     float tempmin = min;
 240              		.loc 1 197 0
 241 000c FB68     		ldr	r3, [r7, #12]	@ float
 242 000e 7B61     		str	r3, [r7, #20]	@ float
 198:main.c        ****     float tempmax = max;
 243              		.loc 1 198 0
 244 0010 7B68     		ldr	r3, [r7, #4]	@ float
 245 0012 3B61     		str	r3, [r7, #16]	@ float
 199:main.c        ****     if (min > max)
 246              		.loc 1 199 0
 247 0014 7968     		ldr	r1, [r7, #4]	@ float
 248 0016 F868     		ldr	r0, [r7, #12]	@ float
 249 0018 FFF7FEFF 		bl	__aeabi_fcmpgt
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 9


 250 001c 0346     		mov	r3, r0
 251 001e 002B     		cmp	r3, #0
 252 0020 03D0     		beq	.L3
 200:main.c        ****     {
 201:main.c        ****         tempmin = max;
 253              		.loc 1 201 0
 254 0022 7B68     		ldr	r3, [r7, #4]	@ float
 255 0024 7B61     		str	r3, [r7, #20]	@ float
 202:main.c        ****         tempmax = min;
 256              		.loc 1 202 0
 257 0026 FB68     		ldr	r3, [r7, #12]	@ float
 258 0028 3B61     		str	r3, [r7, #16]	@ float
 259              	.L3:
 203:main.c        ****     }
 204:main.c        ****     if (val < tempmin)
 260              		.loc 1 204 0
 261 002a 7969     		ldr	r1, [r7, #20]	@ float
 262 002c B868     		ldr	r0, [r7, #8]	@ float
 263 002e FFF7FEFF 		bl	__aeabi_fcmplt
 264 0032 0346     		mov	r3, r0
 265 0034 002B     		cmp	r3, #0
 266 0036 01D0     		beq	.L13
 205:main.c        ****     {
 206:main.c        ****         return tempmin;
 267              		.loc 1 206 0
 268 0038 7B69     		ldr	r3, [r7, #20]	@ float
 269 003a 09E0     		b	.L7
 270              	.L13:
 207:main.c        ****     }
 208:main.c        ****     else if (val > tempmax)
 271              		.loc 1 208 0
 272 003c 3969     		ldr	r1, [r7, #16]	@ float
 273 003e B868     		ldr	r0, [r7, #8]	@ float
 274 0040 FFF7FEFF 		bl	__aeabi_fcmpgt
 275 0044 0346     		mov	r3, r0
 276 0046 002B     		cmp	r3, #0
 277 0048 01D0     		beq	.L14
 209:main.c        ****     {
 210:main.c        ****         return tempmax;
 278              		.loc 1 210 0
 279 004a 3B69     		ldr	r3, [r7, #16]	@ float
 280 004c 00E0     		b	.L7
 281              	.L14:
 211:main.c        ****     }
 212:main.c        ****     else
 213:main.c        ****     {
 214:main.c        ****         return val;
 282              		.loc 1 214 0
 283 004e BB68     		ldr	r3, [r7, #8]	@ float
 284              	.L7:
 215:main.c        ****     }
 216:main.c        **** }
 285              		.loc 1 216 0
 286 0050 1846     		mov	r0, r3
 287 0052 1837     		adds	r7, r7, #24
 288              		.cfi_def_cfa_offset 8
 289 0054 BD46     		mov	sp, r7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 10


 290              		.cfi_def_cfa_register 13
 291              		@ sp needed
 292 0056 80BD     		pop	{r7, pc}
 293              		.cfi_endproc
 294              	.LFE65:
 295              		.size	LEAF_clip, .-LEAF_clip
 296              		.global	__aeabi_fcmple
 297              		.global	__aeabi_fmul
 298              		.section	.text.mtof,"ax",%progbits
 299              		.align	2
 300              		.global	mtof
 301              		.thumb
 302              		.thumb_func
 303              		.type	mtof, %function
 304              	mtof:
 305              	.LFB66:
 217:main.c        **** float mtof(float f)
 218:main.c        **** {
 306              		.loc 1 218 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 8
 309              		@ frame_needed = 1, uses_anonymous_args = 0
 310 0000 80B5     		push	{r7, lr}
 311              		.cfi_def_cfa_offset 8
 312              		.cfi_offset 7, -8
 313              		.cfi_offset 14, -4
 314 0002 82B0     		sub	sp, sp, #8
 315              		.cfi_def_cfa_offset 16
 316 0004 00AF     		add	r7, sp, #0
 317              		.cfi_def_cfa_register 7
 318 0006 7860     		str	r0, [r7, #4]	@ float
 219:main.c        ****     if (f <= -1500.0f) return(0);
 319              		.loc 1 219 0
 320 0008 1349     		ldr	r1, .L25
 321 000a 7868     		ldr	r0, [r7, #4]	@ float
 322 000c FFF7FEFF 		bl	__aeabi_fcmple
 323 0010 0346     		mov	r3, r0
 324 0012 002B     		cmp	r3, #0
 325 0014 02D0     		beq	.L23
 326              		.loc 1 219 0 is_stmt 0 discriminator 1
 327 0016 4FF00003 		mov	r3, #0
 328 001a 19E0     		b	.L18
 329              	.L23:
 220:main.c        ****     else if (f > 1499.0f) return(mtof(1499.0f));
 330              		.loc 1 220 0 is_stmt 1
 331 001c 0F49     		ldr	r1, .L25+4
 332 001e 7868     		ldr	r0, [r7, #4]	@ float
 333 0020 FFF7FEFF 		bl	__aeabi_fcmpgt
 334 0024 0346     		mov	r3, r0
 335 0026 002B     		cmp	r3, #0
 336 0028 04D0     		beq	.L24
 337              		.loc 1 220 0 is_stmt 0 discriminator 1
 338 002a 0C48     		ldr	r0, .L25+4
 339 002c FFF7FEFF 		bl	mtof
 340 0030 0346     		mov	r3, r0
 341 0032 0DE0     		b	.L18
 342              	.L24:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 11


 221:main.c        ****     else return (8.17579891564f * expf(0.0577622650f * f));
 343              		.loc 1 221 0 is_stmt 1
 344 0034 0A49     		ldr	r1, .L25+8
 345 0036 7868     		ldr	r0, [r7, #4]	@ float
 346 0038 FFF7FEFF 		bl	__aeabi_fmul
 347 003c 0346     		mov	r3, r0
 348 003e 1846     		mov	r0, r3
 349 0040 FFF7FEFF 		bl	expf
 350 0044 0346     		mov	r3, r0
 351 0046 0749     		ldr	r1, .L25+12
 352 0048 1846     		mov	r0, r3
 353 004a FFF7FEFF 		bl	__aeabi_fmul
 354 004e 0346     		mov	r3, r0
 355              	.L18:
 222:main.c        **** }
 356              		.loc 1 222 0
 357 0050 1846     		mov	r0, r3
 358 0052 0837     		adds	r7, r7, #8
 359              		.cfi_def_cfa_offset 8
 360 0054 BD46     		mov	sp, r7
 361              		.cfi_def_cfa_register 13
 362              		@ sp needed
 363 0056 80BD     		pop	{r7, pc}
 364              	.L26:
 365              		.align	2
 366              	.L25:
 367 0058 0080BBC4 		.word	-994344960
 368 005c 0060BB44 		.word	1153130496
 369 0060 20986C3D 		.word	1030527008
 370 0064 13D00241 		.word	1090703379
 371              		.cfi_endproc
 372              	.LFE66:
 373              		.size	mtof, .-mtof
 374              		.section	.text.ftom,"ax",%progbits
 375              		.align	2
 376              		.global	ftom
 377              		.thumb
 378              		.thumb_func
 379              		.type	ftom, %function
 380              	ftom:
 381              	.LFB67:
 223:main.c        **** 
 224:main.c        **** float ftom(float f)
 225:main.c        **** {
 382              		.loc 1 225 0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 8
 385              		@ frame_needed = 1, uses_anonymous_args = 0
 386 0000 80B5     		push	{r7, lr}
 387              		.cfi_def_cfa_offset 8
 388              		.cfi_offset 7, -8
 389              		.cfi_offset 14, -4
 390 0002 82B0     		sub	sp, sp, #8
 391              		.cfi_def_cfa_offset 16
 392 0004 00AF     		add	r7, sp, #0
 393              		.cfi_def_cfa_register 7
 394 0006 7860     		str	r0, [r7, #4]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 12


 226:main.c        ****     return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 395              		.loc 1 226 0
 396 0008 4FF00001 		mov	r1, #0
 397 000c 7868     		ldr	r0, [r7, #4]	@ float
 398 000e FFF7FEFF 		bl	__aeabi_fcmpgt
 399 0012 0346     		mov	r3, r0
 400 0014 002B     		cmp	r3, #0
 401 0016 0ED0     		beq	.L33
 402              		.loc 1 226 0 is_stmt 0 discriminator 1
 403 0018 0949     		ldr	r1, .L34
 404 001a 7868     		ldr	r0, [r7, #4]	@ float
 405 001c FFF7FEFF 		bl	__aeabi_fmul
 406 0020 0346     		mov	r3, r0
 407 0022 1846     		mov	r0, r3
 408 0024 FFF7FEFF 		bl	logf
 409 0028 0346     		mov	r3, r0
 410 002a 0649     		ldr	r1, .L34+4
 411 002c 1846     		mov	r0, r3
 412 002e FFF7FEFF 		bl	__aeabi_fmul
 413 0032 0346     		mov	r3, r0
 414 0034 00E0     		b	.L31
 415              	.L33:
 416              		.loc 1 226 0 discriminator 2
 417 0036 044B     		ldr	r3, .L34+8
 418              	.L31:
 227:main.c        **** }
 419              		.loc 1 227 0 is_stmt 1 discriminator 5
 420 0038 1846     		mov	r0, r3
 421 003a 0837     		adds	r7, r7, #8
 422              		.cfi_def_cfa_offset 8
 423 003c BD46     		mov	sp, r7
 424              		.cfi_def_cfa_register 13
 425              		@ sp needed
 426 003e 80BD     		pop	{r7, pc}
 427              	.L35:
 428              		.align	2
 429              	.L34:
 430 0040 D27EFA3D 		.word	1039826642
 431 0044 AC7F8A41 		.word	1099595692
 432 0048 0080BBC4 		.word	-994344960
 433              		.cfi_endproc
 434              	.LFE67:
 435              		.size	ftom, .-ftom
 436              		.global	__aeabi_fsub
 437              		.global	__aeabi_fadd
 438              		.section	.text.LEAF_interpolation_linear,"ax",%progbits
 439              		.align	2
 440              		.global	LEAF_interpolation_linear
 441              		.thumb
 442              		.thumb_func
 443              		.type	LEAF_interpolation_linear, %function
 444              	LEAF_interpolation_linear:
 445              	.LFB68:
 228:main.c        **** 
 229:main.c        **** // alpha, [0.0, 1.0]
 230:main.c        **** float LEAF_interpolation_linear (float A, float B, float alpha)
 231:main.c        **** {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 13


 446              		.loc 1 231 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 24
 449              		@ frame_needed = 1, uses_anonymous_args = 0
 450 0000 80B5     		push	{r7, lr}
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 7, -8
 453              		.cfi_offset 14, -4
 454 0002 86B0     		sub	sp, sp, #24
 455              		.cfi_def_cfa_offset 32
 456 0004 00AF     		add	r7, sp, #0
 457              		.cfi_def_cfa_register 7
 458 0006 F860     		str	r0, [r7, #12]	@ float
 459 0008 B960     		str	r1, [r7, #8]	@ float
 460 000a 7A60     		str	r2, [r7, #4]	@ float
 232:main.c        ****     float omAlpha = 1.0f - alpha;
 461              		.loc 1 232 0
 462 000c 7968     		ldr	r1, [r7, #4]	@ float
 463 000e 4FF07E50 		mov	r0, #1065353216
 464 0012 FFF7FEFF 		bl	__aeabi_fsub
 465 0016 0346     		mov	r3, r0
 466 0018 7B61     		str	r3, [r7, #20]	@ float
 233:main.c        ****     
 234:main.c        ****     // First 1/2 of interpolation
 235:main.c        ****     float out = A * omAlpha;
 467              		.loc 1 235 0
 468 001a 7969     		ldr	r1, [r7, #20]	@ float
 469 001c F868     		ldr	r0, [r7, #12]	@ float
 470 001e FFF7FEFF 		bl	__aeabi_fmul
 471 0022 0346     		mov	r3, r0
 472 0024 3B61     		str	r3, [r7, #16]	@ float
 236:main.c        ****     
 237:main.c        ****     out += B * alpha;
 473              		.loc 1 237 0
 474 0026 7968     		ldr	r1, [r7, #4]	@ float
 475 0028 B868     		ldr	r0, [r7, #8]	@ float
 476 002a FFF7FEFF 		bl	__aeabi_fmul
 477 002e 0346     		mov	r3, r0
 478 0030 1946     		mov	r1, r3
 479 0032 3869     		ldr	r0, [r7, #16]	@ float
 480 0034 FFF7FEFF 		bl	__aeabi_fadd
 481 0038 0346     		mov	r3, r0
 482 003a 3B61     		str	r3, [r7, #16]	@ float
 238:main.c        ****     
 239:main.c        ****     return out;
 483              		.loc 1 239 0
 484 003c 3B69     		ldr	r3, [r7, #16]	@ float
 240:main.c        **** }
 485              		.loc 1 240 0
 486 003e 1846     		mov	r0, r3
 487 0040 1837     		adds	r7, r7, #24
 488              		.cfi_def_cfa_offset 8
 489 0042 BD46     		mov	sp, r7
 490              		.cfi_def_cfa_register 13
 491              		@ sp needed
 492 0044 80BD     		pop	{r7, pc}
 493              		.cfi_endproc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 14


 494              	.LFE68:
 495              		.size	LEAF_interpolation_linear, .-LEAF_interpolation_linear
 496              		.global	whichLinearSensor
 497 0046 00BF     		.bss
 498              		.align	2
 499              		.type	whichLinearSensor, %object
 500              		.size	whichLinearSensor, 4
 501              	whichLinearSensor:
 502 0048 00000000 		.space	4
 503              		.global	__aeabi_fdiv
 504              		.section	.text.map,"ax",%progbits
 505              		.align	2
 506              		.global	map
 507              		.thumb
 508              		.thumb_func
 509              		.type	map, %function
 510              	map:
 511              	.LFB69:
 241:main.c        **** void USB_service(void);
 242:main.c        **** 
 243:main.c        **** volatile int whichLinearSensor = 0;
 244:main.c        **** 
 245:main.c        **** float map(float value, float istart, float istop, float ostart, float ostop)
 246:main.c        **** {
 512              		.loc 1 246 0
 513              		.cfi_startproc
 514              		@ args = 4, pretend = 0, frame = 16
 515              		@ frame_needed = 1, uses_anonymous_args = 0
 516 0000 B0B5     		push	{r4, r5, r7, lr}
 517              		.cfi_def_cfa_offset 16
 518              		.cfi_offset 4, -16
 519              		.cfi_offset 5, -12
 520              		.cfi_offset 7, -8
 521              		.cfi_offset 14, -4
 522 0002 84B0     		sub	sp, sp, #16
 523              		.cfi_def_cfa_offset 32
 524 0004 00AF     		add	r7, sp, #0
 525              		.cfi_def_cfa_register 7
 526 0006 F860     		str	r0, [r7, #12]	@ float
 527 0008 B960     		str	r1, [r7, #8]	@ float
 528 000a 7A60     		str	r2, [r7, #4]	@ float
 529 000c 3B60     		str	r3, [r7]	@ float
 247:main.c        ****     return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 530              		.loc 1 247 0
 531 000e 3968     		ldr	r1, [r7]	@ float
 532 0010 386A     		ldr	r0, [r7, #32]	@ float
 533 0012 FFF7FEFF 		bl	__aeabi_fsub
 534 0016 0346     		mov	r3, r0
 535 0018 1C46     		mov	r4, r3
 536 001a B968     		ldr	r1, [r7, #8]	@ float
 537 001c F868     		ldr	r0, [r7, #12]	@ float
 538 001e FFF7FEFF 		bl	__aeabi_fsub
 539 0022 0346     		mov	r3, r0
 540 0024 1D46     		mov	r5, r3
 541 0026 B968     		ldr	r1, [r7, #8]	@ float
 542 0028 7868     		ldr	r0, [r7, #4]	@ float
 543 002a FFF7FEFF 		bl	__aeabi_fsub
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 15


 544 002e 0346     		mov	r3, r0
 545 0030 1946     		mov	r1, r3
 546 0032 2846     		mov	r0, r5
 547 0034 FFF7FEFF 		bl	__aeabi_fdiv
 548 0038 0346     		mov	r3, r0
 549 003a 1946     		mov	r1, r3
 550 003c 2046     		mov	r0, r4
 551 003e FFF7FEFF 		bl	__aeabi_fmul
 552 0042 0346     		mov	r3, r0
 553 0044 3968     		ldr	r1, [r7]	@ float
 554 0046 1846     		mov	r0, r3
 555 0048 FFF7FEFF 		bl	__aeabi_fadd
 556 004c 0346     		mov	r3, r0
 248:main.c        **** }
 557              		.loc 1 248 0
 558 004e 1846     		mov	r0, r3
 559 0050 1037     		adds	r7, r7, #16
 560              		.cfi_def_cfa_offset 16
 561 0052 BD46     		mov	sp, r7
 562              		.cfi_def_cfa_register 13
 563              		@ sp needed
 564 0054 B0BD     		pop	{r4, r5, r7, pc}
 565              		.cfi_endproc
 566              	.LFE69:
 567              		.size	map, .-map
 568              		.global	testVar
 569 0056 00BF     		.bss
 570              		.align	2
 571              		.type	testVar, %object
 572              		.size	testVar, 4
 573              	testVar:
 574 004c 00000000 		.space	4
 575              		.global	lastNotes
 576              		.align	2
 577              		.type	lastNotes, %object
 578              		.size	lastNotes, 16
 579              	lastNotes:
 580 0050 00000000 		.space	16
 580      00000000 
 580      00000000 
 580      00000000 
 581              		.global	frettedState
 582              		.data
 583              		.align	2
 584              		.type	frettedState, %object
 585              		.size	frettedState, 4
 586              	frettedState:
 587 0038 01000000 		.word	1
 588              		.global	polyMode
 589              		.bss
 590              		.align	2
 591              		.type	polyMode, %object
 592              		.size	polyMode, 4
 593              	polyMode:
 594 0060 00000000 		.space	4
 595              		.comm	pitchBendsPerString,16,4
 596              		.global	openStringCount
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 16


 597              		.align	2
 598              		.type	openStringCount, %object
 599              		.size	openStringCount, 16
 600              	openStringCount:
 601 0064 00000000 		.space	16
 601      00000000 
 601      00000000 
 601      00000000 
 602              		.global	loudestString
 603              		.align	2
 604              		.type	loudestString, %object
 605              		.size	loudestString, 4
 606              	loudestString:
 607 0074 00000000 		.space	4
 608              		.global	timeSinceLastAttack
 609              		.align	3
 610              		.type	timeSinceLastAttack, %object
 611              		.size	timeSinceLastAttack, 8
 612              	timeSinceLastAttack:
 613 0078 00000000 		.space	8
 613      00000000 
 614              		.global	previousHysteresisStates
 615              		.align	2
 616              		.type	previousHysteresisStates, %object
 617              		.size	previousHysteresisStates, 16
 618              	previousHysteresisStates:
 619 0080 00000000 		.space	16
 619      00000000 
 619      00000000 
 619      00000000 
 620              		.global	openStringFreqs
 621              		.data
 622              		.align	2
 623              		.type	openStringFreqs, %object
 624              		.size	openStringFreqs, 16
 625              	openStringFreqs:
 626 003c DFCF2442 		.word	1109708767
 627 0040 00005C42 		.word	1113325568
 628 0044 FED49242 		.word	1116919038
 629 0048 7DFFC342 		.word	1120141181
 630              		.global	openStringMIDI
 631              		.align	2
 632              		.type	openStringMIDI, %object
 633              		.size	openStringMIDI, 16
 634              	openStringMIDI:
 635 004c 0000E041 		.word	1105199104
 636 0050 00000442 		.word	1107558400
 637 0054 00001842 		.word	1108869120
 638 0058 00002C42 		.word	1110179840
 639              		.global	invStringMappedPositions
 640              		.bss
 641              		.align	2
 642              		.type	invStringMappedPositions, %object
 643              		.size	invStringMappedPositions, 16
 644              	invStringMappedPositions:
 645 0090 00000000 		.space	16
 645      00000000 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 17


 645      00000000 
 645      00000000 
 646              		.global	stringMIDI
 647              		.align	2
 648              		.type	stringMIDI, %object
 649              		.size	stringMIDI, 16
 650              	stringMIDI:
 651 00a0 00000000 		.space	16
 651      00000000 
 651      00000000 
 651      00000000 
 652              		.global	stringMIDIPrev
 653              		.align	2
 654              		.type	stringMIDIPrev, %object
 655              		.size	stringMIDIPrev, 16
 656              	stringMIDIPrev:
 657 00b0 00000000 		.space	16
 657      00000000 
 657      00000000 
 657      00000000 
 658              		.global	linearHysteresis
 659              		.data
 660              		.align	2
 661              		.type	linearHysteresis, %object
 662              		.size	linearHysteresis, 4
 663              	linearHysteresis:
 664 005c 9A99193F 		.word	1058642330
 665              		.comm	hp_y,16,4
 666              		.comm	hp_x,16,4
 667              		.comm	hp_R,4,4
 668              		.comm	vibratoCrossfade,16,4
 669              		.comm	crossFadeStartCount,16,4
 670              		.global	previousPitchBendsSent
 671              		.bss
 672              		.align	2
 673              		.type	previousPitchBendsSent, %object
 674              		.size	previousPitchBendsSent, 4
 675              	previousPitchBendsSent:
 676 00c0 00000000 		.space	4
 677              		.comm	knobs,20,4
 678              		.comm	buttons,4,4
 679              		.global	firPointer
 680              		.align	2
 681              		.type	firPointer, %object
 682              		.size	firPointer, 4
 683              	firPointer:
 684 00c4 00000000 		.space	4
 685              		.global	knobs7bit
 686              		.align	2
 687              		.type	knobs7bit, %object
 688              		.size	knobs7bit, 5
 689              	knobs7bit:
 690 00c8 00000000 		.space	5
 690      00
 691              		.global	knobs7bitPrev
 692 00cd 000000   		.align	2
 693              		.type	knobs7bitPrev, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 18


 694              		.size	knobs7bitPrev, 10
 695              	knobs7bitPrev:
 696 00d0 00000000 		.space	10
 696      00000000 
 696      0000
 697              		.global	knobs7bitPrevLS
 698 00da 0000     		.align	2
 699              		.type	knobs7bitPrevLS, %object
 700              		.size	knobs7bitPrevLS, 10
 701              	knobs7bitPrevLS:
 702 00dc 00000000 		.space	10
 702      00000000 
 702      0000
 703              		.global	knobs7bitHysteresis
 704              		.data
 705              		.align	1
 706              		.type	knobs7bitHysteresis, %object
 707              		.size	knobs7bitHysteresis, 2
 708              	knobs7bitHysteresis:
 709 0060 1900     		.short	25
 710              		.global	linFirPointer
 711              		.bss
 712 00e6 0000     		.align	2
 713              		.type	linFirPointer, %object
 714              		.size	linFirPointer, 4
 715              	linFirPointer:
 716 00e8 00000000 		.space	4
 717              		.comm	linearFIR,32,4
 718              		.global	linearSmoothed
 719              		.align	2
 720              		.type	linearSmoothed, %object
 721              		.size	linearSmoothed, 16
 722              	linearSmoothed:
 723 00ec 00000000 		.space	16
 723      00000000 
 723      00000000 
 723      00000000 
 724              		.global	linearSmoothedPrev
 725              		.align	2
 726              		.type	linearSmoothedPrev, %object
 727              		.size	linearSmoothedPrev, 16
 728              	linearSmoothedPrev:
 729 00fc 00000000 		.space	16
 729      00000000 
 729      00000000 
 729      00000000 
 730              		.global	LHMuteCounter
 731              		.align	2
 732              		.type	LHMuteCounter, %object
 733              		.size	LHMuteCounter, 16
 734              	LHMuteCounter:
 735 010c 00000000 		.space	16
 735      00000000 
 735      00000000 
 735      00000000 
 736              		.global	LHMute
 737              		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 19


 738              		.type	LHMute, %object
 739              		.size	LHMute, 4
 740              	LHMute:
 741 011c 00000000 		.space	4
 742              		.global	pitchFreeze
 743              		.align	2
 744              		.type	pitchFreeze, %object
 745              		.size	pitchFreeze, 4
 746              	pitchFreeze:
 747 0120 00000000 		.space	4
 748              		.comm	pitchBendHistory,512,4
 749              		.global	pitchBendHistoryPointer
 750              		.align	2
 751              		.type	pitchBendHistoryPointer, %object
 752              		.size	pitchBendHistoryPointer, 8
 753              	pitchBendHistoryPointer:
 754 0124 00000000 		.space	8
 754      00000000 
 755              		.comm	skippedNotes,640,4
 756              		.global	skipPointer
 757              		.align	2
 758              		.type	skipPointer, %object
 759              		.size	skipPointer, 4
 760              	skipPointer:
 761 012c 00000000 		.space	4
 762              		.global	bufCount
 763              		.type	bufCount, %object
 764              		.size	bufCount, 1
 765              	bufCount:
 766 0130 00       		.space	1
 767              		.section	.text.SleepIsr_function,"ax",%progbits
 768              		.align	2
 769              		.global	SleepIsr_function
 770              		.thumb
 771              		.thumb_func
 772              		.type	SleepIsr_function, %function
 773              	SleepIsr_function:
 774              	.LFB70:
 249:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode);
 250:main.c        **** //Main
 251:main.c        **** 
 252:main.c        **** volatile int testVar = 0;
 253:main.c        **** int lastNotes[4] = {0,0,0,0};
 254:main.c        **** int frettedState = 1;
 255:main.c        **** int polyMode = 0;
 256:main.c        **** 
 257:main.c        **** float pitchBendsPerString[4];
 258:main.c        **** int openStringCount[4] = {0,0,0,0};
 259:main.c        **** int loudestString = 0;
 260:main.c        **** int64_t timeSinceLastAttack = 0;
 261:main.c        **** float previousHysteresisStates[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 262:main.c        **** float openStringFreqs[4] = {41.203f, 55.0f, 73.416f, 97.999f};
 263:main.c        **** float openStringMIDI[4] = {28.0f, 33.0f, 38.0f, 43.0f};
 264:main.c        **** float invStringMappedPositions[4] = {0,0,0,0};
 265:main.c        **** float stringMIDI[4] = {0,0,0,0};
 266:main.c        **** float stringMIDIPrev[4] = {0,0,0,0};
 267:main.c        **** float linearHysteresis = 0.6f;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 20


 268:main.c        **** float hp_y[4];
 269:main.c        **** float hp_x[4]; 
 270:main.c        **** float hp_R;
 271:main.c        **** 
 272:main.c        **** float vibratoCrossfade[4];
 273:main.c        **** int crossFadeStartCount[4];
 274:main.c        **** 
 275:main.c        **** int previousPitchBendsSent = 0;
 276:main.c        **** uint32_t knobs[5];
 277:main.c        **** int buttons;
 278:main.c        **** 
 279:main.c        **** int firPointer = 0;
 280:main.c        **** uint8_t knobs7bit[5] = {0,0,0,0,0};
 281:main.c        **** uint16_t knobs7bitPrev[5] = {0,0,0,0,0};
 282:main.c        **** uint16_t knobs7bitPrevLS[5] = {0,0,0,0,0};
 283:main.c        **** uint16_t knobs7bitHysteresis = 25;
 284:main.c        **** 
 285:main.c        **** uint8_t linFirPointer[4] = {0,0,0,0};
 286:main.c        **** uint32_t linearFIR[4][LINEAR_FIR_SIZE];
 287:main.c        **** uint32_t linearSmoothed[4] = {0,0,0,0};
 288:main.c        **** uint32_t linearSmoothedPrev[4] = {0,0,0,0};         
 289:main.c        **** uint32_t LHMuteCounter[4] = {0,0,0,0};
 290:main.c        **** uint8_t LHMute[4] = {0,0,0,0};
 291:main.c        **** uint8_t pitchFreeze[4] = {0,0,0,0};
 292:main.c        **** float pitchBendHistory[4][32];
 293:main.c        **** uint16_t pitchBendHistoryPointer[4] = {0,0,0,0};
 294:main.c        **** 
 295:main.c        **** int skippedNotes[32][5];
 296:main.c        **** int skipPointer = 0;
 297:main.c        **** 
 298:main.c        **** uint8_t bufCount = 0;
 299:main.c        **** 
 300:main.c        **** CY_ISR(SleepIsr_function)
 301:main.c        **** {
 775              		.loc 1 301 0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 1, uses_anonymous_args = 0
 779 0000 80B5     		push	{r7, lr}
 780              		.cfi_def_cfa_offset 8
 781              		.cfi_offset 7, -8
 782              		.cfi_offset 14, -4
 783 0002 00AF     		add	r7, sp, #0
 784              		.cfi_def_cfa_register 7
 302:main.c        ****     if (USB_active)
 785              		.loc 1 302 0
 786 0004 0C4B     		ldr	r3, .L43
 787 0006 1B78     		ldrb	r3, [r3]
 788 0008 DBB2     		uxtb	r3, r3
 789 000a 002B     		cmp	r3, #0
 790 000c 0FD0     		beq	.L41
 303:main.c        ****     {
 304:main.c        ****         //check USB activity
 305:main.c        ****         if( USB_CheckActivity() != 0u ) 
 791              		.loc 1 305 0
 792 000e FFF7FEFF 		bl	USB_CheckActivity
 793 0012 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 21


 794 0014 002B     		cmp	r3, #0
 795 0016 03D0     		beq	.L42
 306:main.c        ****         {
 307:main.c        ****             usbActivityCounter = 0u;
 796              		.loc 1 307 0
 797 0018 084B     		ldr	r3, .L43+4
 798 001a 0022     		movs	r2, #0
 799 001c 1A70     		strb	r2, [r3]
 800 001e 06E0     		b	.L41
 801              	.L42:
 308:main.c        ****         } 
 309:main.c        ****         else 
 310:main.c        ****         {
 311:main.c        ****             usbActivityCounter++;
 802              		.loc 1 311 0
 803 0020 064B     		ldr	r3, .L43+4
 804 0022 1B78     		ldrb	r3, [r3]
 805 0024 DBB2     		uxtb	r3, r3
 806 0026 0133     		adds	r3, r3, #1
 807 0028 DAB2     		uxtb	r2, r3
 808 002a 044B     		ldr	r3, .L43+4
 809 002c 1A70     		strb	r2, [r3]
 810              	.L41:
 312:main.c        ****         }
 313:main.c        **** 
 314:main.c        ****     }
 315:main.c        ****     //Clear pending interrupt
 316:main.c        ****     SleepTimer_GetStatus();
 811              		.loc 1 316 0
 812 002e FFF7FEFF 		bl	SleepTimer_GetStatus
 317:main.c        **** }
 813              		.loc 1 317 0
 814 0032 00BF     		nop
 815 0034 80BD     		pop	{r7, pc}
 816              	.L44:
 817 0036 00BF     		.align	2
 818              	.L43:
 819 0038 00000000 		.word	USB_active
 820 003c 00000000 		.word	usbActivityCounter
 821              		.cfi_endproc
 822              	.LFE70:
 823              		.size	SleepIsr_function, .-SleepIsr_function
 824              		.section	.text.Vbus_function,"ax",%progbits
 825              		.align	2
 826              		.global	Vbus_function
 827              		.thumb
 828              		.thumb_func
 829              		.type	Vbus_function, %function
 830              	Vbus_function:
 831              	.LFB71:
 318:main.c        **** CY_ISR(Vbus_function)
 319:main.c        **** {
 832              		.loc 1 319 0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 0
 835              		@ frame_needed = 1, uses_anonymous_args = 0
 836 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 22


 837              		.cfi_def_cfa_offset 8
 838              		.cfi_offset 7, -8
 839              		.cfi_offset 14, -4
 840 0002 00AF     		add	r7, sp, #0
 841              		.cfi_def_cfa_register 7
 320:main.c        ****     //plug or unplug event
 321:main.c        ****     //check if eeprom has a flag saying you just restarted. If so, don't restart again
 322:main.c        ****     //otherwise, restart
 323:main.c        ****     my_Vbus_ISR_ClearPending();
 842              		.loc 1 323 0
 843 0004 FFF7FEFF 		bl	my_Vbus_ISR_ClearPending
 324:main.c        ****     vBusPin_ClearInterrupt();
 844              		.loc 1 324 0
 845 0008 FFF7FEFF 		bl	vBusPin_ClearInterrupt
 325:main.c        ****     restartSystemCheck();
 846              		.loc 1 325 0
 847 000c FFF7FEFF 		bl	restartSystemCheck
 326:main.c        **** 
 327:main.c        **** }
 848              		.loc 1 327 0
 849 0010 00BF     		nop
 850 0012 80BD     		pop	{r7, pc}
 851              		.cfi_endproc
 852              	.LFE71:
 853              		.size	Vbus_function, .-Vbus_function
 854              		.section	.text.restartSystemCheck,"ax",%progbits
 855              		.align	2
 856              		.global	restartSystemCheck
 857              		.thumb
 858              		.thumb_func
 859              		.type	restartSystemCheck, %function
 860              	restartSystemCheck:
 861              	.LFB72:
 328:main.c        **** 
 329:main.c        **** void restartSystemCheck()
 330:main.c        **** {
 862              		.loc 1 330 0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 1, uses_anonymous_args = 0
 866 0000 80B5     		push	{r7, lr}
 867              		.cfi_def_cfa_offset 8
 868              		.cfi_offset 7, -8
 869              		.cfi_offset 14, -4
 870 0002 00AF     		add	r7, sp, #0
 871              		.cfi_def_cfa_register 7
 331:main.c        ****     eepromReturnValue = Em_EEPROM_Read(0u, eepromArray, 2u);
 872              		.loc 1 331 0
 873 0004 184B     		ldr	r3, .L50
 874 0006 0222     		movs	r2, #2
 875 0008 1849     		ldr	r1, .L50+4
 876 000a 0020     		movs	r0, #0
 877 000c FFF7FEFF 		bl	Cy_Em_EEPROM_Read
 878 0010 0346     		mov	r3, r0
 879 0012 1A46     		mov	r2, r3
 880 0014 164B     		ldr	r3, .L50+8
 881 0016 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 23


 332:main.c        ****     //only do the restart check if there is a USB cable plugged in (to avoid restarting while tryin
 333:main.c        ****     if (USB_VBusPresent() == 1)
 882              		.loc 1 333 0
 883 0018 FFF7FEFF 		bl	USB_VBusPresent
 884 001c 0346     		mov	r3, r0
 885 001e 012B     		cmp	r3, #1
 886 0020 20D1     		bne	.L49
 334:main.c        ****     {
 335:main.c        ****         if (*(volatile uint8 *) &eepromArray[0] == 1u)
 887              		.loc 1 335 0
 888 0022 124B     		ldr	r3, .L50+4
 889 0024 1B78     		ldrb	r3, [r3]
 890 0026 DBB2     		uxtb	r3, r3
 891 0028 012B     		cmp	r3, #1
 892 002a 0CD1     		bne	.L48
 336:main.c        ****         {
 337:main.c        ****             //a flag says we just restarted
 338:main.c        ****             //write a zero so it knows next time that it's OK to restart
 339:main.c        ****             array[0] = 0;
 893              		.loc 1 339 0
 894 002c 114B     		ldr	r3, .L50+12
 895 002e 0022     		movs	r2, #0
 896 0030 1A70     		strb	r2, [r3]
 340:main.c        ****             Em_EEPROM_Write(0u,array,2u);     
 897              		.loc 1 340 0
 898 0032 0D4B     		ldr	r3, .L50
 899 0034 0222     		movs	r2, #2
 900 0036 0F49     		ldr	r1, .L50+12
 901 0038 0020     		movs	r0, #0
 902 003a FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 341:main.c        ****             USB_check_flag = 1;
 903              		.loc 1 341 0
 904 003e 0E4B     		ldr	r3, .L50+16
 905 0040 0122     		movs	r2, #1
 906 0042 1A70     		strb	r2, [r3]
 342:main.c        ****         }
 343:main.c        ****         else
 344:main.c        ****         {
 345:main.c        ****            //otherwise, we need to restart
 346:main.c        ****            array[0] = 1;
 347:main.c        ****            Em_EEPROM_Write(0u,array,2u);  
 348:main.c        ****             USB_Stop();
 349:main.c        ****             I2C_1_Stop();
 350:main.c        ****             CySoftwareReset();
 351:main.c        ****         }
 352:main.c        ****     }
 353:main.c        **** }
 907              		.loc 1 353 0
 908 0044 0EE0     		b	.L49
 909              	.L48:
 346:main.c        ****            Em_EEPROM_Write(0u,array,2u);  
 910              		.loc 1 346 0
 911 0046 0B4B     		ldr	r3, .L50+12
 912 0048 0122     		movs	r2, #1
 913 004a 1A70     		strb	r2, [r3]
 347:main.c        ****             USB_Stop();
 914              		.loc 1 347 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 24


 915 004c 064B     		ldr	r3, .L50
 916 004e 0222     		movs	r2, #2
 917 0050 0849     		ldr	r1, .L50+12
 918 0052 0020     		movs	r0, #0
 919 0054 FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 348:main.c        ****             I2C_1_Stop();
 920              		.loc 1 348 0
 921 0058 FFF7FEFF 		bl	USB_Stop
 349:main.c        ****             CySoftwareReset();
 922              		.loc 1 349 0
 923 005c FFF7FEFF 		bl	I2C_1_Stop
 350:main.c        ****         }
 924              		.loc 1 350 0
 925 0060 FFF7FEFF 		bl	CySoftwareReset
 926              	.L49:
 927              		.loc 1 353 0
 928 0064 00BF     		nop
 929 0066 80BD     		pop	{r7, pc}
 930              	.L51:
 931              		.align	2
 932              	.L50:
 933 0068 00000000 		.word	Em_EEPROM_context
 934 006c 1C000000 		.word	eepromArray
 935 0070 00000000 		.word	eepromReturnValue
 936 0074 00000000 		.word	array
 937 0078 00000000 		.word	USB_check_flag
 938              		.cfi_endproc
 939              	.LFE72:
 940              		.size	restartSystemCheck, .-restartSystemCheck
 941              		.global	__aeabi_ui2f
 942              		.global	__aeabi_f2iz
 943              		.global	__aeabi_f2uiz
 944              		.section	.text.main,"ax",%progbits
 945              		.align	2
 946              		.global	main
 947              		.thumb
 948              		.thumb_func
 949              		.type	main, %function
 950              	main:
 951              	.LFB73:
 354:main.c        **** 
 355:main.c        **** int main(void)
 356:main.c        **** {
 952              		.loc 1 356 0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 24
 955              		@ frame_needed = 1, uses_anonymous_args = 0
 956 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 957              		.cfi_def_cfa_offset 20
 958              		.cfi_offset 4, -20
 959              		.cfi_offset 5, -16
 960              		.cfi_offset 6, -12
 961              		.cfi_offset 7, -8
 962              		.cfi_offset 14, -4
 963 0002 89B0     		sub	sp, sp, #36
 964              		.cfi_def_cfa_offset 56
 965 0004 02AF     		add	r7, sp, #8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 25


 966              		.cfi_def_cfa 7, 48
 357:main.c        **** 
 358:main.c        **** 	CYGlobalIntEnable; 
 967              		.loc 1 358 0
 968              		.syntax unified
 969              	@ 358 "main.c" 1
 970 0006 62B6     		CPSIE   i
 971              	@ 0 "" 2
 359:main.c        ****     SPI_ready_Write(0);
 972              		.loc 1 359 0
 973              		.thumb
 974              		.syntax unified
 975 0008 0020     		movs	r0, #0
 976 000a FFF7FEFF 		bl	SPI_ready_Write
 360:main.c        ****     
 361:main.c        ****     //EEPROM_Start();
 362:main.c        ****     
 363:main.c        ****     eepromReturnValue = Em_EEPROM_Init((uint32_t)Em_EEPROM_em_EepromStorage);
 977              		.loc 1 363 0
 978 000e A24B     		ldr	r3, .L104
 979 0010 1846     		mov	r0, r3
 980 0012 FFF7FEFF 		bl	Em_EEPROM_Init
 981 0016 0346     		mov	r3, r0
 982 0018 1A46     		mov	r2, r3
 983 001a A04B     		ldr	r3, .L104+4
 984 001c 1A70     		strb	r2, [r3]
 364:main.c        ****     if(eepromReturnValue != CY_EM_EEPROM_SUCCESS)
 365:main.c        ****     {
 366:main.c        ****        // HandleError();
 367:main.c        ****     }
 368:main.c        ****     USB_SetPowerStatus(USB_DEVICE_STATUS_SELF_POWERED);
 985              		.loc 1 368 0
 986 001e 0120     		movs	r0, #1
 987 0020 FFF7FEFF 		bl	USB_SetPowerStatus
 369:main.c        ****     my_Vbus_ISR_StartEx(Vbus_function);
 988              		.loc 1 369 0
 989 0024 9E48     		ldr	r0, .L104+8
 990 0026 FFF7FEFF 		bl	my_Vbus_ISR_StartEx
 370:main.c        ****     
 371:main.c        ****     if (!USB_VBusPresent())
 991              		.loc 1 371 0
 992 002a FFF7FEFF 		bl	USB_VBusPresent
 993 002e 0346     		mov	r3, r0
 994 0030 002B     		cmp	r3, #0
 995 0032 01D1     		bne	.L53
 372:main.c        ****     {
 373:main.c        ****        restartSystemCheck();
 996              		.loc 1 373 0
 997 0034 FFF7FEFF 		bl	restartSystemCheck
 998              	.L53:
 374:main.c        ****     }
 375:main.c        ****     
 376:main.c        ****     
 377:main.c        ****     IDAC8_1_Start();
 999              		.loc 1 377 0
 1000 0038 FFF7FEFF 		bl	IDAC8_1_Start
 378:main.c        **** 	ADC_1_Start();
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 26


 1001              		.loc 1 378 0
 1002 003c FFF7FEFF 		bl	ADC_1_Start
 379:main.c        **** 	AMux_1_Start();
 1003              		.loc 1 379 0
 1004 0040 FFF7FEFF 		bl	AMux_1_Start
 380:main.c        ****     DmaTxConfiguration();
 1005              		.loc 1 380 0
 1006 0044 FFF7FEFF 		bl	DmaTxConfiguration
 381:main.c        ****     DmaRxConfiguration();
 1007              		.loc 1 381 0
 1008 0048 FFF7FEFF 		bl	DmaRxConfiguration
 382:main.c        ****     ADC_SAR_Seq_1_Start();
 1009              		.loc 1 382 0
 1010 004c FFF7FEFF 		bl	ADC_SAR_Seq_1_Start
 383:main.c        ****     ADC_SAR_Seq_1_StartConvert();
 1011              		.loc 1 383 0
 1012 0050 FFF7FEFF 		bl	ADC_SAR_Seq_1_StartConvert
 384:main.c        ****     SPIM_1_Start();
 1013              		.loc 1 384 0
 1014 0054 FFF7FEFF 		bl	SPIM_1_Start
 385:main.c        ****     
 386:main.c        ****     //SPIM_2_Start();
 387:main.c        ****     //I2C_1_Start();
 388:main.c        ****     
 389:main.c        **** 
 390:main.c        ****     
 391:main.c        ****     CapSense_Start();     
 1015              		.loc 1 391 0
 1016 0058 FFF7FEFF 		bl	CapSense_Start
 392:main.c        ****     
 393:main.c        ****     hp_R = 1.0f - (3.14159265358979f * 2.0f * 2.0f / 200.0f);
 1017              		.loc 1 393 0
 1018 005c 914B     		ldr	r3, .L104+12
 1019 005e 924A     		ldr	r2, .L104+16
 1020 0060 1A60     		str	r2, [r3]	@ float
 394:main.c        **** 
 395:main.c        ****     CyDelay(10);
 1021              		.loc 1 395 0
 1022 0062 0A20     		movs	r0, #10
 1023 0064 FFF7FEFF 		bl	CyDelay
 396:main.c        ****     CapSense_InitializeAllBaselines() ;
 1024              		.loc 1 396 0
 1025 0068 FFF7FEFF 		bl	CapSense_InitializeAllBaselines
 397:main.c        ****     
 398:main.c        ****     SPI_ready_Write(1);
 1026              		.loc 1 398 0
 1027 006c 0120     		movs	r0, #1
 1028 006e FFF7FEFF 		bl	SPI_ready_Write
 399:main.c        ****     CyDelay(10);
 1029              		.loc 1 399 0
 1030 0072 0A20     		movs	r0, #10
 1031 0074 FFF7FEFF 		bl	CyDelay
 1032              	.L99:
 400:main.c        **** 
 401:main.c        ****     //tSimplePoly_init(&myPoly);
 402:main.c        **** 	for(;;)
 403:main.c        ****     {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 27


 404:main.c        **** 
 405:main.c        **** 
 406:main.c        ****         //turn on the multiplexer channels that set up the resistive sensors
 407:main.c        ****         //#if 0
 408:main.c        ****         ExtMUX_EN_Write(0);
 1033              		.loc 1 408 0
 1034 0078 0020     		movs	r0, #0
 1035 007a FFF7FEFF 		bl	ExtMUX_EN_Write
 409:main.c        ****         //CyDelayUs(5);
 410:main.c        ****         scanLinearResistor();
 1036              		.loc 1 410 0
 1037 007e FFF7FEFF 		bl	scanLinearResistor
 411:main.c        **** 
 412:main.c        ****         //now disconnect resistive sensors so that they don't interfere with CapSense
 413:main.c        ****        // #endif
 414:main.c        ****         ExtMUX_EN_Write(1);
 1038              		.loc 1 414 0
 1039 0082 0120     		movs	r0, #1
 1040 0084 FFF7FEFF 		bl	ExtMUX_EN_Write
 415:main.c        ****         CyDelayUs(5);
 1041              		.loc 1 415 0
 1042 0088 0520     		movs	r0, #5
 1043 008a FFF7FEFF 		bl	CyDelayUs
 416:main.c        ****         CapSense_ClearSensors();
 1044              		.loc 1 416 0
 1045 008e FFF7FEFF 		bl	CapSense_ClearSensors
 417:main.c        ****         CapSense_UpdateEnabledBaselines();
 1046              		.loc 1 417 0
 1047 0092 FFF7FEFF 		bl	CapSense_UpdateEnabledBaselines
 418:main.c        ****         CapSense_ScanEnabledWidgets();  
 1048              		.loc 1 418 0
 1049 0096 FFF7FEFF 		bl	CapSense_ScanEnabledWidgets
 419:main.c        ****         
 420:main.c        ****         if (scanPart == 0)
 1050              		.loc 1 420 0
 1051 009a 844B     		ldr	r3, .L104+20
 1052 009c 1B68     		ldr	r3, [r3]
 1053 009e 002B     		cmp	r3, #0
 1054 00a0 40F08E82 		bne	.L54
 1055              	.LBB2:
 421:main.c        ****         {
 422:main.c        **** 
 423:main.c        ****             //buttons = Status_Reg_1_Read();
 424:main.c        ****             #if 0
 425:main.c        ****             
 426:main.c        ****             
 427:main.c        ****           //  sendMIDIControlChange(whichLinearSensor*3, (linearPotValue32Bit[whichLinearSensor] >>
 428:main.c        ****           //  sendMIDIControlChange(whichLinearSensor*3+1, (linearPotValue32Bit[whichLinearSensor] 
 429:main.c        ****           //  sendMIDIControlChange(whichLinearSensor*3+2, (linearPotValue32Bit[whichLinearSensor] 
 430:main.c        ****             uint8_t fretAbove = binarySearch(fretMeasurements[whichLinearSensor], 0, 21, linearPotV
 431:main.c        ****             float pitchBendVal = 8192.0;
 432:main.c        ****             float midiFloat = 0.0f;
 433:main.c        ****             if (fretAbove > 0)
 434:main.c        ****             {
 435:main.c        ****                 float range = fretMeasurements[whichLinearSensor][fretAbove-1] - fretMeasurements[w
 436:main.c        ****                 float ratio = ((float)(linearPotValue32Bit[whichLinearSensor]  - fretMeasurements[w
 437:main.c        ****                 midiFloat = (1.0f - ratio) + (float)(fretAbove - 1);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 28


 438:main.c        ****             }
 439:main.c        ****             if (frettedState)
 440:main.c        ****             {
 441:main.c        ****                 float roundedMidiFloat = roundf(midiFloat);
 442:main.c        ****                 if (midiFloat < hysteresisStates[whichLinearSensor] - 0.6f)
 443:main.c        ****                 {
 444:main.c        ****                     hysteresisStates[whichLinearSensor] = roundedMidiFloat;   
 445:main.c        ****                 }
 446:main.c        ****                 else if (midiFloat > hysteresisStates[whichLinearSensor] + 0.6f)
 447:main.c        ****                 {
 448:main.c        ****                     hysteresisStates[whichLinearSensor] = roundedMidiFloat;   
 449:main.c        ****                 }
 450:main.c        ****                 if (hysteresisStates[whichLinearSensor] != previousHysteresisStates[whichLinearSens
 451:main.c        ****                 {
 452:main.c        ****                     vibratoCrossfade[whichLinearSensor] = 0.0f;
 453:main.c        ****                     crossFadeStartCount[whichLinearSensor] = 0;
 454:main.c        ****                 }
 455:main.c        ****                 //64 is the number of passes through this loop that it waits before applying the hi
 456:main.c        ****                 //otherwise you get glitches as the filter picks up fret changes and smoothes them 
 457:main.c        ****                 // would be better to do highpass and lowpass to narrow to bandwidth of 1Hz to 10Hz
 458:main.c        ****                 else if ((vibratoCrossfade[whichLinearSensor] < 1.5f) && (crossFadeStartCount[which
 459:main.c        ****                 {
 460:main.c        ****                     vibratoCrossfade[whichLinearSensor] += 0.01f;
 461:main.c        ****                    
 462:main.c        ****                 }
 463:main.c        ****                 else if (crossFadeStartCount[whichLinearSensor] <= 64)
 464:main.c        ****                 {
 465:main.c        ****                     crossFadeStartCount[whichLinearSensor]++;
 466:main.c        ****                 }
 467:main.c        ****          
 468:main.c        ****                 previousHysteresisStates[whichLinearSensor] = hysteresisStates[whichLinearSensor];
 469:main.c        ****                                 //high pass filter to get fast changes to add later
 470:main.c        ****                 float vibrato = midiFloat - hp_x[whichLinearSensor] + hp_R * hp_y[whichLinearSensor
 471:main.c        ****                 hp_x[whichLinearSensor] = midiFloat;
 472:main.c        ****                 hp_y[whichLinearSensor] = vibrato;
 473:main.c        ****                 
 474:main.c        ****                 midiFloat = hysteresisStates[whichLinearSensor]+ (vibrato * vibratoCrossfade[whichL
 475:main.c        ****             }                
 476:main.c        ****             #endif
 477:main.c        ****             
 478:main.c        ****              
 479:main.c        ****             float pitchBendVal = 8192.0;
 1056              		.loc 1 479 0
 1057 00a4 4FF08C43 		mov	r3, #1174405120
 1058 00a8 7B60     		str	r3, [r7, #4]	@ float
 480:main.c        ****             
 481:main.c        ****             if (linearPotValue32Bit[whichLinearSensor] == 65535)
 1059              		.loc 1 481 0
 1060 00aa 814B     		ldr	r3, .L104+24
 1061 00ac 1B68     		ldr	r3, [r3]
 1062 00ae 814A     		ldr	r2, .L104+28
 1063 00b0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1064 00b4 4FF6FF72 		movw	r2, #65535
 1065 00b8 9342     		cmp	r3, r2
 1066 00ba 40F01381 		bne	.L55
 482:main.c        ****             {
 483:main.c        ****                 stringMIDI[whichLinearSensor] = openStringMIDI[whichLinearSensor];
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 29


 1067              		.loc 1 483 0
 1068 00be 7C4B     		ldr	r3, .L104+24
 1069 00c0 1B68     		ldr	r3, [r3]
 1070 00c2 7B4A     		ldr	r2, .L104+24
 1071 00c4 1268     		ldr	r2, [r2]
 1072 00c6 7C49     		ldr	r1, .L104+32
 1073 00c8 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1074 00cc 7B49     		ldr	r1, .L104+36
 1075 00ce 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 484:main.c        ****                  //pitchBendVal  = (stringMIDI[whichLinearSensor] * 341.0f) + 8192.0f;
 485:main.c        ****                 //if ((openStringCount[whichLinearSensor] < 5) || (CapSense_sensorOnMask[whichLinea
 486:main.c        ****                 //{
 487:main.c        ****                 //    openStringCount[whichLinearSensor]++;
 488:main.c        ****                 //}
 489:main.c        ****                 //else
 490:main.c        ****                 //{
 491:main.c        ****                 //    pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 492:main.c        ****                // }
 493:main.c        ****                 if (pitchFreeze[whichLinearSensor])
 1076              		.loc 1 493 0
 1077 00d2 774B     		ldr	r3, .L104+24
 1078 00d4 1B68     		ldr	r3, [r3]
 1079 00d6 7A4A     		ldr	r2, .L104+40
 1080 00d8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1081 00da 002B     		cmp	r3, #0
 1082 00dc 00F0B380 		beq	.L56
 494:main.c        ****                 {
 495:main.c        ****                     stringMIDI[whichLinearSensor] = pitchBendHistory[whichLinearSensor][((pitchBend
 1083              		.loc 1 495 0
 1084 00e0 734B     		ldr	r3, .L104+24
 1085 00e2 1B68     		ldr	r3, [r3]
 1086 00e4 724A     		ldr	r2, .L104+24
 1087 00e6 1168     		ldr	r1, [r2]
 1088 00e8 714A     		ldr	r2, .L104+24
 1089 00ea 1268     		ldr	r2, [r2]
 1090 00ec 7548     		ldr	r0, .L104+44
 1091 00ee 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 1092 00f2 0132     		adds	r2, r2, #1
 1093 00f4 02F01F02 		and	r2, r2, #31
 1094 00f8 7348     		ldr	r0, .L104+48
 1095 00fa 4901     		lsls	r1, r1, #5
 1096 00fc 0A44     		add	r2, r2, r1
 1097 00fe 50F82220 		ldr	r2, [r0, r2, lsl #2]	@ float
 1098 0102 6E49     		ldr	r1, .L104+36
 1099 0104 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 496:main.c        ****                     pitchBendHistory[whichLinearSensor][pitchBendHistoryPointer[whichLinearSensor]]
 1100              		.loc 1 496 0
 1101 0108 694B     		ldr	r3, .L104+24
 1102 010a 1B68     		ldr	r3, [r3]
 1103 010c 684A     		ldr	r2, .L104+24
 1104 010e 1268     		ldr	r2, [r2]
 1105 0110 6C49     		ldr	r1, .L104+44
 1106 0112 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1107 0116 1046     		mov	r0, r2
 1108 0118 654A     		ldr	r2, .L104+24
 1109 011a 1268     		ldr	r2, [r2]
 1110 011c 6749     		ldr	r1, .L104+36
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 30


 1111 011e 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1112 0122 6949     		ldr	r1, .L104+48
 1113 0124 5B01     		lsls	r3, r3, #5
 1114 0126 0344     		add	r3, r3, r0
 1115 0128 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 497:main.c        ****                     pitchBendHistoryPointer[whichLinearSensor] =  (pitchBendHistoryPointer[whichLin
 1116              		.loc 1 497 0
 1117 012c 604B     		ldr	r3, .L104+24
 1118 012e 1B68     		ldr	r3, [r3]
 1119 0130 5F4A     		ldr	r2, .L104+24
 1120 0132 1268     		ldr	r2, [r2]
 1121 0134 6349     		ldr	r1, .L104+44
 1122 0136 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1123 013a 0132     		adds	r2, r2, #1
 1124 013c 92B2     		uxth	r2, r2
 1125 013e 02F01F02 		and	r2, r2, #31
 1126 0142 91B2     		uxth	r1, r2
 1127 0144 5F4A     		ldr	r2, .L104+44
 1128 0146 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 498:main.c        ****                     if (frettedState)
 1129              		.loc 1 498 0
 1130 014a 604B     		ldr	r3, .L104+52
 1131 014c 1B68     		ldr	r3, [r3]
 1132 014e 002B     		cmp	r3, #0
 1133 0150 52D0     		beq	.L57
 499:main.c        ****                     { 
 500:main.c        ****                         if ((stringMIDI[whichLinearSensor] > (stringMIDIPrev[whichLinearSensor] + l
 1134              		.loc 1 500 0
 1135 0152 574B     		ldr	r3, .L104+24
 1136 0154 1B68     		ldr	r3, [r3]
 1137 0156 594A     		ldr	r2, .L104+36
 1138 0158 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
 1139 015c 544B     		ldr	r3, .L104+24
 1140 015e 1B68     		ldr	r3, [r3]
 1141 0160 5B4A     		ldr	r2, .L104+56
 1142 0162 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1143 0166 5B4B     		ldr	r3, .L104+60
 1144 0168 1B68     		ldr	r3, [r3]	@ float
 1145 016a 1946     		mov	r1, r3
 1146 016c 1046     		mov	r0, r2
 1147 016e FFF7FEFF 		bl	__aeabi_fadd
 1148 0172 0346     		mov	r3, r0
 1149 0174 1946     		mov	r1, r3
 1150 0176 2046     		mov	r0, r4
 1151 0178 FFF7FEFF 		bl	__aeabi_fcmpgt
 1152 017c 0346     		mov	r3, r0
 1153 017e 002B     		cmp	r3, #0
 1154 0180 17D1     		bne	.L58
 1155              		.loc 1 500 0 is_stmt 0 discriminator 1
 1156 0182 4B4B     		ldr	r3, .L104+24
 1157 0184 1B68     		ldr	r3, [r3]
 1158 0186 4D4A     		ldr	r2, .L104+36
 1159 0188 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
 1160 018c 484B     		ldr	r3, .L104+24
 1161 018e 1B68     		ldr	r3, [r3]
 1162 0190 4F4A     		ldr	r2, .L104+56
 1163 0192 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 31


 1164 0196 4F4B     		ldr	r3, .L104+60
 1165 0198 1B68     		ldr	r3, [r3]	@ float
 1166 019a 1946     		mov	r1, r3
 1167 019c 1046     		mov	r0, r2
 1168 019e FFF7FEFF 		bl	__aeabi_fsub
 1169 01a2 0346     		mov	r3, r0
 1170 01a4 1946     		mov	r1, r3
 1171 01a6 2046     		mov	r0, r4
 1172 01a8 FFF7FEFF 		bl	__aeabi_fcmplt
 1173 01ac 0346     		mov	r3, r0
 1174 01ae 002B     		cmp	r3, #0
 1175 01b0 18D0     		beq	.L100
 1176              	.L58:
 501:main.c        ****                         {
 502:main.c        ****                             stringMIDI[whichLinearSensor] = roundf(stringMIDI[whichLinearSensor]);
 1177              		.loc 1 502 0 is_stmt 1
 1178 01b2 3F4B     		ldr	r3, .L104+24
 1179 01b4 1C68     		ldr	r4, [r3]
 1180 01b6 3E4B     		ldr	r3, .L104+24
 1181 01b8 1B68     		ldr	r3, [r3]
 1182 01ba 404A     		ldr	r2, .L104+36
 1183 01bc 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1184 01c0 1846     		mov	r0, r3
 1185 01c2 FFF7FEFF 		bl	roundf
 1186 01c6 0246     		mov	r2, r0
 1187 01c8 3C4B     		ldr	r3, .L104+36
 1188 01ca 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 503:main.c        ****                             stringMIDIPrev[whichLinearSensor] = stringMIDI[whichLinearSensor];
 1189              		.loc 1 503 0
 1190 01ce 384B     		ldr	r3, .L104+24
 1191 01d0 1B68     		ldr	r3, [r3]
 1192 01d2 374A     		ldr	r2, .L104+24
 1193 01d4 1268     		ldr	r2, [r2]
 1194 01d6 3949     		ldr	r1, .L104+36
 1195 01d8 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1196 01dc 3C49     		ldr	r1, .L104+56
 1197 01de 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1198 01e2 09E0     		b	.L57
 1199              	.L100:
 504:main.c        ****                         }
 505:main.c        ****                         else
 506:main.c        ****                         {
 507:main.c        ****                            stringMIDI[whichLinearSensor] =  stringMIDIPrev[whichLinearSensor];
 1200              		.loc 1 507 0
 1201 01e4 324B     		ldr	r3, .L104+24
 1202 01e6 1B68     		ldr	r3, [r3]
 1203 01e8 314A     		ldr	r2, .L104+24
 1204 01ea 1268     		ldr	r2, [r2]
 1205 01ec 3849     		ldr	r1, .L104+56
 1206 01ee 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1207 01f2 3249     		ldr	r1, .L104+36
 1208 01f4 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1209              	.L57:
 508:main.c        ****                         }
 509:main.c        ****                     }
 510:main.c        ****                     pitchBendVal  = ((stringMIDI[whichLinearSensor] - openStringMIDI[whichLinearSen
 1210              		.loc 1 510 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 32


 1211 01f8 2D4B     		ldr	r3, .L104+24
 1212 01fa 1B68     		ldr	r3, [r3]
 1213 01fc 2F4A     		ldr	r2, .L104+36
 1214 01fe 52F82300 		ldr	r0, [r2, r3, lsl #2]	@ float
 1215 0202 2B4B     		ldr	r3, .L104+24
 1216 0204 1B68     		ldr	r3, [r3]
 1217 0206 2C4A     		ldr	r2, .L104+32
 1218 0208 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1219 020c 1946     		mov	r1, r3
 1220 020e FFF7FEFF 		bl	__aeabi_fsub
 1221 0212 0346     		mov	r3, r0
 1222 0214 3049     		ldr	r1, .L104+64
 1223 0216 1846     		mov	r0, r3
 1224 0218 FFF7FEFF 		bl	__aeabi_fmul
 1225 021c 0346     		mov	r3, r0
 1226 021e 4FF08C41 		mov	r1, #1174405120
 1227 0222 1846     		mov	r0, r3
 1228 0224 FFF7FEFF 		bl	__aeabi_fadd
 1229 0228 0346     		mov	r3, r0
 1230 022a 7B60     		str	r3, [r7, #4]	@ float
 511:main.c        ****                     openStringCount[whichLinearSensor] = 0;
 1231              		.loc 1 511 0
 1232 022c 204B     		ldr	r3, .L104+24
 1233 022e 1B68     		ldr	r3, [r3]
 1234 0230 2A4A     		ldr	r2, .L104+68
 1235 0232 0021     		movs	r1, #0
 1236 0234 42F82310 		str	r1, [r2, r3, lsl #2]
 512:main.c        ****                     pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 1237              		.loc 1 512 0
 1238 0238 1D4B     		ldr	r3, .L104+24
 1239 023a 1B68     		ldr	r3, [r3]
 1240 023c 2849     		ldr	r1, .L104+72
 1241 023e 7A68     		ldr	r2, [r7, #4]	@ float
 1242 0240 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1243 0244 BCE1     		b	.L54
 1244              	.L56:
 513:main.c        ****                 }
 514:main.c        ****                 else
 515:main.c        ****                 {
 516:main.c        ****                     pitchBendHistory[whichLinearSensor][pitchBendHistoryPointer[whichLinearSensor]]
 1245              		.loc 1 516 0
 1246 0246 1A4B     		ldr	r3, .L104+24
 1247 0248 1B68     		ldr	r3, [r3]
 1248 024a 194A     		ldr	r2, .L104+24
 1249 024c 1268     		ldr	r2, [r2]
 1250 024e 1D49     		ldr	r1, .L104+44
 1251 0250 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1252 0254 1046     		mov	r0, r2
 1253 0256 164A     		ldr	r2, .L104+24
 1254 0258 1268     		ldr	r2, [r2]
 1255 025a 1749     		ldr	r1, .L104+32
 1256 025c 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1257 0260 1949     		ldr	r1, .L104+48
 1258 0262 5B01     		lsls	r3, r3, #5
 1259 0264 0344     		add	r3, r3, r0
 1260 0266 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 517:main.c        ****                     pitchBendHistoryPointer[whichLinearSensor] =  (pitchBendHistoryPointer[whichLin
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 33


 1261              		.loc 1 517 0
 1262 026a 114B     		ldr	r3, .L104+24
 1263 026c 1B68     		ldr	r3, [r3]
 1264 026e 104A     		ldr	r2, .L104+24
 1265 0270 1268     		ldr	r2, [r2]
 1266 0272 1449     		ldr	r1, .L104+44
 1267 0274 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1268 0278 0132     		adds	r2, r2, #1
 1269 027a 92B2     		uxth	r2, r2
 1270 027c 02F01F02 		and	r2, r2, #31
 1271 0280 91B2     		uxth	r1, r2
 1272 0282 104A     		ldr	r2, .L104+44
 1273 0284 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 518:main.c        ****                     pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 1274              		.loc 1 518 0
 1275 0288 094B     		ldr	r3, .L104+24
 1276 028a 1B68     		ldr	r3, [r3]
 1277 028c 1449     		ldr	r1, .L104+72
 1278 028e 7A68     		ldr	r2, [r7, #4]	@ float
 1279 0290 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1280 0294 94E1     		b	.L54
 1281              	.L105:
 1282 0296 00BF     		.align	2
 1283              	.L104:
 1284 0298 00000000 		.word	Em_EEPROM_em_EepromStorage
 1285 029c 00000000 		.word	eepromReturnValue
 1286 02a0 00000000 		.word	Vbus_function
 1287 02a4 00000000 		.word	hp_R
 1288 02a8 40EA6F3F 		.word	1064299072
 1289 02ac 00000000 		.word	scanPart
 1290 02b0 00000000 		.word	whichLinearSensor
 1291 02b4 00000000 		.word	linearPotValue32Bit
 1292 02b8 00000000 		.word	openStringMIDI
 1293 02bc 00000000 		.word	stringMIDI
 1294 02c0 00000000 		.word	pitchFreeze
 1295 02c4 00000000 		.word	pitchBendHistoryPointer
 1296 02c8 00000000 		.word	pitchBendHistory
 1297 02cc 00000000 		.word	frettedState
 1298 02d0 00000000 		.word	stringMIDIPrev
 1299 02d4 00000000 		.word	linearHysteresis
 1300 02d8 0080AA43 		.word	1135247360
 1301 02dc 00000000 		.word	openStringCount
 1302 02e0 00000000 		.word	pitchBendsPerString
 1303              	.L55:
 519:main.c        ****                 }  
 520:main.c        ****             }
 521:main.c        ****             else
 522:main.c        ****             {
 523:main.c        ****                 
 524:main.c        **** 
 525:main.c        ****                 
 526:main.c        ****                 if (pitchFreeze[whichLinearSensor])
 1304              		.loc 1 526 0
 1305 02e4 8E4B     		ldr	r3, .L106
 1306 02e6 1B68     		ldr	r3, [r3]
 1307 02e8 8E4A     		ldr	r2, .L106+4
 1308 02ea D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 34


 1309 02ec 002B     		cmp	r3, #0
 1310 02ee 14D0     		beq	.L62
 527:main.c        ****                 {
 528:main.c        ****                    stringMIDI[whichLinearSensor] = pitchBendHistory[whichLinearSensor][((pitchBendH
 1311              		.loc 1 528 0
 1312 02f0 8B4B     		ldr	r3, .L106
 1313 02f2 1B68     		ldr	r3, [r3]
 1314 02f4 8A4A     		ldr	r2, .L106
 1315 02f6 1168     		ldr	r1, [r2]
 1316 02f8 894A     		ldr	r2, .L106
 1317 02fa 1268     		ldr	r2, [r2]
 1318 02fc 8A48     		ldr	r0, .L106+8
 1319 02fe 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 1320 0302 0132     		adds	r2, r2, #1
 1321 0304 02F01F02 		and	r2, r2, #31
 1322 0308 8848     		ldr	r0, .L106+12
 1323 030a 4901     		lsls	r1, r1, #5
 1324 030c 0A44     		add	r2, r2, r1
 1325 030e 50F82220 		ldr	r2, [r0, r2, lsl #2]	@ float
 1326 0312 8749     		ldr	r1, .L106+16
 1327 0314 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1328 0318 B5E0     		b	.L63
 1329              	.L62:
 529:main.c        ****                 }
 530:main.c        ****                 else
 531:main.c        ****                 {
 532:main.c        ****                     linearFIR[whichLinearSensor][linFirPointer[whichLinearSensor]] = linearPotValue
 1330              		.loc 1 532 0
 1331 031a 814B     		ldr	r3, .L106
 1332 031c 1B68     		ldr	r3, [r3]
 1333 031e 804A     		ldr	r2, .L106
 1334 0320 1268     		ldr	r2, [r2]
 1335 0322 8449     		ldr	r1, .L106+20
 1336 0324 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 1337 0326 1046     		mov	r0, r2
 1338 0328 7D4A     		ldr	r2, .L106
 1339 032a 1268     		ldr	r2, [r2]
 1340 032c 8249     		ldr	r1, .L106+24
 1341 032e 51F82220 		ldr	r2, [r1, r2, lsl #2]
 1342 0332 1146     		mov	r1, r2
 1343 0334 814A     		ldr	r2, .L106+28
 1344 0336 5B00     		lsls	r3, r3, #1
 1345 0338 0344     		add	r3, r3, r0
 1346 033a 42F82310 		str	r1, [r2, r3, lsl #2]
 533:main.c        ****                     linearSmoothed[whichLinearSensor] = 0;
 1347              		.loc 1 533 0
 1348 033e 784B     		ldr	r3, .L106
 1349 0340 1B68     		ldr	r3, [r3]
 1350 0342 7F4A     		ldr	r2, .L106+32
 1351 0344 0021     		movs	r1, #0
 1352 0346 42F82310 		str	r1, [r2, r3, lsl #2]
 1353              	.LBB3:
 534:main.c        ****                     for (int j = 0; j < LINEAR_FIR_SIZE; j++)
 1354              		.loc 1 534 0
 1355 034a 0023     		movs	r3, #0
 1356 034c 7B61     		str	r3, [r7, #20]
 1357 034e 13E0     		b	.L64
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 35


 1358              	.L65:
 535:main.c        ****                     {
 536:main.c        ****                         linearSmoothed[whichLinearSensor] += linearFIR[whichLinearSensor][j];
 1359              		.loc 1 536 0 discriminator 3
 1360 0350 734B     		ldr	r3, .L106
 1361 0352 1B68     		ldr	r3, [r3]
 1362 0354 7949     		ldr	r1, .L106+28
 1363 0356 5A00     		lsls	r2, r3, #1
 1364 0358 7B69     		ldr	r3, [r7, #20]
 1365 035a 1344     		add	r3, r3, r2
 1366 035c 51F82320 		ldr	r2, [r1, r3, lsl #2]
 1367 0360 6F4B     		ldr	r3, .L106
 1368 0362 1B68     		ldr	r3, [r3]
 1369 0364 7649     		ldr	r1, .L106+32
 1370 0366 51F82310 		ldr	r1, [r1, r3, lsl #2]
 1371 036a 0A44     		add	r2, r2, r1
 1372 036c 7449     		ldr	r1, .L106+32
 1373 036e 41F82320 		str	r2, [r1, r3, lsl #2]
 534:main.c        ****                     for (int j = 0; j < LINEAR_FIR_SIZE; j++)
 1374              		.loc 1 534 0 discriminator 3
 1375 0372 7B69     		ldr	r3, [r7, #20]
 1376 0374 0133     		adds	r3, r3, #1
 1377 0376 7B61     		str	r3, [r7, #20]
 1378              	.L64:
 534:main.c        ****                     for (int j = 0; j < LINEAR_FIR_SIZE; j++)
 1379              		.loc 1 534 0 is_stmt 0 discriminator 1
 1380 0378 7B69     		ldr	r3, [r7, #20]
 1381 037a 012B     		cmp	r3, #1
 1382 037c E8DD     		ble	.L65
 1383              	.LBE3:
 537:main.c        ****                     }             
 538:main.c        ****                     linFirPointer[whichLinearSensor] = (linFirPointer[whichLinearSensor] + 1) & LIN
 1384              		.loc 1 538 0 is_stmt 1
 1385 037e 684B     		ldr	r3, .L106
 1386 0380 1B68     		ldr	r3, [r3]
 1387 0382 674A     		ldr	r2, .L106
 1388 0384 1268     		ldr	r2, [r2]
 1389 0386 6B49     		ldr	r1, .L106+20
 1390 0388 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 1391 038a 0132     		adds	r2, r2, #1
 1392 038c D2B2     		uxtb	r2, r2
 1393 038e 02F00102 		and	r2, r2, #1
 1394 0392 D1B2     		uxtb	r1, r2
 1395 0394 674A     		ldr	r2, .L106+20
 1396 0396 D154     		strb	r1, [r2, r3]
 539:main.c        ****                     linearSmoothed[whichLinearSensor] = linearSmoothed[whichLinearSensor] >> LINEAR
 1397              		.loc 1 539 0
 1398 0398 614B     		ldr	r3, .L106
 1399 039a 1B68     		ldr	r3, [r3]
 1400 039c 604A     		ldr	r2, .L106
 1401 039e 1268     		ldr	r2, [r2]
 1402 03a0 6749     		ldr	r1, .L106+32
 1403 03a2 51F82220 		ldr	r2, [r1, r2, lsl #2]
 1404 03a6 5208     		lsrs	r2, r2, #1
 1405 03a8 6549     		ldr	r1, .L106+32
 1406 03aa 41F82320 		str	r2, [r1, r3, lsl #2]
 540:main.c        ****                     invStringMappedPositions[whichLinearSensor] = (1.0f /  map((float)linearSmoothe
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 36


 1407              		.loc 1 540 0
 1408 03ae 5C4B     		ldr	r3, .L106
 1409 03b0 1C68     		ldr	r4, [r3]
 1410 03b2 5B4B     		ldr	r3, .L106
 1411 03b4 1B68     		ldr	r3, [r3]
 1412 03b6 624A     		ldr	r2, .L106+32
 1413 03b8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1414 03bc 1846     		mov	r0, r3
 1415 03be FFF7FEFF 		bl	__aeabi_ui2f
 1416 03c2 0546     		mov	r5, r0
 1417 03c4 564B     		ldr	r3, .L106
 1418 03c6 1B68     		ldr	r3, [r3]
 1419 03c8 5E4A     		ldr	r2, .L106+36
 1420 03ca 52F83330 		ldr	r3, [r2, r3, lsl #3]
 1421 03ce 1846     		mov	r0, r3
 1422 03d0 FFF7FEFF 		bl	__aeabi_ui2f
 1423 03d4 0646     		mov	r6, r0
 1424 03d6 524B     		ldr	r3, .L106
 1425 03d8 1B68     		ldr	r3, [r3]
 1426 03da 5A4A     		ldr	r2, .L106+36
 1427 03dc DB00     		lsls	r3, r3, #3
 1428 03de 1344     		add	r3, r3, r2
 1429 03e0 5B68     		ldr	r3, [r3, #4]
 1430 03e2 1846     		mov	r0, r3
 1431 03e4 FFF7FEFF 		bl	__aeabi_ui2f
 1432 03e8 0146     		mov	r1, r0
 1433 03ea 574B     		ldr	r3, .L106+40
 1434 03ec 1A68     		ldr	r2, [r3]	@ float
 1435 03ee 564B     		ldr	r3, .L106+40
 1436 03f0 5B68     		ldr	r3, [r3, #4]	@ float
 1437 03f2 0093     		str	r3, [sp]	@ float
 1438 03f4 1346     		mov	r3, r2
 1439 03f6 0A46     		mov	r2, r1
 1440 03f8 3146     		mov	r1, r6
 1441 03fa 2846     		mov	r0, r5
 1442 03fc FFF7FEFF 		bl	map
 1443 0400 0346     		mov	r3, r0
 1444 0402 1946     		mov	r1, r3
 1445 0404 4FF07E50 		mov	r0, #1065353216
 1446 0408 FFF7FEFF 		bl	__aeabi_fdiv
 1447 040c 0346     		mov	r3, r0
 1448 040e 1A46     		mov	r2, r3
 1449 0410 4E4B     		ldr	r3, .L106+44
 1450 0412 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 541:main.c        ****                     stringMIDI[whichLinearSensor] = ftom(invStringMappedPositions[whichLinearSensor
 1451              		.loc 1 541 0
 1452 0416 424B     		ldr	r3, .L106
 1453 0418 1C68     		ldr	r4, [r3]
 1454 041a 414B     		ldr	r3, .L106
 1455 041c 1B68     		ldr	r3, [r3]
 1456 041e 4B4A     		ldr	r2, .L106+44
 1457 0420 52F82300 		ldr	r0, [r2, r3, lsl #2]	@ float
 1458 0424 3E4B     		ldr	r3, .L106
 1459 0426 1B68     		ldr	r3, [r3]
 1460 0428 494A     		ldr	r2, .L106+48
 1461 042a 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1462 042e 1946     		mov	r1, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 37


 1463 0430 FFF7FEFF 		bl	__aeabi_fmul
 1464 0434 0346     		mov	r3, r0
 1465 0436 1846     		mov	r0, r3
 1466 0438 FFF7FEFF 		bl	ftom
 1467 043c 0246     		mov	r2, r0
 1468 043e 3C4B     		ldr	r3, .L106+16
 1469 0440 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 542:main.c        ****                     pitchBendHistory[whichLinearSensor][pitchBendHistoryPointer[whichLinearSensor]]
 1470              		.loc 1 542 0
 1471 0444 364B     		ldr	r3, .L106
 1472 0446 1B68     		ldr	r3, [r3]
 1473 0448 354A     		ldr	r2, .L106
 1474 044a 1268     		ldr	r2, [r2]
 1475 044c 3649     		ldr	r1, .L106+8
 1476 044e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1477 0452 1046     		mov	r0, r2
 1478 0454 324A     		ldr	r2, .L106
 1479 0456 1268     		ldr	r2, [r2]
 1480 0458 3549     		ldr	r1, .L106+16
 1481 045a 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1482 045e 3349     		ldr	r1, .L106+12
 1483 0460 5B01     		lsls	r3, r3, #5
 1484 0462 0344     		add	r3, r3, r0
 1485 0464 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 543:main.c        ****                     pitchBendHistoryPointer[whichLinearSensor] =  (pitchBendHistoryPointer[whichLin
 1486              		.loc 1 543 0
 1487 0468 2D4B     		ldr	r3, .L106
 1488 046a 1B68     		ldr	r3, [r3]
 1489 046c 2C4A     		ldr	r2, .L106
 1490 046e 1268     		ldr	r2, [r2]
 1491 0470 2D49     		ldr	r1, .L106+8
 1492 0472 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1493 0476 0132     		adds	r2, r2, #1
 1494 0478 92B2     		uxth	r2, r2
 1495 047a 02F01F02 		and	r2, r2, #31
 1496 047e 91B2     		uxth	r1, r2
 1497 0480 294A     		ldr	r2, .L106+8
 1498 0482 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 1499              	.L63:
 544:main.c        ****                 }
 545:main.c        **** 
 546:main.c        ****                 if (frettedState)
 1500              		.loc 1 546 0
 1501 0486 334B     		ldr	r3, .L106+52
 1502 0488 1B68     		ldr	r3, [r3]
 1503 048a 002B     		cmp	r3, #0
 1504 048c 72D0     		beq	.L66
 547:main.c        ****                 { 
 548:main.c        ****                     if ((stringMIDI[whichLinearSensor] > (stringMIDIPrev[whichLinearSensor] + linea
 1505              		.loc 1 548 0
 1506 048e 244B     		ldr	r3, .L106
 1507 0490 1B68     		ldr	r3, [r3]
 1508 0492 274A     		ldr	r2, .L106+16
 1509 0494 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
 1510 0498 214B     		ldr	r3, .L106
 1511 049a 1B68     		ldr	r3, [r3]
 1512 049c 2E4A     		ldr	r2, .L106+56
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 38


 1513 049e 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1514 04a2 2E4B     		ldr	r3, .L106+60
 1515 04a4 1B68     		ldr	r3, [r3]	@ float
 1516 04a6 1946     		mov	r1, r3
 1517 04a8 1046     		mov	r0, r2
 1518 04aa FFF7FEFF 		bl	__aeabi_fadd
 1519 04ae 0346     		mov	r3, r0
 1520 04b0 1946     		mov	r1, r3
 1521 04b2 2046     		mov	r0, r4
 1522 04b4 FFF7FEFF 		bl	__aeabi_fcmpgt
 1523 04b8 0346     		mov	r3, r0
 1524 04ba 002B     		cmp	r3, #0
 1525 04bc 17D1     		bne	.L67
 1526              		.loc 1 548 0 is_stmt 0 discriminator 1
 1527 04be 184B     		ldr	r3, .L106
 1528 04c0 1B68     		ldr	r3, [r3]
 1529 04c2 1B4A     		ldr	r2, .L106+16
 1530 04c4 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
 1531 04c8 154B     		ldr	r3, .L106
 1532 04ca 1B68     		ldr	r3, [r3]
 1533 04cc 224A     		ldr	r2, .L106+56
 1534 04ce 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1535 04d2 224B     		ldr	r3, .L106+60
 1536 04d4 1B68     		ldr	r3, [r3]	@ float
 1537 04d6 1946     		mov	r1, r3
 1538 04d8 1046     		mov	r0, r2
 1539 04da FFF7FEFF 		bl	__aeabi_fsub
 1540 04de 0346     		mov	r3, r0
 1541 04e0 1946     		mov	r1, r3
 1542 04e2 2046     		mov	r0, r4
 1543 04e4 FFF7FEFF 		bl	__aeabi_fcmplt
 1544 04e8 0346     		mov	r3, r0
 1545 04ea 002B     		cmp	r3, #0
 1546 04ec 38D0     		beq	.L101
 1547              	.L67:
 549:main.c        ****                     {
 550:main.c        ****                         stringMIDI[whichLinearSensor] = roundf(stringMIDI[whichLinearSensor]);
 1548              		.loc 1 550 0 is_stmt 1
 1549 04ee 0C4B     		ldr	r3, .L106
 1550 04f0 1C68     		ldr	r4, [r3]
 1551 04f2 0B4B     		ldr	r3, .L106
 1552 04f4 1B68     		ldr	r3, [r3]
 1553 04f6 0E4A     		ldr	r2, .L106+16
 1554 04f8 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1555 04fc 1846     		mov	r0, r3
 1556 04fe FFF7FEFF 		bl	roundf
 1557 0502 0246     		mov	r2, r0
 1558 0504 0A4B     		ldr	r3, .L106+16
 1559 0506 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 551:main.c        ****                         stringMIDIPrev[whichLinearSensor] = stringMIDI[whichLinearSensor];
 1560              		.loc 1 551 0
 1561 050a 054B     		ldr	r3, .L106
 1562 050c 1B68     		ldr	r3, [r3]
 1563 050e 044A     		ldr	r2, .L106
 1564 0510 1268     		ldr	r2, [r2]
 1565 0512 0749     		ldr	r1, .L106+16
 1566 0514 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 39


 1567 0518 0F49     		ldr	r1, .L106+56
 1568 051a 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1569 051e 29E0     		b	.L66
 1570              	.L107:
 1571              		.align	2
 1572              	.L106:
 1573 0520 00000000 		.word	whichLinearSensor
 1574 0524 00000000 		.word	pitchFreeze
 1575 0528 00000000 		.word	pitchBendHistoryPointer
 1576 052c 00000000 		.word	pitchBendHistory
 1577 0530 00000000 		.word	stringMIDI
 1578 0534 00000000 		.word	linFirPointer
 1579 0538 00000000 		.word	linearPotValue32Bit
 1580 053c 00000000 		.word	linearFIR
 1581 0540 00000000 		.word	linearSmoothed
 1582 0544 00000000 		.word	fretMeasurements
 1583 0548 00000000 		.word	fretRatios
 1584 054c 00000000 		.word	invStringMappedPositions
 1585 0550 00000000 		.word	openStringFreqs
 1586 0554 00000000 		.word	frettedState
 1587 0558 00000000 		.word	stringMIDIPrev
 1588 055c 00000000 		.word	linearHysteresis
 1589              	.L101:
 552:main.c        ****                     }
 553:main.c        ****                     else
 554:main.c        ****                     {
 555:main.c        ****                        stringMIDI[whichLinearSensor] =  stringMIDIPrev[whichLinearSensor];
 1590              		.loc 1 555 0
 1591 0560 A74B     		ldr	r3, .L108
 1592 0562 1B68     		ldr	r3, [r3]
 1593 0564 A64A     		ldr	r2, .L108
 1594 0566 1268     		ldr	r2, [r2]
 1595 0568 A649     		ldr	r1, .L108+4
 1596 056a 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1597 056e A649     		ldr	r1, .L108+8
 1598 0570 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1599              	.L66:
 556:main.c        ****                     }
 557:main.c        ****                 }
 558:main.c        ****                 pitchBendVal  = ((stringMIDI[whichLinearSensor] - openStringMIDI[whichLinearSensor]
 1600              		.loc 1 558 0
 1601 0574 A24B     		ldr	r3, .L108
 1602 0576 1B68     		ldr	r3, [r3]
 1603 0578 A34A     		ldr	r2, .L108+8
 1604 057a 52F82300 		ldr	r0, [r2, r3, lsl #2]	@ float
 1605 057e A04B     		ldr	r3, .L108
 1606 0580 1B68     		ldr	r3, [r3]
 1607 0582 A24A     		ldr	r2, .L108+12
 1608 0584 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1609 0588 1946     		mov	r1, r3
 1610 058a FFF7FEFF 		bl	__aeabi_fsub
 1611 058e 0346     		mov	r3, r0
 1612 0590 9F49     		ldr	r1, .L108+16
 1613 0592 1846     		mov	r0, r3
 1614 0594 FFF7FEFF 		bl	__aeabi_fmul
 1615 0598 0346     		mov	r3, r0
 1616 059a 4FF08C41 		mov	r1, #1174405120
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 40


 1617 059e 1846     		mov	r0, r3
 1618 05a0 FFF7FEFF 		bl	__aeabi_fadd
 1619 05a4 0346     		mov	r3, r0
 1620 05a6 7B60     		str	r3, [r7, #4]	@ float
 559:main.c        ****                 openStringCount[whichLinearSensor] = 0;
 1621              		.loc 1 559 0
 1622 05a8 954B     		ldr	r3, .L108
 1623 05aa 1B68     		ldr	r3, [r3]
 1624 05ac 994A     		ldr	r2, .L108+20
 1625 05ae 0021     		movs	r1, #0
 1626 05b0 42F82310 		str	r1, [r2, r3, lsl #2]
 560:main.c        ****                 pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 1627              		.loc 1 560 0
 1628 05b4 924B     		ldr	r3, .L108
 1629 05b6 1B68     		ldr	r3, [r3]
 1630 05b8 9749     		ldr	r1, .L108+24
 1631 05ba 7A68     		ldr	r2, [r7, #4]	@ float
 1632 05bc 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1633              	.L54:
 1634              	.LBE2:
 561:main.c        ****             }
 562:main.c        ****            
 563:main.c        ****         }
 564:main.c        ****        
 565:main.c        ****         if (!polyMode)
 1635              		.loc 1 565 0
 1636 05c0 964B     		ldr	r3, .L108+28
 1637 05c2 1B68     		ldr	r3, [r3]
 1638 05c4 002B     		cmp	r3, #0
 1639 05c6 2BD1     		bne	.L70
 566:main.c        ****         {     
 567:main.c        ****             if (stringStates[whichLinearSensor][0] >= 0)
 1640              		.loc 1 567 0
 1641 05c8 8D4B     		ldr	r3, .L108
 1642 05ca 1B68     		ldr	r3, [r3]
 1643 05cc 944A     		ldr	r2, .L108+32
 1644 05ce 52F83330 		ldr	r3, [r2, r3, lsl #3]
 1645 05d2 002B     		cmp	r3, #0
 1646 05d4 24DB     		blt	.L70
 568:main.c        ****             {
 569:main.c        ****                 //if (pitchFreeze[whichLinearSensor])
 570:main.c        ****                // {
 571:main.c        ****                     //pitchBendsPerString[whichLinearSensor] =  pitchBendHistory[whichLinearSensor]
 572:main.c        ****                // }
 573:main.c        ****                 
 574:main.c        ****                 if (((int)pitchBendsPerString[whichLinearSensor]) != previousPitchBendsSent)
 1647              		.loc 1 574 0
 1648 05d6 8A4B     		ldr	r3, .L108
 1649 05d8 1B68     		ldr	r3, [r3]
 1650 05da 8F4A     		ldr	r2, .L108+24
 1651 05dc 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1652 05e0 1846     		mov	r0, r3
 1653 05e2 FFF7FEFF 		bl	__aeabi_f2iz
 1654 05e6 0246     		mov	r2, r0
 1655 05e8 8E4B     		ldr	r3, .L108+36
 1656 05ea 1B68     		ldr	r3, [r3]
 1657 05ec 9A42     		cmp	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 41


 1658 05ee 17D0     		beq	.L70
 575:main.c        ****                 {
 576:main.c        **** 
 577:main.c        ****                     sendMIDIPitchBend((uint)pitchBendsPerString[whichLinearSensor], 0);
 1659              		.loc 1 577 0
 1660 05f0 834B     		ldr	r3, .L108
 1661 05f2 1B68     		ldr	r3, [r3]
 1662 05f4 884A     		ldr	r2, .L108+24
 1663 05f6 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1664 05fa 1846     		mov	r0, r3
 1665 05fc FFF7FEFF 		bl	__aeabi_f2uiz
 1666 0600 0346     		mov	r3, r0
 1667 0602 0021     		movs	r1, #0
 1668 0604 1846     		mov	r0, r3
 1669 0606 FFF7FEFF 		bl	sendMIDIPitchBend
 578:main.c        ****                     previousPitchBendsSent = (int)pitchBendsPerString[whichLinearSensor];
 1670              		.loc 1 578 0
 1671 060a 7D4B     		ldr	r3, .L108
 1672 060c 1B68     		ldr	r3, [r3]
 1673 060e 824A     		ldr	r2, .L108+24
 1674 0610 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1675 0614 1846     		mov	r0, r3
 1676 0616 FFF7FEFF 		bl	__aeabi_f2iz
 1677 061a 0246     		mov	r2, r0
 1678 061c 814B     		ldr	r3, .L108+36
 1679 061e 1A60     		str	r2, [r3]
 1680              	.L70:
 579:main.c        ****                 }
 580:main.c        ****             }
 581:main.c        ****         }
 582:main.c        ****         
 583:main.c        ****         //read knobs, joystick, and cv pedal
 584:main.c        ****         if (ADC_SAR_Seq_1_IsEndConversion(ADC_SAR_Seq_1_RETURN_STATUS))
 1681              		.loc 1 584 0
 1682 0620 0120     		movs	r0, #1
 1683 0622 FFF7FEFF 		bl	ADC_SAR_Seq_1_IsEndConversion
 1684 0626 0346     		mov	r3, r0
 1685 0628 002B     		cmp	r3, #0
 1686 062a 00F0B080 		beq	.L102
 1687              	.LBB4:
 585:main.c        ****         {
 586:main.c        ****             for (int i = 0; i < 5; i++)
 1688              		.loc 1 586 0
 1689 062e 0023     		movs	r3, #0
 1690 0630 3B61     		str	r3, [r7, #16]
 1691 0632 A1E0     		b	.L72
 1692              	.L79:
 587:main.c        ****             {
 588:main.c        ****                 knobsFIR[i][firPointer] = ADC_SAR_Seq_1_GetResult16(i);
 1693              		.loc 1 588 0
 1694 0634 7C4B     		ldr	r3, .L108+40
 1695 0636 1C68     		ldr	r4, [r3]
 1696 0638 3B69     		ldr	r3, [r7, #16]
 1697 063a 9BB2     		uxth	r3, r3
 1698 063c 1846     		mov	r0, r3
 1699 063e FFF7FEFF 		bl	ADC_SAR_Seq_1_GetResult16
 1700 0642 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 42


 1701 0644 1946     		mov	r1, r3
 1702 0646 794A     		ldr	r2, .L108+44
 1703 0648 3B69     		ldr	r3, [r7, #16]
 1704 064a DB00     		lsls	r3, r3, #3
 1705 064c 2344     		add	r3, r3, r4
 1706 064e 42F82310 		str	r1, [r2, r3, lsl #2]
 589:main.c        ****                 knobs[i] = 0;
 1707              		.loc 1 589 0
 1708 0652 774A     		ldr	r2, .L108+48
 1709 0654 3B69     		ldr	r3, [r7, #16]
 1710 0656 0021     		movs	r1, #0
 1711 0658 42F82310 		str	r1, [r2, r3, lsl #2]
 1712              	.LBB5:
 590:main.c        ****                 for (int j = 0; j < KNOB_FIR_SIZE; j++)
 1713              		.loc 1 590 0
 1714 065c 0023     		movs	r3, #0
 1715 065e FB60     		str	r3, [r7, #12]
 1716 0660 12E0     		b	.L73
 1717              	.L74:
 591:main.c        ****                 {
 592:main.c        ****                     knobs[i] += knobsFIR[i][j];
 1718              		.loc 1 592 0 discriminator 3
 1719 0662 734A     		ldr	r2, .L108+48
 1720 0664 3B69     		ldr	r3, [r7, #16]
 1721 0666 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1722 066a 7048     		ldr	r0, .L108+44
 1723 066c 3B69     		ldr	r3, [r7, #16]
 1724 066e D900     		lsls	r1, r3, #3
 1725 0670 FB68     		ldr	r3, [r7, #12]
 1726 0672 0B44     		add	r3, r3, r1
 1727 0674 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1728 0678 1A44     		add	r2, r2, r3
 1729 067a 6D49     		ldr	r1, .L108+48
 1730 067c 3B69     		ldr	r3, [r7, #16]
 1731 067e 41F82320 		str	r2, [r1, r3, lsl #2]
 590:main.c        ****                 for (int j = 0; j < KNOB_FIR_SIZE; j++)
 1732              		.loc 1 590 0 discriminator 3
 1733 0682 FB68     		ldr	r3, [r7, #12]
 1734 0684 0133     		adds	r3, r3, #1
 1735 0686 FB60     		str	r3, [r7, #12]
 1736              	.L73:
 590:main.c        ****                 for (int j = 0; j < KNOB_FIR_SIZE; j++)
 1737              		.loc 1 590 0 is_stmt 0 discriminator 1
 1738 0688 FB68     		ldr	r3, [r7, #12]
 1739 068a 072B     		cmp	r3, #7
 1740 068c E9DD     		ble	.L74
 1741              	.LBE5:
 593:main.c        ****                 }             
 594:main.c        ****                 knobs[i] = knobs[i] >> KNOB_FIR_SIZE_BITSHIFT;
 1742              		.loc 1 594 0 is_stmt 1
 1743 068e 684A     		ldr	r2, .L108+48
 1744 0690 3B69     		ldr	r3, [r7, #16]
 1745 0692 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1746 0696 DA08     		lsrs	r2, r3, #3
 1747 0698 6549     		ldr	r1, .L108+48
 1748 069a 3B69     		ldr	r3, [r7, #16]
 1749 069c 41F82320 		str	r2, [r1, r3, lsl #2]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 43


 595:main.c        ****                 
 596:main.c        ****                 //now squish down to 7 bit with hysteresis
 597:main.c        ****                 
 598:main.c        ****                 if ((knobs[i] > (knobs7bitPrevLS[i] + knobs7bitHysteresis)) || (knobs[i] < (knobs7b
 1750              		.loc 1 598 0
 1751 06a0 634A     		ldr	r2, .L108+48
 1752 06a2 3B69     		ldr	r3, [r7, #16]
 1753 06a4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1754 06a8 6249     		ldr	r1, .L108+52
 1755 06aa 3A69     		ldr	r2, [r7, #16]
 1756 06ac 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1757 06b0 1146     		mov	r1, r2
 1758 06b2 614A     		ldr	r2, .L108+56
 1759 06b4 1288     		ldrh	r2, [r2]
 1760 06b6 0A44     		add	r2, r2, r1
 1761 06b8 9342     		cmp	r3, r2
 1762 06ba 0DD8     		bhi	.L75
 1763              		.loc 1 598 0 is_stmt 0 discriminator 1
 1764 06bc 5C4A     		ldr	r2, .L108+48
 1765 06be 3B69     		ldr	r3, [r7, #16]
 1766 06c0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1767 06c4 5B49     		ldr	r1, .L108+52
 1768 06c6 3A69     		ldr	r2, [r7, #16]
 1769 06c8 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1770 06cc 1146     		mov	r1, r2
 1771 06ce 5A4A     		ldr	r2, .L108+56
 1772 06d0 1288     		ldrh	r2, [r2]
 1773 06d2 8A1A     		subs	r2, r1, r2
 1774 06d4 9342     		cmp	r3, r2
 1775 06d6 0AD2     		bcs	.L76
 1776              	.L75:
 599:main.c        ****                 {
 600:main.c        ****                     knobs7bit[i] = knobs[i] >> 5;
 1777              		.loc 1 600 0 is_stmt 1
 1778 06d8 554A     		ldr	r2, .L108+48
 1779 06da 3B69     		ldr	r3, [r7, #16]
 1780 06dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1781 06e0 5B09     		lsrs	r3, r3, #5
 1782 06e2 D9B2     		uxtb	r1, r3
 1783 06e4 554A     		ldr	r2, .L108+60
 1784 06e6 3B69     		ldr	r3, [r7, #16]
 1785 06e8 1344     		add	r3, r3, r2
 1786 06ea 0A46     		mov	r2, r1
 1787 06ec 1A70     		strb	r2, [r3]
 1788              	.L76:
 601:main.c        ****                 }
 602:main.c        ****                 if (knobs7bit[i] != knobs7bitPrev[i])
 1789              		.loc 1 602 0
 1790 06ee 534A     		ldr	r2, .L108+60
 1791 06f0 3B69     		ldr	r3, [r7, #16]
 1792 06f2 1344     		add	r3, r3, r2
 1793 06f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1794 06f6 9AB2     		uxth	r2, r3
 1795 06f8 5149     		ldr	r1, .L108+64
 1796 06fa 3B69     		ldr	r3, [r7, #16]
 1797 06fc 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 1798 0700 9A42     		cmp	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 44


 1799 0702 22D0     		beq	.L77
 603:main.c        ****                 {
 604:main.c        ****                     if (i < 4)
 1800              		.loc 1 604 0
 1801 0704 3B69     		ldr	r3, [r7, #16]
 1802 0706 032B     		cmp	r3, #3
 1803 0708 0CDC     		bgt	.L78
 605:main.c        ****                     {
 606:main.c        ****                         sendMIDIControlChange(17 + i , 127-knobs7bit[i], 0);
 1804              		.loc 1 606 0
 1805 070a 3B69     		ldr	r3, [r7, #16]
 1806 070c 03F11100 		add	r0, r3, #17
 1807 0710 4A4A     		ldr	r2, .L108+60
 1808 0712 3B69     		ldr	r3, [r7, #16]
 1809 0714 1344     		add	r3, r3, r2
 1810 0716 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1811 0718 C3F17F03 		rsb	r3, r3, #127
 1812 071c 0022     		movs	r2, #0
 1813 071e 1946     		mov	r1, r3
 1814 0720 FFF7FEFF 		bl	sendMIDIControlChange
 1815              	.L78:
 607:main.c        ****                     }
 608:main.c        ****                     if ((i == 4) && (CV_pedal_sense_Read()))
 1816              		.loc 1 608 0
 1817 0724 3B69     		ldr	r3, [r7, #16]
 1818 0726 042B     		cmp	r3, #4
 1819 0728 0FD1     		bne	.L77
 1820              		.loc 1 608 0 is_stmt 0 discriminator 1
 1821 072a FFF7FEFF 		bl	CV_pedal_sense_Read
 1822 072e 0346     		mov	r3, r0
 1823 0730 002B     		cmp	r3, #0
 1824 0732 0AD0     		beq	.L77
 609:main.c        ****                     {
 610:main.c        ****                         sendMIDIControlChange(17 + i , knobs7bit[i], 0);
 1825              		.loc 1 610 0 is_stmt 1
 1826 0734 3B69     		ldr	r3, [r7, #16]
 1827 0736 03F11100 		add	r0, r3, #17
 1828 073a 404A     		ldr	r2, .L108+60
 1829 073c 3B69     		ldr	r3, [r7, #16]
 1830 073e 1344     		add	r3, r3, r2
 1831 0740 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1832 0742 0022     		movs	r2, #0
 1833 0744 1946     		mov	r1, r3
 1834 0746 FFF7FEFF 		bl	sendMIDIControlChange
 1835              	.L77:
 611:main.c        ****                         //sendMIDIControlChange(19 + i+1 , 0, 0);
 612:main.c        ****                     }
 613:main.c        ****                 }
 614:main.c        ****                 knobs7bitPrev[i] = knobs7bit[i];
 1836              		.loc 1 614 0 discriminator 2
 1837 074a 3C4A     		ldr	r2, .L108+60
 1838 074c 3B69     		ldr	r3, [r7, #16]
 1839 074e 1344     		add	r3, r3, r2
 1840 0750 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1841 0752 99B2     		uxth	r1, r3
 1842 0754 3A4A     		ldr	r2, .L108+64
 1843 0756 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 45


 1844 0758 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 615:main.c        ****                 knobs7bitPrevLS[i] = knobs7bit[i] << 5;
 1845              		.loc 1 615 0 discriminator 2
 1846 075c 374A     		ldr	r2, .L108+60
 1847 075e 3B69     		ldr	r3, [r7, #16]
 1848 0760 1344     		add	r3, r3, r2
 1849 0762 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1850 0764 9BB2     		uxth	r3, r3
 1851 0766 5B01     		lsls	r3, r3, #5
 1852 0768 99B2     		uxth	r1, r3
 1853 076a 324A     		ldr	r2, .L108+52
 1854 076c 3B69     		ldr	r3, [r7, #16]
 1855 076e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 586:main.c        ****             {
 1856              		.loc 1 586 0 discriminator 2
 1857 0772 3B69     		ldr	r3, [r7, #16]
 1858 0774 0133     		adds	r3, r3, #1
 1859 0776 3B61     		str	r3, [r7, #16]
 1860              	.L72:
 586:main.c        ****             {
 1861              		.loc 1 586 0 is_stmt 0 discriminator 1
 1862 0778 3B69     		ldr	r3, [r7, #16]
 1863 077a 042B     		cmp	r3, #4
 1864 077c 7FF75AAF 		ble	.L79
 1865              	.LBE4:
 616:main.c        ****             }
 617:main.c        ****             firPointer = (firPointer + 1) & KNOB_FIR_SIZE_MASK;
 1866              		.loc 1 617 0 is_stmt 1
 1867 0780 294B     		ldr	r3, .L108+40
 1868 0782 1B68     		ldr	r3, [r3]
 1869 0784 0133     		adds	r3, r3, #1
 1870 0786 03F00703 		and	r3, r3, #7
 1871 078a 274A     		ldr	r2, .L108+40
 1872 078c 1360     		str	r3, [r2]
 1873              	.L102:
 618:main.c        ****         }
 619:main.c        ****         
 620:main.c        ****         //make sure previous SPI transmission has completed before checking the received SPI data
 621:main.c        ****         while (0u == ((SPIM_1_ReadTxStatus() & SPIM_1_STS_SPI_DONE) || (SPIM_1_ReadTxStatus() & SPI
 1874              		.loc 1 621 0
 1875 078e 00BF     		nop
 1876              	.L83:
 1877              		.loc 1 621 0 is_stmt 0 discriminator 7
 1878 0790 FFF7FEFF 		bl	SPIM_1_ReadTxStatus
 1879 0794 0346     		mov	r3, r0
 1880 0796 03F00103 		and	r3, r3, #1
 1881 079a 002B     		cmp	r3, #0
 1882 079c 06D1     		bne	.L80
 1883              		.loc 1 621 0 discriminator 2
 1884 079e FFF7FEFF 		bl	SPIM_1_ReadTxStatus
 1885 07a2 0346     		mov	r3, r0
 1886 07a4 03F01003 		and	r3, r3, #16
 1887 07a8 002B     		cmp	r3, #0
 1888 07aa 01D0     		beq	.L81
 1889              	.L80:
 1890              		.loc 1 621 0 discriminator 3
 1891 07ac 0123     		movs	r3, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 46


 1892 07ae 00E0     		b	.L82
 1893              	.L81:
 1894              		.loc 1 621 0 discriminator 4
 1895 07b0 0023     		movs	r3, #0
 1896              	.L82:
 1897              		.loc 1 621 0 discriminator 6
 1898 07b2 002B     		cmp	r3, #0
 1899 07b4 ECD0     		beq	.L83
 1900              	.LBB6:
 622:main.c        ****         {
 623:main.c        ****             ;
 624:main.c        ****         }
 625:main.c        ****         
 626:main.c        ****         //handle string plucks/noteoffs
 627:main.c        ****         for (int i = 0; i < 4; i++)
 1901              		.loc 1 627 0 is_stmt 1
 1902 07b6 0023     		movs	r3, #0
 1903 07b8 BB60     		str	r3, [r7, #8]
 1904 07ba DEE0     		b	.L84
 1905              	.L92:
 628:main.c        ****         {
 629:main.c        ****             if (((CapSense_sensorOnMask[0] >> (i + 4)) & 1) &&  (linearPotValue32Bit[i] == 65535))
 1906              		.loc 1 629 0
 1907 07bc 214B     		ldr	r3, .L108+68
 1908 07be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1909 07c0 1A46     		mov	r2, r3
 1910 07c2 BB68     		ldr	r3, [r7, #8]
 1911 07c4 0433     		adds	r3, r3, #4
 1912 07c6 42FA03F3 		asr	r3, r2, r3
 1913 07ca 03F00103 		and	r3, r3, #1
 1914 07ce 002B     		cmp	r3, #0
 1915 07d0 40D0     		beq	.L85
 1916              		.loc 1 629 0 is_stmt 0 discriminator 1
 1917 07d2 1D4A     		ldr	r2, .L108+72
 1918 07d4 BB68     		ldr	r3, [r7, #8]
 1919 07d6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1920 07da 4FF6FF72 		movw	r2, #65535
 1921 07de 9342     		cmp	r3, r2
 1922 07e0 38D1     		bne	.L85
 630:main.c        ****             {
 631:main.c        ****                LHMute[i] = 1; 
 1923              		.loc 1 631 0 is_stmt 1
 1924 07e2 1A4A     		ldr	r2, .L108+76
 1925 07e4 BB68     		ldr	r3, [r7, #8]
 1926 07e6 1344     		add	r3, r3, r2
 1927 07e8 0122     		movs	r2, #1
 1928 07ea 1A70     		strb	r2, [r3]
 632:main.c        ****                LHMuteCounter[i]++;
 1929              		.loc 1 632 0
 1930 07ec 184A     		ldr	r2, .L108+80
 1931 07ee BB68     		ldr	r3, [r7, #8]
 1932 07f0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1933 07f4 5A1C     		adds	r2, r3, #1
 1934 07f6 1649     		ldr	r1, .L108+80
 1935 07f8 BB68     		ldr	r3, [r7, #8]
 1936 07fa 41F82320 		str	r2, [r1, r3, lsl #2]
 1937 07fe 33E0     		b	.L86
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 47


 1938              	.L109:
 1939              		.align	2
 1940              	.L108:
 1941 0800 00000000 		.word	whichLinearSensor
 1942 0804 00000000 		.word	stringMIDIPrev
 1943 0808 00000000 		.word	stringMIDI
 1944 080c 00000000 		.word	openStringMIDI
 1945 0810 0080AA43 		.word	1135247360
 1946 0814 00000000 		.word	openStringCount
 1947 0818 00000000 		.word	pitchBendsPerString
 1948 081c 00000000 		.word	polyMode
 1949 0820 00000000 		.word	stringStates
 1950 0824 00000000 		.word	previousPitchBendsSent
 1951 0828 00000000 		.word	firPointer
 1952 082c 00000000 		.word	knobsFIR
 1953 0830 00000000 		.word	knobs
 1954 0834 00000000 		.word	knobs7bitPrevLS
 1955 0838 00000000 		.word	knobs7bitHysteresis
 1956 083c 00000000 		.word	knobs7bit
 1957 0840 00000000 		.word	knobs7bitPrev
 1958 0844 00000000 		.word	CapSense_sensorOnMask
 1959 0848 00000000 		.word	linearPotValue32Bit
 1960 084c 00000000 		.word	LHMute
 1961 0850 00000000 		.word	LHMuteCounter
 1962              	.L85:
 633:main.c        ****             }
 634:main.c        ****             else
 635:main.c        ****             {
 636:main.c        ****                 LHMute[i] = 0;
 1963              		.loc 1 636 0
 1964 0854 8B4A     		ldr	r2, .L110
 1965 0856 BB68     		ldr	r3, [r7, #8]
 1966 0858 1344     		add	r3, r3, r2
 1967 085a 0022     		movs	r2, #0
 1968 085c 1A70     		strb	r2, [r3]
 637:main.c        ****                 LHMuteCounter[i] = 0;
 1969              		.loc 1 637 0
 1970 085e 8A4A     		ldr	r2, .L110+4
 1971 0860 BB68     		ldr	r3, [r7, #8]
 1972 0862 0021     		movs	r1, #0
 1973 0864 42F82310 		str	r1, [r2, r3, lsl #2]
 1974              	.L86:
 638:main.c        ****             }
 639:main.c        ****             //left hand mute just began
 640:main.c        ****             //freeze pitch bend at value from 12 sends ago (to avoid dip before mute due to sensor 
 641:main.c        ****             if ((LHMute[i]) && (stringStates[i][0])>=0)
 1975              		.loc 1 641 0
 1976 0868 864A     		ldr	r2, .L110
 1977 086a BB68     		ldr	r3, [r7, #8]
 1978 086c 1344     		add	r3, r3, r2
 1979 086e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1980 0870 002B     		cmp	r3, #0
 1981 0872 0BD0     		beq	.L87
 1982              		.loc 1 641 0 is_stmt 0 discriminator 1
 1983 0874 854A     		ldr	r2, .L110+8
 1984 0876 BB68     		ldr	r3, [r7, #8]
 1985 0878 52F83330 		ldr	r3, [r2, r3, lsl #3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 48


 1986 087c 002B     		cmp	r3, #0
 1987 087e 05DB     		blt	.L87
 642:main.c        ****             {
 643:main.c        ****                 pitchFreeze[i] = 1;
 1988              		.loc 1 643 0 is_stmt 1
 1989 0880 834A     		ldr	r2, .L110+12
 1990 0882 BB68     		ldr	r3, [r7, #8]
 1991 0884 1344     		add	r3, r3, r2
 1992 0886 0122     		movs	r2, #1
 1993 0888 1A70     		strb	r2, [r3]
 1994 088a 04E0     		b	.L88
 1995              	.L87:
 644:main.c        ****             }
 645:main.c        ****             else
 646:main.c        ****             {
 647:main.c        ****                  pitchFreeze[i] = 0;
 1996              		.loc 1 647 0
 1997 088c 804A     		ldr	r2, .L110+12
 1998 088e BB68     		ldr	r3, [r7, #8]
 1999 0890 1344     		add	r3, r3, r2
 2000 0892 0022     		movs	r2, #0
 2001 0894 1A70     		strb	r2, [r3]
 2002              	.L88:
 648:main.c        ****             }
 649:main.c        ****             //left hand mute has counted to max time
 650:main.c        ****             //send note off
 651:main.c        ****             if ((LHMuteCounter[i] > 128) && (stringStates[i][0] >= 0))
 2003              		.loc 1 651 0
 2004 0896 7C4A     		ldr	r2, .L110+4
 2005 0898 BB68     		ldr	r3, [r7, #8]
 2006 089a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2007 089e 802B     		cmp	r3, #128
 2008 08a0 0ED9     		bls	.L89
 2009              		.loc 1 651 0 is_stmt 0 discriminator 1
 2010 08a2 7A4A     		ldr	r2, .L110+8
 2011 08a4 BB68     		ldr	r3, [r7, #8]
 2012 08a6 52F83330 		ldr	r3, [r2, r3, lsl #3]
 2013 08aa 002B     		cmp	r3, #0
 2014 08ac 08DB     		blt	.L89
 652:main.c        ****             {
 653:main.c        ****                  handleNotes(lastNotes[i], 0, i);
 2015              		.loc 1 653 0 is_stmt 1
 2016 08ae 794A     		ldr	r2, .L110+16
 2017 08b0 BB68     		ldr	r3, [r7, #8]
 2018 08b2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2019 08b6 BA68     		ldr	r2, [r7, #8]
 2020 08b8 0021     		movs	r1, #0
 2021 08ba 1846     		mov	r0, r3
 2022 08bc FFF7FEFF 		bl	handleNotes
 2023              	.L89:
 654:main.c        ****             }
 655:main.c        ****             
 656:main.c        ****             stringPlucks[i] = (rxBuffer[i*2] << 8) + rxBuffer[i*2+1];
 2024              		.loc 1 656 0
 2025 08c0 BB68     		ldr	r3, [r7, #8]
 2026 08c2 5B00     		lsls	r3, r3, #1
 2027 08c4 744A     		ldr	r2, .L110+20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 49


 2028 08c6 D35C     		ldrb	r3, [r2, r3]
 2029 08c8 DBB2     		uxtb	r3, r3
 2030 08ca 1B02     		lsls	r3, r3, #8
 2031 08cc BA68     		ldr	r2, [r7, #8]
 2032 08ce 5200     		lsls	r2, r2, #1
 2033 08d0 0132     		adds	r2, r2, #1
 2034 08d2 7149     		ldr	r1, .L110+20
 2035 08d4 8A5C     		ldrb	r2, [r1, r2]
 2036 08d6 D2B2     		uxtb	r2, r2
 2037 08d8 1A44     		add	r2, r2, r3
 2038 08da 7049     		ldr	r1, .L110+24
 2039 08dc BB68     		ldr	r3, [r7, #8]
 2040 08de 41F82320 		str	r2, [r1, r3, lsl #2]
 657:main.c        ****             
 658:main.c        ****             //note-on from pluck sensor
 659:main.c        ****             if ((stringPlucks[i] > 0) && (stringPlucksPrev[i] == 0))
 2041              		.loc 1 659 0
 2042 08e2 6E4A     		ldr	r2, .L110+24
 2043 08e4 BB68     		ldr	r3, [r7, #8]
 2044 08e6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2045 08ea 002B     		cmp	r3, #0
 2046 08ec 25DD     		ble	.L90
 2047              		.loc 1 659 0 is_stmt 0 discriminator 1
 2048 08ee 6C4A     		ldr	r2, .L110+28
 2049 08f0 BB68     		ldr	r3, [r7, #8]
 2050 08f2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2051 08f6 002B     		cmp	r3, #0
 2052 08f8 1FD1     		bne	.L90
 660:main.c        ****             {
 661:main.c        ****                 lastNotes[i] = (int)openStringMIDI[i] + (octave * 12);
 2053              		.loc 1 661 0 is_stmt 1
 2054 08fa 6A4A     		ldr	r2, .L110+32
 2055 08fc BB68     		ldr	r3, [r7, #8]
 2056 08fe 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2057 0902 1846     		mov	r0, r3
 2058 0904 FFF7FEFF 		bl	__aeabi_f2iz
 2059 0908 0146     		mov	r1, r0
 2060 090a 674B     		ldr	r3, .L110+36
 2061 090c 1A68     		ldr	r2, [r3]
 2062 090e 1346     		mov	r3, r2
 2063 0910 5B00     		lsls	r3, r3, #1
 2064 0912 1344     		add	r3, r3, r2
 2065 0914 9B00     		lsls	r3, r3, #2
 2066 0916 CA18     		adds	r2, r1, r3
 2067 0918 5E49     		ldr	r1, .L110+16
 2068 091a BB68     		ldr	r3, [r7, #8]
 2069 091c 41F82320 		str	r2, [r1, r3, lsl #2]
 662:main.c        ****                 handleNotes(lastNotes[i], stringPlucks[i], i);
 2070              		.loc 1 662 0
 2071 0920 5C4A     		ldr	r2, .L110+16
 2072 0922 BB68     		ldr	r3, [r7, #8]
 2073 0924 52F82300 		ldr	r0, [r2, r3, lsl #2]
 2074 0928 5C4A     		ldr	r2, .L110+24
 2075 092a BB68     		ldr	r3, [r7, #8]
 2076 092c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2077 0930 BA68     		ldr	r2, [r7, #8]
 2078 0932 1946     		mov	r1, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 50


 2079 0934 FFF7FEFF 		bl	handleNotes
 2080 0938 14E0     		b	.L91
 2081              	.L90:
 663:main.c        ****             }
 664:main.c        ****             //note-off from pluck sensor (RH Mute)
 665:main.c        ****             else if ((stringPlucks[i] == 0) && (stringPlucksPrev[i] > 0))
 2082              		.loc 1 665 0
 2083 093a 584A     		ldr	r2, .L110+24
 2084 093c BB68     		ldr	r3, [r7, #8]
 2085 093e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2086 0942 002B     		cmp	r3, #0
 2087 0944 0ED1     		bne	.L91
 2088              		.loc 1 665 0 is_stmt 0 discriminator 1
 2089 0946 564A     		ldr	r2, .L110+28
 2090 0948 BB68     		ldr	r3, [r7, #8]
 2091 094a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2092 094e 002B     		cmp	r3, #0
 2093 0950 08DD     		ble	.L91
 666:main.c        ****             {
 667:main.c        ****                 handleNotes(lastNotes[i], 0, i);
 2094              		.loc 1 667 0 is_stmt 1
 2095 0952 504A     		ldr	r2, .L110+16
 2096 0954 BB68     		ldr	r3, [r7, #8]
 2097 0956 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2098 095a BA68     		ldr	r2, [r7, #8]
 2099 095c 0021     		movs	r1, #0
 2100 095e 1846     		mov	r0, r3
 2101 0960 FFF7FEFF 		bl	handleNotes
 2102              	.L91:
 668:main.c        ****             }
 669:main.c        ****             
 670:main.c        **** 
 671:main.c        ****             stringPlucksPrev[i] = stringPlucks[i];
 2103              		.loc 1 671 0 discriminator 2
 2104 0964 4D4A     		ldr	r2, .L110+24
 2105 0966 BB68     		ldr	r3, [r7, #8]
 2106 0968 52F82320 		ldr	r2, [r2, r3, lsl #2]
 2107 096c 4C49     		ldr	r1, .L110+28
 2108 096e BB68     		ldr	r3, [r7, #8]
 2109 0970 41F82320 		str	r2, [r1, r3, lsl #2]
 627:main.c        ****         {
 2110              		.loc 1 627 0 discriminator 2
 2111 0974 BB68     		ldr	r3, [r7, #8]
 2112 0976 0133     		adds	r3, r3, #1
 2113 0978 BB60     		str	r3, [r7, #8]
 2114              	.L84:
 627:main.c        ****         {
 2115              		.loc 1 627 0 is_stmt 0 discriminator 1
 2116 097a BB68     		ldr	r3, [r7, #8]
 2117 097c 032B     		cmp	r3, #3
 2118 097e 7FF71DAF 		ble	.L92
 2119              	.LBE6:
 672:main.c        ****             
 673:main.c        ****         }
 674:main.c        ****         
 675:main.c        ****         if (USB_check_flag)
 2120              		.loc 1 675 0 is_stmt 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 51


 2121 0982 4A4B     		ldr	r3, .L110+40
 2122 0984 1B78     		ldrb	r3, [r3]
 2123 0986 DBB2     		uxtb	r3, r3
 2124 0988 002B     		cmp	r3, #0
 2125 098a 01D0     		beq	.L93
 676:main.c        ****         {
 677:main.c        ****             checkUSB_Vbus();
 2126              		.loc 1 677 0
 2127 098c FFF7FEFF 		bl	checkUSB_Vbus
 2128              	.L93:
 678:main.c        ****         }
 679:main.c        ****         //only service the USB bus if there is a computer plugged in
 680:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 2129              		.loc 1 680 0
 2130 0990 474B     		ldr	r3, .L110+44
 2131 0992 1B78     		ldrb	r3, [r3]
 2132 0994 DBB2     		uxtb	r3, r3
 2133 0996 002B     		cmp	r3, #0
 2134 0998 13D0     		beq	.L103
 2135              		.loc 1 680 0 is_stmt 0 discriminator 1
 2136 099a FFF7FEFF 		bl	USB_VBusPresent
 2137 099e 0346     		mov	r3, r0
 2138 09a0 002B     		cmp	r3, #0
 2139 09a2 0ED0     		beq	.L103
 681:main.c        ****         {
 682:main.c        ****             if (midiSent > 64)
 2140              		.loc 1 682 0 is_stmt 1
 2141 09a4 434B     		ldr	r3, .L110+48
 2142 09a6 1B88     		ldrh	r3, [r3]
 2143 09a8 402B     		cmp	r3, #64
 2144 09aa 05D9     		bls	.L95
 683:main.c        ****             {
 684:main.c        ****                 midiOverflow++;
 2145              		.loc 1 684 0
 2146 09ac 424B     		ldr	r3, .L110+52
 2147 09ae 1B88     		ldrh	r3, [r3]
 2148 09b0 0133     		adds	r3, r3, #1
 2149 09b2 9AB2     		uxth	r2, r3
 2150 09b4 404B     		ldr	r3, .L110+52
 2151 09b6 1A80     		strh	r2, [r3]	@ movhi
 2152              	.L95:
 685:main.c        ****             }
 686:main.c        ****             midiSent = 0;
 2153              		.loc 1 686 0
 2154 09b8 3E4B     		ldr	r3, .L110+48
 2155 09ba 0022     		movs	r2, #0
 2156 09bc 1A80     		strh	r2, [r3]	@ movhi
 687:main.c        ****             USB_service();
 2157              		.loc 1 687 0
 2158 09be FFF7FEFF 		bl	USB_service
 2159              	.L103:
 688:main.c        ****         }
 689:main.c        ****         
 690:main.c        ****         while(CapSense_IsBusy() != 0)  
 2160              		.loc 1 690 0
 2161 09c2 00BF     		nop
 2162              	.L96:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 52


 2163              		.loc 1 690 0 is_stmt 0 discriminator 1
 2164 09c4 FFF7FEFF 		bl	CapSense_IsBusy
 2165 09c8 0346     		mov	r3, r0
 2166 09ca 002B     		cmp	r3, #0
 2167 09cc FAD1     		bne	.L96
 691:main.c        ****         {
 692:main.c        ****             ;//wait until scan is complete
 693:main.c        ****         }  
 694:main.c        **** 
 695:main.c        ****         CapSense_CheckIsAnyWidgetActive();
 2168              		.loc 1 695 0 is_stmt 1
 2169 09ce FFF7FEFF 		bl	CapSense_CheckIsAnyWidgetActive
 696:main.c        ****         
 697:main.c        ****         /*txBuffer[8] = 0;
 698:main.c        ****         for (int i = 0; i < 8; i++)
 699:main.c        ****         {
 700:main.c        ****            txBuffer[8] += (CapSense_sensorSignal[i] > 0) << i;
 701:main.c        ****         }
 702:main.c        ****         */
 703:main.c        ****         //SPIM_1_ClearTxBuffer();
 704:main.c        ****         //CyDelay(1);
 705:main.c        **** 
 706:main.c        ****         txBuffer[8] = CapSense_sensorOnMask[0];
 2170              		.loc 1 706 0
 2171 09d2 3A4B     		ldr	r3, .L110+56
 2172 09d4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2173 09d6 3A4B     		ldr	r3, .L110+60
 2174 09d8 1A72     		strb	r2, [r3, #8]
 707:main.c        ****         txBuffer[whichLinearSensor*2] = ((uint16_t) linearPotValue32Bit[whichLinearSensor]) >> 8;
 2175              		.loc 1 707 0
 2176 09da 3A4B     		ldr	r3, .L110+64
 2177 09dc 1B68     		ldr	r3, [r3]
 2178 09de 5B00     		lsls	r3, r3, #1
 2179 09e0 384A     		ldr	r2, .L110+64
 2180 09e2 1268     		ldr	r2, [r2]
 2181 09e4 3849     		ldr	r1, .L110+68
 2182 09e6 51F82220 		ldr	r2, [r1, r2, lsl #2]
 2183 09ea 92B2     		uxth	r2, r2
 2184 09ec 1212     		asrs	r2, r2, #8
 2185 09ee D1B2     		uxtb	r1, r2
 2186 09f0 334A     		ldr	r2, .L110+60
 2187 09f2 D154     		strb	r1, [r2, r3]
 708:main.c        ****         txBuffer[whichLinearSensor*2+1] = linearPotValue32Bit[whichLinearSensor] & 0xff;
 2188              		.loc 1 708 0
 2189 09f4 334B     		ldr	r3, .L110+64
 2190 09f6 1B68     		ldr	r3, [r3]
 2191 09f8 5B00     		lsls	r3, r3, #1
 2192 09fa 0133     		adds	r3, r3, #1
 2193 09fc 314A     		ldr	r2, .L110+64
 2194 09fe 1268     		ldr	r2, [r2]
 2195 0a00 3149     		ldr	r1, .L110+68
 2196 0a02 51F82220 		ldr	r2, [r1, r2, lsl #2]
 2197 0a06 D1B2     		uxtb	r1, r2
 2198 0a08 2D4A     		ldr	r2, .L110+60
 2199 0a0a D154     		strb	r1, [r2, r3]
 709:main.c        ****         
 710:main.c        ****         txBuffer[15] = bufCount % 16;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 53


 2200              		.loc 1 710 0
 2201 0a0c 2F4B     		ldr	r3, .L110+72
 2202 0a0e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2203 0a10 03F00F03 		and	r3, r3, #15
 2204 0a14 DAB2     		uxtb	r2, r3
 2205 0a16 2A4B     		ldr	r3, .L110+60
 2206 0a18 DA73     		strb	r2, [r3, #15]
 711:main.c        ****         bufCount++;
 2207              		.loc 1 711 0
 2208 0a1a 2C4B     		ldr	r3, .L110+72
 2209 0a1c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2210 0a1e 0133     		adds	r3, r3, #1
 2211 0a20 DAB2     		uxtb	r2, r3
 2212 0a22 2A4B     		ldr	r3, .L110+72
 2213 0a24 1A70     		strb	r2, [r3]
 712:main.c        ****         
 713:main.c        ****         if (txBuffer[8] & 1)
 2214              		.loc 1 713 0
 2215 0a26 264B     		ldr	r3, .L110+60
 2216 0a28 1B7A     		ldrb	r3, [r3, #8]
 2217 0a2a DBB2     		uxtb	r3, r3
 2218 0a2c 03F00103 		and	r3, r3, #1
 2219 0a30 002B     		cmp	r3, #0
 2220 0a32 06D0     		beq	.L97
 714:main.c        ****         {
 715:main.c        ****             blue_LED_Write(1);
 2221              		.loc 1 715 0
 2222 0a34 0120     		movs	r0, #1
 2223 0a36 FFF7FEFF 		bl	blue_LED_Write
 716:main.c        ****             LED1_Write(1);
 2224              		.loc 1 716 0
 2225 0a3a 0120     		movs	r0, #1
 2226 0a3c FFF7FEFF 		bl	LED1_Write
 2227 0a40 05E0     		b	.L98
 2228              	.L97:
 717:main.c        ****         }
 718:main.c        ****         else
 719:main.c        ****         {
 720:main.c        ****             blue_LED_Write(0);
 2229              		.loc 1 720 0
 2230 0a42 0020     		movs	r0, #0
 2231 0a44 FFF7FEFF 		bl	blue_LED_Write
 721:main.c        ****             LED1_Write(0);
 2232              		.loc 1 721 0
 2233 0a48 0020     		movs	r0, #0
 2234 0a4a FFF7FEFF 		bl	LED1_Write
 2235              	.L98:
 722:main.c        ****         }
 723:main.c        ****         SPIM_1_ClearRxBuffer();
 2236              		.loc 1 723 0
 2237 0a4e FFF7FEFF 		bl	SPIM_1_ClearRxBuffer
 724:main.c        ****         //CyDelay(1);
 725:main.c        ****         //send SPI data
 726:main.c        ****         CyDmaChEnable(rxChannel, STORE_TD_CFG_ONCMPLT);
 2238              		.loc 1 726 0
 2239 0a52 1F4B     		ldr	r3, .L110+76
 2240 0a54 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 54


 2241 0a56 DBB2     		uxtb	r3, r3
 2242 0a58 0121     		movs	r1, #1
 2243 0a5a 1846     		mov	r0, r3
 2244 0a5c FFF7FEFF 		bl	CyDmaChEnable
 727:main.c        ****         CyDmaChEnable(txChannel, STORE_TD_CFG_ONCMPLT);
 2245              		.loc 1 727 0
 2246 0a60 1C4B     		ldr	r3, .L110+80
 2247 0a62 1B78     		ldrb	r3, [r3]
 2248 0a64 DBB2     		uxtb	r3, r3
 2249 0a66 0121     		movs	r1, #1
 2250 0a68 1846     		mov	r0, r3
 2251 0a6a FFF7FEFF 		bl	CyDmaChEnable
 728:main.c        ****        //CyDelay(1);
 729:main.c        **** 
 730:main.c        ****         
 731:main.c        ****         timeSinceLastAttack++;
 2252              		.loc 1 731 0
 2253 0a6e 1A4B     		ldr	r3, .L110+84
 2254 0a70 18CB     		ldmia	r3, {r3-r4}
 2255 0a72 0133     		adds	r3, r3, #1
 2256 0a74 44F10004 		adc	r4, r4, #0
 2257 0a78 174A     		ldr	r2, .L110+84
 2258 0a7a C2E90034 		strd	r3, [r2]
 732:main.c        ****      }
 2259              		.loc 1 732 0
 2260 0a7e FFF7FBBA 		b	.L99
 2261              	.L111:
 2262 0a82 00BF     		.align	2
 2263              	.L110:
 2264 0a84 00000000 		.word	LHMute
 2265 0a88 00000000 		.word	LHMuteCounter
 2266 0a8c 00000000 		.word	stringStates
 2267 0a90 00000000 		.word	pitchFreeze
 2268 0a94 00000000 		.word	lastNotes
 2269 0a98 00000000 		.word	rxBuffer
 2270 0a9c 00000000 		.word	stringPlucks
 2271 0aa0 00000000 		.word	stringPlucksPrev
 2272 0aa4 00000000 		.word	openStringMIDI
 2273 0aa8 00000000 		.word	octave
 2274 0aac 00000000 		.word	USB_check_flag
 2275 0ab0 00000000 		.word	USB_active
 2276 0ab4 00000000 		.word	midiSent
 2277 0ab8 00000000 		.word	midiOverflow
 2278 0abc 00000000 		.word	CapSense_sensorOnMask
 2279 0ac0 00000000 		.word	txBuffer
 2280 0ac4 00000000 		.word	whichLinearSensor
 2281 0ac8 00000000 		.word	linearPotValue32Bit
 2282 0acc 00000000 		.word	bufCount
 2283 0ad0 00000000 		.word	rxChannel
 2284 0ad4 00000000 		.word	txChannel
 2285 0ad8 00000000 		.word	timeSinceLastAttack
 2286              		.cfi_endproc
 2287              	.LFE73:
 2288              		.size	main, .-main
 2289              		.section	.text.checkUSB_Vbus,"ax",%progbits
 2290              		.align	2
 2291              		.global	checkUSB_Vbus
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 55


 2292              		.thumb
 2293              		.thumb_func
 2294              		.type	checkUSB_Vbus, %function
 2295              	checkUSB_Vbus:
 2296              	.LFB74:
 733:main.c        **** }
 734:main.c        **** 
 735:main.c        **** void checkUSB_Vbus(void)
 736:main.c        **** {
 2297              		.loc 1 736 0
 2298              		.cfi_startproc
 2299              		@ args = 0, pretend = 0, frame = 0
 2300              		@ frame_needed = 1, uses_anonymous_args = 0
 2301 0000 80B5     		push	{r7, lr}
 2302              		.cfi_def_cfa_offset 8
 2303              		.cfi_offset 7, -8
 2304              		.cfi_offset 14, -4
 2305 0002 00AF     		add	r7, sp, #0
 2306              		.cfi_def_cfa_register 7
 737:main.c        ****    if (USB_VBusPresent() == 0)
 2307              		.loc 1 737 0
 2308 0004 FFF7FEFF 		bl	USB_VBusPresent
 2309 0008 0346     		mov	r3, r0
 2310 000a 002B     		cmp	r3, #0
 2311 000c 05D1     		bne	.L113
 738:main.c        ****    {
 739:main.c        ****        USB_Stop();
 2312              		.loc 1 739 0
 2313 000e FFF7FEFF 		bl	USB_Stop
 740:main.c        ****        //LED_PWM_Write(0);
 741:main.c        ****        USB_active = 0; 
 2314              		.loc 1 741 0
 2315 0012 0E4B     		ldr	r3, .L116
 2316 0014 0022     		movs	r2, #0
 2317 0016 1A70     		strb	r2, [r3]
 2318 0018 13E0     		b	.L114
 2319              	.L113:
 742:main.c        ****         //CySoftwareReset();
 743:main.c        ****    }
 744:main.c        ****    else if (USB_active == 0 )
 2320              		.loc 1 744 0
 2321 001a 0C4B     		ldr	r3, .L116
 2322 001c 1B78     		ldrb	r3, [r3]
 2323 001e DBB2     		uxtb	r3, r3
 2324 0020 002B     		cmp	r3, #0
 2325 0022 0ED1     		bne	.L114
 745:main.c        ****    {
 746:main.c        ****        USB_Start(0u, USB_5V_OPERATION ); 
 2326              		.loc 1 746 0
 2327 0024 0121     		movs	r1, #1
 2328 0026 0020     		movs	r0, #0
 2329 0028 FFF7FEFF 		bl	USB_Start
 747:main.c        ****         while (0u == USB_GetConfiguration());
 2330              		.loc 1 747 0
 2331 002c 00BF     		nop
 2332              	.L115:
 2333              		.loc 1 747 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 56


 2334 002e FFF7FEFF 		bl	USB_GetConfiguration
 2335 0032 0346     		mov	r3, r0
 2336 0034 002B     		cmp	r3, #0
 2337 0036 FAD0     		beq	.L115
 748:main.c        ****         USB_MIDI_EP_Init();
 2338              		.loc 1 748 0 is_stmt 1
 2339 0038 FFF7FEFF 		bl	USB_MIDI_Init
 749:main.c        ****        //LED_PWM_Write(255);
 750:main.c        ****        USB_active = 1;
 2340              		.loc 1 750 0
 2341 003c 034B     		ldr	r3, .L116
 2342 003e 0122     		movs	r2, #1
 2343 0040 1A70     		strb	r2, [r3]
 2344              	.L114:
 751:main.c        ****    }
 752:main.c        ****    USB_check_flag = 0;
 2345              		.loc 1 752 0
 2346 0042 034B     		ldr	r3, .L116+4
 2347 0044 0022     		movs	r2, #0
 2348 0046 1A70     		strb	r2, [r3]
 753:main.c        **** }
 2349              		.loc 1 753 0
 2350 0048 00BF     		nop
 2351 004a 80BD     		pop	{r7, pc}
 2352              	.L117:
 2353              		.align	2
 2354              	.L116:
 2355 004c 00000000 		.word	USB_active
 2356 0050 00000000 		.word	USB_check_flag
 2357              		.cfi_endproc
 2358              	.LFE74:
 2359              		.size	checkUSB_Vbus, .-checkUSB_Vbus
 2360              		.section	.text.USB_service,"ax",%progbits
 2361              		.align	2
 2362              		.global	USB_service
 2363              		.thumb
 2364              		.thumb_func
 2365              		.type	USB_service, %function
 2366              	USB_service:
 2367              	.LFB75:
 754:main.c        **** 
 755:main.c        **** void USB_service(void)
 756:main.c        **** {
 2368              		.loc 1 756 0
 2369              		.cfi_startproc
 2370              		@ args = 0, pretend = 0, frame = 0
 2371              		@ frame_needed = 1, uses_anonymous_args = 0
 2372 0000 80B5     		push	{r7, lr}
 2373              		.cfi_def_cfa_offset 8
 2374              		.cfi_offset 7, -8
 2375              		.cfi_offset 14, -4
 2376 0002 00AF     		add	r7, sp, #0
 2377              		.cfi_def_cfa_register 7
 757:main.c        ****     if(USB_IsConfigurationChanged() != 0u)
 2378              		.loc 1 757 0
 2379 0004 FFF7FEFF 		bl	USB_IsConfigurationChanged
 2380 0008 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 57


 2381 000a 002B     		cmp	r3, #0
 2382 000c 10D0     		beq	.L119
 758:main.c        ****     {
 759:main.c        ****         if(USB_GetConfiguration() != 0u)   
 2383              		.loc 1 759 0
 2384 000e FFF7FEFF 		bl	USB_GetConfiguration
 2385 0012 0346     		mov	r3, r0
 2386 0014 002B     		cmp	r3, #0
 2387 0016 0BD0     		beq	.L119
 760:main.c        ****         {
 761:main.c        ****            // Sleep_isr_StartEx(SleepIsr_function);
 762:main.c        ****             
 763:main.c        ****             //SleepTimer_Start();
 764:main.c        ****         	
 765:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 2388              		.loc 1 765 0
 2389 0018 244B     		ldr	r3, .L125
 2390 001a 1B78     		ldrb	r3, [r3]
 2391 001c DBB2     		uxtb	r3, r3
 2392 001e 002B     		cmp	r3, #0
 2393 0020 06D0     		beq	.L119
 2394              		.loc 1 765 0 is_stmt 0 discriminator 1
 2395 0022 FFF7FEFF 		bl	USB_VBusPresent
 2396 0026 0346     		mov	r3, r0
 2397 0028 002B     		cmp	r3, #0
 2398 002a 01D0     		beq	.L119
 766:main.c        ****             {
 767:main.c        ****                 USB_MIDI_EP_Init();
 2399              		.loc 1 767 0 is_stmt 1
 2400 002c FFF7FEFF 		bl	USB_MIDI_Init
 2401              	.L119:
 768:main.c        ****             }
 769:main.c        ****         }
 770:main.c        ****         else
 771:main.c        ****         {
 772:main.c        ****             //SleepTimer_Stop();
 773:main.c        ****         }    
 774:main.c        ****     }        
 775:main.c        ****     
 776:main.c        ****     if(USB_GetConfiguration() != 0u)    
 2402              		.loc 1 776 0
 2403 0030 FFF7FEFF 		bl	USB_GetConfiguration
 2404 0034 0346     		mov	r3, r0
 2405 0036 002B     		cmp	r3, #0
 2406 0038 35D0     		beq	.L124
 777:main.c        ****     {
 778:main.c        **** 
 779:main.c        ****          /* Reinitialize after SET_CONFIGURATION or SET_INTERFACE Requests */
 780:main.c        ****         if(USB_IsConfigurationChanged() != 0x00)
 2407              		.loc 1 780 0
 2408 003a FFF7FEFF 		bl	USB_IsConfigurationChanged
 2409 003e 0346     		mov	r3, r0
 2410 0040 002B     		cmp	r3, #0
 2411 0042 18D0     		beq	.L122
 781:main.c        ****         {
 782:main.c        ****             USB_LoadInEP(USB_midi_in_ep, USB_midiInBuffer,(uint16) USB_midiInPointer);
 2412              		.loc 1 782 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 58


 2413 0044 1A4B     		ldr	r3, .L125+4
 2414 0046 1B78     		ldrb	r3, [r3]
 2415 0048 D8B2     		uxtb	r0, r3
 2416 004a 1A4B     		ldr	r3, .L125+8
 2417 004c 1B78     		ldrb	r3, [r3]
 2418 004e DBB2     		uxtb	r3, r3
 2419 0050 9BB2     		uxth	r3, r3
 2420 0052 1A46     		mov	r2, r3
 2421 0054 1849     		ldr	r1, .L125+12
 2422 0056 FFF7FEFF 		bl	USB_LoadInEP
 783:main.c        ****             USB_ReadOutEP(USB_midi_out_ep,USB_midiOutBuffer, 64);
 2423              		.loc 1 783 0
 2424 005a 184B     		ldr	r3, .L125+16
 2425 005c 1B78     		ldrb	r3, [r3]
 2426 005e DBB2     		uxtb	r3, r3
 2427 0060 4022     		movs	r2, #64
 2428 0062 1749     		ldr	r1, .L125+20
 2429 0064 1846     		mov	r0, r3
 2430 0066 FFF7FEFF 		bl	USB_ReadOutEP
 784:main.c        ****                                              /* configuring the DMAs for the first time only, the d
 785:main.c        ****                                              in the EP buffer is Transferred by DMA to the buffer a
 786:main.c        ****             USB_EnableOutEP(USB_midi_out_ep);       /* Note 3.*/
 2431              		.loc 1 786 0
 2432 006a 144B     		ldr	r3, .L125+16
 2433 006c 1B78     		ldrb	r3, [r3]
 2434 006e DBB2     		uxtb	r3, r3
 2435 0070 1846     		mov	r0, r3
 2436 0072 FFF7FEFF 		bl	USB_EnableOutEP
 2437              	.L122:
 787:main.c        ****         }
 788:main.c        **** #if 0
 789:main.c        ****          /* Check that all data has been transfered and IN Buffer is empty */
 790:main.c        ****          if (USB_GetEPState(USB_midi_in_ep) == USB_IN_BUFFER_EMPTY)
 791:main.c        ****          {
 792:main.c        ****             /*Rearm the IN Endpoint (EP1) */
 793:main.c        ****             USB_LoadInEP(USB_midi_in_ep, USB_NULL, (uint16) USB_midiInPointer);
 794:main.c        ****          }
 795:main.c        ****              
 796:main.c        ****          if (USB_GetEPState(USB_midi_out_ep) == USB_OUT_BUFFER_FULL)
 797:main.c        ****          {
 798:main.c        ****             USB_EnableOutEP(USB_midi_out_ep);       /* Note 3.*/
 799:main.c        ****          }
 800:main.c        ****  #endif
 801:main.c        **** 
 802:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 2438              		.loc 1 802 0
 2439 0076 0D4B     		ldr	r3, .L125
 2440 0078 1B78     		ldrb	r3, [r3]
 2441 007a DBB2     		uxtb	r3, r3
 2442 007c 002B     		cmp	r3, #0
 2443 007e 06D0     		beq	.L123
 2444              		.loc 1 802 0 is_stmt 0 discriminator 1
 2445 0080 FFF7FEFF 		bl	USB_VBusPresent
 2446 0084 0346     		mov	r3, r0
 2447 0086 002B     		cmp	r3, #0
 2448 0088 01D0     		beq	.L123
 803:main.c        ****             {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 59


 804:main.c        ****                 USB_MIDI_IN_Service();
 2449              		.loc 1 804 0 is_stmt 1
 2450 008a FFF7FEFF 		bl	USB_MIDI_IN_Service
 2451              	.L123:
 805:main.c        ****             }
 806:main.c        **** 
 807:main.c        **** 
 808:main.c        **** 
 809:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 2452              		.loc 1 809 0
 2453 008e 074B     		ldr	r3, .L125
 2454 0090 1B78     		ldrb	r3, [r3]
 2455 0092 DBB2     		uxtb	r3, r3
 2456 0094 002B     		cmp	r3, #0
 2457 0096 06D0     		beq	.L124
 2458              		.loc 1 809 0 is_stmt 0 discriminator 1
 2459 0098 FFF7FEFF 		bl	USB_VBusPresent
 2460 009c 0346     		mov	r3, r0
 2461 009e 002B     		cmp	r3, #0
 2462 00a0 01D0     		beq	.L124
 810:main.c        ****             {
 811:main.c        ****                 USB_MIDI_OUT_Service();
 2463              		.loc 1 811 0 is_stmt 1
 2464 00a2 FFF7FEFF 		bl	USB_MIDI_OUT_Service
 2465              	.L124:
 812:main.c        ****             }
 813:main.c        **** 
 814:main.c        **** /*
 815:main.c        ****         if( usbActivityCounter >= 2u ) 
 816:main.c        ****         {
 817:main.c        **** 
 818:main.c        ****             USB_Suspend();
 819:main.c        **** 
 820:main.c        ****             CyPmSaveClocks();
 821:main.c        ****             CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_PICU);
 822:main.c        ****             CyPmRestoreClocks();
 823:main.c        **** 
 824:main.c        ****             USB_Resume();
 825:main.c        ****             USB_MIDI_EP_Init();
 826:main.c        ****             
 827:main.c        ****             usbActivityCounter = 0u; 
 828:main.c        **** 
 829:main.c        ****         }
 830:main.c        ****         */
 831:main.c        ****     }
 832:main.c        ****         
 833:main.c        **** }
 2466              		.loc 1 833 0
 2467 00a6 00BF     		nop
 2468 00a8 80BD     		pop	{r7, pc}
 2469              	.L126:
 2470 00aa 00BF     		.align	2
 2471              	.L125:
 2472 00ac 00000000 		.word	USB_active
 2473 00b0 00000000 		.word	USB_midi_in_ep
 2474 00b4 00000000 		.word	USB_midiInPointer
 2475 00b8 00000000 		.word	USB_midiInBuffer
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 60


 2476 00bc 00000000 		.word	USB_midi_out_ep
 2477 00c0 00000000 		.word	USB_midiOutBuffer
 2478              		.cfi_endproc
 2479              	.LFE75:
 2480              		.size	USB_service, .-USB_service
 2481              		.comm	tempMIDI,4,4
 2482              		.section	.text.USB_callbackLocalMidiEvent,"ax",%progbits
 2483              		.align	2
 2484              		.global	USB_callbackLocalMidiEvent
 2485              		.thumb
 2486              		.thumb_func
 2487              		.type	USB_callbackLocalMidiEvent, %function
 2488              	USB_callbackLocalMidiEvent:
 2489              	.LFB76:
 834:main.c        **** uint8_t tempMIDI[4];
 835:main.c        **** void USB_callbackLocalMidiEvent(uint8 cable, uint8 *midiMsg) CYREENTRANT
 836:main.c        **** {
 2490              		.loc 1 836 0
 2491              		.cfi_startproc
 2492              		@ args = 0, pretend = 0, frame = 8
 2493              		@ frame_needed = 1, uses_anonymous_args = 0
 2494 0000 80B5     		push	{r7, lr}
 2495              		.cfi_def_cfa_offset 8
 2496              		.cfi_offset 7, -8
 2497              		.cfi_offset 14, -4
 2498 0002 82B0     		sub	sp, sp, #8
 2499              		.cfi_def_cfa_offset 16
 2500 0004 00AF     		add	r7, sp, #0
 2501              		.cfi_def_cfa_register 7
 2502 0006 0346     		mov	r3, r0
 2503 0008 3960     		str	r1, [r7]
 2504 000a FB71     		strb	r3, [r7, #7]
 837:main.c        ****      tempMIDI[0] = midiMsg[0];
 2505              		.loc 1 837 0
 2506 000c 3B68     		ldr	r3, [r7]
 2507 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2508 0010 0C4B     		ldr	r3, .L130
 2509 0012 1A70     		strb	r2, [r3]
 838:main.c        ****     tempMIDI[1] = midiMsg[1];
 2510              		.loc 1 838 0
 2511 0014 3B68     		ldr	r3, [r7]
 2512 0016 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2513 0018 0A4B     		ldr	r3, .L130
 2514 001a 5A70     		strb	r2, [r3, #1]
 839:main.c        ****      tempMIDI[2] = midiMsg[2];
 2515              		.loc 1 839 0
 2516 001c 3B68     		ldr	r3, [r7]
 2517 001e 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 2518 0020 084B     		ldr	r3, .L130
 2519 0022 9A70     		strb	r2, [r3, #2]
 840:main.c        ****      tempMIDI[3] = midiMsg[3];
 2520              		.loc 1 840 0
 2521 0024 3B68     		ldr	r3, [r7]
 2522 0026 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2523 0028 064B     		ldr	r3, .L130
 2524 002a DA70     		strb	r2, [r3, #3]
 841:main.c        ****     //check that we got here
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 61


 842:main.c        ****     
 843:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 2525              		.loc 1 843 0
 2526 002c 064B     		ldr	r3, .L130+4
 2527 002e 1B78     		ldrb	r3, [r3]
 2528 0030 DBB2     		uxtb	r3, r3
 2529 0032 002B     		cmp	r3, #0
 2530 0034 01D0     		beq	.L129
 2531              		.loc 1 843 0 is_stmt 0 discriminator 1
 2532 0036 FFF7FEFF 		bl	USB_VBusPresent
 2533              	.L129:
 844:main.c        ****     { 
 845:main.c        ****     }
 846:main.c        ****     cable = cable;
 847:main.c        **** }
 2534              		.loc 1 847 0 is_stmt 1
 2535 003a 00BF     		nop
 2536 003c 0837     		adds	r7, r7, #8
 2537              		.cfi_def_cfa_offset 8
 2538 003e BD46     		mov	sp, r7
 2539              		.cfi_def_cfa_register 13
 2540              		@ sp needed
 2541 0040 80BD     		pop	{r7, pc}
 2542              	.L131:
 2543 0042 00BF     		.align	2
 2544              	.L130:
 2545 0044 00000000 		.word	tempMIDI
 2546 0048 00000000 		.word	USB_active
 2547              		.cfi_endproc
 2548              	.LFE76:
 2549              		.size	USB_callbackLocalMidiEvent, .-USB_callbackLocalMidiEvent
 2550              		.section	.text.sendMIDINoteOn,"ax",%progbits
 2551              		.align	2
 2552              		.global	sendMIDINoteOn
 2553              		.thumb
 2554              		.thumb_func
 2555              		.type	sendMIDINoteOn, %function
 2556              	sendMIDINoteOn:
 2557              	.LFB77:
 848:main.c        **** 
 849:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel)
 850:main.c        **** {  
 2558              		.loc 1 850 0
 2559              		.cfi_startproc
 2560              		@ args = 0, pretend = 0, frame = 16
 2561              		@ frame_needed = 1, uses_anonymous_args = 0
 2562 0000 80B5     		push	{r7, lr}
 2563              		.cfi_def_cfa_offset 8
 2564              		.cfi_offset 7, -8
 2565              		.cfi_offset 14, -4
 2566 0002 84B0     		sub	sp, sp, #16
 2567              		.cfi_def_cfa_offset 24
 2568 0004 00AF     		add	r7, sp, #0
 2569              		.cfi_def_cfa_register 7
 2570 0006 F860     		str	r0, [r7, #12]
 2571 0008 B960     		str	r1, [r7, #8]
 2572 000a 7A60     		str	r2, [r7, #4]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 62


 851:main.c        ****    
 852:main.c        ****     midiMsg[0] = USB_MIDI_NOTE_ON + channel;
 2573              		.loc 1 852 0
 2574 000c 7B68     		ldr	r3, [r7, #4]
 2575 000e DBB2     		uxtb	r3, r3
 2576 0010 703B     		subs	r3, r3, #112
 2577 0012 DAB2     		uxtb	r2, r3
 2578 0014 114B     		ldr	r3, .L134
 2579 0016 1A70     		strb	r2, [r3]
 853:main.c        ****     midiMsg[1] = MIDInoteNum;
 2580              		.loc 1 853 0
 2581 0018 FB68     		ldr	r3, [r7, #12]
 2582 001a DAB2     		uxtb	r2, r3
 2583 001c 0F4B     		ldr	r3, .L134
 2584 001e 5A70     		strb	r2, [r3, #1]
 854:main.c        ****     midiMsg[2] = velocity;	
 2585              		.loc 1 854 0
 2586 0020 BB68     		ldr	r3, [r7, #8]
 2587 0022 DAB2     		uxtb	r2, r3
 2588 0024 0D4B     		ldr	r3, .L134
 2589 0026 9A70     		strb	r2, [r3, #2]
 855:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
 856:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 2590              		.loc 1 856 0
 2591 0028 0D4B     		ldr	r3, .L134+4
 2592 002a 1B78     		ldrb	r3, [r3]
 2593 002c DBB2     		uxtb	r3, r3
 2594 002e 002B     		cmp	r3, #0
 2595 0030 09D0     		beq	.L133
 2596              		.loc 1 856 0 is_stmt 0 discriminator 1
 2597 0032 FFF7FEFF 		bl	USB_VBusPresent
 2598 0036 0346     		mov	r3, r0
 2599 0038 002B     		cmp	r3, #0
 2600 003a 04D0     		beq	.L133
 857:main.c        ****     {
 858:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 2601              		.loc 1 858 0 is_stmt 1
 2602 003c 0022     		movs	r2, #0
 2603 003e 0749     		ldr	r1, .L134
 2604 0040 0320     		movs	r0, #3
 2605 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 2606              	.L133:
 859:main.c        ****     } 
 860:main.c        ****     midiSent += 4;
 2607              		.loc 1 860 0
 2608 0046 074B     		ldr	r3, .L134+8
 2609 0048 1B88     		ldrh	r3, [r3]
 2610 004a 0433     		adds	r3, r3, #4
 2611 004c 9AB2     		uxth	r2, r3
 2612 004e 054B     		ldr	r3, .L134+8
 2613 0050 1A80     		strh	r2, [r3]	@ movhi
 861:main.c        **** }
 2614              		.loc 1 861 0
 2615 0052 00BF     		nop
 2616 0054 1037     		adds	r7, r7, #16
 2617              		.cfi_def_cfa_offset 8
 2618 0056 BD46     		mov	sp, r7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 63


 2619              		.cfi_def_cfa_register 13
 2620              		@ sp needed
 2621 0058 80BD     		pop	{r7, pc}
 2622              	.L135:
 2623 005a 00BF     		.align	2
 2624              	.L134:
 2625 005c 00000000 		.word	midiMsg
 2626 0060 00000000 		.word	USB_active
 2627 0064 00000000 		.word	midiSent
 2628              		.cfi_endproc
 2629              	.LFE77:
 2630              		.size	sendMIDINoteOn, .-sendMIDINoteOn
 2631              		.section	.text.sendMIDIPitchBend,"ax",%progbits
 2632              		.align	2
 2633              		.global	sendMIDIPitchBend
 2634              		.thumb
 2635              		.thumb_func
 2636              		.type	sendMIDIPitchBend, %function
 2637              	sendMIDIPitchBend:
 2638              	.LFB78:
 862:main.c        **** 
 863:main.c        **** void sendMIDIPitchBend(int val, int channel)
 864:main.c        **** {
 2639              		.loc 1 864 0
 2640              		.cfi_startproc
 2641              		@ args = 0, pretend = 0, frame = 8
 2642              		@ frame_needed = 1, uses_anonymous_args = 0
 2643 0000 80B5     		push	{r7, lr}
 2644              		.cfi_def_cfa_offset 8
 2645              		.cfi_offset 7, -8
 2646              		.cfi_offset 14, -4
 2647 0002 82B0     		sub	sp, sp, #8
 2648              		.cfi_def_cfa_offset 16
 2649 0004 00AF     		add	r7, sp, #0
 2650              		.cfi_def_cfa_register 7
 2651 0006 7860     		str	r0, [r7, #4]
 2652 0008 3960     		str	r1, [r7]
 865:main.c        ****     midiMsg[0] = USB_MIDI_PITCH_BEND_CHANGE + channel;
 2653              		.loc 1 865 0
 2654 000a 3B68     		ldr	r3, [r7]
 2655 000c DBB2     		uxtb	r3, r3
 2656 000e 203B     		subs	r3, r3, #32
 2657 0010 DAB2     		uxtb	r2, r3
 2658 0012 134B     		ldr	r3, .L138
 2659 0014 1A70     		strb	r2, [r3]
 866:main.c        ****     midiMsg[1] = (val & 127); //LSB
 2660              		.loc 1 866 0
 2661 0016 7B68     		ldr	r3, [r7, #4]
 2662 0018 DBB2     		uxtb	r3, r3
 2663 001a 03F07F03 		and	r3, r3, #127
 2664 001e DAB2     		uxtb	r2, r3
 2665 0020 0F4B     		ldr	r3, .L138
 2666 0022 5A70     		strb	r2, [r3, #1]
 867:main.c        ****     midiMsg[2] = (val >> 7);	//MSB		
 2667              		.loc 1 867 0
 2668 0024 7B68     		ldr	r3, [r7, #4]
 2669 0026 DB11     		asrs	r3, r3, #7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 64


 2670 0028 DAB2     		uxtb	r2, r3
 2671 002a 0D4B     		ldr	r3, .L138
 2672 002c 9A70     		strb	r2, [r3, #2]
 868:main.c        **** 
 869:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
 870:main.c        ****     
 871:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 2673              		.loc 1 871 0
 2674 002e 0D4B     		ldr	r3, .L138+4
 2675 0030 1B78     		ldrb	r3, [r3]
 2676 0032 DBB2     		uxtb	r3, r3
 2677 0034 002B     		cmp	r3, #0
 2678 0036 09D0     		beq	.L137
 2679              		.loc 1 871 0 is_stmt 0 discriminator 1
 2680 0038 FFF7FEFF 		bl	USB_VBusPresent
 2681 003c 0346     		mov	r3, r0
 2682 003e 002B     		cmp	r3, #0
 2683 0040 04D0     		beq	.L137
 872:main.c        ****     {
 873:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 2684              		.loc 1 873 0 is_stmt 1
 2685 0042 0022     		movs	r2, #0
 2686 0044 0649     		ldr	r1, .L138
 2687 0046 0320     		movs	r0, #3
 2688 0048 FFF7FEFF 		bl	USB_PutUsbMidiIn
 2689              	.L137:
 874:main.c        ****     } 
 875:main.c        ****     midiSent += 4;
 2690              		.loc 1 875 0
 2691 004c 064B     		ldr	r3, .L138+8
 2692 004e 1B88     		ldrh	r3, [r3]
 2693 0050 0433     		adds	r3, r3, #4
 2694 0052 9AB2     		uxth	r2, r3
 2695 0054 044B     		ldr	r3, .L138+8
 2696 0056 1A80     		strh	r2, [r3]	@ movhi
 876:main.c        **** }
 2697              		.loc 1 876 0
 2698 0058 00BF     		nop
 2699 005a 0837     		adds	r7, r7, #8
 2700              		.cfi_def_cfa_offset 8
 2701 005c BD46     		mov	sp, r7
 2702              		.cfi_def_cfa_register 13
 2703              		@ sp needed
 2704 005e 80BD     		pop	{r7, pc}
 2705              	.L139:
 2706              		.align	2
 2707              	.L138:
 2708 0060 00000000 		.word	midiMsg
 2709 0064 00000000 		.word	USB_active
 2710 0068 00000000 		.word	midiSent
 2711              		.cfi_endproc
 2712              	.LFE78:
 2713              		.size	sendMIDIPitchBend, .-sendMIDIPitchBend
 2714              		.section	.text.sendMIDIControlChange,"ax",%progbits
 2715              		.align	2
 2716              		.global	sendMIDIControlChange
 2717              		.thumb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 65


 2718              		.thumb_func
 2719              		.type	sendMIDIControlChange, %function
 2720              	sendMIDIControlChange:
 2721              	.LFB79:
 877:main.c        **** 
 878:main.c        **** 
 879:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel)
 880:main.c        **** {
 2722              		.loc 1 880 0
 2723              		.cfi_startproc
 2724              		@ args = 0, pretend = 0, frame = 16
 2725              		@ frame_needed = 1, uses_anonymous_args = 0
 2726 0000 80B5     		push	{r7, lr}
 2727              		.cfi_def_cfa_offset 8
 2728              		.cfi_offset 7, -8
 2729              		.cfi_offset 14, -4
 2730 0002 84B0     		sub	sp, sp, #16
 2731              		.cfi_def_cfa_offset 24
 2732 0004 00AF     		add	r7, sp, #0
 2733              		.cfi_def_cfa_register 7
 2734 0006 F860     		str	r0, [r7, #12]
 2735 0008 B960     		str	r1, [r7, #8]
 2736 000a 7A60     		str	r2, [r7, #4]
 881:main.c        ****     midiMsg[0] = USB_MIDI_CONTROL_CHANGE + channel;
 2737              		.loc 1 881 0
 2738 000c 7B68     		ldr	r3, [r7, #4]
 2739 000e DBB2     		uxtb	r3, r3
 2740 0010 503B     		subs	r3, r3, #80
 2741 0012 DAB2     		uxtb	r2, r3
 2742 0014 114B     		ldr	r3, .L142
 2743 0016 1A70     		strb	r2, [r3]
 882:main.c        ****     midiMsg[1] = CCnum;
 2744              		.loc 1 882 0
 2745 0018 FB68     		ldr	r3, [r7, #12]
 2746 001a DAB2     		uxtb	r2, r3
 2747 001c 0F4B     		ldr	r3, .L142
 2748 001e 5A70     		strb	r2, [r3, #1]
 883:main.c        ****     midiMsg[2] = CCval;			
 2749              		.loc 1 883 0
 2750 0020 BB68     		ldr	r3, [r7, #8]
 2751 0022 DAB2     		uxtb	r2, r3
 2752 0024 0D4B     		ldr	r3, .L142
 2753 0026 9A70     		strb	r2, [r3, #2]
 884:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
 885:main.c        ****     
 886:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 2754              		.loc 1 886 0
 2755 0028 0D4B     		ldr	r3, .L142+4
 2756 002a 1B78     		ldrb	r3, [r3]
 2757 002c DBB2     		uxtb	r3, r3
 2758 002e 002B     		cmp	r3, #0
 2759 0030 09D0     		beq	.L141
 2760              		.loc 1 886 0 is_stmt 0 discriminator 1
 2761 0032 FFF7FEFF 		bl	USB_VBusPresent
 2762 0036 0346     		mov	r3, r0
 2763 0038 002B     		cmp	r3, #0
 2764 003a 04D0     		beq	.L141
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 66


 887:main.c        ****     {
 888:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 2765              		.loc 1 888 0 is_stmt 1
 2766 003c 0022     		movs	r2, #0
 2767 003e 0749     		ldr	r1, .L142
 2768 0040 0320     		movs	r0, #3
 2769 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 2770              	.L141:
 889:main.c        ****     } 
 890:main.c        ****     midiSent += 4;
 2771              		.loc 1 890 0
 2772 0046 074B     		ldr	r3, .L142+8
 2773 0048 1B88     		ldrh	r3, [r3]
 2774 004a 0433     		adds	r3, r3, #4
 2775 004c 9AB2     		uxth	r2, r3
 2776 004e 054B     		ldr	r3, .L142+8
 2777 0050 1A80     		strh	r2, [r3]	@ movhi
 891:main.c        **** }
 2778              		.loc 1 891 0
 2779 0052 00BF     		nop
 2780 0054 1037     		adds	r7, r7, #16
 2781              		.cfi_def_cfa_offset 8
 2782 0056 BD46     		mov	sp, r7
 2783              		.cfi_def_cfa_register 13
 2784              		@ sp needed
 2785 0058 80BD     		pop	{r7, pc}
 2786              	.L143:
 2787 005a 00BF     		.align	2
 2788              	.L142:
 2789 005c 00000000 		.word	midiMsg
 2790 0060 00000000 		.word	USB_active
 2791 0064 00000000 		.word	midiSent
 2792              		.cfi_endproc
 2793              	.LFE79:
 2794              		.size	sendMIDIControlChange, .-sendMIDIControlChange
 2795              		.global	iVtherm
 2796              		.bss
 2797 0131 000000   		.align	2
 2798              		.type	iVtherm, %object
 2799              		.size	iVtherm, 4
 2800              	iVtherm:
 2801 0134 00000000 		.space	4
 2802              		.global	__aeabi_i2f
 2803              		.section	.text.scanLinearResistor,"ax",%progbits
 2804              		.align	2
 2805              		.global	scanLinearResistor
 2806              		.thumb
 2807              		.thumb_func
 2808              		.type	scanLinearResistor, %function
 2809              	scanLinearResistor:
 2810              	.LFB80:
 892:main.c        **** 
 893:main.c        **** 
 894:main.c        **** int32 iVtherm = 0;
 895:main.c        **** 
 896:main.c        **** 
 897:main.c        **** void scanLinearResistor(void)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 67


 898:main.c        **** {
 2811              		.loc 1 898 0
 2812              		.cfi_startproc
 2813              		@ args = 0, pretend = 0, frame = 16
 2814              		@ frame_needed = 1, uses_anonymous_args = 0
 2815 0000 90B5     		push	{r4, r7, lr}
 2816              		.cfi_def_cfa_offset 12
 2817              		.cfi_offset 4, -12
 2818              		.cfi_offset 7, -8
 2819              		.cfi_offset 14, -4
 2820 0002 85B0     		sub	sp, sp, #20
 2821              		.cfi_def_cfa_offset 32
 2822 0004 00AF     		add	r7, sp, #0
 2823              		.cfi_def_cfa_register 7
 899:main.c        ****         int32 iVref = 0;
 2824              		.loc 1 899 0
 2825 0006 0023     		movs	r3, #0
 2826 0008 BB60     		str	r3, [r7, #8]
 900:main.c        ****         int32 iRes = 0;
 2827              		.loc 1 900 0
 2828 000a 0023     		movs	r3, #0
 2829 000c FB60     		str	r3, [r7, #12]
 901:main.c        ****         int32 offset = 0;
 2830              		.loc 1 901 0
 2831 000e 0023     		movs	r3, #0
 2832 0010 7B60     		str	r3, [r7, #4]
 902:main.c        ****     
 903:main.c        ****         ExtMUXS0_Write(whichLinearSensor & 1);
 2833              		.loc 1 903 0
 2834 0012 3F4B     		ldr	r3, .L147
 2835 0014 1B68     		ldr	r3, [r3]
 2836 0016 DBB2     		uxtb	r3, r3
 2837 0018 03F00103 		and	r3, r3, #1
 2838 001c DBB2     		uxtb	r3, r3
 2839 001e 1846     		mov	r0, r3
 2840 0020 FFF7FEFF 		bl	ExtMUXS0_Write
 904:main.c        ****         ExtMUXS1_Write((whichLinearSensor & 2)>>1);
 2841              		.loc 1 904 0
 2842 0024 3A4B     		ldr	r3, .L147
 2843 0026 1B68     		ldr	r3, [r3]
 2844 0028 03F00203 		and	r3, r3, #2
 2845 002c 5B10     		asrs	r3, r3, #1
 2846 002e DBB2     		uxtb	r3, r3
 2847 0030 1846     		mov	r0, r3
 2848 0032 FFF7FEFF 		bl	ExtMUXS1_Write
 905:main.c        **** 
 906:main.c        ****         scanPart = 0;
 2849              		.loc 1 906 0
 2850 0036 374B     		ldr	r3, .L147+4
 2851 0038 0022     		movs	r2, #0
 2852 003a 1A60     		str	r2, [r3]
 907:main.c        ****         //if (scanPart == 0)
 908:main.c        ****         {
 909:main.c        ****             AMux_1_FastSelect(scanPart);
 2853              		.loc 1 909 0
 2854 003c 354B     		ldr	r3, .L147+4
 2855 003e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 68


 2856 0040 DBB2     		uxtb	r3, r3
 2857 0042 1846     		mov	r0, r3
 2858 0044 FFF7FEFF 		bl	AMux_1_FastSelect
 910:main.c        ****             CyDelayUs(4); 
 2859              		.loc 1 910 0
 2860 0048 0420     		movs	r0, #4
 2861 004a FFF7FEFF 		bl	CyDelayUs
 911:main.c        ****             ADC_1_StartConvert();
 2862              		.loc 1 911 0
 2863 004e FFF7FEFF 		bl	ADC_1_StartConvert
 912:main.c        ****             ADC_1_IsEndConversion(ADC_1_WAIT_FOR_RESULT);
 2864              		.loc 1 912 0
 2865 0052 0020     		movs	r0, #0
 2866 0054 FFF7FEFF 		bl	ADC_1_IsEndConversion
 913:main.c        ****             iVtherm = ADC_1_GetResult32();
 2867              		.loc 1 913 0
 2868 0058 FFF7FEFF 		bl	ADC_1_GetResult32
 2869 005c 0246     		mov	r2, r0
 2870 005e 2E4B     		ldr	r3, .L147+8
 2871 0060 1A60     		str	r2, [r3]
 914:main.c        ****             
 915:main.c        ****         }
 916:main.c        ****         scanPart = 1;
 2872              		.loc 1 916 0
 2873 0062 2C4B     		ldr	r3, .L147+4
 2874 0064 0122     		movs	r2, #1
 2875 0066 1A60     		str	r2, [r3]
 917:main.c        ****        // else
 918:main.c        ****         {
 919:main.c        **** 
 920:main.c        ****             AMux_1_FastSelect(scanPart);
 2876              		.loc 1 920 0
 2877 0068 2A4B     		ldr	r3, .L147+4
 2878 006a 1B68     		ldr	r3, [r3]
 2879 006c DBB2     		uxtb	r3, r3
 2880 006e 1846     		mov	r0, r3
 2881 0070 FFF7FEFF 		bl	AMux_1_FastSelect
 921:main.c        ****             CyDelayUs(4); 
 2882              		.loc 1 921 0
 2883 0074 0420     		movs	r0, #4
 2884 0076 FFF7FEFF 		bl	CyDelayUs
 922:main.c        ****             ADC_1_StartConvert();
 2885              		.loc 1 922 0
 2886 007a FFF7FEFF 		bl	ADC_1_StartConvert
 923:main.c        ****             ADC_1_IsEndConversion(ADC_1_WAIT_FOR_RESULT);
 2887              		.loc 1 923 0
 2888 007e 0020     		movs	r0, #0
 2889 0080 FFF7FEFF 		bl	ADC_1_IsEndConversion
 924:main.c        ****             iVref = ADC_1_GetResult32();
 2890              		.loc 1 924 0
 2891 0084 FFF7FEFF 		bl	ADC_1_GetResult32
 2892 0088 B860     		str	r0, [r7, #8]
 925:main.c        **** 
 926:main.c        ****             iVref =   iVref - offset;
 2893              		.loc 1 926 0
 2894 008a BA68     		ldr	r2, [r7, #8]
 2895 008c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 69


 2896 008e D31A     		subs	r3, r2, r3
 2897 0090 BB60     		str	r3, [r7, #8]
 927:main.c        ****             
 928:main.c        ****             if ((iVref > 1000) && (iVtherm < 1000))
 2898              		.loc 1 928 0
 2899 0092 BB68     		ldr	r3, [r7, #8]
 2900 0094 B3F57A7F 		cmp	r3, #1000
 2901 0098 08DD     		ble	.L145
 2902              		.loc 1 928 0 is_stmt 0 discriminator 1
 2903 009a 1F4B     		ldr	r3, .L147+8
 2904 009c 1B68     		ldr	r3, [r3]
 2905 009e B3F57A7F 		cmp	r3, #1000
 2906 00a2 03DA     		bge	.L145
 929:main.c        ****             {
 930:main.c        ****                 iRes = 65535;
 2907              		.loc 1 930 0 is_stmt 1
 2908 00a4 4FF6FF73 		movw	r3, #65535
 2909 00a8 FB60     		str	r3, [r7, #12]
 2910 00aa 18E0     		b	.L146
 2911              	.L145:
 931:main.c        ****             }
 932:main.c        ****             else
 933:main.c        ****             {
 934:main.c        ****                 iRes = (int32)(((float)iVref / (float)iVtherm) * 30000.0f);
 2912              		.loc 1 934 0
 2913 00ac B868     		ldr	r0, [r7, #8]
 2914 00ae FFF7FEFF 		bl	__aeabi_i2f
 2915 00b2 0446     		mov	r4, r0
 2916 00b4 184B     		ldr	r3, .L147+8
 2917 00b6 1B68     		ldr	r3, [r3]
 2918 00b8 1846     		mov	r0, r3
 2919 00ba FFF7FEFF 		bl	__aeabi_i2f
 2920 00be 0346     		mov	r3, r0
 2921 00c0 1946     		mov	r1, r3
 2922 00c2 2046     		mov	r0, r4
 2923 00c4 FFF7FEFF 		bl	__aeabi_fdiv
 2924 00c8 0346     		mov	r3, r0
 2925 00ca 1449     		ldr	r1, .L147+12
 2926 00cc 1846     		mov	r0, r3
 2927 00ce FFF7FEFF 		bl	__aeabi_fmul
 2928 00d2 0346     		mov	r3, r0
 2929 00d4 1846     		mov	r0, r3
 2930 00d6 FFF7FEFF 		bl	__aeabi_f2iz
 2931 00da 0346     		mov	r3, r0
 2932 00dc FB60     		str	r3, [r7, #12]
 2933              	.L146:
 935:main.c        ****             }
 936:main.c        ****             linearPotValue32Bit[whichLinearSensor] = iRes;
 2934              		.loc 1 936 0
 2935 00de 0C4B     		ldr	r3, .L147
 2936 00e0 1B68     		ldr	r3, [r3]
 2937 00e2 0F49     		ldr	r1, .L147+16
 2938 00e4 FA68     		ldr	r2, [r7, #12]
 2939 00e6 41F82320 		str	r2, [r1, r3, lsl #2]
 937:main.c        ****             whichLinearSensor = (whichLinearSensor + 1) & 3;
 2940              		.loc 1 937 0
 2941 00ea 094B     		ldr	r3, .L147
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 70


 2942 00ec 1B68     		ldr	r3, [r3]
 2943 00ee 0133     		adds	r3, r3, #1
 2944 00f0 03F00303 		and	r3, r3, #3
 2945 00f4 064A     		ldr	r2, .L147
 2946 00f6 1360     		str	r3, [r2]
 938:main.c        ****         }
 939:main.c        ****         scanPart = (scanPart + 1) & 1;
 2947              		.loc 1 939 0
 2948 00f8 064B     		ldr	r3, .L147+4
 2949 00fa 1B68     		ldr	r3, [r3]
 2950 00fc 0133     		adds	r3, r3, #1
 2951 00fe 03F00103 		and	r3, r3, #1
 2952 0102 044A     		ldr	r2, .L147+4
 2953 0104 1360     		str	r3, [r2]
 940:main.c        ****         //scanPart = 0;
 941:main.c        **** 
 942:main.c        **** }
 2954              		.loc 1 942 0
 2955 0106 00BF     		nop
 2956 0108 1437     		adds	r7, r7, #20
 2957              		.cfi_def_cfa_offset 12
 2958 010a BD46     		mov	sp, r7
 2959              		.cfi_def_cfa_register 13
 2960              		@ sp needed
 2961 010c 90BD     		pop	{r4, r7, pc}
 2962              	.L148:
 2963 010e 00BF     		.align	2
 2964              	.L147:
 2965 0110 00000000 		.word	whichLinearSensor
 2966 0114 00000000 		.word	scanPart
 2967 0118 00000000 		.word	iVtherm
 2968 011c 0060EA46 		.word	1189765120
 2969 0120 00000000 		.word	linearPotValue32Bit
 2970              		.cfi_endproc
 2971              	.LFE80:
 2972              		.size	scanLinearResistor, .-scanLinearResistor
 2973              		.section	.text.DmaTxConfiguration,"ax",%progbits
 2974              		.align	2
 2975              		.global	DmaTxConfiguration
 2976              		.thumb
 2977              		.thumb_func
 2978              		.type	DmaTxConfiguration, %function
 2979              	DmaTxConfiguration:
 2980              	.LFB81:
 943:main.c        **** 
 944:main.c        **** void DmaTxConfiguration()
 945:main.c        **** {
 2981              		.loc 1 945 0
 2982              		.cfi_startproc
 2983              		@ args = 0, pretend = 0, frame = 0
 2984              		@ frame_needed = 1, uses_anonymous_args = 0
 2985 0000 80B5     		push	{r7, lr}
 2986              		.cfi_def_cfa_offset 8
 2987              		.cfi_offset 7, -8
 2988              		.cfi_offset 14, -4
 2989 0002 00AF     		add	r7, sp, #0
 2990              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 71


 946:main.c        ****     /* Init DMA, 1 byte bursts, each burst requires a request */ 
 947:main.c        ****     txChannel = DMA_1_TX_DmaInitialize(DMA_TX_BYTES_PER_BURST, DMA_TX_REQUEST_PER_BURST, 
 2991              		.loc 1 947 0
 2992 0004 4FF48043 		mov	r3, #16384
 2993 0008 41F6FF72 		movw	r2, #8191
 2994 000c 0121     		movs	r1, #1
 2995 000e 0120     		movs	r0, #1
 2996 0010 FFF7FEFF 		bl	DMA_1_TX_DmaInitialize
 2997 0014 0346     		mov	r3, r0
 2998 0016 1A46     		mov	r2, r3
 2999 0018 124B     		ldr	r3, .L150
 3000 001a 1A70     		strb	r2, [r3]
 948:main.c        ****                                         HI16(DMA_TX_SRC_BASE), HI16(DMA_TX_DST_BASE));
 949:main.c        **** 
 950:main.c        ****     txTD = CyDmaTdAllocate();
 3001              		.loc 1 950 0
 3002 001c FFF7FEFF 		bl	CyDmaTdAllocate
 3003 0020 0346     		mov	r3, r0
 3004 0022 1A46     		mov	r2, r3
 3005 0024 104B     		ldr	r3, .L150+4
 3006 0026 1A70     		strb	r2, [r3]
 951:main.c        **** 
 952:main.c        ****     /* Configure this Td as follows:
 953:main.c        ****     *  - Increment the source address, but not the destination address   
 954:main.c        ****     */
 955:main.c        ****     CyDmaTdSetConfiguration(txTD, BUFFER_SIZE, CY_DMA_DISABLE_TD, TD_INC_SRC_ADR);
 3007              		.loc 1 955 0
 3008 0028 0F4B     		ldr	r3, .L150+4
 3009 002a 1B78     		ldrb	r3, [r3]
 3010 002c D8B2     		uxtb	r0, r3
 3011 002e 0123     		movs	r3, #1
 3012 0030 FE22     		movs	r2, #254
 3013 0032 1021     		movs	r1, #16
 3014 0034 FFF7FEFF 		bl	CyDmaTdSetConfiguration
 956:main.c        **** 
 957:main.c        ****     /* From the memory to the SPIM */
 958:main.c        ****     CyDmaTdSetAddress(txTD, LO16((uint32)txBuffer), LO16((uint32) SPIM_1_TXDATA_PTR));
 3015              		.loc 1 958 0
 3016 0038 0B4B     		ldr	r3, .L150+4
 3017 003a 1B78     		ldrb	r3, [r3]
 3018 003c DBB2     		uxtb	r3, r3
 3019 003e 0B4A     		ldr	r2, .L150+8
 3020 0040 91B2     		uxth	r1, r2
 3021 0042 46F24742 		movw	r2, #25671
 3022 0046 1846     		mov	r0, r3
 3023 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
 959:main.c        ****     
 960:main.c        ****     /* Associate the TD with the channel */
 961:main.c        ****     CyDmaChSetInitialTd(txChannel, txTD); 
 3024              		.loc 1 961 0
 3025 004c 054B     		ldr	r3, .L150
 3026 004e 1B78     		ldrb	r3, [r3]
 3027 0050 DAB2     		uxtb	r2, r3
 3028 0052 054B     		ldr	r3, .L150+4
 3029 0054 1B78     		ldrb	r3, [r3]
 3030 0056 DBB2     		uxtb	r3, r3
 3031 0058 1946     		mov	r1, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 72


 3032 005a 1046     		mov	r0, r2
 3033 005c FFF7FEFF 		bl	CyDmaChSetInitialTd
 962:main.c        **** }    
 3034              		.loc 1 962 0
 3035 0060 00BF     		nop
 3036 0062 80BD     		pop	{r7, pc}
 3037              	.L151:
 3038              		.align	2
 3039              	.L150:
 3040 0064 00000000 		.word	txChannel
 3041 0068 00000000 		.word	txTD
 3042 006c 00000000 		.word	txBuffer
 3043              		.cfi_endproc
 3044              	.LFE81:
 3045              		.size	DmaTxConfiguration, .-DmaTxConfiguration
 3046              		.section	.text.DmaRxConfiguration,"ax",%progbits
 3047              		.align	2
 3048              		.global	DmaRxConfiguration
 3049              		.thumb
 3050              		.thumb_func
 3051              		.type	DmaRxConfiguration, %function
 3052              	DmaRxConfiguration:
 3053              	.LFB82:
 963:main.c        **** 
 964:main.c        **** void DmaRxConfiguration()
 965:main.c        **** { 
 3054              		.loc 1 965 0
 3055              		.cfi_startproc
 3056              		@ args = 0, pretend = 0, frame = 0
 3057              		@ frame_needed = 1, uses_anonymous_args = 0
 3058 0000 80B5     		push	{r7, lr}
 3059              		.cfi_def_cfa_offset 8
 3060              		.cfi_offset 7, -8
 3061              		.cfi_offset 14, -4
 3062 0002 00AF     		add	r7, sp, #0
 3063              		.cfi_def_cfa_register 7
 966:main.c        ****     /* Init DMA, 1 byte bursts, each burst requires a request */ 
 967:main.c        ****     rxChannel = DMA_1_RX_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 3064              		.loc 1 967 0
 3065 0004 41F6FF73 		movw	r3, #8191
 3066 0008 4FF48042 		mov	r2, #16384
 3067 000c 0121     		movs	r1, #1
 3068 000e 0120     		movs	r0, #1
 3069 0010 FFF7FEFF 		bl	DMA_1_RX_DmaInitialize
 3070 0014 0346     		mov	r3, r0
 3071 0016 1A46     		mov	r2, r3
 3072 0018 124B     		ldr	r3, .L153
 3073 001a 1A70     		strb	r2, [r3]
 968:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
 969:main.c        **** 
 970:main.c        ****     rxTD = CyDmaTdAllocate();
 3074              		.loc 1 970 0
 3075 001c FFF7FEFF 		bl	CyDmaTdAllocate
 3076 0020 0346     		mov	r3, r0
 3077 0022 1A46     		mov	r2, r3
 3078 0024 104B     		ldr	r3, .L153+4
 3079 0026 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 73


 971:main.c        ****     
 972:main.c        ****     /* Configure this Td as follows:
 973:main.c        ****     *  - Increment the destination address, but not the source address
 974:main.c        ****     */
 975:main.c        ****     CyDmaTdSetConfiguration(rxTD, BUFFER_SIZE, CY_DMA_DISABLE_TD, TD_INC_DST_ADR);
 3080              		.loc 1 975 0
 3081 0028 0F4B     		ldr	r3, .L153+4
 3082 002a 1B78     		ldrb	r3, [r3]
 3083 002c D8B2     		uxtb	r0, r3
 3084 002e 0223     		movs	r3, #2
 3085 0030 FE22     		movs	r2, #254
 3086 0032 1021     		movs	r1, #16
 3087 0034 FFF7FEFF 		bl	CyDmaTdSetConfiguration
 976:main.c        **** 
 977:main.c        ****     /* From the SPIM to the memory */
 978:main.c        ****     CyDmaTdSetAddress(rxTD, LO16((uint32)SPIM_1_RXDATA_PTR), LO16((uint32)rxBuffer));
 3088              		.loc 1 978 0
 3089 0038 0B4B     		ldr	r3, .L153+4
 3090 003a 1B78     		ldrb	r3, [r3]
 3091 003c DBB2     		uxtb	r3, r3
 3092 003e 0B4A     		ldr	r2, .L153+8
 3093 0040 92B2     		uxth	r2, r2
 3094 0042 46F25741 		movw	r1, #25687
 3095 0046 1846     		mov	r0, r3
 3096 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
 979:main.c        **** 
 980:main.c        ****     /* Associate the TD with the channel */
 981:main.c        ****     CyDmaChSetInitialTd(rxChannel, rxTD);
 3097              		.loc 1 981 0
 3098 004c 054B     		ldr	r3, .L153
 3099 004e 1B78     		ldrb	r3, [r3]
 3100 0050 DAB2     		uxtb	r2, r3
 3101 0052 054B     		ldr	r3, .L153+4
 3102 0054 1B78     		ldrb	r3, [r3]
 3103 0056 DBB2     		uxtb	r3, r3
 3104 0058 1946     		mov	r1, r3
 3105 005a 1046     		mov	r0, r2
 3106 005c FFF7FEFF 		bl	CyDmaChSetInitialTd
 982:main.c        **** }
 3107              		.loc 1 982 0
 3108 0060 00BF     		nop
 3109 0062 80BD     		pop	{r7, pc}
 3110              	.L154:
 3111              		.align	2
 3112              	.L153:
 3113 0064 00000000 		.word	rxChannel
 3114 0068 00000000 		.word	rxTD
 3115 006c 00000000 		.word	rxBuffer
 3116              		.cfi_endproc
 3117              	.LFE82:
 3118              		.size	DmaRxConfiguration, .-DmaRxConfiguration
 3119              		.section	.text.I2C_MasterWriteBlocking,"ax",%progbits
 3120              		.align	2
 3121              		.global	I2C_MasterWriteBlocking
 3122              		.thumb
 3123              		.thumb_func
 3124              		.type	I2C_MasterWriteBlocking, %function
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 74


 3125              	I2C_MasterWriteBlocking:
 3126              	.LFB83:
 983:main.c        **** 
 984:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode)
 985:main.c        **** {
 3127              		.loc 1 985 0
 3128              		.cfi_startproc
 3129              		@ args = 0, pretend = 0, frame = 16
 3130              		@ frame_needed = 1, uses_anonymous_args = 0
 3131 0000 80B5     		push	{r7, lr}
 3132              		.cfi_def_cfa_offset 8
 3133              		.cfi_offset 7, -8
 3134              		.cfi_offset 14, -4
 3135 0002 84B0     		sub	sp, sp, #16
 3136              		.cfi_def_cfa_offset 24
 3137 0004 00AF     		add	r7, sp, #0
 3138              		.cfi_def_cfa_register 7
 3139 0006 0346     		mov	r3, r0
 3140 0008 FB71     		strb	r3, [r7, #7]
 3141 000a 0B46     		mov	r3, r1	@ movhi
 3142 000c BB80     		strh	r3, [r7, #4]	@ movhi
 3143 000e 1346     		mov	r3, r2
 3144 0010 BB71     		strb	r3, [r7, #6]
 986:main.c        ****     uint8 volatile status;
 987:main.c        ****     uint32_t timeout = 50000;
 3145              		.loc 1 987 0
 3146 0012 4CF25033 		movw	r3, #50000
 3147 0016 FB60     		str	r3, [r7, #12]
 988:main.c        ****     status = I2C_1_MasterClearStatus();
 3148              		.loc 1 988 0
 3149 0018 FFF7FEFF 		bl	I2C_1_MasterClearStatus
 3150 001c 0346     		mov	r3, r0
 3151 001e FB72     		strb	r3, [r7, #11]
 989:main.c        ****     if(!(status & I2C_1_MSTAT_ERR_XFER))
 3152              		.loc 1 989 0
 3153 0020 FB7A     		ldrb	r3, [r7, #11]
 3154 0022 DBB2     		uxtb	r3, r3
 3155 0024 5BB2     		sxtb	r3, r3
 3156 0026 002B     		cmp	r3, #0
 3157 0028 29DB     		blt	.L156
 990:main.c        ****     {
 991:main.c        ****         status = I2C_1_MasterWriteBuf(i2CAddr, (uint8 *)&I2Cbuff1, nbytes,
 3158              		.loc 1 991 0
 3159 002a BB88     		ldrh	r3, [r7, #4]	@ movhi
 3160 002c DAB2     		uxtb	r2, r3
 3161 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 3162 0030 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 3163 0032 1649     		ldr	r1, .L161
 3164 0034 FFF7FEFF 		bl	I2C_1_MasterWriteBuf
 3165 0038 0346     		mov	r3, r0
 3166 003a FB72     		strb	r3, [r7, #11]
 992:main.c        ****                                      mode);
 993:main.c        ****         if(status == I2C_1_MSTR_NO_ERROR)
 3167              		.loc 1 993 0
 3168 003c FB7A     		ldrb	r3, [r7, #11]
 3169 003e DBB2     		uxtb	r3, r3
 3170 0040 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 75


 3171 0042 1AD1     		bne	.L157
 3172              	.L159:
 994:main.c        ****         {
 995:main.c        ****             /* wait for write complete and no error */
 996:main.c        ****             do
 997:main.c        ****             {
 998:main.c        ****                 status = I2C_1_MasterStatus();
 3173              		.loc 1 998 0
 3174 0044 FFF7FEFF 		bl	I2C_1_MasterStatus
 3175 0048 0346     		mov	r3, r0
 3176 004a FB72     		strb	r3, [r7, #11]
 999:main.c        ****                 timeout--;
 3177              		.loc 1 999 0
 3178 004c FB68     		ldr	r3, [r7, #12]
 3179 004e 013B     		subs	r3, r3, #1
 3180 0050 FB60     		str	r3, [r7, #12]
1000:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 3181              		.loc 1 1000 0
 3182 0052 FB7A     		ldrb	r3, [r7, #11]
1001:main.c        ****                 {
1002:main.c        ****                     //I2C_reset();
1003:main.c        ****                 }
1004:main.c        ****                 if (timeout == 0)
 3183              		.loc 1 1004 0
 3184 0054 FB68     		ldr	r3, [r7, #12]
 3185 0056 002B     		cmp	r3, #0
 3186 0058 01D1     		bne	.L158
1005:main.c        ****                 {
1006:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 3187              		.loc 1 1006 0
 3188 005a 8023     		movs	r3, #128
 3189 005c FB72     		strb	r3, [r7, #11]
 3190              	.L158:
1007:main.c        ****                     //I2C_reset();
1008:main.c        ****                 }
1009:main.c        ****                 /*
1010:main.c        ****                 if (status == 0)
1011:main.c        ****                 {
1012:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
1013:main.c        ****                     I2C_reset();
1014:main.c        ****                 }
1015:main.c        ****                 */
1016:main.c        ****             } while(((status & (I2C_1_MSTAT_WR_CMPLT | I2C_1_MSTAT_ERR_XFER)) == 0u) && (status != 
 3191              		.loc 1 1016 0
 3192 005e FB7A     		ldrb	r3, [r7, #11]
 3193 0060 DBB2     		uxtb	r3, r3
 3194 0062 03F08203 		and	r3, r3, #130
 3195 0066 002B     		cmp	r3, #0
 3196 0068 09D1     		bne	.L156
 3197              		.loc 1 1016 0 is_stmt 0 discriminator 1
 3198 006a FB7A     		ldrb	r3, [r7, #11]
 3199 006c DBB2     		uxtb	r3, r3
 3200 006e 002B     		cmp	r3, #0
 3201 0070 05D0     		beq	.L156
 3202              		.loc 1 1016 0 discriminator 2
 3203 0072 FB68     		ldr	r3, [r7, #12]
 3204 0074 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 76


 3205 0076 E5D1     		bne	.L159
 3206 0078 01E0     		b	.L156
 3207              	.L157:
1017:main.c        ****         }
1018:main.c        ****         else
1019:main.c        ****         {
1020:main.c        ****             /* translate from I2CM_MasterWriteBuf() error output to
1021:main.c        ****             *  I2CM_MasterStatus() error output */
1022:main.c        ****             status = I2C_1_MSTAT_ERR_XFER;
 3208              		.loc 1 1022 0 is_stmt 1
 3209 007a 8023     		movs	r3, #128
 3210 007c FB72     		strb	r3, [r7, #11]
 3211              	.L156:
1023:main.c        ****             //I2C_reset();
1024:main.c        ****         } 
1025:main.c        ****     }  
1026:main.c        ****     return status;
 3212              		.loc 1 1026 0
 3213 007e FB7A     		ldrb	r3, [r7, #11]
 3214 0080 DBB2     		uxtb	r3, r3
1027:main.c        **** }
 3215              		.loc 1 1027 0
 3216 0082 1846     		mov	r0, r3
 3217 0084 1037     		adds	r7, r7, #16
 3218              		.cfi_def_cfa_offset 8
 3219 0086 BD46     		mov	sp, r7
 3220              		.cfi_def_cfa_register 13
 3221              		@ sp needed
 3222 0088 80BD     		pop	{r7, pc}
 3223              	.L162:
 3224 008a 00BF     		.align	2
 3225              	.L161:
 3226 008c 00000000 		.word	I2Cbuff1
 3227              		.cfi_endproc
 3228              	.LFE83:
 3229              		.size	I2C_MasterWriteBlocking, .-I2C_MasterWriteBlocking
 3230              		.section	.text.handleNotes,"ax",%progbits
 3231              		.align	2
 3232              		.global	handleNotes
 3233              		.thumb
 3234              		.thumb_func
 3235              		.type	handleNotes, %function
 3236              	handleNotes:
 3237              	.LFB84:
1028:main.c        **** 
1029:main.c        **** 
1030:main.c        **** void handleNotes(int note, int velocity, int string)
1031:main.c        **** {
 3238              		.loc 1 1031 0
 3239              		.cfi_startproc
 3240              		@ args = 0, pretend = 0, frame = 32
 3241              		@ frame_needed = 1, uses_anonymous_args = 0
 3242 0000 90B5     		push	{r4, r7, lr}
 3243              		.cfi_def_cfa_offset 12
 3244              		.cfi_offset 4, -12
 3245              		.cfi_offset 7, -8
 3246              		.cfi_offset 14, -4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 77


 3247 0002 89B0     		sub	sp, sp, #36
 3248              		.cfi_def_cfa_offset 48
 3249 0004 00AF     		add	r7, sp, #0
 3250              		.cfi_def_cfa_register 7
 3251 0006 F860     		str	r0, [r7, #12]
 3252 0008 B960     		str	r1, [r7, #8]
 3253 000a 7A60     		str	r2, [r7, #4]
1032:main.c        ****     if (velocity > 0)
 3254              		.loc 1 1032 0
 3255 000c BB68     		ldr	r3, [r7, #8]
 3256 000e 002B     		cmp	r3, #0
 3257 0010 25DD     		ble	.L164
 3258              	.LBB7:
1033:main.c        ****     {
1034:main.c        ****         //velocity = (((sqrtf((float)velocity) * 0.00001525878903f) - .0239372430f) * 130.114584436
1035:main.c        ****         float tempVel = (float)velocity;
 3259              		.loc 1 1035 0
 3260 0012 B868     		ldr	r0, [r7, #8]
 3261 0014 FFF7FEFF 		bl	__aeabi_i2f
 3262 0018 0346     		mov	r3, r0
 3263 001a 3B61     		str	r3, [r7, #16]	@ float
1036:main.c        ****         tempVel = tempVel * 0.00001525878903f;
 3264              		.loc 1 1036 0
 3265 001c 4FF05E51 		mov	r1, #931135488
 3266 0020 3869     		ldr	r0, [r7, #16]	@ float
 3267 0022 FFF7FEFF 		bl	__aeabi_fmul
 3268 0026 0346     		mov	r3, r0
 3269 0028 3B61     		str	r3, [r7, #16]	@ float
1037:main.c        ****         tempVel = sqrtf(tempVel);
 3270              		.loc 1 1037 0
 3271 002a 3869     		ldr	r0, [r7, #16]	@ float
 3272 002c FFF7FEFF 		bl	sqrtf
 3273 0030 3861     		str	r0, [r7, #16]	@ float
1038:main.c        ****         tempVel = tempVel - 0.0239372430f;
 3274              		.loc 1 1038 0
 3275 0032 8049     		ldr	r1, .L179
 3276 0034 3869     		ldr	r0, [r7, #16]	@ float
 3277 0036 FFF7FEFF 		bl	__aeabi_fsub
 3278 003a 0346     		mov	r3, r0
 3279 003c 3B61     		str	r3, [r7, #16]	@ float
1039:main.c        ****         tempVel = tempVel * 130.114584436252734f;
 3280              		.loc 1 1039 0
 3281 003e 7E49     		ldr	r1, .L179+4
 3282 0040 3869     		ldr	r0, [r7, #16]	@ float
 3283 0042 FFF7FEFF 		bl	__aeabi_fmul
 3284 0046 0346     		mov	r3, r0
 3285 0048 3B61     		str	r3, [r7, #16]	@ float
1040:main.c        ****         velocity = (int)tempVel;
 3286              		.loc 1 1040 0
 3287 004a 3869     		ldr	r0, [r7, #16]	@ float
 3288 004c FFF7FEFF 		bl	__aeabi_f2iz
 3289 0050 0346     		mov	r3, r0
 3290 0052 BB60     		str	r3, [r7, #8]
1041:main.c        ****         if (velocity > 127)
 3291              		.loc 1 1041 0
 3292 0054 BB68     		ldr	r3, [r7, #8]
 3293 0056 7F2B     		cmp	r3, #127
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 78


 3294 0058 01DD     		ble	.L164
1042:main.c        ****         {
1043:main.c        ****             velocity = 127;
 3295              		.loc 1 1043 0
 3296 005a 7F23     		movs	r3, #127
 3297 005c BB60     		str	r3, [r7, #8]
 3298              	.L164:
 3299              	.LBE7:
1044:main.c        ****         }
1045:main.c        ****     }
1046:main.c        ****     if (polyMode)
 3300              		.loc 1 1046 0
 3301 005e 774B     		ldr	r3, .L179+8
 3302 0060 1B68     		ldr	r3, [r3]
 3303 0062 002B     		cmp	r3, #0
 3304 0064 07D0     		beq	.L165
1047:main.c        ****     {
1048:main.c        ****         sendMIDINoteOn(note, velocity, string+1);
 3305              		.loc 1 1048 0
 3306 0066 7B68     		ldr	r3, [r7, #4]
 3307 0068 0133     		adds	r3, r3, #1
 3308 006a 1A46     		mov	r2, r3
 3309 006c B968     		ldr	r1, [r7, #8]
 3310 006e F868     		ldr	r0, [r7, #12]
 3311 0070 FFF7FEFF 		bl	sendMIDINoteOn
1049:main.c        ****     }
1050:main.c        ****     else
1051:main.c        ****     {
1052:main.c        ****         int loudestSoundingNote = 0;
1053:main.c        ****         if (velocity > 0)
1054:main.c        ****         {
1055:main.c        ****             //turn off any currently sounding notes
1056:main.c        ****             for (int i = 0; i < 4; i++)
1057:main.c        ****             {
1058:main.c        ****                 if (stringStates[i][1] > loudestSoundingNote)
1059:main.c        ****                 {
1060:main.c        ****                     loudestSoundingNote = stringStates[i][1];
1061:main.c        ****                     loudestString = i;
1062:main.c        ****                 }
1063:main.c        ****             }
1064:main.c        ****             //make sure if there is a sounding note that this one is not much lower velocity
1065:main.c        ****             //(would maybe mean this is just sympathetic bridge resonance and shouldn't interrupt t
1066:main.c        ****             // maybe need more complexity in time since attack?
1067:main.c        ****             if ((velocity >= (loudestSoundingNote - 25)) || (velocity > 35))
1068:main.c        ****             {
1069:main.c        ****                 for (int i = 0; i < 4; i++)
1070:main.c        ****                 {
1071:main.c        ****                     if (stringStates[i][0] >= 0)
1072:main.c        ****                     {
1073:main.c        **** 
1074:main.c        ****                         sendMIDINoteOn(stringStates[i][0], 0, 0);
1075:main.c        ****                         stringStates[i][0] = -1;
1076:main.c        ****                         stringStates[i][1] = 0;
1077:main.c        ****                     }
1078:main.c        ****                     openStringCount[i] = 10;
1079:main.c        ****                 }
1080:main.c        ****                 timeSinceLastAttack = 0;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 79


1081:main.c        ****                 stringStates[string][0] = note;
1082:main.c        ****                 stringStates[string][1] = velocity;
1083:main.c        ****                  pitchFreeze[string] = 0;
1084:main.c        ****                 sendMIDINoteOn(note, velocity, 0);
1085:main.c        ****                  LHMuteCounter[i] = 0;
1086:main.c        ****                  LHMute[i] = 0;
1087:main.c        ****             }
1088:main.c        ****             else
1089:main.c        ****             {
1090:main.c        ****                 skippedNotes[skipPointer][0] = note;
1091:main.c        ****                 skippedNotes[skipPointer][1] = velocity;
1092:main.c        ****                 skippedNotes[skipPointer][2] = loudestSoundingNote;
1093:main.c        ****                 skippedNotes[skipPointer][3] = loudestString;
1094:main.c        ****                 skippedNotes[skipPointer][4] = string;
1095:main.c        ****                 skipPointer = (skipPointer + 1) & 31;
1096:main.c        ****             }
1097:main.c        ****             #if 0
1098:main.c        ****             else if (timeSinceLastAttack > 500)
1099:main.c        ****             {
1100:main.c        ****                 for (int i = 0; i < 4; i++)
1101:main.c        ****                 {
1102:main.c        ****                     if (stringStates[i][0] >= 0)
1103:main.c        ****                     {
1104:main.c        **** 
1105:main.c        ****                         sendMIDINoteOn(stringStates[i][0], 0, 0);
1106:main.c        ****                         stringStates[i][0] = -1;
1107:main.c        ****                     }
1108:main.c        ****                     openStringCount[i] = 10;
1109:main.c        ****                 }
1110:main.c        ****                 timeSinceLastAttack = 0;
1111:main.c        ****                 stringStates[string][0] = note;
1112:main.c        ****                 stringStates[string][1] = velocity;
1113:main.c        ****                  pitchFreeze[string] = 0;
1114:main.c        ****                 sendMIDINoteOn(note, velocity, 0);
1115:main.c        ****             
1116:main.c        ****             }
1117:main.c        ****             #endif
1118:main.c        ****         }
1119:main.c        ****         else
1120:main.c        ****         {
1121:main.c        ****             if (stringStates[string][0] > 0)
1122:main.c        ****             {
1123:main.c        ****                 sendMIDINoteOn(stringStates[string][0], 0, 0);
1124:main.c        ****             }
1125:main.c        ****             stringStates[string][0] = -1;
1126:main.c        ****             stringStates[string][1] = 0;
1127:main.c        ****             pitchFreeze[string] = 0;
1128:main.c        ****         }
1129:main.c        ****     }       
1130:main.c        **** }...
 3312              		.loc 1 1130 0
 3313 0074 DAE0     		b	.L178
 3314              	.L165:
 3315              	.LBB8:
1052:main.c        ****         int loudestSoundingNote = 0;
 3316              		.loc 1 1052 0
 3317 0076 0023     		movs	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 80


 3318 0078 FB61     		str	r3, [r7, #28]
1053:main.c        ****         if (velocity > 0)
 3319              		.loc 1 1053 0
 3320 007a BB68     		ldr	r3, [r7, #8]
 3321 007c 002B     		cmp	r3, #0
 3322 007e 40F3B580 		ble	.L167
 3323              	.LBB9:
1056:main.c        ****             for (int i = 0; i < 4; i++)
 3324              		.loc 1 1056 0
 3325 0082 0023     		movs	r3, #0
 3326 0084 BB61     		str	r3, [r7, #24]
 3327 0086 13E0     		b	.L168
 3328              	.L170:
1058:main.c        ****                 if (stringStates[i][1] > loudestSoundingNote)
 3329              		.loc 1 1058 0
 3330 0088 6D4A     		ldr	r2, .L179+12
 3331 008a BB69     		ldr	r3, [r7, #24]
 3332 008c DB00     		lsls	r3, r3, #3
 3333 008e 1344     		add	r3, r3, r2
 3334 0090 5A68     		ldr	r2, [r3, #4]
 3335 0092 FB69     		ldr	r3, [r7, #28]
 3336 0094 9A42     		cmp	r2, r3
 3337 0096 08DD     		ble	.L169
1060:main.c        ****                     loudestSoundingNote = stringStates[i][1];
 3338              		.loc 1 1060 0
 3339 0098 694A     		ldr	r2, .L179+12
 3340 009a BB69     		ldr	r3, [r7, #24]
 3341 009c DB00     		lsls	r3, r3, #3
 3342 009e 1344     		add	r3, r3, r2
 3343 00a0 5B68     		ldr	r3, [r3, #4]
 3344 00a2 FB61     		str	r3, [r7, #28]
1061:main.c        ****                     loudestString = i;
 3345              		.loc 1 1061 0
 3346 00a4 674A     		ldr	r2, .L179+16
 3347 00a6 BB69     		ldr	r3, [r7, #24]
 3348 00a8 1360     		str	r3, [r2]
 3349              	.L169:
1056:main.c        ****             for (int i = 0; i < 4; i++)
 3350              		.loc 1 1056 0 discriminator 2
 3351 00aa BB69     		ldr	r3, [r7, #24]
 3352 00ac 0133     		adds	r3, r3, #1
 3353 00ae BB61     		str	r3, [r7, #24]
 3354              	.L168:
1056:main.c        ****             for (int i = 0; i < 4; i++)
 3355              		.loc 1 1056 0 is_stmt 0 discriminator 1
 3356 00b0 BB69     		ldr	r3, [r7, #24]
 3357 00b2 032B     		cmp	r3, #3
 3358 00b4 E8DD     		ble	.L170
 3359              	.LBE9:
1067:main.c        ****             if ((velocity >= (loudestSoundingNote - 25)) || (velocity > 35))
 3360              		.loc 1 1067 0 is_stmt 1
 3361 00b6 FB69     		ldr	r3, [r7, #28]
 3362 00b8 A3F11902 		sub	r2, r3, #25
 3363 00bc BB68     		ldr	r3, [r7, #8]
 3364 00be 9A42     		cmp	r2, r3
 3365 00c0 02DD     		ble	.L171
1067:main.c        ****             if ((velocity >= (loudestSoundingNote - 25)) || (velocity > 35))
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 81


 3366              		.loc 1 1067 0 is_stmt 0 discriminator 1
 3367 00c2 BB68     		ldr	r3, [r7, #8]
 3368 00c4 232B     		cmp	r3, #35
 3369 00c6 52DD     		ble	.L172
 3370              	.L171:
 3371              	.LBB10:
1069:main.c        ****                 for (int i = 0; i < 4; i++)
 3372              		.loc 1 1069 0 is_stmt 1
 3373 00c8 0023     		movs	r3, #0
 3374 00ca 7B61     		str	r3, [r7, #20]
 3375 00cc 22E0     		b	.L173
 3376              	.L175:
1071:main.c        ****                     if (stringStates[i][0] >= 0)
 3377              		.loc 1 1071 0
 3378 00ce 5C4A     		ldr	r2, .L179+12
 3379 00d0 7B69     		ldr	r3, [r7, #20]
 3380 00d2 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3381 00d6 002B     		cmp	r3, #0
 3382 00d8 14DB     		blt	.L174
1074:main.c        ****                         sendMIDINoteOn(stringStates[i][0], 0, 0);
 3383              		.loc 1 1074 0
 3384 00da 594A     		ldr	r2, .L179+12
 3385 00dc 7B69     		ldr	r3, [r7, #20]
 3386 00de 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3387 00e2 0022     		movs	r2, #0
 3388 00e4 0021     		movs	r1, #0
 3389 00e6 1846     		mov	r0, r3
 3390 00e8 FFF7FEFF 		bl	sendMIDINoteOn
1075:main.c        ****                         stringStates[i][0] = -1;
 3391              		.loc 1 1075 0
 3392 00ec 544A     		ldr	r2, .L179+12
 3393 00ee 7B69     		ldr	r3, [r7, #20]
 3394 00f0 4FF0FF31 		mov	r1, #-1
 3395 00f4 42F83310 		str	r1, [r2, r3, lsl #3]
1076:main.c        ****                         stringStates[i][1] = 0;
 3396              		.loc 1 1076 0
 3397 00f8 514A     		ldr	r2, .L179+12
 3398 00fa 7B69     		ldr	r3, [r7, #20]
 3399 00fc DB00     		lsls	r3, r3, #3
 3400 00fe 1344     		add	r3, r3, r2
 3401 0100 0022     		movs	r2, #0
 3402 0102 5A60     		str	r2, [r3, #4]
 3403              	.L174:
1078:main.c        ****                     openStringCount[i] = 10;
 3404              		.loc 1 1078 0 discriminator 2
 3405 0104 504A     		ldr	r2, .L179+20
 3406 0106 7B69     		ldr	r3, [r7, #20]
 3407 0108 0A21     		movs	r1, #10
 3408 010a 42F82310 		str	r1, [r2, r3, lsl #2]
1069:main.c        ****                 for (int i = 0; i < 4; i++)
 3409              		.loc 1 1069 0 discriminator 2
 3410 010e 7B69     		ldr	r3, [r7, #20]
 3411 0110 0133     		adds	r3, r3, #1
 3412 0112 7B61     		str	r3, [r7, #20]
 3413              	.L173:
1069:main.c        ****                 for (int i = 0; i < 4; i++)
 3414              		.loc 1 1069 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 82


 3415 0114 7B69     		ldr	r3, [r7, #20]
 3416 0116 032B     		cmp	r3, #3
 3417 0118 D9DD     		ble	.L175
 3418              	.LBE10:
1080:main.c        ****                 timeSinceLastAttack = 0;
 3419              		.loc 1 1080 0 is_stmt 1
 3420 011a 4C4A     		ldr	r2, .L179+24
 3421 011c 4FF00003 		mov	r3, #0
 3422 0120 4FF00004 		mov	r4, #0
 3423 0124 C2E90034 		strd	r3, [r2]
1081:main.c        ****                 stringStates[string][0] = note;
 3424              		.loc 1 1081 0
 3425 0128 4549     		ldr	r1, .L179+12
 3426 012a 7B68     		ldr	r3, [r7, #4]
 3427 012c FA68     		ldr	r2, [r7, #12]
 3428 012e 41F83320 		str	r2, [r1, r3, lsl #3]
1082:main.c        ****                 stringStates[string][1] = velocity;
 3429              		.loc 1 1082 0
 3430 0132 434A     		ldr	r2, .L179+12
 3431 0134 7B68     		ldr	r3, [r7, #4]
 3432 0136 DB00     		lsls	r3, r3, #3
 3433 0138 1344     		add	r3, r3, r2
 3434 013a BA68     		ldr	r2, [r7, #8]
 3435 013c 5A60     		str	r2, [r3, #4]
1083:main.c        ****                  pitchFreeze[string] = 0;
 3436              		.loc 1 1083 0
 3437 013e 444A     		ldr	r2, .L179+28
 3438 0140 7B68     		ldr	r3, [r7, #4]
 3439 0142 1344     		add	r3, r3, r2
 3440 0144 0022     		movs	r2, #0
 3441 0146 1A70     		strb	r2, [r3]
1084:main.c        ****                 sendMIDINoteOn(note, velocity, 0);
 3442              		.loc 1 1084 0
 3443 0148 0022     		movs	r2, #0
 3444 014a B968     		ldr	r1, [r7, #8]
 3445 014c F868     		ldr	r0, [r7, #12]
 3446 014e FFF7FEFF 		bl	sendMIDINoteOn
1085:main.c        ****                  LHMuteCounter[i] = 0;
 3447              		.loc 1 1085 0
 3448 0152 404B     		ldr	r3, .L179+32
 3449 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3450 0156 1946     		mov	r1, r3
 3451 0158 3F4B     		ldr	r3, .L179+36
 3452 015a 0022     		movs	r2, #0
 3453 015c 43F82120 		str	r2, [r3, r1, lsl #2]
1086:main.c        ****                  LHMute[i] = 0;
 3454              		.loc 1 1086 0
 3455 0160 3C4B     		ldr	r3, .L179+32
 3456 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3457 0164 1A46     		mov	r2, r3
 3458 0166 3D4B     		ldr	r3, .L179+40
 3459 0168 0021     		movs	r1, #0
 3460 016a 9954     		strb	r1, [r3, r2]
 3461              	.LBE8:
 3462              		.loc 1 1130 0
 3463 016c 5EE0     		b	.L178
 3464              	.L172:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 83


 3465              	.LBB11:
1090:main.c        ****                 skippedNotes[skipPointer][0] = note;
 3466              		.loc 1 1090 0
 3467 016e 3C4B     		ldr	r3, .L179+44
 3468 0170 1A68     		ldr	r2, [r3]
 3469 0172 3C49     		ldr	r1, .L179+48
 3470 0174 1346     		mov	r3, r2
 3471 0176 9B00     		lsls	r3, r3, #2
 3472 0178 1344     		add	r3, r3, r2
 3473 017a 9B00     		lsls	r3, r3, #2
 3474 017c 0B44     		add	r3, r3, r1
 3475 017e FA68     		ldr	r2, [r7, #12]
 3476 0180 1A60     		str	r2, [r3]
1091:main.c        ****                 skippedNotes[skipPointer][1] = velocity;
 3477              		.loc 1 1091 0
 3478 0182 374B     		ldr	r3, .L179+44
 3479 0184 1A68     		ldr	r2, [r3]
 3480 0186 3749     		ldr	r1, .L179+48
 3481 0188 1346     		mov	r3, r2
 3482 018a 9B00     		lsls	r3, r3, #2
 3483 018c 1344     		add	r3, r3, r2
 3484 018e 9B00     		lsls	r3, r3, #2
 3485 0190 0B44     		add	r3, r3, r1
 3486 0192 0433     		adds	r3, r3, #4
 3487 0194 BA68     		ldr	r2, [r7, #8]
 3488 0196 1A60     		str	r2, [r3]
1092:main.c        ****                 skippedNotes[skipPointer][2] = loudestSoundingNote;
 3489              		.loc 1 1092 0
 3490 0198 314B     		ldr	r3, .L179+44
 3491 019a 1A68     		ldr	r2, [r3]
 3492 019c 3149     		ldr	r1, .L179+48
 3493 019e 1346     		mov	r3, r2
 3494 01a0 9B00     		lsls	r3, r3, #2
 3495 01a2 1344     		add	r3, r3, r2
 3496 01a4 9B00     		lsls	r3, r3, #2
 3497 01a6 0B44     		add	r3, r3, r1
 3498 01a8 0833     		adds	r3, r3, #8
 3499 01aa FA69     		ldr	r2, [r7, #28]
 3500 01ac 1A60     		str	r2, [r3]
1093:main.c        ****                 skippedNotes[skipPointer][3] = loudestString;
 3501              		.loc 1 1093 0
 3502 01ae 2C4B     		ldr	r3, .L179+44
 3503 01b0 1A68     		ldr	r2, [r3]
 3504 01b2 244B     		ldr	r3, .L179+16
 3505 01b4 1968     		ldr	r1, [r3]
 3506 01b6 2B48     		ldr	r0, .L179+48
 3507 01b8 1346     		mov	r3, r2
 3508 01ba 9B00     		lsls	r3, r3, #2
 3509 01bc 1344     		add	r3, r3, r2
 3510 01be 9B00     		lsls	r3, r3, #2
 3511 01c0 0344     		add	r3, r3, r0
 3512 01c2 0C33     		adds	r3, r3, #12
 3513 01c4 1960     		str	r1, [r3]
1094:main.c        ****                 skippedNotes[skipPointer][4] = string;
 3514              		.loc 1 1094 0
 3515 01c6 264B     		ldr	r3, .L179+44
 3516 01c8 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 84


 3517 01ca 2649     		ldr	r1, .L179+48
 3518 01cc 1346     		mov	r3, r2
 3519 01ce 9B00     		lsls	r3, r3, #2
 3520 01d0 1344     		add	r3, r3, r2
 3521 01d2 9B00     		lsls	r3, r3, #2
 3522 01d4 0B44     		add	r3, r3, r1
 3523 01d6 1033     		adds	r3, r3, #16
 3524 01d8 7A68     		ldr	r2, [r7, #4]
 3525 01da 1A60     		str	r2, [r3]
1095:main.c        ****                 skipPointer = (skipPointer + 1) & 31;
 3526              		.loc 1 1095 0
 3527 01dc 204B     		ldr	r3, .L179+44
 3528 01de 1B68     		ldr	r3, [r3]
 3529 01e0 0133     		adds	r3, r3, #1
 3530 01e2 03F01F03 		and	r3, r3, #31
 3531 01e6 1E4A     		ldr	r2, .L179+44
 3532 01e8 1360     		str	r3, [r2]
 3533              	.LBE11:
 3534              		.loc 1 1130 0
 3535 01ea 1FE0     		b	.L178
 3536              	.L167:
 3537              	.LBB12:
1121:main.c        ****             if (stringStates[string][0] > 0)
 3538              		.loc 1 1121 0
 3539 01ec 144A     		ldr	r2, .L179+12
 3540 01ee 7B68     		ldr	r3, [r7, #4]
 3541 01f0 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3542 01f4 002B     		cmp	r3, #0
 3543 01f6 08DD     		ble	.L177
1123:main.c        ****                 sendMIDINoteOn(stringStates[string][0], 0, 0);
 3544              		.loc 1 1123 0
 3545 01f8 114A     		ldr	r2, .L179+12
 3546 01fa 7B68     		ldr	r3, [r7, #4]
 3547 01fc 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3548 0200 0022     		movs	r2, #0
 3549 0202 0021     		movs	r1, #0
 3550 0204 1846     		mov	r0, r3
 3551 0206 FFF7FEFF 		bl	sendMIDINoteOn
 3552              	.L177:
1125:main.c        ****             stringStates[string][0] = -1;
 3553              		.loc 1 1125 0
 3554 020a 0D4A     		ldr	r2, .L179+12
 3555 020c 7B68     		ldr	r3, [r7, #4]
 3556 020e 4FF0FF31 		mov	r1, #-1
 3557 0212 42F83310 		str	r1, [r2, r3, lsl #3]
1126:main.c        ****             stringStates[string][1] = 0;
 3558              		.loc 1 1126 0
 3559 0216 0A4A     		ldr	r2, .L179+12
 3560 0218 7B68     		ldr	r3, [r7, #4]
 3561 021a DB00     		lsls	r3, r3, #3
 3562 021c 1344     		add	r3, r3, r2
 3563 021e 0022     		movs	r2, #0
 3564 0220 5A60     		str	r2, [r3, #4]
1127:main.c        ****             pitchFreeze[string] = 0;
 3565              		.loc 1 1127 0
 3566 0222 0B4A     		ldr	r2, .L179+28
 3567 0224 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 85


 3568 0226 1344     		add	r3, r3, r2
 3569 0228 0022     		movs	r2, #0
 3570 022a 1A70     		strb	r2, [r3]
 3571              	.L178:
 3572              	.LBE12:
 3573              		.loc 1 1130 0
 3574 022c 00BF     		nop
 3575 022e 2437     		adds	r7, r7, #36
 3576              		.cfi_def_cfa_offset 12
 3577 0230 BD46     		mov	sp, r7
 3578              		.cfi_def_cfa_register 13
 3579              		@ sp needed
 3580 0232 90BD     		pop	{r4, r7, pc}
 3581              	.L180:
 3582              		.align	2
 3583              	.L179:
 3584 0234 0918C43C 		.word	1019484169
 3585 0238 551D0243 		.word	1124212053
 3586 023c 00000000 		.word	polyMode
 3587 0240 00000000 		.word	stringStates
 3588 0244 00000000 		.word	loudestString
 3589 0248 00000000 		.word	openStringCount
 3590 024c 00000000 		.word	timeSinceLastAttack
 3591 0250 00000000 		.word	pitchFreeze
 3592 0254 00000000 		.word	i
 3593 0258 00000000 		.word	LHMuteCounter
 3594 025c 00000000 		.word	LHMute
 3595 0260 00000000 		.word	skipPointer
 3596 0264 00000000 		.word	skippedNotes
 3597              		.cfi_endproc
 3598              	.LFE84:
 3599              		.size	handleNotes, .-handleNotes
 3600              		.text
 3601              	.Letext0:
 3602              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3603              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3604              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3605              		.file 5 "Generated_Source\\PSoC5/cy_em_eeprom.h"
 3606              		.file 6 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3607              		.file 7 "Generated_Source\\PSoC5/CapSense_CSHL.h"
 3608              		.file 8 "Generated_Source\\PSoC5/USB_midi.h"
 3609              		.file 9 "Generated_Source\\PSoC5/Em_EEPROM.h"
 3610              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 3611              		.section	.debug_info,"",%progbits
 3612              	.Ldebug_info0:
 3613 0000 0B0F0000 		.4byte	0xf0b
 3614 0004 0400     		.2byte	0x4
 3615 0006 00000000 		.4byte	.Ldebug_abbrev0
 3616 000a 04       		.byte	0x4
 3617 000b 01       		.uleb128 0x1
 3618 000c 34010000 		.4byte	.LASF184
 3619 0010 0C       		.byte	0xc
 3620 0011 60000000 		.4byte	.LASF185
 3621 0015 9A000000 		.4byte	.LASF186
 3622 0019 20000000 		.4byte	.Ldebug_ranges0+0x20
 3623 001d 00000000 		.4byte	0
 3624 0021 00000000 		.4byte	.Ldebug_line0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 86


 3625 0025 02       		.uleb128 0x2
 3626 0026 01       		.byte	0x1
 3627 0027 06       		.byte	0x6
 3628 0028 39090000 		.4byte	.LASF0
 3629 002c 03       		.uleb128 0x3
 3630 002d 90070000 		.4byte	.LASF3
 3631 0031 02       		.byte	0x2
 3632 0032 1D       		.byte	0x1d
 3633 0033 37000000 		.4byte	0x37
 3634 0037 02       		.uleb128 0x2
 3635 0038 01       		.byte	0x1
 3636 0039 08       		.byte	0x8
 3637 003a A4080000 		.4byte	.LASF1
 3638 003e 02       		.uleb128 0x2
 3639 003f 02       		.byte	0x2
 3640 0040 05       		.byte	0x5
 3641 0041 F2060000 		.4byte	.LASF2
 3642 0045 03       		.uleb128 0x3
 3643 0046 65030000 		.4byte	.LASF4
 3644 004a 02       		.byte	0x2
 3645 004b 2B       		.byte	0x2b
 3646 004c 50000000 		.4byte	0x50
 3647 0050 02       		.uleb128 0x2
 3648 0051 02       		.byte	0x2
 3649 0052 07       		.byte	0x7
 3650 0053 45090000 		.4byte	.LASF5
 3651 0057 03       		.uleb128 0x3
 3652 0058 09010000 		.4byte	.LASF6
 3653 005c 02       		.byte	0x2
 3654 005d 3F       		.byte	0x3f
 3655 005e 62000000 		.4byte	0x62
 3656 0062 02       		.uleb128 0x2
 3657 0063 04       		.byte	0x4
 3658 0064 05       		.byte	0x5
 3659 0065 02070000 		.4byte	.LASF7
 3660 0069 03       		.uleb128 0x3
 3661 006a B2080000 		.4byte	.LASF8
 3662 006e 02       		.byte	0x2
 3663 006f 41       		.byte	0x41
 3664 0070 74000000 		.4byte	0x74
 3665 0074 02       		.uleb128 0x2
 3666 0075 04       		.byte	0x4
 3667 0076 07       		.byte	0x7
 3668 0077 EE070000 		.4byte	.LASF9
 3669 007b 03       		.uleb128 0x3
 3670 007c 26060000 		.4byte	.LASF10
 3671 0080 02       		.byte	0x2
 3672 0081 59       		.byte	0x59
 3673 0082 86000000 		.4byte	0x86
 3674 0086 02       		.uleb128 0x2
 3675 0087 08       		.byte	0x8
 3676 0088 05       		.byte	0x5
 3677 0089 3D050000 		.4byte	.LASF11
 3678 008d 02       		.uleb128 0x2
 3679 008e 08       		.byte	0x8
 3680 008f 07       		.byte	0x7
 3681 0090 F9020000 		.4byte	.LASF12
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 87


 3682 0094 04       		.uleb128 0x4
 3683 0095 04       		.byte	0x4
 3684 0096 05       		.byte	0x5
 3685 0097 696E7400 		.ascii	"int\000"
 3686 009b 02       		.uleb128 0x2
 3687 009c 04       		.byte	0x4
 3688 009d 07       		.byte	0x7
 3689 009e 8D000000 		.4byte	.LASF13
 3690 00a2 03       		.uleb128 0x3
 3691 00a3 ED040000 		.4byte	.LASF14
 3692 00a7 03       		.byte	0x3
 3693 00a8 18       		.byte	0x18
 3694 00a9 2C000000 		.4byte	0x2c
 3695 00ad 03       		.uleb128 0x3
 3696 00ae 4C060000 		.4byte	.LASF15
 3697 00b2 03       		.byte	0x3
 3698 00b3 24       		.byte	0x24
 3699 00b4 45000000 		.4byte	0x45
 3700 00b8 03       		.uleb128 0x3
 3701 00b9 39080000 		.4byte	.LASF16
 3702 00bd 03       		.byte	0x3
 3703 00be 2C       		.byte	0x2c
 3704 00bf 57000000 		.4byte	0x57
 3705 00c3 03       		.uleb128 0x3
 3706 00c4 78020000 		.4byte	.LASF17
 3707 00c8 03       		.byte	0x3
 3708 00c9 30       		.byte	0x30
 3709 00ca 69000000 		.4byte	0x69
 3710 00ce 03       		.uleb128 0x3
 3711 00cf C3030000 		.4byte	.LASF18
 3712 00d3 03       		.byte	0x3
 3713 00d4 38       		.byte	0x38
 3714 00d5 7B000000 		.4byte	0x7b
 3715 00d9 05       		.uleb128 0x5
 3716 00da 87090000 		.4byte	.LASF19
 3717 00de 04       		.byte	0x4
 3718 00df E401     		.2byte	0x1e4
 3719 00e1 37000000 		.4byte	0x37
 3720 00e5 05       		.uleb128 0x5
 3721 00e6 CA040000 		.4byte	.LASF20
 3722 00ea 04       		.byte	0x4
 3723 00eb E501     		.2byte	0x1e5
 3724 00ed 50000000 		.4byte	0x50
 3725 00f1 05       		.uleb128 0x5
 3726 00f2 CE050000 		.4byte	.LASF21
 3727 00f6 04       		.byte	0x4
 3728 00f7 E601     		.2byte	0x1e6
 3729 00f9 74000000 		.4byte	0x74
 3730 00fd 05       		.uleb128 0x5
 3731 00fe A3020000 		.4byte	.LASF22
 3732 0102 04       		.byte	0x4
 3733 0103 E901     		.2byte	0x1e9
 3734 0105 62000000 		.4byte	0x62
 3735 0109 02       		.uleb128 0x2
 3736 010a 04       		.byte	0x4
 3737 010b 04       		.byte	0x4
 3738 010c 9D020000 		.4byte	.LASF23
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 88


 3739 0110 02       		.uleb128 0x2
 3740 0111 08       		.byte	0x8
 3741 0112 04       		.byte	0x4
 3742 0113 8D090000 		.4byte	.LASF24
 3743 0117 02       		.uleb128 0x2
 3744 0118 01       		.byte	0x1
 3745 0119 08       		.byte	0x8
 3746 011a 95040000 		.4byte	.LASF25
 3747 011e 05       		.uleb128 0x5
 3748 011f 8A080000 		.4byte	.LASF26
 3749 0123 04       		.byte	0x4
 3750 0124 8602     		.2byte	0x286
 3751 0126 74000000 		.4byte	0x74
 3752 012a 05       		.uleb128 0x5
 3753 012b 13010000 		.4byte	.LASF27
 3754 012f 04       		.byte	0x4
 3755 0130 8E02     		.2byte	0x28e
 3756 0132 36010000 		.4byte	0x136
 3757 0136 06       		.uleb128 0x6
 3758 0137 D9000000 		.4byte	0xd9
 3759 013b 02       		.uleb128 0x2
 3760 013c 08       		.byte	0x8
 3761 013d 04       		.byte	0x4
 3762 013e 30060000 		.4byte	.LASF28
 3763 0142 02       		.uleb128 0x2
 3764 0143 04       		.byte	0x4
 3765 0144 07       		.byte	0x7
 3766 0145 D2070000 		.4byte	.LASF29
 3767 0149 07       		.uleb128 0x7
 3768 014a D9000000 		.4byte	0xd9
 3769 014e 59010000 		.4byte	0x159
 3770 0152 08       		.uleb128 0x8
 3771 0153 42010000 		.4byte	0x142
 3772 0157 03       		.byte	0x3
 3773 0158 00       		.byte	0
 3774 0159 09       		.uleb128 0x9
 3775 015a 1C       		.byte	0x1c
 3776 015b 05       		.byte	0x5
 3777 015c 1601     		.2byte	0x116
 3778 015e CB010000 		.4byte	0x1cb
 3779 0162 0A       		.uleb128 0xa
 3780 0163 0E050000 		.4byte	.LASF30
 3781 0167 05       		.byte	0x5
 3782 0168 1B01     		.2byte	0x11b
 3783 016a F1000000 		.4byte	0xf1
 3784 016e 00       		.byte	0
 3785 016f 0A       		.uleb128 0xa
 3786 0170 81020000 		.4byte	.LASF31
 3787 0174 05       		.byte	0x5
 3788 0175 2001     		.2byte	0x120
 3789 0177 F1000000 		.4byte	0xf1
 3790 017b 04       		.byte	0x4
 3791 017c 0A       		.uleb128 0xa
 3792 017d 94090000 		.4byte	.LASF32
 3793 0181 05       		.byte	0x5
 3794 0182 2301     		.2byte	0x123
 3795 0184 F1000000 		.4byte	0xf1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 89


 3796 0188 08       		.byte	0x8
 3797 0189 0A       		.uleb128 0xa
 3798 018a D5020000 		.4byte	.LASF33
 3799 018e 05       		.byte	0x5
 3800 018f 2601     		.2byte	0x126
 3801 0191 F1000000 		.4byte	0xf1
 3802 0195 0C       		.byte	0xc
 3803 0196 0A       		.uleb128 0xa
 3804 0197 59080000 		.4byte	.LASF34
 3805 019b 05       		.byte	0x5
 3806 019c 2B01     		.2byte	0x12b
 3807 019e F1000000 		.4byte	0xf1
 3808 01a2 10       		.byte	0x10
 3809 01a3 0A       		.uleb128 0xa
 3810 01a4 C8080000 		.4byte	.LASF35
 3811 01a8 05       		.byte	0x5
 3812 01a9 2E01     		.2byte	0x12e
 3813 01ab D9000000 		.4byte	0xd9
 3814 01af 14       		.byte	0x14
 3815 01b0 0A       		.uleb128 0xa
 3816 01b1 AD030000 		.4byte	.LASF36
 3817 01b5 05       		.byte	0x5
 3818 01b6 3301     		.2byte	0x133
 3819 01b8 D9000000 		.4byte	0xd9
 3820 01bc 15       		.byte	0x15
 3821 01bd 0A       		.uleb128 0xa
 3822 01be 0D040000 		.4byte	.LASF37
 3823 01c2 05       		.byte	0x5
 3824 01c3 3601     		.2byte	0x136
 3825 01c5 F1000000 		.4byte	0xf1
 3826 01c9 18       		.byte	0x18
 3827 01ca 00       		.byte	0
 3828 01cb 05       		.uleb128 0x5
 3829 01cc 48000000 		.4byte	.LASF38
 3830 01d0 05       		.byte	0x5
 3831 01d1 3701     		.2byte	0x137
 3832 01d3 59010000 		.4byte	0x159
 3833 01d7 0B       		.uleb128 0xb
 3834 01d8 01       		.byte	0x1
 3835 01d9 37000000 		.4byte	0x37
 3836 01dd 05       		.byte	0x5
 3837 01de 5401     		.2byte	0x154
 3838 01e0 03020000 		.4byte	0x203
 3839 01e4 0C       		.uleb128 0xc
 3840 01e5 9A040000 		.4byte	.LASF39
 3841 01e9 00       		.byte	0
 3842 01ea 0C       		.uleb128 0xc
 3843 01eb 1D000000 		.4byte	.LASF40
 3844 01ef 01       		.byte	0x1
 3845 01f0 0C       		.uleb128 0xc
 3846 01f1 4B030000 		.4byte	.LASF41
 3847 01f5 02       		.byte	0x2
 3848 01f6 0C       		.uleb128 0xc
 3849 01f7 1E010000 		.4byte	.LASF42
 3850 01fb 03       		.byte	0x3
 3851 01fc 0C       		.uleb128 0xc
 3852 01fd 08080000 		.4byte	.LASF43
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 90


 3853 0201 04       		.byte	0x4
 3854 0202 00       		.byte	0
 3855 0203 05       		.uleb128 0x5
 3856 0204 E0020000 		.4byte	.LASF44
 3857 0208 05       		.byte	0x5
 3858 0209 5A01     		.2byte	0x15a
 3859 020b D7010000 		.4byte	0x1d7
 3860 020f 06       		.uleb128 0x6
 3861 0210 A2000000 		.4byte	0xa2
 3862 0214 07       		.uleb128 0x7
 3863 0215 C3000000 		.4byte	0xc3
 3864 0219 24020000 		.4byte	0x224
 3865 021d 08       		.uleb128 0x8
 3866 021e 42010000 		.4byte	0x142
 3867 0222 04       		.byte	0x4
 3868 0223 00       		.byte	0
 3869 0224 03       		.uleb128 0x3
 3870 0225 82090000 		.4byte	.LASF45
 3871 0229 06       		.byte	0x6
 3872 022a 6C       		.byte	0x6c
 3873 022b 9B000000 		.4byte	0x9b
 3874 022f 07       		.uleb128 0x7
 3875 0230 A2000000 		.4byte	0xa2
 3876 0234 3F020000 		.4byte	0x23f
 3877 0238 08       		.uleb128 0x8
 3878 0239 42010000 		.4byte	0x142
 3879 023d 03       		.byte	0x3
 3880 023e 00       		.byte	0
 3881 023f 0D       		.uleb128 0xd
 3882 0240 6C080000 		.4byte	.LASF59
 3883 0244 01       		.byte	0x1
 3884 0245 BB       		.byte	0xbb
 3885 0246 00000000 		.4byte	.LFB64
 3886 024a 0C000000 		.4byte	.LFE64-.LFB64
 3887 024e 01       		.uleb128 0x1
 3888 024f 9C       		.byte	0x9c
 3889 0250 0E       		.uleb128 0xe
 3890 0251 20040000 		.4byte	.LASF48
 3891 0255 01       		.byte	0x1
 3892 0256 C3       		.byte	0xc3
 3893 0257 09010000 		.4byte	0x109
 3894 025b 00000000 		.4byte	.LFB65
 3895 025f 58000000 		.4byte	.LFE65-.LFB65
 3896 0263 01       		.uleb128 0x1
 3897 0264 9C       		.byte	0x9c
 3898 0265 B0020000 		.4byte	0x2b0
 3899 0269 0F       		.uleb128 0xf
 3900 026a 6D696E00 		.ascii	"min\000"
 3901 026e 01       		.byte	0x1
 3902 026f C3       		.byte	0xc3
 3903 0270 09010000 		.4byte	0x109
 3904 0274 02       		.uleb128 0x2
 3905 0275 91       		.byte	0x91
 3906 0276 6C       		.sleb128 -20
 3907 0277 0F       		.uleb128 0xf
 3908 0278 76616C00 		.ascii	"val\000"
 3909 027c 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 91


 3910 027d C3       		.byte	0xc3
 3911 027e 09010000 		.4byte	0x109
 3912 0282 02       		.uleb128 0x2
 3913 0283 91       		.byte	0x91
 3914 0284 68       		.sleb128 -24
 3915 0285 0F       		.uleb128 0xf
 3916 0286 6D617800 		.ascii	"max\000"
 3917 028a 01       		.byte	0x1
 3918 028b C3       		.byte	0xc3
 3919 028c 09010000 		.4byte	0x109
 3920 0290 02       		.uleb128 0x2
 3921 0291 91       		.byte	0x91
 3922 0292 64       		.sleb128 -28
 3923 0293 10       		.uleb128 0x10
 3924 0294 08020000 		.4byte	.LASF46
 3925 0298 01       		.byte	0x1
 3926 0299 C5       		.byte	0xc5
 3927 029a 09010000 		.4byte	0x109
 3928 029e 02       		.uleb128 0x2
 3929 029f 91       		.byte	0x91
 3930 02a0 74       		.sleb128 -12
 3931 02a1 10       		.uleb128 0x10
 3932 02a2 79060000 		.4byte	.LASF47
 3933 02a6 01       		.byte	0x1
 3934 02a7 C6       		.byte	0xc6
 3935 02a8 09010000 		.4byte	0x109
 3936 02ac 02       		.uleb128 0x2
 3937 02ad 91       		.byte	0x91
 3938 02ae 70       		.sleb128 -16
 3939 02af 00       		.byte	0
 3940 02b0 0E       		.uleb128 0xe
 3941 02b1 DE080000 		.4byte	.LASF49
 3942 02b5 01       		.byte	0x1
 3943 02b6 D9       		.byte	0xd9
 3944 02b7 09010000 		.4byte	0x109
 3945 02bb 00000000 		.4byte	.LFB66
 3946 02bf 68000000 		.4byte	.LFE66-.LFB66
 3947 02c3 01       		.uleb128 0x1
 3948 02c4 9C       		.byte	0x9c
 3949 02c5 D6020000 		.4byte	0x2d6
 3950 02c9 0F       		.uleb128 0xf
 3951 02ca 6600     		.ascii	"f\000"
 3952 02cc 01       		.byte	0x1
 3953 02cd D9       		.byte	0xd9
 3954 02ce 09010000 		.4byte	0x109
 3955 02d2 02       		.uleb128 0x2
 3956 02d3 91       		.byte	0x91
 3957 02d4 74       		.sleb128 -12
 3958 02d5 00       		.byte	0
 3959 02d6 0E       		.uleb128 0xe
 3960 02d7 7D080000 		.4byte	.LASF50
 3961 02db 01       		.byte	0x1
 3962 02dc E0       		.byte	0xe0
 3963 02dd 09010000 		.4byte	0x109
 3964 02e1 00000000 		.4byte	.LFB67
 3965 02e5 4C000000 		.4byte	.LFE67-.LFB67
 3966 02e9 01       		.uleb128 0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 92


 3967 02ea 9C       		.byte	0x9c
 3968 02eb FC020000 		.4byte	0x2fc
 3969 02ef 0F       		.uleb128 0xf
 3970 02f0 6600     		.ascii	"f\000"
 3971 02f2 01       		.byte	0x1
 3972 02f3 E0       		.byte	0xe0
 3973 02f4 09010000 		.4byte	0x109
 3974 02f8 02       		.uleb128 0x2
 3975 02f9 91       		.byte	0x91
 3976 02fa 74       		.sleb128 -12
 3977 02fb 00       		.byte	0
 3978 02fc 0E       		.uleb128 0xe
 3979 02fd 4B050000 		.4byte	.LASF51
 3980 0301 01       		.byte	0x1
 3981 0302 E6       		.byte	0xe6
 3982 0303 09010000 		.4byte	0x109
 3983 0307 00000000 		.4byte	.LFB68
 3984 030b 46000000 		.4byte	.LFE68-.LFB68
 3985 030f 01       		.uleb128 0x1
 3986 0310 9C       		.byte	0x9c
 3987 0311 58030000 		.4byte	0x358
 3988 0315 0F       		.uleb128 0xf
 3989 0316 4100     		.ascii	"A\000"
 3990 0318 01       		.byte	0x1
 3991 0319 E6       		.byte	0xe6
 3992 031a 09010000 		.4byte	0x109
 3993 031e 02       		.uleb128 0x2
 3994 031f 91       		.byte	0x91
 3995 0320 6C       		.sleb128 -20
 3996 0321 0F       		.uleb128 0xf
 3997 0322 4200     		.ascii	"B\000"
 3998 0324 01       		.byte	0x1
 3999 0325 E6       		.byte	0xe6
 4000 0326 09010000 		.4byte	0x109
 4001 032a 02       		.uleb128 0x2
 4002 032b 91       		.byte	0x91
 4003 032c 68       		.sleb128 -24
 4004 032d 11       		.uleb128 0x11
 4005 032e 33080000 		.4byte	.LASF52
 4006 0332 01       		.byte	0x1
 4007 0333 E6       		.byte	0xe6
 4008 0334 09010000 		.4byte	0x109
 4009 0338 02       		.uleb128 0x2
 4010 0339 91       		.byte	0x91
 4011 033a 64       		.sleb128 -28
 4012 033b 10       		.uleb128 0x10
 4013 033c 4B040000 		.4byte	.LASF53
 4014 0340 01       		.byte	0x1
 4015 0341 E8       		.byte	0xe8
 4016 0342 09010000 		.4byte	0x109
 4017 0346 02       		.uleb128 0x2
 4018 0347 91       		.byte	0x91
 4019 0348 74       		.sleb128 -12
 4020 0349 12       		.uleb128 0x12
 4021 034a 6F757400 		.ascii	"out\000"
 4022 034e 01       		.byte	0x1
 4023 034f EB       		.byte	0xeb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 93


 4024 0350 09010000 		.4byte	0x109
 4025 0354 02       		.uleb128 0x2
 4026 0355 91       		.byte	0x91
 4027 0356 70       		.sleb128 -16
 4028 0357 00       		.byte	0
 4029 0358 13       		.uleb128 0x13
 4030 0359 6D617000 		.ascii	"map\000"
 4031 035d 01       		.byte	0x1
 4032 035e F5       		.byte	0xf5
 4033 035f 09010000 		.4byte	0x109
 4034 0363 00000000 		.4byte	.LFB69
 4035 0367 56000000 		.4byte	.LFE69-.LFB69
 4036 036b 01       		.uleb128 0x1
 4037 036c 9C       		.byte	0x9c
 4038 036d B8030000 		.4byte	0x3b8
 4039 0371 11       		.uleb128 0x11
 4040 0372 8F030000 		.4byte	.LASF54
 4041 0376 01       		.byte	0x1
 4042 0377 F5       		.byte	0xf5
 4043 0378 09010000 		.4byte	0x109
 4044 037c 02       		.uleb128 0x2
 4045 037d 91       		.byte	0x91
 4046 037e 6C       		.sleb128 -20
 4047 037f 11       		.uleb128 0x11
 4048 0380 F6090000 		.4byte	.LASF55
 4049 0384 01       		.byte	0x1
 4050 0385 F5       		.byte	0xf5
 4051 0386 09010000 		.4byte	0x109
 4052 038a 02       		.uleb128 0x2
 4053 038b 91       		.byte	0x91
 4054 038c 68       		.sleb128 -24
 4055 038d 11       		.uleb128 0x11
 4056 038e 18010000 		.4byte	.LASF56
 4057 0392 01       		.byte	0x1
 4058 0393 F5       		.byte	0xf5
 4059 0394 09010000 		.4byte	0x109
 4060 0398 02       		.uleb128 0x2
 4061 0399 91       		.byte	0x91
 4062 039a 64       		.sleb128 -28
 4063 039b 11       		.uleb128 0x11
 4064 039c F9050000 		.4byte	.LASF57
 4065 03a0 01       		.byte	0x1
 4066 03a1 F5       		.byte	0xf5
 4067 03a2 09010000 		.4byte	0x109
 4068 03a6 02       		.uleb128 0x2
 4069 03a7 91       		.byte	0x91
 4070 03a8 60       		.sleb128 -32
 4071 03a9 11       		.uleb128 0x11
 4072 03aa 34000000 		.4byte	.LASF58
 4073 03ae 01       		.byte	0x1
 4074 03af F5       		.byte	0xf5
 4075 03b0 09010000 		.4byte	0x109
 4076 03b4 02       		.uleb128 0x2
 4077 03b5 91       		.byte	0x91
 4078 03b6 00       		.sleb128 0
 4079 03b7 00       		.byte	0
 4080 03b8 14       		.uleb128 0x14
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 94


 4081 03b9 10020000 		.4byte	.LASF60
 4082 03bd 01       		.byte	0x1
 4083 03be 2C01     		.2byte	0x12c
 4084 03c0 00000000 		.4byte	.LFB70
 4085 03c4 40000000 		.4byte	.LFE70-.LFB70
 4086 03c8 01       		.uleb128 0x1
 4087 03c9 9C       		.byte	0x9c
 4088 03ca 14       		.uleb128 0x14
 4089 03cb E3080000 		.4byte	.LASF61
 4090 03cf 01       		.byte	0x1
 4091 03d0 3E01     		.2byte	0x13e
 4092 03d2 00000000 		.4byte	.LFB71
 4093 03d6 14000000 		.4byte	.LFE71-.LFB71
 4094 03da 01       		.uleb128 0x1
 4095 03db 9C       		.byte	0x9c
 4096 03dc 14       		.uleb128 0x14
 4097 03dd DB070000 		.4byte	.LASF62
 4098 03e1 01       		.byte	0x1
 4099 03e2 4901     		.2byte	0x149
 4100 03e4 00000000 		.4byte	.LFB72
 4101 03e8 7C000000 		.4byte	.LFE72-.LFB72
 4102 03ec 01       		.uleb128 0x1
 4103 03ed 9C       		.byte	0x9c
 4104 03ee 15       		.uleb128 0x15
 4105 03ef 5E090000 		.4byte	.LASF63
 4106 03f3 01       		.byte	0x1
 4107 03f4 6301     		.2byte	0x163
 4108 03f6 94000000 		.4byte	0x94
 4109 03fa 00000000 		.4byte	.LFB73
 4110 03fe DC0A0000 		.4byte	.LFE73-.LFB73
 4111 0402 01       		.uleb128 0x1
 4112 0403 9C       		.byte	0x9c
 4113 0404 86040000 		.4byte	0x486
 4114 0408 16       		.uleb128 0x16
 4115 0409 A4000000 		.4byte	.LBB2
 4116 040d 1C050000 		.4byte	.LBE2-.LBB2
 4117 0411 3C040000 		.4byte	0x43c
 4118 0415 17       		.uleb128 0x17
 4119 0416 0C090000 		.4byte	.LASF64
 4120 041a 01       		.byte	0x1
 4121 041b DF01     		.2byte	0x1df
 4122 041d 09010000 		.4byte	0x109
 4123 0421 02       		.uleb128 0x2
 4124 0422 91       		.byte	0x91
 4125 0423 54       		.sleb128 -44
 4126 0424 18       		.uleb128 0x18
 4127 0425 4A030000 		.4byte	.LBB3
 4128 0429 34000000 		.4byte	.LBE3-.LBB3
 4129 042d 19       		.uleb128 0x19
 4130 042e 6A00     		.ascii	"j\000"
 4131 0430 01       		.byte	0x1
 4132 0431 1602     		.2byte	0x216
 4133 0433 94000000 		.4byte	0x94
 4134 0437 02       		.uleb128 0x2
 4135 0438 91       		.byte	0x91
 4136 0439 64       		.sleb128 -28
 4137 043a 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 95


 4138 043b 00       		.byte	0
 4139 043c 16       		.uleb128 0x16
 4140 043d 2E060000 		.4byte	.LBB4
 4141 0441 52010000 		.4byte	.LBE4-.LBB4
 4142 0445 6E040000 		.4byte	0x46e
 4143 0449 19       		.uleb128 0x19
 4144 044a 6900     		.ascii	"i\000"
 4145 044c 01       		.byte	0x1
 4146 044d 4A02     		.2byte	0x24a
 4147 044f 94000000 		.4byte	0x94
 4148 0453 02       		.uleb128 0x2
 4149 0454 91       		.byte	0x91
 4150 0455 60       		.sleb128 -32
 4151 0456 18       		.uleb128 0x18
 4152 0457 5C060000 		.4byte	.LBB5
 4153 045b 32000000 		.4byte	.LBE5-.LBB5
 4154 045f 19       		.uleb128 0x19
 4155 0460 6A00     		.ascii	"j\000"
 4156 0462 01       		.byte	0x1
 4157 0463 4E02     		.2byte	0x24e
 4158 0465 94000000 		.4byte	0x94
 4159 0469 02       		.uleb128 0x2
 4160 046a 91       		.byte	0x91
 4161 046b 5C       		.sleb128 -36
 4162 046c 00       		.byte	0
 4163 046d 00       		.byte	0
 4164 046e 18       		.uleb128 0x18
 4165 046f B6070000 		.4byte	.LBB6
 4166 0473 CC010000 		.4byte	.LBE6-.LBB6
 4167 0477 19       		.uleb128 0x19
 4168 0478 6900     		.ascii	"i\000"
 4169 047a 01       		.byte	0x1
 4170 047b 7302     		.2byte	0x273
 4171 047d 94000000 		.4byte	0x94
 4172 0481 02       		.uleb128 0x2
 4173 0482 91       		.byte	0x91
 4174 0483 58       		.sleb128 -40
 4175 0484 00       		.byte	0
 4176 0485 00       		.byte	0
 4177 0486 14       		.uleb128 0x14
 4178 0487 72070000 		.4byte	.LASF65
 4179 048b 01       		.byte	0x1
 4180 048c DF02     		.2byte	0x2df
 4181 048e 00000000 		.4byte	.LFB74
 4182 0492 54000000 		.4byte	.LFE74-.LFB74
 4183 0496 01       		.uleb128 0x1
 4184 0497 9C       		.byte	0x9c
 4185 0498 14       		.uleb128 0x14
 4186 0499 19090000 		.4byte	.LASF66
 4187 049d 01       		.byte	0x1
 4188 049e F302     		.2byte	0x2f3
 4189 04a0 00000000 		.4byte	.LFB75
 4190 04a4 C4000000 		.4byte	.LFE75-.LFB75
 4191 04a8 01       		.uleb128 0x1
 4192 04a9 9C       		.byte	0x9c
 4193 04aa 1A       		.uleb128 0x1a
 4194 04ab D2030000 		.4byte	.LASF69
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 96


 4195 04af 01       		.byte	0x1
 4196 04b0 4303     		.2byte	0x343
 4197 04b2 00000000 		.4byte	.LFB76
 4198 04b6 4C000000 		.4byte	.LFE76-.LFB76
 4199 04ba 01       		.uleb128 0x1
 4200 04bb 9C       		.byte	0x9c
 4201 04bc DF040000 		.4byte	0x4df
 4202 04c0 1B       		.uleb128 0x1b
 4203 04c1 08050000 		.4byte	.LASF67
 4204 04c5 01       		.byte	0x1
 4205 04c6 4303     		.2byte	0x343
 4206 04c8 D9000000 		.4byte	0xd9
 4207 04cc 02       		.uleb128 0x2
 4208 04cd 91       		.byte	0x91
 4209 04ce 77       		.sleb128 -9
 4210 04cf 1B       		.uleb128 0x1b
 4211 04d0 31070000 		.4byte	.LASF68
 4212 04d4 01       		.byte	0x1
 4213 04d5 4303     		.2byte	0x343
 4214 04d7 DF040000 		.4byte	0x4df
 4215 04db 02       		.uleb128 0x2
 4216 04dc 91       		.byte	0x91
 4217 04dd 70       		.sleb128 -16
 4218 04de 00       		.byte	0
 4219 04df 1C       		.uleb128 0x1c
 4220 04e0 04       		.byte	0x4
 4221 04e1 D9000000 		.4byte	0xd9
 4222 04e5 1A       		.uleb128 0x1a
 4223 04e6 63090000 		.4byte	.LASF70
 4224 04ea 01       		.byte	0x1
 4225 04eb 5103     		.2byte	0x351
 4226 04ed 00000000 		.4byte	.LFB77
 4227 04f1 68000000 		.4byte	.LFE77-.LFB77
 4228 04f5 01       		.uleb128 0x1
 4229 04f6 9C       		.byte	0x9c
 4230 04f7 29050000 		.4byte	0x529
 4231 04fb 1B       		.uleb128 0x1b
 4232 04fc 140A0000 		.4byte	.LASF71
 4233 0500 01       		.byte	0x1
 4234 0501 5103     		.2byte	0x351
 4235 0503 94000000 		.4byte	0x94
 4236 0507 02       		.uleb128 0x2
 4237 0508 91       		.byte	0x91
 4238 0509 74       		.sleb128 -12
 4239 050a 1B       		.uleb128 0x1b
 4240 050b C9070000 		.4byte	.LASF72
 4241 050f 01       		.byte	0x1
 4242 0510 5103     		.2byte	0x351
 4243 0512 94000000 		.4byte	0x94
 4244 0516 02       		.uleb128 0x2
 4245 0517 91       		.byte	0x91
 4246 0518 70       		.sleb128 -16
 4247 0519 1B       		.uleb128 0x1b
 4248 051a 81060000 		.4byte	.LASF73
 4249 051e 01       		.byte	0x1
 4250 051f 5103     		.2byte	0x351
 4251 0521 94000000 		.4byte	0x94
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 97


 4252 0525 02       		.uleb128 0x2
 4253 0526 91       		.byte	0x91
 4254 0527 6C       		.sleb128 -20
 4255 0528 00       		.byte	0
 4256 0529 1A       		.uleb128 0x1a
 4257 052a B7050000 		.4byte	.LASF74
 4258 052e 01       		.byte	0x1
 4259 052f 5F03     		.2byte	0x35f
 4260 0531 00000000 		.4byte	.LFB78
 4261 0535 6C000000 		.4byte	.LFE78-.LFB78
 4262 0539 01       		.uleb128 0x1
 4263 053a 9C       		.byte	0x9c
 4264 053b 5E050000 		.4byte	0x55e
 4265 053f 1D       		.uleb128 0x1d
 4266 0540 76616C00 		.ascii	"val\000"
 4267 0544 01       		.byte	0x1
 4268 0545 5F03     		.2byte	0x35f
 4269 0547 94000000 		.4byte	0x94
 4270 054b 02       		.uleb128 0x2
 4271 054c 91       		.byte	0x91
 4272 054d 74       		.sleb128 -12
 4273 054e 1B       		.uleb128 0x1b
 4274 054f 81060000 		.4byte	.LASF73
 4275 0553 01       		.byte	0x1
 4276 0554 5F03     		.2byte	0x35f
 4277 0556 94000000 		.4byte	0x94
 4278 055a 02       		.uleb128 0x2
 4279 055b 91       		.byte	0x91
 4280 055c 70       		.sleb128 -16
 4281 055d 00       		.byte	0
 4282 055e 1A       		.uleb128 0x1a
 4283 055f 75040000 		.4byte	.LASF75
 4284 0563 01       		.byte	0x1
 4285 0564 6F03     		.2byte	0x36f
 4286 0566 00000000 		.4byte	.LFB79
 4287 056a 68000000 		.4byte	.LFE79-.LFB79
 4288 056e 01       		.uleb128 0x1
 4289 056f 9C       		.byte	0x9c
 4290 0570 A2050000 		.4byte	0x5a2
 4291 0574 1B       		.uleb128 0x1b
 4292 0575 FC060000 		.4byte	.LASF76
 4293 0579 01       		.byte	0x1
 4294 057a 6F03     		.2byte	0x36f
 4295 057c 94000000 		.4byte	0x94
 4296 0580 02       		.uleb128 0x2
 4297 0581 91       		.byte	0x91
 4298 0582 74       		.sleb128 -12
 4299 0583 1B       		.uleb128 0x1b
 4300 0584 AA050000 		.4byte	.LASF77
 4301 0588 01       		.byte	0x1
 4302 0589 6F03     		.2byte	0x36f
 4303 058b 94000000 		.4byte	0x94
 4304 058f 02       		.uleb128 0x2
 4305 0590 91       		.byte	0x91
 4306 0591 70       		.sleb128 -16
 4307 0592 1B       		.uleb128 0x1b
 4308 0593 81060000 		.4byte	.LASF73
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 98


 4309 0597 01       		.byte	0x1
 4310 0598 6F03     		.2byte	0x36f
 4311 059a 94000000 		.4byte	0x94
 4312 059e 02       		.uleb128 0x2
 4313 059f 91       		.byte	0x91
 4314 05a0 6C       		.sleb128 -20
 4315 05a1 00       		.byte	0
 4316 05a2 1A       		.uleb128 0x1a
 4317 05a3 A2090000 		.4byte	.LASF78
 4318 05a7 01       		.byte	0x1
 4319 05a8 8103     		.2byte	0x381
 4320 05aa 00000000 		.4byte	.LFB80
 4321 05ae 24010000 		.4byte	.LFE80-.LFB80
 4322 05b2 01       		.uleb128 0x1
 4323 05b3 9C       		.byte	0x9c
 4324 05b4 E6050000 		.4byte	0x5e6
 4325 05b8 17       		.uleb128 0x17
 4326 05b9 58090000 		.4byte	.LASF79
 4327 05bd 01       		.byte	0x1
 4328 05be 8303     		.2byte	0x383
 4329 05c0 FD000000 		.4byte	0xfd
 4330 05c4 02       		.uleb128 0x2
 4331 05c5 91       		.byte	0x91
 4332 05c6 68       		.sleb128 -24
 4333 05c7 17       		.uleb128 0x17
 4334 05c8 90040000 		.4byte	.LASF80
 4335 05cc 01       		.byte	0x1
 4336 05cd 8403     		.2byte	0x384
 4337 05cf FD000000 		.4byte	0xfd
 4338 05d3 02       		.uleb128 0x2
 4339 05d4 91       		.byte	0x91
 4340 05d5 6C       		.sleb128 -20
 4341 05d6 17       		.uleb128 0x17
 4342 05d7 CB030000 		.4byte	.LASF81
 4343 05db 01       		.byte	0x1
 4344 05dc 8503     		.2byte	0x385
 4345 05de FD000000 		.4byte	0xfd
 4346 05e2 02       		.uleb128 0x2
 4347 05e3 91       		.byte	0x91
 4348 05e4 64       		.sleb128 -28
 4349 05e5 00       		.byte	0
 4350 05e6 14       		.uleb128 0x14
 4351 05e7 67000000 		.4byte	.LASF82
 4352 05eb 01       		.byte	0x1
 4353 05ec B003     		.2byte	0x3b0
 4354 05ee 00000000 		.4byte	.LFB81
 4355 05f2 70000000 		.4byte	.LFE81-.LFB81
 4356 05f6 01       		.uleb128 0x1
 4357 05f7 9C       		.byte	0x9c
 4358 05f8 14       		.uleb128 0x14
 4359 05f9 7A000000 		.4byte	.LASF83
 4360 05fd 01       		.byte	0x1
 4361 05fe C403     		.2byte	0x3c4
 4362 0600 00000000 		.4byte	.LFB82
 4363 0604 70000000 		.4byte	.LFE82-.LFB82
 4364 0608 01       		.uleb128 0x1
 4365 0609 9C       		.byte	0x9c
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 99


 4366 060a 15       		.uleb128 0x15
 4367 060b 41080000 		.4byte	.LASF84
 4368 060f 01       		.byte	0x1
 4369 0610 D803     		.2byte	0x3d8
 4370 0612 D9000000 		.4byte	0xd9
 4371 0616 00000000 		.4byte	.LFB83
 4372 061a 90000000 		.4byte	.LFE83-.LFB83
 4373 061e 01       		.uleb128 0x1
 4374 061f 9C       		.byte	0x9c
 4375 0620 70060000 		.4byte	0x670
 4376 0624 1B       		.uleb128 0x1b
 4377 0625 82080000 		.4byte	.LASF85
 4378 0629 01       		.byte	0x1
 4379 062a D803     		.2byte	0x3d8
 4380 062c D9000000 		.4byte	0xd9
 4381 0630 02       		.uleb128 0x2
 4382 0631 91       		.byte	0x91
 4383 0632 6F       		.sleb128 -17
 4384 0633 1B       		.uleb128 0x1b
 4385 0634 B0050000 		.4byte	.LASF86
 4386 0638 01       		.byte	0x1
 4387 0639 D803     		.2byte	0x3d8
 4388 063b E5000000 		.4byte	0xe5
 4389 063f 02       		.uleb128 0x2
 4390 0640 91       		.byte	0x91
 4391 0641 6C       		.sleb128 -20
 4392 0642 1B       		.uleb128 0x1b
 4393 0643 F6010000 		.4byte	.LASF87
 4394 0647 01       		.byte	0x1
 4395 0648 D803     		.2byte	0x3d8
 4396 064a A2000000 		.4byte	0xa2
 4397 064e 02       		.uleb128 0x2
 4398 064f 91       		.byte	0x91
 4399 0650 6E       		.sleb128 -18
 4400 0651 17       		.uleb128 0x17
 4401 0652 F5040000 		.4byte	.LASF88
 4402 0656 01       		.byte	0x1
 4403 0657 DA03     		.2byte	0x3da
 4404 0659 36010000 		.4byte	0x136
 4405 065d 02       		.uleb128 0x2
 4406 065e 91       		.byte	0x91
 4407 065f 73       		.sleb128 -13
 4408 0660 17       		.uleb128 0x17
 4409 0661 D6080000 		.4byte	.LASF89
 4410 0665 01       		.byte	0x1
 4411 0666 DB03     		.2byte	0x3db
 4412 0668 C3000000 		.4byte	0xc3
 4413 066c 02       		.uleb128 0x2
 4414 066d 91       		.byte	0x91
 4415 066e 74       		.sleb128 -12
 4416 066f 00       		.byte	0
 4417 0670 1A       		.uleb128 0x1a
 4418 0671 39070000 		.4byte	.LASF90
 4419 0675 01       		.byte	0x1
 4420 0676 0604     		.2byte	0x406
 4421 0678 00000000 		.4byte	.LFB84
 4422 067c 68020000 		.4byte	.LFE84-.LFB84
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 100


 4423 0680 01       		.uleb128 0x1
 4424 0681 9C       		.byte	0x9c
 4425 0682 18070000 		.4byte	0x718
 4426 0686 1B       		.uleb128 0x1b
 4427 0687 A8070000 		.4byte	.LASF91
 4428 068b 01       		.byte	0x1
 4429 068c 0604     		.2byte	0x406
 4430 068e 94000000 		.4byte	0x94
 4431 0692 02       		.uleb128 0x2
 4432 0693 91       		.byte	0x91
 4433 0694 5C       		.sleb128 -36
 4434 0695 1B       		.uleb128 0x1b
 4435 0696 C9070000 		.4byte	.LASF72
 4436 069a 01       		.byte	0x1
 4437 069b 0604     		.2byte	0x406
 4438 069d 94000000 		.4byte	0x94
 4439 06a1 02       		.uleb128 0x2
 4440 06a2 91       		.byte	0x91
 4441 06a3 58       		.sleb128 -40
 4442 06a4 1B       		.uleb128 0x1b
 4443 06a5 C3040000 		.4byte	.LASF92
 4444 06a9 01       		.byte	0x1
 4445 06aa 0604     		.2byte	0x406
 4446 06ac 94000000 		.4byte	0x94
 4447 06b0 02       		.uleb128 0x2
 4448 06b1 91       		.byte	0x91
 4449 06b2 54       		.sleb128 -44
 4450 06b3 16       		.uleb128 0x16
 4451 06b4 12000000 		.4byte	.LBB7
 4452 06b8 4C000000 		.4byte	.LBE7-.LBB7
 4453 06bc D0060000 		.4byte	0x6d0
 4454 06c0 17       		.uleb128 0x17
 4455 06c1 AD070000 		.4byte	.LASF93
 4456 06c5 01       		.byte	0x1
 4457 06c6 0B04     		.2byte	0x40b
 4458 06c8 09010000 		.4byte	0x109
 4459 06cc 02       		.uleb128 0x2
 4460 06cd 91       		.byte	0x91
 4461 06ce 60       		.sleb128 -32
 4462 06cf 00       		.byte	0
 4463 06d0 1E       		.uleb128 0x1e
 4464 06d1 00000000 		.4byte	.Ldebug_ranges0+0
 4465 06d5 17       		.uleb128 0x17
 4466 06d6 B5070000 		.4byte	.LASF94
 4467 06da 01       		.byte	0x1
 4468 06db 1C04     		.2byte	0x41c
 4469 06dd 94000000 		.4byte	0x94
 4470 06e1 02       		.uleb128 0x2
 4471 06e2 91       		.byte	0x91
 4472 06e3 6C       		.sleb128 -20
 4473 06e4 16       		.uleb128 0x16
 4474 06e5 82000000 		.4byte	.LBB9
 4475 06e9 34000000 		.4byte	.LBE9-.LBB9
 4476 06ed FF060000 		.4byte	0x6ff
 4477 06f1 19       		.uleb128 0x19
 4478 06f2 6900     		.ascii	"i\000"
 4479 06f4 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 101


 4480 06f5 2004     		.2byte	0x420
 4481 06f7 94000000 		.4byte	0x94
 4482 06fb 02       		.uleb128 0x2
 4483 06fc 91       		.byte	0x91
 4484 06fd 68       		.sleb128 -24
 4485 06fe 00       		.byte	0
 4486 06ff 18       		.uleb128 0x18
 4487 0700 C8000000 		.4byte	.LBB10
 4488 0704 52000000 		.4byte	.LBE10-.LBB10
 4489 0708 19       		.uleb128 0x19
 4490 0709 6900     		.ascii	"i\000"
 4491 070b 01       		.byte	0x1
 4492 070c 2D04     		.2byte	0x42d
 4493 070e 94000000 		.4byte	0x94
 4494 0712 02       		.uleb128 0x2
 4495 0713 91       		.byte	0x91
 4496 0714 64       		.sleb128 -28
 4497 0715 00       		.byte	0
 4498 0716 00       		.byte	0
 4499 0717 00       		.byte	0
 4500 0718 07       		.uleb128 0x7
 4501 0719 D9000000 		.4byte	0xd9
 4502 071d 28070000 		.4byte	0x728
 4503 0721 08       		.uleb128 0x8
 4504 0722 42010000 		.4byte	0x142
 4505 0726 01       		.byte	0x1
 4506 0727 00       		.byte	0
 4507 0728 10       		.uleb128 0x10
 4508 0729 D5050000 		.4byte	.LASF95
 4509 072d 01       		.byte	0x1
 4510 072e A1       		.byte	0xa1
 4511 072f 18070000 		.4byte	0x718
 4512 0733 05       		.uleb128 0x5
 4513 0734 03       		.byte	0x3
 4514 0735 1C000000 		.4byte	eepromArray
 4515 0739 07       		.uleb128 0x7
 4516 073a D9000000 		.4byte	0xd9
 4517 073e 49070000 		.4byte	0x749
 4518 0742 08       		.uleb128 0x8
 4519 0743 42010000 		.4byte	0x142
 4520 0747 00       		.byte	0
 4521 0748 00       		.byte	0
 4522 0749 1F       		.uleb128 0x1f
 4523 074a 200A0000 		.4byte	.LASF96
 4524 074e 07       		.byte	0x7
 4525 074f 1001     		.2byte	0x110
 4526 0751 39070000 		.4byte	0x739
 4527 0755 20       		.uleb128 0x20
 4528 0756 65050000 		.4byte	.LASF97
 4529 075a 08       		.byte	0x8
 4530 075b F3       		.byte	0xf3
 4531 075c 36010000 		.4byte	0x136
 4532 0760 20       		.uleb128 0x20
 4533 0761 8E020000 		.4byte	.LASF98
 4534 0765 08       		.byte	0x8
 4535 0766 F9       		.byte	0xf9
 4536 0767 36010000 		.4byte	0x136
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 102


 4537 076b 07       		.uleb128 0x7
 4538 076c D9000000 		.4byte	0xd9
 4539 0770 7B070000 		.4byte	0x77b
 4540 0774 08       		.uleb128 0x8
 4541 0775 42010000 		.4byte	0x142
 4542 0779 3F       		.byte	0x3f
 4543 077a 00       		.byte	0
 4544 077b 20       		.uleb128 0x20
 4545 077c BC090000 		.4byte	.LASF99
 4546 0780 08       		.byte	0x8
 4547 0781 FA       		.byte	0xfa
 4548 0782 6B070000 		.4byte	0x76b
 4549 0786 20       		.uleb128 0x20
 4550 0787 E6090000 		.4byte	.LASF100
 4551 078b 08       		.byte	0x8
 4552 078c FE       		.byte	0xfe
 4553 078d 36010000 		.4byte	0x136
 4554 0791 20       		.uleb128 0x20
 4555 0792 10030000 		.4byte	.LASF101
 4556 0796 08       		.byte	0x8
 4557 0797 FF       		.byte	0xff
 4558 0798 6B070000 		.4byte	0x76b
 4559 079c 20       		.uleb128 0x20
 4560 079d D1040000 		.4byte	.LASF102
 4561 07a1 09       		.byte	0x9
 4562 07a2 82       		.byte	0x82
 4563 07a3 CB010000 		.4byte	0x1cb
 4564 07a7 07       		.uleb128 0x7
 4565 07a8 B8070000 		.4byte	0x7b8
 4566 07ac B8070000 		.4byte	0x7b8
 4567 07b0 21       		.uleb128 0x21
 4568 07b1 42010000 		.4byte	0x142
 4569 07b5 FF03     		.2byte	0x3ff
 4570 07b7 00       		.byte	0
 4571 07b8 22       		.uleb128 0x22
 4572 07b9 A2000000 		.4byte	0xa2
 4573 07bd 23       		.uleb128 0x23
 4574 07be 22020000 		.4byte	.LASF103
 4575 07c2 01       		.byte	0x1
 4576 07c3 AE       		.byte	0xae
 4577 07c4 CE070000 		.4byte	0x7ce
 4578 07c8 05       		.uleb128 0x5
 4579 07c9 03       		.byte	0x3
 4580 07ca 00000000 		.4byte	Em_EEPROM_em_EepromStorage
 4581 07ce 22       		.uleb128 0x22
 4582 07cf A7070000 		.4byte	0x7a7
 4583 07d3 1F       		.uleb128 0x1f
 4584 07d4 1E070000 		.4byte	.LASF104
 4585 07d8 0A       		.byte	0xa
 4586 07d9 1207     		.2byte	0x712
 4587 07db DF070000 		.4byte	0x7df
 4588 07df 06       		.uleb128 0x6
 4589 07e0 B8000000 		.4byte	0xb8
 4590 07e4 23       		.uleb128 0x23
 4591 07e5 0B070000 		.4byte	.LASF105
 4592 07e9 01       		.byte	0x1
 4593 07ea 31       		.byte	0x31
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 103


 4594 07eb 36010000 		.4byte	0x136
 4595 07ef 05       		.uleb128 0x5
 4596 07f0 03       		.byte	0x3
 4597 07f1 00000000 		.4byte	usbActivityCounter
 4598 07f5 23       		.uleb128 0x23
 4599 07f6 31070000 		.4byte	.LASF68
 4600 07fa 01       		.byte	0x1
 4601 07fb 32       		.byte	0x32
 4602 07fc 49010000 		.4byte	0x149
 4603 0800 05       		.uleb128 0x5
 4604 0801 03       		.byte	0x3
 4605 0802 00000000 		.4byte	midiMsg
 4606 0806 23       		.uleb128 0x23
 4607 0807 0D060000 		.4byte	.LASF106
 4608 080b 01       		.byte	0x1
 4609 080c 33       		.byte	0x33
 4610 080d 0F020000 		.4byte	0x20f
 4611 0811 05       		.uleb128 0x5
 4612 0812 03       		.byte	0x3
 4613 0813 00000000 		.4byte	currentVBUS
 4614 0817 23       		.uleb128 0x23
 4615 0818 DD010000 		.4byte	.LASF107
 4616 081c 01       		.byte	0x1
 4617 081d 34       		.byte	0x34
 4618 081e 0F020000 		.4byte	0x20f
 4619 0822 05       		.uleb128 0x5
 4620 0823 03       		.byte	0x3
 4621 0824 00000000 		.4byte	prevVBUS
 4622 0828 23       		.uleb128 0x23
 4623 0829 BD080000 		.4byte	.LASF108
 4624 082d 01       		.byte	0x1
 4625 082e 35       		.byte	0x35
 4626 082f 0F020000 		.4byte	0x20f
 4627 0833 05       		.uleb128 0x5
 4628 0834 03       		.byte	0x3
 4629 0835 00000000 		.4byte	USB_active
 4630 0839 23       		.uleb128 0x23
 4631 083a 6A060000 		.4byte	.LASF109
 4632 083e 01       		.byte	0x1
 4633 083f 36       		.byte	0x36
 4634 0840 0F020000 		.4byte	0x20f
 4635 0844 05       		.uleb128 0x5
 4636 0845 03       		.byte	0x3
 4637 0846 00000000 		.4byte	USB_check_flag
 4638 084a 23       		.uleb128 0x23
 4639 084b F1080000 		.4byte	.LASF110
 4640 084f 01       		.byte	0x1
 4641 0850 38       		.byte	0x38
 4642 0851 AD000000 		.4byte	0xad
 4643 0855 05       		.uleb128 0x5
 4644 0856 03       		.byte	0x3
 4645 0857 00000000 		.4byte	midiSent
 4646 085b 23       		.uleb128 0x23
 4647 085c C2010000 		.4byte	.LASF111
 4648 0860 01       		.byte	0x1
 4649 0861 39       		.byte	0x39
 4650 0862 AD000000 		.4byte	0xad
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 104


 4651 0866 05       		.uleb128 0x5
 4652 0867 03       		.byte	0x3
 4653 0868 00000000 		.4byte	midiOverflow
 4654 086c 23       		.uleb128 0x23
 4655 086d 00000000 		.4byte	.LASF112
 4656 0871 01       		.byte	0x1
 4657 0872 3B       		.byte	0x3b
 4658 0873 24020000 		.4byte	0x224
 4659 0877 05       		.uleb128 0x5
 4660 0878 03       		.byte	0x3
 4661 0879 00000000 		.4byte	scanPart
 4662 087d 23       		.uleb128 0x23
 4663 087e 81060000 		.4byte	.LASF73
 4664 0882 01       		.byte	0x1
 4665 0883 3C       		.byte	0x3c
 4666 0884 24020000 		.4byte	0x224
 4667 0888 05       		.uleb128 0x5
 4668 0889 03       		.byte	0x3
 4669 088a 00000000 		.4byte	channel
 4670 088e 07       		.uleb128 0x7
 4671 088f 0F020000 		.4byte	0x20f
 4672 0893 9E080000 		.4byte	0x89e
 4673 0897 08       		.uleb128 0x8
 4674 0898 42010000 		.4byte	0x142
 4675 089c FF       		.byte	0xff
 4676 089d 00       		.byte	0
 4677 089e 23       		.uleb128 0x23
 4678 089f 14000000 		.4byte	.LASF113
 4679 08a3 01       		.byte	0x1
 4680 08a4 50       		.byte	0x50
 4681 08a5 AF080000 		.4byte	0x8af
 4682 08a9 05       		.uleb128 0x5
 4683 08aa 03       		.byte	0x3
 4684 08ab 00000000 		.4byte	I2Cbuff1
 4685 08af 06       		.uleb128 0x6
 4686 08b0 8E080000 		.4byte	0x88e
 4687 08b4 07       		.uleb128 0x7
 4688 08b5 A2000000 		.4byte	0xa2
 4689 08b9 C4080000 		.4byte	0x8c4
 4690 08bd 08       		.uleb128 0x8
 4691 08be 42010000 		.4byte	0x142
 4692 08c2 00       		.byte	0
 4693 08c3 00       		.byte	0
 4694 08c4 23       		.uleb128 0x23
 4695 08c5 2A040000 		.4byte	.LASF114
 4696 08c9 01       		.byte	0x1
 4697 08ca 51       		.byte	0x51
 4698 08cb B4080000 		.4byte	0x8b4
 4699 08cf 05       		.uleb128 0x5
 4700 08d0 03       		.byte	0x3
 4701 08d1 00000000 		.4byte	stringCapSensorsOnOff
 4702 08d5 07       		.uleb128 0x7
 4703 08d6 A2000000 		.4byte	0xa2
 4704 08da E5080000 		.4byte	0x8e5
 4705 08de 08       		.uleb128 0x8
 4706 08df 42010000 		.4byte	0x142
 4707 08e3 0F       		.byte	0xf
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 105


 4708 08e4 00       		.byte	0
 4709 08e5 23       		.uleb128 0x23
 4710 08e6 18050000 		.4byte	.LASF115
 4711 08ea 01       		.byte	0x1
 4712 08eb 52       		.byte	0x52
 4713 08ec D5080000 		.4byte	0x8d5
 4714 08f0 05       		.uleb128 0x5
 4715 08f1 03       		.byte	0x3
 4716 08f2 00000000 		.4byte	stringCapSensorsRaw
 4717 08f6 07       		.uleb128 0x7
 4718 08f7 A2000000 		.4byte	0xa2
 4719 08fb 06090000 		.4byte	0x906
 4720 08ff 08       		.uleb128 0x8
 4721 0900 42010000 		.4byte	0x142
 4722 0904 07       		.byte	0x7
 4723 0905 00       		.byte	0
 4724 0906 23       		.uleb128 0x23
 4725 0907 69020000 		.4byte	.LASF116
 4726 090b 01       		.byte	0x1
 4727 090c 53       		.byte	0x53
 4728 090d F6080000 		.4byte	0x8f6
 4729 0911 05       		.uleb128 0x5
 4730 0912 03       		.byte	0x3
 4731 0913 00000000 		.4byte	thresholdArray
 4732 0917 07       		.uleb128 0x7
 4733 0918 C3000000 		.4byte	0xc3
 4734 091c 2D090000 		.4byte	0x92d
 4735 0920 08       		.uleb128 0x8
 4736 0921 42010000 		.4byte	0x142
 4737 0925 03       		.byte	0x3
 4738 0926 08       		.uleb128 0x8
 4739 0927 42010000 		.4byte	0x142
 4740 092b 01       		.byte	0x1
 4741 092c 00       		.byte	0
 4742 092d 23       		.uleb128 0x23
 4743 092e 2C050000 		.4byte	.LASF117
 4744 0932 01       		.byte	0x1
 4745 0933 5C       		.byte	0x5c
 4746 0934 17090000 		.4byte	0x917
 4747 0938 05       		.uleb128 0x5
 4748 0939 03       		.byte	0x3
 4749 093a 00000000 		.4byte	fretMeasurements
 4750 093e 07       		.uleb128 0x7
 4751 093f 09010000 		.4byte	0x109
 4752 0943 4E090000 		.4byte	0x94e
 4753 0947 08       		.uleb128 0x8
 4754 0948 42010000 		.4byte	0x142
 4755 094c 01       		.byte	0x1
 4756 094d 00       		.byte	0
 4757 094e 23       		.uleb128 0x23
 4758 094f 02040000 		.4byte	.LASF118
 4759 0953 01       		.byte	0x1
 4760 0954 6A       		.byte	0x6a
 4761 0955 3E090000 		.4byte	0x93e
 4762 0959 05       		.uleb128 0x5
 4763 095a 03       		.byte	0x3
 4764 095b 00000000 		.4byte	fretRatios
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 106


 4765 095f 07       		.uleb128 0x7
 4766 0960 B8000000 		.4byte	0xb8
 4767 0964 6F090000 		.4byte	0x96f
 4768 0968 08       		.uleb128 0x8
 4769 0969 42010000 		.4byte	0x142
 4770 096d 03       		.byte	0x3
 4771 096e 00       		.byte	0
 4772 096f 23       		.uleb128 0x23
 4773 0970 AF040000 		.4byte	.LASF119
 4774 0974 01       		.byte	0x1
 4775 0975 6E       		.byte	0x6e
 4776 0976 5F090000 		.4byte	0x95f
 4777 097a 05       		.uleb128 0x5
 4778 097b 03       		.byte	0x3
 4779 097c 00000000 		.4byte	linearPotValue32Bit
 4780 0980 24       		.uleb128 0x24
 4781 0981 6900     		.ascii	"i\000"
 4782 0983 01       		.byte	0x1
 4783 0984 6F       		.byte	0x6f
 4784 0985 A2000000 		.4byte	0xa2
 4785 0989 05       		.uleb128 0x5
 4786 098a 03       		.byte	0x3
 4787 098b 00000000 		.4byte	i
 4788 098f 23       		.uleb128 0x23
 4789 0990 BB030000 		.4byte	.LASF120
 4790 0994 01       		.byte	0x1
 4791 0995 70       		.byte	0x70
 4792 0996 A2000000 		.4byte	0xa2
 4793 099a 05       		.uleb128 0x5
 4794 099b 03       		.byte	0x3
 4795 099c 00000000 		.4byte	counter
 4796 09a0 23       		.uleb128 0x23
 4797 09a1 19060000 		.4byte	.LASF121
 4798 09a5 01       		.byte	0x1
 4799 09a6 71       		.byte	0x71
 4800 09a7 B8000000 		.4byte	0xb8
 4801 09ab 05       		.uleb128 0x5
 4802 09ac 03       		.byte	0x3
 4803 09ad 00000000 		.4byte	temper
 4804 09b1 07       		.uleb128 0x7
 4805 09b2 94000000 		.4byte	0x94
 4806 09b6 C1090000 		.4byte	0x9c1
 4807 09ba 08       		.uleb128 0x8
 4808 09bb 42010000 		.4byte	0x142
 4809 09bf 0A       		.byte	0xa
 4810 09c0 00       		.byte	0
 4811 09c1 23       		.uleb128 0x23
 4812 09c2 3C060000 		.4byte	.LASF122
 4813 09c6 01       		.byte	0x1
 4814 09c7 72       		.byte	0x72
 4815 09c8 B1090000 		.4byte	0x9b1
 4816 09cc 05       		.uleb128 0x5
 4817 09cd 03       		.byte	0x3
 4818 09ce 00000000 		.4byte	previousButtons
 4819 09d2 23       		.uleb128 0x23
 4820 09d3 B5090000 		.4byte	.LASF123
 4821 09d7 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 107


 4822 09d8 73       		.byte	0x73
 4823 09d9 94000000 		.4byte	0x94
 4824 09dd 05       		.uleb128 0x5
 4825 09de 03       		.byte	0x3
 4826 09df 00000000 		.4byte	octave
 4827 09e3 07       		.uleb128 0x7
 4828 09e4 94000000 		.4byte	0x94
 4829 09e8 F3090000 		.4byte	0x9f3
 4830 09ec 08       		.uleb128 0x8
 4831 09ed 42010000 		.4byte	0x142
 4832 09f1 03       		.byte	0x3
 4833 09f2 00       		.byte	0
 4834 09f3 23       		.uleb128 0x23
 4835 09f4 00060000 		.4byte	.LASF124
 4836 09f8 01       		.byte	0x1
 4837 09f9 75       		.byte	0x75
 4838 09fa E3090000 		.4byte	0x9e3
 4839 09fe 05       		.uleb128 0x5
 4840 09ff 03       		.byte	0x3
 4841 0a00 00000000 		.4byte	stringPlucks
 4842 0a04 23       		.uleb128 0x23
 4843 0a05 59070000 		.4byte	.LASF125
 4844 0a09 01       		.byte	0x1
 4845 0a0a 76       		.byte	0x76
 4846 0a0b E3090000 		.4byte	0x9e3
 4847 0a0f 05       		.uleb128 0x5
 4848 0a10 03       		.byte	0x3
 4849 0a11 00000000 		.4byte	stringPlucksPrev
 4850 0a15 07       		.uleb128 0x7
 4851 0a16 C3000000 		.4byte	0xc3
 4852 0a1a 2B0A0000 		.4byte	0xa2b
 4853 0a1e 08       		.uleb128 0x8
 4854 0a1f 42010000 		.4byte	0x142
 4855 0a23 04       		.byte	0x4
 4856 0a24 08       		.uleb128 0x8
 4857 0a25 42010000 		.4byte	0x142
 4858 0a29 07       		.byte	0x7
 4859 0a2a 00       		.byte	0
 4860 0a2b 23       		.uleb128 0x23
 4861 0a2c DC060000 		.4byte	.LASF126
 4862 0a30 01       		.byte	0x1
 4863 0a31 7B       		.byte	0x7b
 4864 0a32 150A0000 		.4byte	0xa15
 4865 0a36 05       		.uleb128 0x5
 4866 0a37 03       		.byte	0x3
 4867 0a38 00000000 		.4byte	knobsFIR
 4868 0a3c 07       		.uleb128 0x7
 4869 0a3d 09010000 		.4byte	0x109
 4870 0a41 4C0A0000 		.4byte	0xa4c
 4871 0a45 08       		.uleb128 0x8
 4872 0a46 42010000 		.4byte	0x142
 4873 0a4a 03       		.byte	0x3
 4874 0a4b 00       		.byte	0
 4875 0a4c 23       		.uleb128 0x23
 4876 0a4d 64040000 		.4byte	.LASF127
 4877 0a51 01       		.byte	0x1
 4878 0a52 82       		.byte	0x82
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 108


 4879 0a53 3C0A0000 		.4byte	0xa3c
 4880 0a57 05       		.uleb128 0x5
 4881 0a58 03       		.byte	0x3
 4882 0a59 00000000 		.4byte	hysteresisStates
 4883 0a5d 23       		.uleb128 0x23
 4884 0a5e 3D020000 		.4byte	.LASF128
 4885 0a62 01       		.byte	0x1
 4886 0a63 83       		.byte	0x83
 4887 0a64 09010000 		.4byte	0x109
 4888 0a68 05       		.uleb128 0x5
 4889 0a69 03       		.byte	0x3
 4890 0a6a 00000000 		.4byte	hysteresisLowThresh
 4891 0a6e 23       		.uleb128 0x23
 4892 0a6f 7A030000 		.4byte	.LASF129
 4893 0a73 01       		.byte	0x1
 4894 0a74 84       		.byte	0x84
 4895 0a75 09010000 		.4byte	0x109
 4896 0a79 05       		.uleb128 0x5
 4897 0a7a 03       		.byte	0x3
 4898 0a7b 00000000 		.4byte	hysteresisHighThresh
 4899 0a7f 23       		.uleb128 0x23
 4900 0a80 A0050000 		.4byte	.LASF130
 4901 0a84 01       		.byte	0x1
 4902 0a85 99       		.byte	0x99
 4903 0a86 36010000 		.4byte	0x136
 4904 0a8a 05       		.uleb128 0x5
 4905 0a8b 03       		.byte	0x3
 4906 0a8c 00000000 		.4byte	txChannel
 4907 0a90 23       		.uleb128 0x23
 4908 0a91 C9050000 		.4byte	.LASF131
 4909 0a95 01       		.byte	0x1
 4910 0a96 9A       		.byte	0x9a
 4911 0a97 36010000 		.4byte	0x136
 4912 0a9b 05       		.uleb128 0x5
 4913 0a9c 03       		.byte	0x3
 4914 0a9d 00000000 		.4byte	txTD
 4915 0aa1 07       		.uleb128 0x7
 4916 0aa2 36010000 		.4byte	0x136
 4917 0aa6 B10A0000 		.4byte	0xab1
 4918 0aaa 08       		.uleb128 0x8
 4919 0aab 42010000 		.4byte	0x142
 4920 0aaf 0F       		.byte	0xf
 4921 0ab0 00       		.byte	0
 4922 0ab1 23       		.uleb128 0x23
 4923 0ab2 B4060000 		.4byte	.LASF132
 4924 0ab6 01       		.byte	0x1
 4925 0ab7 9B       		.byte	0x9b
 4926 0ab8 C20A0000 		.4byte	0xac2
 4927 0abc 05       		.uleb128 0x5
 4928 0abd 03       		.byte	0x3
 4929 0abe 00000000 		.4byte	txBuffer
 4930 0ac2 06       		.uleb128 0x6
 4931 0ac3 A10A0000 		.4byte	0xaa1
 4932 0ac7 23       		.uleb128 0x23
 4933 0ac8 A3030000 		.4byte	.LASF133
 4934 0acc 01       		.byte	0x1
 4935 0acd 9D       		.byte	0x9d
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 109


 4936 0ace 36010000 		.4byte	0x136
 4937 0ad2 05       		.uleb128 0x5
 4938 0ad3 03       		.byte	0x3
 4939 0ad4 00000000 		.4byte	rxChannel
 4940 0ad8 23       		.uleb128 0x23
 4941 0ad9 8B040000 		.4byte	.LASF134
 4942 0add 01       		.byte	0x1
 4943 0ade 9E       		.byte	0x9e
 4944 0adf 36010000 		.4byte	0x136
 4945 0ae3 05       		.uleb128 0x5
 4946 0ae4 03       		.byte	0x3
 4947 0ae5 00000000 		.4byte	rxTD
 4948 0ae9 23       		.uleb128 0x23
 4949 0aea 55060000 		.4byte	.LASF135
 4950 0aee 01       		.byte	0x1
 4951 0aef 9F       		.byte	0x9f
 4952 0af0 FA0A0000 		.4byte	0xafa
 4953 0af4 05       		.uleb128 0x5
 4954 0af5 03       		.byte	0x3
 4955 0af6 00000000 		.4byte	rxBuffer
 4956 0afa 06       		.uleb128 0x6
 4957 0afb A10A0000 		.4byte	0xaa1
 4958 0aff 23       		.uleb128 0x23
 4959 0b00 20060000 		.4byte	.LASF136
 4960 0b04 01       		.byte	0x1
 4961 0b05 A3       		.byte	0xa3
 4962 0b06 18070000 		.4byte	0x718
 4963 0b0a 05       		.uleb128 0x5
 4964 0b0b 03       		.byte	0x3
 4965 0b0c 00000000 		.4byte	array
 4966 0b10 23       		.uleb128 0x23
 4967 0b11 FA080000 		.4byte	.LASF137
 4968 0b15 01       		.byte	0x1
 4969 0b16 A6       		.byte	0xa6
 4970 0b17 03020000 		.4byte	0x203
 4971 0b1b 05       		.uleb128 0x5
 4972 0b1c 03       		.byte	0x3
 4973 0b1d 00000000 		.4byte	eepromReturnValue
 4974 0b21 23       		.uleb128 0x23
 4975 0b22 09000000 		.4byte	.LASF138
 4976 0b26 01       		.byte	0x1
 4977 0b27 B2       		.byte	0xb2
 4978 0b28 D9000000 		.4byte	0xd9
 4979 0b2c 05       		.uleb128 0x5
 4980 0b2d 03       		.byte	0x3
 4981 0b2e 00000000 		.4byte	eeprom_cnt
 4982 0b32 23       		.uleb128 0x23
 4983 0b33 F5040000 		.4byte	.LASF88
 4984 0b37 01       		.byte	0x1
 4985 0b38 B3       		.byte	0xb3
 4986 0b39 1E010000 		.4byte	0x11e
 4987 0b3d 05       		.uleb128 0x5
 4988 0b3e 03       		.byte	0x3
 4989 0b3f 00000000 		.4byte	status
 4990 0b43 24       		.uleb128 0x24
 4991 0b44 70747200 		.ascii	"ptr\000"
 4992 0b48 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 110


 4993 0b49 B4       		.byte	0xb4
 4994 0b4a 540B0000 		.4byte	0xb54
 4995 0b4e 05       		.uleb128 0x5
 4996 0b4f 03       		.byte	0x3
 4997 0b50 00000000 		.4byte	ptr
 4998 0b54 1C       		.uleb128 0x1c
 4999 0b55 04       		.byte	0x4
 5000 0b56 5F0B0000 		.4byte	0xb5f
 5001 0b5a 22       		.uleb128 0x22
 5002 0b5b D9000000 		.4byte	0xd9
 5003 0b5f 06       		.uleb128 0x6
 5004 0b60 5A0B0000 		.4byte	0xb5a
 5005 0b64 23       		.uleb128 0x23
 5006 0b65 F0050000 		.4byte	.LASF139
 5007 0b69 01       		.byte	0x1
 5008 0b6a B5       		.byte	0xb5
 5009 0b6b 750B0000 		.4byte	0xb75
 5010 0b6f 05       		.uleb128 0x5
 5011 0b70 03       		.byte	0x3
 5012 0b71 00000000 		.4byte	barCount
 5013 0b75 06       		.uleb128 0x6
 5014 0b76 94000000 		.4byte	0x94
 5015 0b7a 07       		.uleb128 0x7
 5016 0b7b 94000000 		.4byte	0x94
 5017 0b7f 900B0000 		.4byte	0xb90
 5018 0b83 08       		.uleb128 0x8
 5019 0b84 42010000 		.4byte	0x142
 5020 0b88 03       		.byte	0x3
 5021 0b89 08       		.uleb128 0x8
 5022 0b8a 42010000 		.4byte	0x142
 5023 0b8e 01       		.byte	0x1
 5024 0b8f 00       		.byte	0
 5025 0b90 23       		.uleb128 0x23
 5026 0b91 36030000 		.4byte	.LASF140
 5027 0b95 01       		.byte	0x1
 5028 0b96 B9       		.byte	0xb9
 5029 0b97 7A0B0000 		.4byte	0xb7a
 5030 0b9b 05       		.uleb128 0x5
 5031 0b9c 03       		.byte	0x3
 5032 0b9d 00000000 		.4byte	stringStates
 5033 0ba1 23       		.uleb128 0x23
 5034 0ba2 89060000 		.4byte	.LASF141
 5035 0ba6 01       		.byte	0x1
 5036 0ba7 F3       		.byte	0xf3
 5037 0ba8 750B0000 		.4byte	0xb75
 5038 0bac 05       		.uleb128 0x5
 5039 0bad 03       		.byte	0x3
 5040 0bae 00000000 		.4byte	whichLinearSensor
 5041 0bb2 23       		.uleb128 0x23
 5042 0bb3 6A070000 		.4byte	.LASF142
 5043 0bb7 01       		.byte	0x1
 5044 0bb8 FC       		.byte	0xfc
 5045 0bb9 750B0000 		.4byte	0xb75
 5046 0bbd 05       		.uleb128 0x5
 5047 0bbe 03       		.byte	0x3
 5048 0bbf 00000000 		.4byte	testVar
 5049 0bc3 23       		.uleb128 0x23
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 111


 5050 0bc4 70030000 		.4byte	.LASF143
 5051 0bc8 01       		.byte	0x1
 5052 0bc9 FD       		.byte	0xfd
 5053 0bca E3090000 		.4byte	0x9e3
 5054 0bce 05       		.uleb128 0x5
 5055 0bcf 03       		.byte	0x3
 5056 0bd0 00000000 		.4byte	lastNotes
 5057 0bd4 23       		.uleb128 0x23
 5058 0bd5 E5060000 		.4byte	.LASF144
 5059 0bd9 01       		.byte	0x1
 5060 0bda FE       		.byte	0xfe
 5061 0bdb 94000000 		.4byte	0x94
 5062 0bdf 05       		.uleb128 0x5
 5063 0be0 03       		.byte	0x3
 5064 0be1 00000000 		.4byte	frettedState
 5065 0be5 23       		.uleb128 0x23
 5066 0be6 95030000 		.4byte	.LASF145
 5067 0bea 01       		.byte	0x1
 5068 0beb FF       		.byte	0xff
 5069 0bec 94000000 		.4byte	0x94
 5070 0bf0 05       		.uleb128 0x5
 5071 0bf1 03       		.byte	0x3
 5072 0bf2 00000000 		.4byte	polyMode
 5073 0bf6 25       		.uleb128 0x25
 5074 0bf7 25090000 		.4byte	.LASF146
 5075 0bfb 01       		.byte	0x1
 5076 0bfc 0101     		.2byte	0x101
 5077 0bfe 3C0A0000 		.4byte	0xa3c
 5078 0c02 05       		.uleb128 0x5
 5079 0c03 03       		.byte	0x3
 5080 0c04 00000000 		.4byte	pitchBendsPerString
 5081 0c08 25       		.uleb128 0x25
 5082 0c09 E6010000 		.4byte	.LASF147
 5083 0c0d 01       		.byte	0x1
 5084 0c0e 0201     		.2byte	0x102
 5085 0c10 E3090000 		.4byte	0x9e3
 5086 0c14 05       		.uleb128 0x5
 5087 0c15 03       		.byte	0x3
 5088 0c16 00000000 		.4byte	openStringCount
 5089 0c1a 25       		.uleb128 0x25
 5090 0c1b CF010000 		.4byte	.LASF148
 5091 0c1f 01       		.byte	0x1
 5092 0c20 0301     		.2byte	0x103
 5093 0c22 94000000 		.4byte	0x94
 5094 0c26 05       		.uleb128 0x5
 5095 0c27 03       		.byte	0x3
 5096 0c28 00000000 		.4byte	loudestString
 5097 0c2c 25       		.uleb128 0x25
 5098 0c2d 22030000 		.4byte	.LASF149
 5099 0c31 01       		.byte	0x1
 5100 0c32 0401     		.2byte	0x104
 5101 0c34 CE000000 		.4byte	0xce
 5102 0c38 05       		.uleb128 0x5
 5103 0c39 03       		.byte	0x3
 5104 0c3a 00000000 		.4byte	timeSinceLastAttack
 5105 0c3e 25       		.uleb128 0x25
 5106 0c3f 9B060000 		.4byte	.LASF150
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 112


 5107 0c43 01       		.byte	0x1
 5108 0c44 0501     		.2byte	0x105
 5109 0c46 3C0A0000 		.4byte	0xa3c
 5110 0c4a 05       		.uleb128 0x5
 5111 0c4b 03       		.byte	0x3
 5112 0c4c 00000000 		.4byte	previousHysteresisStates
 5113 0c50 25       		.uleb128 0x25
 5114 0c51 CC060000 		.4byte	.LASF151
 5115 0c55 01       		.byte	0x1
 5116 0c56 0601     		.2byte	0x106
 5117 0c58 3C0A0000 		.4byte	0xa3c
 5118 0c5c 05       		.uleb128 0x5
 5119 0c5d 03       		.byte	0x3
 5120 0c5e 00000000 		.4byte	openStringFreqs
 5121 0c62 25       		.uleb128 0x25
 5122 0c63 BD060000 		.4byte	.LASF152
 5123 0c67 01       		.byte	0x1
 5124 0c68 0701     		.2byte	0x107
 5125 0c6a 3C0A0000 		.4byte	0xa3c
 5126 0c6e 05       		.uleb128 0x5
 5127 0c6f 03       		.byte	0x3
 5128 0c70 00000000 		.4byte	openStringMIDI
 5129 0c74 25       		.uleb128 0x25
 5130 0c75 CD090000 		.4byte	.LASF153
 5131 0c79 01       		.byte	0x1
 5132 0c7a 0801     		.2byte	0x108
 5133 0c7c 3C0A0000 		.4byte	0xa3c
 5134 0c80 05       		.uleb128 0x5
 5135 0c81 03       		.byte	0x3
 5136 0c82 00000000 		.4byte	invStringMappedPositions
 5137 0c86 25       		.uleb128 0x25
 5138 0c87 ED030000 		.4byte	.LASF154
 5139 0c8b 01       		.byte	0x1
 5140 0c8c 0901     		.2byte	0x109
 5141 0c8e 3C0A0000 		.4byte	0xa3c
 5142 0c92 05       		.uleb128 0x5
 5143 0c93 03       		.byte	0x3
 5144 0c94 00000000 		.4byte	stringMIDI
 5145 0c98 25       		.uleb128 0x25
 5146 0c99 E1050000 		.4byte	.LASF155
 5147 0c9d 01       		.byte	0x1
 5148 0c9e 0A01     		.2byte	0x10a
 5149 0ca0 3C0A0000 		.4byte	0xa3c
 5150 0ca4 05       		.uleb128 0x5
 5151 0ca5 03       		.byte	0x3
 5152 0ca6 00000000 		.4byte	stringMIDIPrev
 5153 0caa 25       		.uleb128 0x25
 5154 0cab 53040000 		.4byte	.LASF156
 5155 0caf 01       		.byte	0x1
 5156 0cb0 0B01     		.2byte	0x10b
 5157 0cb2 09010000 		.4byte	0x109
 5158 0cb6 05       		.uleb128 0x5
 5159 0cb7 03       		.byte	0x3
 5160 0cb8 00000000 		.4byte	linearHysteresis
 5161 0cbc 25       		.uleb128 0x25
 5162 0cbd FD030000 		.4byte	.LASF157
 5163 0cc1 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 113


 5164 0cc2 0C01     		.2byte	0x10c
 5165 0cc4 3C0A0000 		.4byte	0xa3c
 5166 0cc8 05       		.uleb128 0x5
 5167 0cc9 03       		.byte	0x3
 5168 0cca 00000000 		.4byte	hp_y
 5169 0cce 25       		.uleb128 0x25
 5170 0ccf F8030000 		.4byte	.LASF158
 5171 0cd3 01       		.byte	0x1
 5172 0cd4 0D01     		.2byte	0x10d
 5173 0cd6 3C0A0000 		.4byte	0xa3c
 5174 0cda 05       		.uleb128 0x5
 5175 0cdb 03       		.byte	0x3
 5176 0cdc 00000000 		.4byte	hp_x
 5177 0ce0 25       		.uleb128 0x25
 5178 0ce1 9E030000 		.4byte	.LASF159
 5179 0ce5 01       		.byte	0x1
 5180 0ce6 0E01     		.2byte	0x10e
 5181 0ce8 09010000 		.4byte	0x109
 5182 0cec 05       		.uleb128 0x5
 5183 0ced 03       		.byte	0x3
 5184 0cee 00000000 		.4byte	hp_R
 5185 0cf2 25       		.uleb128 0x25
 5186 0cf3 93080000 		.4byte	.LASF160
 5187 0cf7 01       		.byte	0x1
 5188 0cf8 1001     		.2byte	0x110
 5189 0cfa 3C0A0000 		.4byte	0xa3c
 5190 0cfe 05       		.uleb128 0x5
 5191 0cff 03       		.byte	0x3
 5192 0d00 00000000 		.4byte	vibratoCrossfade
 5193 0d04 25       		.uleb128 0x25
 5194 0d05 45070000 		.4byte	.LASF161
 5195 0d09 01       		.byte	0x1
 5196 0d0a 1101     		.2byte	0x111
 5197 0d0c E3090000 		.4byte	0x9e3
 5198 0d10 05       		.uleb128 0x5
 5199 0d11 03       		.byte	0x3
 5200 0d12 00000000 		.4byte	crossFadeStartCount
 5201 0d16 25       		.uleb128 0x25
 5202 0d17 FD090000 		.4byte	.LASF162
 5203 0d1b 01       		.byte	0x1
 5204 0d1c 1301     		.2byte	0x113
 5205 0d1e 94000000 		.4byte	0x94
 5206 0d22 05       		.uleb128 0x5
 5207 0d23 03       		.byte	0x3
 5208 0d24 00000000 		.4byte	previousPitchBendsSent
 5209 0d28 25       		.uleb128 0x25
 5210 0d29 2B070000 		.4byte	.LASF163
 5211 0d2d 01       		.byte	0x1
 5212 0d2e 1401     		.2byte	0x114
 5213 0d30 14020000 		.4byte	0x214
 5214 0d34 05       		.uleb128 0x5
 5215 0d35 03       		.byte	0x3
 5216 0d36 00000000 		.4byte	knobs
 5217 0d3a 25       		.uleb128 0x25
 5218 0d3b 00080000 		.4byte	.LASF164
 5219 0d3f 01       		.byte	0x1
 5220 0d40 1501     		.2byte	0x115
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 114


 5221 0d42 94000000 		.4byte	0x94
 5222 0d46 05       		.uleb128 0x5
 5223 0d47 03       		.byte	0x3
 5224 0d48 00000000 		.4byte	buttons
 5225 0d4c 25       		.uleb128 0x25
 5226 0d4d 40040000 		.4byte	.LASF165
 5227 0d51 01       		.byte	0x1
 5228 0d52 1701     		.2byte	0x117
 5229 0d54 94000000 		.4byte	0x94
 5230 0d58 05       		.uleb128 0x5
 5231 0d59 03       		.byte	0x3
 5232 0d5a 00000000 		.4byte	firPointer
 5233 0d5e 07       		.uleb128 0x7
 5234 0d5f A2000000 		.4byte	0xa2
 5235 0d63 6E0D0000 		.4byte	0xd6e
 5236 0d67 08       		.uleb128 0x8
 5237 0d68 42010000 		.4byte	0x142
 5238 0d6c 04       		.byte	0x4
 5239 0d6d 00       		.byte	0
 5240 0d6e 25       		.uleb128 0x25
 5241 0d6f E3040000 		.4byte	.LASF166
 5242 0d73 01       		.byte	0x1
 5243 0d74 1801     		.2byte	0x118
 5244 0d76 5E0D0000 		.4byte	0xd5e
 5245 0d7a 05       		.uleb128 0x5
 5246 0d7b 03       		.byte	0x3
 5247 0d7c 00000000 		.4byte	knobs7bit
 5248 0d80 07       		.uleb128 0x7
 5249 0d81 AD000000 		.4byte	0xad
 5250 0d85 900D0000 		.4byte	0xd90
 5251 0d89 08       		.uleb128 0x8
 5252 0d8a 42010000 		.4byte	0x142
 5253 0d8e 04       		.byte	0x4
 5254 0d8f 00       		.byte	0
 5255 0d90 25       		.uleb128 0x25
 5256 0d91 9A070000 		.4byte	.LASF167
 5257 0d95 01       		.byte	0x1
 5258 0d96 1901     		.2byte	0x119
 5259 0d98 800D0000 		.4byte	0xd80
 5260 0d9c 05       		.uleb128 0x5
 5261 0d9d 03       		.byte	0x3
 5262 0d9e 00000000 		.4byte	knobs7bitPrev
 5263 0da2 25       		.uleb128 0x25
 5264 0da3 72090000 		.4byte	.LASF168
 5265 0da7 01       		.byte	0x1
 5266 0da8 1A01     		.2byte	0x11a
 5267 0daa 800D0000 		.4byte	0xd80
 5268 0dae 05       		.uleb128 0x5
 5269 0daf 03       		.byte	0x3
 5270 0db0 00000000 		.4byte	knobs7bitPrevLS
 5271 0db4 25       		.uleb128 0x25
 5272 0db5 A9020000 		.4byte	.LASF169
 5273 0db9 01       		.byte	0x1
 5274 0dba 1B01     		.2byte	0x11b
 5275 0dbc AD000000 		.4byte	0xad
 5276 0dc0 05       		.uleb128 0x5
 5277 0dc1 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 115


 5278 0dc2 00000000 		.4byte	knobs7bitHysteresis
 5279 0dc6 25       		.uleb128 0x25
 5280 0dc7 3A000000 		.4byte	.LASF170
 5281 0dcb 01       		.byte	0x1
 5282 0dcc 1D01     		.2byte	0x11d
 5283 0dce 2F020000 		.4byte	0x22f
 5284 0dd2 05       		.uleb128 0x5
 5285 0dd3 03       		.byte	0x3
 5286 0dd4 00000000 		.4byte	linFirPointer
 5287 0dd8 25       		.uleb128 0x25
 5288 0dd9 5F020000 		.4byte	.LASF171
 5289 0ddd 01       		.byte	0x1
 5290 0dde 1E01     		.2byte	0x11e
 5291 0de0 17090000 		.4byte	0x917
 5292 0de4 05       		.uleb128 0x5
 5293 0de5 03       		.byte	0x3
 5294 0de6 00000000 		.4byte	linearFIR
 5295 0dea 07       		.uleb128 0x7
 5296 0deb C3000000 		.4byte	0xc3
 5297 0def FA0D0000 		.4byte	0xdfa
 5298 0df3 08       		.uleb128 0x8
 5299 0df4 42010000 		.4byte	0x142
 5300 0df8 03       		.byte	0x3
 5301 0df9 00       		.byte	0
 5302 0dfa 25       		.uleb128 0x25
 5303 0dfb 91050000 		.4byte	.LASF172
 5304 0dff 01       		.byte	0x1
 5305 0e00 1F01     		.2byte	0x11f
 5306 0e02 EA0D0000 		.4byte	0xdea
 5307 0e06 05       		.uleb128 0x5
 5308 0e07 03       		.byte	0x3
 5309 0e08 00000000 		.4byte	linearSmoothed
 5310 0e0c 25       		.uleb128 0x25
 5311 0e0d 20080000 		.4byte	.LASF173
 5312 0e11 01       		.byte	0x1
 5313 0e12 2001     		.2byte	0x120
 5314 0e14 EA0D0000 		.4byte	0xdea
 5315 0e18 05       		.uleb128 0x5
 5316 0e19 03       		.byte	0x3
 5317 0e1a 00000000 		.4byte	linearSmoothedPrev
 5318 0e1e 25       		.uleb128 0x25
 5319 0e1f 51020000 		.4byte	.LASF174
 5320 0e23 01       		.byte	0x1
 5321 0e24 2101     		.2byte	0x121
 5322 0e26 EA0D0000 		.4byte	0xdea
 5323 0e2a 05       		.uleb128 0x5
 5324 0e2b 03       		.byte	0x3
 5325 0e2c 00000000 		.4byte	LHMuteCounter
 5326 0e30 25       		.uleb128 0x25
 5327 0e31 89070000 		.4byte	.LASF175
 5328 0e35 01       		.byte	0x1
 5329 0e36 2201     		.2byte	0x122
 5330 0e38 2F020000 		.4byte	0x22f
 5331 0e3c 05       		.uleb128 0x5
 5332 0e3d 03       		.byte	0x3
 5333 0e3e 00000000 		.4byte	LHMute
 5334 0e42 25       		.uleb128 0x25
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 116


 5335 0e43 5E060000 		.4byte	.LASF176
 5336 0e47 01       		.byte	0x1
 5337 0e48 2301     		.2byte	0x123
 5338 0e4a 2F020000 		.4byte	0x22f
 5339 0e4e 05       		.uleb128 0x5
 5340 0e4f 03       		.byte	0x3
 5341 0e50 00000000 		.4byte	pitchFreeze
 5342 0e54 07       		.uleb128 0x7
 5343 0e55 09010000 		.4byte	0x109
 5344 0e59 6A0E0000 		.4byte	0xe6a
 5345 0e5d 08       		.uleb128 0x8
 5346 0e5e 42010000 		.4byte	0x142
 5347 0e62 03       		.byte	0x3
 5348 0e63 08       		.uleb128 0x8
 5349 0e64 42010000 		.4byte	0x142
 5350 0e68 1F       		.byte	0x1f
 5351 0e69 00       		.byte	0
 5352 0e6a 25       		.uleb128 0x25
 5353 0e6b 80050000 		.4byte	.LASF177
 5354 0e6f 01       		.byte	0x1
 5355 0e70 2401     		.2byte	0x124
 5356 0e72 540E0000 		.4byte	0xe54
 5357 0e76 05       		.uleb128 0x5
 5358 0e77 03       		.byte	0x3
 5359 0e78 00000000 		.4byte	pitchBendHistory
 5360 0e7c 07       		.uleb128 0x7
 5361 0e7d AD000000 		.4byte	0xad
 5362 0e81 8C0E0000 		.4byte	0xe8c
 5363 0e85 08       		.uleb128 0x8
 5364 0e86 42010000 		.4byte	0x142
 5365 0e8a 03       		.byte	0x3
 5366 0e8b 00       		.byte	0
 5367 0e8c 25       		.uleb128 0x25
 5368 0e8d BD020000 		.4byte	.LASF178
 5369 0e91 01       		.byte	0x1
 5370 0e92 2501     		.2byte	0x125
 5371 0e94 7C0E0000 		.4byte	0xe7c
 5372 0e98 05       		.uleb128 0x5
 5373 0e99 03       		.byte	0x3
 5374 0e9a 00000000 		.4byte	pitchBendHistoryPointer
 5375 0e9e 07       		.uleb128 0x7
 5376 0e9f 94000000 		.4byte	0x94
 5377 0ea3 B40E0000 		.4byte	0xeb4
 5378 0ea7 08       		.uleb128 0x8
 5379 0ea8 42010000 		.4byte	0x142
 5380 0eac 1F       		.byte	0x1f
 5381 0ead 08       		.uleb128 0x8
 5382 0eae 42010000 		.4byte	0x142
 5383 0eb2 04       		.byte	0x4
 5384 0eb3 00       		.byte	0
 5385 0eb4 25       		.uleb128 0x25
 5386 0eb5 FB010000 		.4byte	.LASF179
 5387 0eb9 01       		.byte	0x1
 5388 0eba 2701     		.2byte	0x127
 5389 0ebc 9E0E0000 		.4byte	0xe9e
 5390 0ec0 05       		.uleb128 0x5
 5391 0ec1 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 117


 5392 0ec2 00000000 		.4byte	skippedNotes
 5393 0ec6 25       		.uleb128 0x25
 5394 0ec7 FC040000 		.4byte	.LASF180
 5395 0ecb 01       		.byte	0x1
 5396 0ecc 2801     		.2byte	0x128
 5397 0ece 94000000 		.4byte	0x94
 5398 0ed2 05       		.uleb128 0x5
 5399 0ed3 03       		.byte	0x3
 5400 0ed4 00000000 		.4byte	skipPointer
 5401 0ed8 25       		.uleb128 0x25
 5402 0ed9 77050000 		.4byte	.LASF181
 5403 0edd 01       		.byte	0x1
 5404 0ede 2A01     		.2byte	0x12a
 5405 0ee0 A2000000 		.4byte	0xa2
 5406 0ee4 05       		.uleb128 0x5
 5407 0ee5 03       		.byte	0x3
 5408 0ee6 00000000 		.4byte	bufCount
 5409 0eea 25       		.uleb128 0x25
 5410 0eeb 80070000 		.4byte	.LASF182
 5411 0eef 01       		.byte	0x1
 5412 0ef0 4203     		.2byte	0x342
 5413 0ef2 2F020000 		.4byte	0x22f
 5414 0ef6 05       		.uleb128 0x5
 5415 0ef7 03       		.byte	0x3
 5416 0ef8 00000000 		.4byte	tempMIDI
 5417 0efc 25       		.uleb128 0x25
 5418 0efd 43030000 		.4byte	.LASF183
 5419 0f01 01       		.byte	0x1
 5420 0f02 7E03     		.2byte	0x37e
 5421 0f04 FD000000 		.4byte	0xfd
 5422 0f08 05       		.uleb128 0x5
 5423 0f09 03       		.byte	0x3
 5424 0f0a 00000000 		.4byte	iVtherm
 5425 0f0e 00       		.byte	0
 5426              		.section	.debug_abbrev,"",%progbits
 5427              	.Ldebug_abbrev0:
 5428 0000 01       		.uleb128 0x1
 5429 0001 11       		.uleb128 0x11
 5430 0002 01       		.byte	0x1
 5431 0003 25       		.uleb128 0x25
 5432 0004 0E       		.uleb128 0xe
 5433 0005 13       		.uleb128 0x13
 5434 0006 0B       		.uleb128 0xb
 5435 0007 03       		.uleb128 0x3
 5436 0008 0E       		.uleb128 0xe
 5437 0009 1B       		.uleb128 0x1b
 5438 000a 0E       		.uleb128 0xe
 5439 000b 55       		.uleb128 0x55
 5440 000c 17       		.uleb128 0x17
 5441 000d 11       		.uleb128 0x11
 5442 000e 01       		.uleb128 0x1
 5443 000f 10       		.uleb128 0x10
 5444 0010 17       		.uleb128 0x17
 5445 0011 00       		.byte	0
 5446 0012 00       		.byte	0
 5447 0013 02       		.uleb128 0x2
 5448 0014 24       		.uleb128 0x24
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 118


 5449 0015 00       		.byte	0
 5450 0016 0B       		.uleb128 0xb
 5451 0017 0B       		.uleb128 0xb
 5452 0018 3E       		.uleb128 0x3e
 5453 0019 0B       		.uleb128 0xb
 5454 001a 03       		.uleb128 0x3
 5455 001b 0E       		.uleb128 0xe
 5456 001c 00       		.byte	0
 5457 001d 00       		.byte	0
 5458 001e 03       		.uleb128 0x3
 5459 001f 16       		.uleb128 0x16
 5460 0020 00       		.byte	0
 5461 0021 03       		.uleb128 0x3
 5462 0022 0E       		.uleb128 0xe
 5463 0023 3A       		.uleb128 0x3a
 5464 0024 0B       		.uleb128 0xb
 5465 0025 3B       		.uleb128 0x3b
 5466 0026 0B       		.uleb128 0xb
 5467 0027 49       		.uleb128 0x49
 5468 0028 13       		.uleb128 0x13
 5469 0029 00       		.byte	0
 5470 002a 00       		.byte	0
 5471 002b 04       		.uleb128 0x4
 5472 002c 24       		.uleb128 0x24
 5473 002d 00       		.byte	0
 5474 002e 0B       		.uleb128 0xb
 5475 002f 0B       		.uleb128 0xb
 5476 0030 3E       		.uleb128 0x3e
 5477 0031 0B       		.uleb128 0xb
 5478 0032 03       		.uleb128 0x3
 5479 0033 08       		.uleb128 0x8
 5480 0034 00       		.byte	0
 5481 0035 00       		.byte	0
 5482 0036 05       		.uleb128 0x5
 5483 0037 16       		.uleb128 0x16
 5484 0038 00       		.byte	0
 5485 0039 03       		.uleb128 0x3
 5486 003a 0E       		.uleb128 0xe
 5487 003b 3A       		.uleb128 0x3a
 5488 003c 0B       		.uleb128 0xb
 5489 003d 3B       		.uleb128 0x3b
 5490 003e 05       		.uleb128 0x5
 5491 003f 49       		.uleb128 0x49
 5492 0040 13       		.uleb128 0x13
 5493 0041 00       		.byte	0
 5494 0042 00       		.byte	0
 5495 0043 06       		.uleb128 0x6
 5496 0044 35       		.uleb128 0x35
 5497 0045 00       		.byte	0
 5498 0046 49       		.uleb128 0x49
 5499 0047 13       		.uleb128 0x13
 5500 0048 00       		.byte	0
 5501 0049 00       		.byte	0
 5502 004a 07       		.uleb128 0x7
 5503 004b 01       		.uleb128 0x1
 5504 004c 01       		.byte	0x1
 5505 004d 49       		.uleb128 0x49
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 119


 5506 004e 13       		.uleb128 0x13
 5507 004f 01       		.uleb128 0x1
 5508 0050 13       		.uleb128 0x13
 5509 0051 00       		.byte	0
 5510 0052 00       		.byte	0
 5511 0053 08       		.uleb128 0x8
 5512 0054 21       		.uleb128 0x21
 5513 0055 00       		.byte	0
 5514 0056 49       		.uleb128 0x49
 5515 0057 13       		.uleb128 0x13
 5516 0058 2F       		.uleb128 0x2f
 5517 0059 0B       		.uleb128 0xb
 5518 005a 00       		.byte	0
 5519 005b 00       		.byte	0
 5520 005c 09       		.uleb128 0x9
 5521 005d 13       		.uleb128 0x13
 5522 005e 01       		.byte	0x1
 5523 005f 0B       		.uleb128 0xb
 5524 0060 0B       		.uleb128 0xb
 5525 0061 3A       		.uleb128 0x3a
 5526 0062 0B       		.uleb128 0xb
 5527 0063 3B       		.uleb128 0x3b
 5528 0064 05       		.uleb128 0x5
 5529 0065 01       		.uleb128 0x1
 5530 0066 13       		.uleb128 0x13
 5531 0067 00       		.byte	0
 5532 0068 00       		.byte	0
 5533 0069 0A       		.uleb128 0xa
 5534 006a 0D       		.uleb128 0xd
 5535 006b 00       		.byte	0
 5536 006c 03       		.uleb128 0x3
 5537 006d 0E       		.uleb128 0xe
 5538 006e 3A       		.uleb128 0x3a
 5539 006f 0B       		.uleb128 0xb
 5540 0070 3B       		.uleb128 0x3b
 5541 0071 05       		.uleb128 0x5
 5542 0072 49       		.uleb128 0x49
 5543 0073 13       		.uleb128 0x13
 5544 0074 38       		.uleb128 0x38
 5545 0075 0B       		.uleb128 0xb
 5546 0076 00       		.byte	0
 5547 0077 00       		.byte	0
 5548 0078 0B       		.uleb128 0xb
 5549 0079 04       		.uleb128 0x4
 5550 007a 01       		.byte	0x1
 5551 007b 0B       		.uleb128 0xb
 5552 007c 0B       		.uleb128 0xb
 5553 007d 49       		.uleb128 0x49
 5554 007e 13       		.uleb128 0x13
 5555 007f 3A       		.uleb128 0x3a
 5556 0080 0B       		.uleb128 0xb
 5557 0081 3B       		.uleb128 0x3b
 5558 0082 05       		.uleb128 0x5
 5559 0083 01       		.uleb128 0x1
 5560 0084 13       		.uleb128 0x13
 5561 0085 00       		.byte	0
 5562 0086 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 120


 5563 0087 0C       		.uleb128 0xc
 5564 0088 28       		.uleb128 0x28
 5565 0089 00       		.byte	0
 5566 008a 03       		.uleb128 0x3
 5567 008b 0E       		.uleb128 0xe
 5568 008c 1C       		.uleb128 0x1c
 5569 008d 0B       		.uleb128 0xb
 5570 008e 00       		.byte	0
 5571 008f 00       		.byte	0
 5572 0090 0D       		.uleb128 0xd
 5573 0091 2E       		.uleb128 0x2e
 5574 0092 00       		.byte	0
 5575 0093 3F       		.uleb128 0x3f
 5576 0094 19       		.uleb128 0x19
 5577 0095 03       		.uleb128 0x3
 5578 0096 0E       		.uleb128 0xe
 5579 0097 3A       		.uleb128 0x3a
 5580 0098 0B       		.uleb128 0xb
 5581 0099 3B       		.uleb128 0x3b
 5582 009a 0B       		.uleb128 0xb
 5583 009b 27       		.uleb128 0x27
 5584 009c 19       		.uleb128 0x19
 5585 009d 11       		.uleb128 0x11
 5586 009e 01       		.uleb128 0x1
 5587 009f 12       		.uleb128 0x12
 5588 00a0 06       		.uleb128 0x6
 5589 00a1 40       		.uleb128 0x40
 5590 00a2 18       		.uleb128 0x18
 5591 00a3 9742     		.uleb128 0x2117
 5592 00a5 19       		.uleb128 0x19
 5593 00a6 00       		.byte	0
 5594 00a7 00       		.byte	0
 5595 00a8 0E       		.uleb128 0xe
 5596 00a9 2E       		.uleb128 0x2e
 5597 00aa 01       		.byte	0x1
 5598 00ab 3F       		.uleb128 0x3f
 5599 00ac 19       		.uleb128 0x19
 5600 00ad 03       		.uleb128 0x3
 5601 00ae 0E       		.uleb128 0xe
 5602 00af 3A       		.uleb128 0x3a
 5603 00b0 0B       		.uleb128 0xb
 5604 00b1 3B       		.uleb128 0x3b
 5605 00b2 0B       		.uleb128 0xb
 5606 00b3 27       		.uleb128 0x27
 5607 00b4 19       		.uleb128 0x19
 5608 00b5 49       		.uleb128 0x49
 5609 00b6 13       		.uleb128 0x13
 5610 00b7 11       		.uleb128 0x11
 5611 00b8 01       		.uleb128 0x1
 5612 00b9 12       		.uleb128 0x12
 5613 00ba 06       		.uleb128 0x6
 5614 00bb 40       		.uleb128 0x40
 5615 00bc 18       		.uleb128 0x18
 5616 00bd 9642     		.uleb128 0x2116
 5617 00bf 19       		.uleb128 0x19
 5618 00c0 01       		.uleb128 0x1
 5619 00c1 13       		.uleb128 0x13
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 121


 5620 00c2 00       		.byte	0
 5621 00c3 00       		.byte	0
 5622 00c4 0F       		.uleb128 0xf
 5623 00c5 05       		.uleb128 0x5
 5624 00c6 00       		.byte	0
 5625 00c7 03       		.uleb128 0x3
 5626 00c8 08       		.uleb128 0x8
 5627 00c9 3A       		.uleb128 0x3a
 5628 00ca 0B       		.uleb128 0xb
 5629 00cb 3B       		.uleb128 0x3b
 5630 00cc 0B       		.uleb128 0xb
 5631 00cd 49       		.uleb128 0x49
 5632 00ce 13       		.uleb128 0x13
 5633 00cf 02       		.uleb128 0x2
 5634 00d0 18       		.uleb128 0x18
 5635 00d1 00       		.byte	0
 5636 00d2 00       		.byte	0
 5637 00d3 10       		.uleb128 0x10
 5638 00d4 34       		.uleb128 0x34
 5639 00d5 00       		.byte	0
 5640 00d6 03       		.uleb128 0x3
 5641 00d7 0E       		.uleb128 0xe
 5642 00d8 3A       		.uleb128 0x3a
 5643 00d9 0B       		.uleb128 0xb
 5644 00da 3B       		.uleb128 0x3b
 5645 00db 0B       		.uleb128 0xb
 5646 00dc 49       		.uleb128 0x49
 5647 00dd 13       		.uleb128 0x13
 5648 00de 02       		.uleb128 0x2
 5649 00df 18       		.uleb128 0x18
 5650 00e0 00       		.byte	0
 5651 00e1 00       		.byte	0
 5652 00e2 11       		.uleb128 0x11
 5653 00e3 05       		.uleb128 0x5
 5654 00e4 00       		.byte	0
 5655 00e5 03       		.uleb128 0x3
 5656 00e6 0E       		.uleb128 0xe
 5657 00e7 3A       		.uleb128 0x3a
 5658 00e8 0B       		.uleb128 0xb
 5659 00e9 3B       		.uleb128 0x3b
 5660 00ea 0B       		.uleb128 0xb
 5661 00eb 49       		.uleb128 0x49
 5662 00ec 13       		.uleb128 0x13
 5663 00ed 02       		.uleb128 0x2
 5664 00ee 18       		.uleb128 0x18
 5665 00ef 00       		.byte	0
 5666 00f0 00       		.byte	0
 5667 00f1 12       		.uleb128 0x12
 5668 00f2 34       		.uleb128 0x34
 5669 00f3 00       		.byte	0
 5670 00f4 03       		.uleb128 0x3
 5671 00f5 08       		.uleb128 0x8
 5672 00f6 3A       		.uleb128 0x3a
 5673 00f7 0B       		.uleb128 0xb
 5674 00f8 3B       		.uleb128 0x3b
 5675 00f9 0B       		.uleb128 0xb
 5676 00fa 49       		.uleb128 0x49
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 122


 5677 00fb 13       		.uleb128 0x13
 5678 00fc 02       		.uleb128 0x2
 5679 00fd 18       		.uleb128 0x18
 5680 00fe 00       		.byte	0
 5681 00ff 00       		.byte	0
 5682 0100 13       		.uleb128 0x13
 5683 0101 2E       		.uleb128 0x2e
 5684 0102 01       		.byte	0x1
 5685 0103 3F       		.uleb128 0x3f
 5686 0104 19       		.uleb128 0x19
 5687 0105 03       		.uleb128 0x3
 5688 0106 08       		.uleb128 0x8
 5689 0107 3A       		.uleb128 0x3a
 5690 0108 0B       		.uleb128 0xb
 5691 0109 3B       		.uleb128 0x3b
 5692 010a 0B       		.uleb128 0xb
 5693 010b 27       		.uleb128 0x27
 5694 010c 19       		.uleb128 0x19
 5695 010d 49       		.uleb128 0x49
 5696 010e 13       		.uleb128 0x13
 5697 010f 11       		.uleb128 0x11
 5698 0110 01       		.uleb128 0x1
 5699 0111 12       		.uleb128 0x12
 5700 0112 06       		.uleb128 0x6
 5701 0113 40       		.uleb128 0x40
 5702 0114 18       		.uleb128 0x18
 5703 0115 9642     		.uleb128 0x2116
 5704 0117 19       		.uleb128 0x19
 5705 0118 01       		.uleb128 0x1
 5706 0119 13       		.uleb128 0x13
 5707 011a 00       		.byte	0
 5708 011b 00       		.byte	0
 5709 011c 14       		.uleb128 0x14
 5710 011d 2E       		.uleb128 0x2e
 5711 011e 00       		.byte	0
 5712 011f 3F       		.uleb128 0x3f
 5713 0120 19       		.uleb128 0x19
 5714 0121 03       		.uleb128 0x3
 5715 0122 0E       		.uleb128 0xe
 5716 0123 3A       		.uleb128 0x3a
 5717 0124 0B       		.uleb128 0xb
 5718 0125 3B       		.uleb128 0x3b
 5719 0126 05       		.uleb128 0x5
 5720 0127 27       		.uleb128 0x27
 5721 0128 19       		.uleb128 0x19
 5722 0129 11       		.uleb128 0x11
 5723 012a 01       		.uleb128 0x1
 5724 012b 12       		.uleb128 0x12
 5725 012c 06       		.uleb128 0x6
 5726 012d 40       		.uleb128 0x40
 5727 012e 18       		.uleb128 0x18
 5728 012f 9642     		.uleb128 0x2116
 5729 0131 19       		.uleb128 0x19
 5730 0132 00       		.byte	0
 5731 0133 00       		.byte	0
 5732 0134 15       		.uleb128 0x15
 5733 0135 2E       		.uleb128 0x2e
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 123


 5734 0136 01       		.byte	0x1
 5735 0137 3F       		.uleb128 0x3f
 5736 0138 19       		.uleb128 0x19
 5737 0139 03       		.uleb128 0x3
 5738 013a 0E       		.uleb128 0xe
 5739 013b 3A       		.uleb128 0x3a
 5740 013c 0B       		.uleb128 0xb
 5741 013d 3B       		.uleb128 0x3b
 5742 013e 05       		.uleb128 0x5
 5743 013f 27       		.uleb128 0x27
 5744 0140 19       		.uleb128 0x19
 5745 0141 49       		.uleb128 0x49
 5746 0142 13       		.uleb128 0x13
 5747 0143 11       		.uleb128 0x11
 5748 0144 01       		.uleb128 0x1
 5749 0145 12       		.uleb128 0x12
 5750 0146 06       		.uleb128 0x6
 5751 0147 40       		.uleb128 0x40
 5752 0148 18       		.uleb128 0x18
 5753 0149 9642     		.uleb128 0x2116
 5754 014b 19       		.uleb128 0x19
 5755 014c 01       		.uleb128 0x1
 5756 014d 13       		.uleb128 0x13
 5757 014e 00       		.byte	0
 5758 014f 00       		.byte	0
 5759 0150 16       		.uleb128 0x16
 5760 0151 0B       		.uleb128 0xb
 5761 0152 01       		.byte	0x1
 5762 0153 11       		.uleb128 0x11
 5763 0154 01       		.uleb128 0x1
 5764 0155 12       		.uleb128 0x12
 5765 0156 06       		.uleb128 0x6
 5766 0157 01       		.uleb128 0x1
 5767 0158 13       		.uleb128 0x13
 5768 0159 00       		.byte	0
 5769 015a 00       		.byte	0
 5770 015b 17       		.uleb128 0x17
 5771 015c 34       		.uleb128 0x34
 5772 015d 00       		.byte	0
 5773 015e 03       		.uleb128 0x3
 5774 015f 0E       		.uleb128 0xe
 5775 0160 3A       		.uleb128 0x3a
 5776 0161 0B       		.uleb128 0xb
 5777 0162 3B       		.uleb128 0x3b
 5778 0163 05       		.uleb128 0x5
 5779 0164 49       		.uleb128 0x49
 5780 0165 13       		.uleb128 0x13
 5781 0166 02       		.uleb128 0x2
 5782 0167 18       		.uleb128 0x18
 5783 0168 00       		.byte	0
 5784 0169 00       		.byte	0
 5785 016a 18       		.uleb128 0x18
 5786 016b 0B       		.uleb128 0xb
 5787 016c 01       		.byte	0x1
 5788 016d 11       		.uleb128 0x11
 5789 016e 01       		.uleb128 0x1
 5790 016f 12       		.uleb128 0x12
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 124


 5791 0170 06       		.uleb128 0x6
 5792 0171 00       		.byte	0
 5793 0172 00       		.byte	0
 5794 0173 19       		.uleb128 0x19
 5795 0174 34       		.uleb128 0x34
 5796 0175 00       		.byte	0
 5797 0176 03       		.uleb128 0x3
 5798 0177 08       		.uleb128 0x8
 5799 0178 3A       		.uleb128 0x3a
 5800 0179 0B       		.uleb128 0xb
 5801 017a 3B       		.uleb128 0x3b
 5802 017b 05       		.uleb128 0x5
 5803 017c 49       		.uleb128 0x49
 5804 017d 13       		.uleb128 0x13
 5805 017e 02       		.uleb128 0x2
 5806 017f 18       		.uleb128 0x18
 5807 0180 00       		.byte	0
 5808 0181 00       		.byte	0
 5809 0182 1A       		.uleb128 0x1a
 5810 0183 2E       		.uleb128 0x2e
 5811 0184 01       		.byte	0x1
 5812 0185 3F       		.uleb128 0x3f
 5813 0186 19       		.uleb128 0x19
 5814 0187 03       		.uleb128 0x3
 5815 0188 0E       		.uleb128 0xe
 5816 0189 3A       		.uleb128 0x3a
 5817 018a 0B       		.uleb128 0xb
 5818 018b 3B       		.uleb128 0x3b
 5819 018c 05       		.uleb128 0x5
 5820 018d 27       		.uleb128 0x27
 5821 018e 19       		.uleb128 0x19
 5822 018f 11       		.uleb128 0x11
 5823 0190 01       		.uleb128 0x1
 5824 0191 12       		.uleb128 0x12
 5825 0192 06       		.uleb128 0x6
 5826 0193 40       		.uleb128 0x40
 5827 0194 18       		.uleb128 0x18
 5828 0195 9642     		.uleb128 0x2116
 5829 0197 19       		.uleb128 0x19
 5830 0198 01       		.uleb128 0x1
 5831 0199 13       		.uleb128 0x13
 5832 019a 00       		.byte	0
 5833 019b 00       		.byte	0
 5834 019c 1B       		.uleb128 0x1b
 5835 019d 05       		.uleb128 0x5
 5836 019e 00       		.byte	0
 5837 019f 03       		.uleb128 0x3
 5838 01a0 0E       		.uleb128 0xe
 5839 01a1 3A       		.uleb128 0x3a
 5840 01a2 0B       		.uleb128 0xb
 5841 01a3 3B       		.uleb128 0x3b
 5842 01a4 05       		.uleb128 0x5
 5843 01a5 49       		.uleb128 0x49
 5844 01a6 13       		.uleb128 0x13
 5845 01a7 02       		.uleb128 0x2
 5846 01a8 18       		.uleb128 0x18
 5847 01a9 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 125


 5848 01aa 00       		.byte	0
 5849 01ab 1C       		.uleb128 0x1c
 5850 01ac 0F       		.uleb128 0xf
 5851 01ad 00       		.byte	0
 5852 01ae 0B       		.uleb128 0xb
 5853 01af 0B       		.uleb128 0xb
 5854 01b0 49       		.uleb128 0x49
 5855 01b1 13       		.uleb128 0x13
 5856 01b2 00       		.byte	0
 5857 01b3 00       		.byte	0
 5858 01b4 1D       		.uleb128 0x1d
 5859 01b5 05       		.uleb128 0x5
 5860 01b6 00       		.byte	0
 5861 01b7 03       		.uleb128 0x3
 5862 01b8 08       		.uleb128 0x8
 5863 01b9 3A       		.uleb128 0x3a
 5864 01ba 0B       		.uleb128 0xb
 5865 01bb 3B       		.uleb128 0x3b
 5866 01bc 05       		.uleb128 0x5
 5867 01bd 49       		.uleb128 0x49
 5868 01be 13       		.uleb128 0x13
 5869 01bf 02       		.uleb128 0x2
 5870 01c0 18       		.uleb128 0x18
 5871 01c1 00       		.byte	0
 5872 01c2 00       		.byte	0
 5873 01c3 1E       		.uleb128 0x1e
 5874 01c4 0B       		.uleb128 0xb
 5875 01c5 01       		.byte	0x1
 5876 01c6 55       		.uleb128 0x55
 5877 01c7 17       		.uleb128 0x17
 5878 01c8 00       		.byte	0
 5879 01c9 00       		.byte	0
 5880 01ca 1F       		.uleb128 0x1f
 5881 01cb 34       		.uleb128 0x34
 5882 01cc 00       		.byte	0
 5883 01cd 03       		.uleb128 0x3
 5884 01ce 0E       		.uleb128 0xe
 5885 01cf 3A       		.uleb128 0x3a
 5886 01d0 0B       		.uleb128 0xb
 5887 01d1 3B       		.uleb128 0x3b
 5888 01d2 05       		.uleb128 0x5
 5889 01d3 49       		.uleb128 0x49
 5890 01d4 13       		.uleb128 0x13
 5891 01d5 3F       		.uleb128 0x3f
 5892 01d6 19       		.uleb128 0x19
 5893 01d7 3C       		.uleb128 0x3c
 5894 01d8 19       		.uleb128 0x19
 5895 01d9 00       		.byte	0
 5896 01da 00       		.byte	0
 5897 01db 20       		.uleb128 0x20
 5898 01dc 34       		.uleb128 0x34
 5899 01dd 00       		.byte	0
 5900 01de 03       		.uleb128 0x3
 5901 01df 0E       		.uleb128 0xe
 5902 01e0 3A       		.uleb128 0x3a
 5903 01e1 0B       		.uleb128 0xb
 5904 01e2 3B       		.uleb128 0x3b
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 126


 5905 01e3 0B       		.uleb128 0xb
 5906 01e4 49       		.uleb128 0x49
 5907 01e5 13       		.uleb128 0x13
 5908 01e6 3F       		.uleb128 0x3f
 5909 01e7 19       		.uleb128 0x19
 5910 01e8 3C       		.uleb128 0x3c
 5911 01e9 19       		.uleb128 0x19
 5912 01ea 00       		.byte	0
 5913 01eb 00       		.byte	0
 5914 01ec 21       		.uleb128 0x21
 5915 01ed 21       		.uleb128 0x21
 5916 01ee 00       		.byte	0
 5917 01ef 49       		.uleb128 0x49
 5918 01f0 13       		.uleb128 0x13
 5919 01f1 2F       		.uleb128 0x2f
 5920 01f2 05       		.uleb128 0x5
 5921 01f3 00       		.byte	0
 5922 01f4 00       		.byte	0
 5923 01f5 22       		.uleb128 0x22
 5924 01f6 26       		.uleb128 0x26
 5925 01f7 00       		.byte	0
 5926 01f8 49       		.uleb128 0x49
 5927 01f9 13       		.uleb128 0x13
 5928 01fa 00       		.byte	0
 5929 01fb 00       		.byte	0
 5930 01fc 23       		.uleb128 0x23
 5931 01fd 34       		.uleb128 0x34
 5932 01fe 00       		.byte	0
 5933 01ff 03       		.uleb128 0x3
 5934 0200 0E       		.uleb128 0xe
 5935 0201 3A       		.uleb128 0x3a
 5936 0202 0B       		.uleb128 0xb
 5937 0203 3B       		.uleb128 0x3b
 5938 0204 0B       		.uleb128 0xb
 5939 0205 49       		.uleb128 0x49
 5940 0206 13       		.uleb128 0x13
 5941 0207 3F       		.uleb128 0x3f
 5942 0208 19       		.uleb128 0x19
 5943 0209 02       		.uleb128 0x2
 5944 020a 18       		.uleb128 0x18
 5945 020b 00       		.byte	0
 5946 020c 00       		.byte	0
 5947 020d 24       		.uleb128 0x24
 5948 020e 34       		.uleb128 0x34
 5949 020f 00       		.byte	0
 5950 0210 03       		.uleb128 0x3
 5951 0211 08       		.uleb128 0x8
 5952 0212 3A       		.uleb128 0x3a
 5953 0213 0B       		.uleb128 0xb
 5954 0214 3B       		.uleb128 0x3b
 5955 0215 0B       		.uleb128 0xb
 5956 0216 49       		.uleb128 0x49
 5957 0217 13       		.uleb128 0x13
 5958 0218 3F       		.uleb128 0x3f
 5959 0219 19       		.uleb128 0x19
 5960 021a 02       		.uleb128 0x2
 5961 021b 18       		.uleb128 0x18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 127


 5962 021c 00       		.byte	0
 5963 021d 00       		.byte	0
 5964 021e 25       		.uleb128 0x25
 5965 021f 34       		.uleb128 0x34
 5966 0220 00       		.byte	0
 5967 0221 03       		.uleb128 0x3
 5968 0222 0E       		.uleb128 0xe
 5969 0223 3A       		.uleb128 0x3a
 5970 0224 0B       		.uleb128 0xb
 5971 0225 3B       		.uleb128 0x3b
 5972 0226 05       		.uleb128 0x5
 5973 0227 49       		.uleb128 0x49
 5974 0228 13       		.uleb128 0x13
 5975 0229 3F       		.uleb128 0x3f
 5976 022a 19       		.uleb128 0x19
 5977 022b 02       		.uleb128 0x2
 5978 022c 18       		.uleb128 0x18
 5979 022d 00       		.byte	0
 5980 022e 00       		.byte	0
 5981 022f 00       		.byte	0
 5982              		.section	.debug_aranges,"",%progbits
 5983 0000 BC000000 		.4byte	0xbc
 5984 0004 0200     		.2byte	0x2
 5985 0006 00000000 		.4byte	.Ldebug_info0
 5986 000a 04       		.byte	0x4
 5987 000b 00       		.byte	0
 5988 000c 0000     		.2byte	0
 5989 000e 0000     		.2byte	0
 5990 0010 00000000 		.4byte	.LFB64
 5991 0014 0C000000 		.4byte	.LFE64-.LFB64
 5992 0018 00000000 		.4byte	.LFB65
 5993 001c 58000000 		.4byte	.LFE65-.LFB65
 5994 0020 00000000 		.4byte	.LFB66
 5995 0024 68000000 		.4byte	.LFE66-.LFB66
 5996 0028 00000000 		.4byte	.LFB67
 5997 002c 4C000000 		.4byte	.LFE67-.LFB67
 5998 0030 00000000 		.4byte	.LFB68
 5999 0034 46000000 		.4byte	.LFE68-.LFB68
 6000 0038 00000000 		.4byte	.LFB69
 6001 003c 56000000 		.4byte	.LFE69-.LFB69
 6002 0040 00000000 		.4byte	.LFB70
 6003 0044 40000000 		.4byte	.LFE70-.LFB70
 6004 0048 00000000 		.4byte	.LFB71
 6005 004c 14000000 		.4byte	.LFE71-.LFB71
 6006 0050 00000000 		.4byte	.LFB72
 6007 0054 7C000000 		.4byte	.LFE72-.LFB72
 6008 0058 00000000 		.4byte	.LFB73
 6009 005c DC0A0000 		.4byte	.LFE73-.LFB73
 6010 0060 00000000 		.4byte	.LFB74
 6011 0064 54000000 		.4byte	.LFE74-.LFB74
 6012 0068 00000000 		.4byte	.LFB75
 6013 006c C4000000 		.4byte	.LFE75-.LFB75
 6014 0070 00000000 		.4byte	.LFB76
 6015 0074 4C000000 		.4byte	.LFE76-.LFB76
 6016 0078 00000000 		.4byte	.LFB77
 6017 007c 68000000 		.4byte	.LFE77-.LFB77
 6018 0080 00000000 		.4byte	.LFB78
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 128


 6019 0084 6C000000 		.4byte	.LFE78-.LFB78
 6020 0088 00000000 		.4byte	.LFB79
 6021 008c 68000000 		.4byte	.LFE79-.LFB79
 6022 0090 00000000 		.4byte	.LFB80
 6023 0094 24010000 		.4byte	.LFE80-.LFB80
 6024 0098 00000000 		.4byte	.LFB81
 6025 009c 70000000 		.4byte	.LFE81-.LFB81
 6026 00a0 00000000 		.4byte	.LFB82
 6027 00a4 70000000 		.4byte	.LFE82-.LFB82
 6028 00a8 00000000 		.4byte	.LFB83
 6029 00ac 90000000 		.4byte	.LFE83-.LFB83
 6030 00b0 00000000 		.4byte	.LFB84
 6031 00b4 68020000 		.4byte	.LFE84-.LFB84
 6032 00b8 00000000 		.4byte	0
 6033 00bc 00000000 		.4byte	0
 6034              		.section	.debug_ranges,"",%progbits
 6035              	.Ldebug_ranges0:
 6036 0000 76000000 		.4byte	.LBB8
 6037 0004 6C010000 		.4byte	.LBE8
 6038 0008 6E010000 		.4byte	.LBB11
 6039 000c EA010000 		.4byte	.LBE11
 6040 0010 EC010000 		.4byte	.LBB12
 6041 0014 2C020000 		.4byte	.LBE12
 6042 0018 00000000 		.4byte	0
 6043 001c 00000000 		.4byte	0
 6044 0020 00000000 		.4byte	.LFB64
 6045 0024 0C000000 		.4byte	.LFE64
 6046 0028 00000000 		.4byte	.LFB65
 6047 002c 58000000 		.4byte	.LFE65
 6048 0030 00000000 		.4byte	.LFB66
 6049 0034 68000000 		.4byte	.LFE66
 6050 0038 00000000 		.4byte	.LFB67
 6051 003c 4C000000 		.4byte	.LFE67
 6052 0040 00000000 		.4byte	.LFB68
 6053 0044 46000000 		.4byte	.LFE68
 6054 0048 00000000 		.4byte	.LFB69
 6055 004c 56000000 		.4byte	.LFE69
 6056 0050 00000000 		.4byte	.LFB70
 6057 0054 40000000 		.4byte	.LFE70
 6058 0058 00000000 		.4byte	.LFB71
 6059 005c 14000000 		.4byte	.LFE71
 6060 0060 00000000 		.4byte	.LFB72
 6061 0064 7C000000 		.4byte	.LFE72
 6062 0068 00000000 		.4byte	.LFB73
 6063 006c DC0A0000 		.4byte	.LFE73
 6064 0070 00000000 		.4byte	.LFB74
 6065 0074 54000000 		.4byte	.LFE74
 6066 0078 00000000 		.4byte	.LFB75
 6067 007c C4000000 		.4byte	.LFE75
 6068 0080 00000000 		.4byte	.LFB76
 6069 0084 4C000000 		.4byte	.LFE76
 6070 0088 00000000 		.4byte	.LFB77
 6071 008c 68000000 		.4byte	.LFE77
 6072 0090 00000000 		.4byte	.LFB78
 6073 0094 6C000000 		.4byte	.LFE78
 6074 0098 00000000 		.4byte	.LFB79
 6075 009c 68000000 		.4byte	.LFE79
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 129


 6076 00a0 00000000 		.4byte	.LFB80
 6077 00a4 24010000 		.4byte	.LFE80
 6078 00a8 00000000 		.4byte	.LFB81
 6079 00ac 70000000 		.4byte	.LFE81
 6080 00b0 00000000 		.4byte	.LFB82
 6081 00b4 70000000 		.4byte	.LFE82
 6082 00b8 00000000 		.4byte	.LFB83
 6083 00bc 90000000 		.4byte	.LFE83
 6084 00c0 00000000 		.4byte	.LFB84
 6085 00c4 68020000 		.4byte	.LFE84
 6086 00c8 00000000 		.4byte	0
 6087 00cc 00000000 		.4byte	0
 6088              		.section	.debug_line,"",%progbits
 6089              	.Ldebug_line0:
 6090 0000 B8050000 		.section	.debug_str,"MS",%progbits,1
 6090      02009901 
 6090      00000201 
 6090      FB0E0D00 
 6090      01010101 
 6091              	.LASF112:
 6092 0000 7363616E 		.ascii	"scanPart\000"
 6092      50617274 
 6092      00
 6093              	.LASF138:
 6094 0009 65657072 		.ascii	"eeprom_cnt\000"
 6094      6F6D5F63 
 6094      6E7400
 6095              	.LASF113:
 6096 0014 49324362 		.ascii	"I2Cbuff1\000"
 6096      75666631 
 6096      00
 6097              	.LASF40:
 6098 001d 43595F45 		.ascii	"CY_EM_EEPROM_BAD_PARAM\000"
 6098      4D5F4545 
 6098      50524F4D 
 6098      5F424144 
 6098      5F504152 
 6099              	.LASF58:
 6100 0034 6F73746F 		.ascii	"ostop\000"
 6100      7000
 6101              	.LASF170:
 6102 003a 6C696E46 		.ascii	"linFirPointer\000"
 6102      6972506F 
 6102      696E7465 
 6102      7200
 6103              	.LASF38:
 6104 0048 63795F73 		.ascii	"cy_stc_eeprom_context_t\000"
 6104      74635F65 
 6104      6570726F 
 6104      6D5F636F 
 6104      6E746578 
 6105              	.LASF185:
 6106 0060 6D61696E 		.ascii	"main.c\000"
 6106      2E6300
 6107              	.LASF82:
 6108 0067 446D6154 		.ascii	"DmaTxConfiguration\000"
 6108      78436F6E 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 130


 6108      66696775 
 6108      72617469 
 6108      6F6E00
 6109              	.LASF83:
 6110 007a 446D6152 		.ascii	"DmaRxConfiguration\000"
 6110      78436F6E 
 6110      66696775 
 6110      72617469 
 6110      6F6E00
 6111              	.LASF13:
 6112 008d 756E7369 		.ascii	"unsigned int\000"
 6112      676E6564 
 6112      20696E74 
 6112      00
 6113              	.LASF186:
 6114 009a 433A5C55 		.ascii	"C:\\Users\\JeffSnyder\\dev\\Electrobass_embedded\\P"
 6114      73657273 
 6114      5C4A6566 
 6114      66536E79 
 6114      6465725C 
 6115 00c8 534F4335 		.ascii	"SOC5_electrobass_stringsensors\\CE210514_PSOC3_5_Th"
 6115      5F656C65 
 6115      6374726F 
 6115      62617373 
 6115      5F737472 
 6116 00fa 65726D69 		.ascii	"ermistor.cydsn\000"
 6116      73746F72 
 6116      2E637964 
 6116      736E00
 6117              	.LASF6:
 6118 0109 5F5F696E 		.ascii	"__int32_t\000"
 6118      7433325F 
 6118      7400
 6119              	.LASF27:
 6120 0113 72656738 		.ascii	"reg8\000"
 6120      00
 6121              	.LASF56:
 6122 0118 6973746F 		.ascii	"istop\000"
 6122      7000
 6123              	.LASF42:
 6124 011e 43595F45 		.ascii	"CY_EM_EEPROM_BAD_DATA\000"
 6124      4D5F4545 
 6124      50524F4D 
 6124      5F424144 
 6124      5F444154 
 6125              	.LASF184:
 6126 0134 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 6126      43313120 
 6126      352E342E 
 6126      31203230 
 6126      31363036 
 6127 0167 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 6127      20726576 
 6127      6973696F 
 6127      6E203233 
 6127      37373135 
 6128 019a 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 131


 6128      66756E63 
 6128      74696F6E 
 6128      2D736563 
 6128      74696F6E 
 6129              	.LASF111:
 6130 01c2 6D696469 		.ascii	"midiOverflow\000"
 6130      4F766572 
 6130      666C6F77 
 6130      00
 6131              	.LASF148:
 6132 01cf 6C6F7564 		.ascii	"loudestString\000"
 6132      65737453 
 6132      7472696E 
 6132      6700
 6133              	.LASF107:
 6134 01dd 70726576 		.ascii	"prevVBUS\000"
 6134      56425553 
 6134      00
 6135              	.LASF147:
 6136 01e6 6F70656E 		.ascii	"openStringCount\000"
 6136      53747269 
 6136      6E67436F 
 6136      756E7400 
 6137              	.LASF87:
 6138 01f6 6D6F6465 		.ascii	"mode\000"
 6138      00
 6139              	.LASF179:
 6140 01fb 736B6970 		.ascii	"skippedNotes\000"
 6140      7065644E 
 6140      6F746573 
 6140      00
 6141              	.LASF46:
 6142 0208 74656D70 		.ascii	"tempmin\000"
 6142      6D696E00 
 6143              	.LASF60:
 6144 0210 536C6565 		.ascii	"SleepIsr_function\000"
 6144      70497372 
 6144      5F66756E 
 6144      6374696F 
 6144      6E00
 6145              	.LASF103:
 6146 0222 456D5F45 		.ascii	"Em_EEPROM_em_EepromStorage\000"
 6146      4550524F 
 6146      4D5F656D 
 6146      5F456570 
 6146      726F6D53 
 6147              	.LASF128:
 6148 023d 68797374 		.ascii	"hysteresisLowThresh\000"
 6148      65726573 
 6148      69734C6F 
 6148      77546872 
 6148      65736800 
 6149              	.LASF174:
 6150 0251 4C484D75 		.ascii	"LHMuteCounter\000"
 6150      7465436F 
 6150      756E7465 
 6150      7200
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 132


 6151              	.LASF171:
 6152 025f 6C696E65 		.ascii	"linearFIR\000"
 6152      61724649 
 6152      5200
 6153              	.LASF116:
 6154 0269 74687265 		.ascii	"thresholdArray\000"
 6154      73686F6C 
 6154      64417272 
 6154      617900
 6155              	.LASF17:
 6156 0278 75696E74 		.ascii	"uint32_t\000"
 6156      33325F74 
 6156      00
 6157              	.LASF31:
 6158 0281 6E756D62 		.ascii	"numberOfRows\000"
 6158      65724F66 
 6158      526F7773 
 6158      00
 6159              	.LASF98:
 6160 028e 5553425F 		.ascii	"USB_midi_in_ep\000"
 6160      6D696469 
 6160      5F696E5F 
 6160      657000
 6161              	.LASF23:
 6162 029d 666C6F61 		.ascii	"float\000"
 6162      7400
 6163              	.LASF22:
 6164 02a3 696E7433 		.ascii	"int32\000"
 6164      3200
 6165              	.LASF169:
 6166 02a9 6B6E6F62 		.ascii	"knobs7bitHysteresis\000"
 6166      73376269 
 6166      74487973 
 6166      74657265 
 6166      73697300 
 6167              	.LASF178:
 6168 02bd 70697463 		.ascii	"pitchBendHistoryPointer\000"
 6168      6842656E 
 6168      64486973 
 6168      746F7279 
 6168      506F696E 
 6169              	.LASF33:
 6170 02d5 65657072 		.ascii	"eepromSize\000"
 6170      6F6D5369 
 6170      7A6500
 6171              	.LASF44:
 6172 02e0 63795F65 		.ascii	"cy_en_em_eeprom_status_t\000"
 6172      6E5F656D 
 6172      5F656570 
 6172      726F6D5F 
 6172      73746174 
 6173              	.LASF12:
 6174 02f9 6C6F6E67 		.ascii	"long long unsigned int\000"
 6174      206C6F6E 
 6174      6720756E 
 6174      7369676E 
 6174      65642069 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 133


 6175              	.LASF101:
 6176 0310 5553425F 		.ascii	"USB_midiOutBuffer\000"
 6176      6D696469 
 6176      4F757442 
 6176      75666665 
 6176      7200
 6177              	.LASF149:
 6178 0322 74696D65 		.ascii	"timeSinceLastAttack\000"
 6178      53696E63 
 6178      654C6173 
 6178      74417474 
 6178      61636B00 
 6179              	.LASF140:
 6180 0336 73747269 		.ascii	"stringStates\000"
 6180      6E675374 
 6180      61746573 
 6180      00
 6181              	.LASF183:
 6182 0343 69567468 		.ascii	"iVtherm\000"
 6182      65726D00 
 6183              	.LASF41:
 6184 034b 43595F45 		.ascii	"CY_EM_EEPROM_BAD_CHECKSUM\000"
 6184      4D5F4545 
 6184      50524F4D 
 6184      5F424144 
 6184      5F434845 
 6185              	.LASF4:
 6186 0365 5F5F7569 		.ascii	"__uint16_t\000"
 6186      6E743136 
 6186      5F7400
 6187              	.LASF143:
 6188 0370 6C617374 		.ascii	"lastNotes\000"
 6188      4E6F7465 
 6188      7300
 6189              	.LASF129:
 6190 037a 68797374 		.ascii	"hysteresisHighThresh\000"
 6190      65726573 
 6190      69734869 
 6190      67685468 
 6190      72657368 
 6191              	.LASF54:
 6192 038f 76616C75 		.ascii	"value\000"
 6192      6500
 6193              	.LASF145:
 6194 0395 706F6C79 		.ascii	"polyMode\000"
 6194      4D6F6465 
 6194      00
 6195              	.LASF159:
 6196 039e 68705F52 		.ascii	"hp_R\000"
 6196      00
 6197              	.LASF133:
 6198 03a3 72784368 		.ascii	"rxChannel\000"
 6198      616E6E65 
 6198      6C00
 6199              	.LASF36:
 6200 03ad 626C6F63 		.ascii	"blockingWrite\000"
 6200      6B696E67 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 134


 6200      57726974 
 6200      6500
 6201              	.LASF120:
 6202 03bb 636F756E 		.ascii	"counter\000"
 6202      74657200 
 6203              	.LASF18:
 6204 03c3 696E7436 		.ascii	"int64_t\000"
 6204      345F7400 
 6205              	.LASF81:
 6206 03cb 6F666673 		.ascii	"offset\000"
 6206      657400
 6207              	.LASF69:
 6208 03d2 5553425F 		.ascii	"USB_callbackLocalMidiEvent\000"
 6208      63616C6C 
 6208      6261636B 
 6208      4C6F6361 
 6208      6C4D6964 
 6209              	.LASF154:
 6210 03ed 73747269 		.ascii	"stringMIDI\000"
 6210      6E674D49 
 6210      444900
 6211              	.LASF158:
 6212 03f8 68705F78 		.ascii	"hp_x\000"
 6212      00
 6213              	.LASF157:
 6214 03fd 68705F79 		.ascii	"hp_y\000"
 6214      00
 6215              	.LASF118:
 6216 0402 66726574 		.ascii	"fretRatios\000"
 6216      52617469 
 6216      6F7300
 6217              	.LASF37:
 6218 040d 75736572 		.ascii	"userFlashStartAddr\000"
 6218      466C6173 
 6218      68537461 
 6218      72744164 
 6218      647200
 6219              	.LASF48:
 6220 0420 4C454146 		.ascii	"LEAF_clip\000"
 6220      5F636C69 
 6220      7000
 6221              	.LASF114:
 6222 042a 73747269 		.ascii	"stringCapSensorsOnOff\000"
 6222      6E674361 
 6222      7053656E 
 6222      736F7273 
 6222      4F6E4F66 
 6223              	.LASF165:
 6224 0440 66697250 		.ascii	"firPointer\000"
 6224      6F696E74 
 6224      657200
 6225              	.LASF53:
 6226 044b 6F6D416C 		.ascii	"omAlpha\000"
 6226      70686100 
 6227              	.LASF156:
 6228 0453 6C696E65 		.ascii	"linearHysteresis\000"
 6228      61724879 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 135


 6228      73746572 
 6228      65736973 
 6228      00
 6229              	.LASF127:
 6230 0464 68797374 		.ascii	"hysteresisStates\000"
 6230      65726573 
 6230      69735374 
 6230      61746573 
 6230      00
 6231              	.LASF75:
 6232 0475 73656E64 		.ascii	"sendMIDIControlChange\000"
 6232      4D494449 
 6232      436F6E74 
 6232      726F6C43 
 6232      68616E67 
 6233              	.LASF134:
 6234 048b 72785444 		.ascii	"rxTD\000"
 6234      00
 6235              	.LASF80:
 6236 0490 69526573 		.ascii	"iRes\000"
 6236      00
 6237              	.LASF25:
 6238 0495 63686172 		.ascii	"char\000"
 6238      00
 6239              	.LASF39:
 6240 049a 43595F45 		.ascii	"CY_EM_EEPROM_SUCCESS\000"
 6240      4D5F4545 
 6240      50524F4D 
 6240      5F535543 
 6240      43455353 
 6241              	.LASF119:
 6242 04af 6C696E65 		.ascii	"linearPotValue32Bit\000"
 6242      6172506F 
 6242      7456616C 
 6242      75653332 
 6242      42697400 
 6243              	.LASF92:
 6244 04c3 73747269 		.ascii	"string\000"
 6244      6E6700
 6245              	.LASF20:
 6246 04ca 75696E74 		.ascii	"uint16\000"
 6246      313600
 6247              	.LASF102:
 6248 04d1 456D5F45 		.ascii	"Em_EEPROM_context\000"
 6248      4550524F 
 6248      4D5F636F 
 6248      6E746578 
 6248      7400
 6249              	.LASF166:
 6250 04e3 6B6E6F62 		.ascii	"knobs7bit\000"
 6250      73376269 
 6250      7400
 6251              	.LASF14:
 6252 04ed 75696E74 		.ascii	"uint8_t\000"
 6252      385F7400 
 6253              	.LASF88:
 6254 04f5 73746174 		.ascii	"status\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 136


 6254      757300
 6255              	.LASF180:
 6256 04fc 736B6970 		.ascii	"skipPointer\000"
 6256      506F696E 
 6256      74657200 
 6257              	.LASF67:
 6258 0508 6361626C 		.ascii	"cable\000"
 6258      6500
 6259              	.LASF30:
 6260 050e 776C456E 		.ascii	"wlEndAddr\000"
 6260      64416464 
 6260      7200
 6261              	.LASF115:
 6262 0518 73747269 		.ascii	"stringCapSensorsRaw\000"
 6262      6E674361 
 6262      7053656E 
 6262      736F7273 
 6262      52617700 
 6263              	.LASF117:
 6264 052c 66726574 		.ascii	"fretMeasurements\000"
 6264      4D656173 
 6264      7572656D 
 6264      656E7473 
 6264      00
 6265              	.LASF11:
 6266 053d 6C6F6E67 		.ascii	"long long int\000"
 6266      206C6F6E 
 6266      6720696E 
 6266      7400
 6267              	.LASF51:
 6268 054b 4C454146 		.ascii	"LEAF_interpolation_linear\000"
 6268      5F696E74 
 6268      6572706F 
 6268      6C617469 
 6268      6F6E5F6C 
 6269              	.LASF97:
 6270 0565 5553425F 		.ascii	"USB_midiInPointer\000"
 6270      6D696469 
 6270      496E506F 
 6270      696E7465 
 6270      7200
 6271              	.LASF181:
 6272 0577 62756643 		.ascii	"bufCount\000"
 6272      6F756E74 
 6272      00
 6273              	.LASF177:
 6274 0580 70697463 		.ascii	"pitchBendHistory\000"
 6274      6842656E 
 6274      64486973 
 6274      746F7279 
 6274      00
 6275              	.LASF172:
 6276 0591 6C696E65 		.ascii	"linearSmoothed\000"
 6276      6172536D 
 6276      6F6F7468 
 6276      656400
 6277              	.LASF130:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 137


 6278 05a0 74784368 		.ascii	"txChannel\000"
 6278      616E6E65 
 6278      6C00
 6279              	.LASF77:
 6280 05aa 43437661 		.ascii	"CCval\000"
 6280      6C00
 6281              	.LASF86:
 6282 05b0 6E627974 		.ascii	"nbytes\000"
 6282      657300
 6283              	.LASF74:
 6284 05b7 73656E64 		.ascii	"sendMIDIPitchBend\000"
 6284      4D494449 
 6284      50697463 
 6284      6842656E 
 6284      6400
 6285              	.LASF131:
 6286 05c9 74785444 		.ascii	"txTD\000"
 6286      00
 6287              	.LASF21:
 6288 05ce 75696E74 		.ascii	"uint32\000"
 6288      333200
 6289              	.LASF95:
 6290 05d5 65657072 		.ascii	"eepromArray\000"
 6290      6F6D4172 
 6290      72617900 
 6291              	.LASF155:
 6292 05e1 73747269 		.ascii	"stringMIDIPrev\000"
 6292      6E674D49 
 6292      44495072 
 6292      657600
 6293              	.LASF139:
 6294 05f0 62617243 		.ascii	"barCount\000"
 6294      6F756E74 
 6294      00
 6295              	.LASF57:
 6296 05f9 6F737461 		.ascii	"ostart\000"
 6296      727400
 6297              	.LASF124:
 6298 0600 73747269 		.ascii	"stringPlucks\000"
 6298      6E67506C 
 6298      75636B73 
 6298      00
 6299              	.LASF106:
 6300 060d 63757272 		.ascii	"currentVBUS\000"
 6300      656E7456 
 6300      42555300 
 6301              	.LASF121:
 6302 0619 74656D70 		.ascii	"temper\000"
 6302      657200
 6303              	.LASF136:
 6304 0620 61727261 		.ascii	"array\000"
 6304      7900
 6305              	.LASF10:
 6306 0626 5F5F696E 		.ascii	"__int64_t\000"
 6306      7436345F 
 6306      7400
 6307              	.LASF28:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 138


 6308 0630 6C6F6E67 		.ascii	"long double\000"
 6308      20646F75 
 6308      626C6500 
 6309              	.LASF122:
 6310 063c 70726576 		.ascii	"previousButtons\000"
 6310      696F7573 
 6310      42757474 
 6310      6F6E7300 
 6311              	.LASF15:
 6312 064c 75696E74 		.ascii	"uint16_t\000"
 6312      31365F74 
 6312      00
 6313              	.LASF135:
 6314 0655 72784275 		.ascii	"rxBuffer\000"
 6314      66666572 
 6314      00
 6315              	.LASF176:
 6316 065e 70697463 		.ascii	"pitchFreeze\000"
 6316      68467265 
 6316      657A6500 
 6317              	.LASF109:
 6318 066a 5553425F 		.ascii	"USB_check_flag\000"
 6318      63686563 
 6318      6B5F666C 
 6318      616700
 6319              	.LASF47:
 6320 0679 74656D70 		.ascii	"tempmax\000"
 6320      6D617800 
 6321              	.LASF73:
 6322 0681 6368616E 		.ascii	"channel\000"
 6322      6E656C00 
 6323              	.LASF141:
 6324 0689 77686963 		.ascii	"whichLinearSensor\000"
 6324      684C696E 
 6324      65617253 
 6324      656E736F 
 6324      7200
 6325              	.LASF150:
 6326 069b 70726576 		.ascii	"previousHysteresisStates\000"
 6326      696F7573 
 6326      48797374 
 6326      65726573 
 6326      69735374 
 6327              	.LASF132:
 6328 06b4 74784275 		.ascii	"txBuffer\000"
 6328      66666572 
 6328      00
 6329              	.LASF152:
 6330 06bd 6F70656E 		.ascii	"openStringMIDI\000"
 6330      53747269 
 6330      6E674D49 
 6330      444900
 6331              	.LASF151:
 6332 06cc 6F70656E 		.ascii	"openStringFreqs\000"
 6332      53747269 
 6332      6E674672 
 6332      65717300 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 139


 6333              	.LASF126:
 6334 06dc 6B6E6F62 		.ascii	"knobsFIR\000"
 6334      73464952 
 6334      00
 6335              	.LASF144:
 6336 06e5 66726574 		.ascii	"frettedState\000"
 6336      74656453 
 6336      74617465 
 6336      00
 6337              	.LASF2:
 6338 06f2 73686F72 		.ascii	"short int\000"
 6338      7420696E 
 6338      7400
 6339              	.LASF76:
 6340 06fc 43436E75 		.ascii	"CCnum\000"
 6340      6D00
 6341              	.LASF7:
 6342 0702 6C6F6E67 		.ascii	"long int\000"
 6342      20696E74 
 6342      00
 6343              	.LASF105:
 6344 070b 75736241 		.ascii	"usbActivityCounter\000"
 6344      63746976 
 6344      69747943 
 6344      6F756E74 
 6344      657200
 6345              	.LASF104:
 6346 071e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 6346      52784275 
 6346      66666572 
 6346      00
 6347              	.LASF163:
 6348 072b 6B6E6F62 		.ascii	"knobs\000"
 6348      7300
 6349              	.LASF68:
 6350 0731 6D696469 		.ascii	"midiMsg\000"
 6350      4D736700 
 6351              	.LASF90:
 6352 0739 68616E64 		.ascii	"handleNotes\000"
 6352      6C654E6F 
 6352      74657300 
 6353              	.LASF161:
 6354 0745 63726F73 		.ascii	"crossFadeStartCount\000"
 6354      73466164 
 6354      65537461 
 6354      7274436F 
 6354      756E7400 
 6355              	.LASF125:
 6356 0759 73747269 		.ascii	"stringPlucksPrev\000"
 6356      6E67506C 
 6356      75636B73 
 6356      50726576 
 6356      00
 6357              	.LASF142:
 6358 076a 74657374 		.ascii	"testVar\000"
 6358      56617200 
 6359              	.LASF65:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 140


 6360 0772 63686563 		.ascii	"checkUSB_Vbus\000"
 6360      6B555342 
 6360      5F566275 
 6360      7300
 6361              	.LASF182:
 6362 0780 74656D70 		.ascii	"tempMIDI\000"
 6362      4D494449 
 6362      00
 6363              	.LASF175:
 6364 0789 4C484D75 		.ascii	"LHMute\000"
 6364      746500
 6365              	.LASF3:
 6366 0790 5F5F7569 		.ascii	"__uint8_t\000"
 6366      6E74385F 
 6366      7400
 6367              	.LASF167:
 6368 079a 6B6E6F62 		.ascii	"knobs7bitPrev\000"
 6368      73376269 
 6368      74507265 
 6368      7600
 6369              	.LASF91:
 6370 07a8 6E6F7465 		.ascii	"note\000"
 6370      00
 6371              	.LASF93:
 6372 07ad 74656D70 		.ascii	"tempVel\000"
 6372      56656C00 
 6373              	.LASF94:
 6374 07b5 6C6F7564 		.ascii	"loudestSoundingNote\000"
 6374      65737453 
 6374      6F756E64 
 6374      696E674E 
 6374      6F746500 
 6375              	.LASF72:
 6376 07c9 76656C6F 		.ascii	"velocity\000"
 6376      63697479 
 6376      00
 6377              	.LASF29:
 6378 07d2 73697A65 		.ascii	"sizetype\000"
 6378      74797065 
 6378      00
 6379              	.LASF62:
 6380 07db 72657374 		.ascii	"restartSystemCheck\000"
 6380      61727453 
 6380      79737465 
 6380      6D436865 
 6380      636B00
 6381              	.LASF9:
 6382 07ee 6C6F6E67 		.ascii	"long unsigned int\000"
 6382      20756E73 
 6382      69676E65 
 6382      6420696E 
 6382      7400
 6383              	.LASF164:
 6384 0800 62757474 		.ascii	"buttons\000"
 6384      6F6E7300 
 6385              	.LASF43:
 6386 0808 43595F45 		.ascii	"CY_EM_EEPROM_WRITE_FAIL\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 141


 6386      4D5F4545 
 6386      50524F4D 
 6386      5F575249 
 6386      54455F46 
 6387              	.LASF173:
 6388 0820 6C696E65 		.ascii	"linearSmoothedPrev\000"
 6388      6172536D 
 6388      6F6F7468 
 6388      65645072 
 6388      657600
 6389              	.LASF52:
 6390 0833 616C7068 		.ascii	"alpha\000"
 6390      6100
 6391              	.LASF16:
 6392 0839 696E7433 		.ascii	"int32_t\000"
 6392      325F7400 
 6393              	.LASF84:
 6394 0841 4932435F 		.ascii	"I2C_MasterWriteBlocking\000"
 6394      4D617374 
 6394      65725772 
 6394      69746542 
 6394      6C6F636B 
 6395              	.LASF34:
 6396 0859 77656172 		.ascii	"wearLevelingFactor\000"
 6396      4C657665 
 6396      6C696E67 
 6396      46616374 
 6396      6F7200
 6397              	.LASF59:
 6398 086c 62757474 		.ascii	"button_press_ISR\000"
 6398      6F6E5F70 
 6398      72657373 
 6398      5F495352 
 6398      00
 6399              	.LASF50:
 6400 087d 66746F6D 		.ascii	"ftom\000"
 6400      00
 6401              	.LASF85:
 6402 0882 69324341 		.ascii	"i2CAddr\000"
 6402      64647200 
 6403              	.LASF26:
 6404 088a 63797374 		.ascii	"cystatus\000"
 6404      61747573 
 6404      00
 6405              	.LASF160:
 6406 0893 76696272 		.ascii	"vibratoCrossfade\000"
 6406      61746F43 
 6406      726F7373 
 6406      66616465 
 6406      00
 6407              	.LASF1:
 6408 08a4 756E7369 		.ascii	"unsigned char\000"
 6408      676E6564 
 6408      20636861 
 6408      7200
 6409              	.LASF8:
 6410 08b2 5F5F7569 		.ascii	"__uint32_t\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 142


 6410      6E743332 
 6410      5F7400
 6411              	.LASF108:
 6412 08bd 5553425F 		.ascii	"USB_active\000"
 6412      61637469 
 6412      766500
 6413              	.LASF35:
 6414 08c8 72656475 		.ascii	"redundantCopy\000"
 6414      6E64616E 
 6414      74436F70 
 6414      7900
 6415              	.LASF89:
 6416 08d6 74696D65 		.ascii	"timeout\000"
 6416      6F757400 
 6417              	.LASF49:
 6418 08de 6D746F66 		.ascii	"mtof\000"
 6418      00
 6419              	.LASF61:
 6420 08e3 56627573 		.ascii	"Vbus_function\000"
 6420      5F66756E 
 6420      6374696F 
 6420      6E00
 6421              	.LASF110:
 6422 08f1 6D696469 		.ascii	"midiSent\000"
 6422      53656E74 
 6422      00
 6423              	.LASF137:
 6424 08fa 65657072 		.ascii	"eepromReturnValue\000"
 6424      6F6D5265 
 6424      7475726E 
 6424      56616C75 
 6424      6500
 6425              	.LASF64:
 6426 090c 70697463 		.ascii	"pitchBendVal\000"
 6426      6842656E 
 6426      6456616C 
 6426      00
 6427              	.LASF66:
 6428 0919 5553425F 		.ascii	"USB_service\000"
 6428      73657276 
 6428      69636500 
 6429              	.LASF146:
 6430 0925 70697463 		.ascii	"pitchBendsPerString\000"
 6430      6842656E 
 6430      64735065 
 6430      72537472 
 6430      696E6700 
 6431              	.LASF0:
 6432 0939 7369676E 		.ascii	"signed char\000"
 6432      65642063 
 6432      68617200 
 6433              	.LASF5:
 6434 0945 73686F72 		.ascii	"short unsigned int\000"
 6434      7420756E 
 6434      7369676E 
 6434      65642069 
 6434      6E7400
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 143


 6435              	.LASF79:
 6436 0958 69567265 		.ascii	"iVref\000"
 6436      6600
 6437              	.LASF63:
 6438 095e 6D61696E 		.ascii	"main\000"
 6438      00
 6439              	.LASF70:
 6440 0963 73656E64 		.ascii	"sendMIDINoteOn\000"
 6440      4D494449 
 6440      4E6F7465 
 6440      4F6E00
 6441              	.LASF168:
 6442 0972 6B6E6F62 		.ascii	"knobs7bitPrevLS\000"
 6442      73376269 
 6442      74507265 
 6442      764C5300 
 6443              	.LASF45:
 6444 0982 75696E74 		.ascii	"uint\000"
 6444      00
 6445              	.LASF19:
 6446 0987 75696E74 		.ascii	"uint8\000"
 6446      3800
 6447              	.LASF24:
 6448 098d 646F7562 		.ascii	"double\000"
 6448      6C6500
 6449              	.LASF32:
 6450 0994 6C617374 		.ascii	"lastWrRowAddr\000"
 6450      5772526F 
 6450      77416464 
 6450      7200
 6451              	.LASF78:
 6452 09a2 7363616E 		.ascii	"scanLinearResistor\000"
 6452      4C696E65 
 6452      61725265 
 6452      73697374 
 6452      6F7200
 6453              	.LASF123:
 6454 09b5 6F637461 		.ascii	"octave\000"
 6454      766500
 6455              	.LASF99:
 6456 09bc 5553425F 		.ascii	"USB_midiInBuffer\000"
 6456      6D696469 
 6456      496E4275 
 6456      66666572 
 6456      00
 6457              	.LASF153:
 6458 09cd 696E7653 		.ascii	"invStringMappedPositions\000"
 6458      7472696E 
 6458      674D6170 
 6458      70656450 
 6458      6F736974 
 6459              	.LASF100:
 6460 09e6 5553425F 		.ascii	"USB_midi_out_ep\000"
 6460      6D696469 
 6460      5F6F7574 
 6460      5F657000 
 6461              	.LASF55:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccgBuKA5.s 			page 144


 6462 09f6 69737461 		.ascii	"istart\000"
 6462      727400
 6463              	.LASF162:
 6464 09fd 70726576 		.ascii	"previousPitchBendsSent\000"
 6464      696F7573 
 6464      50697463 
 6464      6842656E 
 6464      64735365 
 6465              	.LASF71:
 6466 0a14 4D494449 		.ascii	"MIDInoteNum\000"
 6466      6E6F7465 
 6466      4E756D00 
 6467              	.LASF96:
 6468 0a20 43617053 		.ascii	"CapSense_sensorOnMask\000"
 6468      656E7365 
 6468      5F73656E 
 6468      736F724F 
 6468      6E4D6173 
 6469              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
