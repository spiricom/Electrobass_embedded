ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	usbActivityCounter
  20              		.bss
  21              		.type	usbActivityCounter, %object
  22              		.size	usbActivityCounter, 1
  23              	usbActivityCounter:
  24 0000 00       		.space	1
  25              		.comm	midiMsg,4,4
  26              		.global	currentVBUS
  27              		.type	currentVBUS, %object
  28              		.size	currentVBUS, 1
  29              	currentVBUS:
  30 0001 00       		.space	1
  31              		.global	prevVBUS
  32              		.type	prevVBUS, %object
  33              		.size	prevVBUS, 1
  34              	prevVBUS:
  35 0002 00       		.space	1
  36              		.global	USB_active
  37              		.type	USB_active, %object
  38              		.size	USB_active, 1
  39              	USB_active:
  40 0003 00       		.space	1
  41              		.global	USB_check_flag
  42              		.type	USB_check_flag, %object
  43              		.size	USB_check_flag, 1
  44              	USB_check_flag:
  45 0004 00       		.space	1
  46              		.global	midiSent
  47 0005 00       		.align	1
  48              		.type	midiSent, %object
  49              		.size	midiSent, 2
  50              	midiSent:
  51 0006 0000     		.space	2
  52              		.global	midiOverflow
  53              		.align	1
  54              		.type	midiOverflow, %object
  55              		.size	midiOverflow, 2
  56              	midiOverflow:
  57 0008 0000     		.space	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 2


  58              		.global	scanPart
  59 000a 0000     		.align	2
  60              		.type	scanPart, %object
  61              		.size	scanPart, 4
  62              	scanPart:
  63 000c 00000000 		.space	4
  64              		.global	channel
  65              		.align	2
  66              		.type	channel, %object
  67              		.size	channel, 4
  68              	channel:
  69 0010 00000000 		.space	4
  70              		.global	currentOutPointer
  71              		.align	2
  72              		.type	currentOutPointer, %object
  73              		.size	currentOutPointer, 4
  74              	currentOutPointer:
  75 0014 00000000 		.space	4
  76              		.global	outChanged
  77              		.align	2
  78              		.type	outChanged, %object
  79              		.size	outChanged, 4
  80              	outChanged:
  81 0018 00000000 		.space	4
  82              		.comm	I2Cbuff1,256,4
  83              		.comm	stringCapSensorsOnOff,1,4
  84              		.comm	stringCapSensorsRaw,16,4
  85              		.global	thresholdArray
  86              		.data
  87              		.align	2
  88              		.type	thresholdArray, %object
  89              		.size	thresholdArray, 8
  90              	thresholdArray:
  91 0000 1E       		.byte	30
  92 0001 1E       		.byte	30
  93 0002 1E       		.byte	30
  94 0003 1E       		.byte	30
  95 0004 1E       		.byte	30
  96 0005 1E       		.byte	30
  97 0006 1E       		.byte	30
  98 0007 1E       		.byte	30
  99              		.global	fretMeasurements
 100              		.align	2
 101              		.type	fretMeasurements, %object
 102              		.size	fretMeasurements, 32
 103              	fretMeasurements:
 104 0008 14270100 		.word	75540
 105 000c 17580000 		.word	22551
 106 0010 2DFD0000 		.word	64813
 107 0014 BF4B0000 		.word	19391
 108 0018 80F80000 		.word	63616
 109 001c 6C4A0000 		.word	19052
 110 0020 32190100 		.word	71986
 111 0024 03530000 		.word	21251
 112              		.global	fretRatios
 113              		.align	2
 114              		.type	fretRatios, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 3


 115              		.size	fretRatios, 8
 116              	fretRatios:
 117 0028 C1A1713F 		.word	1064411585
 118 002c C1A1F13E 		.word	1056022977
 119              		.comm	sysexBuffer,128,4
 120              		.global	sysexPointer
 121              		.bss
 122              		.align	2
 123              		.type	sysexPointer, %object
 124              		.size	sysexPointer, 4
 125              	sysexPointer:
 126 001c 00000000 		.space	4
 127              		.global	receivingSysex
 128              		.type	receivingSysex, %object
 129              		.size	receivingSysex, 1
 130              	receivingSysex:
 131 0020 00       		.space	1
 132              		.global	parsingSysex
 133              		.type	parsingSysex, %object
 134              		.size	parsingSysex, 1
 135              	parsingSysex:
 136 0021 00       		.space	1
 137              		.comm	presetArray,2048,4
 138              		.global	presetArraySection
 139              		.type	presetArraySection, %object
 140              		.size	presetArraySection, 1
 141              	presetArraySection:
 142 0022 00       		.space	1
 143              		.global	presetArraySendCount
 144 0023 00       		.align	1
 145              		.type	presetArraySendCount, %object
 146              		.size	presetArraySendCount, 2
 147              	presetArraySendCount:
 148 0024 0000     		.space	2
 149              		.global	presetArraySize
 150              		.align	1
 151              		.type	presetArraySize, %object
 152              		.size	presetArraySize, 2
 153              	presetArraySize:
 154 0026 0000     		.space	2
 155              		.global	sysexPresetInProgress
 156              		.type	sysexPresetInProgress, %object
 157              		.size	sysexPresetInProgress, 1
 158              	sysexPresetInProgress:
 159 0028 00       		.space	1
 160              		.comm	linearPotValue32Bit,16,4
 161              		.global	i
 162              		.type	i, %object
 163              		.size	i, 1
 164              	i:
 165 0029 00       		.space	1
 166              		.global	counter
 167              		.type	counter, %object
 168              		.size	counter, 1
 169              	counter:
 170 002a 00       		.space	1
 171              		.comm	temper,4,4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 4


 172              		.comm	previousButtons,44,4
 173              		.global	octave
 174 002b 00       		.align	2
 175              		.type	octave, %object
 176              		.size	octave, 4
 177              	octave:
 178 002c 00000000 		.space	4
 179              		.comm	stringPlucks,16,4
 180              		.comm	stringPlucksPrev,16,4
 181              		.comm	knobsFIR,160,4
 182              		.comm	hysteresisStates,16,4
 183              		.global	hysteresisLowThresh
 184              		.data
 185              		.align	2
 186              		.type	hysteresisLowThresh, %object
 187              		.size	hysteresisLowThresh, 4
 188              	hysteresisLowThresh:
 189 0030 CDCCCC3E 		.word	1053609165
 190              		.global	hysteresisHighThresh
 191              		.align	2
 192              		.type	hysteresisHighThresh, %object
 193              		.size	hysteresisHighThresh, 4
 194              	hysteresisHighThresh:
 195 0034 9A99193F 		.word	1058642330
 196              		.comm	txChannel,1,1
 197              		.comm	txTD,1,1
 198              		.comm	txBuffer,16,4
 199              		.comm	rxChannel,1,1
 200              		.comm	rxTD,1,1
 201              		.comm	rxBuffer,16,4
 202              		.comm	tx2Channel,1,1
 203              		.comm	tx2TD,1,1
 204              		.comm	tx2Buffer,16,4
 205              		.comm	rx2Channel,1,1
 206              		.comm	rx2TD,1,1
 207              		.comm	rx2Buffer,16,4
 208              		.comm	tx2BufferTemp,16,4
 209              		.bss
 210              		.align	2
 211              	eepromArray:
 212 0030 0000     		.space	2
 213              		.global	array
 214 0032 0000     		.align	2
 215              		.type	array, %object
 216              		.size	array, 2
 217              	array:
 218 0034 0000     		.space	2
 219              		.comm	eepromReturnValue,1,1
 220              		.global	Em_EEPROM_em_EepromStorage
 221              		.section	.rodata
 222              		.align	8
 223              		.type	Em_EEPROM_em_EepromStorage, %object
 224              		.size	Em_EEPROM_em_EepromStorage, 1024
 225              	Em_EEPROM_em_EepromStorage:
 226 0000 00000000 		.space	1024
 226      00000000 
 226      00000000 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 5


 226      00000000 
 226      00000000 
 227              		.comm	eeprom_cnt,1,1
 228              		.comm	status,4,4
 229              		.comm	ptr,4,4
 230              		.global	barCount
 231              		.bss
 232 0036 0000     		.align	2
 233              		.type	barCount, %object
 234              		.size	barCount, 4
 235              	barCount:
 236 0038 00000000 		.space	4
 237              		.global	stringStates
 238              		.align	2
 239              		.type	stringStates, %object
 240              		.size	stringStates, 32
 241              	stringStates:
 242 003c 00000000 		.space	32
 242      00000000 
 242      00000000 
 242      00000000 
 242      00000000 
 243              		.section	.text.button_press_ISR,"ax",%progbits
 244              		.align	2
 245              		.global	button_press_ISR
 246              		.thumb
 247              		.thumb_func
 248              		.type	button_press_ISR, %function
 249              	button_press_ISR:
 250              	.LFB64:
 251              		.file 1 "main.c"
   1:main.c        **** /*****************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** *
   4:main.c        **** * Version: 3.0
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *   
   8:main.c        **** * 
   9:main.c        **** * Note:
  10:main.c        **** * 	The main project includes the ADC and other components required for the
  11:main.c        **** *   temperature measurement. The Thermistor component is a complete firmware component
  12:main.c        **** *   as decribed in the component datahseet and application note
  13:main.c        **** ******************************************************************************
  14:main.c        **** * Copyright (C) 2015, Cypress Semiconductor Corporation.
  15:main.c        **** ******************************************************************************
  16:main.c        **** * This software is owned by Cypress Semiconductor Corporation (Cypress) and is
  17:main.c        **** * protected by and subject to worldwide patent protection (United States and
  18:main.c        **** * foreign), United States copyright laws and international treaty provisions.
  19:main.c        **** * Cypress hereby grants to licensee a personal, non-exclusive, non-transferable
  20:main.c        **** * license to copy, use, modify, create derivative works of, and compile the
  21:main.c        **** * Cypress Source Code and derivative works for the sole purpose of creating
  22:main.c        **** * custom software in support of licensee product to be used only in conjunction
  23:main.c        **** * with a Cypress integrated circuit as specified in the applicable agreement.
  24:main.c        **** * Any reproduction, modification, translation, compilation, or representation of
  25:main.c        **** * this software except as specified above is prohibited without the express
  26:main.c        **** * written permission of Cypress.
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 6


  27:main.c        **** *
  28:main.c        **** * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH
  29:main.c        **** * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  30:main.c        **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  31:main.c        **** * Cypress reserves the right to make changes without further notice to the
  32:main.c        **** * materials described herein. Cypress does not assume any liability arising out
  33:main.c        **** * of the application or use of any product or circuit described herein. Cypress
  34:main.c        **** * does not authorize its products for use as critical components in life-support
  35:main.c        **** * systems where a malfunction or failure may reasonably be expected to result in
  36:main.c        **** * significant injury to the user. The inclusion of Cypress' product in a life-
  37:main.c        **** * support systems application implies that the manufacturer assumes all risk of
  38:main.c        **** * such use and in doing so indemnifies Cypress against all charges. Use may be
  39:main.c        **** * limited by and subject to the applicable Cypress software license agreement.
  40:main.c        **** *****************************************************************************/
  41:main.c        **** #include <device.h>
  42:main.c        **** 
  43:main.c        **** #include <stdio.h>
  44:main.c        **** #include "math.h"
  45:main.c        **** 
  46:main.c        **** //#define MAPLE1 1
  47:main.c        **** #define GREEN3 1
  48:main.c        **** 
  49:main.c        **** volatile uint8 usbActivityCounter = 0u;
  50:main.c        ****  uint8 midiMsg[4];
  51:main.c        **** volatile uint8_t currentVBUS = 0;
  52:main.c        **** volatile uint8_t prevVBUS = 0;
  53:main.c        **** volatile uint8_t USB_active = 0;
  54:main.c        **** volatile uint8_t USB_check_flag = 0;
  55:main.c        **** 
  56:main.c        **** uint16_t midiSent = 0;
  57:main.c        **** uint16_t midiOverflow = 0;
  58:main.c        **** 
  59:main.c        **** uint scanPart = 0;
  60:main.c        **** uint channel = 0;
  61:main.c        **** 
  62:main.c        **** uint currentOutPointer = 0;
  63:main.c        **** uint outChanged = 0;
  64:main.c        **** 
  65:main.c        **** void checkUSB_Vbus(void);
  66:main.c        **** void sendMIDIAllNotesOff(void);
  67:main.c        **** void sendMIDIPitchBend(int val, int channel);
  68:main.c        **** void firstCheckUSB_Vbus(void);
  69:main.c        **** void restartSystemCheck(void);
  70:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel);
  71:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel);
  72:main.c        **** CY_ISR_PROTO(SleepIsr_function);
  73:main.c        **** void noteEvent(int string);
  74:main.c        **** void I2C_reset(void);
  75:main.c        **** void CCEvent(int bar);
  76:main.c        **** 
  77:main.c        **** union breakFloat {
  78:main.c        ****  float f;
  79:main.c        ****  uint8_t b[4];  
  80:main.c        ****  uint32_t u32;
  81:main.c        **** };
  82:main.c        **** volatile uint8_t I2Cbuff1[256];
  83:main.c        **** uint8_t stringCapSensorsOnOff[1];
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 7


  84:main.c        **** uint8_t stringCapSensorsRaw[16];
  85:main.c        **** uint8_t thresholdArray[8] = {30, 30, 30, 30, 30, 30, 30, 30};
  86:main.c        **** #if MAPLE1
  87:main.c        **** uint32_t fretMeasurements[4][2] = {
  88:main.c        ****     {68958,19847},
  89:main.c        ****     {67974,20532},
  90:main.c        ****     {68984,20665},
  91:main.c        ****     {85647,24651}
  92:main.c        **** };
  93:main.c        **** #elif defined GREEN3
  94:main.c        ****  uint32_t fretMeasurements[4][2] = {
  95:main.c        ****     {75540,22551},
  96:main.c        ****     {64813,19391},
  97:main.c        ****     {63616,19052},
  98:main.c        ****     {71986,21251}
  99:main.c        **** };
 100:main.c        **** #else
 101:main.c        **** uint16_t fretMeasurements[4][2] = {
 102:main.c        ****     {57984,17489},
 103:main.c        ****     {53292,15779},
 104:main.c        ****     {52933,15582},
 105:main.c        ****     {57784,16450}
 106:main.c        **** };
 107:main.c        ****     #endif
 108:main.c        **** float fretRatios[2] = {0.94387439674627617953623675390268f,0.47193719837313808976811837695134f}; 
 109:main.c        **** 
 110:main.c        **** uint8_t sysexBuffer[128];
 111:main.c        **** uint32_t sysexPointer = 0;
 112:main.c        **** uint8_t receivingSysex = 0;
 113:main.c        **** uint8_t parsingSysex = 0;
 114:main.c        **** volatile uint8_t presetArray[2048];
 115:main.c        **** 
 116:main.c        **** enum presetArraySectionState
 117:main.c        **** {
 118:main.c        ****     initialVals = 0,
 119:main.c        ****     mapping = 1,
 120:main.c        ****     presetEnd = 2
 121:main.c        **** };
 122:main.c        **** uint8_t presetArraySection = initialVals;
 123:main.c        **** 
 124:main.c        **** uint16_t presetArraySendCount = 0;
 125:main.c        **** uint16_t presetArraySize = 0;
 126:main.c        **** 
 127:main.c        **** uint8_t sysexPresetInProgress = 0;
 128:main.c        **** 
 129:main.c        **** int32_t linearPotValue32Bit[4];
 130:main.c        **** uint8_t i = 0;
 131:main.c        **** uint8_t counter = 0;
 132:main.c        **** int32_t temper;
 133:main.c        **** int previousButtons[11];
 134:main.c        **** int octave = 0;
 135:main.c        **** void scanLinearResistor();
 136:main.c        **** int stringPlucks[4];
 137:main.c        **** int stringPlucksPrev[4];
 138:main.c        **** 
 139:main.c        **** #define KNOB_FIR_SIZE 8
 140:main.c        **** #define KNOB_FIR_SIZE_MASK 7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 8


 141:main.c        **** #define KNOB_FIR_SIZE_BITSHIFT 3
 142:main.c        **** uint32_t knobsFIR[5][KNOB_FIR_SIZE];
 143:main.c        **** 
 144:main.c        **** 
 145:main.c        **** #define LINEAR_FIR_SIZE 2
 146:main.c        **** #define LINEAR_FIR_SIZE_MASK 1
 147:main.c        **** #define LINEAR_FIR_SIZE_BITSHIFT 1
 148:main.c        **** 
 149:main.c        **** float hysteresisStates[4];
 150:main.c        **** float hysteresisLowThresh = 0.4f;
 151:main.c        **** float hysteresisHighThresh = 0.6f;
 152:main.c        **** 
 153:main.c        **** void DmaTxConfiguration(void);
 154:main.c        **** void DmaRxConfiguration(void);
 155:main.c        **** 
 156:main.c        **** /* DMA Configuration for DMA_TX */
 157:main.c        **** #define DMA_TX_BYTES_PER_BURST      (1u)
 158:main.c        **** #define DMA_TX_REQUEST_PER_BURST    (1u)
 159:main.c        **** #define DMA_TX_SRC_BASE             (CYDEV_SRAM_BASE)
 160:main.c        **** #define DMA_TX_DST_BASE             (CYDEV_PERIPH_BASE)
 161:main.c        **** 
 162:main.c        **** /* DMA Configuration for DMA_RX */
 163:main.c        **** #define DMA_RX_BYTES_PER_BURST      (1u)
 164:main.c        **** #define DMA_RX_REQUEST_PER_BURST    (1u)
 165:main.c        **** #define DMA_RX_SRC_BASE             (CYDEV_PERIPH_BASE)
 166:main.c        **** #define DMA_RX_DST_BASE             (CYDEV_SRAM_BASE)
 167:main.c        **** 
 168:main.c        **** #define BUFFER_SIZE                 (16u)
 169:main.c        **** #define BUFFER_2_SIZE               (16u)
 170:main.c        **** #define STORE_TD_CFG_ONCMPLT        (1u)
 171:main.c        **** 
 172:main.c        **** /* Variable declarations for DMA_TX*/
 173:main.c        **** volatile uint8 txChannel;
 174:main.c        **** volatile uint8 txTD;
 175:main.c        **** volatile uint8 txBuffer[BUFFER_SIZE];
 176:main.c        **** 
 177:main.c        **** volatile uint8 rxChannel;
 178:main.c        **** volatile uint8 rxTD;
 179:main.c        **** volatile uint8 rxBuffer[BUFFER_SIZE];
 180:main.c        **** 
 181:main.c        **** /* Variable declarations for DMA_2*/
 182:main.c        **** volatile uint8 tx2Channel;
 183:main.c        **** volatile uint8 tx2TD;
 184:main.c        **** volatile uint8 tx2Buffer[BUFFER_2_SIZE];
 185:main.c        **** 
 186:main.c        **** volatile uint8 rx2Channel;
 187:main.c        **** volatile uint8 rx2TD;
 188:main.c        **** volatile uint8 rx2Buffer[BUFFER_2_SIZE];
 189:main.c        **** 
 190:main.c        **** volatile uint8 tx2BufferTemp[BUFFER_2_SIZE];
 191:main.c        **** 
 192:main.c        ****     static uint8 CYCODE eepromArray[]={ 0, 0 };
 193:main.c        ****                                             
 194:main.c        ****     uint8 array[] ={ 0, 0 };
 195:main.c        ****                                 
 196:main.c        ****     /*Return status for EEPROM and UART*/ 
 197:main.c        **** cy_en_em_eeprom_status_t eepromReturnValue;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 9


 198:main.c        **** 
 199:main.c        **** 
 200:main.c        **** /* EEPROM storage in work flash, this is defined in Em_EEPROM.c*/
 201:main.c        **** #if defined (__ICCARM__)
 202:main.c        **** #pragma data_alignment = CY_FLASH_SIZEOF_ROW
 203:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE] = {0u};
 204:main.c        **** #else
 205:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE]
 206:main.c        **** __ALIGNED(CY_FLASH_SIZEOF_ROW) = {0u};
 207:main.c        **** #endif /* defined (__ICCARM__) */
 208:main.c        **** 
 209:main.c        ****     uint8 eeprom_cnt;
 210:main.c        ****     cystatus status;
 211:main.c        ****     volatile const uint8 * ptr;
 212:main.c        **** volatile int barCount = 0;
 213:main.c        **** 
 214:main.c        **** void handleNotes(int note, int velocity, int string);
 215:main.c        **** 
 216:main.c        **** int stringStates[4][2] = {{0,0},{0,0},{0,0},{0,0}};
 217:main.c        **** 
 218:main.c        **** CY_ISR(button_press_ISR) {     /* No need to clear any interrupt source; interrupt component should
 252              		.loc 1 218 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 1, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 257 0000 80B4     		push	{r7}
 258              		.cfi_def_cfa_offset 4
 259              		.cfi_offset 7, -4
 260 0002 00AF     		add	r7, sp, #0
 261              		.cfi_def_cfa_register 7
 219:main.c        ****  //FiltReg_Read(); 
 220:main.c        ****     //
 221:main.c        **** }
 262              		.loc 1 221 0
 263 0004 00BF     		nop
 264 0006 BD46     		mov	sp, r7
 265              		.cfi_def_cfa_register 13
 266              		@ sp needed
 267 0008 80BC     		pop	{r7}
 268              		.cfi_restore 7
 269              		.cfi_def_cfa_offset 0
 270 000a 7047     		bx	lr
 271              		.cfi_endproc
 272              	.LFE64:
 273              		.size	button_press_ISR, .-button_press_ISR
 274              		.global	__aeabi_fcmpgt
 275              		.global	__aeabi_fcmplt
 276              		.section	.text.LEAF_clip,"ax",%progbits
 277              		.align	2
 278              		.global	LEAF_clip
 279              		.thumb
 280              		.thumb_func
 281              		.type	LEAF_clip, %function
 282              	LEAF_clip:
 283              	.LFB65:
 222:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 10


 223:main.c        **** 
 224:main.c        **** #define INV_440 0.0022727272727273f
 225:main.c        **** 
 226:main.c        **** float   LEAF_clip(float min, float val, float max)
 227:main.c        **** {
 284              		.loc 1 227 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 24
 287              		@ frame_needed = 1, uses_anonymous_args = 0
 288 0000 80B5     		push	{r7, lr}
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 7, -8
 291              		.cfi_offset 14, -4
 292 0002 86B0     		sub	sp, sp, #24
 293              		.cfi_def_cfa_offset 32
 294 0004 00AF     		add	r7, sp, #0
 295              		.cfi_def_cfa_register 7
 296 0006 F860     		str	r0, [r7, #12]	@ float
 297 0008 B960     		str	r1, [r7, #8]	@ float
 298 000a 7A60     		str	r2, [r7, #4]	@ float
 228:main.c        ****     float tempmin = min;
 299              		.loc 1 228 0
 300 000c FB68     		ldr	r3, [r7, #12]	@ float
 301 000e 7B61     		str	r3, [r7, #20]	@ float
 229:main.c        ****     float tempmax = max;
 302              		.loc 1 229 0
 303 0010 7B68     		ldr	r3, [r7, #4]	@ float
 304 0012 3B61     		str	r3, [r7, #16]	@ float
 230:main.c        ****     if (min > max)
 305              		.loc 1 230 0
 306 0014 7968     		ldr	r1, [r7, #4]	@ float
 307 0016 F868     		ldr	r0, [r7, #12]	@ float
 308 0018 FFF7FEFF 		bl	__aeabi_fcmpgt
 309 001c 0346     		mov	r3, r0
 310 001e 002B     		cmp	r3, #0
 311 0020 03D0     		beq	.L3
 231:main.c        ****     {
 232:main.c        ****         tempmin = max;
 312              		.loc 1 232 0
 313 0022 7B68     		ldr	r3, [r7, #4]	@ float
 314 0024 7B61     		str	r3, [r7, #20]	@ float
 233:main.c        ****         tempmax = min;
 315              		.loc 1 233 0
 316 0026 FB68     		ldr	r3, [r7, #12]	@ float
 317 0028 3B61     		str	r3, [r7, #16]	@ float
 318              	.L3:
 234:main.c        ****     }
 235:main.c        ****     if (val < tempmin)
 319              		.loc 1 235 0
 320 002a 7969     		ldr	r1, [r7, #20]	@ float
 321 002c B868     		ldr	r0, [r7, #8]	@ float
 322 002e FFF7FEFF 		bl	__aeabi_fcmplt
 323 0032 0346     		mov	r3, r0
 324 0034 002B     		cmp	r3, #0
 325 0036 01D0     		beq	.L13
 236:main.c        ****     {
 237:main.c        ****         return tempmin;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 11


 326              		.loc 1 237 0
 327 0038 7B69     		ldr	r3, [r7, #20]	@ float
 328 003a 09E0     		b	.L7
 329              	.L13:
 238:main.c        ****     }
 239:main.c        ****     else if (val > tempmax)
 330              		.loc 1 239 0
 331 003c 3969     		ldr	r1, [r7, #16]	@ float
 332 003e B868     		ldr	r0, [r7, #8]	@ float
 333 0040 FFF7FEFF 		bl	__aeabi_fcmpgt
 334 0044 0346     		mov	r3, r0
 335 0046 002B     		cmp	r3, #0
 336 0048 01D0     		beq	.L14
 240:main.c        ****     {
 241:main.c        ****         return tempmax;
 337              		.loc 1 241 0
 338 004a 3B69     		ldr	r3, [r7, #16]	@ float
 339 004c 00E0     		b	.L7
 340              	.L14:
 242:main.c        ****     }
 243:main.c        ****     else
 244:main.c        ****     {
 245:main.c        ****         return val;
 341              		.loc 1 245 0
 342 004e BB68     		ldr	r3, [r7, #8]	@ float
 343              	.L7:
 246:main.c        ****     }
 247:main.c        **** }
 344              		.loc 1 247 0
 345 0050 1846     		mov	r0, r3
 346 0052 1837     		adds	r7, r7, #24
 347              		.cfi_def_cfa_offset 8
 348 0054 BD46     		mov	sp, r7
 349              		.cfi_def_cfa_register 13
 350              		@ sp needed
 351 0056 80BD     		pop	{r7, pc}
 352              		.cfi_endproc
 353              	.LFE65:
 354              		.size	LEAF_clip, .-LEAF_clip
 355              		.global	__aeabi_fcmple
 356              		.global	__aeabi_fmul
 357              		.section	.text.mtof,"ax",%progbits
 358              		.align	2
 359              		.global	mtof
 360              		.thumb
 361              		.thumb_func
 362              		.type	mtof, %function
 363              	mtof:
 364              	.LFB66:
 248:main.c        **** float mtof(float f)
 249:main.c        **** {
 365              		.loc 1 249 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 8
 368              		@ frame_needed = 1, uses_anonymous_args = 0
 369 0000 80B5     		push	{r7, lr}
 370              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 12


 371              		.cfi_offset 7, -8
 372              		.cfi_offset 14, -4
 373 0002 82B0     		sub	sp, sp, #8
 374              		.cfi_def_cfa_offset 16
 375 0004 00AF     		add	r7, sp, #0
 376              		.cfi_def_cfa_register 7
 377 0006 7860     		str	r0, [r7, #4]	@ float
 250:main.c        ****     if (f <= -1500.0f) return(0);
 378              		.loc 1 250 0
 379 0008 1349     		ldr	r1, .L25
 380 000a 7868     		ldr	r0, [r7, #4]	@ float
 381 000c FFF7FEFF 		bl	__aeabi_fcmple
 382 0010 0346     		mov	r3, r0
 383 0012 002B     		cmp	r3, #0
 384 0014 02D0     		beq	.L23
 385              		.loc 1 250 0 is_stmt 0 discriminator 1
 386 0016 4FF00003 		mov	r3, #0
 387 001a 19E0     		b	.L18
 388              	.L23:
 251:main.c        ****     else if (f > 1499.0f) return(mtof(1499.0f));
 389              		.loc 1 251 0 is_stmt 1
 390 001c 0F49     		ldr	r1, .L25+4
 391 001e 7868     		ldr	r0, [r7, #4]	@ float
 392 0020 FFF7FEFF 		bl	__aeabi_fcmpgt
 393 0024 0346     		mov	r3, r0
 394 0026 002B     		cmp	r3, #0
 395 0028 04D0     		beq	.L24
 396              		.loc 1 251 0 is_stmt 0 discriminator 1
 397 002a 0C48     		ldr	r0, .L25+4
 398 002c FFF7FEFF 		bl	mtof
 399 0030 0346     		mov	r3, r0
 400 0032 0DE0     		b	.L18
 401              	.L24:
 252:main.c        ****     else return (8.17579891564f * expf(0.0577622650f * f));
 402              		.loc 1 252 0 is_stmt 1
 403 0034 0A49     		ldr	r1, .L25+8
 404 0036 7868     		ldr	r0, [r7, #4]	@ float
 405 0038 FFF7FEFF 		bl	__aeabi_fmul
 406 003c 0346     		mov	r3, r0
 407 003e 1846     		mov	r0, r3
 408 0040 FFF7FEFF 		bl	expf
 409 0044 0346     		mov	r3, r0
 410 0046 0749     		ldr	r1, .L25+12
 411 0048 1846     		mov	r0, r3
 412 004a FFF7FEFF 		bl	__aeabi_fmul
 413 004e 0346     		mov	r3, r0
 414              	.L18:
 253:main.c        **** }
 415              		.loc 1 253 0
 416 0050 1846     		mov	r0, r3
 417 0052 0837     		adds	r7, r7, #8
 418              		.cfi_def_cfa_offset 8
 419 0054 BD46     		mov	sp, r7
 420              		.cfi_def_cfa_register 13
 421              		@ sp needed
 422 0056 80BD     		pop	{r7, pc}
 423              	.L26:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 13


 424              		.align	2
 425              	.L25:
 426 0058 0080BBC4 		.word	-994344960
 427 005c 0060BB44 		.word	1153130496
 428 0060 20986C3D 		.word	1030527008
 429 0064 13D00241 		.word	1090703379
 430              		.cfi_endproc
 431              	.LFE66:
 432              		.size	mtof, .-mtof
 433              		.section	.text.ftom,"ax",%progbits
 434              		.align	2
 435              		.global	ftom
 436              		.thumb
 437              		.thumb_func
 438              		.type	ftom, %function
 439              	ftom:
 440              	.LFB67:
 254:main.c        **** 
 255:main.c        **** float ftom(float f)
 256:main.c        **** {
 441              		.loc 1 256 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 8
 444              		@ frame_needed = 1, uses_anonymous_args = 0
 445 0000 80B5     		push	{r7, lr}
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 7, -8
 448              		.cfi_offset 14, -4
 449 0002 82B0     		sub	sp, sp, #8
 450              		.cfi_def_cfa_offset 16
 451 0004 00AF     		add	r7, sp, #0
 452              		.cfi_def_cfa_register 7
 453 0006 7860     		str	r0, [r7, #4]	@ float
 257:main.c        ****     return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 454              		.loc 1 257 0
 455 0008 4FF00001 		mov	r1, #0
 456 000c 7868     		ldr	r0, [r7, #4]	@ float
 457 000e FFF7FEFF 		bl	__aeabi_fcmpgt
 458 0012 0346     		mov	r3, r0
 459 0014 002B     		cmp	r3, #0
 460 0016 0ED0     		beq	.L33
 461              		.loc 1 257 0 is_stmt 0 discriminator 1
 462 0018 0949     		ldr	r1, .L34
 463 001a 7868     		ldr	r0, [r7, #4]	@ float
 464 001c FFF7FEFF 		bl	__aeabi_fmul
 465 0020 0346     		mov	r3, r0
 466 0022 1846     		mov	r0, r3
 467 0024 FFF7FEFF 		bl	logf
 468 0028 0346     		mov	r3, r0
 469 002a 0649     		ldr	r1, .L34+4
 470 002c 1846     		mov	r0, r3
 471 002e FFF7FEFF 		bl	__aeabi_fmul
 472 0032 0346     		mov	r3, r0
 473 0034 00E0     		b	.L31
 474              	.L33:
 475              		.loc 1 257 0 discriminator 2
 476 0036 044B     		ldr	r3, .L34+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 14


 477              	.L31:
 258:main.c        **** }
 478              		.loc 1 258 0 is_stmt 1 discriminator 5
 479 0038 1846     		mov	r0, r3
 480 003a 0837     		adds	r7, r7, #8
 481              		.cfi_def_cfa_offset 8
 482 003c BD46     		mov	sp, r7
 483              		.cfi_def_cfa_register 13
 484              		@ sp needed
 485 003e 80BD     		pop	{r7, pc}
 486              	.L35:
 487              		.align	2
 488              	.L34:
 489 0040 D27EFA3D 		.word	1039826642
 490 0044 AC7F8A41 		.word	1099595692
 491 0048 0080BBC4 		.word	-994344960
 492              		.cfi_endproc
 493              	.LFE67:
 494              		.size	ftom, .-ftom
 495              		.global	__aeabi_fsub
 496              		.global	__aeabi_fadd
 497              		.section	.text.LEAF_interpolation_linear,"ax",%progbits
 498              		.align	2
 499              		.global	LEAF_interpolation_linear
 500              		.thumb
 501              		.thumb_func
 502              		.type	LEAF_interpolation_linear, %function
 503              	LEAF_interpolation_linear:
 504              	.LFB68:
 259:main.c        **** 
 260:main.c        **** // alpha, [0.0, 1.0]
 261:main.c        **** float LEAF_interpolation_linear (float A, float B, float alpha)
 262:main.c        **** {
 505              		.loc 1 262 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 24
 508              		@ frame_needed = 1, uses_anonymous_args = 0
 509 0000 80B5     		push	{r7, lr}
 510              		.cfi_def_cfa_offset 8
 511              		.cfi_offset 7, -8
 512              		.cfi_offset 14, -4
 513 0002 86B0     		sub	sp, sp, #24
 514              		.cfi_def_cfa_offset 32
 515 0004 00AF     		add	r7, sp, #0
 516              		.cfi_def_cfa_register 7
 517 0006 F860     		str	r0, [r7, #12]	@ float
 518 0008 B960     		str	r1, [r7, #8]	@ float
 519 000a 7A60     		str	r2, [r7, #4]	@ float
 263:main.c        ****     float omAlpha = 1.0f - alpha;
 520              		.loc 1 263 0
 521 000c 7968     		ldr	r1, [r7, #4]	@ float
 522 000e 4FF07E50 		mov	r0, #1065353216
 523 0012 FFF7FEFF 		bl	__aeabi_fsub
 524 0016 0346     		mov	r3, r0
 525 0018 7B61     		str	r3, [r7, #20]	@ float
 264:main.c        ****     
 265:main.c        ****     // First 1/2 of interpolation
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 15


 266:main.c        ****     float out = A * omAlpha;
 526              		.loc 1 266 0
 527 001a 7969     		ldr	r1, [r7, #20]	@ float
 528 001c F868     		ldr	r0, [r7, #12]	@ float
 529 001e FFF7FEFF 		bl	__aeabi_fmul
 530 0022 0346     		mov	r3, r0
 531 0024 3B61     		str	r3, [r7, #16]	@ float
 267:main.c        ****     
 268:main.c        ****     out += B * alpha;
 532              		.loc 1 268 0
 533 0026 7968     		ldr	r1, [r7, #4]	@ float
 534 0028 B868     		ldr	r0, [r7, #8]	@ float
 535 002a FFF7FEFF 		bl	__aeabi_fmul
 536 002e 0346     		mov	r3, r0
 537 0030 1946     		mov	r1, r3
 538 0032 3869     		ldr	r0, [r7, #16]	@ float
 539 0034 FFF7FEFF 		bl	__aeabi_fadd
 540 0038 0346     		mov	r3, r0
 541 003a 3B61     		str	r3, [r7, #16]	@ float
 269:main.c        ****     
 270:main.c        ****     return out;
 542              		.loc 1 270 0
 543 003c 3B69     		ldr	r3, [r7, #16]	@ float
 271:main.c        **** }
 544              		.loc 1 271 0
 545 003e 1846     		mov	r0, r3
 546 0040 1837     		adds	r7, r7, #24
 547              		.cfi_def_cfa_offset 8
 548 0042 BD46     		mov	sp, r7
 549              		.cfi_def_cfa_register 13
 550              		@ sp needed
 551 0044 80BD     		pop	{r7, pc}
 552              		.cfi_endproc
 553              	.LFE68:
 554              		.size	LEAF_interpolation_linear, .-LEAF_interpolation_linear
 555              		.global	whichLinearSensor
 556 0046 00BF     		.bss
 557              		.align	2
 558              		.type	whichLinearSensor, %object
 559              		.size	whichLinearSensor, 4
 560              	whichLinearSensor:
 561 005c 00000000 		.space	4
 562              		.global	__aeabi_fdiv
 563              		.section	.text.map,"ax",%progbits
 564              		.align	2
 565              		.global	map
 566              		.thumb
 567              		.thumb_func
 568              		.type	map, %function
 569              	map:
 570              	.LFB69:
 272:main.c        **** void USB_service(void);
 273:main.c        **** 
 274:main.c        **** volatile int whichLinearSensor = 0;
 275:main.c        **** 
 276:main.c        **** float map(float value, float istart, float istop, float ostart, float ostop)
 277:main.c        **** {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 16


 571              		.loc 1 277 0
 572              		.cfi_startproc
 573              		@ args = 4, pretend = 0, frame = 16
 574              		@ frame_needed = 1, uses_anonymous_args = 0
 575 0000 B0B5     		push	{r4, r5, r7, lr}
 576              		.cfi_def_cfa_offset 16
 577              		.cfi_offset 4, -16
 578              		.cfi_offset 5, -12
 579              		.cfi_offset 7, -8
 580              		.cfi_offset 14, -4
 581 0002 84B0     		sub	sp, sp, #16
 582              		.cfi_def_cfa_offset 32
 583 0004 00AF     		add	r7, sp, #0
 584              		.cfi_def_cfa_register 7
 585 0006 F860     		str	r0, [r7, #12]	@ float
 586 0008 B960     		str	r1, [r7, #8]	@ float
 587 000a 7A60     		str	r2, [r7, #4]	@ float
 588 000c 3B60     		str	r3, [r7]	@ float
 278:main.c        ****     return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 589              		.loc 1 278 0
 590 000e 3968     		ldr	r1, [r7]	@ float
 591 0010 386A     		ldr	r0, [r7, #32]	@ float
 592 0012 FFF7FEFF 		bl	__aeabi_fsub
 593 0016 0346     		mov	r3, r0
 594 0018 1C46     		mov	r4, r3
 595 001a B968     		ldr	r1, [r7, #8]	@ float
 596 001c F868     		ldr	r0, [r7, #12]	@ float
 597 001e FFF7FEFF 		bl	__aeabi_fsub
 598 0022 0346     		mov	r3, r0
 599 0024 1D46     		mov	r5, r3
 600 0026 B968     		ldr	r1, [r7, #8]	@ float
 601 0028 7868     		ldr	r0, [r7, #4]	@ float
 602 002a FFF7FEFF 		bl	__aeabi_fsub
 603 002e 0346     		mov	r3, r0
 604 0030 1946     		mov	r1, r3
 605 0032 2846     		mov	r0, r5
 606 0034 FFF7FEFF 		bl	__aeabi_fdiv
 607 0038 0346     		mov	r3, r0
 608 003a 1946     		mov	r1, r3
 609 003c 2046     		mov	r0, r4
 610 003e FFF7FEFF 		bl	__aeabi_fmul
 611 0042 0346     		mov	r3, r0
 612 0044 3968     		ldr	r1, [r7]	@ float
 613 0046 1846     		mov	r0, r3
 614 0048 FFF7FEFF 		bl	__aeabi_fadd
 615 004c 0346     		mov	r3, r0
 279:main.c        **** }
 616              		.loc 1 279 0
 617 004e 1846     		mov	r0, r3
 618 0050 1037     		adds	r7, r7, #16
 619              		.cfi_def_cfa_offset 16
 620 0052 BD46     		mov	sp, r7
 621              		.cfi_def_cfa_register 13
 622              		@ sp needed
 623 0054 B0BD     		pop	{r4, r5, r7, pc}
 624              		.cfi_endproc
 625              	.LFE69:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 17


 626              		.size	map, .-map
 627              		.global	testVar
 628 0056 00BF     		.bss
 629              		.align	2
 630              		.type	testVar, %object
 631              		.size	testVar, 4
 632              	testVar:
 633 0060 00000000 		.space	4
 634              		.global	lastNotes
 635              		.align	2
 636              		.type	lastNotes, %object
 637              		.size	lastNotes, 16
 638              	lastNotes:
 639 0064 00000000 		.space	16
 639      00000000 
 639      00000000 
 639      00000000 
 640              		.global	frettedState
 641              		.data
 642              		.align	2
 643              		.type	frettedState, %object
 644              		.size	frettedState, 4
 645              	frettedState:
 646 0038 01000000 		.word	1
 647              		.global	polyMode
 648              		.bss
 649              		.align	2
 650              		.type	polyMode, %object
 651              		.size	polyMode, 4
 652              	polyMode:
 653 0074 00000000 		.space	4
 654              		.comm	pitchBendsPerString,16,4
 655              		.global	openStringCount
 656              		.align	2
 657              		.type	openStringCount, %object
 658              		.size	openStringCount, 16
 659              	openStringCount:
 660 0078 00000000 		.space	16
 660      00000000 
 660      00000000 
 660      00000000 
 661              		.global	loudestString
 662              		.align	2
 663              		.type	loudestString, %object
 664              		.size	loudestString, 4
 665              	loudestString:
 666 0088 00000000 		.space	4
 667              		.global	timeSinceLastAttack
 668 008c 00000000 		.align	3
 669              		.type	timeSinceLastAttack, %object
 670              		.size	timeSinceLastAttack, 8
 671              	timeSinceLastAttack:
 672 0090 00000000 		.space	8
 672      00000000 
 673              		.global	previousHysteresisStates
 674              		.align	2
 675              		.type	previousHysteresisStates, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 18


 676              		.size	previousHysteresisStates, 16
 677              	previousHysteresisStates:
 678 0098 00000000 		.space	16
 678      00000000 
 678      00000000 
 678      00000000 
 679              		.global	openStringFreqs
 680              		.data
 681              		.align	2
 682              		.type	openStringFreqs, %object
 683              		.size	openStringFreqs, 16
 684              	openStringFreqs:
 685 003c DFCF2442 		.word	1109708767
 686 0040 00005C42 		.word	1113325568
 687 0044 FED49242 		.word	1116919038
 688 0048 7DFFC342 		.word	1120141181
 689              		.global	openStringMIDI
 690              		.align	2
 691              		.type	openStringMIDI, %object
 692              		.size	openStringMIDI, 16
 693              	openStringMIDI:
 694 004c 0000E041 		.word	1105199104
 695 0050 00000442 		.word	1107558400
 696 0054 00001842 		.word	1108869120
 697 0058 00002C42 		.word	1110179840
 698              		.global	invStringMappedPositions
 699              		.bss
 700              		.align	2
 701              		.type	invStringMappedPositions, %object
 702              		.size	invStringMappedPositions, 16
 703              	invStringMappedPositions:
 704 00a8 00000000 		.space	16
 704      00000000 
 704      00000000 
 704      00000000 
 705              		.global	stringMIDI
 706              		.align	2
 707              		.type	stringMIDI, %object
 708              		.size	stringMIDI, 16
 709              	stringMIDI:
 710 00b8 00000000 		.space	16
 710      00000000 
 710      00000000 
 710      00000000 
 711              		.global	stringMIDIPrev
 712              		.align	2
 713              		.type	stringMIDIPrev, %object
 714              		.size	stringMIDIPrev, 16
 715              	stringMIDIPrev:
 716 00c8 00000000 		.space	16
 716      00000000 
 716      00000000 
 716      00000000 
 717              		.global	linearHysteresis
 718              		.data
 719              		.align	2
 720              		.type	linearHysteresis, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 19


 721              		.size	linearHysteresis, 4
 722              	linearHysteresis:
 723 005c 9A99193F 		.word	1058642330
 724              		.comm	hp_y,16,4
 725              		.comm	hp_x,16,4
 726              		.comm	hp_R,4,4
 727              		.comm	vibratoCrossfade,16,4
 728              		.comm	crossFadeStartCount,16,4
 729              		.global	previousPitchBendsSent
 730              		.bss
 731              		.align	2
 732              		.type	previousPitchBendsSent, %object
 733              		.size	previousPitchBendsSent, 4
 734              	previousPitchBendsSent:
 735 00d8 00000000 		.space	4
 736              		.comm	knobs,20,4
 737              		.comm	buttons,4,4
 738              		.global	firPointer
 739              		.align	2
 740              		.type	firPointer, %object
 741              		.size	firPointer, 4
 742              	firPointer:
 743 00dc 00000000 		.space	4
 744              		.global	knobs7bit
 745              		.align	2
 746              		.type	knobs7bit, %object
 747              		.size	knobs7bit, 5
 748              	knobs7bit:
 749 00e0 00000000 		.space	5
 749      00
 750              		.global	knobs7bitPrev
 751 00e5 000000   		.align	2
 752              		.type	knobs7bitPrev, %object
 753              		.size	knobs7bitPrev, 10
 754              	knobs7bitPrev:
 755 00e8 00000000 		.space	10
 755      00000000 
 755      0000
 756              		.global	knobs7bitPrevLS
 757 00f2 0000     		.align	2
 758              		.type	knobs7bitPrevLS, %object
 759              		.size	knobs7bitPrevLS, 10
 760              	knobs7bitPrevLS:
 761 00f4 00000000 		.space	10
 761      00000000 
 761      0000
 762              		.global	knobs7bitHysteresis
 763              		.data
 764              		.align	1
 765              		.type	knobs7bitHysteresis, %object
 766              		.size	knobs7bitHysteresis, 2
 767              	knobs7bitHysteresis:
 768 0060 1900     		.short	25
 769              		.global	linFirPointer
 770              		.bss
 771 00fe 0000     		.align	2
 772              		.type	linFirPointer, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 20


 773              		.size	linFirPointer, 4
 774              	linFirPointer:
 775 0100 00000000 		.space	4
 776              		.comm	linearFIR,32,4
 777              		.global	linearSmoothed
 778              		.align	2
 779              		.type	linearSmoothed, %object
 780              		.size	linearSmoothed, 16
 781              	linearSmoothed:
 782 0104 00000000 		.space	16
 782      00000000 
 782      00000000 
 782      00000000 
 783              		.global	linearSmoothedPrev
 784              		.align	2
 785              		.type	linearSmoothedPrev, %object
 786              		.size	linearSmoothedPrev, 16
 787              	linearSmoothedPrev:
 788 0114 00000000 		.space	16
 788      00000000 
 788      00000000 
 788      00000000 
 789              		.global	LHMuteCounter
 790              		.align	2
 791              		.type	LHMuteCounter, %object
 792              		.size	LHMuteCounter, 16
 793              	LHMuteCounter:
 794 0124 00000000 		.space	16
 794      00000000 
 794      00000000 
 794      00000000 
 795              		.global	LHMute
 796              		.align	2
 797              		.type	LHMute, %object
 798              		.size	LHMute, 4
 799              	LHMute:
 800 0134 00000000 		.space	4
 801              		.global	pitchFreeze
 802              		.align	2
 803              		.type	pitchFreeze, %object
 804              		.size	pitchFreeze, 4
 805              	pitchFreeze:
 806 0138 00000000 		.space	4
 807              		.comm	pitchBendHistory,512,4
 808              		.global	pitchBendHistoryPointer
 809              		.align	2
 810              		.type	pitchBendHistoryPointer, %object
 811              		.size	pitchBendHistoryPointer, 8
 812              	pitchBendHistoryPointer:
 813 013c 00000000 		.space	8
 813      00000000 
 814              		.comm	skippedNotes,640,4
 815              		.global	skipPointer
 816              		.align	2
 817              		.type	skipPointer, %object
 818              		.size	skipPointer, 4
 819              	skipPointer:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 21


 820 0144 00000000 		.space	4
 821              		.global	bufCount
 822              		.type	bufCount, %object
 823              		.size	bufCount, 1
 824              	bufCount:
 825 0148 00       		.space	1
 826              		.global	sendingPreset
 827              		.type	sendingPreset, %object
 828              		.size	sendingPreset, 1
 829              	sendingPreset:
 830 0149 00       		.space	1
 831              		.section	.text.SleepIsr_function,"ax",%progbits
 832              		.align	2
 833              		.global	SleepIsr_function
 834              		.thumb
 835              		.thumb_func
 836              		.type	SleepIsr_function, %function
 837              	SleepIsr_function:
 838              	.LFB70:
 280:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode);
 281:main.c        **** //Main
 282:main.c        **** 
 283:main.c        **** volatile int testVar = 0;
 284:main.c        **** int lastNotes[4] = {0,0,0,0};
 285:main.c        **** int frettedState = 1;
 286:main.c        **** int polyMode = 0;
 287:main.c        **** 
 288:main.c        **** float pitchBendsPerString[4];
 289:main.c        **** int openStringCount[4] = {0,0,0,0};
 290:main.c        **** int loudestString = 0;
 291:main.c        **** int64_t timeSinceLastAttack = 0;
 292:main.c        **** float previousHysteresisStates[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 293:main.c        **** float openStringFreqs[4] = {41.203f, 55.0f, 73.416f, 97.999f};
 294:main.c        **** float openStringMIDI[4] = {28.0f, 33.0f, 38.0f, 43.0f};
 295:main.c        **** float invStringMappedPositions[4] = {0,0,0,0};
 296:main.c        **** float stringMIDI[4] = {0,0,0,0};
 297:main.c        **** float stringMIDIPrev[4] = {0,0,0,0};
 298:main.c        **** float linearHysteresis = 0.6f;
 299:main.c        **** float hp_y[4];
 300:main.c        **** float hp_x[4]; 
 301:main.c        **** float hp_R;
 302:main.c        **** 
 303:main.c        **** float vibratoCrossfade[4];
 304:main.c        **** int crossFadeStartCount[4];
 305:main.c        **** 
 306:main.c        **** int previousPitchBendsSent = 0;
 307:main.c        **** uint32_t knobs[5];
 308:main.c        **** int buttons;
 309:main.c        **** 
 310:main.c        **** int firPointer = 0;
 311:main.c        **** uint8_t knobs7bit[5] = {0,0,0,0,0};
 312:main.c        **** uint16_t knobs7bitPrev[5] = {0,0,0,0,0};
 313:main.c        **** uint16_t knobs7bitPrevLS[5] = {0,0,0,0,0};
 314:main.c        **** uint16_t knobs7bitHysteresis = 25;
 315:main.c        **** 
 316:main.c        **** uint8_t linFirPointer[4] = {0,0,0,0};
 317:main.c        **** uint32_t linearFIR[4][LINEAR_FIR_SIZE];
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 22


 318:main.c        **** uint32_t linearSmoothed[4] = {0,0,0,0};
 319:main.c        **** uint32_t linearSmoothedPrev[4] = {0,0,0,0};         
 320:main.c        **** uint32_t LHMuteCounter[4] = {0,0,0,0};
 321:main.c        **** uint8_t LHMute[4] = {0,0,0,0};
 322:main.c        **** uint8_t pitchFreeze[4] = {0,0,0,0};
 323:main.c        **** float pitchBendHistory[4][32];
 324:main.c        **** uint16_t pitchBendHistoryPointer[4] = {0,0,0,0};
 325:main.c        **** 
 326:main.c        **** int skippedNotes[32][5];
 327:main.c        **** int skipPointer = 0;
 328:main.c        **** 
 329:main.c        **** uint8_t bufCount = 0;
 330:main.c        **** uint8_t sendingPreset = 0;
 331:main.c        **** 
 332:main.c        **** CY_ISR(SleepIsr_function)
 333:main.c        **** {
 839              		.loc 1 333 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 0
 842              		@ frame_needed = 1, uses_anonymous_args = 0
 843 0000 80B5     		push	{r7, lr}
 844              		.cfi_def_cfa_offset 8
 845              		.cfi_offset 7, -8
 846              		.cfi_offset 14, -4
 847 0002 00AF     		add	r7, sp, #0
 848              		.cfi_def_cfa_register 7
 334:main.c        ****     if (USB_active)
 849              		.loc 1 334 0
 850 0004 0C4B     		ldr	r3, .L43
 851 0006 1B78     		ldrb	r3, [r3]
 852 0008 DBB2     		uxtb	r3, r3
 853 000a 002B     		cmp	r3, #0
 854 000c 0FD0     		beq	.L41
 335:main.c        ****     {
 336:main.c        ****         //check USB activity
 337:main.c        ****         if( USB_CheckActivity() != 0u ) 
 855              		.loc 1 337 0
 856 000e FFF7FEFF 		bl	USB_CheckActivity
 857 0012 0346     		mov	r3, r0
 858 0014 002B     		cmp	r3, #0
 859 0016 03D0     		beq	.L42
 338:main.c        ****         {
 339:main.c        ****             usbActivityCounter = 0u;
 860              		.loc 1 339 0
 861 0018 084B     		ldr	r3, .L43+4
 862 001a 0022     		movs	r2, #0
 863 001c 1A70     		strb	r2, [r3]
 864 001e 06E0     		b	.L41
 865              	.L42:
 340:main.c        ****         } 
 341:main.c        ****         else 
 342:main.c        ****         {
 343:main.c        ****             usbActivityCounter++;
 866              		.loc 1 343 0
 867 0020 064B     		ldr	r3, .L43+4
 868 0022 1B78     		ldrb	r3, [r3]
 869 0024 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 23


 870 0026 0133     		adds	r3, r3, #1
 871 0028 DAB2     		uxtb	r2, r3
 872 002a 044B     		ldr	r3, .L43+4
 873 002c 1A70     		strb	r2, [r3]
 874              	.L41:
 344:main.c        ****         }
 345:main.c        **** 
 346:main.c        ****     }
 347:main.c        ****     //Clear pending interrupt
 348:main.c        ****     SleepTimer_GetStatus();
 875              		.loc 1 348 0
 876 002e FFF7FEFF 		bl	SleepTimer_GetStatus
 349:main.c        **** }
 877              		.loc 1 349 0
 878 0032 00BF     		nop
 879 0034 80BD     		pop	{r7, pc}
 880              	.L44:
 881 0036 00BF     		.align	2
 882              	.L43:
 883 0038 00000000 		.word	USB_active
 884 003c 00000000 		.word	usbActivityCounter
 885              		.cfi_endproc
 886              	.LFE70:
 887              		.size	SleepIsr_function, .-SleepIsr_function
 888              		.section	.text.Vbus_function,"ax",%progbits
 889              		.align	2
 890              		.global	Vbus_function
 891              		.thumb
 892              		.thumb_func
 893              		.type	Vbus_function, %function
 894              	Vbus_function:
 895              	.LFB71:
 350:main.c        **** CY_ISR(Vbus_function)
 351:main.c        **** {
 896              		.loc 1 351 0
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 0
 899              		@ frame_needed = 1, uses_anonymous_args = 0
 900 0000 80B5     		push	{r7, lr}
 901              		.cfi_def_cfa_offset 8
 902              		.cfi_offset 7, -8
 903              		.cfi_offset 14, -4
 904 0002 00AF     		add	r7, sp, #0
 905              		.cfi_def_cfa_register 7
 352:main.c        ****     //plug or unplug event
 353:main.c        ****     //check if eeprom has a flag saying you just restarted. If so, don't restart again
 354:main.c        ****     //otherwise, restart
 355:main.c        ****     my_Vbus_ISR_ClearPending();
 906              		.loc 1 355 0
 907 0004 FFF7FEFF 		bl	my_Vbus_ISR_ClearPending
 356:main.c        ****     vBusPin_ClearInterrupt();
 908              		.loc 1 356 0
 909 0008 FFF7FEFF 		bl	vBusPin_ClearInterrupt
 357:main.c        ****     restartSystemCheck();
 910              		.loc 1 357 0
 911 000c FFF7FEFF 		bl	restartSystemCheck
 358:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 24


 359:main.c        **** }
 912              		.loc 1 359 0
 913 0010 00BF     		nop
 914 0012 80BD     		pop	{r7, pc}
 915              		.cfi_endproc
 916              	.LFE71:
 917              		.size	Vbus_function, .-Vbus_function
 918              		.section	.text.restartSystemCheck,"ax",%progbits
 919              		.align	2
 920              		.global	restartSystemCheck
 921              		.thumb
 922              		.thumb_func
 923              		.type	restartSystemCheck, %function
 924              	restartSystemCheck:
 925              	.LFB72:
 360:main.c        **** 
 361:main.c        **** void restartSystemCheck()
 362:main.c        **** {
 926              		.loc 1 362 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 0
 929              		@ frame_needed = 1, uses_anonymous_args = 0
 930 0000 80B5     		push	{r7, lr}
 931              		.cfi_def_cfa_offset 8
 932              		.cfi_offset 7, -8
 933              		.cfi_offset 14, -4
 934 0002 00AF     		add	r7, sp, #0
 935              		.cfi_def_cfa_register 7
 363:main.c        ****     eepromReturnValue = Em_EEPROM_Read(0u, eepromArray, 2u);
 936              		.loc 1 363 0
 937 0004 184B     		ldr	r3, .L50
 938 0006 0222     		movs	r2, #2
 939 0008 1849     		ldr	r1, .L50+4
 940 000a 0020     		movs	r0, #0
 941 000c FFF7FEFF 		bl	Cy_Em_EEPROM_Read
 942 0010 0346     		mov	r3, r0
 943 0012 1A46     		mov	r2, r3
 944 0014 164B     		ldr	r3, .L50+8
 945 0016 1A70     		strb	r2, [r3]
 364:main.c        ****     //only do the restart check if there is a USB cable plugged in (to avoid restarting while tryin
 365:main.c        ****     if (USB_VBusPresent() == 1)
 946              		.loc 1 365 0
 947 0018 FFF7FEFF 		bl	USB_VBusPresent
 948 001c 0346     		mov	r3, r0
 949 001e 012B     		cmp	r3, #1
 950 0020 20D1     		bne	.L49
 366:main.c        ****     {
 367:main.c        ****         if (*(volatile uint8 *) &eepromArray[0] == 1u)
 951              		.loc 1 367 0
 952 0022 124B     		ldr	r3, .L50+4
 953 0024 1B78     		ldrb	r3, [r3]
 954 0026 DBB2     		uxtb	r3, r3
 955 0028 012B     		cmp	r3, #1
 956 002a 0CD1     		bne	.L48
 368:main.c        ****         {
 369:main.c        ****             //a flag says we just restarted
 370:main.c        ****             //write a zero so it knows next time that it's OK to restart
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 25


 371:main.c        ****             array[0] = 0;
 957              		.loc 1 371 0
 958 002c 114B     		ldr	r3, .L50+12
 959 002e 0022     		movs	r2, #0
 960 0030 1A70     		strb	r2, [r3]
 372:main.c        ****             Em_EEPROM_Write(0u,array,2u);     
 961              		.loc 1 372 0
 962 0032 0D4B     		ldr	r3, .L50
 963 0034 0222     		movs	r2, #2
 964 0036 0F49     		ldr	r1, .L50+12
 965 0038 0020     		movs	r0, #0
 966 003a FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 373:main.c        ****             USB_check_flag = 1;
 967              		.loc 1 373 0
 968 003e 0E4B     		ldr	r3, .L50+16
 969 0040 0122     		movs	r2, #1
 970 0042 1A70     		strb	r2, [r3]
 374:main.c        ****         }
 375:main.c        ****         else
 376:main.c        ****         {
 377:main.c        ****            //otherwise, we need to restart
 378:main.c        ****            array[0] = 1;
 379:main.c        ****            Em_EEPROM_Write(0u,array,2u);  
 380:main.c        ****             USB_Stop();
 381:main.c        ****             I2C_1_Stop();
 382:main.c        ****             CySoftwareReset();
 383:main.c        ****         }
 384:main.c        ****     }
 385:main.c        **** }
 971              		.loc 1 385 0
 972 0044 0EE0     		b	.L49
 973              	.L48:
 378:main.c        ****            Em_EEPROM_Write(0u,array,2u);  
 974              		.loc 1 378 0
 975 0046 0B4B     		ldr	r3, .L50+12
 976 0048 0122     		movs	r2, #1
 977 004a 1A70     		strb	r2, [r3]
 379:main.c        ****             USB_Stop();
 978              		.loc 1 379 0
 979 004c 064B     		ldr	r3, .L50
 980 004e 0222     		movs	r2, #2
 981 0050 0849     		ldr	r1, .L50+12
 982 0052 0020     		movs	r0, #0
 983 0054 FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 380:main.c        ****             I2C_1_Stop();
 984              		.loc 1 380 0
 985 0058 FFF7FEFF 		bl	USB_Stop
 381:main.c        ****             CySoftwareReset();
 986              		.loc 1 381 0
 987 005c FFF7FEFF 		bl	I2C_1_Stop
 382:main.c        ****         }
 988              		.loc 1 382 0
 989 0060 FFF7FEFF 		bl	CySoftwareReset
 990              	.L49:
 991              		.loc 1 385 0
 992 0064 00BF     		nop
 993 0066 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 26


 994              	.L51:
 995              		.align	2
 996              	.L50:
 997 0068 00000000 		.word	Em_EEPROM_context
 998 006c 30000000 		.word	eepromArray
 999 0070 00000000 		.word	eepromReturnValue
 1000 0074 00000000 		.word	array
 1001 0078 00000000 		.word	USB_check_flag
 1002              		.cfi_endproc
 1003              	.LFE72:
 1004              		.size	restartSystemCheck, .-restartSystemCheck
 1005              		.global	__aeabi_ui2f
 1006              		.global	__aeabi_f2iz
 1007              		.global	__aeabi_f2uiz
 1008              		.section	.text.main,"ax",%progbits
 1009              		.align	2
 1010              		.global	main
 1011              		.thumb
 1012              		.thumb_func
 1013              		.type	main, %function
 1014              	main:
 1015              	.LFB73:
 386:main.c        **** 
 387:main.c        **** int main(void)
 388:main.c        **** {
 1016              		.loc 1 388 0
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 32
 1019              		@ frame_needed = 1, uses_anonymous_args = 0
 1020 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1021              		.cfi_def_cfa_offset 20
 1022              		.cfi_offset 4, -20
 1023              		.cfi_offset 5, -16
 1024              		.cfi_offset 6, -12
 1025              		.cfi_offset 7, -8
 1026              		.cfi_offset 14, -4
 1027 0002 8BB0     		sub	sp, sp, #44
 1028              		.cfi_def_cfa_offset 64
 1029 0004 02AF     		add	r7, sp, #8
 1030              		.cfi_def_cfa 7, 56
 389:main.c        **** 
 390:main.c        **** 	CYGlobalIntEnable; 
 1031              		.loc 1 390 0
 1032              		.syntax unified
 1033              	@ 390 "main.c" 1
 1034 0006 62B6     		CPSIE   i
 1035              	@ 0 "" 2
 391:main.c        ****     SPI_ready_Write(0);
 1036              		.loc 1 391 0
 1037              		.thumb
 1038              		.syntax unified
 1039 0008 0020     		movs	r0, #0
 1040 000a FFF7FEFF 		bl	SPI_ready_Write
 392:main.c        ****     
 393:main.c        ****     //EEPROM_Start();
 394:main.c        ****     
 395:main.c        ****     eepromReturnValue = Em_EEPROM_Init((uint32_t)Em_EEPROM_em_EepromStorage);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 27


 1041              		.loc 1 395 0
 1042 000e A44B     		ldr	r3, .L119
 1043 0010 1846     		mov	r0, r3
 1044 0012 FFF7FEFF 		bl	Em_EEPROM_Init
 1045 0016 0346     		mov	r3, r0
 1046 0018 1A46     		mov	r2, r3
 1047 001a A24B     		ldr	r3, .L119+4
 1048 001c 1A70     		strb	r2, [r3]
 396:main.c        ****     if(eepromReturnValue != CY_EM_EEPROM_SUCCESS)
 397:main.c        ****     {
 398:main.c        ****        // HandleError();
 399:main.c        ****     }
 400:main.c        ****     USB_SetPowerStatus(USB_DEVICE_STATUS_SELF_POWERED);
 1049              		.loc 1 400 0
 1050 001e 0120     		movs	r0, #1
 1051 0020 FFF7FEFF 		bl	USB_SetPowerStatus
 401:main.c        ****     my_Vbus_ISR_StartEx(Vbus_function);
 1052              		.loc 1 401 0
 1053 0024 A048     		ldr	r0, .L119+8
 1054 0026 FFF7FEFF 		bl	my_Vbus_ISR_StartEx
 402:main.c        ****     
 403:main.c        ****     if (!USB_VBusPresent())
 1055              		.loc 1 403 0
 1056 002a FFF7FEFF 		bl	USB_VBusPresent
 1057 002e 0346     		mov	r3, r0
 1058 0030 002B     		cmp	r3, #0
 1059 0032 01D1     		bne	.L53
 404:main.c        ****     {
 405:main.c        ****        restartSystemCheck();
 1060              		.loc 1 405 0
 1061 0034 FFF7FEFF 		bl	restartSystemCheck
 1062              	.L53:
 406:main.c        ****     }
 407:main.c        ****     
 408:main.c        ****     
 409:main.c        ****     IDAC8_1_Start();
 1063              		.loc 1 409 0
 1064 0038 FFF7FEFF 		bl	IDAC8_1_Start
 410:main.c        **** 	ADC_1_Start();
 1065              		.loc 1 410 0
 1066 003c FFF7FEFF 		bl	ADC_1_Start
 411:main.c        **** 	AMux_1_Start();
 1067              		.loc 1 411 0
 1068 0040 FFF7FEFF 		bl	AMux_1_Start
 412:main.c        ****     DmaTxConfiguration();
 1069              		.loc 1 412 0
 1070 0044 FFF7FEFF 		bl	DmaTxConfiguration
 413:main.c        ****     DmaRxConfiguration();
 1071              		.loc 1 413 0
 1072 0048 FFF7FEFF 		bl	DmaRxConfiguration
 414:main.c        ****     ADC_SAR_Seq_1_Start();
 1073              		.loc 1 414 0
 1074 004c FFF7FEFF 		bl	ADC_SAR_Seq_1_Start
 415:main.c        ****     ADC_SAR_Seq_1_StartConvert();
 1075              		.loc 1 415 0
 1076 0050 FFF7FEFF 		bl	ADC_SAR_Seq_1_StartConvert
 416:main.c        ****     SPIM_1_Start();
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 28


 1077              		.loc 1 416 0
 1078 0054 FFF7FEFF 		bl	SPIM_1_Start
 417:main.c        ****     SPIM_2_Start();
 1079              		.loc 1 417 0
 1080 0058 FFF7FEFF 		bl	SPIM_2_Start
 418:main.c        ****     //I2C_1_Start();
 419:main.c        ****     
 420:main.c        **** 
 421:main.c        ****     
 422:main.c        ****     CapSense_Start();     
 1081              		.loc 1 422 0
 1082 005c FFF7FEFF 		bl	CapSense_Start
 423:main.c        ****     
 424:main.c        ****     hp_R = 1.0f - (3.14159265358979f * 2.0f * 2.0f / 200.0f);
 1083              		.loc 1 424 0
 1084 0060 924B     		ldr	r3, .L119+12
 1085 0062 934A     		ldr	r2, .L119+16
 1086 0064 1A60     		str	r2, [r3]	@ float
 425:main.c        **** 
 426:main.c        ****     CyDelay(10);
 1087              		.loc 1 426 0
 1088 0066 0A20     		movs	r0, #10
 1089 0068 FFF7FEFF 		bl	CyDelay
 427:main.c        ****     CapSense_InitializeAllBaselines() ;
 1090              		.loc 1 427 0
 1091 006c FFF7FEFF 		bl	CapSense_InitializeAllBaselines
 428:main.c        ****     
 429:main.c        ****     SPI_ready_Write(1);
 1092              		.loc 1 429 0
 1093 0070 0120     		movs	r0, #1
 1094 0072 FFF7FEFF 		bl	SPI_ready_Write
 430:main.c        ****     CyDelay(10);
 1095              		.loc 1 430 0
 1096 0076 0A20     		movs	r0, #10
 1097 0078 FFF7FEFF 		bl	CyDelay
 1098              	.L114:
 431:main.c        **** 
 432:main.c        ****     //tSimplePoly_init(&myPoly);
 433:main.c        **** 	for(;;)
 434:main.c        ****     {
 435:main.c        **** 
 436:main.c        **** 
 437:main.c        ****         //turn on the multiplexer channels that set up the resistive sensors
 438:main.c        ****         //#if 0
 439:main.c        ****         ExtMUX_EN_Write(0);
 1099              		.loc 1 439 0
 1100 007c 0020     		movs	r0, #0
 1101 007e FFF7FEFF 		bl	ExtMUX_EN_Write
 440:main.c        ****         //CyDelayUs(5);
 441:main.c        ****         scanLinearResistor();
 1102              		.loc 1 441 0
 1103 0082 FFF7FEFF 		bl	scanLinearResistor
 442:main.c        **** 
 443:main.c        ****         //now disconnect resistive sensors so that they don't interfere with CapSense
 444:main.c        ****        // #endif
 445:main.c        ****         ExtMUX_EN_Write(1);
 1104              		.loc 1 445 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 29


 1105 0086 0120     		movs	r0, #1
 1106 0088 FFF7FEFF 		bl	ExtMUX_EN_Write
 446:main.c        ****         CyDelayUs(5);
 1107              		.loc 1 446 0
 1108 008c 0520     		movs	r0, #5
 1109 008e FFF7FEFF 		bl	CyDelayUs
 447:main.c        ****         CapSense_ClearSensors();
 1110              		.loc 1 447 0
 1111 0092 FFF7FEFF 		bl	CapSense_ClearSensors
 448:main.c        ****         CapSense_UpdateEnabledBaselines();
 1112              		.loc 1 448 0
 1113 0096 FFF7FEFF 		bl	CapSense_UpdateEnabledBaselines
 449:main.c        ****         CapSense_ScanEnabledWidgets();  
 1114              		.loc 1 449 0
 1115 009a FFF7FEFF 		bl	CapSense_ScanEnabledWidgets
 450:main.c        ****         currentOutPointer = 1;
 1116              		.loc 1 450 0
 1117 009e 854B     		ldr	r3, .L119+20
 1118 00a0 0122     		movs	r2, #1
 1119 00a2 1A60     		str	r2, [r3]
 451:main.c        ****         if (scanPart == 0)
 1120              		.loc 1 451 0
 1121 00a4 844B     		ldr	r3, .L119+24
 1122 00a6 1B68     		ldr	r3, [r3]
 1123 00a8 002B     		cmp	r3, #0
 1124 00aa 40F08F82 		bne	.L54
 1125              	.LBB2:
 452:main.c        ****         {
 453:main.c        **** 
 454:main.c        ****             //buttons = Status_Reg_1_Read();
 455:main.c        ****             #if 0
 456:main.c        ****             
 457:main.c        ****             
 458:main.c        ****           //  sendMIDIControlChange(whichLinearSensor*3, (linearPotValue32Bit[whichLinearSensor] >>
 459:main.c        ****           //  sendMIDIControlChange(whichLinearSensor*3+1, (linearPotValue32Bit[whichLinearSensor] 
 460:main.c        ****           //  sendMIDIControlChange(whichLinearSensor*3+2, (linearPotValue32Bit[whichLinearSensor] 
 461:main.c        ****             uint8_t fretAbove = binarySearch(fretMeasurements[whichLinearSensor], 0, 21, linearPotV
 462:main.c        ****             float pitchBendVal = 8192.0;
 463:main.c        ****             float midiFloat = 0.0f;
 464:main.c        ****             if (fretAbove > 0)
 465:main.c        ****             {
 466:main.c        ****                 float range = fretMeasurements[whichLinearSensor][fretAbove-1] - fretMeasurements[w
 467:main.c        ****                 float ratio = ((float)(linearPotValue32Bit[whichLinearSensor]  - fretMeasurements[w
 468:main.c        ****                 midiFloat = (1.0f - ratio) + (float)(fretAbove - 1);
 469:main.c        ****             }
 470:main.c        ****             if (frettedState)
 471:main.c        ****             {
 472:main.c        ****                 float roundedMidiFloat = roundf(midiFloat);
 473:main.c        ****                 if (midiFloat < hysteresisStates[whichLinearSensor] - 0.6f)
 474:main.c        ****                 {
 475:main.c        ****                     hysteresisStates[whichLinearSensor] = roundedMidiFloat;   
 476:main.c        ****                 }
 477:main.c        ****                 else if (midiFloat > hysteresisStates[whichLinearSensor] + 0.6f)
 478:main.c        ****                 {
 479:main.c        ****                     hysteresisStates[whichLinearSensor] = roundedMidiFloat;   
 480:main.c        ****                 }
 481:main.c        ****                 if (hysteresisStates[whichLinearSensor] != previousHysteresisStates[whichLinearSens
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 30


 482:main.c        ****                 {
 483:main.c        ****                     vibratoCrossfade[whichLinearSensor] = 0.0f;
 484:main.c        ****                     crossFadeStartCount[whichLinearSensor] = 0;
 485:main.c        ****                 }
 486:main.c        ****                 //64 is the number of passes through this loop that it waits before applying the hi
 487:main.c        ****                 //otherwise you get glitches as the filter picks up fret changes and smoothes them 
 488:main.c        ****                 // would be better to do highpass and lowpass to narrow to bandwidth of 1Hz to 10Hz
 489:main.c        ****                 else if ((vibratoCrossfade[whichLinearSensor] < 1.5f) && (crossFadeStartCount[which
 490:main.c        ****                 {
 491:main.c        ****                     vibratoCrossfade[whichLinearSensor] += 0.01f;
 492:main.c        ****                    
 493:main.c        ****                 }
 494:main.c        ****                 else if (crossFadeStartCount[whichLinearSensor] <= 64)
 495:main.c        ****                 {
 496:main.c        ****                     crossFadeStartCount[whichLinearSensor]++;
 497:main.c        ****                 }
 498:main.c        ****          
 499:main.c        ****                 previousHysteresisStates[whichLinearSensor] = hysteresisStates[whichLinearSensor];
 500:main.c        ****                                 //high pass filter to get fast changes to add later
 501:main.c        ****                 float vibrato = midiFloat - hp_x[whichLinearSensor] + hp_R * hp_y[whichLinearSensor
 502:main.c        ****                 hp_x[whichLinearSensor] = midiFloat;
 503:main.c        ****                 hp_y[whichLinearSensor] = vibrato;
 504:main.c        ****                 
 505:main.c        ****                 midiFloat = hysteresisStates[whichLinearSensor]+ (vibrato * vibratoCrossfade[whichL
 506:main.c        ****             }                
 507:main.c        ****             #endif
 508:main.c        ****             
 509:main.c        ****              
 510:main.c        ****             float pitchBendVal = 8192.0;
 1126              		.loc 1 510 0
 1127 00ae 4FF08C43 		mov	r3, #1174405120
 1128 00b2 7B60     		str	r3, [r7, #4]	@ float
 511:main.c        ****             
 512:main.c        ****             if (linearPotValue32Bit[whichLinearSensor] == 65535)
 1129              		.loc 1 512 0
 1130 00b4 814B     		ldr	r3, .L119+28
 1131 00b6 1B68     		ldr	r3, [r3]
 1132 00b8 814A     		ldr	r2, .L119+32
 1133 00ba 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1134 00be 4FF6FF72 		movw	r2, #65535
 1135 00c2 9342     		cmp	r3, r2
 1136 00c4 40F01481 		bne	.L55
 513:main.c        ****             {
 514:main.c        ****                 stringMIDI[whichLinearSensor] = openStringMIDI[whichLinearSensor];
 1137              		.loc 1 514 0
 1138 00c8 7C4B     		ldr	r3, .L119+28
 1139 00ca 1B68     		ldr	r3, [r3]
 1140 00cc 7B4A     		ldr	r2, .L119+28
 1141 00ce 1268     		ldr	r2, [r2]
 1142 00d0 7C49     		ldr	r1, .L119+36
 1143 00d2 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1144 00d6 7C49     		ldr	r1, .L119+40
 1145 00d8 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 515:main.c        ****                  //pitchBendVal  = (stringMIDI[whichLinearSensor] * 341.0f) + 8192.0f;
 516:main.c        ****                 //if ((openStringCount[whichLinearSensor] < 5) || (CapSense_sensorOnMask[whichLinea
 517:main.c        ****                 //{
 518:main.c        ****                 //    openStringCount[whichLinearSensor]++;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 31


 519:main.c        ****                 //}
 520:main.c        ****                 //else
 521:main.c        ****                 //{
 522:main.c        ****                 //    pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 523:main.c        ****                // }
 524:main.c        ****                 if (pitchFreeze[whichLinearSensor])
 1146              		.loc 1 524 0
 1147 00dc 774B     		ldr	r3, .L119+28
 1148 00de 1B68     		ldr	r3, [r3]
 1149 00e0 7A4A     		ldr	r2, .L119+44
 1150 00e2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1151 00e4 002B     		cmp	r3, #0
 1152 00e6 00F0B380 		beq	.L56
 525:main.c        ****                 {
 526:main.c        ****                     stringMIDI[whichLinearSensor] = pitchBendHistory[whichLinearSensor][((pitchBend
 1153              		.loc 1 526 0
 1154 00ea 744B     		ldr	r3, .L119+28
 1155 00ec 1B68     		ldr	r3, [r3]
 1156 00ee 734A     		ldr	r2, .L119+28
 1157 00f0 1168     		ldr	r1, [r2]
 1158 00f2 724A     		ldr	r2, .L119+28
 1159 00f4 1268     		ldr	r2, [r2]
 1160 00f6 7648     		ldr	r0, .L119+48
 1161 00f8 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 1162 00fc 0132     		adds	r2, r2, #1
 1163 00fe 02F01F02 		and	r2, r2, #31
 1164 0102 7448     		ldr	r0, .L119+52
 1165 0104 4901     		lsls	r1, r1, #5
 1166 0106 0A44     		add	r2, r2, r1
 1167 0108 50F82220 		ldr	r2, [r0, r2, lsl #2]	@ float
 1168 010c 6E49     		ldr	r1, .L119+40
 1169 010e 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 527:main.c        ****                     pitchBendHistory[whichLinearSensor][pitchBendHistoryPointer[whichLinearSensor]]
 1170              		.loc 1 527 0
 1171 0112 6A4B     		ldr	r3, .L119+28
 1172 0114 1B68     		ldr	r3, [r3]
 1173 0116 694A     		ldr	r2, .L119+28
 1174 0118 1268     		ldr	r2, [r2]
 1175 011a 6D49     		ldr	r1, .L119+48
 1176 011c 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1177 0120 1046     		mov	r0, r2
 1178 0122 664A     		ldr	r2, .L119+28
 1179 0124 1268     		ldr	r2, [r2]
 1180 0126 6849     		ldr	r1, .L119+40
 1181 0128 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1182 012c 6949     		ldr	r1, .L119+52
 1183 012e 5B01     		lsls	r3, r3, #5
 1184 0130 0344     		add	r3, r3, r0
 1185 0132 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 528:main.c        ****                     pitchBendHistoryPointer[whichLinearSensor] =  (pitchBendHistoryPointer[whichLin
 1186              		.loc 1 528 0
 1187 0136 614B     		ldr	r3, .L119+28
 1188 0138 1B68     		ldr	r3, [r3]
 1189 013a 604A     		ldr	r2, .L119+28
 1190 013c 1268     		ldr	r2, [r2]
 1191 013e 6449     		ldr	r1, .L119+48
 1192 0140 31F81220 		ldrh	r2, [r1, r2, lsl #1]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 32


 1193 0144 0132     		adds	r2, r2, #1
 1194 0146 92B2     		uxth	r2, r2
 1195 0148 02F01F02 		and	r2, r2, #31
 1196 014c 91B2     		uxth	r1, r2
 1197 014e 604A     		ldr	r2, .L119+48
 1198 0150 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 529:main.c        ****                     if (frettedState)
 1199              		.loc 1 529 0
 1200 0154 604B     		ldr	r3, .L119+56
 1201 0156 1B68     		ldr	r3, [r3]
 1202 0158 002B     		cmp	r3, #0
 1203 015a 52D0     		beq	.L57
 530:main.c        ****                     { 
 531:main.c        ****                         if ((stringMIDI[whichLinearSensor] > (stringMIDIPrev[whichLinearSensor] + l
 1204              		.loc 1 531 0
 1205 015c 574B     		ldr	r3, .L119+28
 1206 015e 1B68     		ldr	r3, [r3]
 1207 0160 594A     		ldr	r2, .L119+40
 1208 0162 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
 1209 0166 554B     		ldr	r3, .L119+28
 1210 0168 1B68     		ldr	r3, [r3]
 1211 016a 5C4A     		ldr	r2, .L119+60
 1212 016c 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1213 0170 5B4B     		ldr	r3, .L119+64
 1214 0172 1B68     		ldr	r3, [r3]	@ float
 1215 0174 1946     		mov	r1, r3
 1216 0176 1046     		mov	r0, r2
 1217 0178 FFF7FEFF 		bl	__aeabi_fadd
 1218 017c 0346     		mov	r3, r0
 1219 017e 1946     		mov	r1, r3
 1220 0180 2046     		mov	r0, r4
 1221 0182 FFF7FEFF 		bl	__aeabi_fcmpgt
 1222 0186 0346     		mov	r3, r0
 1223 0188 002B     		cmp	r3, #0
 1224 018a 17D1     		bne	.L58
 1225              		.loc 1 531 0 is_stmt 0 discriminator 1
 1226 018c 4B4B     		ldr	r3, .L119+28
 1227 018e 1B68     		ldr	r3, [r3]
 1228 0190 4D4A     		ldr	r2, .L119+40
 1229 0192 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
 1230 0196 494B     		ldr	r3, .L119+28
 1231 0198 1B68     		ldr	r3, [r3]
 1232 019a 504A     		ldr	r2, .L119+60
 1233 019c 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1234 01a0 4F4B     		ldr	r3, .L119+64
 1235 01a2 1B68     		ldr	r3, [r3]	@ float
 1236 01a4 1946     		mov	r1, r3
 1237 01a6 1046     		mov	r0, r2
 1238 01a8 FFF7FEFF 		bl	__aeabi_fsub
 1239 01ac 0346     		mov	r3, r0
 1240 01ae 1946     		mov	r1, r3
 1241 01b0 2046     		mov	r0, r4
 1242 01b2 FFF7FEFF 		bl	__aeabi_fcmplt
 1243 01b6 0346     		mov	r3, r0
 1244 01b8 002B     		cmp	r3, #0
 1245 01ba 18D0     		beq	.L115
 1246              	.L58:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 33


 532:main.c        ****                         {
 533:main.c        ****                             stringMIDI[whichLinearSensor] = roundf(stringMIDI[whichLinearSensor]);
 1247              		.loc 1 533 0 is_stmt 1
 1248 01bc 3F4B     		ldr	r3, .L119+28
 1249 01be 1C68     		ldr	r4, [r3]
 1250 01c0 3E4B     		ldr	r3, .L119+28
 1251 01c2 1B68     		ldr	r3, [r3]
 1252 01c4 404A     		ldr	r2, .L119+40
 1253 01c6 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1254 01ca 1846     		mov	r0, r3
 1255 01cc FFF7FEFF 		bl	roundf
 1256 01d0 0246     		mov	r2, r0
 1257 01d2 3D4B     		ldr	r3, .L119+40
 1258 01d4 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 534:main.c        ****                             stringMIDIPrev[whichLinearSensor] = stringMIDI[whichLinearSensor];
 1259              		.loc 1 534 0
 1260 01d8 384B     		ldr	r3, .L119+28
 1261 01da 1B68     		ldr	r3, [r3]
 1262 01dc 374A     		ldr	r2, .L119+28
 1263 01de 1268     		ldr	r2, [r2]
 1264 01e0 3949     		ldr	r1, .L119+40
 1265 01e2 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1266 01e6 3D49     		ldr	r1, .L119+60
 1267 01e8 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1268 01ec 09E0     		b	.L57
 1269              	.L115:
 535:main.c        ****                         }
 536:main.c        ****                         else
 537:main.c        ****                         {
 538:main.c        ****                            stringMIDI[whichLinearSensor] =  stringMIDIPrev[whichLinearSensor];
 1270              		.loc 1 538 0
 1271 01ee 334B     		ldr	r3, .L119+28
 1272 01f0 1B68     		ldr	r3, [r3]
 1273 01f2 324A     		ldr	r2, .L119+28
 1274 01f4 1268     		ldr	r2, [r2]
 1275 01f6 3949     		ldr	r1, .L119+60
 1276 01f8 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1277 01fc 3249     		ldr	r1, .L119+40
 1278 01fe 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1279              	.L57:
 539:main.c        ****                         }
 540:main.c        ****                     }
 541:main.c        ****                     pitchBendVal  = ((stringMIDI[whichLinearSensor] - openStringMIDI[whichLinearSen
 1280              		.loc 1 541 0
 1281 0202 2E4B     		ldr	r3, .L119+28
 1282 0204 1B68     		ldr	r3, [r3]
 1283 0206 304A     		ldr	r2, .L119+40
 1284 0208 52F82300 		ldr	r0, [r2, r3, lsl #2]	@ float
 1285 020c 2B4B     		ldr	r3, .L119+28
 1286 020e 1B68     		ldr	r3, [r3]
 1287 0210 2C4A     		ldr	r2, .L119+36
 1288 0212 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1289 0216 1946     		mov	r1, r3
 1290 0218 FFF7FEFF 		bl	__aeabi_fsub
 1291 021c 0346     		mov	r3, r0
 1292 021e 3149     		ldr	r1, .L119+68
 1293 0220 1846     		mov	r0, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 34


 1294 0222 FFF7FEFF 		bl	__aeabi_fmul
 1295 0226 0346     		mov	r3, r0
 1296 0228 4FF08C41 		mov	r1, #1174405120
 1297 022c 1846     		mov	r0, r3
 1298 022e FFF7FEFF 		bl	__aeabi_fadd
 1299 0232 0346     		mov	r3, r0
 1300 0234 7B60     		str	r3, [r7, #4]	@ float
 542:main.c        ****                     openStringCount[whichLinearSensor] = 0;
 1301              		.loc 1 542 0
 1302 0236 214B     		ldr	r3, .L119+28
 1303 0238 1B68     		ldr	r3, [r3]
 1304 023a 2B4A     		ldr	r2, .L119+72
 1305 023c 0021     		movs	r1, #0
 1306 023e 42F82310 		str	r1, [r2, r3, lsl #2]
 543:main.c        ****                     pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 1307              		.loc 1 543 0
 1308 0242 1E4B     		ldr	r3, .L119+28
 1309 0244 1B68     		ldr	r3, [r3]
 1310 0246 2949     		ldr	r1, .L119+76
 1311 0248 7A68     		ldr	r2, [r7, #4]	@ float
 1312 024a 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1313 024e BDE1     		b	.L54
 1314              	.L56:
 544:main.c        ****                 }
 545:main.c        ****                 else
 546:main.c        ****                 {
 547:main.c        ****                     pitchBendHistory[whichLinearSensor][pitchBendHistoryPointer[whichLinearSensor]]
 1315              		.loc 1 547 0
 1316 0250 1A4B     		ldr	r3, .L119+28
 1317 0252 1B68     		ldr	r3, [r3]
 1318 0254 194A     		ldr	r2, .L119+28
 1319 0256 1268     		ldr	r2, [r2]
 1320 0258 1D49     		ldr	r1, .L119+48
 1321 025a 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1322 025e 1046     		mov	r0, r2
 1323 0260 164A     		ldr	r2, .L119+28
 1324 0262 1268     		ldr	r2, [r2]
 1325 0264 1749     		ldr	r1, .L119+36
 1326 0266 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1327 026a 1A49     		ldr	r1, .L119+52
 1328 026c 5B01     		lsls	r3, r3, #5
 1329 026e 0344     		add	r3, r3, r0
 1330 0270 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 548:main.c        ****                     pitchBendHistoryPointer[whichLinearSensor] =  (pitchBendHistoryPointer[whichLin
 1331              		.loc 1 548 0
 1332 0274 114B     		ldr	r3, .L119+28
 1333 0276 1B68     		ldr	r3, [r3]
 1334 0278 104A     		ldr	r2, .L119+28
 1335 027a 1268     		ldr	r2, [r2]
 1336 027c 1449     		ldr	r1, .L119+48
 1337 027e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1338 0282 0132     		adds	r2, r2, #1
 1339 0284 92B2     		uxth	r2, r2
 1340 0286 02F01F02 		and	r2, r2, #31
 1341 028a 91B2     		uxth	r1, r2
 1342 028c 104A     		ldr	r2, .L119+48
 1343 028e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 35


 549:main.c        ****                     pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 1344              		.loc 1 549 0
 1345 0292 0A4B     		ldr	r3, .L119+28
 1346 0294 1B68     		ldr	r3, [r3]
 1347 0296 1549     		ldr	r1, .L119+76
 1348 0298 7A68     		ldr	r2, [r7, #4]	@ float
 1349 029a 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1350 029e 95E1     		b	.L54
 1351              	.L120:
 1352              		.align	2
 1353              	.L119:
 1354 02a0 00000000 		.word	Em_EEPROM_em_EepromStorage
 1355 02a4 00000000 		.word	eepromReturnValue
 1356 02a8 00000000 		.word	Vbus_function
 1357 02ac 00000000 		.word	hp_R
 1358 02b0 40EA6F3F 		.word	1064299072
 1359 02b4 00000000 		.word	currentOutPointer
 1360 02b8 00000000 		.word	scanPart
 1361 02bc 00000000 		.word	whichLinearSensor
 1362 02c0 00000000 		.word	linearPotValue32Bit
 1363 02c4 00000000 		.word	openStringMIDI
 1364 02c8 00000000 		.word	stringMIDI
 1365 02cc 00000000 		.word	pitchFreeze
 1366 02d0 00000000 		.word	pitchBendHistoryPointer
 1367 02d4 00000000 		.word	pitchBendHistory
 1368 02d8 00000000 		.word	frettedState
 1369 02dc 00000000 		.word	stringMIDIPrev
 1370 02e0 00000000 		.word	linearHysteresis
 1371 02e4 0080AA43 		.word	1135247360
 1372 02e8 00000000 		.word	openStringCount
 1373 02ec 00000000 		.word	pitchBendsPerString
 1374              	.L55:
 550:main.c        ****                 }  
 551:main.c        ****             }
 552:main.c        ****             else
 553:main.c        ****             {
 554:main.c        ****                 
 555:main.c        **** 
 556:main.c        ****                 
 557:main.c        ****                 if (pitchFreeze[whichLinearSensor])
 1375              		.loc 1 557 0
 1376 02f0 8E4B     		ldr	r3, .L121
 1377 02f2 1B68     		ldr	r3, [r3]
 1378 02f4 8E4A     		ldr	r2, .L121+4
 1379 02f6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1380 02f8 002B     		cmp	r3, #0
 1381 02fa 14D0     		beq	.L62
 558:main.c        ****                 {
 559:main.c        ****                    stringMIDI[whichLinearSensor] = pitchBendHistory[whichLinearSensor][((pitchBendH
 1382              		.loc 1 559 0
 1383 02fc 8B4B     		ldr	r3, .L121
 1384 02fe 1B68     		ldr	r3, [r3]
 1385 0300 8A4A     		ldr	r2, .L121
 1386 0302 1168     		ldr	r1, [r2]
 1387 0304 894A     		ldr	r2, .L121
 1388 0306 1268     		ldr	r2, [r2]
 1389 0308 8A48     		ldr	r0, .L121+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 36


 1390 030a 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 1391 030e 0132     		adds	r2, r2, #1
 1392 0310 02F01F02 		and	r2, r2, #31
 1393 0314 8848     		ldr	r0, .L121+12
 1394 0316 4901     		lsls	r1, r1, #5
 1395 0318 0A44     		add	r2, r2, r1
 1396 031a 50F82220 		ldr	r2, [r0, r2, lsl #2]	@ float
 1397 031e 8749     		ldr	r1, .L121+16
 1398 0320 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1399 0324 B5E0     		b	.L63
 1400              	.L62:
 560:main.c        ****                 }
 561:main.c        ****                 else
 562:main.c        ****                 {
 563:main.c        ****                     linearFIR[whichLinearSensor][linFirPointer[whichLinearSensor]] = linearPotValue
 1401              		.loc 1 563 0
 1402 0326 814B     		ldr	r3, .L121
 1403 0328 1B68     		ldr	r3, [r3]
 1404 032a 804A     		ldr	r2, .L121
 1405 032c 1268     		ldr	r2, [r2]
 1406 032e 8449     		ldr	r1, .L121+20
 1407 0330 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 1408 0332 1046     		mov	r0, r2
 1409 0334 7D4A     		ldr	r2, .L121
 1410 0336 1268     		ldr	r2, [r2]
 1411 0338 8249     		ldr	r1, .L121+24
 1412 033a 51F82220 		ldr	r2, [r1, r2, lsl #2]
 1413 033e 1146     		mov	r1, r2
 1414 0340 814A     		ldr	r2, .L121+28
 1415 0342 5B00     		lsls	r3, r3, #1
 1416 0344 0344     		add	r3, r3, r0
 1417 0346 42F82310 		str	r1, [r2, r3, lsl #2]
 564:main.c        ****                     linearSmoothed[whichLinearSensor] = 0;
 1418              		.loc 1 564 0
 1419 034a 784B     		ldr	r3, .L121
 1420 034c 1B68     		ldr	r3, [r3]
 1421 034e 7F4A     		ldr	r2, .L121+32
 1422 0350 0021     		movs	r1, #0
 1423 0352 42F82310 		str	r1, [r2, r3, lsl #2]
 1424              	.LBB3:
 565:main.c        ****                     for (int j = 0; j < LINEAR_FIR_SIZE; j++)
 1425              		.loc 1 565 0
 1426 0356 0023     		movs	r3, #0
 1427 0358 FB61     		str	r3, [r7, #28]
 1428 035a 13E0     		b	.L64
 1429              	.L65:
 566:main.c        ****                     {
 567:main.c        ****                         linearSmoothed[whichLinearSensor] += linearFIR[whichLinearSensor][j];
 1430              		.loc 1 567 0 discriminator 3
 1431 035c 734B     		ldr	r3, .L121
 1432 035e 1B68     		ldr	r3, [r3]
 1433 0360 7949     		ldr	r1, .L121+28
 1434 0362 5A00     		lsls	r2, r3, #1
 1435 0364 FB69     		ldr	r3, [r7, #28]
 1436 0366 1344     		add	r3, r3, r2
 1437 0368 51F82320 		ldr	r2, [r1, r3, lsl #2]
 1438 036c 6F4B     		ldr	r3, .L121
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 37


 1439 036e 1B68     		ldr	r3, [r3]
 1440 0370 7649     		ldr	r1, .L121+32
 1441 0372 51F82310 		ldr	r1, [r1, r3, lsl #2]
 1442 0376 0A44     		add	r2, r2, r1
 1443 0378 7449     		ldr	r1, .L121+32
 1444 037a 41F82320 		str	r2, [r1, r3, lsl #2]
 565:main.c        ****                     for (int j = 0; j < LINEAR_FIR_SIZE; j++)
 1445              		.loc 1 565 0 discriminator 3
 1446 037e FB69     		ldr	r3, [r7, #28]
 1447 0380 0133     		adds	r3, r3, #1
 1448 0382 FB61     		str	r3, [r7, #28]
 1449              	.L64:
 565:main.c        ****                     for (int j = 0; j < LINEAR_FIR_SIZE; j++)
 1450              		.loc 1 565 0 is_stmt 0 discriminator 1
 1451 0384 FB69     		ldr	r3, [r7, #28]
 1452 0386 012B     		cmp	r3, #1
 1453 0388 E8DD     		ble	.L65
 1454              	.LBE3:
 568:main.c        ****                     }             
 569:main.c        ****                     linFirPointer[whichLinearSensor] = (linFirPointer[whichLinearSensor] + 1) & LIN
 1455              		.loc 1 569 0 is_stmt 1
 1456 038a 684B     		ldr	r3, .L121
 1457 038c 1B68     		ldr	r3, [r3]
 1458 038e 674A     		ldr	r2, .L121
 1459 0390 1268     		ldr	r2, [r2]
 1460 0392 6B49     		ldr	r1, .L121+20
 1461 0394 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 1462 0396 0132     		adds	r2, r2, #1
 1463 0398 D2B2     		uxtb	r2, r2
 1464 039a 02F00102 		and	r2, r2, #1
 1465 039e D1B2     		uxtb	r1, r2
 1466 03a0 674A     		ldr	r2, .L121+20
 1467 03a2 D154     		strb	r1, [r2, r3]
 570:main.c        ****                     linearSmoothed[whichLinearSensor] = linearSmoothed[whichLinearSensor] >> LINEAR
 1468              		.loc 1 570 0
 1469 03a4 614B     		ldr	r3, .L121
 1470 03a6 1B68     		ldr	r3, [r3]
 1471 03a8 604A     		ldr	r2, .L121
 1472 03aa 1268     		ldr	r2, [r2]
 1473 03ac 6749     		ldr	r1, .L121+32
 1474 03ae 51F82220 		ldr	r2, [r1, r2, lsl #2]
 1475 03b2 5208     		lsrs	r2, r2, #1
 1476 03b4 6549     		ldr	r1, .L121+32
 1477 03b6 41F82320 		str	r2, [r1, r3, lsl #2]
 571:main.c        ****                     invStringMappedPositions[whichLinearSensor] = (1.0f /  map((float)linearSmoothe
 1478              		.loc 1 571 0
 1479 03ba 5C4B     		ldr	r3, .L121
 1480 03bc 1C68     		ldr	r4, [r3]
 1481 03be 5B4B     		ldr	r3, .L121
 1482 03c0 1B68     		ldr	r3, [r3]
 1483 03c2 624A     		ldr	r2, .L121+32
 1484 03c4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1485 03c8 1846     		mov	r0, r3
 1486 03ca FFF7FEFF 		bl	__aeabi_ui2f
 1487 03ce 0546     		mov	r5, r0
 1488 03d0 564B     		ldr	r3, .L121
 1489 03d2 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 38


 1490 03d4 5E4A     		ldr	r2, .L121+36
 1491 03d6 52F83330 		ldr	r3, [r2, r3, lsl #3]
 1492 03da 1846     		mov	r0, r3
 1493 03dc FFF7FEFF 		bl	__aeabi_ui2f
 1494 03e0 0646     		mov	r6, r0
 1495 03e2 524B     		ldr	r3, .L121
 1496 03e4 1B68     		ldr	r3, [r3]
 1497 03e6 5A4A     		ldr	r2, .L121+36
 1498 03e8 DB00     		lsls	r3, r3, #3
 1499 03ea 1344     		add	r3, r3, r2
 1500 03ec 5B68     		ldr	r3, [r3, #4]
 1501 03ee 1846     		mov	r0, r3
 1502 03f0 FFF7FEFF 		bl	__aeabi_ui2f
 1503 03f4 0146     		mov	r1, r0
 1504 03f6 574B     		ldr	r3, .L121+40
 1505 03f8 1A68     		ldr	r2, [r3]	@ float
 1506 03fa 564B     		ldr	r3, .L121+40
 1507 03fc 5B68     		ldr	r3, [r3, #4]	@ float
 1508 03fe 0093     		str	r3, [sp]	@ float
 1509 0400 1346     		mov	r3, r2
 1510 0402 0A46     		mov	r2, r1
 1511 0404 3146     		mov	r1, r6
 1512 0406 2846     		mov	r0, r5
 1513 0408 FFF7FEFF 		bl	map
 1514 040c 0346     		mov	r3, r0
 1515 040e 1946     		mov	r1, r3
 1516 0410 4FF07E50 		mov	r0, #1065353216
 1517 0414 FFF7FEFF 		bl	__aeabi_fdiv
 1518 0418 0346     		mov	r3, r0
 1519 041a 1A46     		mov	r2, r3
 1520 041c 4E4B     		ldr	r3, .L121+44
 1521 041e 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 572:main.c        ****                     stringMIDI[whichLinearSensor] = ftom(invStringMappedPositions[whichLinearSensor
 1522              		.loc 1 572 0
 1523 0422 424B     		ldr	r3, .L121
 1524 0424 1C68     		ldr	r4, [r3]
 1525 0426 414B     		ldr	r3, .L121
 1526 0428 1B68     		ldr	r3, [r3]
 1527 042a 4B4A     		ldr	r2, .L121+44
 1528 042c 52F82300 		ldr	r0, [r2, r3, lsl #2]	@ float
 1529 0430 3E4B     		ldr	r3, .L121
 1530 0432 1B68     		ldr	r3, [r3]
 1531 0434 494A     		ldr	r2, .L121+48
 1532 0436 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1533 043a 1946     		mov	r1, r3
 1534 043c FFF7FEFF 		bl	__aeabi_fmul
 1535 0440 0346     		mov	r3, r0
 1536 0442 1846     		mov	r0, r3
 1537 0444 FFF7FEFF 		bl	ftom
 1538 0448 0246     		mov	r2, r0
 1539 044a 3C4B     		ldr	r3, .L121+16
 1540 044c 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 573:main.c        ****                     pitchBendHistory[whichLinearSensor][pitchBendHistoryPointer[whichLinearSensor]]
 1541              		.loc 1 573 0
 1542 0450 364B     		ldr	r3, .L121
 1543 0452 1B68     		ldr	r3, [r3]
 1544 0454 354A     		ldr	r2, .L121
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 39


 1545 0456 1268     		ldr	r2, [r2]
 1546 0458 3649     		ldr	r1, .L121+8
 1547 045a 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1548 045e 1046     		mov	r0, r2
 1549 0460 324A     		ldr	r2, .L121
 1550 0462 1268     		ldr	r2, [r2]
 1551 0464 3549     		ldr	r1, .L121+16
 1552 0466 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1553 046a 3349     		ldr	r1, .L121+12
 1554 046c 5B01     		lsls	r3, r3, #5
 1555 046e 0344     		add	r3, r3, r0
 1556 0470 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 574:main.c        ****                     pitchBendHistoryPointer[whichLinearSensor] =  (pitchBendHistoryPointer[whichLin
 1557              		.loc 1 574 0
 1558 0474 2D4B     		ldr	r3, .L121
 1559 0476 1B68     		ldr	r3, [r3]
 1560 0478 2C4A     		ldr	r2, .L121
 1561 047a 1268     		ldr	r2, [r2]
 1562 047c 2D49     		ldr	r1, .L121+8
 1563 047e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1564 0482 0132     		adds	r2, r2, #1
 1565 0484 92B2     		uxth	r2, r2
 1566 0486 02F01F02 		and	r2, r2, #31
 1567 048a 91B2     		uxth	r1, r2
 1568 048c 294A     		ldr	r2, .L121+8
 1569 048e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 1570              	.L63:
 575:main.c        ****                 }
 576:main.c        **** 
 577:main.c        ****                 if (frettedState)
 1571              		.loc 1 577 0
 1572 0492 334B     		ldr	r3, .L121+52
 1573 0494 1B68     		ldr	r3, [r3]
 1574 0496 002B     		cmp	r3, #0
 1575 0498 72D0     		beq	.L66
 578:main.c        ****                 { 
 579:main.c        ****                     if ((stringMIDI[whichLinearSensor] > (stringMIDIPrev[whichLinearSensor] + linea
 1576              		.loc 1 579 0
 1577 049a 244B     		ldr	r3, .L121
 1578 049c 1B68     		ldr	r3, [r3]
 1579 049e 274A     		ldr	r2, .L121+16
 1580 04a0 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
 1581 04a4 214B     		ldr	r3, .L121
 1582 04a6 1B68     		ldr	r3, [r3]
 1583 04a8 2E4A     		ldr	r2, .L121+56
 1584 04aa 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1585 04ae 2E4B     		ldr	r3, .L121+60
 1586 04b0 1B68     		ldr	r3, [r3]	@ float
 1587 04b2 1946     		mov	r1, r3
 1588 04b4 1046     		mov	r0, r2
 1589 04b6 FFF7FEFF 		bl	__aeabi_fadd
 1590 04ba 0346     		mov	r3, r0
 1591 04bc 1946     		mov	r1, r3
 1592 04be 2046     		mov	r0, r4
 1593 04c0 FFF7FEFF 		bl	__aeabi_fcmpgt
 1594 04c4 0346     		mov	r3, r0
 1595 04c6 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 40


 1596 04c8 17D1     		bne	.L67
 1597              		.loc 1 579 0 is_stmt 0 discriminator 1
 1598 04ca 184B     		ldr	r3, .L121
 1599 04cc 1B68     		ldr	r3, [r3]
 1600 04ce 1B4A     		ldr	r2, .L121+16
 1601 04d0 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
 1602 04d4 154B     		ldr	r3, .L121
 1603 04d6 1B68     		ldr	r3, [r3]
 1604 04d8 224A     		ldr	r2, .L121+56
 1605 04da 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1606 04de 224B     		ldr	r3, .L121+60
 1607 04e0 1B68     		ldr	r3, [r3]	@ float
 1608 04e2 1946     		mov	r1, r3
 1609 04e4 1046     		mov	r0, r2
 1610 04e6 FFF7FEFF 		bl	__aeabi_fsub
 1611 04ea 0346     		mov	r3, r0
 1612 04ec 1946     		mov	r1, r3
 1613 04ee 2046     		mov	r0, r4
 1614 04f0 FFF7FEFF 		bl	__aeabi_fcmplt
 1615 04f4 0346     		mov	r3, r0
 1616 04f6 002B     		cmp	r3, #0
 1617 04f8 38D0     		beq	.L116
 1618              	.L67:
 580:main.c        ****                     {
 581:main.c        ****                         stringMIDI[whichLinearSensor] = roundf(stringMIDI[whichLinearSensor]);
 1619              		.loc 1 581 0 is_stmt 1
 1620 04fa 0C4B     		ldr	r3, .L121
 1621 04fc 1C68     		ldr	r4, [r3]
 1622 04fe 0B4B     		ldr	r3, .L121
 1623 0500 1B68     		ldr	r3, [r3]
 1624 0502 0E4A     		ldr	r2, .L121+16
 1625 0504 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1626 0508 1846     		mov	r0, r3
 1627 050a FFF7FEFF 		bl	roundf
 1628 050e 0246     		mov	r2, r0
 1629 0510 0A4B     		ldr	r3, .L121+16
 1630 0512 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 582:main.c        ****                         stringMIDIPrev[whichLinearSensor] = stringMIDI[whichLinearSensor];
 1631              		.loc 1 582 0
 1632 0516 054B     		ldr	r3, .L121
 1633 0518 1B68     		ldr	r3, [r3]
 1634 051a 044A     		ldr	r2, .L121
 1635 051c 1268     		ldr	r2, [r2]
 1636 051e 0749     		ldr	r1, .L121+16
 1637 0520 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1638 0524 0F49     		ldr	r1, .L121+56
 1639 0526 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1640 052a 29E0     		b	.L66
 1641              	.L122:
 1642              		.align	2
 1643              	.L121:
 1644 052c 00000000 		.word	whichLinearSensor
 1645 0530 00000000 		.word	pitchFreeze
 1646 0534 00000000 		.word	pitchBendHistoryPointer
 1647 0538 00000000 		.word	pitchBendHistory
 1648 053c 00000000 		.word	stringMIDI
 1649 0540 00000000 		.word	linFirPointer
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 41


 1650 0544 00000000 		.word	linearPotValue32Bit
 1651 0548 00000000 		.word	linearFIR
 1652 054c 00000000 		.word	linearSmoothed
 1653 0550 00000000 		.word	fretMeasurements
 1654 0554 00000000 		.word	fretRatios
 1655 0558 00000000 		.word	invStringMappedPositions
 1656 055c 00000000 		.word	openStringFreqs
 1657 0560 00000000 		.word	frettedState
 1658 0564 00000000 		.word	stringMIDIPrev
 1659 0568 00000000 		.word	linearHysteresis
 1660              	.L116:
 583:main.c        ****                     }
 584:main.c        ****                     else
 585:main.c        ****                     {
 586:main.c        ****                        stringMIDI[whichLinearSensor] =  stringMIDIPrev[whichLinearSensor];
 1661              		.loc 1 586 0
 1662 056c A74B     		ldr	r3, .L123
 1663 056e 1B68     		ldr	r3, [r3]
 1664 0570 A64A     		ldr	r2, .L123
 1665 0572 1268     		ldr	r2, [r2]
 1666 0574 A649     		ldr	r1, .L123+4
 1667 0576 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1668 057a A649     		ldr	r1, .L123+8
 1669 057c 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1670              	.L66:
 587:main.c        ****                     }
 588:main.c        ****                 }
 589:main.c        ****                 pitchBendVal  = ((stringMIDI[whichLinearSensor] - openStringMIDI[whichLinearSensor]
 1671              		.loc 1 589 0
 1672 0580 A24B     		ldr	r3, .L123
 1673 0582 1B68     		ldr	r3, [r3]
 1674 0584 A34A     		ldr	r2, .L123+8
 1675 0586 52F82300 		ldr	r0, [r2, r3, lsl #2]	@ float
 1676 058a A04B     		ldr	r3, .L123
 1677 058c 1B68     		ldr	r3, [r3]
 1678 058e A24A     		ldr	r2, .L123+12
 1679 0590 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1680 0594 1946     		mov	r1, r3
 1681 0596 FFF7FEFF 		bl	__aeabi_fsub
 1682 059a 0346     		mov	r3, r0
 1683 059c 9F49     		ldr	r1, .L123+16
 1684 059e 1846     		mov	r0, r3
 1685 05a0 FFF7FEFF 		bl	__aeabi_fmul
 1686 05a4 0346     		mov	r3, r0
 1687 05a6 4FF08C41 		mov	r1, #1174405120
 1688 05aa 1846     		mov	r0, r3
 1689 05ac FFF7FEFF 		bl	__aeabi_fadd
 1690 05b0 0346     		mov	r3, r0
 1691 05b2 7B60     		str	r3, [r7, #4]	@ float
 590:main.c        ****                 openStringCount[whichLinearSensor] = 0;
 1692              		.loc 1 590 0
 1693 05b4 954B     		ldr	r3, .L123
 1694 05b6 1B68     		ldr	r3, [r3]
 1695 05b8 994A     		ldr	r2, .L123+20
 1696 05ba 0021     		movs	r1, #0
 1697 05bc 42F82310 		str	r1, [r2, r3, lsl #2]
 591:main.c        ****                 pitchBendsPerString[whichLinearSensor] = pitchBendVal;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 42


 1698              		.loc 1 591 0
 1699 05c0 924B     		ldr	r3, .L123
 1700 05c2 1B68     		ldr	r3, [r3]
 1701 05c4 9749     		ldr	r1, .L123+24
 1702 05c6 7A68     		ldr	r2, [r7, #4]	@ float
 1703 05c8 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1704              	.L54:
 1705              	.LBE2:
 592:main.c        ****             }
 593:main.c        ****            
 594:main.c        ****         }
 595:main.c        ****        
 596:main.c        ****         if (!polyMode)
 1706              		.loc 1 596 0
 1707 05cc 964B     		ldr	r3, .L123+28
 1708 05ce 1B68     		ldr	r3, [r3]
 1709 05d0 002B     		cmp	r3, #0
 1710 05d2 2BD1     		bne	.L70
 597:main.c        ****         {     
 598:main.c        ****             if (stringStates[whichLinearSensor][0] >= 0)
 1711              		.loc 1 598 0
 1712 05d4 8D4B     		ldr	r3, .L123
 1713 05d6 1B68     		ldr	r3, [r3]
 1714 05d8 944A     		ldr	r2, .L123+32
 1715 05da 52F83330 		ldr	r3, [r2, r3, lsl #3]
 1716 05de 002B     		cmp	r3, #0
 1717 05e0 24DB     		blt	.L70
 599:main.c        ****             {
 600:main.c        ****                 //if (pitchFreeze[whichLinearSensor])
 601:main.c        ****                // {
 602:main.c        ****                     //pitchBendsPerString[whichLinearSensor] =  pitchBendHistory[whichLinearSensor]
 603:main.c        ****                // }
 604:main.c        ****                 
 605:main.c        ****                 if (((int)pitchBendsPerString[whichLinearSensor]) != previousPitchBendsSent)
 1718              		.loc 1 605 0
 1719 05e2 8A4B     		ldr	r3, .L123
 1720 05e4 1B68     		ldr	r3, [r3]
 1721 05e6 8F4A     		ldr	r2, .L123+24
 1722 05e8 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1723 05ec 1846     		mov	r0, r3
 1724 05ee FFF7FEFF 		bl	__aeabi_f2iz
 1725 05f2 0246     		mov	r2, r0
 1726 05f4 8E4B     		ldr	r3, .L123+36
 1727 05f6 1B68     		ldr	r3, [r3]
 1728 05f8 9A42     		cmp	r2, r3
 1729 05fa 17D0     		beq	.L70
 606:main.c        ****                 {
 607:main.c        **** 
 608:main.c        ****                     sendMIDIPitchBend((uint)pitchBendsPerString[whichLinearSensor], 0);
 1730              		.loc 1 608 0
 1731 05fc 834B     		ldr	r3, .L123
 1732 05fe 1B68     		ldr	r3, [r3]
 1733 0600 884A     		ldr	r2, .L123+24
 1734 0602 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1735 0606 1846     		mov	r0, r3
 1736 0608 FFF7FEFF 		bl	__aeabi_f2uiz
 1737 060c 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 43


 1738 060e 0021     		movs	r1, #0
 1739 0610 1846     		mov	r0, r3
 1740 0612 FFF7FEFF 		bl	sendMIDIPitchBend
 609:main.c        ****                     previousPitchBendsSent = (int)pitchBendsPerString[whichLinearSensor];
 1741              		.loc 1 609 0
 1742 0616 7D4B     		ldr	r3, .L123
 1743 0618 1B68     		ldr	r3, [r3]
 1744 061a 824A     		ldr	r2, .L123+24
 1745 061c 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1746 0620 1846     		mov	r0, r3
 1747 0622 FFF7FEFF 		bl	__aeabi_f2iz
 1748 0626 0246     		mov	r2, r0
 1749 0628 814B     		ldr	r3, .L123+36
 1750 062a 1A60     		str	r2, [r3]
 1751              	.L70:
 610:main.c        ****                 }
 611:main.c        ****             }
 612:main.c        ****         }
 613:main.c        ****         
 614:main.c        ****         //read knobs, joystick, and cv pedal
 615:main.c        ****         if (ADC_SAR_Seq_1_IsEndConversion(ADC_SAR_Seq_1_RETURN_STATUS))
 1752              		.loc 1 615 0
 1753 062c 0120     		movs	r0, #1
 1754 062e FFF7FEFF 		bl	ADC_SAR_Seq_1_IsEndConversion
 1755 0632 0346     		mov	r3, r0
 1756 0634 002B     		cmp	r3, #0
 1757 0636 00F0B080 		beq	.L117
 1758              	.LBB4:
 616:main.c        ****         {
 617:main.c        ****             for (int i = 0; i < 5; i++)
 1759              		.loc 1 617 0
 1760 063a 0023     		movs	r3, #0
 1761 063c BB61     		str	r3, [r7, #24]
 1762 063e A1E0     		b	.L72
 1763              	.L79:
 618:main.c        ****             {
 619:main.c        ****                 knobsFIR[i][firPointer] = ADC_SAR_Seq_1_GetResult16(i);
 1764              		.loc 1 619 0
 1765 0640 7C4B     		ldr	r3, .L123+40
 1766 0642 1C68     		ldr	r4, [r3]
 1767 0644 BB69     		ldr	r3, [r7, #24]
 1768 0646 9BB2     		uxth	r3, r3
 1769 0648 1846     		mov	r0, r3
 1770 064a FFF7FEFF 		bl	ADC_SAR_Seq_1_GetResult16
 1771 064e 0346     		mov	r3, r0
 1772 0650 1946     		mov	r1, r3
 1773 0652 794A     		ldr	r2, .L123+44
 1774 0654 BB69     		ldr	r3, [r7, #24]
 1775 0656 DB00     		lsls	r3, r3, #3
 1776 0658 2344     		add	r3, r3, r4
 1777 065a 42F82310 		str	r1, [r2, r3, lsl #2]
 620:main.c        ****                 knobs[i] = 0;
 1778              		.loc 1 620 0
 1779 065e 774A     		ldr	r2, .L123+48
 1780 0660 BB69     		ldr	r3, [r7, #24]
 1781 0662 0021     		movs	r1, #0
 1782 0664 42F82310 		str	r1, [r2, r3, lsl #2]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 44


 1783              	.LBB5:
 621:main.c        ****                 for (int j = 0; j < KNOB_FIR_SIZE; j++)
 1784              		.loc 1 621 0
 1785 0668 0023     		movs	r3, #0
 1786 066a 7B61     		str	r3, [r7, #20]
 1787 066c 12E0     		b	.L73
 1788              	.L74:
 622:main.c        ****                 {
 623:main.c        ****                     knobs[i] += knobsFIR[i][j];
 1789              		.loc 1 623 0 discriminator 3
 1790 066e 734A     		ldr	r2, .L123+48
 1791 0670 BB69     		ldr	r3, [r7, #24]
 1792 0672 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1793 0676 7048     		ldr	r0, .L123+44
 1794 0678 BB69     		ldr	r3, [r7, #24]
 1795 067a D900     		lsls	r1, r3, #3
 1796 067c 7B69     		ldr	r3, [r7, #20]
 1797 067e 0B44     		add	r3, r3, r1
 1798 0680 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1799 0684 1A44     		add	r2, r2, r3
 1800 0686 6D49     		ldr	r1, .L123+48
 1801 0688 BB69     		ldr	r3, [r7, #24]
 1802 068a 41F82320 		str	r2, [r1, r3, lsl #2]
 621:main.c        ****                 for (int j = 0; j < KNOB_FIR_SIZE; j++)
 1803              		.loc 1 621 0 discriminator 3
 1804 068e 7B69     		ldr	r3, [r7, #20]
 1805 0690 0133     		adds	r3, r3, #1
 1806 0692 7B61     		str	r3, [r7, #20]
 1807              	.L73:
 621:main.c        ****                 for (int j = 0; j < KNOB_FIR_SIZE; j++)
 1808              		.loc 1 621 0 is_stmt 0 discriminator 1
 1809 0694 7B69     		ldr	r3, [r7, #20]
 1810 0696 072B     		cmp	r3, #7
 1811 0698 E9DD     		ble	.L74
 1812              	.LBE5:
 624:main.c        ****                 }             
 625:main.c        ****                 knobs[i] = knobs[i] >> KNOB_FIR_SIZE_BITSHIFT;
 1813              		.loc 1 625 0 is_stmt 1
 1814 069a 684A     		ldr	r2, .L123+48
 1815 069c BB69     		ldr	r3, [r7, #24]
 1816 069e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1817 06a2 DA08     		lsrs	r2, r3, #3
 1818 06a4 6549     		ldr	r1, .L123+48
 1819 06a6 BB69     		ldr	r3, [r7, #24]
 1820 06a8 41F82320 		str	r2, [r1, r3, lsl #2]
 626:main.c        ****                 
 627:main.c        ****                 //now squish down to 7 bit with hysteresis
 628:main.c        ****                 
 629:main.c        ****                 if ((knobs[i] > (knobs7bitPrevLS[i] + knobs7bitHysteresis)) || (knobs[i] < (knobs7b
 1821              		.loc 1 629 0
 1822 06ac 634A     		ldr	r2, .L123+48
 1823 06ae BB69     		ldr	r3, [r7, #24]
 1824 06b0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1825 06b4 6249     		ldr	r1, .L123+52
 1826 06b6 BA69     		ldr	r2, [r7, #24]
 1827 06b8 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1828 06bc 1146     		mov	r1, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 45


 1829 06be 614A     		ldr	r2, .L123+56
 1830 06c0 1288     		ldrh	r2, [r2]
 1831 06c2 0A44     		add	r2, r2, r1
 1832 06c4 9342     		cmp	r3, r2
 1833 06c6 0DD8     		bhi	.L75
 1834              		.loc 1 629 0 is_stmt 0 discriminator 1
 1835 06c8 5C4A     		ldr	r2, .L123+48
 1836 06ca BB69     		ldr	r3, [r7, #24]
 1837 06cc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1838 06d0 5B49     		ldr	r1, .L123+52
 1839 06d2 BA69     		ldr	r2, [r7, #24]
 1840 06d4 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1841 06d8 1146     		mov	r1, r2
 1842 06da 5A4A     		ldr	r2, .L123+56
 1843 06dc 1288     		ldrh	r2, [r2]
 1844 06de 8A1A     		subs	r2, r1, r2
 1845 06e0 9342     		cmp	r3, r2
 1846 06e2 0AD2     		bcs	.L76
 1847              	.L75:
 630:main.c        ****                 {
 631:main.c        ****                     knobs7bit[i] = knobs[i] >> 5;
 1848              		.loc 1 631 0 is_stmt 1
 1849 06e4 554A     		ldr	r2, .L123+48
 1850 06e6 BB69     		ldr	r3, [r7, #24]
 1851 06e8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1852 06ec 5B09     		lsrs	r3, r3, #5
 1853 06ee D9B2     		uxtb	r1, r3
 1854 06f0 554A     		ldr	r2, .L123+60
 1855 06f2 BB69     		ldr	r3, [r7, #24]
 1856 06f4 1344     		add	r3, r3, r2
 1857 06f6 0A46     		mov	r2, r1
 1858 06f8 1A70     		strb	r2, [r3]
 1859              	.L76:
 632:main.c        ****                 }
 633:main.c        ****                 if (knobs7bit[i] != knobs7bitPrev[i])
 1860              		.loc 1 633 0
 1861 06fa 534A     		ldr	r2, .L123+60
 1862 06fc BB69     		ldr	r3, [r7, #24]
 1863 06fe 1344     		add	r3, r3, r2
 1864 0700 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1865 0702 9AB2     		uxth	r2, r3
 1866 0704 5149     		ldr	r1, .L123+64
 1867 0706 BB69     		ldr	r3, [r7, #24]
 1868 0708 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 1869 070c 9A42     		cmp	r2, r3
 1870 070e 22D0     		beq	.L77
 634:main.c        ****                 {
 635:main.c        ****                     if (i < 4)
 1871              		.loc 1 635 0
 1872 0710 BB69     		ldr	r3, [r7, #24]
 1873 0712 032B     		cmp	r3, #3
 1874 0714 0CDC     		bgt	.L78
 636:main.c        ****                     {
 637:main.c        ****                         sendMIDIControlChange(17 + i , 127-knobs7bit[i], 0);
 1875              		.loc 1 637 0
 1876 0716 BB69     		ldr	r3, [r7, #24]
 1877 0718 03F11100 		add	r0, r3, #17
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 46


 1878 071c 4A4A     		ldr	r2, .L123+60
 1879 071e BB69     		ldr	r3, [r7, #24]
 1880 0720 1344     		add	r3, r3, r2
 1881 0722 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1882 0724 C3F17F03 		rsb	r3, r3, #127
 1883 0728 0022     		movs	r2, #0
 1884 072a 1946     		mov	r1, r3
 1885 072c FFF7FEFF 		bl	sendMIDIControlChange
 1886              	.L78:
 638:main.c        ****                     }
 639:main.c        ****                     if ((i == 4) && (CV_pedal_sense_Read()))
 1887              		.loc 1 639 0
 1888 0730 BB69     		ldr	r3, [r7, #24]
 1889 0732 042B     		cmp	r3, #4
 1890 0734 0FD1     		bne	.L77
 1891              		.loc 1 639 0 is_stmt 0 discriminator 1
 1892 0736 FFF7FEFF 		bl	CV_pedal_sense_Read
 1893 073a 0346     		mov	r3, r0
 1894 073c 002B     		cmp	r3, #0
 1895 073e 0AD0     		beq	.L77
 640:main.c        ****                     {
 641:main.c        ****                         sendMIDIControlChange(17 + i , knobs7bit[i], 0);
 1896              		.loc 1 641 0 is_stmt 1
 1897 0740 BB69     		ldr	r3, [r7, #24]
 1898 0742 03F11100 		add	r0, r3, #17
 1899 0746 404A     		ldr	r2, .L123+60
 1900 0748 BB69     		ldr	r3, [r7, #24]
 1901 074a 1344     		add	r3, r3, r2
 1902 074c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1903 074e 0022     		movs	r2, #0
 1904 0750 1946     		mov	r1, r3
 1905 0752 FFF7FEFF 		bl	sendMIDIControlChange
 1906              	.L77:
 642:main.c        ****                         //sendMIDIControlChange(19 + i+1 , 0, 0);
 643:main.c        ****                     }
 644:main.c        ****                 }
 645:main.c        ****                 knobs7bitPrev[i] = knobs7bit[i];
 1907              		.loc 1 645 0 discriminator 2
 1908 0756 3C4A     		ldr	r2, .L123+60
 1909 0758 BB69     		ldr	r3, [r7, #24]
 1910 075a 1344     		add	r3, r3, r2
 1911 075c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1912 075e 99B2     		uxth	r1, r3
 1913 0760 3A4A     		ldr	r2, .L123+64
 1914 0762 BB69     		ldr	r3, [r7, #24]
 1915 0764 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 646:main.c        ****                 knobs7bitPrevLS[i] = knobs7bit[i] << 5;
 1916              		.loc 1 646 0 discriminator 2
 1917 0768 374A     		ldr	r2, .L123+60
 1918 076a BB69     		ldr	r3, [r7, #24]
 1919 076c 1344     		add	r3, r3, r2
 1920 076e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1921 0770 9BB2     		uxth	r3, r3
 1922 0772 5B01     		lsls	r3, r3, #5
 1923 0774 99B2     		uxth	r1, r3
 1924 0776 324A     		ldr	r2, .L123+52
 1925 0778 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 47


 1926 077a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 617:main.c        ****             {
 1927              		.loc 1 617 0 discriminator 2
 1928 077e BB69     		ldr	r3, [r7, #24]
 1929 0780 0133     		adds	r3, r3, #1
 1930 0782 BB61     		str	r3, [r7, #24]
 1931              	.L72:
 617:main.c        ****             {
 1932              		.loc 1 617 0 is_stmt 0 discriminator 1
 1933 0784 BB69     		ldr	r3, [r7, #24]
 1934 0786 042B     		cmp	r3, #4
 1935 0788 7FF75AAF 		ble	.L79
 1936              	.LBE4:
 647:main.c        ****             }
 648:main.c        ****             firPointer = (firPointer + 1) & KNOB_FIR_SIZE_MASK;
 1937              		.loc 1 648 0 is_stmt 1
 1938 078c 294B     		ldr	r3, .L123+40
 1939 078e 1B68     		ldr	r3, [r3]
 1940 0790 0133     		adds	r3, r3, #1
 1941 0792 03F00703 		and	r3, r3, #7
 1942 0796 274A     		ldr	r2, .L123+40
 1943 0798 1360     		str	r3, [r2]
 1944              	.L117:
 649:main.c        ****         }
 650:main.c        ****         
 651:main.c        ****         //make sure previous SPI1 transmission has completed before checking the received SPI data
 652:main.c        ****         while (0u == ((SPIM_1_ReadTxStatus() & SPIM_1_STS_SPI_DONE) || (SPIM_1_ReadTxStatus() & SPI
 1945              		.loc 1 652 0
 1946 079a 00BF     		nop
 1947              	.L83:
 1948              		.loc 1 652 0 is_stmt 0 discriminator 7
 1949 079c FFF7FEFF 		bl	SPIM_1_ReadTxStatus
 1950 07a0 0346     		mov	r3, r0
 1951 07a2 03F00103 		and	r3, r3, #1
 1952 07a6 002B     		cmp	r3, #0
 1953 07a8 06D1     		bne	.L80
 1954              		.loc 1 652 0 discriminator 2
 1955 07aa FFF7FEFF 		bl	SPIM_1_ReadTxStatus
 1956 07ae 0346     		mov	r3, r0
 1957 07b0 03F01003 		and	r3, r3, #16
 1958 07b4 002B     		cmp	r3, #0
 1959 07b6 01D0     		beq	.L81
 1960              	.L80:
 1961              		.loc 1 652 0 discriminator 3
 1962 07b8 0123     		movs	r3, #1
 1963 07ba 00E0     		b	.L82
 1964              	.L81:
 1965              		.loc 1 652 0 discriminator 4
 1966 07bc 0023     		movs	r3, #0
 1967              	.L82:
 1968              		.loc 1 652 0 discriminator 6
 1969 07be 002B     		cmp	r3, #0
 1970 07c0 ECD0     		beq	.L83
 1971              	.LBB6:
 653:main.c        ****         {
 654:main.c        ****             ;
 655:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 48


 656:main.c        **** 
 657:main.c        ****         //handle string plucks/noteoffs
 658:main.c        ****         for (int i = 0; i < 4; i++)
 1972              		.loc 1 658 0 is_stmt 1
 1973 07c2 0023     		movs	r3, #0
 1974 07c4 3B61     		str	r3, [r7, #16]
 1975 07c6 DEE0     		b	.L84
 1976              	.L92:
 659:main.c        ****         {
 660:main.c        ****             if (((CapSense_sensorOnMask[0] >> (i + 4)) & 1) &&  (linearPotValue32Bit[i] == 65535))
 1977              		.loc 1 660 0
 1978 07c8 214B     		ldr	r3, .L123+68
 1979 07ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1980 07cc 1A46     		mov	r2, r3
 1981 07ce 3B69     		ldr	r3, [r7, #16]
 1982 07d0 0433     		adds	r3, r3, #4
 1983 07d2 42FA03F3 		asr	r3, r2, r3
 1984 07d6 03F00103 		and	r3, r3, #1
 1985 07da 002B     		cmp	r3, #0
 1986 07dc 40D0     		beq	.L85
 1987              		.loc 1 660 0 is_stmt 0 discriminator 1
 1988 07de 1D4A     		ldr	r2, .L123+72
 1989 07e0 3B69     		ldr	r3, [r7, #16]
 1990 07e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1991 07e6 4FF6FF72 		movw	r2, #65535
 1992 07ea 9342     		cmp	r3, r2
 1993 07ec 38D1     		bne	.L85
 661:main.c        ****             {
 662:main.c        ****                LHMute[i] = 1; 
 1994              		.loc 1 662 0 is_stmt 1
 1995 07ee 1A4A     		ldr	r2, .L123+76
 1996 07f0 3B69     		ldr	r3, [r7, #16]
 1997 07f2 1344     		add	r3, r3, r2
 1998 07f4 0122     		movs	r2, #1
 1999 07f6 1A70     		strb	r2, [r3]
 663:main.c        ****                LHMuteCounter[i]++;
 2000              		.loc 1 663 0
 2001 07f8 184A     		ldr	r2, .L123+80
 2002 07fa 3B69     		ldr	r3, [r7, #16]
 2003 07fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2004 0800 5A1C     		adds	r2, r3, #1
 2005 0802 1649     		ldr	r1, .L123+80
 2006 0804 3B69     		ldr	r3, [r7, #16]
 2007 0806 41F82320 		str	r2, [r1, r3, lsl #2]
 2008 080a 33E0     		b	.L86
 2009              	.L124:
 2010              		.align	2
 2011              	.L123:
 2012 080c 00000000 		.word	whichLinearSensor
 2013 0810 00000000 		.word	stringMIDIPrev
 2014 0814 00000000 		.word	stringMIDI
 2015 0818 00000000 		.word	openStringMIDI
 2016 081c 0080AA43 		.word	1135247360
 2017 0820 00000000 		.word	openStringCount
 2018 0824 00000000 		.word	pitchBendsPerString
 2019 0828 00000000 		.word	polyMode
 2020 082c 00000000 		.word	stringStates
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 49


 2021 0830 00000000 		.word	previousPitchBendsSent
 2022 0834 00000000 		.word	firPointer
 2023 0838 00000000 		.word	knobsFIR
 2024 083c 00000000 		.word	knobs
 2025 0840 00000000 		.word	knobs7bitPrevLS
 2026 0844 00000000 		.word	knobs7bitHysteresis
 2027 0848 00000000 		.word	knobs7bit
 2028 084c 00000000 		.word	knobs7bitPrev
 2029 0850 00000000 		.word	CapSense_sensorOnMask
 2030 0854 00000000 		.word	linearPotValue32Bit
 2031 0858 00000000 		.word	LHMute
 2032 085c 00000000 		.word	LHMuteCounter
 2033              	.L85:
 664:main.c        ****             }
 665:main.c        ****             else
 666:main.c        ****             {
 667:main.c        ****                 LHMute[i] = 0;
 2034              		.loc 1 667 0
 2035 0860 784A     		ldr	r2, .L125
 2036 0862 3B69     		ldr	r3, [r7, #16]
 2037 0864 1344     		add	r3, r3, r2
 2038 0866 0022     		movs	r2, #0
 2039 0868 1A70     		strb	r2, [r3]
 668:main.c        ****                 LHMuteCounter[i] = 0;
 2040              		.loc 1 668 0
 2041 086a 774A     		ldr	r2, .L125+4
 2042 086c 3B69     		ldr	r3, [r7, #16]
 2043 086e 0021     		movs	r1, #0
 2044 0870 42F82310 		str	r1, [r2, r3, lsl #2]
 2045              	.L86:
 669:main.c        ****             }
 670:main.c        ****             //left hand mute just began
 671:main.c        ****             //freeze pitch bend at value from 12 sends ago (to avoid dip before mute due to sensor 
 672:main.c        ****             if ((LHMute[i]) && (stringStates[i][0])>=0)
 2046              		.loc 1 672 0
 2047 0874 734A     		ldr	r2, .L125
 2048 0876 3B69     		ldr	r3, [r7, #16]
 2049 0878 1344     		add	r3, r3, r2
 2050 087a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2051 087c 002B     		cmp	r3, #0
 2052 087e 0BD0     		beq	.L87
 2053              		.loc 1 672 0 is_stmt 0 discriminator 1
 2054 0880 724A     		ldr	r2, .L125+8
 2055 0882 3B69     		ldr	r3, [r7, #16]
 2056 0884 52F83330 		ldr	r3, [r2, r3, lsl #3]
 2057 0888 002B     		cmp	r3, #0
 2058 088a 05DB     		blt	.L87
 673:main.c        ****             {
 674:main.c        ****                 pitchFreeze[i] = 1;
 2059              		.loc 1 674 0 is_stmt 1
 2060 088c 704A     		ldr	r2, .L125+12
 2061 088e 3B69     		ldr	r3, [r7, #16]
 2062 0890 1344     		add	r3, r3, r2
 2063 0892 0122     		movs	r2, #1
 2064 0894 1A70     		strb	r2, [r3]
 2065 0896 04E0     		b	.L88
 2066              	.L87:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 50


 675:main.c        ****             }
 676:main.c        ****             else
 677:main.c        ****             {
 678:main.c        ****                  pitchFreeze[i] = 0;
 2067              		.loc 1 678 0
 2068 0898 6D4A     		ldr	r2, .L125+12
 2069 089a 3B69     		ldr	r3, [r7, #16]
 2070 089c 1344     		add	r3, r3, r2
 2071 089e 0022     		movs	r2, #0
 2072 08a0 1A70     		strb	r2, [r3]
 2073              	.L88:
 679:main.c        ****             }
 680:main.c        ****             //left hand mute has counted to max time
 681:main.c        ****             //send note off
 682:main.c        ****             if ((LHMuteCounter[i] > 128) && (stringStates[i][0] >= 0))
 2074              		.loc 1 682 0
 2075 08a2 694A     		ldr	r2, .L125+4
 2076 08a4 3B69     		ldr	r3, [r7, #16]
 2077 08a6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2078 08aa 802B     		cmp	r3, #128
 2079 08ac 0ED9     		bls	.L89
 2080              		.loc 1 682 0 is_stmt 0 discriminator 1
 2081 08ae 674A     		ldr	r2, .L125+8
 2082 08b0 3B69     		ldr	r3, [r7, #16]
 2083 08b2 52F83330 		ldr	r3, [r2, r3, lsl #3]
 2084 08b6 002B     		cmp	r3, #0
 2085 08b8 08DB     		blt	.L89
 683:main.c        ****             {
 684:main.c        ****                  handleNotes(lastNotes[i], 0, i);
 2086              		.loc 1 684 0 is_stmt 1
 2087 08ba 664A     		ldr	r2, .L125+16
 2088 08bc 3B69     		ldr	r3, [r7, #16]
 2089 08be 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2090 08c2 3A69     		ldr	r2, [r7, #16]
 2091 08c4 0021     		movs	r1, #0
 2092 08c6 1846     		mov	r0, r3
 2093 08c8 FFF7FEFF 		bl	handleNotes
 2094              	.L89:
 685:main.c        ****             }
 686:main.c        ****             
 687:main.c        ****             stringPlucks[i] = (rxBuffer[i*2] << 8) + rxBuffer[i*2+1];
 2095              		.loc 1 687 0
 2096 08cc 3B69     		ldr	r3, [r7, #16]
 2097 08ce 5B00     		lsls	r3, r3, #1
 2098 08d0 614A     		ldr	r2, .L125+20
 2099 08d2 D35C     		ldrb	r3, [r2, r3]
 2100 08d4 DBB2     		uxtb	r3, r3
 2101 08d6 1B02     		lsls	r3, r3, #8
 2102 08d8 3A69     		ldr	r2, [r7, #16]
 2103 08da 5200     		lsls	r2, r2, #1
 2104 08dc 0132     		adds	r2, r2, #1
 2105 08de 5E49     		ldr	r1, .L125+20
 2106 08e0 8A5C     		ldrb	r2, [r1, r2]
 2107 08e2 D2B2     		uxtb	r2, r2
 2108 08e4 1A44     		add	r2, r2, r3
 2109 08e6 5D49     		ldr	r1, .L125+24
 2110 08e8 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 51


 2111 08ea 41F82320 		str	r2, [r1, r3, lsl #2]
 688:main.c        ****             
 689:main.c        ****             //note-on from pluck sensor
 690:main.c        ****             if ((stringPlucks[i] > 0) && (stringPlucksPrev[i] == 0))
 2112              		.loc 1 690 0
 2113 08ee 5B4A     		ldr	r2, .L125+24
 2114 08f0 3B69     		ldr	r3, [r7, #16]
 2115 08f2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2116 08f6 002B     		cmp	r3, #0
 2117 08f8 25DD     		ble	.L90
 2118              		.loc 1 690 0 is_stmt 0 discriminator 1
 2119 08fa 594A     		ldr	r2, .L125+28
 2120 08fc 3B69     		ldr	r3, [r7, #16]
 2121 08fe 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2122 0902 002B     		cmp	r3, #0
 2123 0904 1FD1     		bne	.L90
 691:main.c        ****             {
 692:main.c        ****                 lastNotes[i] = (int)openStringMIDI[i] + (octave * 12);
 2124              		.loc 1 692 0 is_stmt 1
 2125 0906 574A     		ldr	r2, .L125+32
 2126 0908 3B69     		ldr	r3, [r7, #16]
 2127 090a 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2128 090e 1846     		mov	r0, r3
 2129 0910 FFF7FEFF 		bl	__aeabi_f2iz
 2130 0914 0146     		mov	r1, r0
 2131 0916 544B     		ldr	r3, .L125+36
 2132 0918 1A68     		ldr	r2, [r3]
 2133 091a 1346     		mov	r3, r2
 2134 091c 5B00     		lsls	r3, r3, #1
 2135 091e 1344     		add	r3, r3, r2
 2136 0920 9B00     		lsls	r3, r3, #2
 2137 0922 CA18     		adds	r2, r1, r3
 2138 0924 4B49     		ldr	r1, .L125+16
 2139 0926 3B69     		ldr	r3, [r7, #16]
 2140 0928 41F82320 		str	r2, [r1, r3, lsl #2]
 693:main.c        ****                 handleNotes(lastNotes[i], stringPlucks[i], i);
 2141              		.loc 1 693 0
 2142 092c 494A     		ldr	r2, .L125+16
 2143 092e 3B69     		ldr	r3, [r7, #16]
 2144 0930 52F82300 		ldr	r0, [r2, r3, lsl #2]
 2145 0934 494A     		ldr	r2, .L125+24
 2146 0936 3B69     		ldr	r3, [r7, #16]
 2147 0938 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2148 093c 3A69     		ldr	r2, [r7, #16]
 2149 093e 1946     		mov	r1, r3
 2150 0940 FFF7FEFF 		bl	handleNotes
 2151 0944 14E0     		b	.L91
 2152              	.L90:
 694:main.c        ****             }
 695:main.c        ****             //note-off from pluck sensor (RH Mute)
 696:main.c        ****             else if ((stringPlucks[i] == 0) && (stringPlucksPrev[i] > 0))
 2153              		.loc 1 696 0
 2154 0946 454A     		ldr	r2, .L125+24
 2155 0948 3B69     		ldr	r3, [r7, #16]
 2156 094a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2157 094e 002B     		cmp	r3, #0
 2158 0950 0ED1     		bne	.L91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 52


 2159              		.loc 1 696 0 is_stmt 0 discriminator 1
 2160 0952 434A     		ldr	r2, .L125+28
 2161 0954 3B69     		ldr	r3, [r7, #16]
 2162 0956 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2163 095a 002B     		cmp	r3, #0
 2164 095c 08DD     		ble	.L91
 697:main.c        ****             {
 698:main.c        ****                 handleNotes(lastNotes[i], 0, i);
 2165              		.loc 1 698 0 is_stmt 1
 2166 095e 3D4A     		ldr	r2, .L125+16
 2167 0960 3B69     		ldr	r3, [r7, #16]
 2168 0962 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2169 0966 3A69     		ldr	r2, [r7, #16]
 2170 0968 0021     		movs	r1, #0
 2171 096a 1846     		mov	r0, r3
 2172 096c FFF7FEFF 		bl	handleNotes
 2173              	.L91:
 699:main.c        ****             }
 700:main.c        ****             
 701:main.c        **** 
 702:main.c        ****             stringPlucksPrev[i] = stringPlucks[i];
 2174              		.loc 1 702 0 discriminator 2
 2175 0970 3A4A     		ldr	r2, .L125+24
 2176 0972 3B69     		ldr	r3, [r7, #16]
 2177 0974 52F82320 		ldr	r2, [r2, r3, lsl #2]
 2178 0978 3949     		ldr	r1, .L125+28
 2179 097a 3B69     		ldr	r3, [r7, #16]
 2180 097c 41F82320 		str	r2, [r1, r3, lsl #2]
 658:main.c        ****         {
 2181              		.loc 1 658 0 discriminator 2
 2182 0980 3B69     		ldr	r3, [r7, #16]
 2183 0982 0133     		adds	r3, r3, #1
 2184 0984 3B61     		str	r3, [r7, #16]
 2185              	.L84:
 658:main.c        ****         {
 2186              		.loc 1 658 0 is_stmt 0 discriminator 1
 2187 0986 3B69     		ldr	r3, [r7, #16]
 2188 0988 032B     		cmp	r3, #3
 2189 098a 7FF71DAF 		ble	.L92
 2190              	.LBE6:
 703:main.c        ****             
 704:main.c        ****         }
 705:main.c        ****         //make sure previous SPI2 transmission has completed before transferring the remaining midi
 706:main.c        ****         while (0u == ((SPIM_2_ReadTxStatus() & SPIM_2_STS_SPI_DONE) || (SPIM_2_ReadTxStatus() & SPI
 2191              		.loc 1 706 0 is_stmt 1
 2192 098e 00BF     		nop
 2193              	.L96:
 2194              		.loc 1 706 0 is_stmt 0 discriminator 7
 2195 0990 FFF7FEFF 		bl	SPIM_2_ReadTxStatus
 2196 0994 0346     		mov	r3, r0
 2197 0996 03F00103 		and	r3, r3, #1
 2198 099a 002B     		cmp	r3, #0
 2199 099c 06D1     		bne	.L93
 2200              		.loc 1 706 0 discriminator 2
 2201 099e FFF7FEFF 		bl	SPIM_2_ReadTxStatus
 2202 09a2 0346     		mov	r3, r0
 2203 09a4 03F01003 		and	r3, r3, #16
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 53


 2204 09a8 002B     		cmp	r3, #0
 2205 09aa 01D0     		beq	.L94
 2206              	.L93:
 2207              		.loc 1 706 0 discriminator 3
 2208 09ac 0123     		movs	r3, #1
 2209 09ae 00E0     		b	.L95
 2210              	.L94:
 2211              		.loc 1 706 0 discriminator 4
 2212 09b0 0023     		movs	r3, #0
 2213              	.L95:
 2214              		.loc 1 706 0 discriminator 6
 2215 09b2 002B     		cmp	r3, #0
 2216 09b4 ECD0     		beq	.L96
 707:main.c        ****         {
 708:main.c        ****             ;
 709:main.c        ****         }
 710:main.c        ****         //send midi data to internal synth
 711:main.c        ****         //copy the temp buffer into the send buffer now that we are done filling it and sending the
 712:main.c        ****         if (!sendingPreset)
 2217              		.loc 1 712 0 is_stmt 1
 2218 09b6 2D4B     		ldr	r3, .L125+40
 2219 09b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2220 09ba 002B     		cmp	r3, #0
 2221 09bc 26D1     		bne	.L97
 2222              	.LBB7:
 713:main.c        ****         {
 714:main.c        ****             for (uint i = 0 ; i < BUFFER_2_SIZE; i++)
 2223              		.loc 1 714 0
 2224 09be 0023     		movs	r3, #0
 2225 09c0 FB60     		str	r3, [r7, #12]
 2226 09c2 11E0     		b	.L98
 2227              	.L99:
 715:main.c        ****             {
 716:main.c        ****                 tx2Buffer[i] = tx2BufferTemp[i];
 2228              		.loc 1 716 0 discriminator 3
 2229 09c4 2A4A     		ldr	r2, .L125+44
 2230 09c6 FB68     		ldr	r3, [r7, #12]
 2231 09c8 1344     		add	r3, r3, r2
 2232 09ca 1B78     		ldrb	r3, [r3]
 2233 09cc D9B2     		uxtb	r1, r3
 2234 09ce 294A     		ldr	r2, .L125+48
 2235 09d0 FB68     		ldr	r3, [r7, #12]
 2236 09d2 1344     		add	r3, r3, r2
 2237 09d4 0A46     		mov	r2, r1
 2238 09d6 1A70     		strb	r2, [r3]
 717:main.c        ****                 tx2BufferTemp[i] = 0;
 2239              		.loc 1 717 0 discriminator 3
 2240 09d8 254A     		ldr	r2, .L125+44
 2241 09da FB68     		ldr	r3, [r7, #12]
 2242 09dc 1344     		add	r3, r3, r2
 2243 09de 0022     		movs	r2, #0
 2244 09e0 1A70     		strb	r2, [r3]
 714:main.c        ****             {
 2245              		.loc 1 714 0 discriminator 3
 2246 09e2 FB68     		ldr	r3, [r7, #12]
 2247 09e4 0133     		adds	r3, r3, #1
 2248 09e6 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 54


 2249              	.L98:
 714:main.c        ****             {
 2250              		.loc 1 714 0 is_stmt 0 discriminator 1
 2251 09e8 FB68     		ldr	r3, [r7, #12]
 2252 09ea 0F2B     		cmp	r3, #15
 2253 09ec EAD9     		bls	.L99
 2254              	.LBE7:
 718:main.c        ****             }
 719:main.c        ****             if (outChanged)
 2255              		.loc 1 719 0 is_stmt 1
 2256 09ee 224B     		ldr	r3, .L125+52
 2257 09f0 1B68     		ldr	r3, [r3]
 2258 09f2 002B     		cmp	r3, #0
 2259 09f4 03D0     		beq	.L100
 720:main.c        ****             {
 721:main.c        ****                 tx2Buffer[0] = 1;
 2260              		.loc 1 721 0
 2261 09f6 1F4B     		ldr	r3, .L125+48
 2262 09f8 0122     		movs	r2, #1
 2263 09fa 1A70     		strb	r2, [r3]
 2264 09fc 02E0     		b	.L101
 2265              	.L100:
 722:main.c        ****             }
 723:main.c        ****             else
 724:main.c        ****             {
 725:main.c        ****                 tx2Buffer[0] = 0;
 2266              		.loc 1 725 0
 2267 09fe 1D4B     		ldr	r3, .L125+48
 2268 0a00 0022     		movs	r2, #0
 2269 0a02 1A70     		strb	r2, [r3]
 2270              	.L101:
 726:main.c        ****             }
 727:main.c        ****             outChanged = 0;
 2271              		.loc 1 727 0
 2272 0a04 1C4B     		ldr	r3, .L125+52
 2273 0a06 0022     		movs	r2, #0
 2274 0a08 1A60     		str	r2, [r3]
 2275 0a0a 50E0     		b	.L102
 2276              	.L97:
 728:main.c        ****         }
 729:main.c        ****         else
 730:main.c        ****         {
 731:main.c        ****             //send the next preset Chunkkkkk
 732:main.c        ****             tx2Buffer[0] = 2;
 2277              		.loc 1 732 0
 2278 0a0c 194B     		ldr	r3, .L125+48
 2279 0a0e 0222     		movs	r2, #2
 2280 0a10 1A70     		strb	r2, [r3]
 2281              	.LBB8:
 733:main.c        ****             for (uint i = 1 ; i < BUFFER_2_SIZE; i++)
 2282              		.loc 1 733 0
 2283 0a12 0123     		movs	r3, #1
 2284 0a14 BB60     		str	r3, [r7, #8]
 2285 0a16 47E0     		b	.L103
 2286              	.L106:
 734:main.c        ****             {
 735:main.c        ****                 if ((presetArraySendCount) < presetArraySize)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 55


 2287              		.loc 1 735 0
 2288 0a18 184B     		ldr	r3, .L125+56
 2289 0a1a 1A88     		ldrh	r2, [r3]
 2290 0a1c 184B     		ldr	r3, .L125+60
 2291 0a1e 1B88     		ldrh	r3, [r3]
 2292 0a20 9A42     		cmp	r2, r3
 2293 0a22 31D2     		bcs	.L104
 736:main.c        ****                 {
 737:main.c        ****                     tx2Buffer[i] = presetArray[presetArraySendCount++];
 2294              		.loc 1 737 0
 2295 0a24 154B     		ldr	r3, .L125+56
 2296 0a26 1B88     		ldrh	r3, [r3]
 2297 0a28 5A1C     		adds	r2, r3, #1
 2298 0a2a 91B2     		uxth	r1, r2
 2299 0a2c 134A     		ldr	r2, .L125+56
 2300 0a2e 1180     		strh	r1, [r2]	@ movhi
 2301 0a30 1A46     		mov	r2, r3
 2302 0a32 144B     		ldr	r3, .L125+64
 2303 0a34 9B5C     		ldrb	r3, [r3, r2]
 2304 0a36 D9B2     		uxtb	r1, r3
 2305 0a38 0E4A     		ldr	r2, .L125+48
 2306 0a3a BB68     		ldr	r3, [r7, #8]
 2307 0a3c 1344     		add	r3, r3, r2
 2308 0a3e 0A46     		mov	r2, r1
 2309 0a40 1A70     		strb	r2, [r3]
 2310 0a42 2EE0     		b	.L105
 2311              	.L126:
 2312              		.align	2
 2313              	.L125:
 2314 0a44 00000000 		.word	LHMute
 2315 0a48 00000000 		.word	LHMuteCounter
 2316 0a4c 00000000 		.word	stringStates
 2317 0a50 00000000 		.word	pitchFreeze
 2318 0a54 00000000 		.word	lastNotes
 2319 0a58 00000000 		.word	rxBuffer
 2320 0a5c 00000000 		.word	stringPlucks
 2321 0a60 00000000 		.word	stringPlucksPrev
 2322 0a64 00000000 		.word	openStringMIDI
 2323 0a68 00000000 		.word	octave
 2324 0a6c 00000000 		.word	sendingPreset
 2325 0a70 00000000 		.word	tx2BufferTemp
 2326 0a74 00000000 		.word	tx2Buffer
 2327 0a78 00000000 		.word	outChanged
 2328 0a7c 00000000 		.word	presetArraySendCount
 2329 0a80 00000000 		.word	presetArraySize
 2330 0a84 00000000 		.word	presetArray
 2331              	.L104:
 738:main.c        ****                 }
 739:main.c        ****                 else
 740:main.c        ****                 {
 741:main.c        ****                     tx2Buffer[i] = 0xfe; // preset end ack
 2332              		.loc 1 741 0
 2333 0a88 534A     		ldr	r2, .L127
 2334 0a8a BB68     		ldr	r3, [r7, #8]
 2335 0a8c 1344     		add	r3, r3, r2
 2336 0a8e FE22     		movs	r2, #254
 2337 0a90 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 56


 742:main.c        ****                     sendingPreset = 0;
 2338              		.loc 1 742 0
 2339 0a92 524B     		ldr	r3, .L127+4
 2340 0a94 0022     		movs	r2, #0
 2341 0a96 1A70     		strb	r2, [r3]
 743:main.c        ****                     sendMIDINoteOn(61,4,1);
 2342              		.loc 1 743 0
 2343 0a98 0122     		movs	r2, #1
 2344 0a9a 0421     		movs	r1, #4
 2345 0a9c 3D20     		movs	r0, #61
 2346 0a9e FFF7FEFF 		bl	sendMIDINoteOn
 2347              	.L105:
 733:main.c        ****             {
 2348              		.loc 1 733 0 discriminator 2
 2349 0aa2 BB68     		ldr	r3, [r7, #8]
 2350 0aa4 0133     		adds	r3, r3, #1
 2351 0aa6 BB60     		str	r3, [r7, #8]
 2352              	.L103:
 733:main.c        ****             {
 2353              		.loc 1 733 0 is_stmt 0 discriminator 1
 2354 0aa8 BB68     		ldr	r3, [r7, #8]
 2355 0aaa 0F2B     		cmp	r3, #15
 2356 0aac B4D9     		bls	.L106
 2357              	.L102:
 2358              	.LBE8:
 744:main.c        ****                 }
 745:main.c        ****                  //sendMIDINoteOn(61,3,1);
 746:main.c        ****             }
 747:main.c        ****         }
 748:main.c        ****         
 749:main.c        ****         
 750:main.c        ****         if (currentOutPointer > BUFFER_2_SIZE)
 2359              		.loc 1 750 0 is_stmt 1
 2360 0aae 4C4B     		ldr	r3, .L127+8
 2361 0ab0 1B68     		ldr	r3, [r3]
 2362 0ab2 102B     		cmp	r3, #16
 2363 0ab4 02D9     		bls	.L107
 751:main.c        ****         {
 752:main.c        ****             LED1_Write(1);
 2364              		.loc 1 752 0
 2365 0ab6 0120     		movs	r0, #1
 2366 0ab8 FFF7FEFF 		bl	LED1_Write
 2367              	.L107:
 753:main.c        ****             //overflow
 754:main.c        ****         }
 755:main.c        ****         currentOutPointer = 1;
 2368              		.loc 1 755 0
 2369 0abc 484B     		ldr	r3, .L127+8
 2370 0abe 0122     		movs	r2, #1
 2371 0ac0 1A60     		str	r2, [r3]
 756:main.c        ****         CyDmaChEnable(rx2Channel, STORE_TD_CFG_ONCMPLT);
 2372              		.loc 1 756 0
 2373 0ac2 484B     		ldr	r3, .L127+12
 2374 0ac4 1B78     		ldrb	r3, [r3]
 2375 0ac6 DBB2     		uxtb	r3, r3
 2376 0ac8 0121     		movs	r1, #1
 2377 0aca 1846     		mov	r0, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 57


 2378 0acc FFF7FEFF 		bl	CyDmaChEnable
 757:main.c        ****         CyDmaChEnable(tx2Channel, STORE_TD_CFG_ONCMPLT);
 2379              		.loc 1 757 0
 2380 0ad0 454B     		ldr	r3, .L127+16
 2381 0ad2 1B78     		ldrb	r3, [r3]
 2382 0ad4 DBB2     		uxtb	r3, r3
 2383 0ad6 0121     		movs	r1, #1
 2384 0ad8 1846     		mov	r0, r3
 2385 0ada FFF7FEFF 		bl	CyDmaChEnable
 758:main.c        ****         
 759:main.c        ****         //check if USB device has just been plugged in
 760:main.c        ****         if (USB_check_flag)
 2386              		.loc 1 760 0
 2387 0ade 434B     		ldr	r3, .L127+20
 2388 0ae0 1B78     		ldrb	r3, [r3]
 2389 0ae2 DBB2     		uxtb	r3, r3
 2390 0ae4 002B     		cmp	r3, #0
 2391 0ae6 01D0     		beq	.L108
 761:main.c        ****         {
 762:main.c        ****             checkUSB_Vbus();
 2392              		.loc 1 762 0
 2393 0ae8 FFF7FEFF 		bl	checkUSB_Vbus
 2394              	.L108:
 763:main.c        ****         }
 764:main.c        ****         
 765:main.c        ****         //only service the USB bus if there is a computer plugged in
 766:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 2395              		.loc 1 766 0
 2396 0aec 404B     		ldr	r3, .L127+24
 2397 0aee 1B78     		ldrb	r3, [r3]
 2398 0af0 DBB2     		uxtb	r3, r3
 2399 0af2 002B     		cmp	r3, #0
 2400 0af4 13D0     		beq	.L118
 2401              		.loc 1 766 0 is_stmt 0 discriminator 1
 2402 0af6 FFF7FEFF 		bl	USB_VBusPresent
 2403 0afa 0346     		mov	r3, r0
 2404 0afc 002B     		cmp	r3, #0
 2405 0afe 0ED0     		beq	.L118
 767:main.c        ****         {
 768:main.c        ****             if (midiSent > 64)
 2406              		.loc 1 768 0 is_stmt 1
 2407 0b00 3C4B     		ldr	r3, .L127+28
 2408 0b02 1B88     		ldrh	r3, [r3]
 2409 0b04 402B     		cmp	r3, #64
 2410 0b06 05D9     		bls	.L110
 769:main.c        ****             {
 770:main.c        ****                 midiOverflow++;
 2411              		.loc 1 770 0
 2412 0b08 3B4B     		ldr	r3, .L127+32
 2413 0b0a 1B88     		ldrh	r3, [r3]
 2414 0b0c 0133     		adds	r3, r3, #1
 2415 0b0e 9AB2     		uxth	r2, r3
 2416 0b10 394B     		ldr	r3, .L127+32
 2417 0b12 1A80     		strh	r2, [r3]	@ movhi
 2418              	.L110:
 771:main.c        ****             }
 772:main.c        ****             midiSent = 0;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 58


 2419              		.loc 1 772 0
 2420 0b14 374B     		ldr	r3, .L127+28
 2421 0b16 0022     		movs	r2, #0
 2422 0b18 1A80     		strh	r2, [r3]	@ movhi
 773:main.c        ****             USB_service();
 2423              		.loc 1 773 0
 2424 0b1a FFF7FEFF 		bl	USB_service
 2425              	.L118:
 774:main.c        ****         }
 775:main.c        ****                
 776:main.c        **** 
 777:main.c        ****         while(CapSense_IsBusy() != 0)  
 2426              		.loc 1 777 0
 2427 0b1e 00BF     		nop
 2428              	.L111:
 2429              		.loc 1 777 0 is_stmt 0 discriminator 1
 2430 0b20 FFF7FEFF 		bl	CapSense_IsBusy
 2431 0b24 0346     		mov	r3, r0
 2432 0b26 002B     		cmp	r3, #0
 2433 0b28 FAD1     		bne	.L111
 778:main.c        ****         {
 779:main.c        ****             ;//wait until scan is complete
 780:main.c        ****         }  
 781:main.c        **** 
 782:main.c        ****         CapSense_CheckIsAnyWidgetActive();
 2434              		.loc 1 782 0 is_stmt 1
 2435 0b2a FFF7FEFF 		bl	CapSense_CheckIsAnyWidgetActive
 783:main.c        ****         
 784:main.c        ****         /*txBuffer[8] = 0;
 785:main.c        ****         for (int i = 0; i < 8; i++)
 786:main.c        ****         {
 787:main.c        ****            txBuffer[8] += (CapSense_sensorSignal[i] > 0) << i;
 788:main.c        ****         }
 789:main.c        ****         */
 790:main.c        ****         //SPIM_1_ClearTxBuffer();
 791:main.c        ****         //CyDelay(1);
 792:main.c        **** 
 793:main.c        ****         txBuffer[8] = CapSense_sensorOnMask[0];
 2436              		.loc 1 793 0
 2437 0b2e 334B     		ldr	r3, .L127+36
 2438 0b30 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2439 0b32 334B     		ldr	r3, .L127+40
 2440 0b34 1A72     		strb	r2, [r3, #8]
 794:main.c        ****         txBuffer[whichLinearSensor*2] = ((uint16_t) linearPotValue32Bit[whichLinearSensor]) >> 8;
 2441              		.loc 1 794 0
 2442 0b36 334B     		ldr	r3, .L127+44
 2443 0b38 1B68     		ldr	r3, [r3]
 2444 0b3a 5B00     		lsls	r3, r3, #1
 2445 0b3c 314A     		ldr	r2, .L127+44
 2446 0b3e 1268     		ldr	r2, [r2]
 2447 0b40 3149     		ldr	r1, .L127+48
 2448 0b42 51F82220 		ldr	r2, [r1, r2, lsl #2]
 2449 0b46 92B2     		uxth	r2, r2
 2450 0b48 1212     		asrs	r2, r2, #8
 2451 0b4a D1B2     		uxtb	r1, r2
 2452 0b4c 2C4A     		ldr	r2, .L127+40
 2453 0b4e D154     		strb	r1, [r2, r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 59


 795:main.c        ****         txBuffer[whichLinearSensor*2+1] = linearPotValue32Bit[whichLinearSensor] & 0xff;
 2454              		.loc 1 795 0
 2455 0b50 2C4B     		ldr	r3, .L127+44
 2456 0b52 1B68     		ldr	r3, [r3]
 2457 0b54 5B00     		lsls	r3, r3, #1
 2458 0b56 0133     		adds	r3, r3, #1
 2459 0b58 2A4A     		ldr	r2, .L127+44
 2460 0b5a 1268     		ldr	r2, [r2]
 2461 0b5c 2A49     		ldr	r1, .L127+48
 2462 0b5e 51F82220 		ldr	r2, [r1, r2, lsl #2]
 2463 0b62 D1B2     		uxtb	r1, r2
 2464 0b64 264A     		ldr	r2, .L127+40
 2465 0b66 D154     		strb	r1, [r2, r3]
 796:main.c        ****         
 797:main.c        ****         txBuffer[15] = bufCount % 16;
 2466              		.loc 1 797 0
 2467 0b68 284B     		ldr	r3, .L127+52
 2468 0b6a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2469 0b6c 03F00F03 		and	r3, r3, #15
 2470 0b70 DAB2     		uxtb	r2, r3
 2471 0b72 234B     		ldr	r3, .L127+40
 2472 0b74 DA73     		strb	r2, [r3, #15]
 798:main.c        ****         bufCount++;
 2473              		.loc 1 798 0
 2474 0b76 254B     		ldr	r3, .L127+52
 2475 0b78 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2476 0b7a 0133     		adds	r3, r3, #1
 2477 0b7c DAB2     		uxtb	r2, r3
 2478 0b7e 234B     		ldr	r3, .L127+52
 2479 0b80 1A70     		strb	r2, [r3]
 799:main.c        ****         
 800:main.c        ****         if (txBuffer[8] & 1)
 2480              		.loc 1 800 0
 2481 0b82 1F4B     		ldr	r3, .L127+40
 2482 0b84 1B7A     		ldrb	r3, [r3, #8]
 2483 0b86 DBB2     		uxtb	r3, r3
 2484 0b88 03F00103 		and	r3, r3, #1
 2485 0b8c 002B     		cmp	r3, #0
 2486 0b8e 03D0     		beq	.L112
 801:main.c        ****         {
 802:main.c        ****             blue_LED_Write(1);
 2487              		.loc 1 802 0
 2488 0b90 0120     		movs	r0, #1
 2489 0b92 FFF7FEFF 		bl	blue_LED_Write
 2490 0b96 02E0     		b	.L113
 2491              	.L112:
 803:main.c        ****             
 804:main.c        ****         }
 805:main.c        ****         else
 806:main.c        ****         {
 807:main.c        ****             blue_LED_Write(0);
 2492              		.loc 1 807 0
 2493 0b98 0020     		movs	r0, #0
 2494 0b9a FFF7FEFF 		bl	blue_LED_Write
 2495              	.L113:
 808:main.c        ****            
 809:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 60


 810:main.c        ****         SPIM_1_ClearRxBuffer();
 2496              		.loc 1 810 0
 2497 0b9e FFF7FEFF 		bl	SPIM_1_ClearRxBuffer
 811:main.c        ****         SPIM_2_ClearRxBuffer();
 2498              		.loc 1 811 0
 2499 0ba2 FFF7FEFF 		bl	SPIM_2_ClearRxBuffer
 812:main.c        ****         //CyDelay(1);
 813:main.c        ****         //send SPI data
 814:main.c        ****         CyDmaChEnable(rxChannel, STORE_TD_CFG_ONCMPLT);
 2500              		.loc 1 814 0
 2501 0ba6 1A4B     		ldr	r3, .L127+56
 2502 0ba8 1B78     		ldrb	r3, [r3]
 2503 0baa DBB2     		uxtb	r3, r3
 2504 0bac 0121     		movs	r1, #1
 2505 0bae 1846     		mov	r0, r3
 2506 0bb0 FFF7FEFF 		bl	CyDmaChEnable
 815:main.c        ****         CyDmaChEnable(txChannel, STORE_TD_CFG_ONCMPLT);
 2507              		.loc 1 815 0
 2508 0bb4 174B     		ldr	r3, .L127+60
 2509 0bb6 1B78     		ldrb	r3, [r3]
 2510 0bb8 DBB2     		uxtb	r3, r3
 2511 0bba 0121     		movs	r1, #1
 2512 0bbc 1846     		mov	r0, r3
 2513 0bbe FFF7FEFF 		bl	CyDmaChEnable
 816:main.c        ****         
 817:main.c        **** 
 818:main.c        ****        //CyDelay(1);
 819:main.c        **** 
 820:main.c        ****         
 821:main.c        ****         timeSinceLastAttack++;
 2514              		.loc 1 821 0
 2515 0bc2 154B     		ldr	r3, .L127+64
 2516 0bc4 18CB     		ldmia	r3, {r3-r4}
 2517 0bc6 0133     		adds	r3, r3, #1
 2518 0bc8 44F10004 		adc	r4, r4, #0
 2519 0bcc 124A     		ldr	r2, .L127+64
 2520 0bce C2E90034 		strd	r3, [r2]
 822:main.c        ****      }
 2521              		.loc 1 822 0
 2522 0bd2 FFF753BA 		b	.L114
 2523              	.L128:
 2524 0bd6 00BF     		.align	2
 2525              	.L127:
 2526 0bd8 00000000 		.word	tx2Buffer
 2527 0bdc 00000000 		.word	sendingPreset
 2528 0be0 00000000 		.word	currentOutPointer
 2529 0be4 00000000 		.word	rx2Channel
 2530 0be8 00000000 		.word	tx2Channel
 2531 0bec 00000000 		.word	USB_check_flag
 2532 0bf0 00000000 		.word	USB_active
 2533 0bf4 00000000 		.word	midiSent
 2534 0bf8 00000000 		.word	midiOverflow
 2535 0bfc 00000000 		.word	CapSense_sensorOnMask
 2536 0c00 00000000 		.word	txBuffer
 2537 0c04 00000000 		.word	whichLinearSensor
 2538 0c08 00000000 		.word	linearPotValue32Bit
 2539 0c0c 00000000 		.word	bufCount
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 61


 2540 0c10 00000000 		.word	rxChannel
 2541 0c14 00000000 		.word	txChannel
 2542 0c18 00000000 		.word	timeSinceLastAttack
 2543              		.cfi_endproc
 2544              	.LFE73:
 2545              		.size	main, .-main
 2546              		.section	.text.checkUSB_Vbus,"ax",%progbits
 2547              		.align	2
 2548              		.global	checkUSB_Vbus
 2549              		.thumb
 2550              		.thumb_func
 2551              		.type	checkUSB_Vbus, %function
 2552              	checkUSB_Vbus:
 2553              	.LFB74:
 823:main.c        **** }
 824:main.c        **** 
 825:main.c        **** void checkUSB_Vbus(void)
 826:main.c        **** {
 2554              		.loc 1 826 0
 2555              		.cfi_startproc
 2556              		@ args = 0, pretend = 0, frame = 0
 2557              		@ frame_needed = 1, uses_anonymous_args = 0
 2558 0000 80B5     		push	{r7, lr}
 2559              		.cfi_def_cfa_offset 8
 2560              		.cfi_offset 7, -8
 2561              		.cfi_offset 14, -4
 2562 0002 00AF     		add	r7, sp, #0
 2563              		.cfi_def_cfa_register 7
 827:main.c        ****    if (USB_VBusPresent() == 0)
 2564              		.loc 1 827 0
 2565 0004 FFF7FEFF 		bl	USB_VBusPresent
 2566 0008 0346     		mov	r3, r0
 2567 000a 002B     		cmp	r3, #0
 2568 000c 05D1     		bne	.L130
 828:main.c        ****    {
 829:main.c        ****        USB_Stop();
 2569              		.loc 1 829 0
 2570 000e FFF7FEFF 		bl	USB_Stop
 830:main.c        ****        //LED_PWM_Write(0);
 831:main.c        ****        USB_active = 0; 
 2571              		.loc 1 831 0
 2572 0012 0E4B     		ldr	r3, .L133
 2573 0014 0022     		movs	r2, #0
 2574 0016 1A70     		strb	r2, [r3]
 2575 0018 13E0     		b	.L131
 2576              	.L130:
 832:main.c        ****         //CySoftwareReset();
 833:main.c        ****    }
 834:main.c        ****    else if (USB_active == 0 )
 2577              		.loc 1 834 0
 2578 001a 0C4B     		ldr	r3, .L133
 2579 001c 1B78     		ldrb	r3, [r3]
 2580 001e DBB2     		uxtb	r3, r3
 2581 0020 002B     		cmp	r3, #0
 2582 0022 0ED1     		bne	.L131
 835:main.c        ****    {
 836:main.c        ****        USB_Start(0u, USB_5V_OPERATION ); 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 62


 2583              		.loc 1 836 0
 2584 0024 0121     		movs	r1, #1
 2585 0026 0020     		movs	r0, #0
 2586 0028 FFF7FEFF 		bl	USB_Start
 837:main.c        ****         while (0u == USB_GetConfiguration());
 2587              		.loc 1 837 0
 2588 002c 00BF     		nop
 2589              	.L132:
 2590              		.loc 1 837 0 is_stmt 0 discriminator 1
 2591 002e FFF7FEFF 		bl	USB_GetConfiguration
 2592 0032 0346     		mov	r3, r0
 2593 0034 002B     		cmp	r3, #0
 2594 0036 FAD0     		beq	.L132
 838:main.c        ****         USB_MIDI_EP_Init();
 2595              		.loc 1 838 0 is_stmt 1
 2596 0038 FFF7FEFF 		bl	USB_MIDI_Init
 839:main.c        ****        //LED_PWM_Write(255);
 840:main.c        ****        USB_active = 1;
 2597              		.loc 1 840 0
 2598 003c 034B     		ldr	r3, .L133
 2599 003e 0122     		movs	r2, #1
 2600 0040 1A70     		strb	r2, [r3]
 2601              	.L131:
 841:main.c        ****    }
 842:main.c        ****    USB_check_flag = 0;
 2602              		.loc 1 842 0
 2603 0042 034B     		ldr	r3, .L133+4
 2604 0044 0022     		movs	r2, #0
 2605 0046 1A70     		strb	r2, [r3]
 843:main.c        **** }
 2606              		.loc 1 843 0
 2607 0048 00BF     		nop
 2608 004a 80BD     		pop	{r7, pc}
 2609              	.L134:
 2610              		.align	2
 2611              	.L133:
 2612 004c 00000000 		.word	USB_active
 2613 0050 00000000 		.word	USB_check_flag
 2614              		.cfi_endproc
 2615              	.LFE74:
 2616              		.size	checkUSB_Vbus, .-checkUSB_Vbus
 2617              		.section	.text.USB_service,"ax",%progbits
 2618              		.align	2
 2619              		.global	USB_service
 2620              		.thumb
 2621              		.thumb_func
 2622              		.type	USB_service, %function
 2623              	USB_service:
 2624              	.LFB75:
 844:main.c        **** 
 845:main.c        **** void USB_service(void)
 846:main.c        **** {
 2625              		.loc 1 846 0
 2626              		.cfi_startproc
 2627              		@ args = 0, pretend = 0, frame = 0
 2628              		@ frame_needed = 1, uses_anonymous_args = 0
 2629 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 63


 2630              		.cfi_def_cfa_offset 8
 2631              		.cfi_offset 7, -8
 2632              		.cfi_offset 14, -4
 2633 0002 00AF     		add	r7, sp, #0
 2634              		.cfi_def_cfa_register 7
 847:main.c        ****     if(USB_IsConfigurationChanged() != 0u)
 2635              		.loc 1 847 0
 2636 0004 FFF7FEFF 		bl	USB_IsConfigurationChanged
 2637 0008 0346     		mov	r3, r0
 2638 000a 002B     		cmp	r3, #0
 2639 000c 10D0     		beq	.L136
 848:main.c        ****     {
 849:main.c        ****         if(USB_GetConfiguration() != 0u)   
 2640              		.loc 1 849 0
 2641 000e FFF7FEFF 		bl	USB_GetConfiguration
 2642 0012 0346     		mov	r3, r0
 2643 0014 002B     		cmp	r3, #0
 2644 0016 0BD0     		beq	.L136
 850:main.c        ****         {
 851:main.c        ****            // Sleep_isr_StartEx(SleepIsr_function);
 852:main.c        ****             
 853:main.c        ****             //SleepTimer_Start();
 854:main.c        ****         	
 855:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 2645              		.loc 1 855 0
 2646 0018 244B     		ldr	r3, .L142
 2647 001a 1B78     		ldrb	r3, [r3]
 2648 001c DBB2     		uxtb	r3, r3
 2649 001e 002B     		cmp	r3, #0
 2650 0020 06D0     		beq	.L136
 2651              		.loc 1 855 0 is_stmt 0 discriminator 1
 2652 0022 FFF7FEFF 		bl	USB_VBusPresent
 2653 0026 0346     		mov	r3, r0
 2654 0028 002B     		cmp	r3, #0
 2655 002a 01D0     		beq	.L136
 856:main.c        ****             {
 857:main.c        ****                 USB_MIDI_EP_Init();
 2656              		.loc 1 857 0 is_stmt 1
 2657 002c FFF7FEFF 		bl	USB_MIDI_Init
 2658              	.L136:
 858:main.c        ****             }
 859:main.c        ****         }
 860:main.c        ****         else
 861:main.c        ****         {
 862:main.c        ****             //SleepTimer_Stop();
 863:main.c        ****         }    
 864:main.c        ****     }        
 865:main.c        ****     
 866:main.c        ****     if(USB_GetConfiguration() != 0u)    
 2659              		.loc 1 866 0
 2660 0030 FFF7FEFF 		bl	USB_GetConfiguration
 2661 0034 0346     		mov	r3, r0
 2662 0036 002B     		cmp	r3, #0
 2663 0038 35D0     		beq	.L141
 867:main.c        ****     {
 868:main.c        **** 
 869:main.c        ****          /* Reinitialize after SET_CONFIGURATION or SET_INTERFACE Requests */
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 64


 870:main.c        ****         if(USB_IsConfigurationChanged() != 0x00)
 2664              		.loc 1 870 0
 2665 003a FFF7FEFF 		bl	USB_IsConfigurationChanged
 2666 003e 0346     		mov	r3, r0
 2667 0040 002B     		cmp	r3, #0
 2668 0042 18D0     		beq	.L139
 871:main.c        ****         {
 872:main.c        ****             USB_LoadInEP(USB_midi_in_ep, USB_midiInBuffer,(uint16) USB_midiInPointer);
 2669              		.loc 1 872 0
 2670 0044 1A4B     		ldr	r3, .L142+4
 2671 0046 1B78     		ldrb	r3, [r3]
 2672 0048 D8B2     		uxtb	r0, r3
 2673 004a 1A4B     		ldr	r3, .L142+8
 2674 004c 1B78     		ldrb	r3, [r3]
 2675 004e DBB2     		uxtb	r3, r3
 2676 0050 9BB2     		uxth	r3, r3
 2677 0052 1A46     		mov	r2, r3
 2678 0054 1849     		ldr	r1, .L142+12
 2679 0056 FFF7FEFF 		bl	USB_LoadInEP
 873:main.c        ****             USB_ReadOutEP(USB_midi_out_ep,USB_midiOutBuffer, 64);
 2680              		.loc 1 873 0
 2681 005a 184B     		ldr	r3, .L142+16
 2682 005c 1B78     		ldrb	r3, [r3]
 2683 005e DBB2     		uxtb	r3, r3
 2684 0060 4022     		movs	r2, #64
 2685 0062 1749     		ldr	r1, .L142+20
 2686 0064 1846     		mov	r0, r3
 2687 0066 FFF7FEFF 		bl	USB_ReadOutEP
 874:main.c        ****                                              /* configuring the DMAs for the first time only, the d
 875:main.c        ****                                              in the EP buffer is Transferred by DMA to the buffer a
 876:main.c        ****             USB_EnableOutEP(USB_midi_out_ep);       /* Note 3.*/
 2688              		.loc 1 876 0
 2689 006a 144B     		ldr	r3, .L142+16
 2690 006c 1B78     		ldrb	r3, [r3]
 2691 006e DBB2     		uxtb	r3, r3
 2692 0070 1846     		mov	r0, r3
 2693 0072 FFF7FEFF 		bl	USB_EnableOutEP
 2694              	.L139:
 877:main.c        ****         }
 878:main.c        **** #if 0
 879:main.c        ****          /* Check that all data has been transfered and IN Buffer is empty */
 880:main.c        ****          if (USB_GetEPState(USB_midi_in_ep) == USB_IN_BUFFER_EMPTY)
 881:main.c        ****          {
 882:main.c        ****             /*Rearm the IN Endpoint (EP1) */
 883:main.c        ****             USB_LoadInEP(USB_midi_in_ep, USB_NULL, (uint16) USB_midiInPointer);
 884:main.c        ****          }
 885:main.c        ****              
 886:main.c        ****          if (USB_GetEPState(USB_midi_out_ep) == USB_OUT_BUFFER_FULL)
 887:main.c        ****          {
 888:main.c        ****             USB_EnableOutEP(USB_midi_out_ep);       /* Note 3.*/
 889:main.c        ****          }
 890:main.c        ****  #endif
 891:main.c        **** 
 892:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 2695              		.loc 1 892 0
 2696 0076 0D4B     		ldr	r3, .L142
 2697 0078 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 65


 2698 007a DBB2     		uxtb	r3, r3
 2699 007c 002B     		cmp	r3, #0
 2700 007e 06D0     		beq	.L140
 2701              		.loc 1 892 0 is_stmt 0 discriminator 1
 2702 0080 FFF7FEFF 		bl	USB_VBusPresent
 2703 0084 0346     		mov	r3, r0
 2704 0086 002B     		cmp	r3, #0
 2705 0088 01D0     		beq	.L140
 893:main.c        ****             {
 894:main.c        ****                 USB_MIDI_IN_Service();
 2706              		.loc 1 894 0 is_stmt 1
 2707 008a FFF7FEFF 		bl	USB_MIDI_IN_Service
 2708              	.L140:
 895:main.c        ****             }
 896:main.c        **** 
 897:main.c        **** 
 898:main.c        **** 
 899:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 2709              		.loc 1 899 0
 2710 008e 074B     		ldr	r3, .L142
 2711 0090 1B78     		ldrb	r3, [r3]
 2712 0092 DBB2     		uxtb	r3, r3
 2713 0094 002B     		cmp	r3, #0
 2714 0096 06D0     		beq	.L141
 2715              		.loc 1 899 0 is_stmt 0 discriminator 1
 2716 0098 FFF7FEFF 		bl	USB_VBusPresent
 2717 009c 0346     		mov	r3, r0
 2718 009e 002B     		cmp	r3, #0
 2719 00a0 01D0     		beq	.L141
 900:main.c        ****             {
 901:main.c        ****                 USB_MIDI_OUT_Service();
 2720              		.loc 1 901 0 is_stmt 1
 2721 00a2 FFF7FEFF 		bl	USB_MIDI_OUT_Service
 2722              	.L141:
 902:main.c        ****             }
 903:main.c        **** 
 904:main.c        **** /*
 905:main.c        ****         if( usbActivityCounter >= 2u ) 
 906:main.c        ****         {
 907:main.c        **** 
 908:main.c        ****             USB_Suspend();
 909:main.c        **** 
 910:main.c        ****             CyPmSaveClocks();
 911:main.c        ****             CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_PICU);
 912:main.c        ****             CyPmRestoreClocks();
 913:main.c        **** 
 914:main.c        ****             USB_Resume();
 915:main.c        ****             USB_MIDI_EP_Init();
 916:main.c        ****             
 917:main.c        ****             usbActivityCounter = 0u; 
 918:main.c        **** 
 919:main.c        ****         }
 920:main.c        ****         */
 921:main.c        ****     }
 922:main.c        ****         
 923:main.c        **** }
 2723              		.loc 1 923 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 66


 2724 00a6 00BF     		nop
 2725 00a8 80BD     		pop	{r7, pc}
 2726              	.L143:
 2727 00aa 00BF     		.align	2
 2728              	.L142:
 2729 00ac 00000000 		.word	USB_active
 2730 00b0 00000000 		.word	USB_midi_in_ep
 2731 00b4 00000000 		.word	USB_midiInPointer
 2732 00b8 00000000 		.word	USB_midiInBuffer
 2733 00bc 00000000 		.word	USB_midi_out_ep
 2734 00c0 00000000 		.word	USB_midiOutBuffer
 2735              		.cfi_endproc
 2736              	.LFE75:
 2737              		.size	USB_service, .-USB_service
 2738              		.global	currentFloat
 2739              		.bss
 2740 014a 0000     		.align	2
 2741              		.type	currentFloat, %object
 2742              		.size	currentFloat, 4
 2743              	currentFloat:
 2744 014c 00000000 		.space	4
 2745              		.global	mapCount
 2746              		.align	2
 2747              		.type	mapCount, %object
 2748              		.size	mapCount, 4
 2749              	mapCount:
 2750 0150 00000000 		.space	4
 2751              		.global	__aeabi_fcmpeq
 2752              		.section	.text.parseSysex,"ax",%progbits
 2753              		.align	2
 2754              		.global	parseSysex
 2755              		.thumb
 2756              		.thumb_func
 2757              		.type	parseSysex, %function
 2758              	parseSysex:
 2759              	.LFB76:
 924:main.c        **** 
 925:main.c        **** uint32_t currentFloat = 0;
 926:main.c        ****         uint32_t mapCount = 0;
 927:main.c        **** 
 928:main.c        **** void parseSysex(void)
 929:main.c        **** {
 2760              		.loc 1 929 0
 2761              		.cfi_startproc
 2762              		@ args = 0, pretend = 0, frame = 16
 2763              		@ frame_needed = 1, uses_anonymous_args = 0
 2764 0000 90B5     		push	{r4, r7, lr}
 2765              		.cfi_def_cfa_offset 12
 2766              		.cfi_offset 4, -12
 2767              		.cfi_offset 7, -8
 2768              		.cfi_offset 14, -4
 2769 0002 85B0     		sub	sp, sp, #20
 2770              		.cfi_def_cfa_offset 32
 2771 0004 00AF     		add	r7, sp, #0
 2772              		.cfi_def_cfa_register 7
 930:main.c        ****     parsingSysex = 1;
 2773              		.loc 1 930 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 67


 2774 0006 8C4B     		ldr	r3, .L161
 2775 0008 0122     		movs	r2, #1
 2776 000a 1A70     		strb	r2, [r3]
 931:main.c        ****     #if 0
 932:main.c        ****     if (sysexBuffer[0] == 0)
 933:main.c        ****     {
 934:main.c        ****         testy = 1;
 935:main.c        ****         for(uint32_t i = 0; i < 72; i++)
 936:main.c        ****         {
 937:main.c        ****             if (i < sysexPointer)
 938:main.c        ****             {   
 939:main.c        ****                 presetArray[i] = sysexBuffer[i];
 940:main.c        ****             }
 941:main.c        ****             else
 942:main.c        ****             {
 943:main.c        ****                 presetArray[i] = 255;
 944:main.c        ****             }
 945:main.c        ****         }
 946:main.c        ****         presetArray[72] = 240;
 947:main.c        ****         presetArray[73] = 241;
 948:main.c        ****         
 949:main.c        ****         SPIM_1_WriteTxData(presetArray[i]);
 950:main.c        ****         
 951:main.c        ****     }
 952:main.c        ****     #endif
 953:main.c        ****     //0 = it's a preset
 954:main.c        ****     if (sysexBuffer[0] == 0)
 2777              		.loc 1 954 0
 2778 000c 8B4B     		ldr	r3, .L161+4
 2779 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2780 0010 002B     		cmp	r3, #0
 2781 0012 40F00981 		bne	.L145
 2782              	.LBB9:
 955:main.c        ****     {
 956:main.c        ****         if (sysexBuffer[2] == 0)
 2783              		.loc 1 956 0
 2784 0016 894B     		ldr	r3, .L161+4
 2785 0018 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2786 001a 002B     		cmp	r3, #0
 2787 001c 0DD1     		bne	.L146
 957:main.c        ****         {
 958:main.c        ****             sysexPresetInProgress = 1; // set a flag that we've started a sysex preset transfer. Ma
 2788              		.loc 1 958 0
 2789 001e 884B     		ldr	r3, .L161+8
 2790 0020 0122     		movs	r2, #1
 2791 0022 1A70     		strb	r2, [r3]
 959:main.c        ****             currentFloat = 0;
 2792              		.loc 1 959 0
 2793 0024 874B     		ldr	r3, .L161+12
 2794 0026 0022     		movs	r2, #0
 2795 0028 1A60     		str	r2, [r3]
 960:main.c        ****             presetArraySection = initialVals;
 2796              		.loc 1 960 0
 2797 002a 874B     		ldr	r3, .L161+16
 2798 002c 0022     		movs	r2, #0
 2799 002e 1A70     		strb	r2, [r3]
 961:main.c        ****             sendMIDINoteOn(61,0,1);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 68


 2800              		.loc 1 961 0
 2801 0030 0122     		movs	r2, #1
 2802 0032 0021     		movs	r1, #0
 2803 0034 3D20     		movs	r0, #61
 2804 0036 FFF7FEFF 		bl	sendMIDINoteOn
 2805              	.L146:
 2806              	.LBB10:
 962:main.c        ****         }
 963:main.c        ****         union breakFloat theVal;
 964:main.c        **** 
 965:main.c        **** 
 966:main.c        ****         
 967:main.c        ****         for (uint32_t i = 3; i < sysexPointer; i = i+5)
 2807              		.loc 1 967 0
 2808 003a 0323     		movs	r3, #3
 2809 003c FB60     		str	r3, [r7, #12]
 2810 003e EDE0     		b	.L147
 2811              	.L157:
 968:main.c        ****         {
 969:main.c        ****             theVal.u32 = 0;
 2812              		.loc 1 969 0
 2813 0040 0023     		movs	r3, #0
 2814 0042 7B60     		str	r3, [r7, #4]
 970:main.c        ****             theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 2815              		.loc 1 970 0
 2816 0044 7B68     		ldr	r3, [r7, #4]
 2817 0046 7D49     		ldr	r1, .L161+4
 2818 0048 FA68     		ldr	r2, [r7, #12]
 2819 004a 0A44     		add	r2, r2, r1
 2820 004c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2821 004e 1207     		lsls	r2, r2, #28
 2822 0050 1343     		orrs	r3, r3, r2
 2823 0052 7B60     		str	r3, [r7, #4]
 971:main.c        ****             theVal.u32 |= (sysexBuffer[i+1] << 21);
 2824              		.loc 1 971 0
 2825 0054 7B68     		ldr	r3, [r7, #4]
 2826 0056 FA68     		ldr	r2, [r7, #12]
 2827 0058 0132     		adds	r2, r2, #1
 2828 005a 7849     		ldr	r1, .L161+4
 2829 005c 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2830 005e 5205     		lsls	r2, r2, #21
 2831 0060 1343     		orrs	r3, r3, r2
 2832 0062 7B60     		str	r3, [r7, #4]
 972:main.c        ****             theVal.u32 |= (sysexBuffer[i+2] << 14);
 2833              		.loc 1 972 0
 2834 0064 7B68     		ldr	r3, [r7, #4]
 2835 0066 FA68     		ldr	r2, [r7, #12]
 2836 0068 0232     		adds	r2, r2, #2
 2837 006a 7449     		ldr	r1, .L161+4
 2838 006c 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2839 006e 9203     		lsls	r2, r2, #14
 2840 0070 1343     		orrs	r3, r3, r2
 2841 0072 7B60     		str	r3, [r7, #4]
 973:main.c        ****             theVal.u32 |= (sysexBuffer[i+3] << 7);
 2842              		.loc 1 973 0
 2843 0074 7B68     		ldr	r3, [r7, #4]
 2844 0076 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 69


 2845 0078 0332     		adds	r2, r2, #3
 2846 007a 7049     		ldr	r1, .L161+4
 2847 007c 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2848 007e D201     		lsls	r2, r2, #7
 2849 0080 1343     		orrs	r3, r3, r2
 2850 0082 7B60     		str	r3, [r7, #4]
 974:main.c        ****             theVal.u32 |= (sysexBuffer[i+4] & 127);
 2851              		.loc 1 974 0
 2852 0084 7A68     		ldr	r2, [r7, #4]
 2853 0086 FB68     		ldr	r3, [r7, #12]
 2854 0088 0433     		adds	r3, r3, #4
 2855 008a 6C49     		ldr	r1, .L161+4
 2856 008c CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 2857 008e 03F07F03 		and	r3, r3, #127
 2858 0092 1343     		orrs	r3, r3, r2
 2859 0094 7B60     		str	r3, [r7, #4]
 975:main.c        **** 
 976:main.c        ****             if (presetArraySection == initialVals)
 2860              		.loc 1 976 0
 2861 0096 6C4B     		ldr	r3, .L161+16
 2862 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2863 009a 002B     		cmp	r3, #0
 2864 009c 43D1     		bne	.L148
 2865              	.LBB11:
 977:main.c        ****             {
 978:main.c        ****                 uint16_t intVal = (uint16_t)(theVal.f * 32767.0f);
 2866              		.loc 1 978 0
 2867 009e 7B68     		ldr	r3, [r7, #4]	@ float
 2868 00a0 6A49     		ldr	r1, .L161+20
 2869 00a2 1846     		mov	r0, r3
 2870 00a4 FFF7FEFF 		bl	__aeabi_fmul
 2871 00a8 0346     		mov	r3, r0
 2872 00aa 1846     		mov	r0, r3
 2873 00ac FFF7FEFF 		bl	__aeabi_f2uiz
 2874 00b0 0346     		mov	r3, r0
 2875 00b2 7B81     		strh	r3, [r7, #10]	@ movhi
 979:main.c        ****                 presetArray[currentFloat++] = intVal >> 8;
 2876              		.loc 1 979 0
 2877 00b4 634B     		ldr	r3, .L161+12
 2878 00b6 1B68     		ldr	r3, [r3]
 2879 00b8 5A1C     		adds	r2, r3, #1
 2880 00ba 6249     		ldr	r1, .L161+12
 2881 00bc 0A60     		str	r2, [r1]
 2882 00be 7A89     		ldrh	r2, [r7, #10]
 2883 00c0 120A     		lsrs	r2, r2, #8
 2884 00c2 92B2     		uxth	r2, r2
 2885 00c4 D1B2     		uxtb	r1, r2
 2886 00c6 624A     		ldr	r2, .L161+24
 2887 00c8 D154     		strb	r1, [r2, r3]
 980:main.c        ****                 presetArray[currentFloat++] = intVal & 0xff;
 2888              		.loc 1 980 0
 2889 00ca 5E4B     		ldr	r3, .L161+12
 2890 00cc 1B68     		ldr	r3, [r3]
 2891 00ce 5A1C     		adds	r2, r3, #1
 2892 00d0 5C49     		ldr	r1, .L161+12
 2893 00d2 0A60     		str	r2, [r1]
 2894 00d4 7A89     		ldrh	r2, [r7, #10]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 70


 2895 00d6 D1B2     		uxtb	r1, r2
 2896 00d8 5D4A     		ldr	r2, .L161+24
 2897 00da D154     		strb	r1, [r2, r3]
 981:main.c        ****                 
 982:main.c        ****                 if (theVal.f == -1.0f)
 2898              		.loc 1 982 0
 2899 00dc 7B68     		ldr	r3, [r7, #4]	@ float
 2900 00de 5D49     		ldr	r1, .L161+28
 2901 00e0 1846     		mov	r0, r3
 2902 00e2 FFF7FEFF 		bl	__aeabi_fcmpeq
 2903 00e6 0346     		mov	r3, r0
 2904 00e8 002B     		cmp	r3, #0
 2905 00ea 00F09480 		beq	.L151
 983:main.c        ****                 {
 984:main.c        ****                     presetArray[currentFloat++] = 0xff;
 2906              		.loc 1 984 0
 2907 00ee 554B     		ldr	r3, .L161+12
 2908 00f0 1B68     		ldr	r3, [r3]
 2909 00f2 5A1C     		adds	r2, r3, #1
 2910 00f4 5349     		ldr	r1, .L161+12
 2911 00f6 0A60     		str	r2, [r1]
 2912 00f8 554A     		ldr	r2, .L161+24
 2913 00fa FF21     		movs	r1, #255
 2914 00fc D154     		strb	r1, [r2, r3]
 985:main.c        ****                     presetArray[currentFloat++] = 0xff;
 2915              		.loc 1 985 0
 2916 00fe 514B     		ldr	r3, .L161+12
 2917 0100 1B68     		ldr	r3, [r3]
 2918 0102 5A1C     		adds	r2, r3, #1
 2919 0104 4F49     		ldr	r1, .L161+12
 2920 0106 0A60     		str	r2, [r1]
 2921 0108 514A     		ldr	r2, .L161+24
 2922 010a FF21     		movs	r1, #255
 2923 010c D154     		strb	r1, [r2, r3]
 986:main.c        ****                     presetArraySection = mapping;
 2924              		.loc 1 986 0
 2925 010e 4E4B     		ldr	r3, .L161+16
 2926 0110 0122     		movs	r2, #1
 2927 0112 1A70     		strb	r2, [r3]
 987:main.c        ****                     mapCount = 0;
 2928              		.loc 1 987 0
 2929 0114 504B     		ldr	r3, .L161+32
 2930 0116 0022     		movs	r2, #0
 2931 0118 1A60     		str	r2, [r3]
 988:main.c        ****                     sendMIDINoteOn(61,1,1);
 2932              		.loc 1 988 0
 2933 011a 0122     		movs	r2, #1
 2934 011c 0121     		movs	r1, #1
 2935 011e 3D20     		movs	r0, #61
 2936 0120 FFF7FEFF 		bl	sendMIDINoteOn
 2937 0124 77E0     		b	.L151
 2938              	.L148:
 2939              	.LBE11:
 989:main.c        ****                 }
 990:main.c        ****             }
 991:main.c        ****             else if (presetArraySection == mapping)
 2940              		.loc 1 991 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 71


 2941 0126 484B     		ldr	r3, .L161+16
 2942 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2943 012a 012B     		cmp	r3, #1
 2944 012c 73D1     		bne	.L151
 992:main.c        ****             {
 993:main.c        ****                 // this is the order
 994:main.c        ****                 // source (int), target (int), scalarSource (arrives as -1.0f if no scalar, send as
 995:main.c        ****                 if ((mapCount % 4) != 3)
 2945              		.loc 1 995 0
 2946 012e 4A4B     		ldr	r3, .L161+32
 2947 0130 1B68     		ldr	r3, [r3]
 2948 0132 03F00303 		and	r3, r3, #3
 2949 0136 032B     		cmp	r3, #3
 2950 0138 42D0     		beq	.L152
 996:main.c        ****                 {
 997:main.c        ****                     if (theVal.f < 0.0f)
 2951              		.loc 1 997 0
 2952 013a 7B68     		ldr	r3, [r7, #4]	@ float
 2953 013c 4FF00001 		mov	r1, #0
 2954 0140 1846     		mov	r0, r3
 2955 0142 FFF7FEFF 		bl	__aeabi_fcmplt
 2956 0146 0346     		mov	r3, r0
 2957 0148 002B     		cmp	r3, #0
 2958 014a 23D0     		beq	.L160
 998:main.c        ****                     {
 999:main.c        ****                         presetArray[currentFloat++] = 0xff;
 2959              		.loc 1 999 0
 2960 014c 3D4B     		ldr	r3, .L161+12
 2961 014e 1B68     		ldr	r3, [r3]
 2962 0150 5A1C     		adds	r2, r3, #1
 2963 0152 3C49     		ldr	r1, .L161+12
 2964 0154 0A60     		str	r2, [r1]
 2965 0156 3E4A     		ldr	r2, .L161+24
 2966 0158 FF21     		movs	r1, #255
 2967 015a D154     		strb	r1, [r2, r3]
1000:main.c        ****                         presetArray[currentFloat++] = 0xff;
 2968              		.loc 1 1000 0
 2969 015c 394B     		ldr	r3, .L161+12
 2970 015e 1B68     		ldr	r3, [r3]
 2971 0160 5A1C     		adds	r2, r3, #1
 2972 0162 3849     		ldr	r1, .L161+12
 2973 0164 0A60     		str	r2, [r1]
 2974 0166 3A4A     		ldr	r2, .L161+24
 2975 0168 FF21     		movs	r1, #255
 2976 016a D154     		strb	r1, [r2, r3]
1001:main.c        ****                         presetArraySection = presetEnd;
 2977              		.loc 1 1001 0
 2978 016c 364B     		ldr	r3, .L161+16
 2979 016e 0222     		movs	r2, #2
 2980 0170 1A70     		strb	r2, [r3]
1002:main.c        ****                         sysexPresetInProgress = 0;
 2981              		.loc 1 1002 0
 2982 0172 334B     		ldr	r3, .L161+8
 2983 0174 0022     		movs	r2, #0
 2984 0176 1A70     		strb	r2, [r3]
1003:main.c        ****                         sendingPreset = 1;
 2985              		.loc 1 1003 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 72


 2986 0178 384B     		ldr	r3, .L161+36
 2987 017a 0122     		movs	r2, #1
 2988 017c 1A70     		strb	r2, [r3]
1004:main.c        ****                         sendMIDINoteOn(61,2,1);
 2989              		.loc 1 1004 0
 2990 017e 0122     		movs	r2, #1
 2991 0180 0221     		movs	r1, #2
 2992 0182 3D20     		movs	r0, #61
 2993 0184 FFF7FEFF 		bl	sendMIDINoteOn
1005:main.c        ****                         presetArraySize = currentFloat;
 2994              		.loc 1 1005 0
 2995 0188 2E4B     		ldr	r3, .L161+12
 2996 018a 1B68     		ldr	r3, [r3]
 2997 018c 9AB2     		uxth	r2, r3
 2998 018e 344B     		ldr	r3, .L161+40
 2999 0190 1A80     		strh	r2, [r3]	@ movhi
 3000 0192 3BE0     		b	.L156
 3001              	.L160:
1006:main.c        ****                     }
1007:main.c        ****                     else
1008:main.c        ****                     {
1009:main.c        ****                         presetArray[currentFloat++] = (uint16_t)theVal.f;
 3002              		.loc 1 1009 0
 3003 0194 2B4B     		ldr	r3, .L161+12
 3004 0196 1C68     		ldr	r4, [r3]
 3005 0198 631C     		adds	r3, r4, #1
 3006 019a 2A4A     		ldr	r2, .L161+12
 3007 019c 1360     		str	r3, [r2]
 3008 019e 7B68     		ldr	r3, [r7, #4]	@ float
 3009 01a0 1846     		mov	r0, r3
 3010 01a2 FFF7FEFF 		bl	__aeabi_f2uiz
 3011 01a6 0346     		mov	r3, r0
 3012 01a8 9BB2     		uxth	r3, r3
 3013 01aa DAB2     		uxtb	r2, r3
 3014 01ac 284B     		ldr	r3, .L161+24
 3015 01ae 1A55     		strb	r2, [r3, r4]
1010:main.c        ****                         sendMIDINoteOn(61,5,mapCount);
 3016              		.loc 1 1010 0
 3017 01b0 294B     		ldr	r3, .L161+32
 3018 01b2 1B68     		ldr	r3, [r3]
 3019 01b4 1A46     		mov	r2, r3
 3020 01b6 0521     		movs	r1, #5
 3021 01b8 3D20     		movs	r0, #61
 3022 01ba FFF7FEFF 		bl	sendMIDINoteOn
 3023 01be 25E0     		b	.L156
 3024              	.L152:
 3025              	.LBB12:
1011:main.c        ****                     }
1012:main.c        ****                 }
1013:main.c        ****                 else
1014:main.c        ****                 {
1015:main.c        ****                     uint16_t intVal = (uint16_t)(theVal.f * 32767.0f);
 3026              		.loc 1 1015 0
 3027 01c0 7B68     		ldr	r3, [r7, #4]	@ float
 3028 01c2 2249     		ldr	r1, .L161+20
 3029 01c4 1846     		mov	r0, r3
 3030 01c6 FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 73


 3031 01ca 0346     		mov	r3, r0
 3032 01cc 1846     		mov	r0, r3
 3033 01ce FFF7FEFF 		bl	__aeabi_f2uiz
 3034 01d2 0346     		mov	r3, r0
 3035 01d4 3B81     		strh	r3, [r7, #8]	@ movhi
1016:main.c        ****                     presetArray[currentFloat++] = intVal >> 8;
 3036              		.loc 1 1016 0
 3037 01d6 1B4B     		ldr	r3, .L161+12
 3038 01d8 1B68     		ldr	r3, [r3]
 3039 01da 5A1C     		adds	r2, r3, #1
 3040 01dc 1949     		ldr	r1, .L161+12
 3041 01de 0A60     		str	r2, [r1]
 3042 01e0 3A89     		ldrh	r2, [r7, #8]
 3043 01e2 120A     		lsrs	r2, r2, #8
 3044 01e4 92B2     		uxth	r2, r2
 3045 01e6 D1B2     		uxtb	r1, r2
 3046 01e8 194A     		ldr	r2, .L161+24
 3047 01ea D154     		strb	r1, [r2, r3]
1017:main.c        ****                     presetArray[currentFloat++] = intVal & 0xff;
 3048              		.loc 1 1017 0
 3049 01ec 154B     		ldr	r3, .L161+12
 3050 01ee 1B68     		ldr	r3, [r3]
 3051 01f0 5A1C     		adds	r2, r3, #1
 3052 01f2 1449     		ldr	r1, .L161+12
 3053 01f4 0A60     		str	r2, [r1]
 3054 01f6 3A89     		ldrh	r2, [r7, #8]	@ movhi
 3055 01f8 D1B2     		uxtb	r1, r2
 3056 01fa 154A     		ldr	r2, .L161+24
 3057 01fc D154     		strb	r1, [r2, r3]
1018:main.c        ****                     sendMIDINoteOn(61,6,mapCount);
 3058              		.loc 1 1018 0
 3059 01fe 164B     		ldr	r3, .L161+32
 3060 0200 1B68     		ldr	r3, [r3]
 3061 0202 1A46     		mov	r2, r3
 3062 0204 0621     		movs	r1, #6
 3063 0206 3D20     		movs	r0, #61
 3064 0208 FFF7FEFF 		bl	sendMIDINoteOn
 3065              	.L156:
 3066              	.LBE12:
1019:main.c        ****                 }
1020:main.c        ****                 mapCount++;
 3067              		.loc 1 1020 0
 3068 020c 124B     		ldr	r3, .L161+32
 3069 020e 1B68     		ldr	r3, [r3]
 3070 0210 0133     		adds	r3, r3, #1
 3071 0212 114A     		ldr	r2, .L161+32
 3072 0214 1360     		str	r3, [r2]
 3073              	.L151:
 967:main.c        ****         {
 3074              		.loc 1 967 0 discriminator 2
 3075 0216 FB68     		ldr	r3, [r7, #12]
 3076 0218 0533     		adds	r3, r3, #5
 3077 021a FB60     		str	r3, [r7, #12]
 3078              	.L147:
 967:main.c        ****         {
 3079              		.loc 1 967 0 is_stmt 0 discriminator 1
 3080 021c 114B     		ldr	r3, .L161+44
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 74


 3081 021e 1B68     		ldr	r3, [r3]
 3082 0220 FA68     		ldr	r2, [r7, #12]
 3083 0222 9A42     		cmp	r2, r3
 3084 0224 FFF40CAF 		bcc	.L157
 3085              	.L145:
 3086              	.LBE10:
 3087              	.LBE9:
1021:main.c        ****             }
1022:main.c        ****             
1023:main.c        ****         }
1024:main.c        ****         
1025:main.c        **** 
1026:main.c        **** 
1027:main.c        ****         
1028:main.c        ****     }
1029:main.c        **** 
1030:main.c        ****     parsingSysex = 0;
 3088              		.loc 1 1030 0 is_stmt 1
 3089 0228 034B     		ldr	r3, .L161
 3090 022a 0022     		movs	r2, #0
 3091 022c 1A70     		strb	r2, [r3]
1031:main.c        **** 
1032:main.c        **** }
 3092              		.loc 1 1032 0
 3093 022e 00BF     		nop
 3094 0230 1437     		adds	r7, r7, #20
 3095              		.cfi_def_cfa_offset 12
 3096 0232 BD46     		mov	sp, r7
 3097              		.cfi_def_cfa_register 13
 3098              		@ sp needed
 3099 0234 90BD     		pop	{r4, r7, pc}
 3100              	.L162:
 3101 0236 00BF     		.align	2
 3102              	.L161:
 3103 0238 00000000 		.word	parsingSysex
 3104 023c 00000000 		.word	sysexBuffer
 3105 0240 00000000 		.word	sysexPresetInProgress
 3106 0244 00000000 		.word	currentFloat
 3107 0248 00000000 		.word	presetArraySection
 3108 024c 00FEFF46 		.word	1191181824
 3109 0250 00000000 		.word	presetArray
 3110 0254 000080BF 		.word	-1082130432
 3111 0258 00000000 		.word	mapCount
 3112 025c 00000000 		.word	sendingPreset
 3113 0260 00000000 		.word	presetArraySize
 3114 0264 00000000 		.word	sysexPointer
 3115              		.cfi_endproc
 3116              	.LFE76:
 3117              		.size	parseSysex, .-parseSysex
 3118              		.comm	tempMIDI,4,4
 3119              		.section	.text.USB_callbackLocalMidiEvent,"ax",%progbits
 3120              		.align	2
 3121              		.global	USB_callbackLocalMidiEvent
 3122              		.thumb
 3123              		.thumb_func
 3124              		.type	USB_callbackLocalMidiEvent, %function
 3125              	USB_callbackLocalMidiEvent:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 75


 3126              	.LFB77:
1033:main.c        **** 
1034:main.c        **** 
1035:main.c        **** 
1036:main.c        **** uint8_t tempMIDI[4];
1037:main.c        **** 
1038:main.c        **** //data sent from computer
1039:main.c        **** void USB_callbackLocalMidiEvent(uint8 cable, uint8 *midiMsg) CYREENTRANT
1040:main.c        **** {
 3127              		.loc 1 1040 0
 3128              		.cfi_startproc
 3129              		@ args = 0, pretend = 0, frame = 16
 3130              		@ frame_needed = 1, uses_anonymous_args = 0
 3131 0000 80B5     		push	{r7, lr}
 3132              		.cfi_def_cfa_offset 8
 3133              		.cfi_offset 7, -8
 3134              		.cfi_offset 14, -4
 3135 0002 84B0     		sub	sp, sp, #16
 3136              		.cfi_def_cfa_offset 24
 3137 0004 00AF     		add	r7, sp, #0
 3138              		.cfi_def_cfa_register 7
 3139 0006 0346     		mov	r3, r0
 3140 0008 3960     		str	r1, [r7]
 3141 000a FB71     		strb	r3, [r7, #7]
1041:main.c        ****     tempMIDI[0] = midiMsg[0];
 3142              		.loc 1 1041 0
 3143 000c 3B68     		ldr	r3, [r7]
 3144 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3145 0010 314B     		ldr	r3, .L172
 3146 0012 1A70     		strb	r2, [r3]
1042:main.c        ****     tempMIDI[1] = midiMsg[1];
 3147              		.loc 1 1042 0
 3148 0014 3B68     		ldr	r3, [r7]
 3149 0016 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 3150 0018 2F4B     		ldr	r3, .L172
 3151 001a 5A70     		strb	r2, [r3, #1]
1043:main.c        ****     tempMIDI[2] = midiMsg[2];
 3152              		.loc 1 1043 0
 3153 001c 3B68     		ldr	r3, [r7]
 3154 001e 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 3155 0020 2D4B     		ldr	r3, .L172
 3156 0022 9A70     		strb	r2, [r3, #2]
1044:main.c        ****     tempMIDI[3] = midiMsg[3];
 3157              		.loc 1 1044 0
 3158 0024 3B68     		ldr	r3, [r7]
 3159 0026 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 3160 0028 2B4B     		ldr	r3, .L172
 3161 002a DA70     		strb	r2, [r3, #3]
1045:main.c        ****     //check that we got here
1046:main.c        ****     if (receivingSysex)
 3162              		.loc 1 1046 0
 3163 002c 2B4B     		ldr	r3, .L172+4
 3164 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3165 0030 002B     		cmp	r3, #0
 3166 0032 26D0     		beq	.L164
 3167              	.LBB13:
1047:main.c        ****     {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 76


1048:main.c        ****         for (int i = 0; i < 3; i++)
 3168              		.loc 1 1048 0
 3169 0034 0023     		movs	r3, #0
 3170 0036 FB60     		str	r3, [r7, #12]
 3171 0038 20E0     		b	.L165
 3172              	.L168:
1049:main.c        ****         {
1050:main.c        ****             if (midiMsg[i] < 128)
 3173              		.loc 1 1050 0
 3174 003a FB68     		ldr	r3, [r7, #12]
 3175 003c 3A68     		ldr	r2, [r7]
 3176 003e 1344     		add	r3, r3, r2
 3177 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3178 0042 5BB2     		sxtb	r3, r3
 3179 0044 002B     		cmp	r3, #0
 3180 0046 0BDB     		blt	.L166
1051:main.c        ****             {
1052:main.c        ****                 sysexBuffer[sysexPointer++] = midiMsg[i];
 3181              		.loc 1 1052 0
 3182 0048 254B     		ldr	r3, .L172+8
 3183 004a 1B68     		ldr	r3, [r3]
 3184 004c 5A1C     		adds	r2, r3, #1
 3185 004e 2449     		ldr	r1, .L172+8
 3186 0050 0A60     		str	r2, [r1]
 3187 0052 FA68     		ldr	r2, [r7, #12]
 3188 0054 3968     		ldr	r1, [r7]
 3189 0056 0A44     		add	r2, r2, r1
 3190 0058 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3191 005a 224A     		ldr	r2, .L172+12
 3192 005c D154     		strb	r1, [r2, r3]
 3193 005e 0AE0     		b	.L167
 3194              	.L166:
1053:main.c        ****             }
1054:main.c        ****             else
1055:main.c        ****             {
1056:main.c        ****                 if (midiMsg[i] == USB_MIDI_EOSEX)
 3195              		.loc 1 1056 0
 3196 0060 FB68     		ldr	r3, [r7, #12]
 3197 0062 3A68     		ldr	r2, [r7]
 3198 0064 1344     		add	r3, r3, r2
 3199 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3200 0068 F72B     		cmp	r3, #247
 3201 006a 04D1     		bne	.L167
1057:main.c        ****                 {
1058:main.c        ****                     receivingSysex = 0;
 3202              		.loc 1 1058 0
 3203 006c 1B4B     		ldr	r3, .L172+4
 3204 006e 0022     		movs	r2, #0
 3205 0070 1A70     		strb	r2, [r3]
1059:main.c        ****                     parseSysex();
 3206              		.loc 1 1059 0
 3207 0072 FFF7FEFF 		bl	parseSysex
 3208              	.L167:
1048:main.c        ****         {
 3209              		.loc 1 1048 0 discriminator 2
 3210 0076 FB68     		ldr	r3, [r7, #12]
 3211 0078 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 77


 3212 007a FB60     		str	r3, [r7, #12]
 3213              	.L165:
1048:main.c        ****         {
 3214              		.loc 1 1048 0 is_stmt 0 discriminator 1
 3215 007c FB68     		ldr	r3, [r7, #12]
 3216 007e 022B     		cmp	r3, #2
 3217 0080 DBDD     		ble	.L168
 3218              	.L164:
 3219              	.LBE13:
1060:main.c        ****                  }
1061:main.c        ****             }
1062:main.c        ****         }
1063:main.c        ****     }
1064:main.c        ****     if (midiMsg[USB_EVENT_BYTE0] == USB_MIDI_SYSEX)
 3220              		.loc 1 1064 0 is_stmt 1
 3221 0082 3B68     		ldr	r3, [r7]
 3222 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3223 0086 F02B     		cmp	r3, #240
 3224 0088 1BD1     		bne	.L169
1065:main.c        ****     {
1066:main.c        ****         if (!parsingSysex)
 3225              		.loc 1 1066 0
 3226 008a 174B     		ldr	r3, .L172+16
 3227 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3228 008e 002B     		cmp	r3, #0
 3229 0090 17D1     		bne	.L169
1067:main.c        ****         {
1068:main.c        ****             receivingSysex = 1;
 3230              		.loc 1 1068 0
 3231 0092 124B     		ldr	r3, .L172+4
 3232 0094 0122     		movs	r2, #1
 3233 0096 1A70     		strb	r2, [r3]
1069:main.c        ****             sysexPointer = 0;
 3234              		.loc 1 1069 0
 3235 0098 114B     		ldr	r3, .L172+8
 3236 009a 0022     		movs	r2, #0
 3237 009c 1A60     		str	r2, [r3]
1070:main.c        ****             sysexBuffer[sysexPointer++] = midiMsg[1];
 3238              		.loc 1 1070 0
 3239 009e 104B     		ldr	r3, .L172+8
 3240 00a0 1B68     		ldr	r3, [r3]
 3241 00a2 5A1C     		adds	r2, r3, #1
 3242 00a4 0E49     		ldr	r1, .L172+8
 3243 00a6 0A60     		str	r2, [r1]
 3244 00a8 3A68     		ldr	r2, [r7]
 3245 00aa 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 3246 00ac 0D4A     		ldr	r2, .L172+12
 3247 00ae D154     		strb	r1, [r2, r3]
1071:main.c        ****             sysexBuffer[sysexPointer++] = midiMsg[2];
 3248              		.loc 1 1071 0
 3249 00b0 0B4B     		ldr	r3, .L172+8
 3250 00b2 1B68     		ldr	r3, [r3]
 3251 00b4 5A1C     		adds	r2, r3, #1
 3252 00b6 0A49     		ldr	r1, .L172+8
 3253 00b8 0A60     		str	r2, [r1]
 3254 00ba 3A68     		ldr	r2, [r7]
 3255 00bc 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 78


 3256 00be 094A     		ldr	r2, .L172+12
 3257 00c0 D154     		strb	r1, [r2, r3]
 3258              	.L169:
1072:main.c        ****         }
1073:main.c        ****     }
1074:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 3259              		.loc 1 1074 0
 3260 00c2 0A4B     		ldr	r3, .L172+20
 3261 00c4 1B78     		ldrb	r3, [r3]
 3262 00c6 DBB2     		uxtb	r3, r3
 3263 00c8 002B     		cmp	r3, #0
 3264 00ca 01D0     		beq	.L171
 3265              		.loc 1 1074 0 is_stmt 0 discriminator 1
 3266 00cc FFF7FEFF 		bl	USB_VBusPresent
 3267              	.L171:
1075:main.c        ****     { 
1076:main.c        ****     }
1077:main.c        ****     cable = cable;
1078:main.c        **** }
 3268              		.loc 1 1078 0 is_stmt 1
 3269 00d0 00BF     		nop
 3270 00d2 1037     		adds	r7, r7, #16
 3271              		.cfi_def_cfa_offset 8
 3272 00d4 BD46     		mov	sp, r7
 3273              		.cfi_def_cfa_register 13
 3274              		@ sp needed
 3275 00d6 80BD     		pop	{r7, pc}
 3276              	.L173:
 3277              		.align	2
 3278              	.L172:
 3279 00d8 00000000 		.word	tempMIDI
 3280 00dc 00000000 		.word	receivingSysex
 3281 00e0 00000000 		.word	sysexPointer
 3282 00e4 00000000 		.word	sysexBuffer
 3283 00e8 00000000 		.word	parsingSysex
 3284 00ec 00000000 		.word	USB_active
 3285              		.cfi_endproc
 3286              	.LFE77:
 3287              		.size	USB_callbackLocalMidiEvent, .-USB_callbackLocalMidiEvent
 3288              		.section	.text.sendMIDINoteOn,"ax",%progbits
 3289              		.align	2
 3290              		.global	sendMIDINoteOn
 3291              		.thumb
 3292              		.thumb_func
 3293              		.type	sendMIDINoteOn, %function
 3294              	sendMIDINoteOn:
 3295              	.LFB78:
1079:main.c        **** 
1080:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel)
1081:main.c        **** {  
 3296              		.loc 1 1081 0
 3297              		.cfi_startproc
 3298              		@ args = 0, pretend = 0, frame = 16
 3299              		@ frame_needed = 1, uses_anonymous_args = 0
 3300 0000 80B5     		push	{r7, lr}
 3301              		.cfi_def_cfa_offset 8
 3302              		.cfi_offset 7, -8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 79


 3303              		.cfi_offset 14, -4
 3304 0002 84B0     		sub	sp, sp, #16
 3305              		.cfi_def_cfa_offset 24
 3306 0004 00AF     		add	r7, sp, #0
 3307              		.cfi_def_cfa_register 7
 3308 0006 F860     		str	r0, [r7, #12]
 3309 0008 B960     		str	r1, [r7, #8]
 3310 000a 7A60     		str	r2, [r7, #4]
1082:main.c        ****    
1083:main.c        ****     midiMsg[0] = USB_MIDI_NOTE_ON + channel;
 3311              		.loc 1 1083 0
 3312 000c 7B68     		ldr	r3, [r7, #4]
 3313 000e DBB2     		uxtb	r3, r3
 3314 0010 703B     		subs	r3, r3, #112
 3315 0012 DAB2     		uxtb	r2, r3
 3316 0014 254B     		ldr	r3, .L178
 3317 0016 1A70     		strb	r2, [r3]
1084:main.c        ****     midiMsg[1] = MIDInoteNum;
 3318              		.loc 1 1084 0
 3319 0018 FB68     		ldr	r3, [r7, #12]
 3320 001a DAB2     		uxtb	r2, r3
 3321 001c 234B     		ldr	r3, .L178
 3322 001e 5A70     		strb	r2, [r3, #1]
1085:main.c        ****     midiMsg[2] = velocity;	
 3323              		.loc 1 1085 0
 3324 0020 BB68     		ldr	r3, [r7, #8]
 3325 0022 DAB2     		uxtb	r2, r3
 3326 0024 214B     		ldr	r3, .L178
 3327 0026 9A70     		strb	r2, [r3, #2]
1086:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
1087:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 3328              		.loc 1 1087 0
 3329 0028 214B     		ldr	r3, .L178+4
 3330 002a 1B78     		ldrb	r3, [r3]
 3331 002c DBB2     		uxtb	r3, r3
 3332 002e 002B     		cmp	r3, #0
 3333 0030 09D0     		beq	.L175
 3334              		.loc 1 1087 0 is_stmt 0 discriminator 1
 3335 0032 FFF7FEFF 		bl	USB_VBusPresent
 3336 0036 0346     		mov	r3, r0
 3337 0038 002B     		cmp	r3, #0
 3338 003a 04D0     		beq	.L175
1088:main.c        ****     {
1089:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 3339              		.loc 1 1089 0 is_stmt 1
 3340 003c 0022     		movs	r2, #0
 3341 003e 1B49     		ldr	r1, .L178
 3342 0040 0320     		movs	r0, #3
 3343 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 3344              	.L175:
1090:main.c        ****     } 
1091:main.c        ****     midiSent += 4;
 3345              		.loc 1 1091 0
 3346 0046 1B4B     		ldr	r3, .L178+8
 3347 0048 1B88     		ldrh	r3, [r3]
 3348 004a 0433     		adds	r3, r3, #4
 3349 004c 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 80


 3350 004e 194B     		ldr	r3, .L178+8
 3351 0050 1A80     		strh	r2, [r3]	@ movhi
1092:main.c        ****     
1093:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[0];
 3352              		.loc 1 1093 0
 3353 0052 194B     		ldr	r3, .L178+12
 3354 0054 1B68     		ldr	r3, [r3]
 3355 0056 5A1C     		adds	r2, r3, #1
 3356 0058 1749     		ldr	r1, .L178+12
 3357 005a 0A60     		str	r2, [r1]
 3358 005c 134A     		ldr	r2, .L178
 3359 005e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3360 0060 164A     		ldr	r2, .L178+16
 3361 0062 D154     		strb	r1, [r2, r3]
1094:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[1];
 3362              		.loc 1 1094 0
 3363 0064 144B     		ldr	r3, .L178+12
 3364 0066 1B68     		ldr	r3, [r3]
 3365 0068 5A1C     		adds	r2, r3, #1
 3366 006a 1349     		ldr	r1, .L178+12
 3367 006c 0A60     		str	r2, [r1]
 3368 006e 0F4A     		ldr	r2, .L178
 3369 0070 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 3370 0072 124A     		ldr	r2, .L178+16
 3371 0074 D154     		strb	r1, [r2, r3]
1095:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[2];
 3372              		.loc 1 1095 0
 3373 0076 104B     		ldr	r3, .L178+12
 3374 0078 1B68     		ldr	r3, [r3]
 3375 007a 5A1C     		adds	r2, r3, #1
 3376 007c 0E49     		ldr	r1, .L178+12
 3377 007e 0A60     		str	r2, [r1]
 3378 0080 0A4A     		ldr	r2, .L178
 3379 0082 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 3380 0084 0D4A     		ldr	r2, .L178+16
 3381 0086 D154     		strb	r1, [r2, r3]
1096:main.c        ****     if (velocity > 0)
 3382              		.loc 1 1096 0
 3383 0088 BB68     		ldr	r3, [r7, #8]
 3384 008a 002B     		cmp	r3, #0
 3385 008c 03DD     		ble	.L176
1097:main.c        ****     {
1098:main.c        ****         LED1_Write(1);
 3386              		.loc 1 1098 0
 3387 008e 0120     		movs	r0, #1
 3388 0090 FFF7FEFF 		bl	LED1_Write
 3389 0094 02E0     		b	.L177
 3390              	.L176:
1099:main.c        ****     }
1100:main.c        ****     else
1101:main.c        ****     {
1102:main.c        ****         LED1_Write(0);
 3391              		.loc 1 1102 0
 3392 0096 0020     		movs	r0, #0
 3393 0098 FFF7FEFF 		bl	LED1_Write
 3394              	.L177:
1103:main.c        ****     }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 81


1104:main.c        ****     outChanged = 1;
 3395              		.loc 1 1104 0
 3396 009c 084B     		ldr	r3, .L178+20
 3397 009e 0122     		movs	r2, #1
 3398 00a0 1A60     		str	r2, [r3]
1105:main.c        ****     
1106:main.c        **** }
 3399              		.loc 1 1106 0
 3400 00a2 00BF     		nop
 3401 00a4 1037     		adds	r7, r7, #16
 3402              		.cfi_def_cfa_offset 8
 3403 00a6 BD46     		mov	sp, r7
 3404              		.cfi_def_cfa_register 13
 3405              		@ sp needed
 3406 00a8 80BD     		pop	{r7, pc}
 3407              	.L179:
 3408 00aa 00BF     		.align	2
 3409              	.L178:
 3410 00ac 00000000 		.word	midiMsg
 3411 00b0 00000000 		.word	USB_active
 3412 00b4 00000000 		.word	midiSent
 3413 00b8 00000000 		.word	currentOutPointer
 3414 00bc 00000000 		.word	tx2BufferTemp
 3415 00c0 00000000 		.word	outChanged
 3416              		.cfi_endproc
 3417              	.LFE78:
 3418              		.size	sendMIDINoteOn, .-sendMIDINoteOn
 3419              		.section	.text.sendMIDIPitchBend,"ax",%progbits
 3420              		.align	2
 3421              		.global	sendMIDIPitchBend
 3422              		.thumb
 3423              		.thumb_func
 3424              		.type	sendMIDIPitchBend, %function
 3425              	sendMIDIPitchBend:
 3426              	.LFB79:
1107:main.c        **** 
1108:main.c        **** void sendMIDIPitchBend(int val, int channel)
1109:main.c        **** {
 3427              		.loc 1 1109 0
 3428              		.cfi_startproc
 3429              		@ args = 0, pretend = 0, frame = 8
 3430              		@ frame_needed = 1, uses_anonymous_args = 0
 3431 0000 80B5     		push	{r7, lr}
 3432              		.cfi_def_cfa_offset 8
 3433              		.cfi_offset 7, -8
 3434              		.cfi_offset 14, -4
 3435 0002 82B0     		sub	sp, sp, #8
 3436              		.cfi_def_cfa_offset 16
 3437 0004 00AF     		add	r7, sp, #0
 3438              		.cfi_def_cfa_register 7
 3439 0006 7860     		str	r0, [r7, #4]
 3440 0008 3960     		str	r1, [r7]
1110:main.c        ****     midiMsg[0] = USB_MIDI_PITCH_BEND_CHANGE + channel;
 3441              		.loc 1 1110 0
 3442 000a 3B68     		ldr	r3, [r7]
 3443 000c DBB2     		uxtb	r3, r3
 3444 000e 203B     		subs	r3, r3, #32
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 82


 3445 0010 DAB2     		uxtb	r2, r3
 3446 0012 224B     		ldr	r3, .L182
 3447 0014 1A70     		strb	r2, [r3]
1111:main.c        ****     midiMsg[1] = (val & 127); //LSB
 3448              		.loc 1 1111 0
 3449 0016 7B68     		ldr	r3, [r7, #4]
 3450 0018 DBB2     		uxtb	r3, r3
 3451 001a 03F07F03 		and	r3, r3, #127
 3452 001e DAB2     		uxtb	r2, r3
 3453 0020 1E4B     		ldr	r3, .L182
 3454 0022 5A70     		strb	r2, [r3, #1]
1112:main.c        ****     midiMsg[2] = (val >> 7);	//MSB		
 3455              		.loc 1 1112 0
 3456 0024 7B68     		ldr	r3, [r7, #4]
 3457 0026 DB11     		asrs	r3, r3, #7
 3458 0028 DAB2     		uxtb	r2, r3
 3459 002a 1C4B     		ldr	r3, .L182
 3460 002c 9A70     		strb	r2, [r3, #2]
1113:main.c        **** 
1114:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
1115:main.c        ****     
1116:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 3461              		.loc 1 1116 0
 3462 002e 1C4B     		ldr	r3, .L182+4
 3463 0030 1B78     		ldrb	r3, [r3]
 3464 0032 DBB2     		uxtb	r3, r3
 3465 0034 002B     		cmp	r3, #0
 3466 0036 09D0     		beq	.L181
 3467              		.loc 1 1116 0 is_stmt 0 discriminator 1
 3468 0038 FFF7FEFF 		bl	USB_VBusPresent
 3469 003c 0346     		mov	r3, r0
 3470 003e 002B     		cmp	r3, #0
 3471 0040 04D0     		beq	.L181
1117:main.c        ****     {
1118:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 3472              		.loc 1 1118 0 is_stmt 1
 3473 0042 0022     		movs	r2, #0
 3474 0044 1549     		ldr	r1, .L182
 3475 0046 0320     		movs	r0, #3
 3476 0048 FFF7FEFF 		bl	USB_PutUsbMidiIn
 3477              	.L181:
1119:main.c        ****     } 
1120:main.c        ****     midiSent += 4;
 3478              		.loc 1 1120 0
 3479 004c 154B     		ldr	r3, .L182+8
 3480 004e 1B88     		ldrh	r3, [r3]
 3481 0050 0433     		adds	r3, r3, #4
 3482 0052 9AB2     		uxth	r2, r3
 3483 0054 134B     		ldr	r3, .L182+8
 3484 0056 1A80     		strh	r2, [r3]	@ movhi
1121:main.c        ****     
1122:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[0];
 3485              		.loc 1 1122 0
 3486 0058 134B     		ldr	r3, .L182+12
 3487 005a 1B68     		ldr	r3, [r3]
 3488 005c 5A1C     		adds	r2, r3, #1
 3489 005e 1249     		ldr	r1, .L182+12
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 83


 3490 0060 0A60     		str	r2, [r1]
 3491 0062 0E4A     		ldr	r2, .L182
 3492 0064 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3493 0066 114A     		ldr	r2, .L182+16
 3494 0068 D154     		strb	r1, [r2, r3]
1123:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[1];
 3495              		.loc 1 1123 0
 3496 006a 0F4B     		ldr	r3, .L182+12
 3497 006c 1B68     		ldr	r3, [r3]
 3498 006e 5A1C     		adds	r2, r3, #1
 3499 0070 0D49     		ldr	r1, .L182+12
 3500 0072 0A60     		str	r2, [r1]
 3501 0074 094A     		ldr	r2, .L182
 3502 0076 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 3503 0078 0C4A     		ldr	r2, .L182+16
 3504 007a D154     		strb	r1, [r2, r3]
1124:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[2];
 3505              		.loc 1 1124 0
 3506 007c 0A4B     		ldr	r3, .L182+12
 3507 007e 1B68     		ldr	r3, [r3]
 3508 0080 5A1C     		adds	r2, r3, #1
 3509 0082 0949     		ldr	r1, .L182+12
 3510 0084 0A60     		str	r2, [r1]
 3511 0086 054A     		ldr	r2, .L182
 3512 0088 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 3513 008a 084A     		ldr	r2, .L182+16
 3514 008c D154     		strb	r1, [r2, r3]
1125:main.c        ****     outChanged = 1;
 3515              		.loc 1 1125 0
 3516 008e 084B     		ldr	r3, .L182+20
 3517 0090 0122     		movs	r2, #1
 3518 0092 1A60     		str	r2, [r3]
1126:main.c        **** }
 3519              		.loc 1 1126 0
 3520 0094 00BF     		nop
 3521 0096 0837     		adds	r7, r7, #8
 3522              		.cfi_def_cfa_offset 8
 3523 0098 BD46     		mov	sp, r7
 3524              		.cfi_def_cfa_register 13
 3525              		@ sp needed
 3526 009a 80BD     		pop	{r7, pc}
 3527              	.L183:
 3528              		.align	2
 3529              	.L182:
 3530 009c 00000000 		.word	midiMsg
 3531 00a0 00000000 		.word	USB_active
 3532 00a4 00000000 		.word	midiSent
 3533 00a8 00000000 		.word	currentOutPointer
 3534 00ac 00000000 		.word	tx2BufferTemp
 3535 00b0 00000000 		.word	outChanged
 3536              		.cfi_endproc
 3537              	.LFE79:
 3538              		.size	sendMIDIPitchBend, .-sendMIDIPitchBend
 3539              		.section	.text.sendMIDIControlChange,"ax",%progbits
 3540              		.align	2
 3541              		.global	sendMIDIControlChange
 3542              		.thumb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 84


 3543              		.thumb_func
 3544              		.type	sendMIDIControlChange, %function
 3545              	sendMIDIControlChange:
 3546              	.LFB80:
1127:main.c        **** 
1128:main.c        **** 
1129:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel)
1130:main.c        **** {
 3547              		.loc 1 1130 0
 3548              		.cfi_startproc
 3549              		@ args = 0, pretend = 0, frame = 16
 3550              		@ frame_needed = 1, uses_anonymous_args = 0
 3551 0000 80B5     		push	{r7, lr}
 3552              		.cfi_def_cfa_offset 8
 3553              		.cfi_offset 7, -8
 3554              		.cfi_offset 14, -4
 3555 0002 84B0     		sub	sp, sp, #16
 3556              		.cfi_def_cfa_offset 24
 3557 0004 00AF     		add	r7, sp, #0
 3558              		.cfi_def_cfa_register 7
 3559 0006 F860     		str	r0, [r7, #12]
 3560 0008 B960     		str	r1, [r7, #8]
 3561 000a 7A60     		str	r2, [r7, #4]
1131:main.c        ****     midiMsg[0] = USB_MIDI_CONTROL_CHANGE + channel;
 3562              		.loc 1 1131 0
 3563 000c 7B68     		ldr	r3, [r7, #4]
 3564 000e DBB2     		uxtb	r3, r3
 3565 0010 503B     		subs	r3, r3, #80
 3566 0012 DAB2     		uxtb	r2, r3
 3567 0014 204B     		ldr	r3, .L186
 3568 0016 1A70     		strb	r2, [r3]
1132:main.c        ****     midiMsg[1] = CCnum;
 3569              		.loc 1 1132 0
 3570 0018 FB68     		ldr	r3, [r7, #12]
 3571 001a DAB2     		uxtb	r2, r3
 3572 001c 1E4B     		ldr	r3, .L186
 3573 001e 5A70     		strb	r2, [r3, #1]
1133:main.c        ****     midiMsg[2] = CCval;			
 3574              		.loc 1 1133 0
 3575 0020 BB68     		ldr	r3, [r7, #8]
 3576 0022 DAB2     		uxtb	r2, r3
 3577 0024 1C4B     		ldr	r3, .L186
 3578 0026 9A70     		strb	r2, [r3, #2]
1134:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
1135:main.c        ****     
1136:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 3579              		.loc 1 1136 0
 3580 0028 1C4B     		ldr	r3, .L186+4
 3581 002a 1B78     		ldrb	r3, [r3]
 3582 002c DBB2     		uxtb	r3, r3
 3583 002e 002B     		cmp	r3, #0
 3584 0030 09D0     		beq	.L185
 3585              		.loc 1 1136 0 is_stmt 0 discriminator 1
 3586 0032 FFF7FEFF 		bl	USB_VBusPresent
 3587 0036 0346     		mov	r3, r0
 3588 0038 002B     		cmp	r3, #0
 3589 003a 04D0     		beq	.L185
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 85


1137:main.c        ****     {
1138:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 3590              		.loc 1 1138 0 is_stmt 1
 3591 003c 0022     		movs	r2, #0
 3592 003e 1649     		ldr	r1, .L186
 3593 0040 0320     		movs	r0, #3
 3594 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 3595              	.L185:
1139:main.c        ****     } 
1140:main.c        ****     midiSent += 4;
 3596              		.loc 1 1140 0
 3597 0046 164B     		ldr	r3, .L186+8
 3598 0048 1B88     		ldrh	r3, [r3]
 3599 004a 0433     		adds	r3, r3, #4
 3600 004c 9AB2     		uxth	r2, r3
 3601 004e 144B     		ldr	r3, .L186+8
 3602 0050 1A80     		strh	r2, [r3]	@ movhi
1141:main.c        ****     
1142:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[0];
 3603              		.loc 1 1142 0
 3604 0052 144B     		ldr	r3, .L186+12
 3605 0054 1B68     		ldr	r3, [r3]
 3606 0056 5A1C     		adds	r2, r3, #1
 3607 0058 1249     		ldr	r1, .L186+12
 3608 005a 0A60     		str	r2, [r1]
 3609 005c 0E4A     		ldr	r2, .L186
 3610 005e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3611 0060 114A     		ldr	r2, .L186+16
 3612 0062 D154     		strb	r1, [r2, r3]
1143:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[1];
 3613              		.loc 1 1143 0
 3614 0064 0F4B     		ldr	r3, .L186+12
 3615 0066 1B68     		ldr	r3, [r3]
 3616 0068 5A1C     		adds	r2, r3, #1
 3617 006a 0E49     		ldr	r1, .L186+12
 3618 006c 0A60     		str	r2, [r1]
 3619 006e 0A4A     		ldr	r2, .L186
 3620 0070 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 3621 0072 0D4A     		ldr	r2, .L186+16
 3622 0074 D154     		strb	r1, [r2, r3]
1144:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[2];
 3623              		.loc 1 1144 0
 3624 0076 0B4B     		ldr	r3, .L186+12
 3625 0078 1B68     		ldr	r3, [r3]
 3626 007a 5A1C     		adds	r2, r3, #1
 3627 007c 0949     		ldr	r1, .L186+12
 3628 007e 0A60     		str	r2, [r1]
 3629 0080 054A     		ldr	r2, .L186
 3630 0082 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 3631 0084 084A     		ldr	r2, .L186+16
 3632 0086 D154     		strb	r1, [r2, r3]
1145:main.c        ****     outChanged = 1;
 3633              		.loc 1 1145 0
 3634 0088 084B     		ldr	r3, .L186+20
 3635 008a 0122     		movs	r2, #1
 3636 008c 1A60     		str	r2, [r3]
1146:main.c        ****     
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 86


1147:main.c        **** }
 3637              		.loc 1 1147 0
 3638 008e 00BF     		nop
 3639 0090 1037     		adds	r7, r7, #16
 3640              		.cfi_def_cfa_offset 8
 3641 0092 BD46     		mov	sp, r7
 3642              		.cfi_def_cfa_register 13
 3643              		@ sp needed
 3644 0094 80BD     		pop	{r7, pc}
 3645              	.L187:
 3646 0096 00BF     		.align	2
 3647              	.L186:
 3648 0098 00000000 		.word	midiMsg
 3649 009c 00000000 		.word	USB_active
 3650 00a0 00000000 		.word	midiSent
 3651 00a4 00000000 		.word	currentOutPointer
 3652 00a8 00000000 		.word	tx2BufferTemp
 3653 00ac 00000000 		.word	outChanged
 3654              		.cfi_endproc
 3655              	.LFE80:
 3656              		.size	sendMIDIControlChange, .-sendMIDIControlChange
 3657              		.global	iVtherm
 3658              		.bss
 3659              		.align	2
 3660              		.type	iVtherm, %object
 3661              		.size	iVtherm, 4
 3662              	iVtherm:
 3663 0154 00000000 		.space	4
 3664              		.global	__aeabi_i2f
 3665              		.section	.text.scanLinearResistor,"ax",%progbits
 3666              		.align	2
 3667              		.global	scanLinearResistor
 3668              		.thumb
 3669              		.thumb_func
 3670              		.type	scanLinearResistor, %function
 3671              	scanLinearResistor:
 3672              	.LFB81:
1148:main.c        **** 
1149:main.c        **** 
1150:main.c        **** int32 iVtherm = 0;
1151:main.c        **** 
1152:main.c        **** 
1153:main.c        **** void scanLinearResistor(void)
1154:main.c        **** {
 3673              		.loc 1 1154 0
 3674              		.cfi_startproc
 3675              		@ args = 0, pretend = 0, frame = 16
 3676              		@ frame_needed = 1, uses_anonymous_args = 0
 3677 0000 90B5     		push	{r4, r7, lr}
 3678              		.cfi_def_cfa_offset 12
 3679              		.cfi_offset 4, -12
 3680              		.cfi_offset 7, -8
 3681              		.cfi_offset 14, -4
 3682 0002 85B0     		sub	sp, sp, #20
 3683              		.cfi_def_cfa_offset 32
 3684 0004 00AF     		add	r7, sp, #0
 3685              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 87


1155:main.c        ****         int32 iVref = 0;
 3686              		.loc 1 1155 0
 3687 0006 0023     		movs	r3, #0
 3688 0008 BB60     		str	r3, [r7, #8]
1156:main.c        ****         int32 iRes = 0;
 3689              		.loc 1 1156 0
 3690 000a 0023     		movs	r3, #0
 3691 000c FB60     		str	r3, [r7, #12]
1157:main.c        ****         int32 offset = 0;
 3692              		.loc 1 1157 0
 3693 000e 0023     		movs	r3, #0
 3694 0010 7B60     		str	r3, [r7, #4]
1158:main.c        ****     
1159:main.c        ****         ExtMUXS0_Write(whichLinearSensor & 1);
 3695              		.loc 1 1159 0
 3696 0012 3F4B     		ldr	r3, .L191
 3697 0014 1B68     		ldr	r3, [r3]
 3698 0016 DBB2     		uxtb	r3, r3
 3699 0018 03F00103 		and	r3, r3, #1
 3700 001c DBB2     		uxtb	r3, r3
 3701 001e 1846     		mov	r0, r3
 3702 0020 FFF7FEFF 		bl	ExtMUXS0_Write
1160:main.c        ****         ExtMUXS1_Write((whichLinearSensor & 2)>>1);
 3703              		.loc 1 1160 0
 3704 0024 3A4B     		ldr	r3, .L191
 3705 0026 1B68     		ldr	r3, [r3]
 3706 0028 03F00203 		and	r3, r3, #2
 3707 002c 5B10     		asrs	r3, r3, #1
 3708 002e DBB2     		uxtb	r3, r3
 3709 0030 1846     		mov	r0, r3
 3710 0032 FFF7FEFF 		bl	ExtMUXS1_Write
1161:main.c        **** 
1162:main.c        ****         scanPart = 0;
 3711              		.loc 1 1162 0
 3712 0036 374B     		ldr	r3, .L191+4
 3713 0038 0022     		movs	r2, #0
 3714 003a 1A60     		str	r2, [r3]
1163:main.c        ****         //if (scanPart == 0)
1164:main.c        ****         {
1165:main.c        ****             AMux_1_FastSelect(scanPart);
 3715              		.loc 1 1165 0
 3716 003c 354B     		ldr	r3, .L191+4
 3717 003e 1B68     		ldr	r3, [r3]
 3718 0040 DBB2     		uxtb	r3, r3
 3719 0042 1846     		mov	r0, r3
 3720 0044 FFF7FEFF 		bl	AMux_1_FastSelect
1166:main.c        ****             CyDelayUs(4); 
 3721              		.loc 1 1166 0
 3722 0048 0420     		movs	r0, #4
 3723 004a FFF7FEFF 		bl	CyDelayUs
1167:main.c        ****             ADC_1_StartConvert();
 3724              		.loc 1 1167 0
 3725 004e FFF7FEFF 		bl	ADC_1_StartConvert
1168:main.c        ****             ADC_1_IsEndConversion(ADC_1_WAIT_FOR_RESULT);
 3726              		.loc 1 1168 0
 3727 0052 0020     		movs	r0, #0
 3728 0054 FFF7FEFF 		bl	ADC_1_IsEndConversion
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 88


1169:main.c        ****             iVtherm = ADC_1_GetResult32();
 3729              		.loc 1 1169 0
 3730 0058 FFF7FEFF 		bl	ADC_1_GetResult32
 3731 005c 0246     		mov	r2, r0
 3732 005e 2E4B     		ldr	r3, .L191+8
 3733 0060 1A60     		str	r2, [r3]
1170:main.c        ****             
1171:main.c        ****         }
1172:main.c        ****         scanPart = 1;
 3734              		.loc 1 1172 0
 3735 0062 2C4B     		ldr	r3, .L191+4
 3736 0064 0122     		movs	r2, #1
 3737 0066 1A60     		str	r2, [r3]
1173:main.c        ****        // else
1174:main.c        ****         {
1175:main.c        **** 
1176:main.c        ****             AMux_1_FastSelect(scanPart);
 3738              		.loc 1 1176 0
 3739 0068 2A4B     		ldr	r3, .L191+4
 3740 006a 1B68     		ldr	r3, [r3]
 3741 006c DBB2     		uxtb	r3, r3
 3742 006e 1846     		mov	r0, r3
 3743 0070 FFF7FEFF 		bl	AMux_1_FastSelect
1177:main.c        ****             CyDelayUs(4); 
 3744              		.loc 1 1177 0
 3745 0074 0420     		movs	r0, #4
 3746 0076 FFF7FEFF 		bl	CyDelayUs
1178:main.c        ****             ADC_1_StartConvert();
 3747              		.loc 1 1178 0
 3748 007a FFF7FEFF 		bl	ADC_1_StartConvert
1179:main.c        ****             ADC_1_IsEndConversion(ADC_1_WAIT_FOR_RESULT);
 3749              		.loc 1 1179 0
 3750 007e 0020     		movs	r0, #0
 3751 0080 FFF7FEFF 		bl	ADC_1_IsEndConversion
1180:main.c        ****             iVref = ADC_1_GetResult32();
 3752              		.loc 1 1180 0
 3753 0084 FFF7FEFF 		bl	ADC_1_GetResult32
 3754 0088 B860     		str	r0, [r7, #8]
1181:main.c        **** 
1182:main.c        ****             iVref =   iVref - offset;
 3755              		.loc 1 1182 0
 3756 008a BA68     		ldr	r2, [r7, #8]
 3757 008c 7B68     		ldr	r3, [r7, #4]
 3758 008e D31A     		subs	r3, r2, r3
 3759 0090 BB60     		str	r3, [r7, #8]
1183:main.c        ****             
1184:main.c        ****             if ((iVref > 1000) && (iVtherm < 1000))
 3760              		.loc 1 1184 0
 3761 0092 BB68     		ldr	r3, [r7, #8]
 3762 0094 B3F57A7F 		cmp	r3, #1000
 3763 0098 08DD     		ble	.L189
 3764              		.loc 1 1184 0 is_stmt 0 discriminator 1
 3765 009a 1F4B     		ldr	r3, .L191+8
 3766 009c 1B68     		ldr	r3, [r3]
 3767 009e B3F57A7F 		cmp	r3, #1000
 3768 00a2 03DA     		bge	.L189
1185:main.c        ****             {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 89


1186:main.c        ****                 iRes = 65535;
 3769              		.loc 1 1186 0 is_stmt 1
 3770 00a4 4FF6FF73 		movw	r3, #65535
 3771 00a8 FB60     		str	r3, [r7, #12]
 3772 00aa 18E0     		b	.L190
 3773              	.L189:
1187:main.c        ****             }
1188:main.c        ****             else
1189:main.c        ****             {
1190:main.c        ****                 iRes = (int32)(((float)iVref / (float)iVtherm) * 30000.0f);
 3774              		.loc 1 1190 0
 3775 00ac B868     		ldr	r0, [r7, #8]
 3776 00ae FFF7FEFF 		bl	__aeabi_i2f
 3777 00b2 0446     		mov	r4, r0
 3778 00b4 184B     		ldr	r3, .L191+8
 3779 00b6 1B68     		ldr	r3, [r3]
 3780 00b8 1846     		mov	r0, r3
 3781 00ba FFF7FEFF 		bl	__aeabi_i2f
 3782 00be 0346     		mov	r3, r0
 3783 00c0 1946     		mov	r1, r3
 3784 00c2 2046     		mov	r0, r4
 3785 00c4 FFF7FEFF 		bl	__aeabi_fdiv
 3786 00c8 0346     		mov	r3, r0
 3787 00ca 1449     		ldr	r1, .L191+12
 3788 00cc 1846     		mov	r0, r3
 3789 00ce FFF7FEFF 		bl	__aeabi_fmul
 3790 00d2 0346     		mov	r3, r0
 3791 00d4 1846     		mov	r0, r3
 3792 00d6 FFF7FEFF 		bl	__aeabi_f2iz
 3793 00da 0346     		mov	r3, r0
 3794 00dc FB60     		str	r3, [r7, #12]
 3795              	.L190:
1191:main.c        ****             }
1192:main.c        ****             linearPotValue32Bit[whichLinearSensor] = iRes;
 3796              		.loc 1 1192 0
 3797 00de 0C4B     		ldr	r3, .L191
 3798 00e0 1B68     		ldr	r3, [r3]
 3799 00e2 0F49     		ldr	r1, .L191+16
 3800 00e4 FA68     		ldr	r2, [r7, #12]
 3801 00e6 41F82320 		str	r2, [r1, r3, lsl #2]
1193:main.c        ****             whichLinearSensor = (whichLinearSensor + 1) & 3;
 3802              		.loc 1 1193 0
 3803 00ea 094B     		ldr	r3, .L191
 3804 00ec 1B68     		ldr	r3, [r3]
 3805 00ee 0133     		adds	r3, r3, #1
 3806 00f0 03F00303 		and	r3, r3, #3
 3807 00f4 064A     		ldr	r2, .L191
 3808 00f6 1360     		str	r3, [r2]
1194:main.c        ****         }
1195:main.c        ****         scanPart = (scanPart + 1) & 1;
 3809              		.loc 1 1195 0
 3810 00f8 064B     		ldr	r3, .L191+4
 3811 00fa 1B68     		ldr	r3, [r3]
 3812 00fc 0133     		adds	r3, r3, #1
 3813 00fe 03F00103 		and	r3, r3, #1
 3814 0102 044A     		ldr	r2, .L191+4
 3815 0104 1360     		str	r3, [r2]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 90


1196:main.c        ****         //scanPart = 0;
1197:main.c        **** 
1198:main.c        **** }
 3816              		.loc 1 1198 0
 3817 0106 00BF     		nop
 3818 0108 1437     		adds	r7, r7, #20
 3819              		.cfi_def_cfa_offset 12
 3820 010a BD46     		mov	sp, r7
 3821              		.cfi_def_cfa_register 13
 3822              		@ sp needed
 3823 010c 90BD     		pop	{r4, r7, pc}
 3824              	.L192:
 3825 010e 00BF     		.align	2
 3826              	.L191:
 3827 0110 00000000 		.word	whichLinearSensor
 3828 0114 00000000 		.word	scanPart
 3829 0118 00000000 		.word	iVtherm
 3830 011c 0060EA46 		.word	1189765120
 3831 0120 00000000 		.word	linearPotValue32Bit
 3832              		.cfi_endproc
 3833              	.LFE81:
 3834              		.size	scanLinearResistor, .-scanLinearResistor
 3835              		.section	.text.DmaTxConfiguration,"ax",%progbits
 3836              		.align	2
 3837              		.global	DmaTxConfiguration
 3838              		.thumb
 3839              		.thumb_func
 3840              		.type	DmaTxConfiguration, %function
 3841              	DmaTxConfiguration:
 3842              	.LFB82:
1199:main.c        **** 
1200:main.c        **** void DmaTxConfiguration()
1201:main.c        **** {
 3843              		.loc 1 1201 0
 3844              		.cfi_startproc
 3845              		@ args = 0, pretend = 0, frame = 0
 3846              		@ frame_needed = 1, uses_anonymous_args = 0
 3847 0000 80B5     		push	{r7, lr}
 3848              		.cfi_def_cfa_offset 8
 3849              		.cfi_offset 7, -8
 3850              		.cfi_offset 14, -4
 3851 0002 00AF     		add	r7, sp, #0
 3852              		.cfi_def_cfa_register 7
1202:main.c        ****     /* Init DMA, 1 byte bursts, each burst requires a request */ 
1203:main.c        ****     txChannel = DMA_1_TX_DmaInitialize(DMA_TX_BYTES_PER_BURST, DMA_TX_REQUEST_PER_BURST, 
 3853              		.loc 1 1203 0
 3854 0004 4FF48043 		mov	r3, #16384
 3855 0008 41F6FF72 		movw	r2, #8191
 3856 000c 0121     		movs	r1, #1
 3857 000e 0120     		movs	r0, #1
 3858 0010 FFF7FEFF 		bl	DMA_1_TX_DmaInitialize
 3859 0014 0346     		mov	r3, r0
 3860 0016 1A46     		mov	r2, r3
 3861 0018 294B     		ldr	r3, .L194
 3862 001a 1A70     		strb	r2, [r3]
1204:main.c        ****                                         HI16(DMA_TX_SRC_BASE), HI16(DMA_TX_DST_BASE));
1205:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 91


1206:main.c        ****     txTD = CyDmaTdAllocate();
 3863              		.loc 1 1206 0
 3864 001c FFF7FEFF 		bl	CyDmaTdAllocate
 3865 0020 0346     		mov	r3, r0
 3866 0022 1A46     		mov	r2, r3
 3867 0024 274B     		ldr	r3, .L194+4
 3868 0026 1A70     		strb	r2, [r3]
1207:main.c        **** 
1208:main.c        ****     /* Configure this Td as follows:
1209:main.c        ****     *  - Increment the source address, but not the destination address   
1210:main.c        ****     */
1211:main.c        ****     CyDmaTdSetConfiguration(txTD, BUFFER_SIZE, CY_DMA_DISABLE_TD, TD_INC_SRC_ADR);
 3869              		.loc 1 1211 0
 3870 0028 264B     		ldr	r3, .L194+4
 3871 002a 1B78     		ldrb	r3, [r3]
 3872 002c D8B2     		uxtb	r0, r3
 3873 002e 0123     		movs	r3, #1
 3874 0030 FE22     		movs	r2, #254
 3875 0032 1021     		movs	r1, #16
 3876 0034 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1212:main.c        **** 
1213:main.c        ****     /* From the memory to the SPIM */
1214:main.c        ****     CyDmaTdSetAddress(txTD, LO16((uint32)txBuffer), LO16((uint32) SPIM_1_TXDATA_PTR));
 3877              		.loc 1 1214 0
 3878 0038 224B     		ldr	r3, .L194+4
 3879 003a 1B78     		ldrb	r3, [r3]
 3880 003c DBB2     		uxtb	r3, r3
 3881 003e 224A     		ldr	r2, .L194+8
 3882 0040 91B2     		uxth	r1, r2
 3883 0042 46F24442 		movw	r2, #25668
 3884 0046 1846     		mov	r0, r3
 3885 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
1215:main.c        ****     
1216:main.c        ****     /* Associate the TD with the channel */
1217:main.c        ****     CyDmaChSetInitialTd(txChannel, txTD); 
 3886              		.loc 1 1217 0
 3887 004c 1C4B     		ldr	r3, .L194
 3888 004e 1B78     		ldrb	r3, [r3]
 3889 0050 DAB2     		uxtb	r2, r3
 3890 0052 1C4B     		ldr	r3, .L194+4
 3891 0054 1B78     		ldrb	r3, [r3]
 3892 0056 DBB2     		uxtb	r3, r3
 3893 0058 1946     		mov	r1, r3
 3894 005a 1046     		mov	r0, r2
 3895 005c FFF7FEFF 		bl	CyDmaChSetInitialTd
1218:main.c        ****     
1219:main.c        ****     ////
1220:main.c        ****     
1221:main.c        ****         /* Init DMA, 1 byte bursts, each burst requires a request */ 
1222:main.c        ****     tx2Channel = DMA_2_TX_DmaInitialize(DMA_TX_BYTES_PER_BURST, DMA_TX_REQUEST_PER_BURST, 
 3896              		.loc 1 1222 0
 3897 0060 4FF48043 		mov	r3, #16384
 3898 0064 41F6FF72 		movw	r2, #8191
 3899 0068 0121     		movs	r1, #1
 3900 006a 0120     		movs	r0, #1
 3901 006c FFF7FEFF 		bl	DMA_2_TX_DmaInitialize
 3902 0070 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 92


 3903 0072 1A46     		mov	r2, r3
 3904 0074 154B     		ldr	r3, .L194+12
 3905 0076 1A70     		strb	r2, [r3]
1223:main.c        ****                                         HI16(DMA_TX_SRC_BASE), HI16(DMA_TX_DST_BASE));
1224:main.c        **** 
1225:main.c        ****     tx2TD = CyDmaTdAllocate();
 3906              		.loc 1 1225 0
 3907 0078 FFF7FEFF 		bl	CyDmaTdAllocate
 3908 007c 0346     		mov	r3, r0
 3909 007e 1A46     		mov	r2, r3
 3910 0080 134B     		ldr	r3, .L194+16
 3911 0082 1A70     		strb	r2, [r3]
1226:main.c        **** 
1227:main.c        ****     /* Configure this Td as follows:
1228:main.c        ****     *  - Increment the source address, but not the destination address   
1229:main.c        ****     */
1230:main.c        ****     CyDmaTdSetConfiguration(tx2TD, BUFFER_2_SIZE, CY_DMA_DISABLE_TD, TD_INC_SRC_ADR);
 3912              		.loc 1 1230 0
 3913 0084 124B     		ldr	r3, .L194+16
 3914 0086 1B78     		ldrb	r3, [r3]
 3915 0088 D8B2     		uxtb	r0, r3
 3916 008a 0123     		movs	r3, #1
 3917 008c FE22     		movs	r2, #254
 3918 008e 1021     		movs	r1, #16
 3919 0090 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1231:main.c        **** 
1232:main.c        ****     /* From the memory to the SPIM */
1233:main.c        ****     CyDmaTdSetAddress(tx2TD, LO16((uint32)tx2Buffer), LO16((uint32) SPIM_2_TXDATA_PTR));
 3920              		.loc 1 1233 0
 3921 0094 0E4B     		ldr	r3, .L194+16
 3922 0096 1B78     		ldrb	r3, [r3]
 3923 0098 DBB2     		uxtb	r3, r3
 3924 009a 0E4A     		ldr	r2, .L194+20
 3925 009c 91B2     		uxth	r1, r2
 3926 009e 46F24B42 		movw	r2, #25675
 3927 00a2 1846     		mov	r0, r3
 3928 00a4 FFF7FEFF 		bl	CyDmaTdSetAddress
1234:main.c        ****     
1235:main.c        ****     /* Associate the TD with the channel */
1236:main.c        ****     CyDmaChSetInitialTd(tx2Channel, tx2TD); 
 3929              		.loc 1 1236 0
 3930 00a8 084B     		ldr	r3, .L194+12
 3931 00aa 1B78     		ldrb	r3, [r3]
 3932 00ac DAB2     		uxtb	r2, r3
 3933 00ae 084B     		ldr	r3, .L194+16
 3934 00b0 1B78     		ldrb	r3, [r3]
 3935 00b2 DBB2     		uxtb	r3, r3
 3936 00b4 1946     		mov	r1, r3
 3937 00b6 1046     		mov	r0, r2
 3938 00b8 FFF7FEFF 		bl	CyDmaChSetInitialTd
1237:main.c        **** }    
 3939              		.loc 1 1237 0
 3940 00bc 00BF     		nop
 3941 00be 80BD     		pop	{r7, pc}
 3942              	.L195:
 3943              		.align	2
 3944              	.L194:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 93


 3945 00c0 00000000 		.word	txChannel
 3946 00c4 00000000 		.word	txTD
 3947 00c8 00000000 		.word	txBuffer
 3948 00cc 00000000 		.word	tx2Channel
 3949 00d0 00000000 		.word	tx2TD
 3950 00d4 00000000 		.word	tx2Buffer
 3951              		.cfi_endproc
 3952              	.LFE82:
 3953              		.size	DmaTxConfiguration, .-DmaTxConfiguration
 3954              		.section	.text.DmaRxConfiguration,"ax",%progbits
 3955              		.align	2
 3956              		.global	DmaRxConfiguration
 3957              		.thumb
 3958              		.thumb_func
 3959              		.type	DmaRxConfiguration, %function
 3960              	DmaRxConfiguration:
 3961              	.LFB83:
1238:main.c        **** 
1239:main.c        **** void DmaRxConfiguration()
1240:main.c        **** { 
 3962              		.loc 1 1240 0
 3963              		.cfi_startproc
 3964              		@ args = 0, pretend = 0, frame = 0
 3965              		@ frame_needed = 1, uses_anonymous_args = 0
 3966 0000 80B5     		push	{r7, lr}
 3967              		.cfi_def_cfa_offset 8
 3968              		.cfi_offset 7, -8
 3969              		.cfi_offset 14, -4
 3970 0002 00AF     		add	r7, sp, #0
 3971              		.cfi_def_cfa_register 7
1241:main.c        ****     /* Init DMA, 1 byte bursts, each burst requires a request */ 
1242:main.c        ****     rxChannel = DMA_1_RX_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 3972              		.loc 1 1242 0
 3973 0004 41F6FF73 		movw	r3, #8191
 3974 0008 4FF48042 		mov	r2, #16384
 3975 000c 0121     		movs	r1, #1
 3976 000e 0120     		movs	r0, #1
 3977 0010 FFF7FEFF 		bl	DMA_1_RX_DmaInitialize
 3978 0014 0346     		mov	r3, r0
 3979 0016 1A46     		mov	r2, r3
 3980 0018 294B     		ldr	r3, .L197
 3981 001a 1A70     		strb	r2, [r3]
1243:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1244:main.c        **** 
1245:main.c        ****     rxTD = CyDmaTdAllocate();
 3982              		.loc 1 1245 0
 3983 001c FFF7FEFF 		bl	CyDmaTdAllocate
 3984 0020 0346     		mov	r3, r0
 3985 0022 1A46     		mov	r2, r3
 3986 0024 274B     		ldr	r3, .L197+4
 3987 0026 1A70     		strb	r2, [r3]
1246:main.c        ****     
1247:main.c        ****     /* Configure this Td as follows:
1248:main.c        ****     *  - Increment the destination address, but not the source address
1249:main.c        ****     */
1250:main.c        ****     CyDmaTdSetConfiguration(rxTD, BUFFER_SIZE, CY_DMA_DISABLE_TD, TD_INC_DST_ADR);
 3988              		.loc 1 1250 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 94


 3989 0028 264B     		ldr	r3, .L197+4
 3990 002a 1B78     		ldrb	r3, [r3]
 3991 002c D8B2     		uxtb	r0, r3
 3992 002e 0223     		movs	r3, #2
 3993 0030 FE22     		movs	r2, #254
 3994 0032 1021     		movs	r1, #16
 3995 0034 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1251:main.c        **** 
1252:main.c        ****     /* From the SPIM to the memory */
1253:main.c        ****     CyDmaTdSetAddress(rxTD, LO16((uint32)SPIM_1_RXDATA_PTR), LO16((uint32)rxBuffer));
 3996              		.loc 1 1253 0
 3997 0038 224B     		ldr	r3, .L197+4
 3998 003a 1B78     		ldrb	r3, [r3]
 3999 003c DBB2     		uxtb	r3, r3
 4000 003e 224A     		ldr	r2, .L197+8
 4001 0040 92B2     		uxth	r2, r2
 4002 0042 46F25441 		movw	r1, #25684
 4003 0046 1846     		mov	r0, r3
 4004 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
1254:main.c        **** 
1255:main.c        ****     /* Associate the TD with the channel */
1256:main.c        ****     CyDmaChSetInitialTd(rxChannel, rxTD);
 4005              		.loc 1 1256 0
 4006 004c 1C4B     		ldr	r3, .L197
 4007 004e 1B78     		ldrb	r3, [r3]
 4008 0050 DAB2     		uxtb	r2, r3
 4009 0052 1C4B     		ldr	r3, .L197+4
 4010 0054 1B78     		ldrb	r3, [r3]
 4011 0056 DBB2     		uxtb	r3, r3
 4012 0058 1946     		mov	r1, r3
 4013 005a 1046     		mov	r0, r2
 4014 005c FFF7FEFF 		bl	CyDmaChSetInitialTd
1257:main.c        ****     
1258:main.c        ****     
1259:main.c        ****     
1260:main.c        ****     ///
1261:main.c        ****     
1262:main.c        ****         /* Init DMA, 1 byte bursts, each burst requires a request */ 
1263:main.c        ****     rx2Channel = DMA_2_RX_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 4015              		.loc 1 1263 0
 4016 0060 41F6FF73 		movw	r3, #8191
 4017 0064 4FF48042 		mov	r2, #16384
 4018 0068 0121     		movs	r1, #1
 4019 006a 0120     		movs	r0, #1
 4020 006c FFF7FEFF 		bl	DMA_2_RX_DmaInitialize
 4021 0070 0346     		mov	r3, r0
 4022 0072 1A46     		mov	r2, r3
 4023 0074 154B     		ldr	r3, .L197+12
 4024 0076 1A70     		strb	r2, [r3]
1264:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1265:main.c        **** 
1266:main.c        ****     rx2TD = CyDmaTdAllocate();
 4025              		.loc 1 1266 0
 4026 0078 FFF7FEFF 		bl	CyDmaTdAllocate
 4027 007c 0346     		mov	r3, r0
 4028 007e 1A46     		mov	r2, r3
 4029 0080 134B     		ldr	r3, .L197+16
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 95


 4030 0082 1A70     		strb	r2, [r3]
1267:main.c        ****     
1268:main.c        ****     /* Configure this Td as follows:
1269:main.c        ****     *  - Increment the destination address, but not the source address
1270:main.c        ****     */
1271:main.c        ****     CyDmaTdSetConfiguration(rx2TD, BUFFER_2_SIZE, CY_DMA_DISABLE_TD, TD_INC_DST_ADR);
 4031              		.loc 1 1271 0
 4032 0084 124B     		ldr	r3, .L197+16
 4033 0086 1B78     		ldrb	r3, [r3]
 4034 0088 D8B2     		uxtb	r0, r3
 4035 008a 0223     		movs	r3, #2
 4036 008c FE22     		movs	r2, #254
 4037 008e 1021     		movs	r1, #16
 4038 0090 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1272:main.c        **** 
1273:main.c        ****     /* From the SPIM to the memory */
1274:main.c        ****     CyDmaTdSetAddress(rx2TD, LO16((uint32)SPIM_2_RXDATA_PTR), LO16((uint32)rx2Buffer));
 4039              		.loc 1 1274 0
 4040 0094 0E4B     		ldr	r3, .L197+16
 4041 0096 1B78     		ldrb	r3, [r3]
 4042 0098 DBB2     		uxtb	r3, r3
 4043 009a 0E4A     		ldr	r2, .L197+20
 4044 009c 92B2     		uxth	r2, r2
 4045 009e 46F25B41 		movw	r1, #25691
 4046 00a2 1846     		mov	r0, r3
 4047 00a4 FFF7FEFF 		bl	CyDmaTdSetAddress
1275:main.c        **** 
1276:main.c        ****     /* Associate the TD with the channel */
1277:main.c        ****     CyDmaChSetInitialTd(rx2Channel, rx2TD);
 4048              		.loc 1 1277 0
 4049 00a8 084B     		ldr	r3, .L197+12
 4050 00aa 1B78     		ldrb	r3, [r3]
 4051 00ac DAB2     		uxtb	r2, r3
 4052 00ae 084B     		ldr	r3, .L197+16
 4053 00b0 1B78     		ldrb	r3, [r3]
 4054 00b2 DBB2     		uxtb	r3, r3
 4055 00b4 1946     		mov	r1, r3
 4056 00b6 1046     		mov	r0, r2
 4057 00b8 FFF7FEFF 		bl	CyDmaChSetInitialTd
1278:main.c        **** }
 4058              		.loc 1 1278 0
 4059 00bc 00BF     		nop
 4060 00be 80BD     		pop	{r7, pc}
 4061              	.L198:
 4062              		.align	2
 4063              	.L197:
 4064 00c0 00000000 		.word	rxChannel
 4065 00c4 00000000 		.word	rxTD
 4066 00c8 00000000 		.word	rxBuffer
 4067 00cc 00000000 		.word	rx2Channel
 4068 00d0 00000000 		.word	rx2TD
 4069 00d4 00000000 		.word	rx2Buffer
 4070              		.cfi_endproc
 4071              	.LFE83:
 4072              		.size	DmaRxConfiguration, .-DmaRxConfiguration
 4073              		.section	.text.I2C_MasterWriteBlocking,"ax",%progbits
 4074              		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 96


 4075              		.global	I2C_MasterWriteBlocking
 4076              		.thumb
 4077              		.thumb_func
 4078              		.type	I2C_MasterWriteBlocking, %function
 4079              	I2C_MasterWriteBlocking:
 4080              	.LFB84:
1279:main.c        **** 
1280:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode)
1281:main.c        **** {
 4081              		.loc 1 1281 0
 4082              		.cfi_startproc
 4083              		@ args = 0, pretend = 0, frame = 16
 4084              		@ frame_needed = 1, uses_anonymous_args = 0
 4085 0000 80B5     		push	{r7, lr}
 4086              		.cfi_def_cfa_offset 8
 4087              		.cfi_offset 7, -8
 4088              		.cfi_offset 14, -4
 4089 0002 84B0     		sub	sp, sp, #16
 4090              		.cfi_def_cfa_offset 24
 4091 0004 00AF     		add	r7, sp, #0
 4092              		.cfi_def_cfa_register 7
 4093 0006 0346     		mov	r3, r0
 4094 0008 FB71     		strb	r3, [r7, #7]
 4095 000a 0B46     		mov	r3, r1	@ movhi
 4096 000c BB80     		strh	r3, [r7, #4]	@ movhi
 4097 000e 1346     		mov	r3, r2
 4098 0010 BB71     		strb	r3, [r7, #6]
1282:main.c        ****     uint8 volatile status;
1283:main.c        ****     uint32_t timeout = 50000;
 4099              		.loc 1 1283 0
 4100 0012 4CF25033 		movw	r3, #50000
 4101 0016 FB60     		str	r3, [r7, #12]
1284:main.c        ****     status = I2C_1_MasterClearStatus();
 4102              		.loc 1 1284 0
 4103 0018 FFF7FEFF 		bl	I2C_1_MasterClearStatus
 4104 001c 0346     		mov	r3, r0
 4105 001e FB72     		strb	r3, [r7, #11]
1285:main.c        ****     if(!(status & I2C_1_MSTAT_ERR_XFER))
 4106              		.loc 1 1285 0
 4107 0020 FB7A     		ldrb	r3, [r7, #11]
 4108 0022 DBB2     		uxtb	r3, r3
 4109 0024 5BB2     		sxtb	r3, r3
 4110 0026 002B     		cmp	r3, #0
 4111 0028 29DB     		blt	.L200
1286:main.c        ****     {
1287:main.c        ****         status = I2C_1_MasterWriteBuf(i2CAddr, (uint8 *)&I2Cbuff1, nbytes,
 4112              		.loc 1 1287 0
 4113 002a BB88     		ldrh	r3, [r7, #4]	@ movhi
 4114 002c DAB2     		uxtb	r2, r3
 4115 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4116 0030 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4117 0032 1649     		ldr	r1, .L205
 4118 0034 FFF7FEFF 		bl	I2C_1_MasterWriteBuf
 4119 0038 0346     		mov	r3, r0
 4120 003a FB72     		strb	r3, [r7, #11]
1288:main.c        ****                                      mode);
1289:main.c        ****         if(status == I2C_1_MSTR_NO_ERROR)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 97


 4121              		.loc 1 1289 0
 4122 003c FB7A     		ldrb	r3, [r7, #11]
 4123 003e DBB2     		uxtb	r3, r3
 4124 0040 002B     		cmp	r3, #0
 4125 0042 1AD1     		bne	.L201
 4126              	.L203:
1290:main.c        ****         {
1291:main.c        ****             /* wait for write complete and no error */
1292:main.c        ****             do
1293:main.c        ****             {
1294:main.c        ****                 status = I2C_1_MasterStatus();
 4127              		.loc 1 1294 0
 4128 0044 FFF7FEFF 		bl	I2C_1_MasterStatus
 4129 0048 0346     		mov	r3, r0
 4130 004a FB72     		strb	r3, [r7, #11]
1295:main.c        ****                 timeout--;
 4131              		.loc 1 1295 0
 4132 004c FB68     		ldr	r3, [r7, #12]
 4133 004e 013B     		subs	r3, r3, #1
 4134 0050 FB60     		str	r3, [r7, #12]
1296:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 4135              		.loc 1 1296 0
 4136 0052 FB7A     		ldrb	r3, [r7, #11]
1297:main.c        ****                 {
1298:main.c        ****                     //I2C_reset();
1299:main.c        ****                 }
1300:main.c        ****                 if (timeout == 0)
 4137              		.loc 1 1300 0
 4138 0054 FB68     		ldr	r3, [r7, #12]
 4139 0056 002B     		cmp	r3, #0
 4140 0058 01D1     		bne	.L202
1301:main.c        ****                 {
1302:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 4141              		.loc 1 1302 0
 4142 005a 8023     		movs	r3, #128
 4143 005c FB72     		strb	r3, [r7, #11]
 4144              	.L202:
1303:main.c        ****                     //I2C_reset();
1304:main.c        ****                 }
1305:main.c        ****                 /*
1306:main.c        ****                 if (status == 0)
1307:main.c        ****                 {
1308:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
1309:main.c        ****                     I2C_reset();
1310:main.c        ****                 }
1311:main.c        ****                 */
1312:main.c        ****             } while(((status & (I2C_1_MSTAT_WR_CMPLT | I2C_1_MSTAT_ERR_XFER)) == 0u) && (status != 
 4145              		.loc 1 1312 0
 4146 005e FB7A     		ldrb	r3, [r7, #11]
 4147 0060 DBB2     		uxtb	r3, r3
 4148 0062 03F08203 		and	r3, r3, #130
 4149 0066 002B     		cmp	r3, #0
 4150 0068 09D1     		bne	.L200
 4151              		.loc 1 1312 0 is_stmt 0 discriminator 1
 4152 006a FB7A     		ldrb	r3, [r7, #11]
 4153 006c DBB2     		uxtb	r3, r3
 4154 006e 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 98


 4155 0070 05D0     		beq	.L200
 4156              		.loc 1 1312 0 discriminator 2
 4157 0072 FB68     		ldr	r3, [r7, #12]
 4158 0074 002B     		cmp	r3, #0
 4159 0076 E5D1     		bne	.L203
 4160 0078 01E0     		b	.L200
 4161              	.L201:
1313:main.c        ****         }
1314:main.c        ****         else
1315:main.c        ****         {
1316:main.c        ****             /* translate from I2CM_MasterWriteBuf() error output to
1317:main.c        ****             *  I2CM_MasterStatus() error output */
1318:main.c        ****             status = I2C_1_MSTAT_ERR_XFER;
 4162              		.loc 1 1318 0 is_stmt 1
 4163 007a 8023     		movs	r3, #128
 4164 007c FB72     		strb	r3, [r7, #11]
 4165              	.L200:
1319:main.c        ****             //I2C_reset();
1320:main.c        ****         } 
1321:main.c        ****     }  
1322:main.c        ****     return status;
 4166              		.loc 1 1322 0
 4167 007e FB7A     		ldrb	r3, [r7, #11]
 4168 0080 DBB2     		uxtb	r3, r3
1323:main.c        **** }
 4169              		.loc 1 1323 0
 4170 0082 1846     		mov	r0, r3
 4171 0084 1037     		adds	r7, r7, #16
 4172              		.cfi_def_cfa_offset 8
 4173 0086 BD46     		mov	sp, r7
 4174              		.cfi_def_cfa_register 13
 4175              		@ sp needed
 4176 0088 80BD     		pop	{r7, pc}
 4177              	.L206:
 4178 008a 00BF     		.align	2
 4179              	.L205:
 4180 008c 00000000 		.word	I2Cbuff1
 4181              		.cfi_endproc
 4182              	.LFE84:
 4183              		.size	I2C_MasterWriteBlocking, .-I2C_MasterWriteBlocking
 4184              		.global	counter2
 4185              		.data
 4186 0062 0000     		.align	2
 4187              		.type	counter2, %object
 4188              		.size	counter2, 4
 4189              	counter2:
 4190 0064 01000000 		.word	1
 4191              		.section	.text.handleNotes,"ax",%progbits
 4192              		.align	2
 4193              		.global	handleNotes
 4194              		.thumb
 4195              		.thumb_func
 4196              		.type	handleNotes, %function
 4197              	handleNotes:
 4198              	.LFB85:
1324:main.c        **** 
1325:main.c        **** //velocity comes in as a 16 bit number from 0-65*** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 99


1326:main.c        **** //not in decibels, raw amplitude value
1327:main.c        **** int counter2 = 1;
1328:main.c        **** void handleNotes(int note, int velocity, int string)
1329:main.c        **** {
 4199              		.loc 1 1329 0
 4200              		.cfi_startproc
 4201              		@ args = 0, pretend = 0, frame = 32
 4202              		@ frame_needed = 1, uses_anonymous_args = 0
 4203 0000 90B5     		push	{r4, r7, lr}
 4204              		.cfi_def_cfa_offset 12
 4205              		.cfi_offset 4, -12
 4206              		.cfi_offset 7, -8
 4207              		.cfi_offset 14, -4
 4208 0002 89B0     		sub	sp, sp, #36
 4209              		.cfi_def_cfa_offset 48
 4210 0004 00AF     		add	r7, sp, #0
 4211              		.cfi_def_cfa_register 7
 4212 0006 F860     		str	r0, [r7, #12]
 4213 0008 B960     		str	r1, [r7, #8]
 4214 000a 7A60     		str	r2, [r7, #4]
1330:main.c        ****     //static int counter = 1;
1331:main.c        ****     //velocity = (counter2 * 6553);
1332:main.c        ****     //counter2 = (counter2 + 1) % 10;
1333:main.c        ****     if (velocity > 0)
 4215              		.loc 1 1333 0
 4216 000c BB68     		ldr	r3, [r7, #8]
 4217 000e 002B     		cmp	r3, #0
 4218 0010 25DD     		ble	.L208
 4219              	.LBB14:
1334:main.c        ****     {
1335:main.c        ****         //velocity = (((sqrtf((float)velocity) * 0.00001525878903f) - .0239372430f) * 130.114584436
1336:main.c        ****         float tempVel = (float)velocity;
 4220              		.loc 1 1336 0
 4221 0012 B868     		ldr	r0, [r7, #8]
 4222 0014 FFF7FEFF 		bl	__aeabi_i2f
 4223 0018 0346     		mov	r3, r0
 4224 001a 3B61     		str	r3, [r7, #16]	@ float
1337:main.c        ****         tempVel = tempVel * 0.00001525878903f;
 4225              		.loc 1 1337 0
 4226 001c 4FF05E51 		mov	r1, #931135488
 4227 0020 3869     		ldr	r0, [r7, #16]	@ float
 4228 0022 FFF7FEFF 		bl	__aeabi_fmul
 4229 0026 0346     		mov	r3, r0
 4230 0028 3B61     		str	r3, [r7, #16]	@ float
1338:main.c        ****         tempVel = sqrtf(tempVel);
 4231              		.loc 1 1338 0
 4232 002a 3869     		ldr	r0, [r7, #16]	@ float
 4233 002c FFF7FEFF 		bl	sqrtf
 4234 0030 3861     		str	r0, [r7, #16]	@ float
1339:main.c        ****         tempVel = tempVel - 0.0239372430f;
 4235              		.loc 1 1339 0
 4236 0032 8049     		ldr	r1, .L223
 4237 0034 3869     		ldr	r0, [r7, #16]	@ float
 4238 0036 FFF7FEFF 		bl	__aeabi_fsub
 4239 003a 0346     		mov	r3, r0
 4240 003c 3B61     		str	r3, [r7, #16]	@ float
1340:main.c        ****         tempVel = tempVel * 130.114584436252734f;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 100


 4241              		.loc 1 1340 0
 4242 003e 7E49     		ldr	r1, .L223+4
 4243 0040 3869     		ldr	r0, [r7, #16]	@ float
 4244 0042 FFF7FEFF 		bl	__aeabi_fmul
 4245 0046 0346     		mov	r3, r0
 4246 0048 3B61     		str	r3, [r7, #16]	@ float
1341:main.c        ****         velocity = (int)tempVel;
 4247              		.loc 1 1341 0
 4248 004a 3869     		ldr	r0, [r7, #16]	@ float
 4249 004c FFF7FEFF 		bl	__aeabi_f2iz
 4250 0050 0346     		mov	r3, r0
 4251 0052 BB60     		str	r3, [r7, #8]
1342:main.c        ****         
1343:main.c        **** 
1344:main.c        ****         if (velocity > 127)
 4252              		.loc 1 1344 0
 4253 0054 BB68     		ldr	r3, [r7, #8]
 4254 0056 7F2B     		cmp	r3, #127
 4255 0058 01DD     		ble	.L208
1345:main.c        ****         {
1346:main.c        ****             velocity = 127;
 4256              		.loc 1 1346 0
 4257 005a 7F23     		movs	r3, #127
 4258 005c BB60     		str	r3, [r7, #8]
 4259              	.L208:
 4260              	.LBE14:
1347:main.c        ****         }
1348:main.c        ****         
1349:main.c        ****     }
1350:main.c        ****     if (polyMode)
 4261              		.loc 1 1350 0
 4262 005e 774B     		ldr	r3, .L223+8
 4263 0060 1B68     		ldr	r3, [r3]
 4264 0062 002B     		cmp	r3, #0
 4265 0064 07D0     		beq	.L209
1351:main.c        ****     {
1352:main.c        ****         sendMIDINoteOn(note, velocity, string+1);
 4266              		.loc 1 1352 0
 4267 0066 7B68     		ldr	r3, [r7, #4]
 4268 0068 0133     		adds	r3, r3, #1
 4269 006a 1A46     		mov	r2, r3
 4270 006c B968     		ldr	r1, [r7, #8]
 4271 006e F868     		ldr	r0, [r7, #12]
 4272 0070 FFF7FEFF 		bl	sendMIDINoteOn
1353:main.c        ****     }
1354:main.c        ****     else
1355:main.c        ****     {
1356:main.c        ****         int loudestSoundingNote = 0;
1357:main.c        ****         if (velocity > 0)
1358:main.c        ****         {
1359:main.c        ****             // find the loudest currently sounding note
1360:main.c        ****             for (int i = 0; i < 4; i++)
1361:main.c        ****             {
1362:main.c        ****                 if (stringStates[i][1] > loudestSoundingNote)
1363:main.c        ****                 {
1364:main.c        ****                     loudestSoundingNote = stringStates[i][1];
1365:main.c        ****                     loudestString = i;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 101


1366:main.c        ****                 }
1367:main.c        ****             }
1368:main.c        ****             //make sure if there is a sounding note that this one is not much lower velocity
1369:main.c        ****             //(would maybe mean this is just sympathetic bridge resonance and shouldn't interrupt t
1370:main.c        ****             // maybe need more complexity in time since attack? // or maybe do active suppression i
1371:main.c        ****             if ((velocity >= (loudestSoundingNote - 25)) || (velocity > 35))
1372:main.c        ****             {
1373:main.c        ****                 for (int i = 0; i < 4; i++)
1374:main.c        ****                 {
1375:main.c        ****                     if (stringStates[i][0] >= 0)
1376:main.c        ****                     {
1377:main.c        **** 
1378:main.c        ****                         sendMIDINoteOn(stringStates[i][0], 0, 0);
1379:main.c        ****                         stringStates[i][0] = -1;
1380:main.c        ****                         stringStates[i][1] = 0;
1381:main.c        ****                     }
1382:main.c        ****                     openStringCount[i] = 10;
1383:main.c        ****                 }
1384:main.c        ****                 timeSinceLastAttack = 0;
1385:main.c        ****                 stringStates[string][0] = note;
1386:main.c        ****                 stringStates[string][1] = velocity;
1387:main.c        ****                  pitchFreeze[string] = 0;
1388:main.c        ****                 sendMIDINoteOn(note, velocity, 0);
1389:main.c        ****                  LHMuteCounter[i] = 0;
1390:main.c        ****                  LHMute[i] = 0;
1391:main.c        ****             }
1392:main.c        ****             else
1393:main.c        ****             {
1394:main.c        ****                 skippedNotes[skipPointer][0] = note;
1395:main.c        ****                 skippedNotes[skipPointer][1] = velocity;
1396:main.c        ****                 skippedNotes[skipPointer][2] = loudestSoundingNote;
1397:main.c        ****                 skippedNotes[skipPointer][3] = loudestString;
1398:main.c        ****                 skippedNotes[skipPointer][4] = string;
1399:main.c        ****                 skipPointer = (skipPointer + 1) & 31;
1400:main.c        ****             }
1401:main.c        ****             #if 0
1402:main.c        ****             else if (timeSinceLastAttack > 500)
1403:main.c        ****             {
1404:main.c        ****                 for (int i = 0; i < 4; i++)
1405:main.c        ****                 {
1406:main.c        ****                     if (stringStates[i][0] >= 0)
1407:main.c        ****                     {
1408:main.c        **** 
1409:main.c        ****                         sendMIDINoteOn(stringStates[i][0], 0, 0);
1410:main.c        ****                         stringStates[i][0] = -1;
1411:main.c        ****                     }
1412:main.c        ****                     openStringCount[i] = 10;
1413:main.c        ****                 }
1414:main.c        ****                 timeSinceLastAttack = 0;
1415:main.c        ****                 stringStates[string][0] = note;
1416:main.c        ****                 stringStates[string][1] = velocity;
1417:main.c        ****                  pitchFreeze[string] = 0;
1418:main.c        ****                 sendMIDINoteOn(note, velocity, 0);
1419:main.c        ****             
1420:main.c        ****             }
1421:main.c        ****             #endif
1422:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 102


1423:main.c        ****         else
1424:main.c        ****         {
1425:main.c        ****             if (stringStates[string][0] > 0)
1426:main.c        ****             {
1427:main.c        ****                 sendMIDINoteOn(stringStates[string][0], 0, 0);
1428:main.c        ****             }
1429:main.c        ****             stringStates[string][0] = -1;
1430:main.c        ****             stringStates[string][1] = 0;
1431:main.c        ****             pitchFreeze[string] = 0;
1432:main.c        ****         }
1433:main.c        ****     }       
1434:main.c        **** }...
 4273              		.loc 1 1434 0
 4274 0074 DAE0     		b	.L222
 4275              	.L209:
 4276              	.LBB15:
1356:main.c        ****         int loudestSoundingNote = 0;
 4277              		.loc 1 1356 0
 4278 0076 0023     		movs	r3, #0
 4279 0078 FB61     		str	r3, [r7, #28]
1357:main.c        ****         if (velocity > 0)
 4280              		.loc 1 1357 0
 4281 007a BB68     		ldr	r3, [r7, #8]
 4282 007c 002B     		cmp	r3, #0
 4283 007e 40F3B580 		ble	.L211
 4284              	.LBB16:
1360:main.c        ****             for (int i = 0; i < 4; i++)
 4285              		.loc 1 1360 0
 4286 0082 0023     		movs	r3, #0
 4287 0084 BB61     		str	r3, [r7, #24]
 4288 0086 13E0     		b	.L212
 4289              	.L214:
1362:main.c        ****                 if (stringStates[i][1] > loudestSoundingNote)
 4290              		.loc 1 1362 0
 4291 0088 6D4A     		ldr	r2, .L223+12
 4292 008a BB69     		ldr	r3, [r7, #24]
 4293 008c DB00     		lsls	r3, r3, #3
 4294 008e 1344     		add	r3, r3, r2
 4295 0090 5A68     		ldr	r2, [r3, #4]
 4296 0092 FB69     		ldr	r3, [r7, #28]
 4297 0094 9A42     		cmp	r2, r3
 4298 0096 08DD     		ble	.L213
1364:main.c        ****                     loudestSoundingNote = stringStates[i][1];
 4299              		.loc 1 1364 0
 4300 0098 694A     		ldr	r2, .L223+12
 4301 009a BB69     		ldr	r3, [r7, #24]
 4302 009c DB00     		lsls	r3, r3, #3
 4303 009e 1344     		add	r3, r3, r2
 4304 00a0 5B68     		ldr	r3, [r3, #4]
 4305 00a2 FB61     		str	r3, [r7, #28]
1365:main.c        ****                     loudestString = i;
 4306              		.loc 1 1365 0
 4307 00a4 674A     		ldr	r2, .L223+16
 4308 00a6 BB69     		ldr	r3, [r7, #24]
 4309 00a8 1360     		str	r3, [r2]
 4310              	.L213:
1360:main.c        ****             for (int i = 0; i < 4; i++)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 103


 4311              		.loc 1 1360 0 discriminator 2
 4312 00aa BB69     		ldr	r3, [r7, #24]
 4313 00ac 0133     		adds	r3, r3, #1
 4314 00ae BB61     		str	r3, [r7, #24]
 4315              	.L212:
1360:main.c        ****             for (int i = 0; i < 4; i++)
 4316              		.loc 1 1360 0 is_stmt 0 discriminator 1
 4317 00b0 BB69     		ldr	r3, [r7, #24]
 4318 00b2 032B     		cmp	r3, #3
 4319 00b4 E8DD     		ble	.L214
 4320              	.LBE16:
1371:main.c        ****             if ((velocity >= (loudestSoundingNote - 25)) || (velocity > 35))
 4321              		.loc 1 1371 0 is_stmt 1
 4322 00b6 FB69     		ldr	r3, [r7, #28]
 4323 00b8 A3F11902 		sub	r2, r3, #25
 4324 00bc BB68     		ldr	r3, [r7, #8]
 4325 00be 9A42     		cmp	r2, r3
 4326 00c0 02DD     		ble	.L215
1371:main.c        ****             if ((velocity >= (loudestSoundingNote - 25)) || (velocity > 35))
 4327              		.loc 1 1371 0 is_stmt 0 discriminator 1
 4328 00c2 BB68     		ldr	r3, [r7, #8]
 4329 00c4 232B     		cmp	r3, #35
 4330 00c6 52DD     		ble	.L216
 4331              	.L215:
 4332              	.LBB17:
1373:main.c        ****                 for (int i = 0; i < 4; i++)
 4333              		.loc 1 1373 0 is_stmt 1
 4334 00c8 0023     		movs	r3, #0
 4335 00ca 7B61     		str	r3, [r7, #20]
 4336 00cc 22E0     		b	.L217
 4337              	.L219:
1375:main.c        ****                     if (stringStates[i][0] >= 0)
 4338              		.loc 1 1375 0
 4339 00ce 5C4A     		ldr	r2, .L223+12
 4340 00d0 7B69     		ldr	r3, [r7, #20]
 4341 00d2 52F83330 		ldr	r3, [r2, r3, lsl #3]
 4342 00d6 002B     		cmp	r3, #0
 4343 00d8 14DB     		blt	.L218
1378:main.c        ****                         sendMIDINoteOn(stringStates[i][0], 0, 0);
 4344              		.loc 1 1378 0
 4345 00da 594A     		ldr	r2, .L223+12
 4346 00dc 7B69     		ldr	r3, [r7, #20]
 4347 00de 52F83330 		ldr	r3, [r2, r3, lsl #3]
 4348 00e2 0022     		movs	r2, #0
 4349 00e4 0021     		movs	r1, #0
 4350 00e6 1846     		mov	r0, r3
 4351 00e8 FFF7FEFF 		bl	sendMIDINoteOn
1379:main.c        ****                         stringStates[i][0] = -1;
 4352              		.loc 1 1379 0
 4353 00ec 544A     		ldr	r2, .L223+12
 4354 00ee 7B69     		ldr	r3, [r7, #20]
 4355 00f0 4FF0FF31 		mov	r1, #-1
 4356 00f4 42F83310 		str	r1, [r2, r3, lsl #3]
1380:main.c        ****                         stringStates[i][1] = 0;
 4357              		.loc 1 1380 0
 4358 00f8 514A     		ldr	r2, .L223+12
 4359 00fa 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 104


 4360 00fc DB00     		lsls	r3, r3, #3
 4361 00fe 1344     		add	r3, r3, r2
 4362 0100 0022     		movs	r2, #0
 4363 0102 5A60     		str	r2, [r3, #4]
 4364              	.L218:
1382:main.c        ****                     openStringCount[i] = 10;
 4365              		.loc 1 1382 0 discriminator 2
 4366 0104 504A     		ldr	r2, .L223+20
 4367 0106 7B69     		ldr	r3, [r7, #20]
 4368 0108 0A21     		movs	r1, #10
 4369 010a 42F82310 		str	r1, [r2, r3, lsl #2]
1373:main.c        ****                 for (int i = 0; i < 4; i++)
 4370              		.loc 1 1373 0 discriminator 2
 4371 010e 7B69     		ldr	r3, [r7, #20]
 4372 0110 0133     		adds	r3, r3, #1
 4373 0112 7B61     		str	r3, [r7, #20]
 4374              	.L217:
1373:main.c        ****                 for (int i = 0; i < 4; i++)
 4375              		.loc 1 1373 0 is_stmt 0 discriminator 1
 4376 0114 7B69     		ldr	r3, [r7, #20]
 4377 0116 032B     		cmp	r3, #3
 4378 0118 D9DD     		ble	.L219
 4379              	.LBE17:
1384:main.c        ****                 timeSinceLastAttack = 0;
 4380              		.loc 1 1384 0 is_stmt 1
 4381 011a 4C4A     		ldr	r2, .L223+24
 4382 011c 4FF00003 		mov	r3, #0
 4383 0120 4FF00004 		mov	r4, #0
 4384 0124 C2E90034 		strd	r3, [r2]
1385:main.c        ****                 stringStates[string][0] = note;
 4385              		.loc 1 1385 0
 4386 0128 4549     		ldr	r1, .L223+12
 4387 012a 7B68     		ldr	r3, [r7, #4]
 4388 012c FA68     		ldr	r2, [r7, #12]
 4389 012e 41F83320 		str	r2, [r1, r3, lsl #3]
1386:main.c        ****                 stringStates[string][1] = velocity;
 4390              		.loc 1 1386 0
 4391 0132 434A     		ldr	r2, .L223+12
 4392 0134 7B68     		ldr	r3, [r7, #4]
 4393 0136 DB00     		lsls	r3, r3, #3
 4394 0138 1344     		add	r3, r3, r2
 4395 013a BA68     		ldr	r2, [r7, #8]
 4396 013c 5A60     		str	r2, [r3, #4]
1387:main.c        ****                  pitchFreeze[string] = 0;
 4397              		.loc 1 1387 0
 4398 013e 444A     		ldr	r2, .L223+28
 4399 0140 7B68     		ldr	r3, [r7, #4]
 4400 0142 1344     		add	r3, r3, r2
 4401 0144 0022     		movs	r2, #0
 4402 0146 1A70     		strb	r2, [r3]
1388:main.c        ****                 sendMIDINoteOn(note, velocity, 0);
 4403              		.loc 1 1388 0
 4404 0148 0022     		movs	r2, #0
 4405 014a B968     		ldr	r1, [r7, #8]
 4406 014c F868     		ldr	r0, [r7, #12]
 4407 014e FFF7FEFF 		bl	sendMIDINoteOn
1389:main.c        ****                  LHMuteCounter[i] = 0;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 105


 4408              		.loc 1 1389 0
 4409 0152 404B     		ldr	r3, .L223+32
 4410 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4411 0156 1946     		mov	r1, r3
 4412 0158 3F4B     		ldr	r3, .L223+36
 4413 015a 0022     		movs	r2, #0
 4414 015c 43F82120 		str	r2, [r3, r1, lsl #2]
1390:main.c        ****                  LHMute[i] = 0;
 4415              		.loc 1 1390 0
 4416 0160 3C4B     		ldr	r3, .L223+32
 4417 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4418 0164 1A46     		mov	r2, r3
 4419 0166 3D4B     		ldr	r3, .L223+40
 4420 0168 0021     		movs	r1, #0
 4421 016a 9954     		strb	r1, [r3, r2]
 4422              	.LBE15:
 4423              		.loc 1 1434 0
 4424 016c 5EE0     		b	.L222
 4425              	.L216:
 4426              	.LBB18:
1394:main.c        ****                 skippedNotes[skipPointer][0] = note;
 4427              		.loc 1 1394 0
 4428 016e 3C4B     		ldr	r3, .L223+44
 4429 0170 1A68     		ldr	r2, [r3]
 4430 0172 3C49     		ldr	r1, .L223+48
 4431 0174 1346     		mov	r3, r2
 4432 0176 9B00     		lsls	r3, r3, #2
 4433 0178 1344     		add	r3, r3, r2
 4434 017a 9B00     		lsls	r3, r3, #2
 4435 017c 0B44     		add	r3, r3, r1
 4436 017e FA68     		ldr	r2, [r7, #12]
 4437 0180 1A60     		str	r2, [r3]
1395:main.c        ****                 skippedNotes[skipPointer][1] = velocity;
 4438              		.loc 1 1395 0
 4439 0182 374B     		ldr	r3, .L223+44
 4440 0184 1A68     		ldr	r2, [r3]
 4441 0186 3749     		ldr	r1, .L223+48
 4442 0188 1346     		mov	r3, r2
 4443 018a 9B00     		lsls	r3, r3, #2
 4444 018c 1344     		add	r3, r3, r2
 4445 018e 9B00     		lsls	r3, r3, #2
 4446 0190 0B44     		add	r3, r3, r1
 4447 0192 0433     		adds	r3, r3, #4
 4448 0194 BA68     		ldr	r2, [r7, #8]
 4449 0196 1A60     		str	r2, [r3]
1396:main.c        ****                 skippedNotes[skipPointer][2] = loudestSoundingNote;
 4450              		.loc 1 1396 0
 4451 0198 314B     		ldr	r3, .L223+44
 4452 019a 1A68     		ldr	r2, [r3]
 4453 019c 3149     		ldr	r1, .L223+48
 4454 019e 1346     		mov	r3, r2
 4455 01a0 9B00     		lsls	r3, r3, #2
 4456 01a2 1344     		add	r3, r3, r2
 4457 01a4 9B00     		lsls	r3, r3, #2
 4458 01a6 0B44     		add	r3, r3, r1
 4459 01a8 0833     		adds	r3, r3, #8
 4460 01aa FA69     		ldr	r2, [r7, #28]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 106


 4461 01ac 1A60     		str	r2, [r3]
1397:main.c        ****                 skippedNotes[skipPointer][3] = loudestString;
 4462              		.loc 1 1397 0
 4463 01ae 2C4B     		ldr	r3, .L223+44
 4464 01b0 1A68     		ldr	r2, [r3]
 4465 01b2 244B     		ldr	r3, .L223+16
 4466 01b4 1968     		ldr	r1, [r3]
 4467 01b6 2B48     		ldr	r0, .L223+48
 4468 01b8 1346     		mov	r3, r2
 4469 01ba 9B00     		lsls	r3, r3, #2
 4470 01bc 1344     		add	r3, r3, r2
 4471 01be 9B00     		lsls	r3, r3, #2
 4472 01c0 0344     		add	r3, r3, r0
 4473 01c2 0C33     		adds	r3, r3, #12
 4474 01c4 1960     		str	r1, [r3]
1398:main.c        ****                 skippedNotes[skipPointer][4] = string;
 4475              		.loc 1 1398 0
 4476 01c6 264B     		ldr	r3, .L223+44
 4477 01c8 1A68     		ldr	r2, [r3]
 4478 01ca 2649     		ldr	r1, .L223+48
 4479 01cc 1346     		mov	r3, r2
 4480 01ce 9B00     		lsls	r3, r3, #2
 4481 01d0 1344     		add	r3, r3, r2
 4482 01d2 9B00     		lsls	r3, r3, #2
 4483 01d4 0B44     		add	r3, r3, r1
 4484 01d6 1033     		adds	r3, r3, #16
 4485 01d8 7A68     		ldr	r2, [r7, #4]
 4486 01da 1A60     		str	r2, [r3]
1399:main.c        ****                 skipPointer = (skipPointer + 1) & 31;
 4487              		.loc 1 1399 0
 4488 01dc 204B     		ldr	r3, .L223+44
 4489 01de 1B68     		ldr	r3, [r3]
 4490 01e0 0133     		adds	r3, r3, #1
 4491 01e2 03F01F03 		and	r3, r3, #31
 4492 01e6 1E4A     		ldr	r2, .L223+44
 4493 01e8 1360     		str	r3, [r2]
 4494              	.LBE18:
 4495              		.loc 1 1434 0
 4496 01ea 1FE0     		b	.L222
 4497              	.L211:
 4498              	.LBB19:
1425:main.c        ****             if (stringStates[string][0] > 0)
 4499              		.loc 1 1425 0
 4500 01ec 144A     		ldr	r2, .L223+12
 4501 01ee 7B68     		ldr	r3, [r7, #4]
 4502 01f0 52F83330 		ldr	r3, [r2, r3, lsl #3]
 4503 01f4 002B     		cmp	r3, #0
 4504 01f6 08DD     		ble	.L221
1427:main.c        ****                 sendMIDINoteOn(stringStates[string][0], 0, 0);
 4505              		.loc 1 1427 0
 4506 01f8 114A     		ldr	r2, .L223+12
 4507 01fa 7B68     		ldr	r3, [r7, #4]
 4508 01fc 52F83330 		ldr	r3, [r2, r3, lsl #3]
 4509 0200 0022     		movs	r2, #0
 4510 0202 0021     		movs	r1, #0
 4511 0204 1846     		mov	r0, r3
 4512 0206 FFF7FEFF 		bl	sendMIDINoteOn
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 107


 4513              	.L221:
1429:main.c        ****             stringStates[string][0] = -1;
 4514              		.loc 1 1429 0
 4515 020a 0D4A     		ldr	r2, .L223+12
 4516 020c 7B68     		ldr	r3, [r7, #4]
 4517 020e 4FF0FF31 		mov	r1, #-1
 4518 0212 42F83310 		str	r1, [r2, r3, lsl #3]
1430:main.c        ****             stringStates[string][1] = 0;
 4519              		.loc 1 1430 0
 4520 0216 0A4A     		ldr	r2, .L223+12
 4521 0218 7B68     		ldr	r3, [r7, #4]
 4522 021a DB00     		lsls	r3, r3, #3
 4523 021c 1344     		add	r3, r3, r2
 4524 021e 0022     		movs	r2, #0
 4525 0220 5A60     		str	r2, [r3, #4]
1431:main.c        ****             pitchFreeze[string] = 0;
 4526              		.loc 1 1431 0
 4527 0222 0B4A     		ldr	r2, .L223+28
 4528 0224 7B68     		ldr	r3, [r7, #4]
 4529 0226 1344     		add	r3, r3, r2
 4530 0228 0022     		movs	r2, #0
 4531 022a 1A70     		strb	r2, [r3]
 4532              	.L222:
 4533              	.LBE19:
 4534              		.loc 1 1434 0
 4535 022c 00BF     		nop
 4536 022e 2437     		adds	r7, r7, #36
 4537              		.cfi_def_cfa_offset 12
 4538 0230 BD46     		mov	sp, r7
 4539              		.cfi_def_cfa_register 13
 4540              		@ sp needed
 4541 0232 90BD     		pop	{r4, r7, pc}
 4542              	.L224:
 4543              		.align	2
 4544              	.L223:
 4545 0234 0918C43C 		.word	1019484169
 4546 0238 551D0243 		.word	1124212053
 4547 023c 00000000 		.word	polyMode
 4548 0240 00000000 		.word	stringStates
 4549 0244 00000000 		.word	loudestString
 4550 0248 00000000 		.word	openStringCount
 4551 024c 00000000 		.word	timeSinceLastAttack
 4552 0250 00000000 		.word	pitchFreeze
 4553 0254 00000000 		.word	i
 4554 0258 00000000 		.word	LHMuteCounter
 4555 025c 00000000 		.word	LHMute
 4556 0260 00000000 		.word	skipPointer
 4557 0264 00000000 		.word	skippedNotes
 4558              		.cfi_endproc
 4559              	.LFE85:
 4560              		.size	handleNotes, .-handleNotes
 4561              		.text
 4562              	.Letext0:
 4563              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 4564              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 4565              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 4566              		.file 5 "Generated_Source\\PSoC5/cy_em_eeprom.h"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 108


 4567              		.file 6 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 4568              		.file 7 "Generated_Source\\PSoC5/CapSense_CSHL.h"
 4569              		.file 8 "Generated_Source\\PSoC5/USB_midi.h"
 4570              		.file 9 "Generated_Source\\PSoC5/Em_EEPROM.h"
 4571              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 4572              		.section	.debug_info,"",%progbits
 4573              	.Ldebug_info0:
 4574 0000 E2110000 		.4byte	0x11e2
 4575 0004 0400     		.2byte	0x4
 4576 0006 00000000 		.4byte	.Ldebug_abbrev0
 4577 000a 04       		.byte	0x4
 4578 000b 01       		.uleb128 0x1
 4579 000c D0000000 		.4byte	.LASF212
 4580 0010 0C       		.byte	0xc
 4581 0011 7B050000 		.4byte	.LASF213
 4582 0015 81080000 		.4byte	.LASF214
 4583 0019 20000000 		.4byte	.Ldebug_ranges0+0x20
 4584 001d 00000000 		.4byte	0
 4585 0021 00000000 		.4byte	.Ldebug_line0
 4586 0025 02       		.uleb128 0x2
 4587 0026 01       		.byte	0x1
 4588 0027 06       		.byte	0x6
 4589 0028 8B000000 		.4byte	.LASF0
 4590 002c 03       		.uleb128 0x3
 4591 002d 97000000 		.4byte	.LASF3
 4592 0031 02       		.byte	0x2
 4593 0032 1D       		.byte	0x1d
 4594 0033 37000000 		.4byte	0x37
 4595 0037 02       		.uleb128 0x2
 4596 0038 01       		.byte	0x1
 4597 0039 08       		.byte	0x8
 4598 003a A4070000 		.4byte	.LASF1
 4599 003e 02       		.uleb128 0x2
 4600 003f 02       		.byte	0x2
 4601 0040 05       		.byte	0x5
 4602 0041 46030000 		.4byte	.LASF2
 4603 0045 03       		.uleb128 0x3
 4604 0046 36090000 		.4byte	.LASF4
 4605 004a 02       		.byte	0x2
 4606 004b 2B       		.byte	0x2b
 4607 004c 50000000 		.4byte	0x50
 4608 0050 02       		.uleb128 0x2
 4609 0051 02       		.byte	0x2
 4610 0052 07       		.byte	0x7
 4611 0053 00050000 		.4byte	.LASF5
 4612 0057 03       		.uleb128 0x3
 4613 0058 C8050000 		.4byte	.LASF6
 4614 005c 02       		.byte	0x2
 4615 005d 3F       		.byte	0x3f
 4616 005e 62000000 		.4byte	0x62
 4617 0062 02       		.uleb128 0x2
 4618 0063 04       		.byte	0x4
 4619 0064 05       		.byte	0x5
 4620 0065 F0020000 		.4byte	.LASF7
 4621 0069 03       		.uleb128 0x3
 4622 006a C4030000 		.4byte	.LASF8
 4623 006e 02       		.byte	0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 109


 4624 006f 41       		.byte	0x41
 4625 0070 74000000 		.4byte	0x74
 4626 0074 02       		.uleb128 0x2
 4627 0075 04       		.byte	0x4
 4628 0076 07       		.byte	0x7
 4629 0077 AB040000 		.4byte	.LASF9
 4630 007b 03       		.uleb128 0x3
 4631 007c D3010000 		.4byte	.LASF10
 4632 0080 02       		.byte	0x2
 4633 0081 59       		.byte	0x59
 4634 0082 86000000 		.4byte	0x86
 4635 0086 02       		.uleb128 0x2
 4636 0087 08       		.byte	0x8
 4637 0088 05       		.byte	0x5
 4638 0089 14020000 		.4byte	.LASF11
 4639 008d 02       		.uleb128 0x2
 4640 008e 08       		.byte	0x8
 4641 008f 07       		.byte	0x7
 4642 0090 AF010000 		.4byte	.LASF12
 4643 0094 04       		.uleb128 0x4
 4644 0095 04       		.byte	0x4
 4645 0096 05       		.byte	0x5
 4646 0097 696E7400 		.ascii	"int\000"
 4647 009b 02       		.uleb128 0x2
 4648 009c 04       		.byte	0x4
 4649 009d 07       		.byte	0x7
 4650 009e 29090000 		.4byte	.LASF13
 4651 00a2 03       		.uleb128 0x3
 4652 00a3 6A090000 		.4byte	.LASF14
 4653 00a7 03       		.byte	0x3
 4654 00a8 18       		.byte	0x18
 4655 00a9 2C000000 		.4byte	0x2c
 4656 00ad 03       		.uleb128 0x3
 4657 00ae 50030000 		.4byte	.LASF15
 4658 00b2 03       		.byte	0x3
 4659 00b3 24       		.byte	0x24
 4660 00b4 45000000 		.4byte	0x45
 4661 00b8 03       		.uleb128 0x3
 4662 00b9 9C070000 		.4byte	.LASF16
 4663 00bd 03       		.byte	0x3
 4664 00be 2C       		.byte	0x2c
 4665 00bf 57000000 		.4byte	0x57
 4666 00c3 03       		.uleb128 0x3
 4667 00c4 700B0000 		.4byte	.LASF17
 4668 00c8 03       		.byte	0x3
 4669 00c9 30       		.byte	0x30
 4670 00ca 69000000 		.4byte	0x69
 4671 00ce 03       		.uleb128 0x3
 4672 00cf 260B0000 		.4byte	.LASF18
 4673 00d3 03       		.byte	0x3
 4674 00d4 38       		.byte	0x38
 4675 00d5 7B000000 		.4byte	0x7b
 4676 00d9 05       		.uleb128 0x5
 4677 00da 40030000 		.4byte	.LASF19
 4678 00de 04       		.byte	0x4
 4679 00df E401     		.2byte	0x1e4
 4680 00e1 37000000 		.4byte	0x37
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 110


 4681 00e5 05       		.uleb128 0x5
 4682 00e6 14000000 		.4byte	.LASF20
 4683 00ea 04       		.byte	0x4
 4684 00eb E501     		.2byte	0x1e5
 4685 00ed 50000000 		.4byte	0x50
 4686 00f1 05       		.uleb128 0x5
 4687 00f2 A7030000 		.4byte	.LASF21
 4688 00f6 04       		.byte	0x4
 4689 00f7 E601     		.2byte	0x1e6
 4690 00f9 74000000 		.4byte	0x74
 4691 00fd 05       		.uleb128 0x5
 4692 00fe 63020000 		.4byte	.LASF22
 4693 0102 04       		.byte	0x4
 4694 0103 E901     		.2byte	0x1e9
 4695 0105 62000000 		.4byte	0x62
 4696 0109 02       		.uleb128 0x2
 4697 010a 04       		.byte	0x4
 4698 010b 04       		.byte	0x4
 4699 010c F5060000 		.4byte	.LASF23
 4700 0110 02       		.uleb128 0x2
 4701 0111 08       		.byte	0x8
 4702 0112 04       		.byte	0x4
 4703 0113 59030000 		.4byte	.LASF24
 4704 0117 02       		.uleb128 0x2
 4705 0118 01       		.byte	0x1
 4706 0119 08       		.byte	0x8
 4707 011a 1F090000 		.4byte	.LASF25
 4708 011e 05       		.uleb128 0x5
 4709 011f E30A0000 		.4byte	.LASF26
 4710 0123 04       		.byte	0x4
 4711 0124 8602     		.2byte	0x286
 4712 0126 74000000 		.4byte	0x74
 4713 012a 05       		.uleb128 0x5
 4714 012b 5E020000 		.4byte	.LASF27
 4715 012f 04       		.byte	0x4
 4716 0130 8E02     		.2byte	0x28e
 4717 0132 36010000 		.4byte	0x136
 4718 0136 06       		.uleb128 0x6
 4719 0137 D9000000 		.4byte	0xd9
 4720 013b 02       		.uleb128 0x2
 4721 013c 08       		.byte	0x8
 4722 013d 04       		.byte	0x4
 4723 013e B8030000 		.4byte	.LASF28
 4724 0142 02       		.uleb128 0x2
 4725 0143 04       		.byte	0x4
 4726 0144 07       		.byte	0x7
 4727 0145 50060000 		.4byte	.LASF29
 4728 0149 07       		.uleb128 0x7
 4729 014a D9000000 		.4byte	0xd9
 4730 014e 59010000 		.4byte	0x159
 4731 0152 08       		.uleb128 0x8
 4732 0153 42010000 		.4byte	0x142
 4733 0157 03       		.byte	0x3
 4734 0158 00       		.byte	0
 4735 0159 09       		.uleb128 0x9
 4736 015a 1C       		.byte	0x1c
 4737 015b 05       		.byte	0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 111


 4738 015c 1601     		.2byte	0x116
 4739 015e CB010000 		.4byte	0x1cb
 4740 0162 0A       		.uleb128 0xa
 4741 0163 DE070000 		.4byte	.LASF30
 4742 0167 05       		.byte	0x5
 4743 0168 1B01     		.2byte	0x11b
 4744 016a F1000000 		.4byte	0xf1
 4745 016e 00       		.byte	0
 4746 016f 0A       		.uleb128 0xa
 4747 0170 C3000000 		.4byte	.LASF31
 4748 0174 05       		.byte	0x5
 4749 0175 2001     		.2byte	0x120
 4750 0177 F1000000 		.4byte	0xf1
 4751 017b 04       		.byte	0x4
 4752 017c 0A       		.uleb128 0xa
 4753 017d 53070000 		.4byte	.LASF32
 4754 0181 05       		.byte	0x5
 4755 0182 2301     		.2byte	0x123
 4756 0184 F1000000 		.4byte	0xf1
 4757 0188 08       		.byte	0x8
 4758 0189 0A       		.uleb128 0xa
 4759 018a 0F0B0000 		.4byte	.LASF33
 4760 018e 05       		.byte	0x5
 4761 018f 2601     		.2byte	0x126
 4762 0191 F1000000 		.4byte	0xf1
 4763 0195 0C       		.byte	0xc
 4764 0196 0A       		.uleb128 0xa
 4765 0197 FE090000 		.4byte	.LASF34
 4766 019b 05       		.byte	0x5
 4767 019c 2B01     		.2byte	0x12b
 4768 019e F1000000 		.4byte	0xf1
 4769 01a2 10       		.byte	0x10
 4770 01a3 0A       		.uleb128 0xa
 4771 01a4 3F040000 		.4byte	.LASF35
 4772 01a8 05       		.byte	0x5
 4773 01a9 2E01     		.2byte	0x12e
 4774 01ab D9000000 		.4byte	0xd9
 4775 01af 14       		.byte	0x14
 4776 01b0 0A       		.uleb128 0xa
 4777 01b1 A50A0000 		.4byte	.LASF36
 4778 01b5 05       		.byte	0x5
 4779 01b6 3301     		.2byte	0x133
 4780 01b8 D9000000 		.4byte	0xd9
 4781 01bc 15       		.byte	0x15
 4782 01bd 0A       		.uleb128 0xa
 4783 01be 13030000 		.4byte	.LASF37
 4784 01c2 05       		.byte	0x5
 4785 01c3 3601     		.2byte	0x136
 4786 01c5 F1000000 		.4byte	0xf1
 4787 01c9 18       		.byte	0x18
 4788 01ca 00       		.byte	0
 4789 01cb 05       		.uleb128 0x5
 4790 01cc 91060000 		.4byte	.LASF38
 4791 01d0 05       		.byte	0x5
 4792 01d1 3701     		.2byte	0x137
 4793 01d3 59010000 		.4byte	0x159
 4794 01d7 0B       		.uleb128 0xb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 112


 4795 01d8 01       		.byte	0x1
 4796 01d9 37000000 		.4byte	0x37
 4797 01dd 05       		.byte	0x5
 4798 01de 5401     		.2byte	0x154
 4799 01e0 03020000 		.4byte	0x203
 4800 01e4 0C       		.uleb128 0xc
 4801 01e5 900A0000 		.4byte	.LASF39
 4802 01e9 00       		.byte	0
 4803 01ea 0C       		.uleb128 0xc
 4804 01eb DF050000 		.4byte	.LASF40
 4805 01ef 01       		.byte	0x1
 4806 01f0 0C       		.uleb128 0xc
 4807 01f1 02060000 		.4byte	.LASF41
 4808 01f5 02       		.byte	0x2
 4809 01f6 0C       		.uleb128 0xc
 4810 01f7 61070000 		.4byte	.LASF42
 4811 01fb 03       		.byte	0x3
 4812 01fc 0C       		.uleb128 0xc
 4813 01fd 3F080000 		.4byte	.LASF43
 4814 0201 04       		.byte	0x4
 4815 0202 00       		.byte	0
 4816 0203 05       		.uleb128 0x5
 4817 0204 72000000 		.4byte	.LASF44
 4818 0208 05       		.byte	0x5
 4819 0209 5A01     		.2byte	0x15a
 4820 020b D7010000 		.4byte	0x1d7
 4821 020f 06       		.uleb128 0x6
 4822 0210 A2000000 		.4byte	0xa2
 4823 0214 07       		.uleb128 0x7
 4824 0215 C3000000 		.4byte	0xc3
 4825 0219 24020000 		.4byte	0x224
 4826 021d 08       		.uleb128 0x8
 4827 021e 42010000 		.4byte	0x142
 4828 0222 04       		.byte	0x4
 4829 0223 00       		.byte	0
 4830 0224 03       		.uleb128 0x3
 4831 0225 4E070000 		.4byte	.LASF45
 4832 0229 06       		.byte	0x6
 4833 022a 6C       		.byte	0x6c
 4834 022b 9B000000 		.4byte	0x9b
 4835 022f 0D       		.uleb128 0xd
 4836 0230 4D040000 		.4byte	.LASF215
 4837 0234 04       		.byte	0x4
 4838 0235 01       		.byte	0x1
 4839 0236 4D       		.byte	0x4d
 4840 0237 59020000 		.4byte	0x259
 4841 023b 0E       		.uleb128 0xe
 4842 023c 6600     		.ascii	"f\000"
 4843 023e 01       		.byte	0x1
 4844 023f 4E       		.byte	0x4e
 4845 0240 09010000 		.4byte	0x109
 4846 0244 0E       		.uleb128 0xe
 4847 0245 6200     		.ascii	"b\000"
 4848 0247 01       		.byte	0x1
 4849 0248 4F       		.byte	0x4f
 4850 0249 59020000 		.4byte	0x259
 4851 024d 0E       		.uleb128 0xe
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 113


 4852 024e 75333200 		.ascii	"u32\000"
 4853 0252 01       		.byte	0x1
 4854 0253 50       		.byte	0x50
 4855 0254 C3000000 		.4byte	0xc3
 4856 0258 00       		.byte	0
 4857 0259 07       		.uleb128 0x7
 4858 025a A2000000 		.4byte	0xa2
 4859 025e 69020000 		.4byte	0x269
 4860 0262 08       		.uleb128 0x8
 4861 0263 42010000 		.4byte	0x142
 4862 0267 03       		.byte	0x3
 4863 0268 00       		.byte	0
 4864 0269 0F       		.uleb128 0xf
 4865 026a 22020000 		.4byte	.LASF216
 4866 026e 01       		.byte	0x1
 4867 026f 37000000 		.4byte	0x37
 4868 0273 01       		.byte	0x1
 4869 0274 74       		.byte	0x74
 4870 0275 8C020000 		.4byte	0x28c
 4871 0279 0C       		.uleb128 0xc
 4872 027a D4060000 		.4byte	.LASF46
 4873 027e 00       		.byte	0
 4874 027f 0C       		.uleb128 0xc
 4875 0280 AE050000 		.4byte	.LASF47
 4876 0284 01       		.byte	0x1
 4877 0285 0C       		.uleb128 0xc
 4878 0286 4E0B0000 		.4byte	.LASF48
 4879 028a 02       		.byte	0x2
 4880 028b 00       		.byte	0
 4881 028c 10       		.uleb128 0x10
 4882 028d C30A0000 		.4byte	.LASF62
 4883 0291 01       		.byte	0x1
 4884 0292 DA       		.byte	0xda
 4885 0293 00000000 		.4byte	.LFB64
 4886 0297 0C000000 		.4byte	.LFE64-.LFB64
 4887 029b 01       		.uleb128 0x1
 4888 029c 9C       		.byte	0x9c
 4889 029d 11       		.uleb128 0x11
 4890 029e 9D030000 		.4byte	.LASF51
 4891 02a2 01       		.byte	0x1
 4892 02a3 E2       		.byte	0xe2
 4893 02a4 09010000 		.4byte	0x109
 4894 02a8 00000000 		.4byte	.LFB65
 4895 02ac 58000000 		.4byte	.LFE65-.LFB65
 4896 02b0 01       		.uleb128 0x1
 4897 02b1 9C       		.byte	0x9c
 4898 02b2 FD020000 		.4byte	0x2fd
 4899 02b6 12       		.uleb128 0x12
 4900 02b7 6D696E00 		.ascii	"min\000"
 4901 02bb 01       		.byte	0x1
 4902 02bc E2       		.byte	0xe2
 4903 02bd 09010000 		.4byte	0x109
 4904 02c1 02       		.uleb128 0x2
 4905 02c2 91       		.byte	0x91
 4906 02c3 6C       		.sleb128 -20
 4907 02c4 12       		.uleb128 0x12
 4908 02c5 76616C00 		.ascii	"val\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 114


 4909 02c9 01       		.byte	0x1
 4910 02ca E2       		.byte	0xe2
 4911 02cb 09010000 		.4byte	0x109
 4912 02cf 02       		.uleb128 0x2
 4913 02d0 91       		.byte	0x91
 4914 02d1 68       		.sleb128 -24
 4915 02d2 12       		.uleb128 0x12
 4916 02d3 6D617800 		.ascii	"max\000"
 4917 02d7 01       		.byte	0x1
 4918 02d8 E2       		.byte	0xe2
 4919 02d9 09010000 		.4byte	0x109
 4920 02dd 02       		.uleb128 0x2
 4921 02de 91       		.byte	0x91
 4922 02df 64       		.sleb128 -28
 4923 02e0 13       		.uleb128 0x13
 4924 02e1 0C020000 		.4byte	.LASF49
 4925 02e5 01       		.byte	0x1
 4926 02e6 E4       		.byte	0xe4
 4927 02e7 09010000 		.4byte	0x109
 4928 02eb 02       		.uleb128 0x2
 4929 02ec 91       		.byte	0x91
 4930 02ed 74       		.sleb128 -12
 4931 02ee 13       		.uleb128 0x13
 4932 02ef CB010000 		.4byte	.LASF50
 4933 02f3 01       		.byte	0x1
 4934 02f4 E5       		.byte	0xe5
 4935 02f5 09010000 		.4byte	0x109
 4936 02f9 02       		.uleb128 0x2
 4937 02fa 91       		.byte	0x91
 4938 02fb 70       		.sleb128 -16
 4939 02fc 00       		.byte	0
 4940 02fd 11       		.uleb128 0x11
 4941 02fe 40020000 		.4byte	.LASF52
 4942 0302 01       		.byte	0x1
 4943 0303 F8       		.byte	0xf8
 4944 0304 09010000 		.4byte	0x109
 4945 0308 00000000 		.4byte	.LFB66
 4946 030c 68000000 		.4byte	.LFE66-.LFB66
 4947 0310 01       		.uleb128 0x1
 4948 0311 9C       		.byte	0x9c
 4949 0312 23030000 		.4byte	0x323
 4950 0316 12       		.uleb128 0x12
 4951 0317 6600     		.ascii	"f\000"
 4952 0319 01       		.byte	0x1
 4953 031a F8       		.byte	0xf8
 4954 031b 09010000 		.4byte	0x109
 4955 031f 02       		.uleb128 0x2
 4956 0320 91       		.byte	0x91
 4957 0321 74       		.sleb128 -12
 4958 0322 00       		.byte	0
 4959 0323 11       		.uleb128 0x11
 4960 0324 C6010000 		.4byte	.LASF53
 4961 0328 01       		.byte	0x1
 4962 0329 FF       		.byte	0xff
 4963 032a 09010000 		.4byte	0x109
 4964 032e 00000000 		.4byte	.LFB67
 4965 0332 4C000000 		.4byte	.LFE67-.LFB67
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 115


 4966 0336 01       		.uleb128 0x1
 4967 0337 9C       		.byte	0x9c
 4968 0338 49030000 		.4byte	0x349
 4969 033c 12       		.uleb128 0x12
 4970 033d 6600     		.ascii	"f\000"
 4971 033f 01       		.byte	0x1
 4972 0340 FF       		.byte	0xff
 4973 0341 09010000 		.4byte	0x109
 4974 0345 02       		.uleb128 0x2
 4975 0346 91       		.byte	0x91
 4976 0347 74       		.sleb128 -12
 4977 0348 00       		.byte	0
 4978 0349 14       		.uleb128 0x14
 4979 034a 6B060000 		.4byte	.LASF54
 4980 034e 01       		.byte	0x1
 4981 034f 0501     		.2byte	0x105
 4982 0351 09010000 		.4byte	0x109
 4983 0355 00000000 		.4byte	.LFB68
 4984 0359 46000000 		.4byte	.LFE68-.LFB68
 4985 035d 01       		.uleb128 0x1
 4986 035e 9C       		.byte	0x9c
 4987 035f AB030000 		.4byte	0x3ab
 4988 0363 15       		.uleb128 0x15
 4989 0364 4100     		.ascii	"A\000"
 4990 0366 01       		.byte	0x1
 4991 0367 0501     		.2byte	0x105
 4992 0369 09010000 		.4byte	0x109
 4993 036d 02       		.uleb128 0x2
 4994 036e 91       		.byte	0x91
 4995 036f 6C       		.sleb128 -20
 4996 0370 15       		.uleb128 0x15
 4997 0371 4200     		.ascii	"B\000"
 4998 0373 01       		.byte	0x1
 4999 0374 0501     		.2byte	0x105
 5000 0376 09010000 		.4byte	0x109
 5001 037a 02       		.uleb128 0x2
 5002 037b 91       		.byte	0x91
 5003 037c 68       		.sleb128 -24
 5004 037d 16       		.uleb128 0x16
 5005 037e 3A020000 		.4byte	.LASF55
 5006 0382 01       		.byte	0x1
 5007 0383 0501     		.2byte	0x105
 5008 0385 09010000 		.4byte	0x109
 5009 0389 02       		.uleb128 0x2
 5010 038a 91       		.byte	0x91
 5011 038b 64       		.sleb128 -28
 5012 038c 17       		.uleb128 0x17
 5013 038d 2F030000 		.4byte	.LASF56
 5014 0391 01       		.byte	0x1
 5015 0392 0701     		.2byte	0x107
 5016 0394 09010000 		.4byte	0x109
 5017 0398 02       		.uleb128 0x2
 5018 0399 91       		.byte	0x91
 5019 039a 74       		.sleb128 -12
 5020 039b 18       		.uleb128 0x18
 5021 039c 6F757400 		.ascii	"out\000"
 5022 03a0 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 116


 5023 03a1 0A01     		.2byte	0x10a
 5024 03a3 09010000 		.4byte	0x109
 5025 03a7 02       		.uleb128 0x2
 5026 03a8 91       		.byte	0x91
 5027 03a9 70       		.sleb128 -16
 5028 03aa 00       		.byte	0
 5029 03ab 19       		.uleb128 0x19
 5030 03ac 6D617000 		.ascii	"map\000"
 5031 03b0 01       		.byte	0x1
 5032 03b1 1401     		.2byte	0x114
 5033 03b3 09010000 		.4byte	0x109
 5034 03b7 00000000 		.4byte	.LFB69
 5035 03bb 56000000 		.4byte	.LFE69-.LFB69
 5036 03bf 01       		.uleb128 0x1
 5037 03c0 9C       		.byte	0x9c
 5038 03c1 11040000 		.4byte	0x411
 5039 03c5 16       		.uleb128 0x16
 5040 03c6 39040000 		.4byte	.LASF57
 5041 03ca 01       		.byte	0x1
 5042 03cb 1401     		.2byte	0x114
 5043 03cd 09010000 		.4byte	0x109
 5044 03d1 02       		.uleb128 0x2
 5045 03d2 91       		.byte	0x91
 5046 03d3 6C       		.sleb128 -20
 5047 03d4 16       		.uleb128 0x16
 5048 03d5 71010000 		.4byte	.LASF58
 5049 03d9 01       		.byte	0x1
 5050 03da 1401     		.2byte	0x114
 5051 03dc 09010000 		.4byte	0x109
 5052 03e0 02       		.uleb128 0x2
 5053 03e1 91       		.byte	0x91
 5054 03e2 68       		.sleb128 -24
 5055 03e3 16       		.uleb128 0x16
 5056 03e4 96070000 		.4byte	.LASF59
 5057 03e8 01       		.byte	0x1
 5058 03e9 1401     		.2byte	0x114
 5059 03eb 09010000 		.4byte	0x109
 5060 03ef 02       		.uleb128 0x2
 5061 03f0 91       		.byte	0x91
 5062 03f1 64       		.sleb128 -28
 5063 03f2 16       		.uleb128 0x16
 5064 03f3 4C050000 		.4byte	.LASF60
 5065 03f7 01       		.byte	0x1
 5066 03f8 1401     		.2byte	0x114
 5067 03fa 09010000 		.4byte	0x109
 5068 03fe 02       		.uleb128 0x2
 5069 03ff 91       		.byte	0x91
 5070 0400 60       		.sleb128 -32
 5071 0401 16       		.uleb128 0x16
 5072 0402 53050000 		.4byte	.LASF61
 5073 0406 01       		.byte	0x1
 5074 0407 1401     		.2byte	0x114
 5075 0409 09010000 		.4byte	0x109
 5076 040d 02       		.uleb128 0x2
 5077 040e 91       		.byte	0x91
 5078 040f 00       		.sleb128 0
 5079 0410 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 117


 5080 0411 1A       		.uleb128 0x1a
 5081 0412 B6050000 		.4byte	.LASF63
 5082 0416 01       		.byte	0x1
 5083 0417 4C01     		.2byte	0x14c
 5084 0419 00000000 		.4byte	.LFB70
 5085 041d 40000000 		.4byte	.LFE70-.LFB70
 5086 0421 01       		.uleb128 0x1
 5087 0422 9C       		.byte	0x9c
 5088 0423 1A       		.uleb128 0x1a
 5089 0424 6D050000 		.4byte	.LASF64
 5090 0428 01       		.byte	0x1
 5091 0429 5E01     		.2byte	0x15e
 5092 042b 00000000 		.4byte	.LFB71
 5093 042f 14000000 		.4byte	.LFE71-.LFB71
 5094 0433 01       		.uleb128 0x1
 5095 0434 9C       		.byte	0x9c
 5096 0435 1A       		.uleb128 0x1a
 5097 0436 DE090000 		.4byte	.LASF65
 5098 043a 01       		.byte	0x1
 5099 043b 6901     		.2byte	0x169
 5100 043d 00000000 		.4byte	.LFB72
 5101 0441 7C000000 		.4byte	.LFE72-.LFB72
 5102 0445 01       		.uleb128 0x1
 5103 0446 9C       		.byte	0x9c
 5104 0447 14       		.uleb128 0x14
 5105 0448 84030000 		.4byte	.LASF66
 5106 044c 01       		.byte	0x1
 5107 044d 8301     		.2byte	0x183
 5108 044f 94000000 		.4byte	0x94
 5109 0453 00000000 		.4byte	.LFB73
 5110 0457 1C0C0000 		.4byte	.LFE73-.LFB73
 5111 045b 01       		.uleb128 0x1
 5112 045c 9C       		.byte	0x9c
 5113 045d 15050000 		.4byte	0x515
 5114 0461 1B       		.uleb128 0x1b
 5115 0462 AE000000 		.4byte	.LBB2
 5116 0466 1E050000 		.4byte	.LBE2-.LBB2
 5117 046a 95040000 		.4byte	0x495
 5118 046e 17       		.uleb128 0x17
 5119 046f 24000000 		.4byte	.LASF67
 5120 0473 01       		.byte	0x1
 5121 0474 FE01     		.2byte	0x1fe
 5122 0476 09010000 		.4byte	0x109
 5123 047a 02       		.uleb128 0x2
 5124 047b 91       		.byte	0x91
 5125 047c 4C       		.sleb128 -52
 5126 047d 1C       		.uleb128 0x1c
 5127 047e 56030000 		.4byte	.LBB3
 5128 0482 34000000 		.4byte	.LBE3-.LBB3
 5129 0486 18       		.uleb128 0x18
 5130 0487 6A00     		.ascii	"j\000"
 5131 0489 01       		.byte	0x1
 5132 048a 3502     		.2byte	0x235
 5133 048c 94000000 		.4byte	0x94
 5134 0490 02       		.uleb128 0x2
 5135 0491 91       		.byte	0x91
 5136 0492 64       		.sleb128 -28
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 118


 5137 0493 00       		.byte	0
 5138 0494 00       		.byte	0
 5139 0495 1B       		.uleb128 0x1b
 5140 0496 3A060000 		.4byte	.LBB4
 5141 049a 52010000 		.4byte	.LBE4-.LBB4
 5142 049e C7040000 		.4byte	0x4c7
 5143 04a2 18       		.uleb128 0x18
 5144 04a3 6900     		.ascii	"i\000"
 5145 04a5 01       		.byte	0x1
 5146 04a6 6902     		.2byte	0x269
 5147 04a8 94000000 		.4byte	0x94
 5148 04ac 02       		.uleb128 0x2
 5149 04ad 91       		.byte	0x91
 5150 04ae 60       		.sleb128 -32
 5151 04af 1C       		.uleb128 0x1c
 5152 04b0 68060000 		.4byte	.LBB5
 5153 04b4 32000000 		.4byte	.LBE5-.LBB5
 5154 04b8 18       		.uleb128 0x18
 5155 04b9 6A00     		.ascii	"j\000"
 5156 04bb 01       		.byte	0x1
 5157 04bc 6D02     		.2byte	0x26d
 5158 04be 94000000 		.4byte	0x94
 5159 04c2 02       		.uleb128 0x2
 5160 04c3 91       		.byte	0x91
 5161 04c4 5C       		.sleb128 -36
 5162 04c5 00       		.byte	0
 5163 04c6 00       		.byte	0
 5164 04c7 1B       		.uleb128 0x1b
 5165 04c8 C2070000 		.4byte	.LBB6
 5166 04cc CC010000 		.4byte	.LBE6-.LBB6
 5167 04d0 E2040000 		.4byte	0x4e2
 5168 04d4 18       		.uleb128 0x18
 5169 04d5 6900     		.ascii	"i\000"
 5170 04d7 01       		.byte	0x1
 5171 04d8 9202     		.2byte	0x292
 5172 04da 94000000 		.4byte	0x94
 5173 04de 02       		.uleb128 0x2
 5174 04df 91       		.byte	0x91
 5175 04e0 58       		.sleb128 -40
 5176 04e1 00       		.byte	0
 5177 04e2 1B       		.uleb128 0x1b
 5178 04e3 BE090000 		.4byte	.LBB7
 5179 04e7 30000000 		.4byte	.LBE7-.LBB7
 5180 04eb FD040000 		.4byte	0x4fd
 5181 04ef 18       		.uleb128 0x18
 5182 04f0 6900     		.ascii	"i\000"
 5183 04f2 01       		.byte	0x1
 5184 04f3 CA02     		.2byte	0x2ca
 5185 04f5 24020000 		.4byte	0x224
 5186 04f9 02       		.uleb128 0x2
 5187 04fa 91       		.byte	0x91
 5188 04fb 54       		.sleb128 -44
 5189 04fc 00       		.byte	0
 5190 04fd 1C       		.uleb128 0x1c
 5191 04fe 120A0000 		.4byte	.LBB8
 5192 0502 9C000000 		.4byte	.LBE8-.LBB8
 5193 0506 18       		.uleb128 0x18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 119


 5194 0507 6900     		.ascii	"i\000"
 5195 0509 01       		.byte	0x1
 5196 050a DD02     		.2byte	0x2dd
 5197 050c 24020000 		.4byte	0x224
 5198 0510 02       		.uleb128 0x2
 5199 0511 91       		.byte	0x91
 5200 0512 50       		.sleb128 -48
 5201 0513 00       		.byte	0
 5202 0514 00       		.byte	0
 5203 0515 1A       		.uleb128 0x1a
 5204 0516 89030000 		.4byte	.LASF68
 5205 051a 01       		.byte	0x1
 5206 051b 3903     		.2byte	0x339
 5207 051d 00000000 		.4byte	.LFB74
 5208 0521 54000000 		.4byte	.LFE74-.LFB74
 5209 0525 01       		.uleb128 0x1
 5210 0526 9C       		.byte	0x9c
 5211 0527 1A       		.uleb128 0x1a
 5212 0528 72090000 		.4byte	.LASF69
 5213 052c 01       		.byte	0x1
 5214 052d 4D03     		.2byte	0x34d
 5215 052f 00000000 		.4byte	.LFB75
 5216 0533 C4000000 		.4byte	.LFE75-.LFB75
 5217 0537 01       		.uleb128 0x1
 5218 0538 9C       		.byte	0x9c
 5219 0539 1D       		.uleb128 0x1d
 5220 053a 8A0B0000 		.4byte	.LASF72
 5221 053e 01       		.byte	0x1
 5222 053f A003     		.2byte	0x3a0
 5223 0541 00000000 		.4byte	.LFB76
 5224 0545 68020000 		.4byte	.LFE76-.LFB76
 5225 0549 01       		.uleb128 0x1
 5226 054a 9C       		.byte	0x9c
 5227 054b B6050000 		.4byte	0x5b6
 5228 054f 1C       		.uleb128 0x1c
 5229 0550 16000000 		.4byte	.LBB9
 5230 0554 12020000 		.4byte	.LBE9-.LBB9
 5231 0558 17       		.uleb128 0x17
 5232 0559 63090000 		.4byte	.LASF70
 5233 055d 01       		.byte	0x1
 5234 055e C303     		.2byte	0x3c3
 5235 0560 2F020000 		.4byte	0x22f
 5236 0564 02       		.uleb128 0x2
 5237 0565 91       		.byte	0x91
 5238 0566 64       		.sleb128 -28
 5239 0567 1C       		.uleb128 0x1c
 5240 0568 3A000000 		.4byte	.LBB10
 5241 056c EE010000 		.4byte	.LBE10-.LBB10
 5242 0570 18       		.uleb128 0x18
 5243 0571 6900     		.ascii	"i\000"
 5244 0573 01       		.byte	0x1
 5245 0574 C703     		.2byte	0x3c7
 5246 0576 C3000000 		.4byte	0xc3
 5247 057a 02       		.uleb128 0x2
 5248 057b 91       		.byte	0x91
 5249 057c 6C       		.sleb128 -20
 5250 057d 1B       		.uleb128 0x1b
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 120


 5251 057e 9E000000 		.4byte	.LBB11
 5252 0582 88000000 		.4byte	.LBE11-.LBB11
 5253 0586 9A050000 		.4byte	0x59a
 5254 058a 17       		.uleb128 0x17
 5255 058b C5070000 		.4byte	.LASF71
 5256 058f 01       		.byte	0x1
 5257 0590 D203     		.2byte	0x3d2
 5258 0592 AD000000 		.4byte	0xad
 5259 0596 02       		.uleb128 0x2
 5260 0597 91       		.byte	0x91
 5261 0598 6A       		.sleb128 -22
 5262 0599 00       		.byte	0
 5263 059a 1C       		.uleb128 0x1c
 5264 059b C0010000 		.4byte	.LBB12
 5265 059f 4C000000 		.4byte	.LBE12-.LBB12
 5266 05a3 17       		.uleb128 0x17
 5267 05a4 C5070000 		.4byte	.LASF71
 5268 05a8 01       		.byte	0x1
 5269 05a9 F703     		.2byte	0x3f7
 5270 05ab AD000000 		.4byte	0xad
 5271 05af 02       		.uleb128 0x2
 5272 05b0 91       		.byte	0x91
 5273 05b1 68       		.sleb128 -24
 5274 05b2 00       		.byte	0
 5275 05b3 00       		.byte	0
 5276 05b4 00       		.byte	0
 5277 05b5 00       		.byte	0
 5278 05b6 1D       		.uleb128 0x1d
 5279 05b7 B0020000 		.4byte	.LASF73
 5280 05bb 01       		.byte	0x1
 5281 05bc 0F04     		.2byte	0x40f
 5282 05be 00000000 		.4byte	.LFB77
 5283 05c2 F0000000 		.4byte	.LFE77-.LFB77
 5284 05c6 01       		.uleb128 0x1
 5285 05c7 9C       		.byte	0x9c
 5286 05c8 02060000 		.4byte	0x602
 5287 05cc 16       		.uleb128 0x16
 5288 05cd 02080000 		.4byte	.LASF74
 5289 05d1 01       		.byte	0x1
 5290 05d2 0F04     		.2byte	0x40f
 5291 05d4 D9000000 		.4byte	0xd9
 5292 05d8 02       		.uleb128 0x2
 5293 05d9 91       		.byte	0x91
 5294 05da 6F       		.sleb128 -17
 5295 05db 16       		.uleb128 0x16
 5296 05dc 63060000 		.4byte	.LASF75
 5297 05e0 01       		.byte	0x1
 5298 05e1 0F04     		.2byte	0x40f
 5299 05e3 02060000 		.4byte	0x602
 5300 05e7 02       		.uleb128 0x2
 5301 05e8 91       		.byte	0x91
 5302 05e9 68       		.sleb128 -24
 5303 05ea 1C       		.uleb128 0x1c
 5304 05eb 34000000 		.4byte	.LBB13
 5305 05ef 4E000000 		.4byte	.LBE13-.LBB13
 5306 05f3 18       		.uleb128 0x18
 5307 05f4 6900     		.ascii	"i\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 121


 5308 05f6 01       		.byte	0x1
 5309 05f7 1804     		.2byte	0x418
 5310 05f9 94000000 		.4byte	0x94
 5311 05fd 02       		.uleb128 0x2
 5312 05fe 91       		.byte	0x91
 5313 05ff 74       		.sleb128 -12
 5314 0600 00       		.byte	0
 5315 0601 00       		.byte	0
 5316 0602 1E       		.uleb128 0x1e
 5317 0603 04       		.byte	0x4
 5318 0604 D9000000 		.4byte	0xd9
 5319 0608 1D       		.uleb128 0x1d
 5320 0609 02040000 		.4byte	.LASF76
 5321 060d 01       		.byte	0x1
 5322 060e 3804     		.2byte	0x438
 5323 0610 00000000 		.4byte	.LFB78
 5324 0614 C4000000 		.4byte	.LFE78-.LFB78
 5325 0618 01       		.uleb128 0x1
 5326 0619 9C       		.byte	0x9c
 5327 061a 4C060000 		.4byte	0x64c
 5328 061e 16       		.uleb128 0x16
 5329 061f 00020000 		.4byte	.LASF77
 5330 0623 01       		.byte	0x1
 5331 0624 3804     		.2byte	0x438
 5332 0626 94000000 		.4byte	0x94
 5333 062a 02       		.uleb128 0x2
 5334 062b 91       		.byte	0x91
 5335 062c 74       		.sleb128 -12
 5336 062d 16       		.uleb128 0x16
 5337 062e 2E0B0000 		.4byte	.LASF78
 5338 0632 01       		.byte	0x1
 5339 0633 3804     		.2byte	0x438
 5340 0635 94000000 		.4byte	0x94
 5341 0639 02       		.uleb128 0x2
 5342 063a 91       		.byte	0x91
 5343 063b 70       		.sleb128 -16
 5344 063c 16       		.uleb128 0x16
 5345 063d 32080000 		.4byte	.LASF79
 5346 0641 01       		.byte	0x1
 5347 0642 3804     		.2byte	0x438
 5348 0644 94000000 		.4byte	0x94
 5349 0648 02       		.uleb128 0x2
 5350 0649 91       		.byte	0x91
 5351 064a 6C       		.sleb128 -20
 5352 064b 00       		.byte	0
 5353 064c 1D       		.uleb128 0x1d
 5354 064d CC070000 		.4byte	.LASF80
 5355 0651 01       		.byte	0x1
 5356 0652 5404     		.2byte	0x454
 5357 0654 00000000 		.4byte	.LFB79
 5358 0658 B4000000 		.4byte	.LFE79-.LFB79
 5359 065c 01       		.uleb128 0x1
 5360 065d 9C       		.byte	0x9c
 5361 065e 81060000 		.4byte	0x681
 5362 0662 15       		.uleb128 0x15
 5363 0663 76616C00 		.ascii	"val\000"
 5364 0667 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 122


 5365 0668 5404     		.2byte	0x454
 5366 066a 94000000 		.4byte	0x94
 5367 066e 02       		.uleb128 0x2
 5368 066f 91       		.byte	0x91
 5369 0670 74       		.sleb128 -12
 5370 0671 16       		.uleb128 0x16
 5371 0672 32080000 		.4byte	.LASF79
 5372 0676 01       		.byte	0x1
 5373 0677 5404     		.2byte	0x454
 5374 0679 94000000 		.4byte	0x94
 5375 067d 02       		.uleb128 0x2
 5376 067e 91       		.byte	0x91
 5377 067f 70       		.sleb128 -16
 5378 0680 00       		.byte	0
 5379 0681 1D       		.uleb128 0x1d
 5380 0682 5E080000 		.4byte	.LASF81
 5381 0686 01       		.byte	0x1
 5382 0687 6904     		.2byte	0x469
 5383 0689 00000000 		.4byte	.LFB80
 5384 068d B0000000 		.4byte	.LFE80-.LFB80
 5385 0691 01       		.uleb128 0x1
 5386 0692 9C       		.byte	0x9c
 5387 0693 C5060000 		.4byte	0x6c5
 5388 0697 16       		.uleb128 0x16
 5389 0698 8A0A0000 		.4byte	.LASF82
 5390 069c 01       		.byte	0x1
 5391 069d 6904     		.2byte	0x469
 5392 069f 94000000 		.4byte	0x94
 5393 06a3 02       		.uleb128 0x2
 5394 06a4 91       		.byte	0x91
 5395 06a5 74       		.sleb128 -12
 5396 06a6 16       		.uleb128 0x16
 5397 06a7 BB090000 		.4byte	.LASF83
 5398 06ab 01       		.byte	0x1
 5399 06ac 6904     		.2byte	0x469
 5400 06ae 94000000 		.4byte	0x94
 5401 06b2 02       		.uleb128 0x2
 5402 06b3 91       		.byte	0x91
 5403 06b4 70       		.sleb128 -16
 5404 06b5 16       		.uleb128 0x16
 5405 06b6 32080000 		.4byte	.LASF79
 5406 06ba 01       		.byte	0x1
 5407 06bb 6904     		.2byte	0x469
 5408 06bd 94000000 		.4byte	0x94
 5409 06c1 02       		.uleb128 0x2
 5410 06c2 91       		.byte	0x91
 5411 06c3 6C       		.sleb128 -20
 5412 06c4 00       		.byte	0
 5413 06c5 1D       		.uleb128 0x1d
 5414 06c6 9D020000 		.4byte	.LASF84
 5415 06ca 01       		.byte	0x1
 5416 06cb 8104     		.2byte	0x481
 5417 06cd 00000000 		.4byte	.LFB81
 5418 06d1 24010000 		.4byte	.LFE81-.LFB81
 5419 06d5 01       		.uleb128 0x1
 5420 06d6 9C       		.byte	0x9c
 5421 06d7 09070000 		.4byte	0x709
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 123


 5422 06db 17       		.uleb128 0x17
 5423 06dc F8090000 		.4byte	.LASF85
 5424 06e0 01       		.byte	0x1
 5425 06e1 8304     		.2byte	0x483
 5426 06e3 FD000000 		.4byte	0xfd
 5427 06e7 02       		.uleb128 0x2
 5428 06e8 91       		.byte	0x91
 5429 06e9 68       		.sleb128 -24
 5430 06ea 17       		.uleb128 0x17
 5431 06eb E8070000 		.4byte	.LASF86
 5432 06ef 01       		.byte	0x1
 5433 06f0 8404     		.2byte	0x484
 5434 06f2 FD000000 		.4byte	0xfd
 5435 06f6 02       		.uleb128 0x2
 5436 06f7 91       		.byte	0x91
 5437 06f8 6C       		.sleb128 -20
 5438 06f9 17       		.uleb128 0x17
 5439 06fa A4090000 		.4byte	.LASF87
 5440 06fe 01       		.byte	0x1
 5441 06ff 8504     		.2byte	0x485
 5442 0701 FD000000 		.4byte	0xfd
 5443 0705 02       		.uleb128 0x2
 5444 0706 91       		.byte	0x91
 5445 0707 64       		.sleb128 -28
 5446 0708 00       		.byte	0
 5447 0709 1A       		.uleb128 0x1a
 5448 070a B0000000 		.4byte	.LASF88
 5449 070e 01       		.byte	0x1
 5450 070f B004     		.2byte	0x4b0
 5451 0711 00000000 		.4byte	.LFB82
 5452 0715 D8000000 		.4byte	.LFE82-.LFB82
 5453 0719 01       		.uleb128 0x1
 5454 071a 9C       		.byte	0x9c
 5455 071b 1A       		.uleb128 0x1a
 5456 071c 5E010000 		.4byte	.LASF89
 5457 0720 01       		.byte	0x1
 5458 0721 D704     		.2byte	0x4d7
 5459 0723 00000000 		.4byte	.LFB83
 5460 0727 D8000000 		.4byte	.LFE83-.LFB83
 5461 072b 01       		.uleb128 0x1
 5462 072c 9C       		.byte	0x9c
 5463 072d 14       		.uleb128 0x14
 5464 072e FB060000 		.4byte	.LASF90
 5465 0732 01       		.byte	0x1
 5466 0733 0005     		.2byte	0x500
 5467 0735 D9000000 		.4byte	0xd9
 5468 0739 00000000 		.4byte	.LFB84
 5469 073d 90000000 		.4byte	.LFE84-.LFB84
 5470 0741 01       		.uleb128 0x1
 5471 0742 9C       		.byte	0x9c
 5472 0743 93070000 		.4byte	0x793
 5473 0747 16       		.uleb128 0x16
 5474 0748 BD070000 		.4byte	.LASF91
 5475 074c 01       		.byte	0x1
 5476 074d 0005     		.2byte	0x500
 5477 074f D9000000 		.4byte	0xd9
 5478 0753 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 124


 5479 0754 91       		.byte	0x91
 5480 0755 6F       		.sleb128 -17
 5481 0756 16       		.uleb128 0x16
 5482 0757 2C070000 		.4byte	.LASF92
 5483 075b 01       		.byte	0x1
 5484 075c 0005     		.2byte	0x500
 5485 075e E5000000 		.4byte	0xe5
 5486 0762 02       		.uleb128 0x2
 5487 0763 91       		.byte	0x91
 5488 0764 6C       		.sleb128 -20
 5489 0765 16       		.uleb128 0x16
 5490 0766 24090000 		.4byte	.LASF93
 5491 076a 01       		.byte	0x1
 5492 076b 0005     		.2byte	0x500
 5493 076d A2000000 		.4byte	0xa2
 5494 0771 02       		.uleb128 0x2
 5495 0772 91       		.byte	0x91
 5496 0773 6E       		.sleb128 -18
 5497 0774 17       		.uleb128 0x17
 5498 0775 4C0A0000 		.4byte	.LASF94
 5499 0779 01       		.byte	0x1
 5500 077a 0205     		.2byte	0x502
 5501 077c 36010000 		.4byte	0x136
 5502 0780 02       		.uleb128 0x2
 5503 0781 91       		.byte	0x91
 5504 0782 73       		.sleb128 -13
 5505 0783 17       		.uleb128 0x17
 5506 0784 C6040000 		.4byte	.LASF95
 5507 0788 01       		.byte	0x1
 5508 0789 0305     		.2byte	0x503
 5509 078b C3000000 		.4byte	0xc3
 5510 078f 02       		.uleb128 0x2
 5511 0790 91       		.byte	0x91
 5512 0791 74       		.sleb128 -12
 5513 0792 00       		.byte	0
 5514 0793 1D       		.uleb128 0x1d
 5515 0794 53000000 		.4byte	.LASF96
 5516 0798 01       		.byte	0x1
 5517 0799 3005     		.2byte	0x530
 5518 079b 00000000 		.4byte	.LFB85
 5519 079f 68020000 		.4byte	.LFE85-.LFB85
 5520 07a3 01       		.uleb128 0x1
 5521 07a4 9C       		.byte	0x9c
 5522 07a5 3B080000 		.4byte	0x83b
 5523 07a9 16       		.uleb128 0x16
 5524 07aa B8070000 		.4byte	.LASF97
 5525 07ae 01       		.byte	0x1
 5526 07af 3005     		.2byte	0x530
 5527 07b1 94000000 		.4byte	0x94
 5528 07b5 02       		.uleb128 0x2
 5529 07b6 91       		.byte	0x91
 5530 07b7 5C       		.sleb128 -36
 5531 07b8 16       		.uleb128 0x16
 5532 07b9 2E0B0000 		.4byte	.LASF78
 5533 07bd 01       		.byte	0x1
 5534 07be 3005     		.2byte	0x530
 5535 07c0 94000000 		.4byte	0x94
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 125


 5536 07c4 02       		.uleb128 0x2
 5537 07c5 91       		.byte	0x91
 5538 07c6 58       		.sleb128 -40
 5539 07c7 16       		.uleb128 0x16
 5540 07c8 57080000 		.4byte	.LASF98
 5541 07cc 01       		.byte	0x1
 5542 07cd 3005     		.2byte	0x530
 5543 07cf 94000000 		.4byte	0x94
 5544 07d3 02       		.uleb128 0x2
 5545 07d4 91       		.byte	0x91
 5546 07d5 54       		.sleb128 -44
 5547 07d6 1B       		.uleb128 0x1b
 5548 07d7 12000000 		.4byte	.LBB14
 5549 07db 4C000000 		.4byte	.LBE14-.LBB14
 5550 07df F3070000 		.4byte	0x7f3
 5551 07e3 17       		.uleb128 0x17
 5552 07e4 17090000 		.4byte	.LASF99
 5553 07e8 01       		.byte	0x1
 5554 07e9 3805     		.2byte	0x538
 5555 07eb 09010000 		.4byte	0x109
 5556 07ef 02       		.uleb128 0x2
 5557 07f0 91       		.byte	0x91
 5558 07f1 60       		.sleb128 -32
 5559 07f2 00       		.byte	0
 5560 07f3 1F       		.uleb128 0x1f
 5561 07f4 00000000 		.4byte	.Ldebug_ranges0+0
 5562 07f8 17       		.uleb128 0x17
 5563 07f9 59050000 		.4byte	.LASF100
 5564 07fd 01       		.byte	0x1
 5565 07fe 4C05     		.2byte	0x54c
 5566 0800 94000000 		.4byte	0x94
 5567 0804 02       		.uleb128 0x2
 5568 0805 91       		.byte	0x91
 5569 0806 6C       		.sleb128 -20
 5570 0807 1B       		.uleb128 0x1b
 5571 0808 82000000 		.4byte	.LBB16
 5572 080c 34000000 		.4byte	.LBE16-.LBB16
 5573 0810 22080000 		.4byte	0x822
 5574 0814 18       		.uleb128 0x18
 5575 0815 6900     		.ascii	"i\000"
 5576 0817 01       		.byte	0x1
 5577 0818 5005     		.2byte	0x550
 5578 081a 94000000 		.4byte	0x94
 5579 081e 02       		.uleb128 0x2
 5580 081f 91       		.byte	0x91
 5581 0820 68       		.sleb128 -24
 5582 0821 00       		.byte	0
 5583 0822 1C       		.uleb128 0x1c
 5584 0823 C8000000 		.4byte	.LBB17
 5585 0827 52000000 		.4byte	.LBE17-.LBB17
 5586 082b 18       		.uleb128 0x18
 5587 082c 6900     		.ascii	"i\000"
 5588 082e 01       		.byte	0x1
 5589 082f 5D05     		.2byte	0x55d
 5590 0831 94000000 		.4byte	0x94
 5591 0835 02       		.uleb128 0x2
 5592 0836 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 126


 5593 0837 64       		.sleb128 -28
 5594 0838 00       		.byte	0
 5595 0839 00       		.byte	0
 5596 083a 00       		.byte	0
 5597 083b 07       		.uleb128 0x7
 5598 083c D9000000 		.4byte	0xd9
 5599 0840 4B080000 		.4byte	0x84b
 5600 0844 08       		.uleb128 0x8
 5601 0845 42010000 		.4byte	0x142
 5602 0849 01       		.byte	0x1
 5603 084a 00       		.byte	0
 5604 084b 13       		.uleb128 0x13
 5605 084c 85060000 		.4byte	.LASF101
 5606 0850 01       		.byte	0x1
 5607 0851 C0       		.byte	0xc0
 5608 0852 3B080000 		.4byte	0x83b
 5609 0856 05       		.uleb128 0x5
 5610 0857 03       		.byte	0x3
 5611 0858 30000000 		.4byte	eepromArray
 5612 085c 07       		.uleb128 0x7
 5613 085d D9000000 		.4byte	0xd9
 5614 0861 6C080000 		.4byte	0x86c
 5615 0865 08       		.uleb128 0x8
 5616 0866 42010000 		.4byte	0x142
 5617 086a 00       		.byte	0
 5618 086b 00       		.byte	0
 5619 086c 20       		.uleb128 0x20
 5620 086d 3D000000 		.4byte	.LASF102
 5621 0871 07       		.byte	0x7
 5622 0872 1001     		.2byte	0x110
 5623 0874 5C080000 		.4byte	0x85c
 5624 0878 21       		.uleb128 0x21
 5625 0879 84070000 		.4byte	.LASF103
 5626 087d 08       		.byte	0x8
 5627 087e F3       		.byte	0xf3
 5628 087f 36010000 		.4byte	0x136
 5629 0883 21       		.uleb128 0x21
 5630 0884 F3030000 		.4byte	.LASF104
 5631 0888 08       		.byte	0x8
 5632 0889 F9       		.byte	0xf9
 5633 088a 36010000 		.4byte	0x136
 5634 088e 07       		.uleb128 0x7
 5635 088f D9000000 		.4byte	0xd9
 5636 0893 9E080000 		.4byte	0x89e
 5637 0897 08       		.uleb128 0x8
 5638 0898 42010000 		.4byte	0x142
 5639 089c 3F       		.byte	0x3f
 5640 089d 00       		.byte	0
 5641 089e 21       		.uleb128 0x21
 5642 089f 19040000 		.4byte	.LASF105
 5643 08a3 08       		.byte	0x8
 5644 08a4 FA       		.byte	0xfa
 5645 08a5 8E080000 		.4byte	0x88e
 5646 08a9 21       		.uleb128 0x21
 5647 08aa AB090000 		.4byte	.LASF106
 5648 08ae 08       		.byte	0x8
 5649 08af FE       		.byte	0xfe
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 127


 5650 08b0 36010000 		.4byte	0x136
 5651 08b4 21       		.uleb128 0x21
 5652 08b5 9D010000 		.4byte	.LASF107
 5653 08b9 08       		.byte	0x8
 5654 08ba FF       		.byte	0xff
 5655 08bb 8E080000 		.4byte	0x88e
 5656 08bf 21       		.uleb128 0x21
 5657 08c0 CC090000 		.4byte	.LASF108
 5658 08c4 09       		.byte	0x9
 5659 08c5 82       		.byte	0x82
 5660 08c6 CB010000 		.4byte	0x1cb
 5661 08ca 07       		.uleb128 0x7
 5662 08cb DB080000 		.4byte	0x8db
 5663 08cf DB080000 		.4byte	0x8db
 5664 08d3 22       		.uleb128 0x22
 5665 08d4 42010000 		.4byte	0x142
 5666 08d8 FF03     		.2byte	0x3ff
 5667 08da 00       		.byte	0
 5668 08db 23       		.uleb128 0x23
 5669 08dc A2000000 		.4byte	0xa2
 5670 08e0 24       		.uleb128 0x24
 5671 08e1 82020000 		.4byte	.LASF109
 5672 08e5 01       		.byte	0x1
 5673 08e6 CD       		.byte	0xcd
 5674 08e7 F1080000 		.4byte	0x8f1
 5675 08eb 05       		.uleb128 0x5
 5676 08ec 03       		.byte	0x3
 5677 08ed 00000000 		.4byte	Em_EEPROM_em_EepromStorage
 5678 08f1 23       		.uleb128 0x23
 5679 08f2 CA080000 		.4byte	0x8ca
 5680 08f6 20       		.uleb128 0x20
 5681 08f7 DD010000 		.4byte	.LASF110
 5682 08fb 0A       		.byte	0xa
 5683 08fc 1207     		.2byte	0x712
 5684 08fe 02090000 		.4byte	0x902
 5685 0902 06       		.uleb128 0x6
 5686 0903 B8000000 		.4byte	0xb8
 5687 0907 24       		.uleb128 0x24
 5688 0908 19070000 		.4byte	.LASF111
 5689 090c 01       		.byte	0x1
 5690 090d 31       		.byte	0x31
 5691 090e 36010000 		.4byte	0x136
 5692 0912 05       		.uleb128 0x5
 5693 0913 03       		.byte	0x3
 5694 0914 00000000 		.4byte	usbActivityCounter
 5695 0918 24       		.uleb128 0x24
 5696 0919 63060000 		.4byte	.LASF75
 5697 091d 01       		.byte	0x1
 5698 091e 32       		.byte	0x32
 5699 091f 49010000 		.4byte	0x149
 5700 0923 05       		.uleb128 0x5
 5701 0924 03       		.byte	0x3
 5702 0925 00000000 		.4byte	midiMsg
 5703 0929 24       		.uleb128 0x24
 5704 092a 1A0B0000 		.4byte	.LASF112
 5705 092e 01       		.byte	0x1
 5706 092f 33       		.byte	0x33
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 128


 5707 0930 0F020000 		.4byte	0x20f
 5708 0934 05       		.uleb128 0x5
 5709 0935 03       		.byte	0x3
 5710 0936 00000000 		.4byte	currentVBUS
 5711 093a 24       		.uleb128 0x24
 5712 093b 1B000000 		.4byte	.LASF113
 5713 093f 01       		.byte	0x1
 5714 0940 34       		.byte	0x34
 5715 0941 0F020000 		.4byte	0x20f
 5716 0945 05       		.uleb128 0x5
 5717 0946 03       		.byte	0x3
 5718 0947 00000000 		.4byte	prevVBUS
 5719 094b 24       		.uleb128 0x24
 5720 094c C1090000 		.4byte	.LASF114
 5721 0950 01       		.byte	0x1
 5722 0951 35       		.byte	0x35
 5723 0952 0F020000 		.4byte	0x20f
 5724 0956 05       		.uleb128 0x5
 5725 0957 03       		.byte	0x3
 5726 0958 00000000 		.4byte	USB_active
 5727 095c 24       		.uleb128 0x24
 5728 095d 8E010000 		.4byte	.LASF115
 5729 0961 01       		.byte	0x1
 5730 0962 36       		.byte	0x36
 5731 0963 0F020000 		.4byte	0x20f
 5732 0967 05       		.uleb128 0x5
 5733 0968 03       		.byte	0x3
 5734 0969 00000000 		.4byte	USB_check_flag
 5735 096d 24       		.uleb128 0x24
 5736 096e F0080000 		.4byte	.LASF116
 5737 0972 01       		.byte	0x1
 5738 0973 38       		.byte	0x38
 5739 0974 AD000000 		.4byte	0xad
 5740 0978 05       		.uleb128 0x5
 5741 0979 03       		.byte	0x3
 5742 097a 00000000 		.4byte	midiSent
 5743 097e 24       		.uleb128 0x24
 5744 097f 3F0A0000 		.4byte	.LASF117
 5745 0983 01       		.byte	0x1
 5746 0984 39       		.byte	0x39
 5747 0985 AD000000 		.4byte	0xad
 5748 0989 05       		.uleb128 0x5
 5749 098a 03       		.byte	0x3
 5750 098b 00000000 		.4byte	midiOverflow
 5751 098f 24       		.uleb128 0x24
 5752 0990 F9020000 		.4byte	.LASF118
 5753 0994 01       		.byte	0x1
 5754 0995 3B       		.byte	0x3b
 5755 0996 24020000 		.4byte	0x224
 5756 099a 05       		.uleb128 0x5
 5757 099b 03       		.byte	0x3
 5758 099c 00000000 		.4byte	scanPart
 5759 09a0 24       		.uleb128 0x24
 5760 09a1 32080000 		.4byte	.LASF79
 5761 09a5 01       		.byte	0x1
 5762 09a6 3C       		.byte	0x3c
 5763 09a7 24020000 		.4byte	0x224
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 129


 5764 09ab 05       		.uleb128 0x5
 5765 09ac 03       		.byte	0x3
 5766 09ad 00000000 		.4byte	channel
 5767 09b1 24       		.uleb128 0x24
 5768 09b2 FD0A0000 		.4byte	.LASF119
 5769 09b6 01       		.byte	0x1
 5770 09b7 3E       		.byte	0x3e
 5771 09b8 24020000 		.4byte	0x224
 5772 09bc 05       		.uleb128 0x5
 5773 09bd 03       		.byte	0x3
 5774 09be 00000000 		.4byte	currentOutPointer
 5775 09c2 24       		.uleb128 0x24
 5776 09c3 B7060000 		.4byte	.LASF120
 5777 09c7 01       		.byte	0x1
 5778 09c8 3F       		.byte	0x3f
 5779 09c9 24020000 		.4byte	0x224
 5780 09cd 05       		.uleb128 0x5
 5781 09ce 03       		.byte	0x3
 5782 09cf 00000000 		.4byte	outChanged
 5783 09d3 07       		.uleb128 0x7
 5784 09d4 0F020000 		.4byte	0x20f
 5785 09d8 E3090000 		.4byte	0x9e3
 5786 09dc 08       		.uleb128 0x8
 5787 09dd 42010000 		.4byte	0x142
 5788 09e1 FF       		.byte	0xff
 5789 09e2 00       		.byte	0
 5790 09e3 24       		.uleb128 0x24
 5791 09e4 BD040000 		.4byte	.LASF121
 5792 09e8 01       		.byte	0x1
 5793 09e9 52       		.byte	0x52
 5794 09ea F4090000 		.4byte	0x9f4
 5795 09ee 05       		.uleb128 0x5
 5796 09ef 03       		.byte	0x3
 5797 09f0 00000000 		.4byte	I2Cbuff1
 5798 09f4 06       		.uleb128 0x6
 5799 09f5 D3090000 		.4byte	0x9d3
 5800 09f9 07       		.uleb128 0x7
 5801 09fa A2000000 		.4byte	0xa2
 5802 09fe 090A0000 		.4byte	0xa09
 5803 0a02 08       		.uleb128 0x8
 5804 0a03 42010000 		.4byte	0x142
 5805 0a07 00       		.byte	0
 5806 0a08 00       		.byte	0
 5807 0a09 24       		.uleb128 0x24
 5808 0a0a EA010000 		.4byte	.LASF122
 5809 0a0e 01       		.byte	0x1
 5810 0a0f 53       		.byte	0x53
 5811 0a10 F9090000 		.4byte	0x9f9
 5812 0a14 05       		.uleb128 0x5
 5813 0a15 03       		.byte	0x3
 5814 0a16 00000000 		.4byte	stringCapSensorsOnOff
 5815 0a1a 07       		.uleb128 0x7
 5816 0a1b A2000000 		.4byte	0xa2
 5817 0a1f 2A0A0000 		.4byte	0xa2a
 5818 0a23 08       		.uleb128 0x8
 5819 0a24 42010000 		.4byte	0x142
 5820 0a28 0F       		.byte	0xf
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 130


 5821 0a29 00       		.byte	0
 5822 0a2a 24       		.uleb128 0x24
 5823 0a2b 00000000 		.4byte	.LASF123
 5824 0a2f 01       		.byte	0x1
 5825 0a30 54       		.byte	0x54
 5826 0a31 1A0A0000 		.4byte	0xa1a
 5827 0a35 05       		.uleb128 0x5
 5828 0a36 03       		.byte	0x3
 5829 0a37 00000000 		.4byte	stringCapSensorsRaw
 5830 0a3b 07       		.uleb128 0x7
 5831 0a3c A2000000 		.4byte	0xa2
 5832 0a40 4B0A0000 		.4byte	0xa4b
 5833 0a44 08       		.uleb128 0x8
 5834 0a45 42010000 		.4byte	0x142
 5835 0a49 07       		.byte	0x7
 5836 0a4a 00       		.byte	0
 5837 0a4b 24       		.uleb128 0x24
 5838 0a4c D40A0000 		.4byte	.LASF124
 5839 0a50 01       		.byte	0x1
 5840 0a51 55       		.byte	0x55
 5841 0a52 3B0A0000 		.4byte	0xa3b
 5842 0a56 05       		.uleb128 0x5
 5843 0a57 03       		.byte	0x3
 5844 0a58 00000000 		.4byte	thresholdArray
 5845 0a5c 07       		.uleb128 0x7
 5846 0a5d C3000000 		.4byte	0xc3
 5847 0a61 720A0000 		.4byte	0xa72
 5848 0a65 08       		.uleb128 0x8
 5849 0a66 42010000 		.4byte	0x142
 5850 0a6a 03       		.byte	0x3
 5851 0a6b 08       		.uleb128 0x8
 5852 0a6c 42010000 		.4byte	0x142
 5853 0a70 01       		.byte	0x1
 5854 0a71 00       		.byte	0
 5855 0a72 24       		.uleb128 0x24
 5856 0a73 CB020000 		.4byte	.LASF125
 5857 0a77 01       		.byte	0x1
 5858 0a78 5E       		.byte	0x5e
 5859 0a79 5C0A0000 		.4byte	0xa5c
 5860 0a7d 05       		.uleb128 0x5
 5861 0a7e 03       		.byte	0x3
 5862 0a7f 00000000 		.4byte	fretMeasurements
 5863 0a83 07       		.uleb128 0x7
 5864 0a84 09010000 		.4byte	0x109
 5865 0a88 930A0000 		.4byte	0xa93
 5866 0a8c 08       		.uleb128 0x8
 5867 0a8d 42010000 		.4byte	0x142
 5868 0a91 01       		.byte	0x1
 5869 0a92 00       		.byte	0
 5870 0a93 24       		.uleb128 0x24
 5871 0a94 5F000000 		.4byte	.LASF126
 5872 0a98 01       		.byte	0x1
 5873 0a99 6C       		.byte	0x6c
 5874 0a9a 830A0000 		.4byte	0xa83
 5875 0a9e 05       		.uleb128 0x5
 5876 0a9f 03       		.byte	0x3
 5877 0aa0 00000000 		.4byte	fretRatios
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 131


 5878 0aa4 07       		.uleb128 0x7
 5879 0aa5 A2000000 		.4byte	0xa2
 5880 0aa9 B40A0000 		.4byte	0xab4
 5881 0aad 08       		.uleb128 0x8
 5882 0aae 42010000 		.4byte	0x142
 5883 0ab2 7F       		.byte	0x7f
 5884 0ab3 00       		.byte	0
 5885 0ab4 24       		.uleb128 0x24
 5886 0ab5 31000000 		.4byte	.LASF127
 5887 0ab9 01       		.byte	0x1
 5888 0aba 6E       		.byte	0x6e
 5889 0abb A40A0000 		.4byte	0xaa4
 5890 0abf 05       		.uleb128 0x5
 5891 0ac0 03       		.byte	0x3
 5892 0ac1 00000000 		.4byte	sysexBuffer
 5893 0ac5 24       		.uleb128 0x24
 5894 0ac6 CE040000 		.4byte	.LASF128
 5895 0aca 01       		.byte	0x1
 5896 0acb 6F       		.byte	0x6f
 5897 0acc C3000000 		.4byte	0xc3
 5898 0ad0 05       		.uleb128 0x5
 5899 0ad1 03       		.byte	0x3
 5900 0ad2 00000000 		.4byte	sysexPointer
 5901 0ad6 24       		.uleb128 0x24
 5902 0ad7 A1000000 		.4byte	.LASF129
 5903 0adb 01       		.byte	0x1
 5904 0adc 70       		.byte	0x70
 5905 0add A2000000 		.4byte	0xa2
 5906 0ae1 05       		.uleb128 0x5
 5907 0ae2 03       		.byte	0x3
 5908 0ae3 00000000 		.4byte	receivingSysex
 5909 0ae7 24       		.uleb128 0x24
 5910 0ae8 74080000 		.4byte	.LASF130
 5911 0aec 01       		.byte	0x1
 5912 0aed 71       		.byte	0x71
 5913 0aee A2000000 		.4byte	0xa2
 5914 0af2 05       		.uleb128 0x5
 5915 0af3 03       		.byte	0x3
 5916 0af4 00000000 		.4byte	parsingSysex
 5917 0af8 07       		.uleb128 0x7
 5918 0af9 0F020000 		.4byte	0x20f
 5919 0afd 090B0000 		.4byte	0xb09
 5920 0b01 22       		.uleb128 0x22
 5921 0b02 42010000 		.4byte	0x142
 5922 0b06 FF07     		.2byte	0x7ff
 5923 0b08 00       		.byte	0
 5924 0b09 24       		.uleb128 0x24
 5925 0b0a F6050000 		.4byte	.LASF131
 5926 0b0e 01       		.byte	0x1
 5927 0b0f 72       		.byte	0x72
 5928 0b10 1A0B0000 		.4byte	0xb1a
 5929 0b14 05       		.uleb128 0x5
 5930 0b15 03       		.byte	0x3
 5931 0b16 00000000 		.4byte	presetArray
 5932 0b1a 06       		.uleb128 0x6
 5933 0b1b F80A0000 		.4byte	0xaf8
 5934 0b1f 24       		.uleb128 0x24
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 132


 5935 0b20 530A0000 		.4byte	.LASF132
 5936 0b24 01       		.byte	0x1
 5937 0b25 7A       		.byte	0x7a
 5938 0b26 A2000000 		.4byte	0xa2
 5939 0b2a 05       		.uleb128 0x5
 5940 0b2b 03       		.byte	0x3
 5941 0b2c 00000000 		.4byte	presetArraySection
 5942 0b30 24       		.uleb128 0x24
 5943 0b31 E0060000 		.4byte	.LASF133
 5944 0b35 01       		.byte	0x1
 5945 0b36 7C       		.byte	0x7c
 5946 0b37 AD000000 		.4byte	0xad
 5947 0b3b 05       		.uleb128 0x5
 5948 0b3c 03       		.byte	0x3
 5949 0b3d 00000000 		.4byte	presetArraySendCount
 5950 0b41 24       		.uleb128 0x24
 5951 0b42 60030000 		.4byte	.LASF134
 5952 0b46 01       		.byte	0x1
 5953 0b47 7D       		.byte	0x7d
 5954 0b48 AD000000 		.4byte	0xad
 5955 0b4c 05       		.uleb128 0x5
 5956 0b4d 03       		.byte	0x3
 5957 0b4e 00000000 		.4byte	presetArraySize
 5958 0b52 24       		.uleb128 0x24
 5959 0b53 78010000 		.4byte	.LASF135
 5960 0b57 01       		.byte	0x1
 5961 0b58 7F       		.byte	0x7f
 5962 0b59 A2000000 		.4byte	0xa2
 5963 0b5d 05       		.uleb128 0x5
 5964 0b5e 03       		.byte	0x3
 5965 0b5f 00000000 		.4byte	sysexPresetInProgress
 5966 0b63 07       		.uleb128 0x7
 5967 0b64 B8000000 		.4byte	0xb8
 5968 0b68 730B0000 		.4byte	0xb73
 5969 0b6c 08       		.uleb128 0x8
 5970 0b6d 42010000 		.4byte	0x142
 5971 0b71 03       		.byte	0x3
 5972 0b72 00       		.byte	0
 5973 0b73 24       		.uleb128 0x24
 5974 0b74 4F090000 		.4byte	.LASF136
 5975 0b78 01       		.byte	0x1
 5976 0b79 81       		.byte	0x81
 5977 0b7a 630B0000 		.4byte	0xb63
 5978 0b7e 05       		.uleb128 0x5
 5979 0b7f 03       		.byte	0x3
 5980 0b80 00000000 		.4byte	linearPotValue32Bit
 5981 0b84 25       		.uleb128 0x25
 5982 0b85 6900     		.ascii	"i\000"
 5983 0b87 01       		.byte	0x1
 5984 0b88 82       		.byte	0x82
 5985 0b89 A2000000 		.4byte	0xa2
 5986 0b8d 05       		.uleb128 0x5
 5987 0b8e 03       		.byte	0x3
 5988 0b8f 00000000 		.4byte	i
 5989 0b93 24       		.uleb128 0x24
 5990 0b94 9C090000 		.4byte	.LASF137
 5991 0b98 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 133


 5992 0b99 83       		.byte	0x83
 5993 0b9a A2000000 		.4byte	0xa2
 5994 0b9e 05       		.uleb128 0x5
 5995 0b9f 03       		.byte	0x3
 5996 0ba0 00000000 		.4byte	counter
 5997 0ba4 24       		.uleb128 0x24
 5998 0ba5 110A0000 		.4byte	.LASF138
 5999 0ba9 01       		.byte	0x1
 6000 0baa 84       		.byte	0x84
 6001 0bab B8000000 		.4byte	0xb8
 6002 0baf 05       		.uleb128 0x5
 6003 0bb0 03       		.byte	0x3
 6004 0bb1 00000000 		.4byte	temper
 6005 0bb5 07       		.uleb128 0x7
 6006 0bb6 94000000 		.4byte	0x94
 6007 0bba C50B0000 		.4byte	0xbc5
 6008 0bbe 08       		.uleb128 0x8
 6009 0bbf 42010000 		.4byte	0x142
 6010 0bc3 0A       		.byte	0xa
 6011 0bc4 00       		.byte	0
 6012 0bc5 24       		.uleb128 0x24
 6013 0bc6 2A050000 		.4byte	.LASF139
 6014 0bca 01       		.byte	0x1
 6015 0bcb 85       		.byte	0x85
 6016 0bcc B50B0000 		.4byte	0xbb5
 6017 0bd0 05       		.uleb128 0x5
 6018 0bd1 03       		.byte	0x3
 6019 0bd2 00000000 		.4byte	previousButtons
 6020 0bd6 24       		.uleb128 0x24
 6021 0bd7 F1090000 		.4byte	.LASF140
 6022 0bdb 01       		.byte	0x1
 6023 0bdc 86       		.byte	0x86
 6024 0bdd 94000000 		.4byte	0x94
 6025 0be1 05       		.uleb128 0x5
 6026 0be2 03       		.byte	0x3
 6027 0be3 00000000 		.4byte	octave
 6028 0be7 07       		.uleb128 0x7
 6029 0be8 94000000 		.4byte	0x94
 6030 0bec F70B0000 		.4byte	0xbf7
 6031 0bf0 08       		.uleb128 0x8
 6032 0bf1 42010000 		.4byte	0x142
 6033 0bf5 03       		.byte	0x3
 6034 0bf6 00       		.byte	0
 6035 0bf7 24       		.uleb128 0x24
 6036 0bf8 D2050000 		.4byte	.LASF141
 6037 0bfc 01       		.byte	0x1
 6038 0bfd 88       		.byte	0x88
 6039 0bfe E70B0000 		.4byte	0xbe7
 6040 0c02 05       		.uleb128 0x5
 6041 0c03 03       		.byte	0x3
 6042 0c04 00000000 		.4byte	stringPlucks
 6043 0c08 24       		.uleb128 0x24
 6044 0c09 EC0A0000 		.4byte	.LASF142
 6045 0c0d 01       		.byte	0x1
 6046 0c0e 89       		.byte	0x89
 6047 0c0f E70B0000 		.4byte	0xbe7
 6048 0c13 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 134


 6049 0c14 03       		.byte	0x3
 6050 0c15 00000000 		.4byte	stringPlucksPrev
 6051 0c19 07       		.uleb128 0x7
 6052 0c1a C3000000 		.4byte	0xc3
 6053 0c1e 2F0C0000 		.4byte	0xc2f
 6054 0c22 08       		.uleb128 0x8
 6055 0c23 42010000 		.4byte	0x142
 6056 0c27 04       		.byte	0x4
 6057 0c28 08       		.uleb128 0x8
 6058 0c29 42010000 		.4byte	0x142
 6059 0c2d 07       		.byte	0x7
 6060 0c2e 00       		.byte	0
 6061 0c2f 24       		.uleb128 0x24
 6062 0c30 37030000 		.4byte	.LASF143
 6063 0c34 01       		.byte	0x1
 6064 0c35 8E       		.byte	0x8e
 6065 0c36 190C0000 		.4byte	0xc19
 6066 0c3a 05       		.uleb128 0x5
 6067 0c3b 03       		.byte	0x3
 6068 0c3c 00000000 		.4byte	knobsFIR
 6069 0c40 07       		.uleb128 0x7
 6070 0c41 09010000 		.4byte	0x109
 6071 0c45 500C0000 		.4byte	0xc50
 6072 0c49 08       		.uleb128 0x8
 6073 0c4a 42010000 		.4byte	0x142
 6074 0c4e 03       		.byte	0x3
 6075 0c4f 00       		.byte	0
 6076 0c50 24       		.uleb128 0x24
 6077 0c51 08080000 		.4byte	.LASF144
 6078 0c55 01       		.byte	0x1
 6079 0c56 95       		.byte	0x95
 6080 0c57 400C0000 		.4byte	0xc40
 6081 0c5b 05       		.uleb128 0x5
 6082 0c5c 03       		.byte	0x3
 6083 0c5d 00000000 		.4byte	hysteresisStates
 6084 0c61 24       		.uleb128 0x24
 6085 0c62 2B0A0000 		.4byte	.LASF145
 6086 0c66 01       		.byte	0x1
 6087 0c67 96       		.byte	0x96
 6088 0c68 09010000 		.4byte	0x109
 6089 0c6c 05       		.uleb128 0x5
 6090 0c6d 03       		.byte	0x3
 6091 0c6e 00000000 		.4byte	hysteresisLowThresh
 6092 0c72 24       		.uleb128 0x24
 6093 0c73 750A0000 		.4byte	.LASF146
 6094 0c77 01       		.byte	0x1
 6095 0c78 97       		.byte	0x97
 6096 0c79 09010000 		.4byte	0x109
 6097 0c7d 05       		.uleb128 0x5
 6098 0c7e 03       		.byte	0x3
 6099 0c7f 00000000 		.4byte	hysteresisHighThresh
 6100 0c83 24       		.uleb128 0x24
 6101 0c84 AE030000 		.4byte	.LASF147
 6102 0c88 01       		.byte	0x1
 6103 0c89 AD       		.byte	0xad
 6104 0c8a 36010000 		.4byte	0x136
 6105 0c8e 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 135


 6106 0c8f 03       		.byte	0x3
 6107 0c90 00000000 		.4byte	txChannel
 6108 0c94 24       		.uleb128 0x24
 6109 0c95 3D060000 		.4byte	.LASF148
 6110 0c99 01       		.byte	0x1
 6111 0c9a AE       		.byte	0xae
 6112 0c9b 36010000 		.4byte	0x136
 6113 0c9f 05       		.uleb128 0x5
 6114 0ca0 03       		.byte	0x3
 6115 0ca1 00000000 		.4byte	txTD
 6116 0ca5 07       		.uleb128 0x7
 6117 0ca6 36010000 		.4byte	0x136
 6118 0caa B50C0000 		.4byte	0xcb5
 6119 0cae 08       		.uleb128 0x8
 6120 0caf 42010000 		.4byte	0x142
 6121 0cb3 0F       		.byte	0xf
 6122 0cb4 00       		.byte	0
 6123 0cb5 24       		.uleb128 0x24
 6124 0cb6 220A0000 		.4byte	.LASF149
 6125 0cba 01       		.byte	0x1
 6126 0cbb AF       		.byte	0xaf
 6127 0cbc C60C0000 		.4byte	0xcc6
 6128 0cc0 05       		.uleb128 0x5
 6129 0cc1 03       		.byte	0x3
 6130 0cc2 00000000 		.4byte	txBuffer
 6131 0cc6 06       		.uleb128 0x6
 6132 0cc7 A50C0000 		.4byte	0xca5
 6133 0ccb 24       		.uleb128 0x24
 6134 0ccc 440B0000 		.4byte	.LASF150
 6135 0cd0 01       		.byte	0x1
 6136 0cd1 B1       		.byte	0xb1
 6137 0cd2 36010000 		.4byte	0x136
 6138 0cd6 05       		.uleb128 0x5
 6139 0cd7 03       		.byte	0x3
 6140 0cd8 00000000 		.4byte	rxChannel
 6141 0cdc 24       		.uleb128 0x24
 6142 0cdd 3A080000 		.4byte	.LASF151
 6143 0ce1 01       		.byte	0x1
 6144 0ce2 B2       		.byte	0xb2
 6145 0ce3 36010000 		.4byte	0x136
 6146 0ce7 05       		.uleb128 0x5
 6147 0ce8 03       		.byte	0x3
 6148 0ce9 00000000 		.4byte	rxTD
 6149 0ced 24       		.uleb128 0x24
 6150 0cee 69020000 		.4byte	.LASF152
 6151 0cf2 01       		.byte	0x1
 6152 0cf3 B3       		.byte	0xb3
 6153 0cf4 FE0C0000 		.4byte	0xcfe
 6154 0cf8 05       		.uleb128 0x5
 6155 0cf9 03       		.byte	0x3
 6156 0cfa 00000000 		.4byte	rxBuffer
 6157 0cfe 06       		.uleb128 0x6
 6158 0cff A50C0000 		.4byte	0xca5
 6159 0d03 24       		.uleb128 0x24
 6160 0d04 6F040000 		.4byte	.LASF153
 6161 0d08 01       		.byte	0x1
 6162 0d09 B6       		.byte	0xb6
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 136


 6163 0d0a 36010000 		.4byte	0x136
 6164 0d0e 05       		.uleb128 0x5
 6165 0d0f 03       		.byte	0x3
 6166 0d10 00000000 		.4byte	tx2Channel
 6167 0d14 24       		.uleb128 0x24
 6168 0d15 13070000 		.4byte	.LASF154
 6169 0d19 01       		.byte	0x1
 6170 0d1a B7       		.byte	0xb7
 6171 0d1b 36010000 		.4byte	0x136
 6172 0d1f 05       		.uleb128 0x5
 6173 0d20 03       		.byte	0x3
 6174 0d21 00000000 		.4byte	tx2TD
 6175 0d25 24       		.uleb128 0x24
 6176 0d26 180A0000 		.4byte	.LASF155
 6177 0d2a 01       		.byte	0x1
 6178 0d2b B8       		.byte	0xb8
 6179 0d2c 360D0000 		.4byte	0xd36
 6180 0d30 05       		.uleb128 0x5
 6181 0d31 03       		.byte	0x3
 6182 0d32 00000000 		.4byte	tx2Buffer
 6183 0d36 06       		.uleb128 0x6
 6184 0d37 A50C0000 		.4byte	0xca5
 6185 0d3b 24       		.uleb128 0x24
 6186 0d3c 58040000 		.4byte	.LASF156
 6187 0d40 01       		.byte	0x1
 6188 0d41 BA       		.byte	0xba
 6189 0d42 36010000 		.4byte	0x136
 6190 0d46 05       		.uleb128 0x5
 6191 0d47 03       		.byte	0x3
 6192 0d48 00000000 		.4byte	rx2Channel
 6193 0d4c 24       		.uleb128 0x24
 6194 0d4d 8C040000 		.4byte	.LASF157
 6195 0d51 01       		.byte	0x1
 6196 0d52 BB       		.byte	0xbb
 6197 0d53 36010000 		.4byte	0x136
 6198 0d57 05       		.uleb128 0x5
 6199 0d58 03       		.byte	0x3
 6200 0d59 00000000 		.4byte	rx2TD
 6201 0d5d 24       		.uleb128 0x24
 6202 0d5e C2060000 		.4byte	.LASF158
 6203 0d62 01       		.byte	0x1
 6204 0d63 BC       		.byte	0xbc
 6205 0d64 6E0D0000 		.4byte	0xd6e
 6206 0d68 05       		.uleb128 0x5
 6207 0d69 03       		.byte	0x3
 6208 0d6a 00000000 		.4byte	rx2Buffer
 6209 0d6e 06       		.uleb128 0x6
 6210 0d6f A50C0000 		.4byte	0xca5
 6211 0d73 24       		.uleb128 0x24
 6212 0d74 42060000 		.4byte	.LASF159
 6213 0d78 01       		.byte	0x1
 6214 0d79 BE       		.byte	0xbe
 6215 0d7a 840D0000 		.4byte	0xd84
 6216 0d7e 05       		.uleb128 0x5
 6217 0d7f 03       		.byte	0x3
 6218 0d80 00000000 		.4byte	tx2BufferTemp
 6219 0d84 06       		.uleb128 0x6
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 137


 6220 0d85 A50C0000 		.4byte	0xca5
 6221 0d89 24       		.uleb128 0x24
 6222 0d8a 97030000 		.4byte	.LASF160
 6223 0d8e 01       		.byte	0x1
 6224 0d8f C2       		.byte	0xc2
 6225 0d90 3B080000 		.4byte	0x83b
 6226 0d94 05       		.uleb128 0x5
 6227 0d95 03       		.byte	0x3
 6228 0d96 00000000 		.4byte	array
 6229 0d9a 24       		.uleb128 0x24
 6230 0d9b 3A050000 		.4byte	.LASF161
 6231 0d9f 01       		.byte	0x1
 6232 0da0 C5       		.byte	0xc5
 6233 0da1 03020000 		.4byte	0x203
 6234 0da5 05       		.uleb128 0x5
 6235 0da6 03       		.byte	0x3
 6236 0da7 00000000 		.4byte	eepromReturnValue
 6237 0dab 24       		.uleb128 0x24
 6238 0dac 92040000 		.4byte	.LASF162
 6239 0db0 01       		.byte	0x1
 6240 0db1 D1       		.byte	0xd1
 6241 0db2 D9000000 		.4byte	0xd9
 6242 0db6 05       		.uleb128 0x5
 6243 0db7 03       		.byte	0x3
 6244 0db8 00000000 		.4byte	eeprom_cnt
 6245 0dbc 24       		.uleb128 0x24
 6246 0dbd 4C0A0000 		.4byte	.LASF94
 6247 0dc1 01       		.byte	0x1
 6248 0dc2 D2       		.byte	0xd2
 6249 0dc3 1E010000 		.4byte	0x11e
 6250 0dc7 05       		.uleb128 0x5
 6251 0dc8 03       		.byte	0x3
 6252 0dc9 00000000 		.4byte	status
 6253 0dcd 25       		.uleb128 0x25
 6254 0dce 70747200 		.ascii	"ptr\000"
 6255 0dd2 01       		.byte	0x1
 6256 0dd3 D3       		.byte	0xd3
 6257 0dd4 DE0D0000 		.4byte	0xdde
 6258 0dd8 05       		.uleb128 0x5
 6259 0dd9 03       		.byte	0x3
 6260 0dda 00000000 		.4byte	ptr
 6261 0dde 1E       		.uleb128 0x1e
 6262 0ddf 04       		.byte	0x4
 6263 0de0 E90D0000 		.4byte	0xde9
 6264 0de4 23       		.uleb128 0x23
 6265 0de5 D9000000 		.4byte	0xd9
 6266 0de9 06       		.uleb128 0x6
 6267 0dea E40D0000 		.4byte	0xde4
 6268 0dee 24       		.uleb128 0x24
 6269 0def 29080000 		.4byte	.LASF163
 6270 0df3 01       		.byte	0x1
 6271 0df4 D4       		.byte	0xd4
 6272 0df5 FF0D0000 		.4byte	0xdff
 6273 0df9 05       		.uleb128 0x5
 6274 0dfa 03       		.byte	0x3
 6275 0dfb 00000000 		.4byte	barCount
 6276 0dff 06       		.uleb128 0x6
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 138


 6277 0e00 94000000 		.4byte	0x94
 6278 0e04 07       		.uleb128 0x7
 6279 0e05 94000000 		.4byte	0x94
 6280 0e09 1A0E0000 		.4byte	0xe1a
 6281 0e0d 08       		.uleb128 0x8
 6282 0e0e 42010000 		.4byte	0x142
 6283 0e12 03       		.byte	0x3
 6284 0e13 08       		.uleb128 0x8
 6285 0e14 42010000 		.4byte	0x142
 6286 0e18 01       		.byte	0x1
 6287 0e19 00       		.byte	0
 6288 0e1a 24       		.uleb128 0x24
 6289 0e1b 1C060000 		.4byte	.LASF164
 6290 0e1f 01       		.byte	0x1
 6291 0e20 D8       		.byte	0xd8
 6292 0e21 040E0000 		.4byte	0xe04
 6293 0e25 05       		.uleb128 0x5
 6294 0e26 03       		.byte	0x3
 6295 0e27 00000000 		.4byte	stringStates
 6296 0e2b 26       		.uleb128 0x26
 6297 0e2c 7A040000 		.4byte	.LASF165
 6298 0e30 01       		.byte	0x1
 6299 0e31 1201     		.2byte	0x112
 6300 0e33 FF0D0000 		.4byte	0xdff
 6301 0e37 05       		.uleb128 0x5
 6302 0e38 03       		.byte	0x3
 6303 0e39 00000000 		.4byte	whichLinearSensor
 6304 0e3d 26       		.uleb128 0x26
 6305 0e3e CC060000 		.4byte	.LASF166
 6306 0e42 01       		.byte	0x1
 6307 0e43 1B01     		.2byte	0x11b
 6308 0e45 FF0D0000 		.4byte	0xdff
 6309 0e49 05       		.uleb128 0x5
 6310 0e4a 03       		.byte	0x3
 6311 0e4b 00000000 		.4byte	testVar
 6312 0e4f 26       		.uleb128 0x26
 6313 0e50 660B0000 		.4byte	.LASF167
 6314 0e54 01       		.byte	0x1
 6315 0e55 1C01     		.2byte	0x11c
 6316 0e57 E70B0000 		.4byte	0xbe7
 6317 0e5b 05       		.uleb128 0x5
 6318 0e5c 03       		.byte	0x3
 6319 0e5d 00000000 		.4byte	lastNotes
 6320 0e61 26       		.uleb128 0x26
 6321 0e62 77070000 		.4byte	.LASF168
 6322 0e66 01       		.byte	0x1
 6323 0e67 1D01     		.2byte	0x11d
 6324 0e69 94000000 		.4byte	0x94
 6325 0e6d 05       		.uleb128 0x5
 6326 0e6e 03       		.byte	0x3
 6327 0e6f 00000000 		.4byte	frettedState
 6328 0e73 26       		.uleb128 0x26
 6329 0e74 ED070000 		.4byte	.LASF169
 6330 0e78 01       		.byte	0x1
 6331 0e79 1E01     		.2byte	0x11e
 6332 0e7b 94000000 		.4byte	0x94
 6333 0e7f 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 139


 6334 0e80 03       		.byte	0x3
 6335 0e81 00000000 		.4byte	polyMode
 6336 0e85 26       		.uleb128 0x26
 6337 0e86 9A050000 		.4byte	.LASF170
 6338 0e8a 01       		.byte	0x1
 6339 0e8b 2001     		.2byte	0x120
 6340 0e8d 400C0000 		.4byte	0xc40
 6341 0e91 05       		.uleb128 0x5
 6342 0e92 03       		.byte	0x3
 6343 0e93 00000000 		.4byte	pitchBendsPerString
 6344 0e97 26       		.uleb128 0x26
 6345 0e98 B30A0000 		.4byte	.LASF171
 6346 0e9c 01       		.byte	0x1
 6347 0e9d 2101     		.2byte	0x121
 6348 0e9f E70B0000 		.4byte	0xbe7
 6349 0ea3 05       		.uleb128 0x5
 6350 0ea4 03       		.byte	0x3
 6351 0ea5 00000000 		.4byte	openStringCount
 6352 0ea9 26       		.uleb128 0x26
 6353 0eaa 9D040000 		.4byte	.LASF172
 6354 0eae 01       		.byte	0x1
 6355 0eaf 2201     		.2byte	0x122
 6356 0eb1 94000000 		.4byte	0x94
 6357 0eb5 05       		.uleb128 0x5
 6358 0eb6 03       		.byte	0x3
 6359 0eb7 00000000 		.4byte	loudestString
 6360 0ebb 26       		.uleb128 0x26
 6361 0ebc DC020000 		.4byte	.LASF173
 6362 0ec0 01       		.byte	0x1
 6363 0ec1 2301     		.2byte	0x123
 6364 0ec3 CE000000 		.4byte	0xce
 6365 0ec7 05       		.uleb128 0x5
 6366 0ec8 03       		.byte	0x3
 6367 0ec9 00000000 		.4byte	timeSinceLastAttack
 6368 0ecd 26       		.uleb128 0x26
 6369 0ece DA030000 		.4byte	.LASF174
 6370 0ed2 01       		.byte	0x1
 6371 0ed3 2401     		.2byte	0x124
 6372 0ed5 400C0000 		.4byte	0xc40
 6373 0ed9 05       		.uleb128 0x5
 6374 0eda 03       		.byte	0x3
 6375 0edb 00000000 		.4byte	previousHysteresisStates
 6376 0edf 26       		.uleb128 0x26
 6377 0ee0 07090000 		.4byte	.LASF175
 6378 0ee4 01       		.byte	0x1
 6379 0ee5 2501     		.2byte	0x125
 6380 0ee7 400C0000 		.4byte	0xc40
 6381 0eeb 05       		.uleb128 0x5
 6382 0eec 03       		.byte	0x3
 6383 0eed 00000000 		.4byte	openStringFreqs
 6384 0ef1 26       		.uleb128 0x26
 6385 0ef2 DB040000 		.4byte	.LASF176
 6386 0ef6 01       		.byte	0x1
 6387 0ef7 2601     		.2byte	0x126
 6388 0ef9 400C0000 		.4byte	0xc40
 6389 0efd 05       		.uleb128 0x5
 6390 0efe 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 140


 6391 0eff 00000000 		.4byte	openStringMIDI
 6392 0f03 26       		.uleb128 0x26
 6393 0f04 45020000 		.4byte	.LASF177
 6394 0f08 01       		.byte	0x1
 6395 0f09 2701     		.2byte	0x127
 6396 0f0b 400C0000 		.4byte	0xc40
 6397 0f0f 05       		.uleb128 0x5
 6398 0f10 03       		.byte	0x3
 6399 0f11 00000000 		.4byte	invStringMappedPositions
 6400 0f15 26       		.uleb128 0x26
 6401 0f16 CF030000 		.4byte	.LASF178
 6402 0f1a 01       		.byte	0x1
 6403 0f1b 2801     		.2byte	0x128
 6404 0f1d 400C0000 		.4byte	0xc40
 6405 0f21 05       		.uleb128 0x5
 6406 0f22 03       		.byte	0x3
 6407 0f23 00000000 		.4byte	stringMIDI
 6408 0f27 26       		.uleb128 0x26
 6409 0f28 2A040000 		.4byte	.LASF179
 6410 0f2c 01       		.byte	0x1
 6411 0f2d 2901     		.2byte	0x129
 6412 0f2f 400C0000 		.4byte	0xc40
 6413 0f33 05       		.uleb128 0x5
 6414 0f34 03       		.byte	0x3
 6415 0f35 00000000 		.4byte	stringMIDIPrev
 6416 0f39 26       		.uleb128 0x26
 6417 0f3a 790B0000 		.4byte	.LASF180
 6418 0f3e 01       		.byte	0x1
 6419 0f3f 2A01     		.2byte	0x12a
 6420 0f41 09010000 		.4byte	0x109
 6421 0f45 05       		.uleb128 0x5
 6422 0f46 03       		.byte	0x3
 6423 0f47 00000000 		.4byte	linearHysteresis
 6424 0f4b 26       		.uleb128 0x26
 6425 0f4c 5E060000 		.4byte	.LASF181
 6426 0f50 01       		.byte	0x1
 6427 0f51 2B01     		.2byte	0x12b
 6428 0f53 400C0000 		.4byte	0xc40
 6429 0f57 05       		.uleb128 0x5
 6430 0f58 03       		.byte	0x3
 6431 0f59 00000000 		.4byte	hp_y
 6432 0f5d 26       		.uleb128 0x26
 6433 0f5e 59060000 		.4byte	.LASF182
 6434 0f62 01       		.byte	0x1
 6435 0f63 2C01     		.2byte	0x12c
 6436 0f65 400C0000 		.4byte	0xc40
 6437 0f69 05       		.uleb128 0x5
 6438 0f6a 03       		.byte	0x3
 6439 0f6b 00000000 		.4byte	hp_x
 6440 0f6f 26       		.uleb128 0x26
 6441 0f70 95050000 		.4byte	.LASF183
 6442 0f74 01       		.byte	0x1
 6443 0f75 2D01     		.2byte	0x12d
 6444 0f77 09010000 		.4byte	0x109
 6445 0f7b 05       		.uleb128 0x5
 6446 0f7c 03       		.byte	0x3
 6447 0f7d 00000000 		.4byte	hp_R
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 141


 6448 0f81 26       		.uleb128 0x26
 6449 0f82 02030000 		.4byte	.LASF184
 6450 0f86 01       		.byte	0x1
 6451 0f87 2F01     		.2byte	0x12f
 6452 0f89 400C0000 		.4byte	0xc40
 6453 0f8d 05       		.uleb128 0x5
 6454 0f8e 03       		.byte	0x3
 6455 0f8f 00000000 		.4byte	vibratoCrossfade
 6456 0f93 26       		.uleb128 0x26
 6457 0f94 29060000 		.4byte	.LASF185
 6458 0f98 01       		.byte	0x1
 6459 0f99 3001     		.2byte	0x130
 6460 0f9b E70B0000 		.4byte	0xbe7
 6461 0f9f 05       		.uleb128 0x5
 6462 0fa0 03       		.byte	0x3
 6463 0fa1 00000000 		.4byte	crossFadeStartCount
 6464 0fa5 26       		.uleb128 0x26
 6465 0fa6 13050000 		.4byte	.LASF186
 6466 0faa 01       		.byte	0x1
 6467 0fab 3201     		.2byte	0x132
 6468 0fad 94000000 		.4byte	0x94
 6469 0fb1 05       		.uleb128 0x5
 6470 0fb2 03       		.byte	0x3
 6471 0fb3 00000000 		.4byte	previousPitchBendsSent
 6472 0fb7 26       		.uleb128 0x26
 6473 0fb8 B2070000 		.4byte	.LASF187
 6474 0fbc 01       		.byte	0x1
 6475 0fbd 3301     		.2byte	0x133
 6476 0fbf 14020000 		.4byte	0x214
 6477 0fc3 05       		.uleb128 0x5
 6478 0fc4 03       		.byte	0x3
 6479 0fc5 00000000 		.4byte	knobs
 6480 0fc9 26       		.uleb128 0x26
 6481 0fca 11040000 		.4byte	.LASF188
 6482 0fce 01       		.byte	0x1
 6483 0fcf 3401     		.2byte	0x134
 6484 0fd1 94000000 		.4byte	0x94
 6485 0fd5 05       		.uleb128 0x5
 6486 0fd6 03       		.byte	0x3
 6487 0fd7 00000000 		.4byte	buttons
 6488 0fdb 26       		.uleb128 0x26
 6489 0fdc 91090000 		.4byte	.LASF189
 6490 0fe0 01       		.byte	0x1
 6491 0fe1 3601     		.2byte	0x136
 6492 0fe3 94000000 		.4byte	0x94
 6493 0fe7 05       		.uleb128 0x5
 6494 0fe8 03       		.byte	0x3
 6495 0fe9 00000000 		.4byte	firPointer
 6496 0fed 07       		.uleb128 0x7
 6497 0fee A2000000 		.4byte	0xa2
 6498 0ff2 FD0F0000 		.4byte	0xffd
 6499 0ff6 08       		.uleb128 0x8
 6500 0ff7 42010000 		.4byte	0x142
 6501 0ffb 04       		.byte	0x4
 6502 0ffc 00       		.byte	0
 6503 0ffd 26       		.uleb128 0x26
 6504 0ffe 44070000 		.4byte	.LASF190
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 142


 6505 1002 01       		.byte	0x1
 6506 1003 3701     		.2byte	0x137
 6507 1005 ED0F0000 		.4byte	0xfed
 6508 1009 05       		.uleb128 0x5
 6509 100a 03       		.byte	0x3
 6510 100b 00000000 		.4byte	knobs7bit
 6511 100f 07       		.uleb128 0x7
 6512 1010 AD000000 		.4byte	0xad
 6513 1014 1F100000 		.4byte	0x101f
 6514 1018 08       		.uleb128 0x8
 6515 1019 42010000 		.4byte	0x142
 6516 101d 04       		.byte	0x4
 6517 101e 00       		.byte	0
 6518 101f 26       		.uleb128 0x26
 6519 1020 F9080000 		.4byte	.LASF191
 6520 1024 01       		.byte	0x1
 6521 1025 3801     		.2byte	0x138
 6522 1027 0F100000 		.4byte	0x100f
 6523 102b 05       		.uleb128 0x5
 6524 102c 03       		.byte	0x3
 6525 102d 00000000 		.4byte	knobs7bitPrev
 6526 1031 26       		.uleb128 0x26
 6527 1032 72020000 		.4byte	.LASF192
 6528 1036 01       		.byte	0x1
 6529 1037 3901     		.2byte	0x139
 6530 1039 0F100000 		.4byte	0x100f
 6531 103d 05       		.uleb128 0x5
 6532 103e 03       		.byte	0x3
 6533 103f 00000000 		.4byte	knobs7bitPrevLS
 6534 1043 26       		.uleb128 0x26
 6535 1044 70030000 		.4byte	.LASF193
 6536 1048 01       		.byte	0x1
 6537 1049 3A01     		.2byte	0x13a
 6538 104b AD000000 		.4byte	0xad
 6539 104f 05       		.uleb128 0x5
 6540 1050 03       		.byte	0x3
 6541 1051 00000000 		.4byte	knobs7bitHysteresis
 6542 1055 26       		.uleb128 0x26
 6543 1056 41090000 		.4byte	.LASF194
 6544 105a 01       		.byte	0x1
 6545 105b 3C01     		.2byte	0x13c
 6546 105d 59020000 		.4byte	0x259
 6547 1061 05       		.uleb128 0x5
 6548 1062 03       		.byte	0x3
 6549 1063 00000000 		.4byte	linFirPointer
 6550 1067 26       		.uleb128 0x26
 6551 1068 82050000 		.4byte	.LASF195
 6552 106c 01       		.byte	0x1
 6553 106d 3D01     		.2byte	0x13d
 6554 106f 5C0A0000 		.4byte	0xa5c
 6555 1073 05       		.uleb128 0x5
 6556 1074 03       		.byte	0x3
 6557 1075 00000000 		.4byte	linearFIR
 6558 1079 07       		.uleb128 0x7
 6559 107a C3000000 		.4byte	0xc3
 6560 107e 89100000 		.4byte	0x1089
 6561 1082 08       		.uleb128 0x8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 143


 6562 1083 42010000 		.4byte	0x142
 6563 1087 03       		.byte	0x3
 6564 1088 00       		.byte	0
 6565 1089 26       		.uleb128 0x26
 6566 108a 660A0000 		.4byte	.LASF196
 6567 108e 01       		.byte	0x1
 6568 108f 3E01     		.2byte	0x13e
 6569 1091 79100000 		.4byte	0x1079
 6570 1095 05       		.uleb128 0x5
 6571 1096 03       		.byte	0x3
 6572 1097 00000000 		.4byte	linearSmoothed
 6573 109b 26       		.uleb128 0x26
 6574 109c 7E090000 		.4byte	.LASF197
 6575 10a0 01       		.byte	0x1
 6576 10a1 3F01     		.2byte	0x13f
 6577 10a3 79100000 		.4byte	0x1079
 6578 10a7 05       		.uleb128 0x5
 6579 10a8 03       		.byte	0x3
 6580 10a9 00000000 		.4byte	linearSmoothedPrev
 6581 10ad 26       		.uleb128 0x26
 6582 10ae 580B0000 		.4byte	.LASF198
 6583 10b2 01       		.byte	0x1
 6584 10b3 4001     		.2byte	0x140
 6585 10b5 79100000 		.4byte	0x1079
 6586 10b9 05       		.uleb128 0x5
 6587 10ba 03       		.byte	0x3
 6588 10bb 00000000 		.4byte	LHMuteCounter
 6589 10bf 26       		.uleb128 0x26
 6590 10c0 19080000 		.4byte	.LASF199
 6591 10c4 01       		.byte	0x1
 6592 10c5 4101     		.2byte	0x141
 6593 10c7 59020000 		.4byte	0x259
 6594 10cb 05       		.uleb128 0x5
 6595 10cc 03       		.byte	0x3
 6596 10cd 00000000 		.4byte	LHMute
 6597 10d1 26       		.uleb128 0x26
 6598 10d2 F6070000 		.4byte	.LASF200
 6599 10d6 01       		.byte	0x1
 6600 10d7 4201     		.2byte	0x142
 6601 10d9 59020000 		.4byte	0x259
 6602 10dd 05       		.uleb128 0x5
 6603 10de 03       		.byte	0x3
 6604 10df 00000000 		.4byte	pitchFreeze
 6605 10e3 07       		.uleb128 0x7
 6606 10e4 09010000 		.4byte	0x109
 6607 10e8 F9100000 		.4byte	0x10f9
 6608 10ec 08       		.uleb128 0x8
 6609 10ed 42010000 		.4byte	0x142
 6610 10f1 03       		.byte	0x3
 6611 10f2 08       		.uleb128 0x8
 6612 10f3 42010000 		.4byte	0x142
 6613 10f7 1F       		.byte	0x1f
 6614 10f8 00       		.byte	0
 6615 10f9 26       		.uleb128 0x26
 6616 10fa 33070000 		.4byte	.LASF201
 6617 10fe 01       		.byte	0x1
 6618 10ff 4301     		.2byte	0x143
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 144


 6619 1101 E3100000 		.4byte	0x10e3
 6620 1105 05       		.uleb128 0x5
 6621 1106 03       		.byte	0x3
 6622 1107 00000000 		.4byte	pitchBendHistory
 6623 110b 07       		.uleb128 0x7
 6624 110c AD000000 		.4byte	0xad
 6625 1110 1B110000 		.4byte	0x111b
 6626 1114 08       		.uleb128 0x8
 6627 1115 42010000 		.4byte	0x142
 6628 1119 03       		.byte	0x3
 6629 111a 00       		.byte	0
 6630 111b 26       		.uleb128 0x26
 6631 111c 950B0000 		.4byte	.LASF202
 6632 1120 01       		.byte	0x1
 6633 1121 4401     		.2byte	0x144
 6634 1123 0B110000 		.4byte	0x110b
 6635 1127 05       		.uleb128 0x5
 6636 1128 03       		.byte	0x3
 6637 1129 00000000 		.4byte	pitchBendHistoryPointer
 6638 112d 07       		.uleb128 0x7
 6639 112e 94000000 		.4byte	0x94
 6640 1132 43110000 		.4byte	0x1143
 6641 1136 08       		.uleb128 0x8
 6642 1137 42010000 		.4byte	0x142
 6643 113b 1F       		.byte	0x1f
 6644 113c 08       		.uleb128 0x8
 6645 113d 42010000 		.4byte	0x142
 6646 1141 04       		.byte	0x4
 6647 1142 00       		.byte	0
 6648 1143 26       		.uleb128 0x26
 6649 1144 F3040000 		.4byte	.LASF203
 6650 1148 01       		.byte	0x1
 6651 1149 4601     		.2byte	0x146
 6652 114b 2D110000 		.4byte	0x112d
 6653 114f 05       		.uleb128 0x5
 6654 1150 03       		.byte	0x3
 6655 1151 00000000 		.4byte	skippedNotes
 6656 1155 26       		.uleb128 0x26
 6657 1156 63040000 		.4byte	.LASF204
 6658 115a 01       		.byte	0x1
 6659 115b 4701     		.2byte	0x147
 6660 115d 94000000 		.4byte	0x94
 6661 1161 05       		.uleb128 0x5
 6662 1162 03       		.byte	0x3
 6663 1163 00000000 		.4byte	skipPointer
 6664 1167 26       		.uleb128 0x26
 6665 1168 20080000 		.4byte	.LASF205
 6666 116c 01       		.byte	0x1
 6667 116d 4901     		.2byte	0x149
 6668 116f A2000000 		.4byte	0xa2
 6669 1173 05       		.uleb128 0x5
 6670 1174 03       		.byte	0x3
 6671 1175 00000000 		.4byte	bufCount
 6672 1179 26       		.uleb128 0x26
 6673 117a A9060000 		.4byte	.LASF206
 6674 117e 01       		.byte	0x1
 6675 117f 4A01     		.2byte	0x14a
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 145


 6676 1181 A2000000 		.4byte	0xa2
 6677 1185 05       		.uleb128 0x5
 6678 1186 03       		.byte	0x3
 6679 1187 00000000 		.4byte	sendingPreset
 6680 118b 26       		.uleb128 0x26
 6681 118c 370B0000 		.4byte	.LASF207
 6682 1190 01       		.byte	0x1
 6683 1191 9D03     		.2byte	0x39d
 6684 1193 C3000000 		.4byte	0xc3
 6685 1197 05       		.uleb128 0x5
 6686 1198 03       		.byte	0x3
 6687 1199 00000000 		.4byte	currentFloat
 6688 119d 26       		.uleb128 0x26
 6689 119e 8C050000 		.4byte	.LASF208
 6690 11a2 01       		.byte	0x1
 6691 11a3 9E03     		.2byte	0x39e
 6692 11a5 C3000000 		.4byte	0xc3
 6693 11a9 05       		.uleb128 0x5
 6694 11aa 03       		.byte	0x3
 6695 11ab 00000000 		.4byte	mapCount
 6696 11af 26       		.uleb128 0x26
 6697 11b0 EA040000 		.4byte	.LASF209
 6698 11b4 01       		.byte	0x1
 6699 11b5 0C04     		.2byte	0x40c
 6700 11b7 59020000 		.4byte	0x259
 6701 11bb 05       		.uleb128 0x5
 6702 11bc 03       		.byte	0x3
 6703 11bd 00000000 		.4byte	tempMIDI
 6704 11c1 26       		.uleb128 0x26
 6705 11c2 6A000000 		.4byte	.LASF210
 6706 11c6 01       		.byte	0x1
 6707 11c7 7E04     		.2byte	0x47e
 6708 11c9 FD000000 		.4byte	0xfd
 6709 11cd 05       		.uleb128 0x5
 6710 11ce 03       		.byte	0x3
 6711 11cf 00000000 		.4byte	iVtherm
 6712 11d3 26       		.uleb128 0x26
 6713 11d4 26030000 		.4byte	.LASF211
 6714 11d8 01       		.byte	0x1
 6715 11d9 2F05     		.2byte	0x52f
 6716 11db 94000000 		.4byte	0x94
 6717 11df 05       		.uleb128 0x5
 6718 11e0 03       		.byte	0x3
 6719 11e1 00000000 		.4byte	counter2
 6720 11e5 00       		.byte	0
 6721              		.section	.debug_abbrev,"",%progbits
 6722              	.Ldebug_abbrev0:
 6723 0000 01       		.uleb128 0x1
 6724 0001 11       		.uleb128 0x11
 6725 0002 01       		.byte	0x1
 6726 0003 25       		.uleb128 0x25
 6727 0004 0E       		.uleb128 0xe
 6728 0005 13       		.uleb128 0x13
 6729 0006 0B       		.uleb128 0xb
 6730 0007 03       		.uleb128 0x3
 6731 0008 0E       		.uleb128 0xe
 6732 0009 1B       		.uleb128 0x1b
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 146


 6733 000a 0E       		.uleb128 0xe
 6734 000b 55       		.uleb128 0x55
 6735 000c 17       		.uleb128 0x17
 6736 000d 11       		.uleb128 0x11
 6737 000e 01       		.uleb128 0x1
 6738 000f 10       		.uleb128 0x10
 6739 0010 17       		.uleb128 0x17
 6740 0011 00       		.byte	0
 6741 0012 00       		.byte	0
 6742 0013 02       		.uleb128 0x2
 6743 0014 24       		.uleb128 0x24
 6744 0015 00       		.byte	0
 6745 0016 0B       		.uleb128 0xb
 6746 0017 0B       		.uleb128 0xb
 6747 0018 3E       		.uleb128 0x3e
 6748 0019 0B       		.uleb128 0xb
 6749 001a 03       		.uleb128 0x3
 6750 001b 0E       		.uleb128 0xe
 6751 001c 00       		.byte	0
 6752 001d 00       		.byte	0
 6753 001e 03       		.uleb128 0x3
 6754 001f 16       		.uleb128 0x16
 6755 0020 00       		.byte	0
 6756 0021 03       		.uleb128 0x3
 6757 0022 0E       		.uleb128 0xe
 6758 0023 3A       		.uleb128 0x3a
 6759 0024 0B       		.uleb128 0xb
 6760 0025 3B       		.uleb128 0x3b
 6761 0026 0B       		.uleb128 0xb
 6762 0027 49       		.uleb128 0x49
 6763 0028 13       		.uleb128 0x13
 6764 0029 00       		.byte	0
 6765 002a 00       		.byte	0
 6766 002b 04       		.uleb128 0x4
 6767 002c 24       		.uleb128 0x24
 6768 002d 00       		.byte	0
 6769 002e 0B       		.uleb128 0xb
 6770 002f 0B       		.uleb128 0xb
 6771 0030 3E       		.uleb128 0x3e
 6772 0031 0B       		.uleb128 0xb
 6773 0032 03       		.uleb128 0x3
 6774 0033 08       		.uleb128 0x8
 6775 0034 00       		.byte	0
 6776 0035 00       		.byte	0
 6777 0036 05       		.uleb128 0x5
 6778 0037 16       		.uleb128 0x16
 6779 0038 00       		.byte	0
 6780 0039 03       		.uleb128 0x3
 6781 003a 0E       		.uleb128 0xe
 6782 003b 3A       		.uleb128 0x3a
 6783 003c 0B       		.uleb128 0xb
 6784 003d 3B       		.uleb128 0x3b
 6785 003e 05       		.uleb128 0x5
 6786 003f 49       		.uleb128 0x49
 6787 0040 13       		.uleb128 0x13
 6788 0041 00       		.byte	0
 6789 0042 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 147


 6790 0043 06       		.uleb128 0x6
 6791 0044 35       		.uleb128 0x35
 6792 0045 00       		.byte	0
 6793 0046 49       		.uleb128 0x49
 6794 0047 13       		.uleb128 0x13
 6795 0048 00       		.byte	0
 6796 0049 00       		.byte	0
 6797 004a 07       		.uleb128 0x7
 6798 004b 01       		.uleb128 0x1
 6799 004c 01       		.byte	0x1
 6800 004d 49       		.uleb128 0x49
 6801 004e 13       		.uleb128 0x13
 6802 004f 01       		.uleb128 0x1
 6803 0050 13       		.uleb128 0x13
 6804 0051 00       		.byte	0
 6805 0052 00       		.byte	0
 6806 0053 08       		.uleb128 0x8
 6807 0054 21       		.uleb128 0x21
 6808 0055 00       		.byte	0
 6809 0056 49       		.uleb128 0x49
 6810 0057 13       		.uleb128 0x13
 6811 0058 2F       		.uleb128 0x2f
 6812 0059 0B       		.uleb128 0xb
 6813 005a 00       		.byte	0
 6814 005b 00       		.byte	0
 6815 005c 09       		.uleb128 0x9
 6816 005d 13       		.uleb128 0x13
 6817 005e 01       		.byte	0x1
 6818 005f 0B       		.uleb128 0xb
 6819 0060 0B       		.uleb128 0xb
 6820 0061 3A       		.uleb128 0x3a
 6821 0062 0B       		.uleb128 0xb
 6822 0063 3B       		.uleb128 0x3b
 6823 0064 05       		.uleb128 0x5
 6824 0065 01       		.uleb128 0x1
 6825 0066 13       		.uleb128 0x13
 6826 0067 00       		.byte	0
 6827 0068 00       		.byte	0
 6828 0069 0A       		.uleb128 0xa
 6829 006a 0D       		.uleb128 0xd
 6830 006b 00       		.byte	0
 6831 006c 03       		.uleb128 0x3
 6832 006d 0E       		.uleb128 0xe
 6833 006e 3A       		.uleb128 0x3a
 6834 006f 0B       		.uleb128 0xb
 6835 0070 3B       		.uleb128 0x3b
 6836 0071 05       		.uleb128 0x5
 6837 0072 49       		.uleb128 0x49
 6838 0073 13       		.uleb128 0x13
 6839 0074 38       		.uleb128 0x38
 6840 0075 0B       		.uleb128 0xb
 6841 0076 00       		.byte	0
 6842 0077 00       		.byte	0
 6843 0078 0B       		.uleb128 0xb
 6844 0079 04       		.uleb128 0x4
 6845 007a 01       		.byte	0x1
 6846 007b 0B       		.uleb128 0xb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 148


 6847 007c 0B       		.uleb128 0xb
 6848 007d 49       		.uleb128 0x49
 6849 007e 13       		.uleb128 0x13
 6850 007f 3A       		.uleb128 0x3a
 6851 0080 0B       		.uleb128 0xb
 6852 0081 3B       		.uleb128 0x3b
 6853 0082 05       		.uleb128 0x5
 6854 0083 01       		.uleb128 0x1
 6855 0084 13       		.uleb128 0x13
 6856 0085 00       		.byte	0
 6857 0086 00       		.byte	0
 6858 0087 0C       		.uleb128 0xc
 6859 0088 28       		.uleb128 0x28
 6860 0089 00       		.byte	0
 6861 008a 03       		.uleb128 0x3
 6862 008b 0E       		.uleb128 0xe
 6863 008c 1C       		.uleb128 0x1c
 6864 008d 0B       		.uleb128 0xb
 6865 008e 00       		.byte	0
 6866 008f 00       		.byte	0
 6867 0090 0D       		.uleb128 0xd
 6868 0091 17       		.uleb128 0x17
 6869 0092 01       		.byte	0x1
 6870 0093 03       		.uleb128 0x3
 6871 0094 0E       		.uleb128 0xe
 6872 0095 0B       		.uleb128 0xb
 6873 0096 0B       		.uleb128 0xb
 6874 0097 3A       		.uleb128 0x3a
 6875 0098 0B       		.uleb128 0xb
 6876 0099 3B       		.uleb128 0x3b
 6877 009a 0B       		.uleb128 0xb
 6878 009b 01       		.uleb128 0x1
 6879 009c 13       		.uleb128 0x13
 6880 009d 00       		.byte	0
 6881 009e 00       		.byte	0
 6882 009f 0E       		.uleb128 0xe
 6883 00a0 0D       		.uleb128 0xd
 6884 00a1 00       		.byte	0
 6885 00a2 03       		.uleb128 0x3
 6886 00a3 08       		.uleb128 0x8
 6887 00a4 3A       		.uleb128 0x3a
 6888 00a5 0B       		.uleb128 0xb
 6889 00a6 3B       		.uleb128 0x3b
 6890 00a7 0B       		.uleb128 0xb
 6891 00a8 49       		.uleb128 0x49
 6892 00a9 13       		.uleb128 0x13
 6893 00aa 00       		.byte	0
 6894 00ab 00       		.byte	0
 6895 00ac 0F       		.uleb128 0xf
 6896 00ad 04       		.uleb128 0x4
 6897 00ae 01       		.byte	0x1
 6898 00af 03       		.uleb128 0x3
 6899 00b0 0E       		.uleb128 0xe
 6900 00b1 0B       		.uleb128 0xb
 6901 00b2 0B       		.uleb128 0xb
 6902 00b3 49       		.uleb128 0x49
 6903 00b4 13       		.uleb128 0x13
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 149


 6904 00b5 3A       		.uleb128 0x3a
 6905 00b6 0B       		.uleb128 0xb
 6906 00b7 3B       		.uleb128 0x3b
 6907 00b8 0B       		.uleb128 0xb
 6908 00b9 01       		.uleb128 0x1
 6909 00ba 13       		.uleb128 0x13
 6910 00bb 00       		.byte	0
 6911 00bc 00       		.byte	0
 6912 00bd 10       		.uleb128 0x10
 6913 00be 2E       		.uleb128 0x2e
 6914 00bf 00       		.byte	0
 6915 00c0 3F       		.uleb128 0x3f
 6916 00c1 19       		.uleb128 0x19
 6917 00c2 03       		.uleb128 0x3
 6918 00c3 0E       		.uleb128 0xe
 6919 00c4 3A       		.uleb128 0x3a
 6920 00c5 0B       		.uleb128 0xb
 6921 00c6 3B       		.uleb128 0x3b
 6922 00c7 0B       		.uleb128 0xb
 6923 00c8 27       		.uleb128 0x27
 6924 00c9 19       		.uleb128 0x19
 6925 00ca 11       		.uleb128 0x11
 6926 00cb 01       		.uleb128 0x1
 6927 00cc 12       		.uleb128 0x12
 6928 00cd 06       		.uleb128 0x6
 6929 00ce 40       		.uleb128 0x40
 6930 00cf 18       		.uleb128 0x18
 6931 00d0 9742     		.uleb128 0x2117
 6932 00d2 19       		.uleb128 0x19
 6933 00d3 00       		.byte	0
 6934 00d4 00       		.byte	0
 6935 00d5 11       		.uleb128 0x11
 6936 00d6 2E       		.uleb128 0x2e
 6937 00d7 01       		.byte	0x1
 6938 00d8 3F       		.uleb128 0x3f
 6939 00d9 19       		.uleb128 0x19
 6940 00da 03       		.uleb128 0x3
 6941 00db 0E       		.uleb128 0xe
 6942 00dc 3A       		.uleb128 0x3a
 6943 00dd 0B       		.uleb128 0xb
 6944 00de 3B       		.uleb128 0x3b
 6945 00df 0B       		.uleb128 0xb
 6946 00e0 27       		.uleb128 0x27
 6947 00e1 19       		.uleb128 0x19
 6948 00e2 49       		.uleb128 0x49
 6949 00e3 13       		.uleb128 0x13
 6950 00e4 11       		.uleb128 0x11
 6951 00e5 01       		.uleb128 0x1
 6952 00e6 12       		.uleb128 0x12
 6953 00e7 06       		.uleb128 0x6
 6954 00e8 40       		.uleb128 0x40
 6955 00e9 18       		.uleb128 0x18
 6956 00ea 9642     		.uleb128 0x2116
 6957 00ec 19       		.uleb128 0x19
 6958 00ed 01       		.uleb128 0x1
 6959 00ee 13       		.uleb128 0x13
 6960 00ef 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 150


 6961 00f0 00       		.byte	0
 6962 00f1 12       		.uleb128 0x12
 6963 00f2 05       		.uleb128 0x5
 6964 00f3 00       		.byte	0
 6965 00f4 03       		.uleb128 0x3
 6966 00f5 08       		.uleb128 0x8
 6967 00f6 3A       		.uleb128 0x3a
 6968 00f7 0B       		.uleb128 0xb
 6969 00f8 3B       		.uleb128 0x3b
 6970 00f9 0B       		.uleb128 0xb
 6971 00fa 49       		.uleb128 0x49
 6972 00fb 13       		.uleb128 0x13
 6973 00fc 02       		.uleb128 0x2
 6974 00fd 18       		.uleb128 0x18
 6975 00fe 00       		.byte	0
 6976 00ff 00       		.byte	0
 6977 0100 13       		.uleb128 0x13
 6978 0101 34       		.uleb128 0x34
 6979 0102 00       		.byte	0
 6980 0103 03       		.uleb128 0x3
 6981 0104 0E       		.uleb128 0xe
 6982 0105 3A       		.uleb128 0x3a
 6983 0106 0B       		.uleb128 0xb
 6984 0107 3B       		.uleb128 0x3b
 6985 0108 0B       		.uleb128 0xb
 6986 0109 49       		.uleb128 0x49
 6987 010a 13       		.uleb128 0x13
 6988 010b 02       		.uleb128 0x2
 6989 010c 18       		.uleb128 0x18
 6990 010d 00       		.byte	0
 6991 010e 00       		.byte	0
 6992 010f 14       		.uleb128 0x14
 6993 0110 2E       		.uleb128 0x2e
 6994 0111 01       		.byte	0x1
 6995 0112 3F       		.uleb128 0x3f
 6996 0113 19       		.uleb128 0x19
 6997 0114 03       		.uleb128 0x3
 6998 0115 0E       		.uleb128 0xe
 6999 0116 3A       		.uleb128 0x3a
 7000 0117 0B       		.uleb128 0xb
 7001 0118 3B       		.uleb128 0x3b
 7002 0119 05       		.uleb128 0x5
 7003 011a 27       		.uleb128 0x27
 7004 011b 19       		.uleb128 0x19
 7005 011c 49       		.uleb128 0x49
 7006 011d 13       		.uleb128 0x13
 7007 011e 11       		.uleb128 0x11
 7008 011f 01       		.uleb128 0x1
 7009 0120 12       		.uleb128 0x12
 7010 0121 06       		.uleb128 0x6
 7011 0122 40       		.uleb128 0x40
 7012 0123 18       		.uleb128 0x18
 7013 0124 9642     		.uleb128 0x2116
 7014 0126 19       		.uleb128 0x19
 7015 0127 01       		.uleb128 0x1
 7016 0128 13       		.uleb128 0x13
 7017 0129 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 151


 7018 012a 00       		.byte	0
 7019 012b 15       		.uleb128 0x15
 7020 012c 05       		.uleb128 0x5
 7021 012d 00       		.byte	0
 7022 012e 03       		.uleb128 0x3
 7023 012f 08       		.uleb128 0x8
 7024 0130 3A       		.uleb128 0x3a
 7025 0131 0B       		.uleb128 0xb
 7026 0132 3B       		.uleb128 0x3b
 7027 0133 05       		.uleb128 0x5
 7028 0134 49       		.uleb128 0x49
 7029 0135 13       		.uleb128 0x13
 7030 0136 02       		.uleb128 0x2
 7031 0137 18       		.uleb128 0x18
 7032 0138 00       		.byte	0
 7033 0139 00       		.byte	0
 7034 013a 16       		.uleb128 0x16
 7035 013b 05       		.uleb128 0x5
 7036 013c 00       		.byte	0
 7037 013d 03       		.uleb128 0x3
 7038 013e 0E       		.uleb128 0xe
 7039 013f 3A       		.uleb128 0x3a
 7040 0140 0B       		.uleb128 0xb
 7041 0141 3B       		.uleb128 0x3b
 7042 0142 05       		.uleb128 0x5
 7043 0143 49       		.uleb128 0x49
 7044 0144 13       		.uleb128 0x13
 7045 0145 02       		.uleb128 0x2
 7046 0146 18       		.uleb128 0x18
 7047 0147 00       		.byte	0
 7048 0148 00       		.byte	0
 7049 0149 17       		.uleb128 0x17
 7050 014a 34       		.uleb128 0x34
 7051 014b 00       		.byte	0
 7052 014c 03       		.uleb128 0x3
 7053 014d 0E       		.uleb128 0xe
 7054 014e 3A       		.uleb128 0x3a
 7055 014f 0B       		.uleb128 0xb
 7056 0150 3B       		.uleb128 0x3b
 7057 0151 05       		.uleb128 0x5
 7058 0152 49       		.uleb128 0x49
 7059 0153 13       		.uleb128 0x13
 7060 0154 02       		.uleb128 0x2
 7061 0155 18       		.uleb128 0x18
 7062 0156 00       		.byte	0
 7063 0157 00       		.byte	0
 7064 0158 18       		.uleb128 0x18
 7065 0159 34       		.uleb128 0x34
 7066 015a 00       		.byte	0
 7067 015b 03       		.uleb128 0x3
 7068 015c 08       		.uleb128 0x8
 7069 015d 3A       		.uleb128 0x3a
 7070 015e 0B       		.uleb128 0xb
 7071 015f 3B       		.uleb128 0x3b
 7072 0160 05       		.uleb128 0x5
 7073 0161 49       		.uleb128 0x49
 7074 0162 13       		.uleb128 0x13
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 152


 7075 0163 02       		.uleb128 0x2
 7076 0164 18       		.uleb128 0x18
 7077 0165 00       		.byte	0
 7078 0166 00       		.byte	0
 7079 0167 19       		.uleb128 0x19
 7080 0168 2E       		.uleb128 0x2e
 7081 0169 01       		.byte	0x1
 7082 016a 3F       		.uleb128 0x3f
 7083 016b 19       		.uleb128 0x19
 7084 016c 03       		.uleb128 0x3
 7085 016d 08       		.uleb128 0x8
 7086 016e 3A       		.uleb128 0x3a
 7087 016f 0B       		.uleb128 0xb
 7088 0170 3B       		.uleb128 0x3b
 7089 0171 05       		.uleb128 0x5
 7090 0172 27       		.uleb128 0x27
 7091 0173 19       		.uleb128 0x19
 7092 0174 49       		.uleb128 0x49
 7093 0175 13       		.uleb128 0x13
 7094 0176 11       		.uleb128 0x11
 7095 0177 01       		.uleb128 0x1
 7096 0178 12       		.uleb128 0x12
 7097 0179 06       		.uleb128 0x6
 7098 017a 40       		.uleb128 0x40
 7099 017b 18       		.uleb128 0x18
 7100 017c 9642     		.uleb128 0x2116
 7101 017e 19       		.uleb128 0x19
 7102 017f 01       		.uleb128 0x1
 7103 0180 13       		.uleb128 0x13
 7104 0181 00       		.byte	0
 7105 0182 00       		.byte	0
 7106 0183 1A       		.uleb128 0x1a
 7107 0184 2E       		.uleb128 0x2e
 7108 0185 00       		.byte	0
 7109 0186 3F       		.uleb128 0x3f
 7110 0187 19       		.uleb128 0x19
 7111 0188 03       		.uleb128 0x3
 7112 0189 0E       		.uleb128 0xe
 7113 018a 3A       		.uleb128 0x3a
 7114 018b 0B       		.uleb128 0xb
 7115 018c 3B       		.uleb128 0x3b
 7116 018d 05       		.uleb128 0x5
 7117 018e 27       		.uleb128 0x27
 7118 018f 19       		.uleb128 0x19
 7119 0190 11       		.uleb128 0x11
 7120 0191 01       		.uleb128 0x1
 7121 0192 12       		.uleb128 0x12
 7122 0193 06       		.uleb128 0x6
 7123 0194 40       		.uleb128 0x40
 7124 0195 18       		.uleb128 0x18
 7125 0196 9642     		.uleb128 0x2116
 7126 0198 19       		.uleb128 0x19
 7127 0199 00       		.byte	0
 7128 019a 00       		.byte	0
 7129 019b 1B       		.uleb128 0x1b
 7130 019c 0B       		.uleb128 0xb
 7131 019d 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 153


 7132 019e 11       		.uleb128 0x11
 7133 019f 01       		.uleb128 0x1
 7134 01a0 12       		.uleb128 0x12
 7135 01a1 06       		.uleb128 0x6
 7136 01a2 01       		.uleb128 0x1
 7137 01a3 13       		.uleb128 0x13
 7138 01a4 00       		.byte	0
 7139 01a5 00       		.byte	0
 7140 01a6 1C       		.uleb128 0x1c
 7141 01a7 0B       		.uleb128 0xb
 7142 01a8 01       		.byte	0x1
 7143 01a9 11       		.uleb128 0x11
 7144 01aa 01       		.uleb128 0x1
 7145 01ab 12       		.uleb128 0x12
 7146 01ac 06       		.uleb128 0x6
 7147 01ad 00       		.byte	0
 7148 01ae 00       		.byte	0
 7149 01af 1D       		.uleb128 0x1d
 7150 01b0 2E       		.uleb128 0x2e
 7151 01b1 01       		.byte	0x1
 7152 01b2 3F       		.uleb128 0x3f
 7153 01b3 19       		.uleb128 0x19
 7154 01b4 03       		.uleb128 0x3
 7155 01b5 0E       		.uleb128 0xe
 7156 01b6 3A       		.uleb128 0x3a
 7157 01b7 0B       		.uleb128 0xb
 7158 01b8 3B       		.uleb128 0x3b
 7159 01b9 05       		.uleb128 0x5
 7160 01ba 27       		.uleb128 0x27
 7161 01bb 19       		.uleb128 0x19
 7162 01bc 11       		.uleb128 0x11
 7163 01bd 01       		.uleb128 0x1
 7164 01be 12       		.uleb128 0x12
 7165 01bf 06       		.uleb128 0x6
 7166 01c0 40       		.uleb128 0x40
 7167 01c1 18       		.uleb128 0x18
 7168 01c2 9642     		.uleb128 0x2116
 7169 01c4 19       		.uleb128 0x19
 7170 01c5 01       		.uleb128 0x1
 7171 01c6 13       		.uleb128 0x13
 7172 01c7 00       		.byte	0
 7173 01c8 00       		.byte	0
 7174 01c9 1E       		.uleb128 0x1e
 7175 01ca 0F       		.uleb128 0xf
 7176 01cb 00       		.byte	0
 7177 01cc 0B       		.uleb128 0xb
 7178 01cd 0B       		.uleb128 0xb
 7179 01ce 49       		.uleb128 0x49
 7180 01cf 13       		.uleb128 0x13
 7181 01d0 00       		.byte	0
 7182 01d1 00       		.byte	0
 7183 01d2 1F       		.uleb128 0x1f
 7184 01d3 0B       		.uleb128 0xb
 7185 01d4 01       		.byte	0x1
 7186 01d5 55       		.uleb128 0x55
 7187 01d6 17       		.uleb128 0x17
 7188 01d7 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 154


 7189 01d8 00       		.byte	0
 7190 01d9 20       		.uleb128 0x20
 7191 01da 34       		.uleb128 0x34
 7192 01db 00       		.byte	0
 7193 01dc 03       		.uleb128 0x3
 7194 01dd 0E       		.uleb128 0xe
 7195 01de 3A       		.uleb128 0x3a
 7196 01df 0B       		.uleb128 0xb
 7197 01e0 3B       		.uleb128 0x3b
 7198 01e1 05       		.uleb128 0x5
 7199 01e2 49       		.uleb128 0x49
 7200 01e3 13       		.uleb128 0x13
 7201 01e4 3F       		.uleb128 0x3f
 7202 01e5 19       		.uleb128 0x19
 7203 01e6 3C       		.uleb128 0x3c
 7204 01e7 19       		.uleb128 0x19
 7205 01e8 00       		.byte	0
 7206 01e9 00       		.byte	0
 7207 01ea 21       		.uleb128 0x21
 7208 01eb 34       		.uleb128 0x34
 7209 01ec 00       		.byte	0
 7210 01ed 03       		.uleb128 0x3
 7211 01ee 0E       		.uleb128 0xe
 7212 01ef 3A       		.uleb128 0x3a
 7213 01f0 0B       		.uleb128 0xb
 7214 01f1 3B       		.uleb128 0x3b
 7215 01f2 0B       		.uleb128 0xb
 7216 01f3 49       		.uleb128 0x49
 7217 01f4 13       		.uleb128 0x13
 7218 01f5 3F       		.uleb128 0x3f
 7219 01f6 19       		.uleb128 0x19
 7220 01f7 3C       		.uleb128 0x3c
 7221 01f8 19       		.uleb128 0x19
 7222 01f9 00       		.byte	0
 7223 01fa 00       		.byte	0
 7224 01fb 22       		.uleb128 0x22
 7225 01fc 21       		.uleb128 0x21
 7226 01fd 00       		.byte	0
 7227 01fe 49       		.uleb128 0x49
 7228 01ff 13       		.uleb128 0x13
 7229 0200 2F       		.uleb128 0x2f
 7230 0201 05       		.uleb128 0x5
 7231 0202 00       		.byte	0
 7232 0203 00       		.byte	0
 7233 0204 23       		.uleb128 0x23
 7234 0205 26       		.uleb128 0x26
 7235 0206 00       		.byte	0
 7236 0207 49       		.uleb128 0x49
 7237 0208 13       		.uleb128 0x13
 7238 0209 00       		.byte	0
 7239 020a 00       		.byte	0
 7240 020b 24       		.uleb128 0x24
 7241 020c 34       		.uleb128 0x34
 7242 020d 00       		.byte	0
 7243 020e 03       		.uleb128 0x3
 7244 020f 0E       		.uleb128 0xe
 7245 0210 3A       		.uleb128 0x3a
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 155


 7246 0211 0B       		.uleb128 0xb
 7247 0212 3B       		.uleb128 0x3b
 7248 0213 0B       		.uleb128 0xb
 7249 0214 49       		.uleb128 0x49
 7250 0215 13       		.uleb128 0x13
 7251 0216 3F       		.uleb128 0x3f
 7252 0217 19       		.uleb128 0x19
 7253 0218 02       		.uleb128 0x2
 7254 0219 18       		.uleb128 0x18
 7255 021a 00       		.byte	0
 7256 021b 00       		.byte	0
 7257 021c 25       		.uleb128 0x25
 7258 021d 34       		.uleb128 0x34
 7259 021e 00       		.byte	0
 7260 021f 03       		.uleb128 0x3
 7261 0220 08       		.uleb128 0x8
 7262 0221 3A       		.uleb128 0x3a
 7263 0222 0B       		.uleb128 0xb
 7264 0223 3B       		.uleb128 0x3b
 7265 0224 0B       		.uleb128 0xb
 7266 0225 49       		.uleb128 0x49
 7267 0226 13       		.uleb128 0x13
 7268 0227 3F       		.uleb128 0x3f
 7269 0228 19       		.uleb128 0x19
 7270 0229 02       		.uleb128 0x2
 7271 022a 18       		.uleb128 0x18
 7272 022b 00       		.byte	0
 7273 022c 00       		.byte	0
 7274 022d 26       		.uleb128 0x26
 7275 022e 34       		.uleb128 0x34
 7276 022f 00       		.byte	0
 7277 0230 03       		.uleb128 0x3
 7278 0231 0E       		.uleb128 0xe
 7279 0232 3A       		.uleb128 0x3a
 7280 0233 0B       		.uleb128 0xb
 7281 0234 3B       		.uleb128 0x3b
 7282 0235 05       		.uleb128 0x5
 7283 0236 49       		.uleb128 0x49
 7284 0237 13       		.uleb128 0x13
 7285 0238 3F       		.uleb128 0x3f
 7286 0239 19       		.uleb128 0x19
 7287 023a 02       		.uleb128 0x2
 7288 023b 18       		.uleb128 0x18
 7289 023c 00       		.byte	0
 7290 023d 00       		.byte	0
 7291 023e 00       		.byte	0
 7292              		.section	.debug_aranges,"",%progbits
 7293 0000 C4000000 		.4byte	0xc4
 7294 0004 0200     		.2byte	0x2
 7295 0006 00000000 		.4byte	.Ldebug_info0
 7296 000a 04       		.byte	0x4
 7297 000b 00       		.byte	0
 7298 000c 0000     		.2byte	0
 7299 000e 0000     		.2byte	0
 7300 0010 00000000 		.4byte	.LFB64
 7301 0014 0C000000 		.4byte	.LFE64-.LFB64
 7302 0018 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 156


 7303 001c 58000000 		.4byte	.LFE65-.LFB65
 7304 0020 00000000 		.4byte	.LFB66
 7305 0024 68000000 		.4byte	.LFE66-.LFB66
 7306 0028 00000000 		.4byte	.LFB67
 7307 002c 4C000000 		.4byte	.LFE67-.LFB67
 7308 0030 00000000 		.4byte	.LFB68
 7309 0034 46000000 		.4byte	.LFE68-.LFB68
 7310 0038 00000000 		.4byte	.LFB69
 7311 003c 56000000 		.4byte	.LFE69-.LFB69
 7312 0040 00000000 		.4byte	.LFB70
 7313 0044 40000000 		.4byte	.LFE70-.LFB70
 7314 0048 00000000 		.4byte	.LFB71
 7315 004c 14000000 		.4byte	.LFE71-.LFB71
 7316 0050 00000000 		.4byte	.LFB72
 7317 0054 7C000000 		.4byte	.LFE72-.LFB72
 7318 0058 00000000 		.4byte	.LFB73
 7319 005c 1C0C0000 		.4byte	.LFE73-.LFB73
 7320 0060 00000000 		.4byte	.LFB74
 7321 0064 54000000 		.4byte	.LFE74-.LFB74
 7322 0068 00000000 		.4byte	.LFB75
 7323 006c C4000000 		.4byte	.LFE75-.LFB75
 7324 0070 00000000 		.4byte	.LFB76
 7325 0074 68020000 		.4byte	.LFE76-.LFB76
 7326 0078 00000000 		.4byte	.LFB77
 7327 007c F0000000 		.4byte	.LFE77-.LFB77
 7328 0080 00000000 		.4byte	.LFB78
 7329 0084 C4000000 		.4byte	.LFE78-.LFB78
 7330 0088 00000000 		.4byte	.LFB79
 7331 008c B4000000 		.4byte	.LFE79-.LFB79
 7332 0090 00000000 		.4byte	.LFB80
 7333 0094 B0000000 		.4byte	.LFE80-.LFB80
 7334 0098 00000000 		.4byte	.LFB81
 7335 009c 24010000 		.4byte	.LFE81-.LFB81
 7336 00a0 00000000 		.4byte	.LFB82
 7337 00a4 D8000000 		.4byte	.LFE82-.LFB82
 7338 00a8 00000000 		.4byte	.LFB83
 7339 00ac D8000000 		.4byte	.LFE83-.LFB83
 7340 00b0 00000000 		.4byte	.LFB84
 7341 00b4 90000000 		.4byte	.LFE84-.LFB84
 7342 00b8 00000000 		.4byte	.LFB85
 7343 00bc 68020000 		.4byte	.LFE85-.LFB85
 7344 00c0 00000000 		.4byte	0
 7345 00c4 00000000 		.4byte	0
 7346              		.section	.debug_ranges,"",%progbits
 7347              	.Ldebug_ranges0:
 7348 0000 76000000 		.4byte	.LBB15
 7349 0004 6C010000 		.4byte	.LBE15
 7350 0008 6E010000 		.4byte	.LBB18
 7351 000c EA010000 		.4byte	.LBE18
 7352 0010 EC010000 		.4byte	.LBB19
 7353 0014 2C020000 		.4byte	.LBE19
 7354 0018 00000000 		.4byte	0
 7355 001c 00000000 		.4byte	0
 7356 0020 00000000 		.4byte	.LFB64
 7357 0024 0C000000 		.4byte	.LFE64
 7358 0028 00000000 		.4byte	.LFB65
 7359 002c 58000000 		.4byte	.LFE65
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 157


 7360 0030 00000000 		.4byte	.LFB66
 7361 0034 68000000 		.4byte	.LFE66
 7362 0038 00000000 		.4byte	.LFB67
 7363 003c 4C000000 		.4byte	.LFE67
 7364 0040 00000000 		.4byte	.LFB68
 7365 0044 46000000 		.4byte	.LFE68
 7366 0048 00000000 		.4byte	.LFB69
 7367 004c 56000000 		.4byte	.LFE69
 7368 0050 00000000 		.4byte	.LFB70
 7369 0054 40000000 		.4byte	.LFE70
 7370 0058 00000000 		.4byte	.LFB71
 7371 005c 14000000 		.4byte	.LFE71
 7372 0060 00000000 		.4byte	.LFB72
 7373 0064 7C000000 		.4byte	.LFE72
 7374 0068 00000000 		.4byte	.LFB73
 7375 006c 1C0C0000 		.4byte	.LFE73
 7376 0070 00000000 		.4byte	.LFB74
 7377 0074 54000000 		.4byte	.LFE74
 7378 0078 00000000 		.4byte	.LFB75
 7379 007c C4000000 		.4byte	.LFE75
 7380 0080 00000000 		.4byte	.LFB76
 7381 0084 68020000 		.4byte	.LFE76
 7382 0088 00000000 		.4byte	.LFB77
 7383 008c F0000000 		.4byte	.LFE77
 7384 0090 00000000 		.4byte	.LFB78
 7385 0094 C4000000 		.4byte	.LFE78
 7386 0098 00000000 		.4byte	.LFB79
 7387 009c B4000000 		.4byte	.LFE79
 7388 00a0 00000000 		.4byte	.LFB80
 7389 00a4 B0000000 		.4byte	.LFE80
 7390 00a8 00000000 		.4byte	.LFB81
 7391 00ac 24010000 		.4byte	.LFE81
 7392 00b0 00000000 		.4byte	.LFB82
 7393 00b4 D8000000 		.4byte	.LFE82
 7394 00b8 00000000 		.4byte	.LFB83
 7395 00bc D8000000 		.4byte	.LFE83
 7396 00c0 00000000 		.4byte	.LFB84
 7397 00c4 90000000 		.4byte	.LFE84
 7398 00c8 00000000 		.4byte	.LFB85
 7399 00cc 68020000 		.4byte	.LFE85
 7400 00d0 00000000 		.4byte	0
 7401 00d4 00000000 		.4byte	0
 7402              		.section	.debug_line,"",%progbits
 7403              	.Ldebug_line0:
 7404 0000 90060000 		.section	.debug_str,"MS",%progbits,1
 7404      02009901 
 7404      00000201 
 7404      FB0E0D00 
 7404      01010101 
 7405              	.LASF123:
 7406 0000 73747269 		.ascii	"stringCapSensorsRaw\000"
 7406      6E674361 
 7406      7053656E 
 7406      736F7273 
 7406      52617700 
 7407              	.LASF20:
 7408 0014 75696E74 		.ascii	"uint16\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 158


 7408      313600
 7409              	.LASF113:
 7410 001b 70726576 		.ascii	"prevVBUS\000"
 7410      56425553 
 7410      00
 7411              	.LASF67:
 7412 0024 70697463 		.ascii	"pitchBendVal\000"
 7412      6842656E 
 7412      6456616C 
 7412      00
 7413              	.LASF127:
 7414 0031 73797365 		.ascii	"sysexBuffer\000"
 7414      78427566 
 7414      66657200 
 7415              	.LASF102:
 7416 003d 43617053 		.ascii	"CapSense_sensorOnMask\000"
 7416      656E7365 
 7416      5F73656E 
 7416      736F724F 
 7416      6E4D6173 
 7417              	.LASF96:
 7418 0053 68616E64 		.ascii	"handleNotes\000"
 7418      6C654E6F 
 7418      74657300 
 7419              	.LASF126:
 7420 005f 66726574 		.ascii	"fretRatios\000"
 7420      52617469 
 7420      6F7300
 7421              	.LASF210:
 7422 006a 69567468 		.ascii	"iVtherm\000"
 7422      65726D00 
 7423              	.LASF44:
 7424 0072 63795F65 		.ascii	"cy_en_em_eeprom_status_t\000"
 7424      6E5F656D 
 7424      5F656570 
 7424      726F6D5F 
 7424      73746174 
 7425              	.LASF0:
 7426 008b 7369676E 		.ascii	"signed char\000"
 7426      65642063 
 7426      68617200 
 7427              	.LASF3:
 7428 0097 5F5F7569 		.ascii	"__uint8_t\000"
 7428      6E74385F 
 7428      7400
 7429              	.LASF129:
 7430 00a1 72656365 		.ascii	"receivingSysex\000"
 7430      6976696E 
 7430      67537973 
 7430      657800
 7431              	.LASF88:
 7432 00b0 446D6154 		.ascii	"DmaTxConfiguration\000"
 7432      78436F6E 
 7432      66696775 
 7432      72617469 
 7432      6F6E00
 7433              	.LASF31:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 159


 7434 00c3 6E756D62 		.ascii	"numberOfRows\000"
 7434      65724F66 
 7434      526F7773 
 7434      00
 7435              	.LASF212:
 7436 00d0 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 7436      43313120 
 7436      352E342E 
 7436      31203230 
 7436      31363036 
 7437 0103 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 7437      20726576 
 7437      6973696F 
 7437      6E203233 
 7437      37373135 
 7438 0136 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 7438      66756E63 
 7438      74696F6E 
 7438      2D736563 
 7438      74696F6E 
 7439              	.LASF89:
 7440 015e 446D6152 		.ascii	"DmaRxConfiguration\000"
 7440      78436F6E 
 7440      66696775 
 7440      72617469 
 7440      6F6E00
 7441              	.LASF58:
 7442 0171 69737461 		.ascii	"istart\000"
 7442      727400
 7443              	.LASF135:
 7444 0178 73797365 		.ascii	"sysexPresetInProgress\000"
 7444      78507265 
 7444      73657449 
 7444      6E50726F 
 7444      67726573 
 7445              	.LASF115:
 7446 018e 5553425F 		.ascii	"USB_check_flag\000"
 7446      63686563 
 7446      6B5F666C 
 7446      616700
 7447              	.LASF107:
 7448 019d 5553425F 		.ascii	"USB_midiOutBuffer\000"
 7448      6D696469 
 7448      4F757442 
 7448      75666665 
 7448      7200
 7449              	.LASF12:
 7450 01af 6C6F6E67 		.ascii	"long long unsigned int\000"
 7450      206C6F6E 
 7450      6720756E 
 7450      7369676E 
 7450      65642069 
 7451              	.LASF53:
 7452 01c6 66746F6D 		.ascii	"ftom\000"
 7452      00
 7453              	.LASF50:
 7454 01cb 74656D70 		.ascii	"tempmax\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 160


 7454      6D617800 
 7455              	.LASF10:
 7456 01d3 5F5F696E 		.ascii	"__int64_t\000"
 7456      7436345F 
 7456      7400
 7457              	.LASF110:
 7458 01dd 49544D5F 		.ascii	"ITM_RxBuffer\000"
 7458      52784275 
 7458      66666572 
 7458      00
 7459              	.LASF122:
 7460 01ea 73747269 		.ascii	"stringCapSensorsOnOff\000"
 7460      6E674361 
 7460      7053656E 
 7460      736F7273 
 7460      4F6E4F66 
 7461              	.LASF77:
 7462 0200 4D494449 		.ascii	"MIDInoteNum\000"
 7462      6E6F7465 
 7462      4E756D00 
 7463              	.LASF49:
 7464 020c 74656D70 		.ascii	"tempmin\000"
 7464      6D696E00 
 7465              	.LASF11:
 7466 0214 6C6F6E67 		.ascii	"long long int\000"
 7466      206C6F6E 
 7466      6720696E 
 7466      7400
 7467              	.LASF216:
 7468 0222 70726573 		.ascii	"presetArraySectionState\000"
 7468      65744172 
 7468      72617953 
 7468      65637469 
 7468      6F6E5374 
 7469              	.LASF55:
 7470 023a 616C7068 		.ascii	"alpha\000"
 7470      6100
 7471              	.LASF52:
 7472 0240 6D746F66 		.ascii	"mtof\000"
 7472      00
 7473              	.LASF177:
 7474 0245 696E7653 		.ascii	"invStringMappedPositions\000"
 7474      7472696E 
 7474      674D6170 
 7474      70656450 
 7474      6F736974 
 7475              	.LASF27:
 7476 025e 72656738 		.ascii	"reg8\000"
 7476      00
 7477              	.LASF22:
 7478 0263 696E7433 		.ascii	"int32\000"
 7478      3200
 7479              	.LASF152:
 7480 0269 72784275 		.ascii	"rxBuffer\000"
 7480      66666572 
 7480      00
 7481              	.LASF192:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 161


 7482 0272 6B6E6F62 		.ascii	"knobs7bitPrevLS\000"
 7482      73376269 
 7482      74507265 
 7482      764C5300 
 7483              	.LASF109:
 7484 0282 456D5F45 		.ascii	"Em_EEPROM_em_EepromStorage\000"
 7484      4550524F 
 7484      4D5F656D 
 7484      5F456570 
 7484      726F6D53 
 7485              	.LASF84:
 7486 029d 7363616E 		.ascii	"scanLinearResistor\000"
 7486      4C696E65 
 7486      61725265 
 7486      73697374 
 7486      6F7200
 7487              	.LASF73:
 7488 02b0 5553425F 		.ascii	"USB_callbackLocalMidiEvent\000"
 7488      63616C6C 
 7488      6261636B 
 7488      4C6F6361 
 7488      6C4D6964 
 7489              	.LASF125:
 7490 02cb 66726574 		.ascii	"fretMeasurements\000"
 7490      4D656173 
 7490      7572656D 
 7490      656E7473 
 7490      00
 7491              	.LASF173:
 7492 02dc 74696D65 		.ascii	"timeSinceLastAttack\000"
 7492      53696E63 
 7492      654C6173 
 7492      74417474 
 7492      61636B00 
 7493              	.LASF7:
 7494 02f0 6C6F6E67 		.ascii	"long int\000"
 7494      20696E74 
 7494      00
 7495              	.LASF118:
 7496 02f9 7363616E 		.ascii	"scanPart\000"
 7496      50617274 
 7496      00
 7497              	.LASF184:
 7498 0302 76696272 		.ascii	"vibratoCrossfade\000"
 7498      61746F43 
 7498      726F7373 
 7498      66616465 
 7498      00
 7499              	.LASF37:
 7500 0313 75736572 		.ascii	"userFlashStartAddr\000"
 7500      466C6173 
 7500      68537461 
 7500      72744164 
 7500      647200
 7501              	.LASF211:
 7502 0326 636F756E 		.ascii	"counter2\000"
 7502      74657232 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 162


 7502      00
 7503              	.LASF56:
 7504 032f 6F6D416C 		.ascii	"omAlpha\000"
 7504      70686100 
 7505              	.LASF143:
 7506 0337 6B6E6F62 		.ascii	"knobsFIR\000"
 7506      73464952 
 7506      00
 7507              	.LASF19:
 7508 0340 75696E74 		.ascii	"uint8\000"
 7508      3800
 7509              	.LASF2:
 7510 0346 73686F72 		.ascii	"short int\000"
 7510      7420696E 
 7510      7400
 7511              	.LASF15:
 7512 0350 75696E74 		.ascii	"uint16_t\000"
 7512      31365F74 
 7512      00
 7513              	.LASF24:
 7514 0359 646F7562 		.ascii	"double\000"
 7514      6C6500
 7515              	.LASF134:
 7516 0360 70726573 		.ascii	"presetArraySize\000"
 7516      65744172 
 7516      72617953 
 7516      697A6500 
 7517              	.LASF193:
 7518 0370 6B6E6F62 		.ascii	"knobs7bitHysteresis\000"
 7518      73376269 
 7518      74487973 
 7518      74657265 
 7518      73697300 
 7519              	.LASF66:
 7520 0384 6D61696E 		.ascii	"main\000"
 7520      00
 7521              	.LASF68:
 7522 0389 63686563 		.ascii	"checkUSB_Vbus\000"
 7522      6B555342 
 7522      5F566275 
 7522      7300
 7523              	.LASF160:
 7524 0397 61727261 		.ascii	"array\000"
 7524      7900
 7525              	.LASF51:
 7526 039d 4C454146 		.ascii	"LEAF_clip\000"
 7526      5F636C69 
 7526      7000
 7527              	.LASF21:
 7528 03a7 75696E74 		.ascii	"uint32\000"
 7528      333200
 7529              	.LASF147:
 7530 03ae 74784368 		.ascii	"txChannel\000"
 7530      616E6E65 
 7530      6C00
 7531              	.LASF28:
 7532 03b8 6C6F6E67 		.ascii	"long double\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 163


 7532      20646F75 
 7532      626C6500 
 7533              	.LASF8:
 7534 03c4 5F5F7569 		.ascii	"__uint32_t\000"
 7534      6E743332 
 7534      5F7400
 7535              	.LASF178:
 7536 03cf 73747269 		.ascii	"stringMIDI\000"
 7536      6E674D49 
 7536      444900
 7537              	.LASF174:
 7538 03da 70726576 		.ascii	"previousHysteresisStates\000"
 7538      696F7573 
 7538      48797374 
 7538      65726573 
 7538      69735374 
 7539              	.LASF104:
 7540 03f3 5553425F 		.ascii	"USB_midi_in_ep\000"
 7540      6D696469 
 7540      5F696E5F 
 7540      657000
 7541              	.LASF76:
 7542 0402 73656E64 		.ascii	"sendMIDINoteOn\000"
 7542      4D494449 
 7542      4E6F7465 
 7542      4F6E00
 7543              	.LASF188:
 7544 0411 62757474 		.ascii	"buttons\000"
 7544      6F6E7300 
 7545              	.LASF105:
 7546 0419 5553425F 		.ascii	"USB_midiInBuffer\000"
 7546      6D696469 
 7546      496E4275 
 7546      66666572 
 7546      00
 7547              	.LASF179:
 7548 042a 73747269 		.ascii	"stringMIDIPrev\000"
 7548      6E674D49 
 7548      44495072 
 7548      657600
 7549              	.LASF57:
 7550 0439 76616C75 		.ascii	"value\000"
 7550      6500
 7551              	.LASF35:
 7552 043f 72656475 		.ascii	"redundantCopy\000"
 7552      6E64616E 
 7552      74436F70 
 7552      7900
 7553              	.LASF215:
 7554 044d 62726561 		.ascii	"breakFloat\000"
 7554      6B466C6F 
 7554      617400
 7555              	.LASF156:
 7556 0458 72783243 		.ascii	"rx2Channel\000"
 7556      68616E6E 
 7556      656C00
 7557              	.LASF204:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 164


 7558 0463 736B6970 		.ascii	"skipPointer\000"
 7558      506F696E 
 7558      74657200 
 7559              	.LASF153:
 7560 046f 74783243 		.ascii	"tx2Channel\000"
 7560      68616E6E 
 7560      656C00
 7561              	.LASF165:
 7562 047a 77686963 		.ascii	"whichLinearSensor\000"
 7562      684C696E 
 7562      65617253 
 7562      656E736F 
 7562      7200
 7563              	.LASF157:
 7564 048c 72783254 		.ascii	"rx2TD\000"
 7564      4400
 7565              	.LASF162:
 7566 0492 65657072 		.ascii	"eeprom_cnt\000"
 7566      6F6D5F63 
 7566      6E7400
 7567              	.LASF172:
 7568 049d 6C6F7564 		.ascii	"loudestString\000"
 7568      65737453 
 7568      7472696E 
 7568      6700
 7569              	.LASF9:
 7570 04ab 6C6F6E67 		.ascii	"long unsigned int\000"
 7570      20756E73 
 7570      69676E65 
 7570      6420696E 
 7570      7400
 7571              	.LASF121:
 7572 04bd 49324362 		.ascii	"I2Cbuff1\000"
 7572      75666631 
 7572      00
 7573              	.LASF95:
 7574 04c6 74696D65 		.ascii	"timeout\000"
 7574      6F757400 
 7575              	.LASF128:
 7576 04ce 73797365 		.ascii	"sysexPointer\000"
 7576      78506F69 
 7576      6E746572 
 7576      00
 7577              	.LASF176:
 7578 04db 6F70656E 		.ascii	"openStringMIDI\000"
 7578      53747269 
 7578      6E674D49 
 7578      444900
 7579              	.LASF209:
 7580 04ea 74656D70 		.ascii	"tempMIDI\000"
 7580      4D494449 
 7580      00
 7581              	.LASF203:
 7582 04f3 736B6970 		.ascii	"skippedNotes\000"
 7582      7065644E 
 7582      6F746573 
 7582      00
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 165


 7583              	.LASF5:
 7584 0500 73686F72 		.ascii	"short unsigned int\000"
 7584      7420756E 
 7584      7369676E 
 7584      65642069 
 7584      6E7400
 7585              	.LASF186:
 7586 0513 70726576 		.ascii	"previousPitchBendsSent\000"
 7586      696F7573 
 7586      50697463 
 7586      6842656E 
 7586      64735365 
 7587              	.LASF139:
 7588 052a 70726576 		.ascii	"previousButtons\000"
 7588      696F7573 
 7588      42757474 
 7588      6F6E7300 
 7589              	.LASF161:
 7590 053a 65657072 		.ascii	"eepromReturnValue\000"
 7590      6F6D5265 
 7590      7475726E 
 7590      56616C75 
 7590      6500
 7591              	.LASF60:
 7592 054c 6F737461 		.ascii	"ostart\000"
 7592      727400
 7593              	.LASF61:
 7594 0553 6F73746F 		.ascii	"ostop\000"
 7594      7000
 7595              	.LASF100:
 7596 0559 6C6F7564 		.ascii	"loudestSoundingNote\000"
 7596      65737453 
 7596      6F756E64 
 7596      696E674E 
 7596      6F746500 
 7597              	.LASF64:
 7598 056d 56627573 		.ascii	"Vbus_function\000"
 7598      5F66756E 
 7598      6374696F 
 7598      6E00
 7599              	.LASF213:
 7600 057b 6D61696E 		.ascii	"main.c\000"
 7600      2E6300
 7601              	.LASF195:
 7602 0582 6C696E65 		.ascii	"linearFIR\000"
 7602      61724649 
 7602      5200
 7603              	.LASF208:
 7604 058c 6D617043 		.ascii	"mapCount\000"
 7604      6F756E74 
 7604      00
 7605              	.LASF183:
 7606 0595 68705F52 		.ascii	"hp_R\000"
 7606      00
 7607              	.LASF170:
 7608 059a 70697463 		.ascii	"pitchBendsPerString\000"
 7608      6842656E 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 166


 7608      64735065 
 7608      72537472 
 7608      696E6700 
 7609              	.LASF47:
 7610 05ae 6D617070 		.ascii	"mapping\000"
 7610      696E6700 
 7611              	.LASF63:
 7612 05b6 536C6565 		.ascii	"SleepIsr_function\000"
 7612      70497372 
 7612      5F66756E 
 7612      6374696F 
 7612      6E00
 7613              	.LASF6:
 7614 05c8 5F5F696E 		.ascii	"__int32_t\000"
 7614      7433325F 
 7614      7400
 7615              	.LASF141:
 7616 05d2 73747269 		.ascii	"stringPlucks\000"
 7616      6E67506C 
 7616      75636B73 
 7616      00
 7617              	.LASF40:
 7618 05df 43595F45 		.ascii	"CY_EM_EEPROM_BAD_PARAM\000"
 7618      4D5F4545 
 7618      50524F4D 
 7618      5F424144 
 7618      5F504152 
 7619              	.LASF131:
 7620 05f6 70726573 		.ascii	"presetArray\000"
 7620      65744172 
 7620      72617900 
 7621              	.LASF41:
 7622 0602 43595F45 		.ascii	"CY_EM_EEPROM_BAD_CHECKSUM\000"
 7622      4D5F4545 
 7622      50524F4D 
 7622      5F424144 
 7622      5F434845 
 7623              	.LASF164:
 7624 061c 73747269 		.ascii	"stringStates\000"
 7624      6E675374 
 7624      61746573 
 7624      00
 7625              	.LASF185:
 7626 0629 63726F73 		.ascii	"crossFadeStartCount\000"
 7626      73466164 
 7626      65537461 
 7626      7274436F 
 7626      756E7400 
 7627              	.LASF148:
 7628 063d 74785444 		.ascii	"txTD\000"
 7628      00
 7629              	.LASF159:
 7630 0642 74783242 		.ascii	"tx2BufferTemp\000"
 7630      75666665 
 7630      7254656D 
 7630      7000
 7631              	.LASF29:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 167


 7632 0650 73697A65 		.ascii	"sizetype\000"
 7632      74797065 
 7632      00
 7633              	.LASF182:
 7634 0659 68705F78 		.ascii	"hp_x\000"
 7634      00
 7635              	.LASF181:
 7636 065e 68705F79 		.ascii	"hp_y\000"
 7636      00
 7637              	.LASF75:
 7638 0663 6D696469 		.ascii	"midiMsg\000"
 7638      4D736700 
 7639              	.LASF54:
 7640 066b 4C454146 		.ascii	"LEAF_interpolation_linear\000"
 7640      5F696E74 
 7640      6572706F 
 7640      6C617469 
 7640      6F6E5F6C 
 7641              	.LASF101:
 7642 0685 65657072 		.ascii	"eepromArray\000"
 7642      6F6D4172 
 7642      72617900 
 7643              	.LASF38:
 7644 0691 63795F73 		.ascii	"cy_stc_eeprom_context_t\000"
 7644      74635F65 
 7644      6570726F 
 7644      6D5F636F 
 7644      6E746578 
 7645              	.LASF206:
 7646 06a9 73656E64 		.ascii	"sendingPreset\000"
 7646      696E6750 
 7646      72657365 
 7646      7400
 7647              	.LASF120:
 7648 06b7 6F757443 		.ascii	"outChanged\000"
 7648      68616E67 
 7648      656400
 7649              	.LASF158:
 7650 06c2 72783242 		.ascii	"rx2Buffer\000"
 7650      75666665 
 7650      7200
 7651              	.LASF166:
 7652 06cc 74657374 		.ascii	"testVar\000"
 7652      56617200 
 7653              	.LASF46:
 7654 06d4 696E6974 		.ascii	"initialVals\000"
 7654      69616C56 
 7654      616C7300 
 7655              	.LASF133:
 7656 06e0 70726573 		.ascii	"presetArraySendCount\000"
 7656      65744172 
 7656      72617953 
 7656      656E6443 
 7656      6F756E74 
 7657              	.LASF23:
 7658 06f5 666C6F61 		.ascii	"float\000"
 7658      7400
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 168


 7659              	.LASF90:
 7660 06fb 4932435F 		.ascii	"I2C_MasterWriteBlocking\000"
 7660      4D617374 
 7660      65725772 
 7660      69746542 
 7660      6C6F636B 
 7661              	.LASF154:
 7662 0713 74783254 		.ascii	"tx2TD\000"
 7662      4400
 7663              	.LASF111:
 7664 0719 75736241 		.ascii	"usbActivityCounter\000"
 7664      63746976 
 7664      69747943 
 7664      6F756E74 
 7664      657200
 7665              	.LASF92:
 7666 072c 6E627974 		.ascii	"nbytes\000"
 7666      657300
 7667              	.LASF201:
 7668 0733 70697463 		.ascii	"pitchBendHistory\000"
 7668      6842656E 
 7668      64486973 
 7668      746F7279 
 7668      00
 7669              	.LASF190:
 7670 0744 6B6E6F62 		.ascii	"knobs7bit\000"
 7670      73376269 
 7670      7400
 7671              	.LASF45:
 7672 074e 75696E74 		.ascii	"uint\000"
 7672      00
 7673              	.LASF32:
 7674 0753 6C617374 		.ascii	"lastWrRowAddr\000"
 7674      5772526F 
 7674      77416464 
 7674      7200
 7675              	.LASF42:
 7676 0761 43595F45 		.ascii	"CY_EM_EEPROM_BAD_DATA\000"
 7676      4D5F4545 
 7676      50524F4D 
 7676      5F424144 
 7676      5F444154 
 7677              	.LASF168:
 7678 0777 66726574 		.ascii	"frettedState\000"
 7678      74656453 
 7678      74617465 
 7678      00
 7679              	.LASF103:
 7680 0784 5553425F 		.ascii	"USB_midiInPointer\000"
 7680      6D696469 
 7680      496E506F 
 7680      696E7465 
 7680      7200
 7681              	.LASF59:
 7682 0796 6973746F 		.ascii	"istop\000"
 7682      7000
 7683              	.LASF16:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 169


 7684 079c 696E7433 		.ascii	"int32_t\000"
 7684      325F7400 
 7685              	.LASF1:
 7686 07a4 756E7369 		.ascii	"unsigned char\000"
 7686      676E6564 
 7686      20636861 
 7686      7200
 7687              	.LASF187:
 7688 07b2 6B6E6F62 		.ascii	"knobs\000"
 7688      7300
 7689              	.LASF97:
 7690 07b8 6E6F7465 		.ascii	"note\000"
 7690      00
 7691              	.LASF91:
 7692 07bd 69324341 		.ascii	"i2CAddr\000"
 7692      64647200 
 7693              	.LASF71:
 7694 07c5 696E7456 		.ascii	"intVal\000"
 7694      616C00
 7695              	.LASF80:
 7696 07cc 73656E64 		.ascii	"sendMIDIPitchBend\000"
 7696      4D494449 
 7696      50697463 
 7696      6842656E 
 7696      6400
 7697              	.LASF30:
 7698 07de 776C456E 		.ascii	"wlEndAddr\000"
 7698      64416464 
 7698      7200
 7699              	.LASF86:
 7700 07e8 69526573 		.ascii	"iRes\000"
 7700      00
 7701              	.LASF169:
 7702 07ed 706F6C79 		.ascii	"polyMode\000"
 7702      4D6F6465 
 7702      00
 7703              	.LASF200:
 7704 07f6 70697463 		.ascii	"pitchFreeze\000"
 7704      68467265 
 7704      657A6500 
 7705              	.LASF74:
 7706 0802 6361626C 		.ascii	"cable\000"
 7706      6500
 7707              	.LASF144:
 7708 0808 68797374 		.ascii	"hysteresisStates\000"
 7708      65726573 
 7708      69735374 
 7708      61746573 
 7708      00
 7709              	.LASF199:
 7710 0819 4C484D75 		.ascii	"LHMute\000"
 7710      746500
 7711              	.LASF205:
 7712 0820 62756643 		.ascii	"bufCount\000"
 7712      6F756E74 
 7712      00
 7713              	.LASF163:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 170


 7714 0829 62617243 		.ascii	"barCount\000"
 7714      6F756E74 
 7714      00
 7715              	.LASF79:
 7716 0832 6368616E 		.ascii	"channel\000"
 7716      6E656C00 
 7717              	.LASF151:
 7718 083a 72785444 		.ascii	"rxTD\000"
 7718      00
 7719              	.LASF43:
 7720 083f 43595F45 		.ascii	"CY_EM_EEPROM_WRITE_FAIL\000"
 7720      4D5F4545 
 7720      50524F4D 
 7720      5F575249 
 7720      54455F46 
 7721              	.LASF98:
 7722 0857 73747269 		.ascii	"string\000"
 7722      6E6700
 7723              	.LASF81:
 7724 085e 73656E64 		.ascii	"sendMIDIControlChange\000"
 7724      4D494449 
 7724      436F6E74 
 7724      726F6C43 
 7724      68616E67 
 7725              	.LASF130:
 7726 0874 70617273 		.ascii	"parsingSysex\000"
 7726      696E6753 
 7726      79736578 
 7726      00
 7727              	.LASF214:
 7728 0881 433A5C55 		.ascii	"C:\\Users\\JeffSnyder\\dev\\Electrobass_embedded\\P"
 7728      73657273 
 7728      5C4A6566 
 7728      66536E79 
 7728      6465725C 
 7729 08af 534F4335 		.ascii	"SOC5_electrobass_stringsensors\\CE210514_PSOC3_5_Th"
 7729      5F656C65 
 7729      6374726F 
 7729      62617373 
 7729      5F737472 
 7730 08e1 65726D69 		.ascii	"ermistor.cydsn\000"
 7730      73746F72 
 7730      2E637964 
 7730      736E00
 7731              	.LASF116:
 7732 08f0 6D696469 		.ascii	"midiSent\000"
 7732      53656E74 
 7732      00
 7733              	.LASF191:
 7734 08f9 6B6E6F62 		.ascii	"knobs7bitPrev\000"
 7734      73376269 
 7734      74507265 
 7734      7600
 7735              	.LASF175:
 7736 0907 6F70656E 		.ascii	"openStringFreqs\000"
 7736      53747269 
 7736      6E674672 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 171


 7736      65717300 
 7737              	.LASF99:
 7738 0917 74656D70 		.ascii	"tempVel\000"
 7738      56656C00 
 7739              	.LASF25:
 7740 091f 63686172 		.ascii	"char\000"
 7740      00
 7741              	.LASF93:
 7742 0924 6D6F6465 		.ascii	"mode\000"
 7742      00
 7743              	.LASF13:
 7744 0929 756E7369 		.ascii	"unsigned int\000"
 7744      676E6564 
 7744      20696E74 
 7744      00
 7745              	.LASF4:
 7746 0936 5F5F7569 		.ascii	"__uint16_t\000"
 7746      6E743136 
 7746      5F7400
 7747              	.LASF194:
 7748 0941 6C696E46 		.ascii	"linFirPointer\000"
 7748      6972506F 
 7748      696E7465 
 7748      7200
 7749              	.LASF136:
 7750 094f 6C696E65 		.ascii	"linearPotValue32Bit\000"
 7750      6172506F 
 7750      7456616C 
 7750      75653332 
 7750      42697400 
 7751              	.LASF70:
 7752 0963 74686556 		.ascii	"theVal\000"
 7752      616C00
 7753              	.LASF14:
 7754 096a 75696E74 		.ascii	"uint8_t\000"
 7754      385F7400 
 7755              	.LASF69:
 7756 0972 5553425F 		.ascii	"USB_service\000"
 7756      73657276 
 7756      69636500 
 7757              	.LASF197:
 7758 097e 6C696E65 		.ascii	"linearSmoothedPrev\000"
 7758      6172536D 
 7758      6F6F7468 
 7758      65645072 
 7758      657600
 7759              	.LASF189:
 7760 0991 66697250 		.ascii	"firPointer\000"
 7760      6F696E74 
 7760      657200
 7761              	.LASF137:
 7762 099c 636F756E 		.ascii	"counter\000"
 7762      74657200 
 7763              	.LASF87:
 7764 09a4 6F666673 		.ascii	"offset\000"
 7764      657400
 7765              	.LASF106:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 172


 7766 09ab 5553425F 		.ascii	"USB_midi_out_ep\000"
 7766      6D696469 
 7766      5F6F7574 
 7766      5F657000 
 7767              	.LASF83:
 7768 09bb 43437661 		.ascii	"CCval\000"
 7768      6C00
 7769              	.LASF114:
 7770 09c1 5553425F 		.ascii	"USB_active\000"
 7770      61637469 
 7770      766500
 7771              	.LASF108:
 7772 09cc 456D5F45 		.ascii	"Em_EEPROM_context\000"
 7772      4550524F 
 7772      4D5F636F 
 7772      6E746578 
 7772      7400
 7773              	.LASF65:
 7774 09de 72657374 		.ascii	"restartSystemCheck\000"
 7774      61727453 
 7774      79737465 
 7774      6D436865 
 7774      636B00
 7775              	.LASF140:
 7776 09f1 6F637461 		.ascii	"octave\000"
 7776      766500
 7777              	.LASF85:
 7778 09f8 69567265 		.ascii	"iVref\000"
 7778      6600
 7779              	.LASF34:
 7780 09fe 77656172 		.ascii	"wearLevelingFactor\000"
 7780      4C657665 
 7780      6C696E67 
 7780      46616374 
 7780      6F7200
 7781              	.LASF138:
 7782 0a11 74656D70 		.ascii	"temper\000"
 7782      657200
 7783              	.LASF155:
 7784 0a18 74783242 		.ascii	"tx2Buffer\000"
 7784      75666665 
 7784      7200
 7785              	.LASF149:
 7786 0a22 74784275 		.ascii	"txBuffer\000"
 7786      66666572 
 7786      00
 7787              	.LASF145:
 7788 0a2b 68797374 		.ascii	"hysteresisLowThresh\000"
 7788      65726573 
 7788      69734C6F 
 7788      77546872 
 7788      65736800 
 7789              	.LASF117:
 7790 0a3f 6D696469 		.ascii	"midiOverflow\000"
 7790      4F766572 
 7790      666C6F77 
 7790      00
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 173


 7791              	.LASF94:
 7792 0a4c 73746174 		.ascii	"status\000"
 7792      757300
 7793              	.LASF132:
 7794 0a53 70726573 		.ascii	"presetArraySection\000"
 7794      65744172 
 7794      72617953 
 7794      65637469 
 7794      6F6E00
 7795              	.LASF196:
 7796 0a66 6C696E65 		.ascii	"linearSmoothed\000"
 7796      6172536D 
 7796      6F6F7468 
 7796      656400
 7797              	.LASF146:
 7798 0a75 68797374 		.ascii	"hysteresisHighThresh\000"
 7798      65726573 
 7798      69734869 
 7798      67685468 
 7798      72657368 
 7799              	.LASF82:
 7800 0a8a 43436E75 		.ascii	"CCnum\000"
 7800      6D00
 7801              	.LASF39:
 7802 0a90 43595F45 		.ascii	"CY_EM_EEPROM_SUCCESS\000"
 7802      4D5F4545 
 7802      50524F4D 
 7802      5F535543 
 7802      43455353 
 7803              	.LASF36:
 7804 0aa5 626C6F63 		.ascii	"blockingWrite\000"
 7804      6B696E67 
 7804      57726974 
 7804      6500
 7805              	.LASF171:
 7806 0ab3 6F70656E 		.ascii	"openStringCount\000"
 7806      53747269 
 7806      6E67436F 
 7806      756E7400 
 7807              	.LASF62:
 7808 0ac3 62757474 		.ascii	"button_press_ISR\000"
 7808      6F6E5F70 
 7808      72657373 
 7808      5F495352 
 7808      00
 7809              	.LASF124:
 7810 0ad4 74687265 		.ascii	"thresholdArray\000"
 7810      73686F6C 
 7810      64417272 
 7810      617900
 7811              	.LASF26:
 7812 0ae3 63797374 		.ascii	"cystatus\000"
 7812      61747573 
 7812      00
 7813              	.LASF142:
 7814 0aec 73747269 		.ascii	"stringPlucksPrev\000"
 7814      6E67506C 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 174


 7814      75636B73 
 7814      50726576 
 7814      00
 7815              	.LASF119:
 7816 0afd 63757272 		.ascii	"currentOutPointer\000"
 7816      656E744F 
 7816      7574506F 
 7816      696E7465 
 7816      7200
 7817              	.LASF33:
 7818 0b0f 65657072 		.ascii	"eepromSize\000"
 7818      6F6D5369 
 7818      7A6500
 7819              	.LASF112:
 7820 0b1a 63757272 		.ascii	"currentVBUS\000"
 7820      656E7456 
 7820      42555300 
 7821              	.LASF18:
 7822 0b26 696E7436 		.ascii	"int64_t\000"
 7822      345F7400 
 7823              	.LASF78:
 7824 0b2e 76656C6F 		.ascii	"velocity\000"
 7824      63697479 
 7824      00
 7825              	.LASF207:
 7826 0b37 63757272 		.ascii	"currentFloat\000"
 7826      656E7446 
 7826      6C6F6174 
 7826      00
 7827              	.LASF150:
 7828 0b44 72784368 		.ascii	"rxChannel\000"
 7828      616E6E65 
 7828      6C00
 7829              	.LASF48:
 7830 0b4e 70726573 		.ascii	"presetEnd\000"
 7830      6574456E 
 7830      6400
 7831              	.LASF198:
 7832 0b58 4C484D75 		.ascii	"LHMuteCounter\000"
 7832      7465436F 
 7832      756E7465 
 7832      7200
 7833              	.LASF167:
 7834 0b66 6C617374 		.ascii	"lastNotes\000"
 7834      4E6F7465 
 7834      7300
 7835              	.LASF17:
 7836 0b70 75696E74 		.ascii	"uint32_t\000"
 7836      33325F74 
 7836      00
 7837              	.LASF180:
 7838 0b79 6C696E65 		.ascii	"linearHysteresis\000"
 7838      61724879 
 7838      73746572 
 7838      65736973 
 7838      00
 7839              	.LASF72:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccg20G4m.s 			page 175


 7840 0b8a 70617273 		.ascii	"parseSysex\000"
 7840      65537973 
 7840      657800
 7841              	.LASF202:
 7842 0b95 70697463 		.ascii	"pitchBendHistoryPointer\000"
 7842      6842656E 
 7842      64486973 
 7842      746F7279 
 7842      506F696E 
 7843              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
