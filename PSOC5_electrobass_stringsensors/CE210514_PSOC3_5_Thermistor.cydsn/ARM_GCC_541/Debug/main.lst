ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	usbActivityCounter
  20              		.bss
  21              		.type	usbActivityCounter, %object
  22              		.size	usbActivityCounter, 1
  23              	usbActivityCounter:
  24 0000 00       		.space	1
  25              		.comm	midiMsg,4,4
  26              		.global	currentVBUS
  27              		.type	currentVBUS, %object
  28              		.size	currentVBUS, 1
  29              	currentVBUS:
  30 0001 00       		.space	1
  31              		.global	prevVBUS
  32              		.type	prevVBUS, %object
  33              		.size	prevVBUS, 1
  34              	prevVBUS:
  35 0002 00       		.space	1
  36              		.global	USB_active
  37              		.type	USB_active, %object
  38              		.size	USB_active, 1
  39              	USB_active:
  40 0003 00       		.space	1
  41              		.global	USB_check_flag
  42              		.type	USB_check_flag, %object
  43              		.size	USB_check_flag, 1
  44              	USB_check_flag:
  45 0004 00       		.space	1
  46              		.global	midiSent
  47 0005 00       		.align	1
  48              		.type	midiSent, %object
  49              		.size	midiSent, 2
  50              	midiSent:
  51 0006 0000     		.space	2
  52              		.global	midiOverflow
  53              		.align	1
  54              		.type	midiOverflow, %object
  55              		.size	midiOverflow, 2
  56              	midiOverflow:
  57 0008 0000     		.space	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 2


  58              		.global	scanPart
  59 000a 0000     		.align	2
  60              		.type	scanPart, %object
  61              		.size	scanPart, 4
  62              	scanPart:
  63 000c 00000000 		.space	4
  64              		.global	channel
  65              		.align	2
  66              		.type	channel, %object
  67              		.size	channel, 4
  68              	channel:
  69 0010 00000000 		.space	4
  70              		.global	currentOutPointer
  71              		.align	2
  72              		.type	currentOutPointer, %object
  73              		.size	currentOutPointer, 4
  74              	currentOutPointer:
  75 0014 00000000 		.space	4
  76              		.global	outChanged
  77              		.align	2
  78              		.type	outChanged, %object
  79              		.size	outChanged, 4
  80              	outChanged:
  81 0018 00000000 		.space	4
  82              		.comm	I2Cbuff1,256,4
  83              		.comm	stringCapSensorsOnOff,1,4
  84              		.comm	stringCapSensorsRaw,16,4
  85              		.global	thresholdArray
  86              		.data
  87              		.align	2
  88              		.type	thresholdArray, %object
  89              		.size	thresholdArray, 8
  90              	thresholdArray:
  91 0000 1E       		.byte	30
  92 0001 1E       		.byte	30
  93 0002 1E       		.byte	30
  94 0003 1E       		.byte	30
  95 0004 1E       		.byte	30
  96 0005 1E       		.byte	30
  97 0006 1E       		.byte	30
  98 0007 1E       		.byte	30
  99              		.global	fretMeasurements
 100              		.align	2
 101              		.type	fretMeasurements, %object
 102              		.size	fretMeasurements, 32
 103              	fretMeasurements:
 104 0008 14270100 		.word	75540
 105 000c 17580000 		.word	22551
 106 0010 2DFD0000 		.word	64813
 107 0014 BF4B0000 		.word	19391
 108 0018 80F80000 		.word	63616
 109 001c 6C4A0000 		.word	19052
 110 0020 32190100 		.word	71986
 111 0024 03530000 		.word	21251
 112              		.global	fretRatios
 113              		.align	2
 114              		.type	fretRatios, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 3


 115              		.size	fretRatios, 8
 116              	fretRatios:
 117 0028 C1A1713F 		.word	1064411585
 118 002c C1A1F13E 		.word	1056022977
 119              		.comm	linearPotValue32Bit,16,4
 120              		.global	i
 121              		.bss
 122              		.type	i, %object
 123              		.size	i, 1
 124              	i:
 125 001c 00       		.space	1
 126              		.global	counter
 127              		.type	counter, %object
 128              		.size	counter, 1
 129              	counter:
 130 001d 00       		.space	1
 131              		.comm	temper,4,4
 132              		.comm	previousButtons,44,4
 133              		.global	octave
 134 001e 0000     		.align	2
 135              		.type	octave, %object
 136              		.size	octave, 4
 137              	octave:
 138 0020 00000000 		.space	4
 139              		.comm	stringPlucks,16,4
 140              		.comm	stringPlucksPrev,16,4
 141              		.comm	knobsFIR,160,4
 142              		.comm	hysteresisStates,16,4
 143              		.global	hysteresisLowThresh
 144              		.data
 145              		.align	2
 146              		.type	hysteresisLowThresh, %object
 147              		.size	hysteresisLowThresh, 4
 148              	hysteresisLowThresh:
 149 0030 CDCCCC3E 		.word	1053609165
 150              		.global	hysteresisHighThresh
 151              		.align	2
 152              		.type	hysteresisHighThresh, %object
 153              		.size	hysteresisHighThresh, 4
 154              	hysteresisHighThresh:
 155 0034 9A99193F 		.word	1058642330
 156              		.comm	txChannel,1,1
 157              		.comm	txTD,1,1
 158              		.comm	txBuffer,16,4
 159              		.comm	rxChannel,1,1
 160              		.comm	rxTD,1,1
 161              		.comm	rxBuffer,16,4
 162              		.comm	tx2Channel,1,1
 163              		.comm	tx2TD,1,1
 164              		.comm	tx2Buffer,16,4
 165              		.comm	rx2Channel,1,1
 166              		.comm	rx2TD,1,1
 167              		.comm	rx2Buffer,16,4
 168              		.comm	tx2BufferTemp,16,4
 169              		.bss
 170              		.align	2
 171              	eepromArray:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 4


 172 0024 0000     		.space	2
 173              		.global	array
 174 0026 0000     		.align	2
 175              		.type	array, %object
 176              		.size	array, 2
 177              	array:
 178 0028 0000     		.space	2
 179              		.comm	eepromReturnValue,1,1
 180              		.global	Em_EEPROM_em_EepromStorage
 181              		.section	.rodata
 182              		.align	8
 183              		.type	Em_EEPROM_em_EepromStorage, %object
 184              		.size	Em_EEPROM_em_EepromStorage, 1024
 185              	Em_EEPROM_em_EepromStorage:
 186 0000 00000000 		.space	1024
 186      00000000 
 186      00000000 
 186      00000000 
 186      00000000 
 187              		.comm	eeprom_cnt,1,1
 188              		.comm	status,4,4
 189              		.comm	ptr,4,4
 190              		.global	barCount
 191              		.bss
 192 002a 0000     		.align	2
 193              		.type	barCount, %object
 194              		.size	barCount, 4
 195              	barCount:
 196 002c 00000000 		.space	4
 197              		.global	stringStates
 198              		.align	2
 199              		.type	stringStates, %object
 200              		.size	stringStates, 32
 201              	stringStates:
 202 0030 00000000 		.space	32
 202      00000000 
 202      00000000 
 202      00000000 
 202      00000000 
 203              		.section	.text.button_press_ISR,"ax",%progbits
 204              		.align	2
 205              		.global	button_press_ISR
 206              		.thumb
 207              		.thumb_func
 208              		.type	button_press_ISR, %function
 209              	button_press_ISR:
 210              	.LFB64:
 211              		.file 1 "main.c"
   1:main.c        **** /*****************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** *
   4:main.c        **** * Version: 3.0
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *   
   8:main.c        **** * 
   9:main.c        **** * Note:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 5


  10:main.c        **** * 	The main project includes the ADC and other components required for the
  11:main.c        **** *   temperature measurement. The Thermistor component is a complete firmware component
  12:main.c        **** *   as decribed in the component datahseet and application note
  13:main.c        **** ******************************************************************************
  14:main.c        **** * Copyright (C) 2015, Cypress Semiconductor Corporation.
  15:main.c        **** ******************************************************************************
  16:main.c        **** * This software is owned by Cypress Semiconductor Corporation (Cypress) and is
  17:main.c        **** * protected by and subject to worldwide patent protection (United States and
  18:main.c        **** * foreign), United States copyright laws and international treaty provisions.
  19:main.c        **** * Cypress hereby grants to licensee a personal, non-exclusive, non-transferable
  20:main.c        **** * license to copy, use, modify, create derivative works of, and compile the
  21:main.c        **** * Cypress Source Code and derivative works for the sole purpose of creating
  22:main.c        **** * custom software in support of licensee product to be used only in conjunction
  23:main.c        **** * with a Cypress integrated circuit as specified in the applicable agreement.
  24:main.c        **** * Any reproduction, modification, translation, compilation, or representation of
  25:main.c        **** * this software except as specified above is prohibited without the express
  26:main.c        **** * written permission of Cypress.
  27:main.c        **** *
  28:main.c        **** * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH
  29:main.c        **** * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  30:main.c        **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  31:main.c        **** * Cypress reserves the right to make changes without further notice to the
  32:main.c        **** * materials described herein. Cypress does not assume any liability arising out
  33:main.c        **** * of the application or use of any product or circuit described herein. Cypress
  34:main.c        **** * does not authorize its products for use as critical components in life-support
  35:main.c        **** * systems where a malfunction or failure may reasonably be expected to result in
  36:main.c        **** * significant injury to the user. The inclusion of Cypress' product in a life-
  37:main.c        **** * support systems application implies that the manufacturer assumes all risk of
  38:main.c        **** * such use and in doing so indemnifies Cypress against all charges. Use may be
  39:main.c        **** * limited by and subject to the applicable Cypress software license agreement.
  40:main.c        **** *****************************************************************************/
  41:main.c        **** #include <device.h>
  42:main.c        **** 
  43:main.c        **** #include <stdio.h>
  44:main.c        **** #include "math.h"
  45:main.c        **** 
  46:main.c        **** //#define MAPLE1 1
  47:main.c        **** #define GREEN3 1
  48:main.c        **** 
  49:main.c        **** volatile uint8 usbActivityCounter = 0u;
  50:main.c        ****  uint8 midiMsg[4];
  51:main.c        **** volatile uint8_t currentVBUS = 0;
  52:main.c        **** volatile uint8_t prevVBUS = 0;
  53:main.c        **** volatile uint8_t USB_active = 0;
  54:main.c        **** volatile uint8_t USB_check_flag = 0;
  55:main.c        **** 
  56:main.c        **** uint16_t midiSent = 0;
  57:main.c        **** uint16_t midiOverflow = 0;
  58:main.c        **** 
  59:main.c        **** uint scanPart = 0;
  60:main.c        **** uint channel = 0;
  61:main.c        **** 
  62:main.c        **** uint currentOutPointer = 0;
  63:main.c        **** uint outChanged = 0;
  64:main.c        **** 
  65:main.c        **** void checkUSB_Vbus(void);
  66:main.c        **** void sendMIDIAllNotesOff(void);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 6


  67:main.c        **** void sendMIDIPitchBend(int val, int channel);
  68:main.c        **** void firstCheckUSB_Vbus(void);
  69:main.c        **** void restartSystemCheck(void);
  70:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel);
  71:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel);
  72:main.c        **** CY_ISR_PROTO(SleepIsr_function);
  73:main.c        **** void noteEvent(int string);
  74:main.c        **** void I2C_reset(void);
  75:main.c        **** void CCEvent(int bar);
  76:main.c        **** 
  77:main.c        **** union breakFloat {
  78:main.c        ****  float f;
  79:main.c        ****  uint8_t b[4];  
  80:main.c        ****  uint32_t u32;
  81:main.c        **** };
  82:main.c        **** volatile uint8_t I2Cbuff1[256];
  83:main.c        **** uint8_t stringCapSensorsOnOff[1];
  84:main.c        **** uint8_t stringCapSensorsRaw[16];
  85:main.c        **** uint8_t thresholdArray[8] = {30, 30, 30, 30, 30, 30, 30, 30};
  86:main.c        **** #if MAPLE1
  87:main.c        **** uint32_t fretMeasurements[4][2] = {
  88:main.c        ****     {68958,19847},
  89:main.c        ****     {67974,20532},
  90:main.c        ****     {68984,20665},
  91:main.c        ****     {85647,24651}
  92:main.c        **** };
  93:main.c        **** #elif defined GREEN3
  94:main.c        ****  uint32_t fretMeasurements[4][2] = {
  95:main.c        ****     {75540,22551},
  96:main.c        ****     {64813,19391},
  97:main.c        ****     {63616,19052},
  98:main.c        ****     {71986,21251}
  99:main.c        **** };
 100:main.c        **** #else
 101:main.c        **** uint16_t fretMeasurements[4][2] = {
 102:main.c        ****     {57984,17489},
 103:main.c        ****     {53292,15779},
 104:main.c        ****     {52933,15582},
 105:main.c        ****     {57784,16450}
 106:main.c        **** };
 107:main.c        ****     #endif
 108:main.c        **** float fretRatios[2] = {0.94387439674627617953623675390268f,0.47193719837313808976811837695134f}; 
 109:main.c        **** 
 110:main.c        **** 
 111:main.c        **** 
 112:main.c        **** int32_t linearPotValue32Bit[4];
 113:main.c        **** uint8_t i = 0;
 114:main.c        **** uint8_t counter = 0;
 115:main.c        **** int32_t temper;
 116:main.c        **** int previousButtons[11];
 117:main.c        **** int octave = 0;
 118:main.c        **** void scanLinearResistor();
 119:main.c        **** int stringPlucks[4];
 120:main.c        **** int stringPlucksPrev[4];
 121:main.c        **** 
 122:main.c        **** #define KNOB_FIR_SIZE 8
 123:main.c        **** #define KNOB_FIR_SIZE_MASK 7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 7


 124:main.c        **** #define KNOB_FIR_SIZE_BITSHIFT 3
 125:main.c        **** uint32_t knobsFIR[5][KNOB_FIR_SIZE];
 126:main.c        **** 
 127:main.c        **** 
 128:main.c        **** #define LINEAR_FIR_SIZE 2
 129:main.c        **** #define LINEAR_FIR_SIZE_MASK 1
 130:main.c        **** #define LINEAR_FIR_SIZE_BITSHIFT 1
 131:main.c        **** 
 132:main.c        **** float hysteresisStates[4];
 133:main.c        **** float hysteresisLowThresh = 0.4f;
 134:main.c        **** float hysteresisHighThresh = 0.6f;
 135:main.c        **** 
 136:main.c        **** void DmaTxConfiguration(void);
 137:main.c        **** void DmaRxConfiguration(void);
 138:main.c        **** 
 139:main.c        **** /* DMA Configuration for DMA_TX */
 140:main.c        **** #define DMA_TX_BYTES_PER_BURST      (1u)
 141:main.c        **** #define DMA_TX_REQUEST_PER_BURST    (1u)
 142:main.c        **** #define DMA_TX_SRC_BASE             (CYDEV_SRAM_BASE)
 143:main.c        **** #define DMA_TX_DST_BASE             (CYDEV_PERIPH_BASE)
 144:main.c        **** 
 145:main.c        **** /* DMA Configuration for DMA_RX */
 146:main.c        **** #define DMA_RX_BYTES_PER_BURST      (1u)
 147:main.c        **** #define DMA_RX_REQUEST_PER_BURST    (1u)
 148:main.c        **** #define DMA_RX_SRC_BASE             (CYDEV_PERIPH_BASE)
 149:main.c        **** #define DMA_RX_DST_BASE             (CYDEV_SRAM_BASE)
 150:main.c        **** 
 151:main.c        **** #define BUFFER_SIZE                 (16u)
 152:main.c        **** #define BUFFER_2_SIZE               (16u)
 153:main.c        **** #define STORE_TD_CFG_ONCMPLT        (1u)
 154:main.c        **** 
 155:main.c        **** /* Variable declarations for DMA_TX*/
 156:main.c        **** volatile uint8 txChannel;
 157:main.c        **** volatile uint8 txTD;
 158:main.c        **** volatile uint8 txBuffer[BUFFER_SIZE];
 159:main.c        **** 
 160:main.c        **** volatile uint8 rxChannel;
 161:main.c        **** volatile uint8 rxTD;
 162:main.c        **** volatile uint8 rxBuffer[BUFFER_SIZE];
 163:main.c        **** 
 164:main.c        **** /* Variable declarations for DMA_2*/
 165:main.c        **** volatile uint8 tx2Channel;
 166:main.c        **** volatile uint8 tx2TD;
 167:main.c        **** volatile uint8 tx2Buffer[BUFFER_2_SIZE];
 168:main.c        **** 
 169:main.c        **** volatile uint8 rx2Channel;
 170:main.c        **** volatile uint8 rx2TD;
 171:main.c        **** volatile uint8 rx2Buffer[BUFFER_2_SIZE];
 172:main.c        **** 
 173:main.c        **** volatile uint8 tx2BufferTemp[BUFFER_2_SIZE];
 174:main.c        **** 
 175:main.c        ****     static uint8 CYCODE eepromArray[]={ 0, 0 };
 176:main.c        ****                                             
 177:main.c        ****     uint8 array[] ={ 0, 0 };
 178:main.c        ****                                 
 179:main.c        ****     /*Return status for EEPROM and UART*/ 
 180:main.c        **** cy_en_em_eeprom_status_t eepromReturnValue;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 8


 181:main.c        **** 
 182:main.c        **** 
 183:main.c        **** /* EEPROM storage in work flash, this is defined in Em_EEPROM.c*/
 184:main.c        **** #if defined (__ICCARM__)
 185:main.c        **** #pragma data_alignment = CY_FLASH_SIZEOF_ROW
 186:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE] = {0u};
 187:main.c        **** #else
 188:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE]
 189:main.c        **** __ALIGNED(CY_FLASH_SIZEOF_ROW) = {0u};
 190:main.c        **** #endif /* defined (__ICCARM__) */
 191:main.c        **** 
 192:main.c        ****     uint8 eeprom_cnt;
 193:main.c        ****     cystatus status;
 194:main.c        ****     volatile const uint8 * ptr;
 195:main.c        **** volatile int barCount = 0;
 196:main.c        **** 
 197:main.c        **** void handleNotes(int note, int velocity, int string);
 198:main.c        **** 
 199:main.c        **** int stringStates[4][2] = {{0,0},{0,0},{0,0},{0,0}};
 200:main.c        **** 
 201:main.c        **** CY_ISR(button_press_ISR) {     /* No need to clear any interrupt source; interrupt component should
 212              		.loc 1 201 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 1, uses_anonymous_args = 0
 216              		@ link register save eliminated.
 217 0000 80B4     		push	{r7}
 218              		.cfi_def_cfa_offset 4
 219              		.cfi_offset 7, -4
 220 0002 00AF     		add	r7, sp, #0
 221              		.cfi_def_cfa_register 7
 202:main.c        ****  //FiltReg_Read(); 
 203:main.c        ****     //
 204:main.c        **** }
 222              		.loc 1 204 0
 223 0004 00BF     		nop
 224 0006 BD46     		mov	sp, r7
 225              		.cfi_def_cfa_register 13
 226              		@ sp needed
 227 0008 80BC     		pop	{r7}
 228              		.cfi_restore 7
 229              		.cfi_def_cfa_offset 0
 230 000a 7047     		bx	lr
 231              		.cfi_endproc
 232              	.LFE64:
 233              		.size	button_press_ISR, .-button_press_ISR
 234              		.global	__aeabi_fcmpgt
 235              		.global	__aeabi_fcmplt
 236              		.section	.text.LEAF_clip,"ax",%progbits
 237              		.align	2
 238              		.global	LEAF_clip
 239              		.thumb
 240              		.thumb_func
 241              		.type	LEAF_clip, %function
 242              	LEAF_clip:
 243              	.LFB65:
 205:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 9


 206:main.c        **** 
 207:main.c        **** #define INV_440 0.0022727272727273f
 208:main.c        **** 
 209:main.c        **** float   LEAF_clip(float min, float val, float max)
 210:main.c        **** {
 244              		.loc 1 210 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 24
 247              		@ frame_needed = 1, uses_anonymous_args = 0
 248 0000 80B5     		push	{r7, lr}
 249              		.cfi_def_cfa_offset 8
 250              		.cfi_offset 7, -8
 251              		.cfi_offset 14, -4
 252 0002 86B0     		sub	sp, sp, #24
 253              		.cfi_def_cfa_offset 32
 254 0004 00AF     		add	r7, sp, #0
 255              		.cfi_def_cfa_register 7
 256 0006 F860     		str	r0, [r7, #12]	@ float
 257 0008 B960     		str	r1, [r7, #8]	@ float
 258 000a 7A60     		str	r2, [r7, #4]	@ float
 211:main.c        ****     float tempmin = min;
 259              		.loc 1 211 0
 260 000c FB68     		ldr	r3, [r7, #12]	@ float
 261 000e 7B61     		str	r3, [r7, #20]	@ float
 212:main.c        ****     float tempmax = max;
 262              		.loc 1 212 0
 263 0010 7B68     		ldr	r3, [r7, #4]	@ float
 264 0012 3B61     		str	r3, [r7, #16]	@ float
 213:main.c        ****     if (min > max)
 265              		.loc 1 213 0
 266 0014 7968     		ldr	r1, [r7, #4]	@ float
 267 0016 F868     		ldr	r0, [r7, #12]	@ float
 268 0018 FFF7FEFF 		bl	__aeabi_fcmpgt
 269 001c 0346     		mov	r3, r0
 270 001e 002B     		cmp	r3, #0
 271 0020 03D0     		beq	.L3
 214:main.c        ****     {
 215:main.c        ****         tempmin = max;
 272              		.loc 1 215 0
 273 0022 7B68     		ldr	r3, [r7, #4]	@ float
 274 0024 7B61     		str	r3, [r7, #20]	@ float
 216:main.c        ****         tempmax = min;
 275              		.loc 1 216 0
 276 0026 FB68     		ldr	r3, [r7, #12]	@ float
 277 0028 3B61     		str	r3, [r7, #16]	@ float
 278              	.L3:
 217:main.c        ****     }
 218:main.c        ****     if (val < tempmin)
 279              		.loc 1 218 0
 280 002a 7969     		ldr	r1, [r7, #20]	@ float
 281 002c B868     		ldr	r0, [r7, #8]	@ float
 282 002e FFF7FEFF 		bl	__aeabi_fcmplt
 283 0032 0346     		mov	r3, r0
 284 0034 002B     		cmp	r3, #0
 285 0036 01D0     		beq	.L13
 219:main.c        ****     {
 220:main.c        ****         return tempmin;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 10


 286              		.loc 1 220 0
 287 0038 7B69     		ldr	r3, [r7, #20]	@ float
 288 003a 09E0     		b	.L7
 289              	.L13:
 221:main.c        ****     }
 222:main.c        ****     else if (val > tempmax)
 290              		.loc 1 222 0
 291 003c 3969     		ldr	r1, [r7, #16]	@ float
 292 003e B868     		ldr	r0, [r7, #8]	@ float
 293 0040 FFF7FEFF 		bl	__aeabi_fcmpgt
 294 0044 0346     		mov	r3, r0
 295 0046 002B     		cmp	r3, #0
 296 0048 01D0     		beq	.L14
 223:main.c        ****     {
 224:main.c        ****         return tempmax;
 297              		.loc 1 224 0
 298 004a 3B69     		ldr	r3, [r7, #16]	@ float
 299 004c 00E0     		b	.L7
 300              	.L14:
 225:main.c        ****     }
 226:main.c        ****     else
 227:main.c        ****     {
 228:main.c        ****         return val;
 301              		.loc 1 228 0
 302 004e BB68     		ldr	r3, [r7, #8]	@ float
 303              	.L7:
 229:main.c        ****     }
 230:main.c        **** }
 304              		.loc 1 230 0
 305 0050 1846     		mov	r0, r3
 306 0052 1837     		adds	r7, r7, #24
 307              		.cfi_def_cfa_offset 8
 308 0054 BD46     		mov	sp, r7
 309              		.cfi_def_cfa_register 13
 310              		@ sp needed
 311 0056 80BD     		pop	{r7, pc}
 312              		.cfi_endproc
 313              	.LFE65:
 314              		.size	LEAF_clip, .-LEAF_clip
 315              		.global	__aeabi_fcmple
 316              		.global	__aeabi_fmul
 317              		.section	.text.mtof,"ax",%progbits
 318              		.align	2
 319              		.global	mtof
 320              		.thumb
 321              		.thumb_func
 322              		.type	mtof, %function
 323              	mtof:
 324              	.LFB66:
 231:main.c        **** float mtof(float f)
 232:main.c        **** {
 325              		.loc 1 232 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 8
 328              		@ frame_needed = 1, uses_anonymous_args = 0
 329 0000 80B5     		push	{r7, lr}
 330              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 11


 331              		.cfi_offset 7, -8
 332              		.cfi_offset 14, -4
 333 0002 82B0     		sub	sp, sp, #8
 334              		.cfi_def_cfa_offset 16
 335 0004 00AF     		add	r7, sp, #0
 336              		.cfi_def_cfa_register 7
 337 0006 7860     		str	r0, [r7, #4]	@ float
 233:main.c        ****     if (f <= -1500.0f) return(0);
 338              		.loc 1 233 0
 339 0008 1349     		ldr	r1, .L25
 340 000a 7868     		ldr	r0, [r7, #4]	@ float
 341 000c FFF7FEFF 		bl	__aeabi_fcmple
 342 0010 0346     		mov	r3, r0
 343 0012 002B     		cmp	r3, #0
 344 0014 02D0     		beq	.L23
 345              		.loc 1 233 0 is_stmt 0 discriminator 1
 346 0016 4FF00003 		mov	r3, #0
 347 001a 19E0     		b	.L18
 348              	.L23:
 234:main.c        ****     else if (f > 1499.0f) return(mtof(1499.0f));
 349              		.loc 1 234 0 is_stmt 1
 350 001c 0F49     		ldr	r1, .L25+4
 351 001e 7868     		ldr	r0, [r7, #4]	@ float
 352 0020 FFF7FEFF 		bl	__aeabi_fcmpgt
 353 0024 0346     		mov	r3, r0
 354 0026 002B     		cmp	r3, #0
 355 0028 04D0     		beq	.L24
 356              		.loc 1 234 0 is_stmt 0 discriminator 1
 357 002a 0C48     		ldr	r0, .L25+4
 358 002c FFF7FEFF 		bl	mtof
 359 0030 0346     		mov	r3, r0
 360 0032 0DE0     		b	.L18
 361              	.L24:
 235:main.c        ****     else return (8.17579891564f * expf(0.0577622650f * f));
 362              		.loc 1 235 0 is_stmt 1
 363 0034 0A49     		ldr	r1, .L25+8
 364 0036 7868     		ldr	r0, [r7, #4]	@ float
 365 0038 FFF7FEFF 		bl	__aeabi_fmul
 366 003c 0346     		mov	r3, r0
 367 003e 1846     		mov	r0, r3
 368 0040 FFF7FEFF 		bl	expf
 369 0044 0346     		mov	r3, r0
 370 0046 0749     		ldr	r1, .L25+12
 371 0048 1846     		mov	r0, r3
 372 004a FFF7FEFF 		bl	__aeabi_fmul
 373 004e 0346     		mov	r3, r0
 374              	.L18:
 236:main.c        **** }
 375              		.loc 1 236 0
 376 0050 1846     		mov	r0, r3
 377 0052 0837     		adds	r7, r7, #8
 378              		.cfi_def_cfa_offset 8
 379 0054 BD46     		mov	sp, r7
 380              		.cfi_def_cfa_register 13
 381              		@ sp needed
 382 0056 80BD     		pop	{r7, pc}
 383              	.L26:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 12


 384              		.align	2
 385              	.L25:
 386 0058 0080BBC4 		.word	-994344960
 387 005c 0060BB44 		.word	1153130496
 388 0060 20986C3D 		.word	1030527008
 389 0064 13D00241 		.word	1090703379
 390              		.cfi_endproc
 391              	.LFE66:
 392              		.size	mtof, .-mtof
 393              		.section	.text.ftom,"ax",%progbits
 394              		.align	2
 395              		.global	ftom
 396              		.thumb
 397              		.thumb_func
 398              		.type	ftom, %function
 399              	ftom:
 400              	.LFB67:
 237:main.c        **** 
 238:main.c        **** float ftom(float f)
 239:main.c        **** {
 401              		.loc 1 239 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 8
 404              		@ frame_needed = 1, uses_anonymous_args = 0
 405 0000 80B5     		push	{r7, lr}
 406              		.cfi_def_cfa_offset 8
 407              		.cfi_offset 7, -8
 408              		.cfi_offset 14, -4
 409 0002 82B0     		sub	sp, sp, #8
 410              		.cfi_def_cfa_offset 16
 411 0004 00AF     		add	r7, sp, #0
 412              		.cfi_def_cfa_register 7
 413 0006 7860     		str	r0, [r7, #4]	@ float
 240:main.c        ****     return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 414              		.loc 1 240 0
 415 0008 4FF00001 		mov	r1, #0
 416 000c 7868     		ldr	r0, [r7, #4]	@ float
 417 000e FFF7FEFF 		bl	__aeabi_fcmpgt
 418 0012 0346     		mov	r3, r0
 419 0014 002B     		cmp	r3, #0
 420 0016 0ED0     		beq	.L33
 421              		.loc 1 240 0 is_stmt 0 discriminator 1
 422 0018 0949     		ldr	r1, .L34
 423 001a 7868     		ldr	r0, [r7, #4]	@ float
 424 001c FFF7FEFF 		bl	__aeabi_fmul
 425 0020 0346     		mov	r3, r0
 426 0022 1846     		mov	r0, r3
 427 0024 FFF7FEFF 		bl	logf
 428 0028 0346     		mov	r3, r0
 429 002a 0649     		ldr	r1, .L34+4
 430 002c 1846     		mov	r0, r3
 431 002e FFF7FEFF 		bl	__aeabi_fmul
 432 0032 0346     		mov	r3, r0
 433 0034 00E0     		b	.L31
 434              	.L33:
 435              		.loc 1 240 0 discriminator 2
 436 0036 044B     		ldr	r3, .L34+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 13


 437              	.L31:
 241:main.c        **** }
 438              		.loc 1 241 0 is_stmt 1 discriminator 5
 439 0038 1846     		mov	r0, r3
 440 003a 0837     		adds	r7, r7, #8
 441              		.cfi_def_cfa_offset 8
 442 003c BD46     		mov	sp, r7
 443              		.cfi_def_cfa_register 13
 444              		@ sp needed
 445 003e 80BD     		pop	{r7, pc}
 446              	.L35:
 447              		.align	2
 448              	.L34:
 449 0040 D27EFA3D 		.word	1039826642
 450 0044 AC7F8A41 		.word	1099595692
 451 0048 0080BBC4 		.word	-994344960
 452              		.cfi_endproc
 453              	.LFE67:
 454              		.size	ftom, .-ftom
 455              		.global	__aeabi_fsub
 456              		.global	__aeabi_fadd
 457              		.section	.text.LEAF_interpolation_linear,"ax",%progbits
 458              		.align	2
 459              		.global	LEAF_interpolation_linear
 460              		.thumb
 461              		.thumb_func
 462              		.type	LEAF_interpolation_linear, %function
 463              	LEAF_interpolation_linear:
 464              	.LFB68:
 242:main.c        **** 
 243:main.c        **** // alpha, [0.0, 1.0]
 244:main.c        **** float LEAF_interpolation_linear (float A, float B, float alpha)
 245:main.c        **** {
 465              		.loc 1 245 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 24
 468              		@ frame_needed = 1, uses_anonymous_args = 0
 469 0000 80B5     		push	{r7, lr}
 470              		.cfi_def_cfa_offset 8
 471              		.cfi_offset 7, -8
 472              		.cfi_offset 14, -4
 473 0002 86B0     		sub	sp, sp, #24
 474              		.cfi_def_cfa_offset 32
 475 0004 00AF     		add	r7, sp, #0
 476              		.cfi_def_cfa_register 7
 477 0006 F860     		str	r0, [r7, #12]	@ float
 478 0008 B960     		str	r1, [r7, #8]	@ float
 479 000a 7A60     		str	r2, [r7, #4]	@ float
 246:main.c        ****     float omAlpha = 1.0f - alpha;
 480              		.loc 1 246 0
 481 000c 7968     		ldr	r1, [r7, #4]	@ float
 482 000e 4FF07E50 		mov	r0, #1065353216
 483 0012 FFF7FEFF 		bl	__aeabi_fsub
 484 0016 0346     		mov	r3, r0
 485 0018 7B61     		str	r3, [r7, #20]	@ float
 247:main.c        ****     
 248:main.c        ****     // First 1/2 of interpolation
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 14


 249:main.c        ****     float out = A * omAlpha;
 486              		.loc 1 249 0
 487 001a 7969     		ldr	r1, [r7, #20]	@ float
 488 001c F868     		ldr	r0, [r7, #12]	@ float
 489 001e FFF7FEFF 		bl	__aeabi_fmul
 490 0022 0346     		mov	r3, r0
 491 0024 3B61     		str	r3, [r7, #16]	@ float
 250:main.c        ****     
 251:main.c        ****     out += B * alpha;
 492              		.loc 1 251 0
 493 0026 7968     		ldr	r1, [r7, #4]	@ float
 494 0028 B868     		ldr	r0, [r7, #8]	@ float
 495 002a FFF7FEFF 		bl	__aeabi_fmul
 496 002e 0346     		mov	r3, r0
 497 0030 1946     		mov	r1, r3
 498 0032 3869     		ldr	r0, [r7, #16]	@ float
 499 0034 FFF7FEFF 		bl	__aeabi_fadd
 500 0038 0346     		mov	r3, r0
 501 003a 3B61     		str	r3, [r7, #16]	@ float
 252:main.c        ****     
 253:main.c        ****     return out;
 502              		.loc 1 253 0
 503 003c 3B69     		ldr	r3, [r7, #16]	@ float
 254:main.c        **** }
 504              		.loc 1 254 0
 505 003e 1846     		mov	r0, r3
 506 0040 1837     		adds	r7, r7, #24
 507              		.cfi_def_cfa_offset 8
 508 0042 BD46     		mov	sp, r7
 509              		.cfi_def_cfa_register 13
 510              		@ sp needed
 511 0044 80BD     		pop	{r7, pc}
 512              		.cfi_endproc
 513              	.LFE68:
 514              		.size	LEAF_interpolation_linear, .-LEAF_interpolation_linear
 515              		.global	whichLinearSensor
 516 0046 00BF     		.bss
 517              		.align	2
 518              		.type	whichLinearSensor, %object
 519              		.size	whichLinearSensor, 4
 520              	whichLinearSensor:
 521 0050 00000000 		.space	4
 522              		.global	__aeabi_fdiv
 523              		.section	.text.map,"ax",%progbits
 524              		.align	2
 525              		.global	map
 526              		.thumb
 527              		.thumb_func
 528              		.type	map, %function
 529              	map:
 530              	.LFB69:
 255:main.c        **** void USB_service(void);
 256:main.c        **** 
 257:main.c        **** volatile int whichLinearSensor = 0;
 258:main.c        **** 
 259:main.c        **** float map(float value, float istart, float istop, float ostart, float ostop)
 260:main.c        **** {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 15


 531              		.loc 1 260 0
 532              		.cfi_startproc
 533              		@ args = 4, pretend = 0, frame = 16
 534              		@ frame_needed = 1, uses_anonymous_args = 0
 535 0000 B0B5     		push	{r4, r5, r7, lr}
 536              		.cfi_def_cfa_offset 16
 537              		.cfi_offset 4, -16
 538              		.cfi_offset 5, -12
 539              		.cfi_offset 7, -8
 540              		.cfi_offset 14, -4
 541 0002 84B0     		sub	sp, sp, #16
 542              		.cfi_def_cfa_offset 32
 543 0004 00AF     		add	r7, sp, #0
 544              		.cfi_def_cfa_register 7
 545 0006 F860     		str	r0, [r7, #12]	@ float
 546 0008 B960     		str	r1, [r7, #8]	@ float
 547 000a 7A60     		str	r2, [r7, #4]	@ float
 548 000c 3B60     		str	r3, [r7]	@ float
 261:main.c        ****     return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 549              		.loc 1 261 0
 550 000e 3968     		ldr	r1, [r7]	@ float
 551 0010 386A     		ldr	r0, [r7, #32]	@ float
 552 0012 FFF7FEFF 		bl	__aeabi_fsub
 553 0016 0346     		mov	r3, r0
 554 0018 1C46     		mov	r4, r3
 555 001a B968     		ldr	r1, [r7, #8]	@ float
 556 001c F868     		ldr	r0, [r7, #12]	@ float
 557 001e FFF7FEFF 		bl	__aeabi_fsub
 558 0022 0346     		mov	r3, r0
 559 0024 1D46     		mov	r5, r3
 560 0026 B968     		ldr	r1, [r7, #8]	@ float
 561 0028 7868     		ldr	r0, [r7, #4]	@ float
 562 002a FFF7FEFF 		bl	__aeabi_fsub
 563 002e 0346     		mov	r3, r0
 564 0030 1946     		mov	r1, r3
 565 0032 2846     		mov	r0, r5
 566 0034 FFF7FEFF 		bl	__aeabi_fdiv
 567 0038 0346     		mov	r3, r0
 568 003a 1946     		mov	r1, r3
 569 003c 2046     		mov	r0, r4
 570 003e FFF7FEFF 		bl	__aeabi_fmul
 571 0042 0346     		mov	r3, r0
 572 0044 3968     		ldr	r1, [r7]	@ float
 573 0046 1846     		mov	r0, r3
 574 0048 FFF7FEFF 		bl	__aeabi_fadd
 575 004c 0346     		mov	r3, r0
 262:main.c        **** }
 576              		.loc 1 262 0
 577 004e 1846     		mov	r0, r3
 578 0050 1037     		adds	r7, r7, #16
 579              		.cfi_def_cfa_offset 16
 580 0052 BD46     		mov	sp, r7
 581              		.cfi_def_cfa_register 13
 582              		@ sp needed
 583 0054 B0BD     		pop	{r4, r5, r7, pc}
 584              		.cfi_endproc
 585              	.LFE69:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 16


 586              		.size	map, .-map
 587              		.global	testVar
 588 0056 00BF     		.bss
 589              		.align	2
 590              		.type	testVar, %object
 591              		.size	testVar, 4
 592              	testVar:
 593 0054 00000000 		.space	4
 594              		.global	lastNotes
 595              		.align	2
 596              		.type	lastNotes, %object
 597              		.size	lastNotes, 16
 598              	lastNotes:
 599 0058 00000000 		.space	16
 599      00000000 
 599      00000000 
 599      00000000 
 600              		.global	frettedState
 601              		.data
 602              		.align	2
 603              		.type	frettedState, %object
 604              		.size	frettedState, 4
 605              	frettedState:
 606 0038 01000000 		.word	1
 607              		.global	polyMode
 608              		.bss
 609              		.align	2
 610              		.type	polyMode, %object
 611              		.size	polyMode, 4
 612              	polyMode:
 613 0068 00000000 		.space	4
 614              		.comm	pitchBendsPerString,16,4
 615              		.global	openStringCount
 616              		.align	2
 617              		.type	openStringCount, %object
 618              		.size	openStringCount, 16
 619              	openStringCount:
 620 006c 00000000 		.space	16
 620      00000000 
 620      00000000 
 620      00000000 
 621              		.global	loudestString
 622              		.align	2
 623              		.type	loudestString, %object
 624              		.size	loudestString, 4
 625              	loudestString:
 626 007c 00000000 		.space	4
 627              		.global	timeSinceLastAttack
 628              		.align	3
 629              		.type	timeSinceLastAttack, %object
 630              		.size	timeSinceLastAttack, 8
 631              	timeSinceLastAttack:
 632 0080 00000000 		.space	8
 632      00000000 
 633              		.global	previousHysteresisStates
 634              		.align	2
 635              		.type	previousHysteresisStates, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 17


 636              		.size	previousHysteresisStates, 16
 637              	previousHysteresisStates:
 638 0088 00000000 		.space	16
 638      00000000 
 638      00000000 
 638      00000000 
 639              		.global	openStringFreqs
 640              		.data
 641              		.align	2
 642              		.type	openStringFreqs, %object
 643              		.size	openStringFreqs, 16
 644              	openStringFreqs:
 645 003c DFCF2442 		.word	1109708767
 646 0040 00005C42 		.word	1113325568
 647 0044 FED49242 		.word	1116919038
 648 0048 7DFFC342 		.word	1120141181
 649              		.global	openStringMIDI
 650              		.align	2
 651              		.type	openStringMIDI, %object
 652              		.size	openStringMIDI, 16
 653              	openStringMIDI:
 654 004c 0000E041 		.word	1105199104
 655 0050 00000442 		.word	1107558400
 656 0054 00001842 		.word	1108869120
 657 0058 00002C42 		.word	1110179840
 658              		.global	invStringMappedPositions
 659              		.bss
 660              		.align	2
 661              		.type	invStringMappedPositions, %object
 662              		.size	invStringMappedPositions, 16
 663              	invStringMappedPositions:
 664 0098 00000000 		.space	16
 664      00000000 
 664      00000000 
 664      00000000 
 665              		.global	stringMIDI
 666              		.align	2
 667              		.type	stringMIDI, %object
 668              		.size	stringMIDI, 16
 669              	stringMIDI:
 670 00a8 00000000 		.space	16
 670      00000000 
 670      00000000 
 670      00000000 
 671              		.global	stringMIDIPrev
 672              		.align	2
 673              		.type	stringMIDIPrev, %object
 674              		.size	stringMIDIPrev, 16
 675              	stringMIDIPrev:
 676 00b8 00000000 		.space	16
 676      00000000 
 676      00000000 
 676      00000000 
 677              		.global	linearHysteresis
 678              		.data
 679              		.align	2
 680              		.type	linearHysteresis, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 18


 681              		.size	linearHysteresis, 4
 682              	linearHysteresis:
 683 005c 9A99193F 		.word	1058642330
 684              		.comm	hp_y,16,4
 685              		.comm	hp_x,16,4
 686              		.comm	hp_R,4,4
 687              		.comm	vibratoCrossfade,16,4
 688              		.comm	crossFadeStartCount,16,4
 689              		.global	previousPitchBendsSent
 690              		.bss
 691              		.align	2
 692              		.type	previousPitchBendsSent, %object
 693              		.size	previousPitchBendsSent, 4
 694              	previousPitchBendsSent:
 695 00c8 00000000 		.space	4
 696              		.comm	knobs,20,4
 697              		.comm	buttons,4,4
 698              		.global	firPointer
 699              		.align	2
 700              		.type	firPointer, %object
 701              		.size	firPointer, 4
 702              	firPointer:
 703 00cc 00000000 		.space	4
 704              		.global	knobs7bit
 705              		.align	2
 706              		.type	knobs7bit, %object
 707              		.size	knobs7bit, 5
 708              	knobs7bit:
 709 00d0 00000000 		.space	5
 709      00
 710              		.global	knobs7bitPrev
 711 00d5 000000   		.align	2
 712              		.type	knobs7bitPrev, %object
 713              		.size	knobs7bitPrev, 10
 714              	knobs7bitPrev:
 715 00d8 00000000 		.space	10
 715      00000000 
 715      0000
 716              		.global	knobs7bitPrevLS
 717 00e2 0000     		.align	2
 718              		.type	knobs7bitPrevLS, %object
 719              		.size	knobs7bitPrevLS, 10
 720              	knobs7bitPrevLS:
 721 00e4 00000000 		.space	10
 721      00000000 
 721      0000
 722              		.global	knobs7bitHysteresis
 723              		.data
 724              		.align	1
 725              		.type	knobs7bitHysteresis, %object
 726              		.size	knobs7bitHysteresis, 2
 727              	knobs7bitHysteresis:
 728 0060 1900     		.short	25
 729              		.global	linFirPointer
 730              		.bss
 731 00ee 0000     		.align	2
 732              		.type	linFirPointer, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 19


 733              		.size	linFirPointer, 4
 734              	linFirPointer:
 735 00f0 00000000 		.space	4
 736              		.comm	linearFIR,32,4
 737              		.global	linearSmoothed
 738              		.align	2
 739              		.type	linearSmoothed, %object
 740              		.size	linearSmoothed, 16
 741              	linearSmoothed:
 742 00f4 00000000 		.space	16
 742      00000000 
 742      00000000 
 742      00000000 
 743              		.global	linearSmoothedPrev
 744              		.align	2
 745              		.type	linearSmoothedPrev, %object
 746              		.size	linearSmoothedPrev, 16
 747              	linearSmoothedPrev:
 748 0104 00000000 		.space	16
 748      00000000 
 748      00000000 
 748      00000000 
 749              		.global	LHMuteCounter
 750              		.align	2
 751              		.type	LHMuteCounter, %object
 752              		.size	LHMuteCounter, 16
 753              	LHMuteCounter:
 754 0114 00000000 		.space	16
 754      00000000 
 754      00000000 
 754      00000000 
 755              		.global	LHMute
 756              		.align	2
 757              		.type	LHMute, %object
 758              		.size	LHMute, 4
 759              	LHMute:
 760 0124 00000000 		.space	4
 761              		.global	pitchFreeze
 762              		.align	2
 763              		.type	pitchFreeze, %object
 764              		.size	pitchFreeze, 4
 765              	pitchFreeze:
 766 0128 00000000 		.space	4
 767              		.comm	pitchBendHistory,512,4
 768              		.global	pitchBendHistoryPointer
 769              		.align	2
 770              		.type	pitchBendHistoryPointer, %object
 771              		.size	pitchBendHistoryPointer, 8
 772              	pitchBendHistoryPointer:
 773 012c 00000000 		.space	8
 773      00000000 
 774              		.comm	skippedNotes,640,4
 775              		.global	skipPointer
 776              		.align	2
 777              		.type	skipPointer, %object
 778              		.size	skipPointer, 4
 779              	skipPointer:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 20


 780 0134 00000000 		.space	4
 781              		.global	bufCount
 782              		.type	bufCount, %object
 783              		.size	bufCount, 1
 784              	bufCount:
 785 0138 00       		.space	1
 786              		.section	.text.SleepIsr_function,"ax",%progbits
 787              		.align	2
 788              		.global	SleepIsr_function
 789              		.thumb
 790              		.thumb_func
 791              		.type	SleepIsr_function, %function
 792              	SleepIsr_function:
 793              	.LFB70:
 263:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode);
 264:main.c        **** //Main
 265:main.c        **** 
 266:main.c        **** volatile int testVar = 0;
 267:main.c        **** int lastNotes[4] = {0,0,0,0};
 268:main.c        **** int frettedState = 1;
 269:main.c        **** int polyMode = 0;
 270:main.c        **** 
 271:main.c        **** float pitchBendsPerString[4];
 272:main.c        **** int openStringCount[4] = {0,0,0,0};
 273:main.c        **** int loudestString = 0;
 274:main.c        **** int64_t timeSinceLastAttack = 0;
 275:main.c        **** float previousHysteresisStates[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 276:main.c        **** float openStringFreqs[4] = {41.203f, 55.0f, 73.416f, 97.999f};
 277:main.c        **** float openStringMIDI[4] = {28.0f, 33.0f, 38.0f, 43.0f};
 278:main.c        **** float invStringMappedPositions[4] = {0,0,0,0};
 279:main.c        **** float stringMIDI[4] = {0,0,0,0};
 280:main.c        **** float stringMIDIPrev[4] = {0,0,0,0};
 281:main.c        **** float linearHysteresis = 0.6f;
 282:main.c        **** float hp_y[4];
 283:main.c        **** float hp_x[4]; 
 284:main.c        **** float hp_R;
 285:main.c        **** 
 286:main.c        **** float vibratoCrossfade[4];
 287:main.c        **** int crossFadeStartCount[4];
 288:main.c        **** 
 289:main.c        **** int previousPitchBendsSent = 0;
 290:main.c        **** uint32_t knobs[5];
 291:main.c        **** int buttons;
 292:main.c        **** 
 293:main.c        **** int firPointer = 0;
 294:main.c        **** uint8_t knobs7bit[5] = {0,0,0,0,0};
 295:main.c        **** uint16_t knobs7bitPrev[5] = {0,0,0,0,0};
 296:main.c        **** uint16_t knobs7bitPrevLS[5] = {0,0,0,0,0};
 297:main.c        **** uint16_t knobs7bitHysteresis = 25;
 298:main.c        **** 
 299:main.c        **** uint8_t linFirPointer[4] = {0,0,0,0};
 300:main.c        **** uint32_t linearFIR[4][LINEAR_FIR_SIZE];
 301:main.c        **** uint32_t linearSmoothed[4] = {0,0,0,0};
 302:main.c        **** uint32_t linearSmoothedPrev[4] = {0,0,0,0};         
 303:main.c        **** uint32_t LHMuteCounter[4] = {0,0,0,0};
 304:main.c        **** uint8_t LHMute[4] = {0,0,0,0};
 305:main.c        **** uint8_t pitchFreeze[4] = {0,0,0,0};
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 21


 306:main.c        **** float pitchBendHistory[4][32];
 307:main.c        **** uint16_t pitchBendHistoryPointer[4] = {0,0,0,0};
 308:main.c        **** 
 309:main.c        **** int skippedNotes[32][5];
 310:main.c        **** int skipPointer = 0;
 311:main.c        **** 
 312:main.c        **** uint8_t bufCount = 0;
 313:main.c        **** 
 314:main.c        **** CY_ISR(SleepIsr_function)
 315:main.c        **** {
 794              		.loc 1 315 0
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 0
 797              		@ frame_needed = 1, uses_anonymous_args = 0
 798 0000 80B5     		push	{r7, lr}
 799              		.cfi_def_cfa_offset 8
 800              		.cfi_offset 7, -8
 801              		.cfi_offset 14, -4
 802 0002 00AF     		add	r7, sp, #0
 803              		.cfi_def_cfa_register 7
 316:main.c        ****     if (USB_active)
 804              		.loc 1 316 0
 805 0004 0C4B     		ldr	r3, .L43
 806 0006 1B78     		ldrb	r3, [r3]
 807 0008 DBB2     		uxtb	r3, r3
 808 000a 002B     		cmp	r3, #0
 809 000c 0FD0     		beq	.L41
 317:main.c        ****     {
 318:main.c        ****         //check USB activity
 319:main.c        ****         if( USB_CheckActivity() != 0u ) 
 810              		.loc 1 319 0
 811 000e FFF7FEFF 		bl	USB_CheckActivity
 812 0012 0346     		mov	r3, r0
 813 0014 002B     		cmp	r3, #0
 814 0016 03D0     		beq	.L42
 320:main.c        ****         {
 321:main.c        ****             usbActivityCounter = 0u;
 815              		.loc 1 321 0
 816 0018 084B     		ldr	r3, .L43+4
 817 001a 0022     		movs	r2, #0
 818 001c 1A70     		strb	r2, [r3]
 819 001e 06E0     		b	.L41
 820              	.L42:
 322:main.c        ****         } 
 323:main.c        ****         else 
 324:main.c        ****         {
 325:main.c        ****             usbActivityCounter++;
 821              		.loc 1 325 0
 822 0020 064B     		ldr	r3, .L43+4
 823 0022 1B78     		ldrb	r3, [r3]
 824 0024 DBB2     		uxtb	r3, r3
 825 0026 0133     		adds	r3, r3, #1
 826 0028 DAB2     		uxtb	r2, r3
 827 002a 044B     		ldr	r3, .L43+4
 828 002c 1A70     		strb	r2, [r3]
 829              	.L41:
 326:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 22


 327:main.c        **** 
 328:main.c        ****     }
 329:main.c        ****     //Clear pending interrupt
 330:main.c        ****     SleepTimer_GetStatus();
 830              		.loc 1 330 0
 831 002e FFF7FEFF 		bl	SleepTimer_GetStatus
 331:main.c        **** }
 832              		.loc 1 331 0
 833 0032 00BF     		nop
 834 0034 80BD     		pop	{r7, pc}
 835              	.L44:
 836 0036 00BF     		.align	2
 837              	.L43:
 838 0038 00000000 		.word	USB_active
 839 003c 00000000 		.word	usbActivityCounter
 840              		.cfi_endproc
 841              	.LFE70:
 842              		.size	SleepIsr_function, .-SleepIsr_function
 843              		.section	.text.Vbus_function,"ax",%progbits
 844              		.align	2
 845              		.global	Vbus_function
 846              		.thumb
 847              		.thumb_func
 848              		.type	Vbus_function, %function
 849              	Vbus_function:
 850              	.LFB71:
 332:main.c        **** CY_ISR(Vbus_function)
 333:main.c        **** {
 851              		.loc 1 333 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 0
 854              		@ frame_needed = 1, uses_anonymous_args = 0
 855 0000 80B5     		push	{r7, lr}
 856              		.cfi_def_cfa_offset 8
 857              		.cfi_offset 7, -8
 858              		.cfi_offset 14, -4
 859 0002 00AF     		add	r7, sp, #0
 860              		.cfi_def_cfa_register 7
 334:main.c        ****     //plug or unplug event
 335:main.c        ****     //check if eeprom has a flag saying you just restarted. If so, don't restart again
 336:main.c        ****     //otherwise, restart
 337:main.c        ****     my_Vbus_ISR_ClearPending();
 861              		.loc 1 337 0
 862 0004 FFF7FEFF 		bl	my_Vbus_ISR_ClearPending
 338:main.c        ****     vBusPin_ClearInterrupt();
 863              		.loc 1 338 0
 864 0008 FFF7FEFF 		bl	vBusPin_ClearInterrupt
 339:main.c        ****     restartSystemCheck();
 865              		.loc 1 339 0
 866 000c FFF7FEFF 		bl	restartSystemCheck
 340:main.c        **** 
 341:main.c        **** }
 867              		.loc 1 341 0
 868 0010 00BF     		nop
 869 0012 80BD     		pop	{r7, pc}
 870              		.cfi_endproc
 871              	.LFE71:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 23


 872              		.size	Vbus_function, .-Vbus_function
 873              		.section	.text.restartSystemCheck,"ax",%progbits
 874              		.align	2
 875              		.global	restartSystemCheck
 876              		.thumb
 877              		.thumb_func
 878              		.type	restartSystemCheck, %function
 879              	restartSystemCheck:
 880              	.LFB72:
 342:main.c        **** 
 343:main.c        **** void restartSystemCheck()
 344:main.c        **** {
 881              		.loc 1 344 0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 0
 884              		@ frame_needed = 1, uses_anonymous_args = 0
 885 0000 80B5     		push	{r7, lr}
 886              		.cfi_def_cfa_offset 8
 887              		.cfi_offset 7, -8
 888              		.cfi_offset 14, -4
 889 0002 00AF     		add	r7, sp, #0
 890              		.cfi_def_cfa_register 7
 345:main.c        ****     eepromReturnValue = Em_EEPROM_Read(0u, eepromArray, 2u);
 891              		.loc 1 345 0
 892 0004 184B     		ldr	r3, .L50
 893 0006 0222     		movs	r2, #2
 894 0008 1849     		ldr	r1, .L50+4
 895 000a 0020     		movs	r0, #0
 896 000c FFF7FEFF 		bl	Cy_Em_EEPROM_Read
 897 0010 0346     		mov	r3, r0
 898 0012 1A46     		mov	r2, r3
 899 0014 164B     		ldr	r3, .L50+8
 900 0016 1A70     		strb	r2, [r3]
 346:main.c        ****     //only do the restart check if there is a USB cable plugged in (to avoid restarting while tryin
 347:main.c        ****     if (USB_VBusPresent() == 1)
 901              		.loc 1 347 0
 902 0018 FFF7FEFF 		bl	USB_VBusPresent
 903 001c 0346     		mov	r3, r0
 904 001e 012B     		cmp	r3, #1
 905 0020 20D1     		bne	.L49
 348:main.c        ****     {
 349:main.c        ****         if (*(volatile uint8 *) &eepromArray[0] == 1u)
 906              		.loc 1 349 0
 907 0022 124B     		ldr	r3, .L50+4
 908 0024 1B78     		ldrb	r3, [r3]
 909 0026 DBB2     		uxtb	r3, r3
 910 0028 012B     		cmp	r3, #1
 911 002a 0CD1     		bne	.L48
 350:main.c        ****         {
 351:main.c        ****             //a flag says we just restarted
 352:main.c        ****             //write a zero so it knows next time that it's OK to restart
 353:main.c        ****             array[0] = 0;
 912              		.loc 1 353 0
 913 002c 114B     		ldr	r3, .L50+12
 914 002e 0022     		movs	r2, #0
 915 0030 1A70     		strb	r2, [r3]
 354:main.c        ****             Em_EEPROM_Write(0u,array,2u);     
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 24


 916              		.loc 1 354 0
 917 0032 0D4B     		ldr	r3, .L50
 918 0034 0222     		movs	r2, #2
 919 0036 0F49     		ldr	r1, .L50+12
 920 0038 0020     		movs	r0, #0
 921 003a FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 355:main.c        ****             USB_check_flag = 1;
 922              		.loc 1 355 0
 923 003e 0E4B     		ldr	r3, .L50+16
 924 0040 0122     		movs	r2, #1
 925 0042 1A70     		strb	r2, [r3]
 356:main.c        ****         }
 357:main.c        ****         else
 358:main.c        ****         {
 359:main.c        ****            //otherwise, we need to restart
 360:main.c        ****            array[0] = 1;
 361:main.c        ****            Em_EEPROM_Write(0u,array,2u);  
 362:main.c        ****             USB_Stop();
 363:main.c        ****             I2C_1_Stop();
 364:main.c        ****             CySoftwareReset();
 365:main.c        ****         }
 366:main.c        ****     }
 367:main.c        **** }
 926              		.loc 1 367 0
 927 0044 0EE0     		b	.L49
 928              	.L48:
 360:main.c        ****            Em_EEPROM_Write(0u,array,2u);  
 929              		.loc 1 360 0
 930 0046 0B4B     		ldr	r3, .L50+12
 931 0048 0122     		movs	r2, #1
 932 004a 1A70     		strb	r2, [r3]
 361:main.c        ****             USB_Stop();
 933              		.loc 1 361 0
 934 004c 064B     		ldr	r3, .L50
 935 004e 0222     		movs	r2, #2
 936 0050 0849     		ldr	r1, .L50+12
 937 0052 0020     		movs	r0, #0
 938 0054 FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 362:main.c        ****             I2C_1_Stop();
 939              		.loc 1 362 0
 940 0058 FFF7FEFF 		bl	USB_Stop
 363:main.c        ****             CySoftwareReset();
 941              		.loc 1 363 0
 942 005c FFF7FEFF 		bl	I2C_1_Stop
 364:main.c        ****         }
 943              		.loc 1 364 0
 944 0060 FFF7FEFF 		bl	CySoftwareReset
 945              	.L49:
 946              		.loc 1 367 0
 947 0064 00BF     		nop
 948 0066 80BD     		pop	{r7, pc}
 949              	.L51:
 950              		.align	2
 951              	.L50:
 952 0068 00000000 		.word	Em_EEPROM_context
 953 006c 24000000 		.word	eepromArray
 954 0070 00000000 		.word	eepromReturnValue
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 25


 955 0074 00000000 		.word	array
 956 0078 00000000 		.word	USB_check_flag
 957              		.cfi_endproc
 958              	.LFE72:
 959              		.size	restartSystemCheck, .-restartSystemCheck
 960              		.global	__aeabi_ui2f
 961              		.global	__aeabi_f2iz
 962              		.global	__aeabi_f2uiz
 963              		.section	.text.main,"ax",%progbits
 964              		.align	2
 965              		.global	main
 966              		.thumb
 967              		.thumb_func
 968              		.type	main, %function
 969              	main:
 970              	.LFB73:
 368:main.c        **** 
 369:main.c        **** int main(void)
 370:main.c        **** {
 971              		.loc 1 370 0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 24
 974              		@ frame_needed = 1, uses_anonymous_args = 0
 975 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 976              		.cfi_def_cfa_offset 20
 977              		.cfi_offset 4, -20
 978              		.cfi_offset 5, -16
 979              		.cfi_offset 6, -12
 980              		.cfi_offset 7, -8
 981              		.cfi_offset 14, -4
 982 0002 89B0     		sub	sp, sp, #36
 983              		.cfi_def_cfa_offset 56
 984 0004 02AF     		add	r7, sp, #8
 985              		.cfi_def_cfa 7, 48
 371:main.c        **** 
 372:main.c        **** 	CYGlobalIntEnable; 
 986              		.loc 1 372 0
 987              		.syntax unified
 988              	@ 372 "main.c" 1
 989 0006 62B6     		CPSIE   i
 990              	@ 0 "" 2
 373:main.c        ****     SPI_ready_Write(0);
 991              		.loc 1 373 0
 992              		.thumb
 993              		.syntax unified
 994 0008 0020     		movs	r0, #0
 995 000a FFF7FEFF 		bl	SPI_ready_Write
 374:main.c        ****     
 375:main.c        ****     //EEPROM_Start();
 376:main.c        ****     
 377:main.c        ****     eepromReturnValue = Em_EEPROM_Init((uint32_t)Em_EEPROM_em_EepromStorage);
 996              		.loc 1 377 0
 997 000e A44B     		ldr	r3, .L113
 998 0010 1846     		mov	r0, r3
 999 0012 FFF7FEFF 		bl	Em_EEPROM_Init
 1000 0016 0346     		mov	r3, r0
 1001 0018 1A46     		mov	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 26


 1002 001a A24B     		ldr	r3, .L113+4
 1003 001c 1A70     		strb	r2, [r3]
 378:main.c        ****     if(eepromReturnValue != CY_EM_EEPROM_SUCCESS)
 379:main.c        ****     {
 380:main.c        ****        // HandleError();
 381:main.c        ****     }
 382:main.c        ****     USB_SetPowerStatus(USB_DEVICE_STATUS_SELF_POWERED);
 1004              		.loc 1 382 0
 1005 001e 0120     		movs	r0, #1
 1006 0020 FFF7FEFF 		bl	USB_SetPowerStatus
 383:main.c        ****     my_Vbus_ISR_StartEx(Vbus_function);
 1007              		.loc 1 383 0
 1008 0024 A048     		ldr	r0, .L113+8
 1009 0026 FFF7FEFF 		bl	my_Vbus_ISR_StartEx
 384:main.c        ****     
 385:main.c        ****     if (!USB_VBusPresent())
 1010              		.loc 1 385 0
 1011 002a FFF7FEFF 		bl	USB_VBusPresent
 1012 002e 0346     		mov	r3, r0
 1013 0030 002B     		cmp	r3, #0
 1014 0032 01D1     		bne	.L53
 386:main.c        ****     {
 387:main.c        ****        restartSystemCheck();
 1015              		.loc 1 387 0
 1016 0034 FFF7FEFF 		bl	restartSystemCheck
 1017              	.L53:
 388:main.c        ****     }
 389:main.c        ****     
 390:main.c        ****     
 391:main.c        ****     IDAC8_1_Start();
 1018              		.loc 1 391 0
 1019 0038 FFF7FEFF 		bl	IDAC8_1_Start
 392:main.c        **** 	ADC_1_Start();
 1020              		.loc 1 392 0
 1021 003c FFF7FEFF 		bl	ADC_1_Start
 393:main.c        **** 	AMux_1_Start();
 1022              		.loc 1 393 0
 1023 0040 FFF7FEFF 		bl	AMux_1_Start
 394:main.c        ****     DmaTxConfiguration();
 1024              		.loc 1 394 0
 1025 0044 FFF7FEFF 		bl	DmaTxConfiguration
 395:main.c        ****     DmaRxConfiguration();
 1026              		.loc 1 395 0
 1027 0048 FFF7FEFF 		bl	DmaRxConfiguration
 396:main.c        ****     ADC_SAR_Seq_1_Start();
 1028              		.loc 1 396 0
 1029 004c FFF7FEFF 		bl	ADC_SAR_Seq_1_Start
 397:main.c        ****     ADC_SAR_Seq_1_StartConvert();
 1030              		.loc 1 397 0
 1031 0050 FFF7FEFF 		bl	ADC_SAR_Seq_1_StartConvert
 398:main.c        ****     SPIM_1_Start();
 1032              		.loc 1 398 0
 1033 0054 FFF7FEFF 		bl	SPIM_1_Start
 399:main.c        ****     SPIM_2_Start();
 1034              		.loc 1 399 0
 1035 0058 FFF7FEFF 		bl	SPIM_2_Start
 400:main.c        ****     //I2C_1_Start();
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 27


 401:main.c        ****     
 402:main.c        **** 
 403:main.c        ****     
 404:main.c        ****     CapSense_Start();     
 1036              		.loc 1 404 0
 1037 005c FFF7FEFF 		bl	CapSense_Start
 405:main.c        ****     
 406:main.c        ****     hp_R = 1.0f - (3.14159265358979f * 2.0f * 2.0f / 200.0f);
 1038              		.loc 1 406 0
 1039 0060 924B     		ldr	r3, .L113+12
 1040 0062 934A     		ldr	r2, .L113+16
 1041 0064 1A60     		str	r2, [r3]	@ float
 407:main.c        **** 
 408:main.c        ****     CyDelay(10);
 1042              		.loc 1 408 0
 1043 0066 0A20     		movs	r0, #10
 1044 0068 FFF7FEFF 		bl	CyDelay
 409:main.c        ****     CapSense_InitializeAllBaselines() ;
 1045              		.loc 1 409 0
 1046 006c FFF7FEFF 		bl	CapSense_InitializeAllBaselines
 410:main.c        ****     
 411:main.c        ****     SPI_ready_Write(1);
 1047              		.loc 1 411 0
 1048 0070 0120     		movs	r0, #1
 1049 0072 FFF7FEFF 		bl	SPI_ready_Write
 412:main.c        ****     CyDelay(10);
 1050              		.loc 1 412 0
 1051 0076 0A20     		movs	r0, #10
 1052 0078 FFF7FEFF 		bl	CyDelay
 1053              	.L108:
 413:main.c        **** 
 414:main.c        ****     //tSimplePoly_init(&myPoly);
 415:main.c        **** 	for(;;)
 416:main.c        ****     {
 417:main.c        **** 
 418:main.c        **** 
 419:main.c        ****         //turn on the multiplexer channels that set up the resistive sensors
 420:main.c        ****         //#if 0
 421:main.c        ****         ExtMUX_EN_Write(0);
 1054              		.loc 1 421 0
 1055 007c 0020     		movs	r0, #0
 1056 007e FFF7FEFF 		bl	ExtMUX_EN_Write
 422:main.c        ****         //CyDelayUs(5);
 423:main.c        ****         scanLinearResistor();
 1057              		.loc 1 423 0
 1058 0082 FFF7FEFF 		bl	scanLinearResistor
 424:main.c        **** 
 425:main.c        ****         //now disconnect resistive sensors so that they don't interfere with CapSense
 426:main.c        ****        // #endif
 427:main.c        ****         ExtMUX_EN_Write(1);
 1059              		.loc 1 427 0
 1060 0086 0120     		movs	r0, #1
 1061 0088 FFF7FEFF 		bl	ExtMUX_EN_Write
 428:main.c        ****         CyDelayUs(5);
 1062              		.loc 1 428 0
 1063 008c 0520     		movs	r0, #5
 1064 008e FFF7FEFF 		bl	CyDelayUs
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 28


 429:main.c        ****         CapSense_ClearSensors();
 1065              		.loc 1 429 0
 1066 0092 FFF7FEFF 		bl	CapSense_ClearSensors
 430:main.c        ****         CapSense_UpdateEnabledBaselines();
 1067              		.loc 1 430 0
 1068 0096 FFF7FEFF 		bl	CapSense_UpdateEnabledBaselines
 431:main.c        ****         CapSense_ScanEnabledWidgets();  
 1069              		.loc 1 431 0
 1070 009a FFF7FEFF 		bl	CapSense_ScanEnabledWidgets
 432:main.c        ****         currentOutPointer = 1;
 1071              		.loc 1 432 0
 1072 009e 854B     		ldr	r3, .L113+20
 1073 00a0 0122     		movs	r2, #1
 1074 00a2 1A60     		str	r2, [r3]
 433:main.c        ****         if (scanPart == 0)
 1075              		.loc 1 433 0
 1076 00a4 844B     		ldr	r3, .L113+24
 1077 00a6 1B68     		ldr	r3, [r3]
 1078 00a8 002B     		cmp	r3, #0
 1079 00aa 40F08F82 		bne	.L54
 1080              	.LBB2:
 434:main.c        ****         {
 435:main.c        **** 
 436:main.c        ****             //buttons = Status_Reg_1_Read();
 437:main.c        ****             #if 0
 438:main.c        ****             
 439:main.c        ****             
 440:main.c        ****           //  sendMIDIControlChange(whichLinearSensor*3, (linearPotValue32Bit[whichLinearSensor] >>
 441:main.c        ****           //  sendMIDIControlChange(whichLinearSensor*3+1, (linearPotValue32Bit[whichLinearSensor] 
 442:main.c        ****           //  sendMIDIControlChange(whichLinearSensor*3+2, (linearPotValue32Bit[whichLinearSensor] 
 443:main.c        ****             uint8_t fretAbove = binarySearch(fretMeasurements[whichLinearSensor], 0, 21, linearPotV
 444:main.c        ****             float pitchBendVal = 8192.0;
 445:main.c        ****             float midiFloat = 0.0f;
 446:main.c        ****             if (fretAbove > 0)
 447:main.c        ****             {
 448:main.c        ****                 float range = fretMeasurements[whichLinearSensor][fretAbove-1] - fretMeasurements[w
 449:main.c        ****                 float ratio = ((float)(linearPotValue32Bit[whichLinearSensor]  - fretMeasurements[w
 450:main.c        ****                 midiFloat = (1.0f - ratio) + (float)(fretAbove - 1);
 451:main.c        ****             }
 452:main.c        ****             if (frettedState)
 453:main.c        ****             {
 454:main.c        ****                 float roundedMidiFloat = roundf(midiFloat);
 455:main.c        ****                 if (midiFloat < hysteresisStates[whichLinearSensor] - 0.6f)
 456:main.c        ****                 {
 457:main.c        ****                     hysteresisStates[whichLinearSensor] = roundedMidiFloat;   
 458:main.c        ****                 }
 459:main.c        ****                 else if (midiFloat > hysteresisStates[whichLinearSensor] + 0.6f)
 460:main.c        ****                 {
 461:main.c        ****                     hysteresisStates[whichLinearSensor] = roundedMidiFloat;   
 462:main.c        ****                 }
 463:main.c        ****                 if (hysteresisStates[whichLinearSensor] != previousHysteresisStates[whichLinearSens
 464:main.c        ****                 {
 465:main.c        ****                     vibratoCrossfade[whichLinearSensor] = 0.0f;
 466:main.c        ****                     crossFadeStartCount[whichLinearSensor] = 0;
 467:main.c        ****                 }
 468:main.c        ****                 //64 is the number of passes through this loop that it waits before applying the hi
 469:main.c        ****                 //otherwise you get glitches as the filter picks up fret changes and smoothes them 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 29


 470:main.c        ****                 // would be better to do highpass and lowpass to narrow to bandwidth of 1Hz to 10Hz
 471:main.c        ****                 else if ((vibratoCrossfade[whichLinearSensor] < 1.5f) && (crossFadeStartCount[which
 472:main.c        ****                 {
 473:main.c        ****                     vibratoCrossfade[whichLinearSensor] += 0.01f;
 474:main.c        ****                    
 475:main.c        ****                 }
 476:main.c        ****                 else if (crossFadeStartCount[whichLinearSensor] <= 64)
 477:main.c        ****                 {
 478:main.c        ****                     crossFadeStartCount[whichLinearSensor]++;
 479:main.c        ****                 }
 480:main.c        ****          
 481:main.c        ****                 previousHysteresisStates[whichLinearSensor] = hysteresisStates[whichLinearSensor];
 482:main.c        ****                                 //high pass filter to get fast changes to add later
 483:main.c        ****                 float vibrato = midiFloat - hp_x[whichLinearSensor] + hp_R * hp_y[whichLinearSensor
 484:main.c        ****                 hp_x[whichLinearSensor] = midiFloat;
 485:main.c        ****                 hp_y[whichLinearSensor] = vibrato;
 486:main.c        ****                 
 487:main.c        ****                 midiFloat = hysteresisStates[whichLinearSensor]+ (vibrato * vibratoCrossfade[whichL
 488:main.c        ****             }                
 489:main.c        ****             #endif
 490:main.c        ****             
 491:main.c        ****              
 492:main.c        ****             float pitchBendVal = 8192.0;
 1081              		.loc 1 492 0
 1082 00ae 4FF08C43 		mov	r3, #1174405120
 1083 00b2 3B60     		str	r3, [r7]	@ float
 493:main.c        ****             
 494:main.c        ****             if (linearPotValue32Bit[whichLinearSensor] == 65535)
 1084              		.loc 1 494 0
 1085 00b4 814B     		ldr	r3, .L113+28
 1086 00b6 1B68     		ldr	r3, [r3]
 1087 00b8 814A     		ldr	r2, .L113+32
 1088 00ba 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1089 00be 4FF6FF72 		movw	r2, #65535
 1090 00c2 9342     		cmp	r3, r2
 1091 00c4 40F01481 		bne	.L55
 495:main.c        ****             {
 496:main.c        ****                 stringMIDI[whichLinearSensor] = openStringMIDI[whichLinearSensor];
 1092              		.loc 1 496 0
 1093 00c8 7C4B     		ldr	r3, .L113+28
 1094 00ca 1B68     		ldr	r3, [r3]
 1095 00cc 7B4A     		ldr	r2, .L113+28
 1096 00ce 1268     		ldr	r2, [r2]
 1097 00d0 7C49     		ldr	r1, .L113+36
 1098 00d2 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1099 00d6 7C49     		ldr	r1, .L113+40
 1100 00d8 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 497:main.c        ****                  //pitchBendVal  = (stringMIDI[whichLinearSensor] * 341.0f) + 8192.0f;
 498:main.c        ****                 //if ((openStringCount[whichLinearSensor] < 5) || (CapSense_sensorOnMask[whichLinea
 499:main.c        ****                 //{
 500:main.c        ****                 //    openStringCount[whichLinearSensor]++;
 501:main.c        ****                 //}
 502:main.c        ****                 //else
 503:main.c        ****                 //{
 504:main.c        ****                 //    pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 505:main.c        ****                // }
 506:main.c        ****                 if (pitchFreeze[whichLinearSensor])
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 30


 1101              		.loc 1 506 0
 1102 00dc 774B     		ldr	r3, .L113+28
 1103 00de 1B68     		ldr	r3, [r3]
 1104 00e0 7A4A     		ldr	r2, .L113+44
 1105 00e2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1106 00e4 002B     		cmp	r3, #0
 1107 00e6 00F0B380 		beq	.L56
 507:main.c        ****                 {
 508:main.c        ****                     stringMIDI[whichLinearSensor] = pitchBendHistory[whichLinearSensor][((pitchBend
 1108              		.loc 1 508 0
 1109 00ea 744B     		ldr	r3, .L113+28
 1110 00ec 1B68     		ldr	r3, [r3]
 1111 00ee 734A     		ldr	r2, .L113+28
 1112 00f0 1168     		ldr	r1, [r2]
 1113 00f2 724A     		ldr	r2, .L113+28
 1114 00f4 1268     		ldr	r2, [r2]
 1115 00f6 7648     		ldr	r0, .L113+48
 1116 00f8 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 1117 00fc 0132     		adds	r2, r2, #1
 1118 00fe 02F01F02 		and	r2, r2, #31
 1119 0102 7448     		ldr	r0, .L113+52
 1120 0104 4901     		lsls	r1, r1, #5
 1121 0106 0A44     		add	r2, r2, r1
 1122 0108 50F82220 		ldr	r2, [r0, r2, lsl #2]	@ float
 1123 010c 6E49     		ldr	r1, .L113+40
 1124 010e 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 509:main.c        ****                     pitchBendHistory[whichLinearSensor][pitchBendHistoryPointer[whichLinearSensor]]
 1125              		.loc 1 509 0
 1126 0112 6A4B     		ldr	r3, .L113+28
 1127 0114 1B68     		ldr	r3, [r3]
 1128 0116 694A     		ldr	r2, .L113+28
 1129 0118 1268     		ldr	r2, [r2]
 1130 011a 6D49     		ldr	r1, .L113+48
 1131 011c 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1132 0120 1046     		mov	r0, r2
 1133 0122 664A     		ldr	r2, .L113+28
 1134 0124 1268     		ldr	r2, [r2]
 1135 0126 6849     		ldr	r1, .L113+40
 1136 0128 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1137 012c 6949     		ldr	r1, .L113+52
 1138 012e 5B01     		lsls	r3, r3, #5
 1139 0130 0344     		add	r3, r3, r0
 1140 0132 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 510:main.c        ****                     pitchBendHistoryPointer[whichLinearSensor] =  (pitchBendHistoryPointer[whichLin
 1141              		.loc 1 510 0
 1142 0136 614B     		ldr	r3, .L113+28
 1143 0138 1B68     		ldr	r3, [r3]
 1144 013a 604A     		ldr	r2, .L113+28
 1145 013c 1268     		ldr	r2, [r2]
 1146 013e 6449     		ldr	r1, .L113+48
 1147 0140 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1148 0144 0132     		adds	r2, r2, #1
 1149 0146 92B2     		uxth	r2, r2
 1150 0148 02F01F02 		and	r2, r2, #31
 1151 014c 91B2     		uxth	r1, r2
 1152 014e 604A     		ldr	r2, .L113+48
 1153 0150 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 31


 511:main.c        ****                     if (frettedState)
 1154              		.loc 1 511 0
 1155 0154 604B     		ldr	r3, .L113+56
 1156 0156 1B68     		ldr	r3, [r3]
 1157 0158 002B     		cmp	r3, #0
 1158 015a 52D0     		beq	.L57
 512:main.c        ****                     { 
 513:main.c        ****                         if ((stringMIDI[whichLinearSensor] > (stringMIDIPrev[whichLinearSensor] + l
 1159              		.loc 1 513 0
 1160 015c 574B     		ldr	r3, .L113+28
 1161 015e 1B68     		ldr	r3, [r3]
 1162 0160 594A     		ldr	r2, .L113+40
 1163 0162 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
 1164 0166 554B     		ldr	r3, .L113+28
 1165 0168 1B68     		ldr	r3, [r3]
 1166 016a 5C4A     		ldr	r2, .L113+60
 1167 016c 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1168 0170 5B4B     		ldr	r3, .L113+64
 1169 0172 1B68     		ldr	r3, [r3]	@ float
 1170 0174 1946     		mov	r1, r3
 1171 0176 1046     		mov	r0, r2
 1172 0178 FFF7FEFF 		bl	__aeabi_fadd
 1173 017c 0346     		mov	r3, r0
 1174 017e 1946     		mov	r1, r3
 1175 0180 2046     		mov	r0, r4
 1176 0182 FFF7FEFF 		bl	__aeabi_fcmpgt
 1177 0186 0346     		mov	r3, r0
 1178 0188 002B     		cmp	r3, #0
 1179 018a 17D1     		bne	.L58
 1180              		.loc 1 513 0 is_stmt 0 discriminator 1
 1181 018c 4B4B     		ldr	r3, .L113+28
 1182 018e 1B68     		ldr	r3, [r3]
 1183 0190 4D4A     		ldr	r2, .L113+40
 1184 0192 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
 1185 0196 494B     		ldr	r3, .L113+28
 1186 0198 1B68     		ldr	r3, [r3]
 1187 019a 504A     		ldr	r2, .L113+60
 1188 019c 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1189 01a0 4F4B     		ldr	r3, .L113+64
 1190 01a2 1B68     		ldr	r3, [r3]	@ float
 1191 01a4 1946     		mov	r1, r3
 1192 01a6 1046     		mov	r0, r2
 1193 01a8 FFF7FEFF 		bl	__aeabi_fsub
 1194 01ac 0346     		mov	r3, r0
 1195 01ae 1946     		mov	r1, r3
 1196 01b0 2046     		mov	r0, r4
 1197 01b2 FFF7FEFF 		bl	__aeabi_fcmplt
 1198 01b6 0346     		mov	r3, r0
 1199 01b8 002B     		cmp	r3, #0
 1200 01ba 18D0     		beq	.L109
 1201              	.L58:
 514:main.c        ****                         {
 515:main.c        ****                             stringMIDI[whichLinearSensor] = roundf(stringMIDI[whichLinearSensor]);
 1202              		.loc 1 515 0 is_stmt 1
 1203 01bc 3F4B     		ldr	r3, .L113+28
 1204 01be 1C68     		ldr	r4, [r3]
 1205 01c0 3E4B     		ldr	r3, .L113+28
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 32


 1206 01c2 1B68     		ldr	r3, [r3]
 1207 01c4 404A     		ldr	r2, .L113+40
 1208 01c6 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1209 01ca 1846     		mov	r0, r3
 1210 01cc FFF7FEFF 		bl	roundf
 1211 01d0 0246     		mov	r2, r0
 1212 01d2 3D4B     		ldr	r3, .L113+40
 1213 01d4 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 516:main.c        ****                             stringMIDIPrev[whichLinearSensor] = stringMIDI[whichLinearSensor];
 1214              		.loc 1 516 0
 1215 01d8 384B     		ldr	r3, .L113+28
 1216 01da 1B68     		ldr	r3, [r3]
 1217 01dc 374A     		ldr	r2, .L113+28
 1218 01de 1268     		ldr	r2, [r2]
 1219 01e0 3949     		ldr	r1, .L113+40
 1220 01e2 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1221 01e6 3D49     		ldr	r1, .L113+60
 1222 01e8 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1223 01ec 09E0     		b	.L57
 1224              	.L109:
 517:main.c        ****                         }
 518:main.c        ****                         else
 519:main.c        ****                         {
 520:main.c        ****                            stringMIDI[whichLinearSensor] =  stringMIDIPrev[whichLinearSensor];
 1225              		.loc 1 520 0
 1226 01ee 334B     		ldr	r3, .L113+28
 1227 01f0 1B68     		ldr	r3, [r3]
 1228 01f2 324A     		ldr	r2, .L113+28
 1229 01f4 1268     		ldr	r2, [r2]
 1230 01f6 3949     		ldr	r1, .L113+60
 1231 01f8 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1232 01fc 3249     		ldr	r1, .L113+40
 1233 01fe 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1234              	.L57:
 521:main.c        ****                         }
 522:main.c        ****                     }
 523:main.c        ****                     pitchBendVal  = ((stringMIDI[whichLinearSensor] - openStringMIDI[whichLinearSen
 1235              		.loc 1 523 0
 1236 0202 2E4B     		ldr	r3, .L113+28
 1237 0204 1B68     		ldr	r3, [r3]
 1238 0206 304A     		ldr	r2, .L113+40
 1239 0208 52F82300 		ldr	r0, [r2, r3, lsl #2]	@ float
 1240 020c 2B4B     		ldr	r3, .L113+28
 1241 020e 1B68     		ldr	r3, [r3]
 1242 0210 2C4A     		ldr	r2, .L113+36
 1243 0212 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1244 0216 1946     		mov	r1, r3
 1245 0218 FFF7FEFF 		bl	__aeabi_fsub
 1246 021c 0346     		mov	r3, r0
 1247 021e 3149     		ldr	r1, .L113+68
 1248 0220 1846     		mov	r0, r3
 1249 0222 FFF7FEFF 		bl	__aeabi_fmul
 1250 0226 0346     		mov	r3, r0
 1251 0228 4FF08C41 		mov	r1, #1174405120
 1252 022c 1846     		mov	r0, r3
 1253 022e FFF7FEFF 		bl	__aeabi_fadd
 1254 0232 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 33


 1255 0234 3B60     		str	r3, [r7]	@ float
 524:main.c        ****                     openStringCount[whichLinearSensor] = 0;
 1256              		.loc 1 524 0
 1257 0236 214B     		ldr	r3, .L113+28
 1258 0238 1B68     		ldr	r3, [r3]
 1259 023a 2B4A     		ldr	r2, .L113+72
 1260 023c 0021     		movs	r1, #0
 1261 023e 42F82310 		str	r1, [r2, r3, lsl #2]
 525:main.c        ****                     pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 1262              		.loc 1 525 0
 1263 0242 1E4B     		ldr	r3, .L113+28
 1264 0244 1B68     		ldr	r3, [r3]
 1265 0246 2949     		ldr	r1, .L113+76
 1266 0248 3A68     		ldr	r2, [r7]	@ float
 1267 024a 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1268 024e BDE1     		b	.L54
 1269              	.L56:
 526:main.c        ****                 }
 527:main.c        ****                 else
 528:main.c        ****                 {
 529:main.c        ****                     pitchBendHistory[whichLinearSensor][pitchBendHistoryPointer[whichLinearSensor]]
 1270              		.loc 1 529 0
 1271 0250 1A4B     		ldr	r3, .L113+28
 1272 0252 1B68     		ldr	r3, [r3]
 1273 0254 194A     		ldr	r2, .L113+28
 1274 0256 1268     		ldr	r2, [r2]
 1275 0258 1D49     		ldr	r1, .L113+48
 1276 025a 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1277 025e 1046     		mov	r0, r2
 1278 0260 164A     		ldr	r2, .L113+28
 1279 0262 1268     		ldr	r2, [r2]
 1280 0264 1749     		ldr	r1, .L113+36
 1281 0266 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1282 026a 1A49     		ldr	r1, .L113+52
 1283 026c 5B01     		lsls	r3, r3, #5
 1284 026e 0344     		add	r3, r3, r0
 1285 0270 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 530:main.c        ****                     pitchBendHistoryPointer[whichLinearSensor] =  (pitchBendHistoryPointer[whichLin
 1286              		.loc 1 530 0
 1287 0274 114B     		ldr	r3, .L113+28
 1288 0276 1B68     		ldr	r3, [r3]
 1289 0278 104A     		ldr	r2, .L113+28
 1290 027a 1268     		ldr	r2, [r2]
 1291 027c 1449     		ldr	r1, .L113+48
 1292 027e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1293 0282 0132     		adds	r2, r2, #1
 1294 0284 92B2     		uxth	r2, r2
 1295 0286 02F01F02 		and	r2, r2, #31
 1296 028a 91B2     		uxth	r1, r2
 1297 028c 104A     		ldr	r2, .L113+48
 1298 028e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 531:main.c        ****                     pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 1299              		.loc 1 531 0
 1300 0292 0A4B     		ldr	r3, .L113+28
 1301 0294 1B68     		ldr	r3, [r3]
 1302 0296 1549     		ldr	r1, .L113+76
 1303 0298 3A68     		ldr	r2, [r7]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 34


 1304 029a 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1305 029e 95E1     		b	.L54
 1306              	.L114:
 1307              		.align	2
 1308              	.L113:
 1309 02a0 00000000 		.word	Em_EEPROM_em_EepromStorage
 1310 02a4 00000000 		.word	eepromReturnValue
 1311 02a8 00000000 		.word	Vbus_function
 1312 02ac 00000000 		.word	hp_R
 1313 02b0 40EA6F3F 		.word	1064299072
 1314 02b4 00000000 		.word	currentOutPointer
 1315 02b8 00000000 		.word	scanPart
 1316 02bc 00000000 		.word	whichLinearSensor
 1317 02c0 00000000 		.word	linearPotValue32Bit
 1318 02c4 00000000 		.word	openStringMIDI
 1319 02c8 00000000 		.word	stringMIDI
 1320 02cc 00000000 		.word	pitchFreeze
 1321 02d0 00000000 		.word	pitchBendHistoryPointer
 1322 02d4 00000000 		.word	pitchBendHistory
 1323 02d8 00000000 		.word	frettedState
 1324 02dc 00000000 		.word	stringMIDIPrev
 1325 02e0 00000000 		.word	linearHysteresis
 1326 02e4 0080AA43 		.word	1135247360
 1327 02e8 00000000 		.word	openStringCount
 1328 02ec 00000000 		.word	pitchBendsPerString
 1329              	.L55:
 532:main.c        ****                 }  
 533:main.c        ****             }
 534:main.c        ****             else
 535:main.c        ****             {
 536:main.c        ****                 
 537:main.c        **** 
 538:main.c        ****                 
 539:main.c        ****                 if (pitchFreeze[whichLinearSensor])
 1330              		.loc 1 539 0
 1331 02f0 8E4B     		ldr	r3, .L115
 1332 02f2 1B68     		ldr	r3, [r3]
 1333 02f4 8E4A     		ldr	r2, .L115+4
 1334 02f6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1335 02f8 002B     		cmp	r3, #0
 1336 02fa 14D0     		beq	.L62
 540:main.c        ****                 {
 541:main.c        ****                    stringMIDI[whichLinearSensor] = pitchBendHistory[whichLinearSensor][((pitchBendH
 1337              		.loc 1 541 0
 1338 02fc 8B4B     		ldr	r3, .L115
 1339 02fe 1B68     		ldr	r3, [r3]
 1340 0300 8A4A     		ldr	r2, .L115
 1341 0302 1168     		ldr	r1, [r2]
 1342 0304 894A     		ldr	r2, .L115
 1343 0306 1268     		ldr	r2, [r2]
 1344 0308 8A48     		ldr	r0, .L115+8
 1345 030a 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 1346 030e 0132     		adds	r2, r2, #1
 1347 0310 02F01F02 		and	r2, r2, #31
 1348 0314 8848     		ldr	r0, .L115+12
 1349 0316 4901     		lsls	r1, r1, #5
 1350 0318 0A44     		add	r2, r2, r1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 35


 1351 031a 50F82220 		ldr	r2, [r0, r2, lsl #2]	@ float
 1352 031e 8749     		ldr	r1, .L115+16
 1353 0320 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1354 0324 B5E0     		b	.L63
 1355              	.L62:
 542:main.c        ****                 }
 543:main.c        ****                 else
 544:main.c        ****                 {
 545:main.c        ****                     linearFIR[whichLinearSensor][linFirPointer[whichLinearSensor]] = linearPotValue
 1356              		.loc 1 545 0
 1357 0326 814B     		ldr	r3, .L115
 1358 0328 1B68     		ldr	r3, [r3]
 1359 032a 804A     		ldr	r2, .L115
 1360 032c 1268     		ldr	r2, [r2]
 1361 032e 8449     		ldr	r1, .L115+20
 1362 0330 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 1363 0332 1046     		mov	r0, r2
 1364 0334 7D4A     		ldr	r2, .L115
 1365 0336 1268     		ldr	r2, [r2]
 1366 0338 8249     		ldr	r1, .L115+24
 1367 033a 51F82220 		ldr	r2, [r1, r2, lsl #2]
 1368 033e 1146     		mov	r1, r2
 1369 0340 814A     		ldr	r2, .L115+28
 1370 0342 5B00     		lsls	r3, r3, #1
 1371 0344 0344     		add	r3, r3, r0
 1372 0346 42F82310 		str	r1, [r2, r3, lsl #2]
 546:main.c        ****                     linearSmoothed[whichLinearSensor] = 0;
 1373              		.loc 1 546 0
 1374 034a 784B     		ldr	r3, .L115
 1375 034c 1B68     		ldr	r3, [r3]
 1376 034e 7F4A     		ldr	r2, .L115+32
 1377 0350 0021     		movs	r1, #0
 1378 0352 42F82310 		str	r1, [r2, r3, lsl #2]
 1379              	.LBB3:
 547:main.c        ****                     for (int j = 0; j < LINEAR_FIR_SIZE; j++)
 1380              		.loc 1 547 0
 1381 0356 0023     		movs	r3, #0
 1382 0358 7B61     		str	r3, [r7, #20]
 1383 035a 13E0     		b	.L64
 1384              	.L65:
 548:main.c        ****                     {
 549:main.c        ****                         linearSmoothed[whichLinearSensor] += linearFIR[whichLinearSensor][j];
 1385              		.loc 1 549 0 discriminator 3
 1386 035c 734B     		ldr	r3, .L115
 1387 035e 1B68     		ldr	r3, [r3]
 1388 0360 7949     		ldr	r1, .L115+28
 1389 0362 5A00     		lsls	r2, r3, #1
 1390 0364 7B69     		ldr	r3, [r7, #20]
 1391 0366 1344     		add	r3, r3, r2
 1392 0368 51F82320 		ldr	r2, [r1, r3, lsl #2]
 1393 036c 6F4B     		ldr	r3, .L115
 1394 036e 1B68     		ldr	r3, [r3]
 1395 0370 7649     		ldr	r1, .L115+32
 1396 0372 51F82310 		ldr	r1, [r1, r3, lsl #2]
 1397 0376 0A44     		add	r2, r2, r1
 1398 0378 7449     		ldr	r1, .L115+32
 1399 037a 41F82320 		str	r2, [r1, r3, lsl #2]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 36


 547:main.c        ****                     for (int j = 0; j < LINEAR_FIR_SIZE; j++)
 1400              		.loc 1 547 0 discriminator 3
 1401 037e 7B69     		ldr	r3, [r7, #20]
 1402 0380 0133     		adds	r3, r3, #1
 1403 0382 7B61     		str	r3, [r7, #20]
 1404              	.L64:
 547:main.c        ****                     for (int j = 0; j < LINEAR_FIR_SIZE; j++)
 1405              		.loc 1 547 0 is_stmt 0 discriminator 1
 1406 0384 7B69     		ldr	r3, [r7, #20]
 1407 0386 012B     		cmp	r3, #1
 1408 0388 E8DD     		ble	.L65
 1409              	.LBE3:
 550:main.c        ****                     }             
 551:main.c        ****                     linFirPointer[whichLinearSensor] = (linFirPointer[whichLinearSensor] + 1) & LIN
 1410              		.loc 1 551 0 is_stmt 1
 1411 038a 684B     		ldr	r3, .L115
 1412 038c 1B68     		ldr	r3, [r3]
 1413 038e 674A     		ldr	r2, .L115
 1414 0390 1268     		ldr	r2, [r2]
 1415 0392 6B49     		ldr	r1, .L115+20
 1416 0394 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 1417 0396 0132     		adds	r2, r2, #1
 1418 0398 D2B2     		uxtb	r2, r2
 1419 039a 02F00102 		and	r2, r2, #1
 1420 039e D1B2     		uxtb	r1, r2
 1421 03a0 674A     		ldr	r2, .L115+20
 1422 03a2 D154     		strb	r1, [r2, r3]
 552:main.c        ****                     linearSmoothed[whichLinearSensor] = linearSmoothed[whichLinearSensor] >> LINEAR
 1423              		.loc 1 552 0
 1424 03a4 614B     		ldr	r3, .L115
 1425 03a6 1B68     		ldr	r3, [r3]
 1426 03a8 604A     		ldr	r2, .L115
 1427 03aa 1268     		ldr	r2, [r2]
 1428 03ac 6749     		ldr	r1, .L115+32
 1429 03ae 51F82220 		ldr	r2, [r1, r2, lsl #2]
 1430 03b2 5208     		lsrs	r2, r2, #1
 1431 03b4 6549     		ldr	r1, .L115+32
 1432 03b6 41F82320 		str	r2, [r1, r3, lsl #2]
 553:main.c        ****                     invStringMappedPositions[whichLinearSensor] = (1.0f /  map((float)linearSmoothe
 1433              		.loc 1 553 0
 1434 03ba 5C4B     		ldr	r3, .L115
 1435 03bc 1C68     		ldr	r4, [r3]
 1436 03be 5B4B     		ldr	r3, .L115
 1437 03c0 1B68     		ldr	r3, [r3]
 1438 03c2 624A     		ldr	r2, .L115+32
 1439 03c4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1440 03c8 1846     		mov	r0, r3
 1441 03ca FFF7FEFF 		bl	__aeabi_ui2f
 1442 03ce 0546     		mov	r5, r0
 1443 03d0 564B     		ldr	r3, .L115
 1444 03d2 1B68     		ldr	r3, [r3]
 1445 03d4 5E4A     		ldr	r2, .L115+36
 1446 03d6 52F83330 		ldr	r3, [r2, r3, lsl #3]
 1447 03da 1846     		mov	r0, r3
 1448 03dc FFF7FEFF 		bl	__aeabi_ui2f
 1449 03e0 0646     		mov	r6, r0
 1450 03e2 524B     		ldr	r3, .L115
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 37


 1451 03e4 1B68     		ldr	r3, [r3]
 1452 03e6 5A4A     		ldr	r2, .L115+36
 1453 03e8 DB00     		lsls	r3, r3, #3
 1454 03ea 1344     		add	r3, r3, r2
 1455 03ec 5B68     		ldr	r3, [r3, #4]
 1456 03ee 1846     		mov	r0, r3
 1457 03f0 FFF7FEFF 		bl	__aeabi_ui2f
 1458 03f4 0146     		mov	r1, r0
 1459 03f6 574B     		ldr	r3, .L115+40
 1460 03f8 1A68     		ldr	r2, [r3]	@ float
 1461 03fa 564B     		ldr	r3, .L115+40
 1462 03fc 5B68     		ldr	r3, [r3, #4]	@ float
 1463 03fe 0093     		str	r3, [sp]	@ float
 1464 0400 1346     		mov	r3, r2
 1465 0402 0A46     		mov	r2, r1
 1466 0404 3146     		mov	r1, r6
 1467 0406 2846     		mov	r0, r5
 1468 0408 FFF7FEFF 		bl	map
 1469 040c 0346     		mov	r3, r0
 1470 040e 1946     		mov	r1, r3
 1471 0410 4FF07E50 		mov	r0, #1065353216
 1472 0414 FFF7FEFF 		bl	__aeabi_fdiv
 1473 0418 0346     		mov	r3, r0
 1474 041a 1A46     		mov	r2, r3
 1475 041c 4E4B     		ldr	r3, .L115+44
 1476 041e 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 554:main.c        ****                     stringMIDI[whichLinearSensor] = ftom(invStringMappedPositions[whichLinearSensor
 1477              		.loc 1 554 0
 1478 0422 424B     		ldr	r3, .L115
 1479 0424 1C68     		ldr	r4, [r3]
 1480 0426 414B     		ldr	r3, .L115
 1481 0428 1B68     		ldr	r3, [r3]
 1482 042a 4B4A     		ldr	r2, .L115+44
 1483 042c 52F82300 		ldr	r0, [r2, r3, lsl #2]	@ float
 1484 0430 3E4B     		ldr	r3, .L115
 1485 0432 1B68     		ldr	r3, [r3]
 1486 0434 494A     		ldr	r2, .L115+48
 1487 0436 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1488 043a 1946     		mov	r1, r3
 1489 043c FFF7FEFF 		bl	__aeabi_fmul
 1490 0440 0346     		mov	r3, r0
 1491 0442 1846     		mov	r0, r3
 1492 0444 FFF7FEFF 		bl	ftom
 1493 0448 0246     		mov	r2, r0
 1494 044a 3C4B     		ldr	r3, .L115+16
 1495 044c 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 555:main.c        ****                     pitchBendHistory[whichLinearSensor][pitchBendHistoryPointer[whichLinearSensor]]
 1496              		.loc 1 555 0
 1497 0450 364B     		ldr	r3, .L115
 1498 0452 1B68     		ldr	r3, [r3]
 1499 0454 354A     		ldr	r2, .L115
 1500 0456 1268     		ldr	r2, [r2]
 1501 0458 3649     		ldr	r1, .L115+8
 1502 045a 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1503 045e 1046     		mov	r0, r2
 1504 0460 324A     		ldr	r2, .L115
 1505 0462 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 38


 1506 0464 3549     		ldr	r1, .L115+16
 1507 0466 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1508 046a 3349     		ldr	r1, .L115+12
 1509 046c 5B01     		lsls	r3, r3, #5
 1510 046e 0344     		add	r3, r3, r0
 1511 0470 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 556:main.c        ****                     pitchBendHistoryPointer[whichLinearSensor] =  (pitchBendHistoryPointer[whichLin
 1512              		.loc 1 556 0
 1513 0474 2D4B     		ldr	r3, .L115
 1514 0476 1B68     		ldr	r3, [r3]
 1515 0478 2C4A     		ldr	r2, .L115
 1516 047a 1268     		ldr	r2, [r2]
 1517 047c 2D49     		ldr	r1, .L115+8
 1518 047e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1519 0482 0132     		adds	r2, r2, #1
 1520 0484 92B2     		uxth	r2, r2
 1521 0486 02F01F02 		and	r2, r2, #31
 1522 048a 91B2     		uxth	r1, r2
 1523 048c 294A     		ldr	r2, .L115+8
 1524 048e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 1525              	.L63:
 557:main.c        ****                 }
 558:main.c        **** 
 559:main.c        ****                 if (frettedState)
 1526              		.loc 1 559 0
 1527 0492 334B     		ldr	r3, .L115+52
 1528 0494 1B68     		ldr	r3, [r3]
 1529 0496 002B     		cmp	r3, #0
 1530 0498 72D0     		beq	.L66
 560:main.c        ****                 { 
 561:main.c        ****                     if ((stringMIDI[whichLinearSensor] > (stringMIDIPrev[whichLinearSensor] + linea
 1531              		.loc 1 561 0
 1532 049a 244B     		ldr	r3, .L115
 1533 049c 1B68     		ldr	r3, [r3]
 1534 049e 274A     		ldr	r2, .L115+16
 1535 04a0 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
 1536 04a4 214B     		ldr	r3, .L115
 1537 04a6 1B68     		ldr	r3, [r3]
 1538 04a8 2E4A     		ldr	r2, .L115+56
 1539 04aa 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1540 04ae 2E4B     		ldr	r3, .L115+60
 1541 04b0 1B68     		ldr	r3, [r3]	@ float
 1542 04b2 1946     		mov	r1, r3
 1543 04b4 1046     		mov	r0, r2
 1544 04b6 FFF7FEFF 		bl	__aeabi_fadd
 1545 04ba 0346     		mov	r3, r0
 1546 04bc 1946     		mov	r1, r3
 1547 04be 2046     		mov	r0, r4
 1548 04c0 FFF7FEFF 		bl	__aeabi_fcmpgt
 1549 04c4 0346     		mov	r3, r0
 1550 04c6 002B     		cmp	r3, #0
 1551 04c8 17D1     		bne	.L67
 1552              		.loc 1 561 0 is_stmt 0 discriminator 1
 1553 04ca 184B     		ldr	r3, .L115
 1554 04cc 1B68     		ldr	r3, [r3]
 1555 04ce 1B4A     		ldr	r2, .L115+16
 1556 04d0 52F82340 		ldr	r4, [r2, r3, lsl #2]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 39


 1557 04d4 154B     		ldr	r3, .L115
 1558 04d6 1B68     		ldr	r3, [r3]
 1559 04d8 224A     		ldr	r2, .L115+56
 1560 04da 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 1561 04de 224B     		ldr	r3, .L115+60
 1562 04e0 1B68     		ldr	r3, [r3]	@ float
 1563 04e2 1946     		mov	r1, r3
 1564 04e4 1046     		mov	r0, r2
 1565 04e6 FFF7FEFF 		bl	__aeabi_fsub
 1566 04ea 0346     		mov	r3, r0
 1567 04ec 1946     		mov	r1, r3
 1568 04ee 2046     		mov	r0, r4
 1569 04f0 FFF7FEFF 		bl	__aeabi_fcmplt
 1570 04f4 0346     		mov	r3, r0
 1571 04f6 002B     		cmp	r3, #0
 1572 04f8 38D0     		beq	.L110
 1573              	.L67:
 562:main.c        ****                     {
 563:main.c        ****                         stringMIDI[whichLinearSensor] = roundf(stringMIDI[whichLinearSensor]);
 1574              		.loc 1 563 0 is_stmt 1
 1575 04fa 0C4B     		ldr	r3, .L115
 1576 04fc 1C68     		ldr	r4, [r3]
 1577 04fe 0B4B     		ldr	r3, .L115
 1578 0500 1B68     		ldr	r3, [r3]
 1579 0502 0E4A     		ldr	r2, .L115+16
 1580 0504 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1581 0508 1846     		mov	r0, r3
 1582 050a FFF7FEFF 		bl	roundf
 1583 050e 0246     		mov	r2, r0
 1584 0510 0A4B     		ldr	r3, .L115+16
 1585 0512 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 564:main.c        ****                         stringMIDIPrev[whichLinearSensor] = stringMIDI[whichLinearSensor];
 1586              		.loc 1 564 0
 1587 0516 054B     		ldr	r3, .L115
 1588 0518 1B68     		ldr	r3, [r3]
 1589 051a 044A     		ldr	r2, .L115
 1590 051c 1268     		ldr	r2, [r2]
 1591 051e 0749     		ldr	r1, .L115+16
 1592 0520 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1593 0524 0F49     		ldr	r1, .L115+56
 1594 0526 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1595 052a 29E0     		b	.L66
 1596              	.L116:
 1597              		.align	2
 1598              	.L115:
 1599 052c 00000000 		.word	whichLinearSensor
 1600 0530 00000000 		.word	pitchFreeze
 1601 0534 00000000 		.word	pitchBendHistoryPointer
 1602 0538 00000000 		.word	pitchBendHistory
 1603 053c 00000000 		.word	stringMIDI
 1604 0540 00000000 		.word	linFirPointer
 1605 0544 00000000 		.word	linearPotValue32Bit
 1606 0548 00000000 		.word	linearFIR
 1607 054c 00000000 		.word	linearSmoothed
 1608 0550 00000000 		.word	fretMeasurements
 1609 0554 00000000 		.word	fretRatios
 1610 0558 00000000 		.word	invStringMappedPositions
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 40


 1611 055c 00000000 		.word	openStringFreqs
 1612 0560 00000000 		.word	frettedState
 1613 0564 00000000 		.word	stringMIDIPrev
 1614 0568 00000000 		.word	linearHysteresis
 1615              	.L110:
 565:main.c        ****                     }
 566:main.c        ****                     else
 567:main.c        ****                     {
 568:main.c        ****                        stringMIDI[whichLinearSensor] =  stringMIDIPrev[whichLinearSensor];
 1616              		.loc 1 568 0
 1617 056c A74B     		ldr	r3, .L117
 1618 056e 1B68     		ldr	r3, [r3]
 1619 0570 A64A     		ldr	r2, .L117
 1620 0572 1268     		ldr	r2, [r2]
 1621 0574 A649     		ldr	r1, .L117+4
 1622 0576 51F82220 		ldr	r2, [r1, r2, lsl #2]	@ float
 1623 057a A649     		ldr	r1, .L117+8
 1624 057c 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 1625              	.L66:
 569:main.c        ****                     }
 570:main.c        ****                 }
 571:main.c        ****                 pitchBendVal  = ((stringMIDI[whichLinearSensor] - openStringMIDI[whichLinearSensor]
 1626              		.loc 1 571 0
 1627 0580 A24B     		ldr	r3, .L117
 1628 0582 1B68     		ldr	r3, [r3]
 1629 0584 A34A     		ldr	r2, .L117+8
 1630 0586 52F82300 		ldr	r0, [r2, r3, lsl #2]	@ float
 1631 058a A04B     		ldr	r3, .L117
 1632 058c 1B68     		ldr	r3, [r3]
 1633 058e A24A     		ldr	r2, .L117+12
 1634 0590 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1635 0594 1946     		mov	r1, r3
 1636 0596 FFF7FEFF 		bl	__aeabi_fsub
 1637 059a 0346     		mov	r3, r0
 1638 059c 9F49     		ldr	r1, .L117+16
 1639 059e 1846     		mov	r0, r3
 1640 05a0 FFF7FEFF 		bl	__aeabi_fmul
 1641 05a4 0346     		mov	r3, r0
 1642 05a6 4FF08C41 		mov	r1, #1174405120
 1643 05aa 1846     		mov	r0, r3
 1644 05ac FFF7FEFF 		bl	__aeabi_fadd
 1645 05b0 0346     		mov	r3, r0
 1646 05b2 3B60     		str	r3, [r7]	@ float
 572:main.c        ****                 openStringCount[whichLinearSensor] = 0;
 1647              		.loc 1 572 0
 1648 05b4 954B     		ldr	r3, .L117
 1649 05b6 1B68     		ldr	r3, [r3]
 1650 05b8 994A     		ldr	r2, .L117+20
 1651 05ba 0021     		movs	r1, #0
 1652 05bc 42F82310 		str	r1, [r2, r3, lsl #2]
 573:main.c        ****                 pitchBendsPerString[whichLinearSensor] = pitchBendVal;
 1653              		.loc 1 573 0
 1654 05c0 924B     		ldr	r3, .L117
 1655 05c2 1B68     		ldr	r3, [r3]
 1656 05c4 9749     		ldr	r1, .L117+24
 1657 05c6 3A68     		ldr	r2, [r7]	@ float
 1658 05c8 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 41


 1659              	.L54:
 1660              	.LBE2:
 574:main.c        ****             }
 575:main.c        ****            
 576:main.c        ****         }
 577:main.c        ****        
 578:main.c        ****         if (!polyMode)
 1661              		.loc 1 578 0
 1662 05cc 964B     		ldr	r3, .L117+28
 1663 05ce 1B68     		ldr	r3, [r3]
 1664 05d0 002B     		cmp	r3, #0
 1665 05d2 2BD1     		bne	.L70
 579:main.c        ****         {     
 580:main.c        ****             if (stringStates[whichLinearSensor][0] >= 0)
 1666              		.loc 1 580 0
 1667 05d4 8D4B     		ldr	r3, .L117
 1668 05d6 1B68     		ldr	r3, [r3]
 1669 05d8 944A     		ldr	r2, .L117+32
 1670 05da 52F83330 		ldr	r3, [r2, r3, lsl #3]
 1671 05de 002B     		cmp	r3, #0
 1672 05e0 24DB     		blt	.L70
 581:main.c        ****             {
 582:main.c        ****                 //if (pitchFreeze[whichLinearSensor])
 583:main.c        ****                // {
 584:main.c        ****                     //pitchBendsPerString[whichLinearSensor] =  pitchBendHistory[whichLinearSensor]
 585:main.c        ****                // }
 586:main.c        ****                 
 587:main.c        ****                 if (((int)pitchBendsPerString[whichLinearSensor]) != previousPitchBendsSent)
 1673              		.loc 1 587 0
 1674 05e2 8A4B     		ldr	r3, .L117
 1675 05e4 1B68     		ldr	r3, [r3]
 1676 05e6 8F4A     		ldr	r2, .L117+24
 1677 05e8 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1678 05ec 1846     		mov	r0, r3
 1679 05ee FFF7FEFF 		bl	__aeabi_f2iz
 1680 05f2 0246     		mov	r2, r0
 1681 05f4 8E4B     		ldr	r3, .L117+36
 1682 05f6 1B68     		ldr	r3, [r3]
 1683 05f8 9A42     		cmp	r2, r3
 1684 05fa 17D0     		beq	.L70
 588:main.c        ****                 {
 589:main.c        **** 
 590:main.c        ****                     sendMIDIPitchBend((uint)pitchBendsPerString[whichLinearSensor], 0);
 1685              		.loc 1 590 0
 1686 05fc 834B     		ldr	r3, .L117
 1687 05fe 1B68     		ldr	r3, [r3]
 1688 0600 884A     		ldr	r2, .L117+24
 1689 0602 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1690 0606 1846     		mov	r0, r3
 1691 0608 FFF7FEFF 		bl	__aeabi_f2uiz
 1692 060c 0346     		mov	r3, r0
 1693 060e 0021     		movs	r1, #0
 1694 0610 1846     		mov	r0, r3
 1695 0612 FFF7FEFF 		bl	sendMIDIPitchBend
 591:main.c        ****                     previousPitchBendsSent = (int)pitchBendsPerString[whichLinearSensor];
 1696              		.loc 1 591 0
 1697 0616 7D4B     		ldr	r3, .L117
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 42


 1698 0618 1B68     		ldr	r3, [r3]
 1699 061a 824A     		ldr	r2, .L117+24
 1700 061c 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 1701 0620 1846     		mov	r0, r3
 1702 0622 FFF7FEFF 		bl	__aeabi_f2iz
 1703 0626 0246     		mov	r2, r0
 1704 0628 814B     		ldr	r3, .L117+36
 1705 062a 1A60     		str	r2, [r3]
 1706              	.L70:
 592:main.c        ****                 }
 593:main.c        ****             }
 594:main.c        ****         }
 595:main.c        ****         
 596:main.c        ****         //read knobs, joystick, and cv pedal
 597:main.c        ****         if (ADC_SAR_Seq_1_IsEndConversion(ADC_SAR_Seq_1_RETURN_STATUS))
 1707              		.loc 1 597 0
 1708 062c 0120     		movs	r0, #1
 1709 062e FFF7FEFF 		bl	ADC_SAR_Seq_1_IsEndConversion
 1710 0632 0346     		mov	r3, r0
 1711 0634 002B     		cmp	r3, #0
 1712 0636 00F0B080 		beq	.L111
 1713              	.LBB4:
 598:main.c        ****         {
 599:main.c        ****             for (int i = 0; i < 5; i++)
 1714              		.loc 1 599 0
 1715 063a 0023     		movs	r3, #0
 1716 063c 3B61     		str	r3, [r7, #16]
 1717 063e A1E0     		b	.L72
 1718              	.L79:
 600:main.c        ****             {
 601:main.c        ****                 knobsFIR[i][firPointer] = ADC_SAR_Seq_1_GetResult16(i);
 1719              		.loc 1 601 0
 1720 0640 7C4B     		ldr	r3, .L117+40
 1721 0642 1C68     		ldr	r4, [r3]
 1722 0644 3B69     		ldr	r3, [r7, #16]
 1723 0646 9BB2     		uxth	r3, r3
 1724 0648 1846     		mov	r0, r3
 1725 064a FFF7FEFF 		bl	ADC_SAR_Seq_1_GetResult16
 1726 064e 0346     		mov	r3, r0
 1727 0650 1946     		mov	r1, r3
 1728 0652 794A     		ldr	r2, .L117+44
 1729 0654 3B69     		ldr	r3, [r7, #16]
 1730 0656 DB00     		lsls	r3, r3, #3
 1731 0658 2344     		add	r3, r3, r4
 1732 065a 42F82310 		str	r1, [r2, r3, lsl #2]
 602:main.c        ****                 knobs[i] = 0;
 1733              		.loc 1 602 0
 1734 065e 774A     		ldr	r2, .L117+48
 1735 0660 3B69     		ldr	r3, [r7, #16]
 1736 0662 0021     		movs	r1, #0
 1737 0664 42F82310 		str	r1, [r2, r3, lsl #2]
 1738              	.LBB5:
 603:main.c        ****                 for (int j = 0; j < KNOB_FIR_SIZE; j++)
 1739              		.loc 1 603 0
 1740 0668 0023     		movs	r3, #0
 1741 066a FB60     		str	r3, [r7, #12]
 1742 066c 12E0     		b	.L73
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 43


 1743              	.L74:
 604:main.c        ****                 {
 605:main.c        ****                     knobs[i] += knobsFIR[i][j];
 1744              		.loc 1 605 0 discriminator 3
 1745 066e 734A     		ldr	r2, .L117+48
 1746 0670 3B69     		ldr	r3, [r7, #16]
 1747 0672 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1748 0676 7048     		ldr	r0, .L117+44
 1749 0678 3B69     		ldr	r3, [r7, #16]
 1750 067a D900     		lsls	r1, r3, #3
 1751 067c FB68     		ldr	r3, [r7, #12]
 1752 067e 0B44     		add	r3, r3, r1
 1753 0680 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1754 0684 1A44     		add	r2, r2, r3
 1755 0686 6D49     		ldr	r1, .L117+48
 1756 0688 3B69     		ldr	r3, [r7, #16]
 1757 068a 41F82320 		str	r2, [r1, r3, lsl #2]
 603:main.c        ****                 for (int j = 0; j < KNOB_FIR_SIZE; j++)
 1758              		.loc 1 603 0 discriminator 3
 1759 068e FB68     		ldr	r3, [r7, #12]
 1760 0690 0133     		adds	r3, r3, #1
 1761 0692 FB60     		str	r3, [r7, #12]
 1762              	.L73:
 603:main.c        ****                 for (int j = 0; j < KNOB_FIR_SIZE; j++)
 1763              		.loc 1 603 0 is_stmt 0 discriminator 1
 1764 0694 FB68     		ldr	r3, [r7, #12]
 1765 0696 072B     		cmp	r3, #7
 1766 0698 E9DD     		ble	.L74
 1767              	.LBE5:
 606:main.c        ****                 }             
 607:main.c        ****                 knobs[i] = knobs[i] >> KNOB_FIR_SIZE_BITSHIFT;
 1768              		.loc 1 607 0 is_stmt 1
 1769 069a 684A     		ldr	r2, .L117+48
 1770 069c 3B69     		ldr	r3, [r7, #16]
 1771 069e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1772 06a2 DA08     		lsrs	r2, r3, #3
 1773 06a4 6549     		ldr	r1, .L117+48
 1774 06a6 3B69     		ldr	r3, [r7, #16]
 1775 06a8 41F82320 		str	r2, [r1, r3, lsl #2]
 608:main.c        ****                 
 609:main.c        ****                 //now squish down to 7 bit with hysteresis
 610:main.c        ****                 
 611:main.c        ****                 if ((knobs[i] > (knobs7bitPrevLS[i] + knobs7bitHysteresis)) || (knobs[i] < (knobs7b
 1776              		.loc 1 611 0
 1777 06ac 634A     		ldr	r2, .L117+48
 1778 06ae 3B69     		ldr	r3, [r7, #16]
 1779 06b0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1780 06b4 6249     		ldr	r1, .L117+52
 1781 06b6 3A69     		ldr	r2, [r7, #16]
 1782 06b8 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1783 06bc 1146     		mov	r1, r2
 1784 06be 614A     		ldr	r2, .L117+56
 1785 06c0 1288     		ldrh	r2, [r2]
 1786 06c2 0A44     		add	r2, r2, r1
 1787 06c4 9342     		cmp	r3, r2
 1788 06c6 0DD8     		bhi	.L75
 1789              		.loc 1 611 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 44


 1790 06c8 5C4A     		ldr	r2, .L117+48
 1791 06ca 3B69     		ldr	r3, [r7, #16]
 1792 06cc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1793 06d0 5B49     		ldr	r1, .L117+52
 1794 06d2 3A69     		ldr	r2, [r7, #16]
 1795 06d4 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1796 06d8 1146     		mov	r1, r2
 1797 06da 5A4A     		ldr	r2, .L117+56
 1798 06dc 1288     		ldrh	r2, [r2]
 1799 06de 8A1A     		subs	r2, r1, r2
 1800 06e0 9342     		cmp	r3, r2
 1801 06e2 0AD2     		bcs	.L76
 1802              	.L75:
 612:main.c        ****                 {
 613:main.c        ****                     knobs7bit[i] = knobs[i] >> 5;
 1803              		.loc 1 613 0 is_stmt 1
 1804 06e4 554A     		ldr	r2, .L117+48
 1805 06e6 3B69     		ldr	r3, [r7, #16]
 1806 06e8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1807 06ec 5B09     		lsrs	r3, r3, #5
 1808 06ee D9B2     		uxtb	r1, r3
 1809 06f0 554A     		ldr	r2, .L117+60
 1810 06f2 3B69     		ldr	r3, [r7, #16]
 1811 06f4 1344     		add	r3, r3, r2
 1812 06f6 0A46     		mov	r2, r1
 1813 06f8 1A70     		strb	r2, [r3]
 1814              	.L76:
 614:main.c        ****                 }
 615:main.c        ****                 if (knobs7bit[i] != knobs7bitPrev[i])
 1815              		.loc 1 615 0
 1816 06fa 534A     		ldr	r2, .L117+60
 1817 06fc 3B69     		ldr	r3, [r7, #16]
 1818 06fe 1344     		add	r3, r3, r2
 1819 0700 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1820 0702 9AB2     		uxth	r2, r3
 1821 0704 5149     		ldr	r1, .L117+64
 1822 0706 3B69     		ldr	r3, [r7, #16]
 1823 0708 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 1824 070c 9A42     		cmp	r2, r3
 1825 070e 22D0     		beq	.L77
 616:main.c        ****                 {
 617:main.c        ****                     if (i < 4)
 1826              		.loc 1 617 0
 1827 0710 3B69     		ldr	r3, [r7, #16]
 1828 0712 032B     		cmp	r3, #3
 1829 0714 0CDC     		bgt	.L78
 618:main.c        ****                     {
 619:main.c        ****                         sendMIDIControlChange(17 + i , 127-knobs7bit[i], 0);
 1830              		.loc 1 619 0
 1831 0716 3B69     		ldr	r3, [r7, #16]
 1832 0718 03F11100 		add	r0, r3, #17
 1833 071c 4A4A     		ldr	r2, .L117+60
 1834 071e 3B69     		ldr	r3, [r7, #16]
 1835 0720 1344     		add	r3, r3, r2
 1836 0722 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1837 0724 C3F17F03 		rsb	r3, r3, #127
 1838 0728 0022     		movs	r2, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 45


 1839 072a 1946     		mov	r1, r3
 1840 072c FFF7FEFF 		bl	sendMIDIControlChange
 1841              	.L78:
 620:main.c        ****                     }
 621:main.c        ****                     if ((i == 4) && (CV_pedal_sense_Read()))
 1842              		.loc 1 621 0
 1843 0730 3B69     		ldr	r3, [r7, #16]
 1844 0732 042B     		cmp	r3, #4
 1845 0734 0FD1     		bne	.L77
 1846              		.loc 1 621 0 is_stmt 0 discriminator 1
 1847 0736 FFF7FEFF 		bl	CV_pedal_sense_Read
 1848 073a 0346     		mov	r3, r0
 1849 073c 002B     		cmp	r3, #0
 1850 073e 0AD0     		beq	.L77
 622:main.c        ****                     {
 623:main.c        ****                         sendMIDIControlChange(17 + i , knobs7bit[i], 0);
 1851              		.loc 1 623 0 is_stmt 1
 1852 0740 3B69     		ldr	r3, [r7, #16]
 1853 0742 03F11100 		add	r0, r3, #17
 1854 0746 404A     		ldr	r2, .L117+60
 1855 0748 3B69     		ldr	r3, [r7, #16]
 1856 074a 1344     		add	r3, r3, r2
 1857 074c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1858 074e 0022     		movs	r2, #0
 1859 0750 1946     		mov	r1, r3
 1860 0752 FFF7FEFF 		bl	sendMIDIControlChange
 1861              	.L77:
 624:main.c        ****                         //sendMIDIControlChange(19 + i+1 , 0, 0);
 625:main.c        ****                     }
 626:main.c        ****                 }
 627:main.c        ****                 knobs7bitPrev[i] = knobs7bit[i];
 1862              		.loc 1 627 0 discriminator 2
 1863 0756 3C4A     		ldr	r2, .L117+60
 1864 0758 3B69     		ldr	r3, [r7, #16]
 1865 075a 1344     		add	r3, r3, r2
 1866 075c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1867 075e 99B2     		uxth	r1, r3
 1868 0760 3A4A     		ldr	r2, .L117+64
 1869 0762 3B69     		ldr	r3, [r7, #16]
 1870 0764 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 628:main.c        ****                 knobs7bitPrevLS[i] = knobs7bit[i] << 5;
 1871              		.loc 1 628 0 discriminator 2
 1872 0768 374A     		ldr	r2, .L117+60
 1873 076a 3B69     		ldr	r3, [r7, #16]
 1874 076c 1344     		add	r3, r3, r2
 1875 076e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1876 0770 9BB2     		uxth	r3, r3
 1877 0772 5B01     		lsls	r3, r3, #5
 1878 0774 99B2     		uxth	r1, r3
 1879 0776 324A     		ldr	r2, .L117+52
 1880 0778 3B69     		ldr	r3, [r7, #16]
 1881 077a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 599:main.c        ****             {
 1882              		.loc 1 599 0 discriminator 2
 1883 077e 3B69     		ldr	r3, [r7, #16]
 1884 0780 0133     		adds	r3, r3, #1
 1885 0782 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 46


 1886              	.L72:
 599:main.c        ****             {
 1887              		.loc 1 599 0 is_stmt 0 discriminator 1
 1888 0784 3B69     		ldr	r3, [r7, #16]
 1889 0786 042B     		cmp	r3, #4
 1890 0788 7FF75AAF 		ble	.L79
 1891              	.LBE4:
 629:main.c        ****             }
 630:main.c        ****             firPointer = (firPointer + 1) & KNOB_FIR_SIZE_MASK;
 1892              		.loc 1 630 0 is_stmt 1
 1893 078c 294B     		ldr	r3, .L117+40
 1894 078e 1B68     		ldr	r3, [r3]
 1895 0790 0133     		adds	r3, r3, #1
 1896 0792 03F00703 		and	r3, r3, #7
 1897 0796 274A     		ldr	r2, .L117+40
 1898 0798 1360     		str	r3, [r2]
 1899              	.L111:
 631:main.c        ****         }
 632:main.c        ****         
 633:main.c        ****         //make sure previous SPI1 transmission has completed before checking the received SPI data
 634:main.c        ****         while (0u == ((SPIM_1_ReadTxStatus() & SPIM_1_STS_SPI_DONE) || (SPIM_1_ReadTxStatus() & SPI
 1900              		.loc 1 634 0
 1901 079a 00BF     		nop
 1902              	.L83:
 1903              		.loc 1 634 0 is_stmt 0 discriminator 7
 1904 079c FFF7FEFF 		bl	SPIM_1_ReadTxStatus
 1905 07a0 0346     		mov	r3, r0
 1906 07a2 03F00103 		and	r3, r3, #1
 1907 07a6 002B     		cmp	r3, #0
 1908 07a8 06D1     		bne	.L80
 1909              		.loc 1 634 0 discriminator 2
 1910 07aa FFF7FEFF 		bl	SPIM_1_ReadTxStatus
 1911 07ae 0346     		mov	r3, r0
 1912 07b0 03F01003 		and	r3, r3, #16
 1913 07b4 002B     		cmp	r3, #0
 1914 07b6 01D0     		beq	.L81
 1915              	.L80:
 1916              		.loc 1 634 0 discriminator 3
 1917 07b8 0123     		movs	r3, #1
 1918 07ba 00E0     		b	.L82
 1919              	.L81:
 1920              		.loc 1 634 0 discriminator 4
 1921 07bc 0023     		movs	r3, #0
 1922              	.L82:
 1923              		.loc 1 634 0 discriminator 6
 1924 07be 002B     		cmp	r3, #0
 1925 07c0 ECD0     		beq	.L83
 1926              	.LBB6:
 635:main.c        ****         {
 636:main.c        ****             ;
 637:main.c        ****         }
 638:main.c        **** 
 639:main.c        ****         //handle string plucks/noteoffs
 640:main.c        ****         for (int i = 0; i < 4; i++)
 1927              		.loc 1 640 0 is_stmt 1
 1928 07c2 0023     		movs	r3, #0
 1929 07c4 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 47


 1930 07c6 DEE0     		b	.L84
 1931              	.L92:
 641:main.c        ****         {
 642:main.c        ****             if (((CapSense_sensorOnMask[0] >> (i + 4)) & 1) &&  (linearPotValue32Bit[i] == 65535))
 1932              		.loc 1 642 0
 1933 07c8 214B     		ldr	r3, .L117+68
 1934 07ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1935 07cc 1A46     		mov	r2, r3
 1936 07ce BB68     		ldr	r3, [r7, #8]
 1937 07d0 0433     		adds	r3, r3, #4
 1938 07d2 42FA03F3 		asr	r3, r2, r3
 1939 07d6 03F00103 		and	r3, r3, #1
 1940 07da 002B     		cmp	r3, #0
 1941 07dc 40D0     		beq	.L85
 1942              		.loc 1 642 0 is_stmt 0 discriminator 1
 1943 07de 1D4A     		ldr	r2, .L117+72
 1944 07e0 BB68     		ldr	r3, [r7, #8]
 1945 07e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1946 07e6 4FF6FF72 		movw	r2, #65535
 1947 07ea 9342     		cmp	r3, r2
 1948 07ec 38D1     		bne	.L85
 643:main.c        ****             {
 644:main.c        ****                LHMute[i] = 1; 
 1949              		.loc 1 644 0 is_stmt 1
 1950 07ee 1A4A     		ldr	r2, .L117+76
 1951 07f0 BB68     		ldr	r3, [r7, #8]
 1952 07f2 1344     		add	r3, r3, r2
 1953 07f4 0122     		movs	r2, #1
 1954 07f6 1A70     		strb	r2, [r3]
 645:main.c        ****                LHMuteCounter[i]++;
 1955              		.loc 1 645 0
 1956 07f8 184A     		ldr	r2, .L117+80
 1957 07fa BB68     		ldr	r3, [r7, #8]
 1958 07fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1959 0800 5A1C     		adds	r2, r3, #1
 1960 0802 1649     		ldr	r1, .L117+80
 1961 0804 BB68     		ldr	r3, [r7, #8]
 1962 0806 41F82320 		str	r2, [r1, r3, lsl #2]
 1963 080a 33E0     		b	.L86
 1964              	.L118:
 1965              		.align	2
 1966              	.L117:
 1967 080c 00000000 		.word	whichLinearSensor
 1968 0810 00000000 		.word	stringMIDIPrev
 1969 0814 00000000 		.word	stringMIDI
 1970 0818 00000000 		.word	openStringMIDI
 1971 081c 0080AA43 		.word	1135247360
 1972 0820 00000000 		.word	openStringCount
 1973 0824 00000000 		.word	pitchBendsPerString
 1974 0828 00000000 		.word	polyMode
 1975 082c 00000000 		.word	stringStates
 1976 0830 00000000 		.word	previousPitchBendsSent
 1977 0834 00000000 		.word	firPointer
 1978 0838 00000000 		.word	knobsFIR
 1979 083c 00000000 		.word	knobs
 1980 0840 00000000 		.word	knobs7bitPrevLS
 1981 0844 00000000 		.word	knobs7bitHysteresis
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 48


 1982 0848 00000000 		.word	knobs7bit
 1983 084c 00000000 		.word	knobs7bitPrev
 1984 0850 00000000 		.word	CapSense_sensorOnMask
 1985 0854 00000000 		.word	linearPotValue32Bit
 1986 0858 00000000 		.word	LHMute
 1987 085c 00000000 		.word	LHMuteCounter
 1988              	.L85:
 646:main.c        ****             }
 647:main.c        ****             else
 648:main.c        ****             {
 649:main.c        ****                 LHMute[i] = 0;
 1989              		.loc 1 649 0
 1990 0860 A24A     		ldr	r2, .L119
 1991 0862 BB68     		ldr	r3, [r7, #8]
 1992 0864 1344     		add	r3, r3, r2
 1993 0866 0022     		movs	r2, #0
 1994 0868 1A70     		strb	r2, [r3]
 650:main.c        ****                 LHMuteCounter[i] = 0;
 1995              		.loc 1 650 0
 1996 086a A14A     		ldr	r2, .L119+4
 1997 086c BB68     		ldr	r3, [r7, #8]
 1998 086e 0021     		movs	r1, #0
 1999 0870 42F82310 		str	r1, [r2, r3, lsl #2]
 2000              	.L86:
 651:main.c        ****             }
 652:main.c        ****             //left hand mute just began
 653:main.c        ****             //freeze pitch bend at value from 12 sends ago (to avoid dip before mute due to sensor 
 654:main.c        ****             if ((LHMute[i]) && (stringStates[i][0])>=0)
 2001              		.loc 1 654 0
 2002 0874 9D4A     		ldr	r2, .L119
 2003 0876 BB68     		ldr	r3, [r7, #8]
 2004 0878 1344     		add	r3, r3, r2
 2005 087a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2006 087c 002B     		cmp	r3, #0
 2007 087e 0BD0     		beq	.L87
 2008              		.loc 1 654 0 is_stmt 0 discriminator 1
 2009 0880 9C4A     		ldr	r2, .L119+8
 2010 0882 BB68     		ldr	r3, [r7, #8]
 2011 0884 52F83330 		ldr	r3, [r2, r3, lsl #3]
 2012 0888 002B     		cmp	r3, #0
 2013 088a 05DB     		blt	.L87
 655:main.c        ****             {
 656:main.c        ****                 pitchFreeze[i] = 1;
 2014              		.loc 1 656 0 is_stmt 1
 2015 088c 9A4A     		ldr	r2, .L119+12
 2016 088e BB68     		ldr	r3, [r7, #8]
 2017 0890 1344     		add	r3, r3, r2
 2018 0892 0122     		movs	r2, #1
 2019 0894 1A70     		strb	r2, [r3]
 2020 0896 04E0     		b	.L88
 2021              	.L87:
 657:main.c        ****             }
 658:main.c        ****             else
 659:main.c        ****             {
 660:main.c        ****                  pitchFreeze[i] = 0;
 2022              		.loc 1 660 0
 2023 0898 974A     		ldr	r2, .L119+12
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 49


 2024 089a BB68     		ldr	r3, [r7, #8]
 2025 089c 1344     		add	r3, r3, r2
 2026 089e 0022     		movs	r2, #0
 2027 08a0 1A70     		strb	r2, [r3]
 2028              	.L88:
 661:main.c        ****             }
 662:main.c        ****             //left hand mute has counted to max time
 663:main.c        ****             //send note off
 664:main.c        ****             if ((LHMuteCounter[i] > 128) && (stringStates[i][0] >= 0))
 2029              		.loc 1 664 0
 2030 08a2 934A     		ldr	r2, .L119+4
 2031 08a4 BB68     		ldr	r3, [r7, #8]
 2032 08a6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2033 08aa 802B     		cmp	r3, #128
 2034 08ac 0ED9     		bls	.L89
 2035              		.loc 1 664 0 is_stmt 0 discriminator 1
 2036 08ae 914A     		ldr	r2, .L119+8
 2037 08b0 BB68     		ldr	r3, [r7, #8]
 2038 08b2 52F83330 		ldr	r3, [r2, r3, lsl #3]
 2039 08b6 002B     		cmp	r3, #0
 2040 08b8 08DB     		blt	.L89
 665:main.c        ****             {
 666:main.c        ****                  handleNotes(lastNotes[i], 0, i);
 2041              		.loc 1 666 0 is_stmt 1
 2042 08ba 904A     		ldr	r2, .L119+16
 2043 08bc BB68     		ldr	r3, [r7, #8]
 2044 08be 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2045 08c2 BA68     		ldr	r2, [r7, #8]
 2046 08c4 0021     		movs	r1, #0
 2047 08c6 1846     		mov	r0, r3
 2048 08c8 FFF7FEFF 		bl	handleNotes
 2049              	.L89:
 667:main.c        ****             }
 668:main.c        ****             
 669:main.c        ****             stringPlucks[i] = (rxBuffer[i*2] << 8) + rxBuffer[i*2+1];
 2050              		.loc 1 669 0
 2051 08cc BB68     		ldr	r3, [r7, #8]
 2052 08ce 5B00     		lsls	r3, r3, #1
 2053 08d0 8B4A     		ldr	r2, .L119+20
 2054 08d2 D35C     		ldrb	r3, [r2, r3]
 2055 08d4 DBB2     		uxtb	r3, r3
 2056 08d6 1B02     		lsls	r3, r3, #8
 2057 08d8 BA68     		ldr	r2, [r7, #8]
 2058 08da 5200     		lsls	r2, r2, #1
 2059 08dc 0132     		adds	r2, r2, #1
 2060 08de 8849     		ldr	r1, .L119+20
 2061 08e0 8A5C     		ldrb	r2, [r1, r2]
 2062 08e2 D2B2     		uxtb	r2, r2
 2063 08e4 1A44     		add	r2, r2, r3
 2064 08e6 8749     		ldr	r1, .L119+24
 2065 08e8 BB68     		ldr	r3, [r7, #8]
 2066 08ea 41F82320 		str	r2, [r1, r3, lsl #2]
 670:main.c        ****             
 671:main.c        ****             //note-on from pluck sensor
 672:main.c        ****             if ((stringPlucks[i] > 0) && (stringPlucksPrev[i] == 0))
 2067              		.loc 1 672 0
 2068 08ee 854A     		ldr	r2, .L119+24
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 50


 2069 08f0 BB68     		ldr	r3, [r7, #8]
 2070 08f2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2071 08f6 002B     		cmp	r3, #0
 2072 08f8 25DD     		ble	.L90
 2073              		.loc 1 672 0 is_stmt 0 discriminator 1
 2074 08fa 834A     		ldr	r2, .L119+28
 2075 08fc BB68     		ldr	r3, [r7, #8]
 2076 08fe 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2077 0902 002B     		cmp	r3, #0
 2078 0904 1FD1     		bne	.L90
 673:main.c        ****             {
 674:main.c        ****                 lastNotes[i] = (int)openStringMIDI[i] + (octave * 12);
 2079              		.loc 1 674 0 is_stmt 1
 2080 0906 814A     		ldr	r2, .L119+32
 2081 0908 BB68     		ldr	r3, [r7, #8]
 2082 090a 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2083 090e 1846     		mov	r0, r3
 2084 0910 FFF7FEFF 		bl	__aeabi_f2iz
 2085 0914 0146     		mov	r1, r0
 2086 0916 7E4B     		ldr	r3, .L119+36
 2087 0918 1A68     		ldr	r2, [r3]
 2088 091a 1346     		mov	r3, r2
 2089 091c 5B00     		lsls	r3, r3, #1
 2090 091e 1344     		add	r3, r3, r2
 2091 0920 9B00     		lsls	r3, r3, #2
 2092 0922 CA18     		adds	r2, r1, r3
 2093 0924 7549     		ldr	r1, .L119+16
 2094 0926 BB68     		ldr	r3, [r7, #8]
 2095 0928 41F82320 		str	r2, [r1, r3, lsl #2]
 675:main.c        ****                 handleNotes(lastNotes[i], stringPlucks[i], i);
 2096              		.loc 1 675 0
 2097 092c 734A     		ldr	r2, .L119+16
 2098 092e BB68     		ldr	r3, [r7, #8]
 2099 0930 52F82300 		ldr	r0, [r2, r3, lsl #2]
 2100 0934 734A     		ldr	r2, .L119+24
 2101 0936 BB68     		ldr	r3, [r7, #8]
 2102 0938 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2103 093c BA68     		ldr	r2, [r7, #8]
 2104 093e 1946     		mov	r1, r3
 2105 0940 FFF7FEFF 		bl	handleNotes
 2106 0944 14E0     		b	.L91
 2107              	.L90:
 676:main.c        ****             }
 677:main.c        ****             //note-off from pluck sensor (RH Mute)
 678:main.c        ****             else if ((stringPlucks[i] == 0) && (stringPlucksPrev[i] > 0))
 2108              		.loc 1 678 0
 2109 0946 6F4A     		ldr	r2, .L119+24
 2110 0948 BB68     		ldr	r3, [r7, #8]
 2111 094a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2112 094e 002B     		cmp	r3, #0
 2113 0950 0ED1     		bne	.L91
 2114              		.loc 1 678 0 is_stmt 0 discriminator 1
 2115 0952 6D4A     		ldr	r2, .L119+28
 2116 0954 BB68     		ldr	r3, [r7, #8]
 2117 0956 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2118 095a 002B     		cmp	r3, #0
 2119 095c 08DD     		ble	.L91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 51


 679:main.c        ****             {
 680:main.c        ****                 handleNotes(lastNotes[i], 0, i);
 2120              		.loc 1 680 0 is_stmt 1
 2121 095e 674A     		ldr	r2, .L119+16
 2122 0960 BB68     		ldr	r3, [r7, #8]
 2123 0962 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2124 0966 BA68     		ldr	r2, [r7, #8]
 2125 0968 0021     		movs	r1, #0
 2126 096a 1846     		mov	r0, r3
 2127 096c FFF7FEFF 		bl	handleNotes
 2128              	.L91:
 681:main.c        ****             }
 682:main.c        ****             
 683:main.c        **** 
 684:main.c        ****             stringPlucksPrev[i] = stringPlucks[i];
 2129              		.loc 1 684 0 discriminator 2
 2130 0970 644A     		ldr	r2, .L119+24
 2131 0972 BB68     		ldr	r3, [r7, #8]
 2132 0974 52F82320 		ldr	r2, [r2, r3, lsl #2]
 2133 0978 6349     		ldr	r1, .L119+28
 2134 097a BB68     		ldr	r3, [r7, #8]
 2135 097c 41F82320 		str	r2, [r1, r3, lsl #2]
 640:main.c        ****         {
 2136              		.loc 1 640 0 discriminator 2
 2137 0980 BB68     		ldr	r3, [r7, #8]
 2138 0982 0133     		adds	r3, r3, #1
 2139 0984 BB60     		str	r3, [r7, #8]
 2140              	.L84:
 640:main.c        ****         {
 2141              		.loc 1 640 0 is_stmt 0 discriminator 1
 2142 0986 BB68     		ldr	r3, [r7, #8]
 2143 0988 032B     		cmp	r3, #3
 2144 098a 7FF71DAF 		ble	.L92
 2145              	.LBE6:
 685:main.c        ****             
 686:main.c        ****         }
 687:main.c        ****         //make sure previous SPI2 transmission has completed before transferring the remaining midi
 688:main.c        ****         while (0u == ((SPIM_2_ReadTxStatus() & SPIM_2_STS_SPI_DONE) || (SPIM_2_ReadTxStatus() & SPI
 2146              		.loc 1 688 0 is_stmt 1
 2147 098e 00BF     		nop
 2148              	.L96:
 2149              		.loc 1 688 0 is_stmt 0 discriminator 7
 2150 0990 FFF7FEFF 		bl	SPIM_2_ReadTxStatus
 2151 0994 0346     		mov	r3, r0
 2152 0996 03F00103 		and	r3, r3, #1
 2153 099a 002B     		cmp	r3, #0
 2154 099c 06D1     		bne	.L93
 2155              		.loc 1 688 0 discriminator 2
 2156 099e FFF7FEFF 		bl	SPIM_2_ReadTxStatus
 2157 09a2 0346     		mov	r3, r0
 2158 09a4 03F01003 		and	r3, r3, #16
 2159 09a8 002B     		cmp	r3, #0
 2160 09aa 01D0     		beq	.L94
 2161              	.L93:
 2162              		.loc 1 688 0 discriminator 3
 2163 09ac 0123     		movs	r3, #1
 2164 09ae 00E0     		b	.L95
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 52


 2165              	.L94:
 2166              		.loc 1 688 0 discriminator 4
 2167 09b0 0023     		movs	r3, #0
 2168              	.L95:
 2169              		.loc 1 688 0 discriminator 6
 2170 09b2 002B     		cmp	r3, #0
 2171 09b4 ECD0     		beq	.L96
 2172              	.LBB7:
 689:main.c        ****         {
 690:main.c        ****             ;
 691:main.c        ****         }
 692:main.c        ****         //send midi data to internal synth
 693:main.c        ****         //copy the temp buffer into the send buffer now that we are done filling it and sending the
 694:main.c        ****         for (uint i = 0 ; i < BUFFER_2_SIZE; i++)
 2173              		.loc 1 694 0 is_stmt 1
 2174 09b6 0023     		movs	r3, #0
 2175 09b8 7B60     		str	r3, [r7, #4]
 2176 09ba 11E0     		b	.L97
 2177              	.L98:
 695:main.c        ****         {
 696:main.c        ****             tx2Buffer[i] = tx2BufferTemp[i];
 2178              		.loc 1 696 0 discriminator 3
 2179 09bc 554A     		ldr	r2, .L119+40
 2180 09be 7B68     		ldr	r3, [r7, #4]
 2181 09c0 1344     		add	r3, r3, r2
 2182 09c2 1B78     		ldrb	r3, [r3]
 2183 09c4 D9B2     		uxtb	r1, r3
 2184 09c6 544A     		ldr	r2, .L119+44
 2185 09c8 7B68     		ldr	r3, [r7, #4]
 2186 09ca 1344     		add	r3, r3, r2
 2187 09cc 0A46     		mov	r2, r1
 2188 09ce 1A70     		strb	r2, [r3]
 697:main.c        ****             tx2BufferTemp[i] = 0;
 2189              		.loc 1 697 0 discriminator 3
 2190 09d0 504A     		ldr	r2, .L119+40
 2191 09d2 7B68     		ldr	r3, [r7, #4]
 2192 09d4 1344     		add	r3, r3, r2
 2193 09d6 0022     		movs	r2, #0
 2194 09d8 1A70     		strb	r2, [r3]
 694:main.c        ****         {
 2195              		.loc 1 694 0 discriminator 3
 2196 09da 7B68     		ldr	r3, [r7, #4]
 2197 09dc 0133     		adds	r3, r3, #1
 2198 09de 7B60     		str	r3, [r7, #4]
 2199              	.L97:
 694:main.c        ****         {
 2200              		.loc 1 694 0 is_stmt 0 discriminator 1
 2201 09e0 7B68     		ldr	r3, [r7, #4]
 2202 09e2 0F2B     		cmp	r3, #15
 2203 09e4 EAD9     		bls	.L98
 2204              	.LBE7:
 698:main.c        ****         }
 699:main.c        ****         if (outChanged)
 2205              		.loc 1 699 0 is_stmt 1
 2206 09e6 4D4B     		ldr	r3, .L119+48
 2207 09e8 1B68     		ldr	r3, [r3]
 2208 09ea 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 53


 2209 09ec 03D0     		beq	.L99
 700:main.c        ****         {
 701:main.c        ****             tx2Buffer[0] = 1;
 2210              		.loc 1 701 0
 2211 09ee 4A4B     		ldr	r3, .L119+44
 2212 09f0 0122     		movs	r2, #1
 2213 09f2 1A70     		strb	r2, [r3]
 2214 09f4 02E0     		b	.L100
 2215              	.L99:
 702:main.c        ****         }
 703:main.c        ****         else
 704:main.c        ****         {
 705:main.c        ****             tx2Buffer[0] = 0;
 2216              		.loc 1 705 0
 2217 09f6 484B     		ldr	r3, .L119+44
 2218 09f8 0022     		movs	r2, #0
 2219 09fa 1A70     		strb	r2, [r3]
 2220              	.L100:
 706:main.c        ****         }
 707:main.c        ****         outChanged = 0;
 2221              		.loc 1 707 0
 2222 09fc 474B     		ldr	r3, .L119+48
 2223 09fe 0022     		movs	r2, #0
 2224 0a00 1A60     		str	r2, [r3]
 708:main.c        ****         if (currentOutPointer > BUFFER_2_SIZE)
 2225              		.loc 1 708 0
 2226 0a02 474B     		ldr	r3, .L119+52
 2227 0a04 1B68     		ldr	r3, [r3]
 2228 0a06 102B     		cmp	r3, #16
 2229 0a08 02D9     		bls	.L101
 709:main.c        ****         {
 710:main.c        ****             LED1_Write(1);
 2230              		.loc 1 710 0
 2231 0a0a 0120     		movs	r0, #1
 2232 0a0c FFF7FEFF 		bl	LED1_Write
 2233              	.L101:
 711:main.c        ****             //overflow
 712:main.c        ****         }
 713:main.c        ****         currentOutPointer = 1;
 2234              		.loc 1 713 0
 2235 0a10 434B     		ldr	r3, .L119+52
 2236 0a12 0122     		movs	r2, #1
 2237 0a14 1A60     		str	r2, [r3]
 714:main.c        ****         CyDmaChEnable(rx2Channel, STORE_TD_CFG_ONCMPLT);
 2238              		.loc 1 714 0
 2239 0a16 434B     		ldr	r3, .L119+56
 2240 0a18 1B78     		ldrb	r3, [r3]
 2241 0a1a DBB2     		uxtb	r3, r3
 2242 0a1c 0121     		movs	r1, #1
 2243 0a1e 1846     		mov	r0, r3
 2244 0a20 FFF7FEFF 		bl	CyDmaChEnable
 715:main.c        ****         CyDmaChEnable(tx2Channel, STORE_TD_CFG_ONCMPLT);
 2245              		.loc 1 715 0
 2246 0a24 404B     		ldr	r3, .L119+60
 2247 0a26 1B78     		ldrb	r3, [r3]
 2248 0a28 DBB2     		uxtb	r3, r3
 2249 0a2a 0121     		movs	r1, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 54


 2250 0a2c 1846     		mov	r0, r3
 2251 0a2e FFF7FEFF 		bl	CyDmaChEnable
 716:main.c        ****         
 717:main.c        ****         //check if USB device has just been plugged in
 718:main.c        ****         if (USB_check_flag)
 2252              		.loc 1 718 0
 2253 0a32 3E4B     		ldr	r3, .L119+64
 2254 0a34 1B78     		ldrb	r3, [r3]
 2255 0a36 DBB2     		uxtb	r3, r3
 2256 0a38 002B     		cmp	r3, #0
 2257 0a3a 01D0     		beq	.L102
 719:main.c        ****         {
 720:main.c        ****             checkUSB_Vbus();
 2258              		.loc 1 720 0
 2259 0a3c FFF7FEFF 		bl	checkUSB_Vbus
 2260              	.L102:
 721:main.c        ****         }
 722:main.c        ****         
 723:main.c        ****         //only service the USB bus if there is a computer plugged in
 724:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 2261              		.loc 1 724 0
 2262 0a40 3B4B     		ldr	r3, .L119+68
 2263 0a42 1B78     		ldrb	r3, [r3]
 2264 0a44 DBB2     		uxtb	r3, r3
 2265 0a46 002B     		cmp	r3, #0
 2266 0a48 13D0     		beq	.L112
 2267              		.loc 1 724 0 is_stmt 0 discriminator 1
 2268 0a4a FFF7FEFF 		bl	USB_VBusPresent
 2269 0a4e 0346     		mov	r3, r0
 2270 0a50 002B     		cmp	r3, #0
 2271 0a52 0ED0     		beq	.L112
 725:main.c        ****         {
 726:main.c        ****             if (midiSent > 64)
 2272              		.loc 1 726 0 is_stmt 1
 2273 0a54 374B     		ldr	r3, .L119+72
 2274 0a56 1B88     		ldrh	r3, [r3]
 2275 0a58 402B     		cmp	r3, #64
 2276 0a5a 05D9     		bls	.L104
 727:main.c        ****             {
 728:main.c        ****                 midiOverflow++;
 2277              		.loc 1 728 0
 2278 0a5c 364B     		ldr	r3, .L119+76
 2279 0a5e 1B88     		ldrh	r3, [r3]
 2280 0a60 0133     		adds	r3, r3, #1
 2281 0a62 9AB2     		uxth	r2, r3
 2282 0a64 344B     		ldr	r3, .L119+76
 2283 0a66 1A80     		strh	r2, [r3]	@ movhi
 2284              	.L104:
 729:main.c        ****             }
 730:main.c        ****             midiSent = 0;
 2285              		.loc 1 730 0
 2286 0a68 324B     		ldr	r3, .L119+72
 2287 0a6a 0022     		movs	r2, #0
 2288 0a6c 1A80     		strh	r2, [r3]	@ movhi
 731:main.c        ****             USB_service();
 2289              		.loc 1 731 0
 2290 0a6e FFF7FEFF 		bl	USB_service
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 55


 2291              	.L112:
 732:main.c        ****         }
 733:main.c        ****                
 734:main.c        **** 
 735:main.c        ****         while(CapSense_IsBusy() != 0)  
 2292              		.loc 1 735 0
 2293 0a72 00BF     		nop
 2294              	.L105:
 2295              		.loc 1 735 0 is_stmt 0 discriminator 1
 2296 0a74 FFF7FEFF 		bl	CapSense_IsBusy
 2297 0a78 0346     		mov	r3, r0
 2298 0a7a 002B     		cmp	r3, #0
 2299 0a7c FAD1     		bne	.L105
 736:main.c        ****         {
 737:main.c        ****             ;//wait until scan is complete
 738:main.c        ****         }  
 739:main.c        **** 
 740:main.c        ****         CapSense_CheckIsAnyWidgetActive();
 2300              		.loc 1 740 0 is_stmt 1
 2301 0a7e FFF7FEFF 		bl	CapSense_CheckIsAnyWidgetActive
 741:main.c        ****         
 742:main.c        ****         /*txBuffer[8] = 0;
 743:main.c        ****         for (int i = 0; i < 8; i++)
 744:main.c        ****         {
 745:main.c        ****            txBuffer[8] += (CapSense_sensorSignal[i] > 0) << i;
 746:main.c        ****         }
 747:main.c        ****         */
 748:main.c        ****         //SPIM_1_ClearTxBuffer();
 749:main.c        ****         //CyDelay(1);
 750:main.c        **** 
 751:main.c        ****         txBuffer[8] = CapSense_sensorOnMask[0];
 2302              		.loc 1 751 0
 2303 0a82 2E4B     		ldr	r3, .L119+80
 2304 0a84 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2305 0a86 2E4B     		ldr	r3, .L119+84
 2306 0a88 1A72     		strb	r2, [r3, #8]
 752:main.c        ****         txBuffer[whichLinearSensor*2] = ((uint16_t) linearPotValue32Bit[whichLinearSensor]) >> 8;
 2307              		.loc 1 752 0
 2308 0a8a 2E4B     		ldr	r3, .L119+88
 2309 0a8c 1B68     		ldr	r3, [r3]
 2310 0a8e 5B00     		lsls	r3, r3, #1
 2311 0a90 2C4A     		ldr	r2, .L119+88
 2312 0a92 1268     		ldr	r2, [r2]
 2313 0a94 2C49     		ldr	r1, .L119+92
 2314 0a96 51F82220 		ldr	r2, [r1, r2, lsl #2]
 2315 0a9a 92B2     		uxth	r2, r2
 2316 0a9c 1212     		asrs	r2, r2, #8
 2317 0a9e D1B2     		uxtb	r1, r2
 2318 0aa0 274A     		ldr	r2, .L119+84
 2319 0aa2 D154     		strb	r1, [r2, r3]
 753:main.c        ****         txBuffer[whichLinearSensor*2+1] = linearPotValue32Bit[whichLinearSensor] & 0xff;
 2320              		.loc 1 753 0
 2321 0aa4 274B     		ldr	r3, .L119+88
 2322 0aa6 1B68     		ldr	r3, [r3]
 2323 0aa8 5B00     		lsls	r3, r3, #1
 2324 0aaa 0133     		adds	r3, r3, #1
 2325 0aac 254A     		ldr	r2, .L119+88
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 56


 2326 0aae 1268     		ldr	r2, [r2]
 2327 0ab0 2549     		ldr	r1, .L119+92
 2328 0ab2 51F82220 		ldr	r2, [r1, r2, lsl #2]
 2329 0ab6 D1B2     		uxtb	r1, r2
 2330 0ab8 214A     		ldr	r2, .L119+84
 2331 0aba D154     		strb	r1, [r2, r3]
 754:main.c        ****         
 755:main.c        ****         txBuffer[15] = bufCount % 16;
 2332              		.loc 1 755 0
 2333 0abc 234B     		ldr	r3, .L119+96
 2334 0abe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2335 0ac0 03F00F03 		and	r3, r3, #15
 2336 0ac4 DAB2     		uxtb	r2, r3
 2337 0ac6 1E4B     		ldr	r3, .L119+84
 2338 0ac8 DA73     		strb	r2, [r3, #15]
 756:main.c        ****         bufCount++;
 2339              		.loc 1 756 0
 2340 0aca 204B     		ldr	r3, .L119+96
 2341 0acc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2342 0ace 0133     		adds	r3, r3, #1
 2343 0ad0 DAB2     		uxtb	r2, r3
 2344 0ad2 1E4B     		ldr	r3, .L119+96
 2345 0ad4 1A70     		strb	r2, [r3]
 757:main.c        ****         
 758:main.c        ****         if (txBuffer[8] & 1)
 2346              		.loc 1 758 0
 2347 0ad6 1A4B     		ldr	r3, .L119+84
 2348 0ad8 1B7A     		ldrb	r3, [r3, #8]
 2349 0ada DBB2     		uxtb	r3, r3
 2350 0adc 03F00103 		and	r3, r3, #1
 2351 0ae0 002B     		cmp	r3, #0
 2352 0ae2 35D0     		beq	.L106
 759:main.c        ****         {
 760:main.c        ****             blue_LED_Write(1);
 2353              		.loc 1 760 0
 2354 0ae4 0120     		movs	r0, #1
 2355 0ae6 FFF7FEFF 		bl	blue_LED_Write
 2356 0aea 34E0     		b	.L107
 2357              	.L120:
 2358              		.align	2
 2359              	.L119:
 2360 0aec 00000000 		.word	LHMute
 2361 0af0 00000000 		.word	LHMuteCounter
 2362 0af4 00000000 		.word	stringStates
 2363 0af8 00000000 		.word	pitchFreeze
 2364 0afc 00000000 		.word	lastNotes
 2365 0b00 00000000 		.word	rxBuffer
 2366 0b04 00000000 		.word	stringPlucks
 2367 0b08 00000000 		.word	stringPlucksPrev
 2368 0b0c 00000000 		.word	openStringMIDI
 2369 0b10 00000000 		.word	octave
 2370 0b14 00000000 		.word	tx2BufferTemp
 2371 0b18 00000000 		.word	tx2Buffer
 2372 0b1c 00000000 		.word	outChanged
 2373 0b20 00000000 		.word	currentOutPointer
 2374 0b24 00000000 		.word	rx2Channel
 2375 0b28 00000000 		.word	tx2Channel
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 57


 2376 0b2c 00000000 		.word	USB_check_flag
 2377 0b30 00000000 		.word	USB_active
 2378 0b34 00000000 		.word	midiSent
 2379 0b38 00000000 		.word	midiOverflow
 2380 0b3c 00000000 		.word	CapSense_sensorOnMask
 2381 0b40 00000000 		.word	txBuffer
 2382 0b44 00000000 		.word	whichLinearSensor
 2383 0b48 00000000 		.word	linearPotValue32Bit
 2384 0b4c 00000000 		.word	bufCount
 2385              	.L106:
 761:main.c        ****             
 762:main.c        ****         }
 763:main.c        ****         else
 764:main.c        ****         {
 765:main.c        ****             blue_LED_Write(0);
 2386              		.loc 1 765 0
 2387 0b50 0020     		movs	r0, #0
 2388 0b52 FFF7FEFF 		bl	blue_LED_Write
 2389              	.L107:
 766:main.c        ****            
 767:main.c        ****         }
 768:main.c        ****         SPIM_1_ClearRxBuffer();
 2390              		.loc 1 768 0
 2391 0b56 FFF7FEFF 		bl	SPIM_1_ClearRxBuffer
 769:main.c        ****         SPIM_2_ClearRxBuffer();
 2392              		.loc 1 769 0
 2393 0b5a FFF7FEFF 		bl	SPIM_2_ClearRxBuffer
 770:main.c        ****         //CyDelay(1);
 771:main.c        ****         //send SPI data
 772:main.c        ****         CyDmaChEnable(rxChannel, STORE_TD_CFG_ONCMPLT);
 2394              		.loc 1 772 0
 2395 0b5e 0C4B     		ldr	r3, .L121
 2396 0b60 1B78     		ldrb	r3, [r3]
 2397 0b62 DBB2     		uxtb	r3, r3
 2398 0b64 0121     		movs	r1, #1
 2399 0b66 1846     		mov	r0, r3
 2400 0b68 FFF7FEFF 		bl	CyDmaChEnable
 773:main.c        ****         CyDmaChEnable(txChannel, STORE_TD_CFG_ONCMPLT);
 2401              		.loc 1 773 0
 2402 0b6c 094B     		ldr	r3, .L121+4
 2403 0b6e 1B78     		ldrb	r3, [r3]
 2404 0b70 DBB2     		uxtb	r3, r3
 2405 0b72 0121     		movs	r1, #1
 2406 0b74 1846     		mov	r0, r3
 2407 0b76 FFF7FEFF 		bl	CyDmaChEnable
 774:main.c        ****         
 775:main.c        **** 
 776:main.c        ****        //CyDelay(1);
 777:main.c        **** 
 778:main.c        ****         
 779:main.c        ****         timeSinceLastAttack++;
 2408              		.loc 1 779 0
 2409 0b7a 074B     		ldr	r3, .L121+8
 2410 0b7c 18CB     		ldmia	r3, {r3-r4}
 2411 0b7e 0133     		adds	r3, r3, #1
 2412 0b80 44F10004 		adc	r4, r4, #0
 2413 0b84 044A     		ldr	r2, .L121+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 58


 2414 0b86 C2E90034 		strd	r3, [r2]
 780:main.c        ****      }
 2415              		.loc 1 780 0
 2416 0b8a FFF777BA 		b	.L108
 2417              	.L122:
 2418 0b8e 00BF     		.align	2
 2419              	.L121:
 2420 0b90 00000000 		.word	rxChannel
 2421 0b94 00000000 		.word	txChannel
 2422 0b98 00000000 		.word	timeSinceLastAttack
 2423              		.cfi_endproc
 2424              	.LFE73:
 2425              		.size	main, .-main
 2426              		.section	.text.checkUSB_Vbus,"ax",%progbits
 2427              		.align	2
 2428              		.global	checkUSB_Vbus
 2429              		.thumb
 2430              		.thumb_func
 2431              		.type	checkUSB_Vbus, %function
 2432              	checkUSB_Vbus:
 2433              	.LFB74:
 781:main.c        **** }
 782:main.c        **** 
 783:main.c        **** void checkUSB_Vbus(void)
 784:main.c        **** {
 2434              		.loc 1 784 0
 2435              		.cfi_startproc
 2436              		@ args = 0, pretend = 0, frame = 0
 2437              		@ frame_needed = 1, uses_anonymous_args = 0
 2438 0000 80B5     		push	{r7, lr}
 2439              		.cfi_def_cfa_offset 8
 2440              		.cfi_offset 7, -8
 2441              		.cfi_offset 14, -4
 2442 0002 00AF     		add	r7, sp, #0
 2443              		.cfi_def_cfa_register 7
 785:main.c        ****    if (USB_VBusPresent() == 0)
 2444              		.loc 1 785 0
 2445 0004 FFF7FEFF 		bl	USB_VBusPresent
 2446 0008 0346     		mov	r3, r0
 2447 000a 002B     		cmp	r3, #0
 2448 000c 05D1     		bne	.L124
 786:main.c        ****    {
 787:main.c        ****        USB_Stop();
 2449              		.loc 1 787 0
 2450 000e FFF7FEFF 		bl	USB_Stop
 788:main.c        ****        //LED_PWM_Write(0);
 789:main.c        ****        USB_active = 0; 
 2451              		.loc 1 789 0
 2452 0012 0E4B     		ldr	r3, .L127
 2453 0014 0022     		movs	r2, #0
 2454 0016 1A70     		strb	r2, [r3]
 2455 0018 13E0     		b	.L125
 2456              	.L124:
 790:main.c        ****         //CySoftwareReset();
 791:main.c        ****    }
 792:main.c        ****    else if (USB_active == 0 )
 2457              		.loc 1 792 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 59


 2458 001a 0C4B     		ldr	r3, .L127
 2459 001c 1B78     		ldrb	r3, [r3]
 2460 001e DBB2     		uxtb	r3, r3
 2461 0020 002B     		cmp	r3, #0
 2462 0022 0ED1     		bne	.L125
 793:main.c        ****    {
 794:main.c        ****        USB_Start(0u, USB_5V_OPERATION ); 
 2463              		.loc 1 794 0
 2464 0024 0121     		movs	r1, #1
 2465 0026 0020     		movs	r0, #0
 2466 0028 FFF7FEFF 		bl	USB_Start
 795:main.c        ****         while (0u == USB_GetConfiguration());
 2467              		.loc 1 795 0
 2468 002c 00BF     		nop
 2469              	.L126:
 2470              		.loc 1 795 0 is_stmt 0 discriminator 1
 2471 002e FFF7FEFF 		bl	USB_GetConfiguration
 2472 0032 0346     		mov	r3, r0
 2473 0034 002B     		cmp	r3, #0
 2474 0036 FAD0     		beq	.L126
 796:main.c        ****         USB_MIDI_EP_Init();
 2475              		.loc 1 796 0 is_stmt 1
 2476 0038 FFF7FEFF 		bl	USB_MIDI_Init
 797:main.c        ****        //LED_PWM_Write(255);
 798:main.c        ****        USB_active = 1;
 2477              		.loc 1 798 0
 2478 003c 034B     		ldr	r3, .L127
 2479 003e 0122     		movs	r2, #1
 2480 0040 1A70     		strb	r2, [r3]
 2481              	.L125:
 799:main.c        ****    }
 800:main.c        ****    USB_check_flag = 0;
 2482              		.loc 1 800 0
 2483 0042 034B     		ldr	r3, .L127+4
 2484 0044 0022     		movs	r2, #0
 2485 0046 1A70     		strb	r2, [r3]
 801:main.c        **** }
 2486              		.loc 1 801 0
 2487 0048 00BF     		nop
 2488 004a 80BD     		pop	{r7, pc}
 2489              	.L128:
 2490              		.align	2
 2491              	.L127:
 2492 004c 00000000 		.word	USB_active
 2493 0050 00000000 		.word	USB_check_flag
 2494              		.cfi_endproc
 2495              	.LFE74:
 2496              		.size	checkUSB_Vbus, .-checkUSB_Vbus
 2497              		.section	.text.USB_service,"ax",%progbits
 2498              		.align	2
 2499              		.global	USB_service
 2500              		.thumb
 2501              		.thumb_func
 2502              		.type	USB_service, %function
 2503              	USB_service:
 2504              	.LFB75:
 802:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 60


 803:main.c        **** void USB_service(void)
 804:main.c        **** {
 2505              		.loc 1 804 0
 2506              		.cfi_startproc
 2507              		@ args = 0, pretend = 0, frame = 0
 2508              		@ frame_needed = 1, uses_anonymous_args = 0
 2509 0000 80B5     		push	{r7, lr}
 2510              		.cfi_def_cfa_offset 8
 2511              		.cfi_offset 7, -8
 2512              		.cfi_offset 14, -4
 2513 0002 00AF     		add	r7, sp, #0
 2514              		.cfi_def_cfa_register 7
 805:main.c        ****     if(USB_IsConfigurationChanged() != 0u)
 2515              		.loc 1 805 0
 2516 0004 FFF7FEFF 		bl	USB_IsConfigurationChanged
 2517 0008 0346     		mov	r3, r0
 2518 000a 002B     		cmp	r3, #0
 2519 000c 10D0     		beq	.L130
 806:main.c        ****     {
 807:main.c        ****         if(USB_GetConfiguration() != 0u)   
 2520              		.loc 1 807 0
 2521 000e FFF7FEFF 		bl	USB_GetConfiguration
 2522 0012 0346     		mov	r3, r0
 2523 0014 002B     		cmp	r3, #0
 2524 0016 0BD0     		beq	.L130
 808:main.c        ****         {
 809:main.c        ****            // Sleep_isr_StartEx(SleepIsr_function);
 810:main.c        ****             
 811:main.c        ****             //SleepTimer_Start();
 812:main.c        ****         	
 813:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 2525              		.loc 1 813 0
 2526 0018 244B     		ldr	r3, .L136
 2527 001a 1B78     		ldrb	r3, [r3]
 2528 001c DBB2     		uxtb	r3, r3
 2529 001e 002B     		cmp	r3, #0
 2530 0020 06D0     		beq	.L130
 2531              		.loc 1 813 0 is_stmt 0 discriminator 1
 2532 0022 FFF7FEFF 		bl	USB_VBusPresent
 2533 0026 0346     		mov	r3, r0
 2534 0028 002B     		cmp	r3, #0
 2535 002a 01D0     		beq	.L130
 814:main.c        ****             {
 815:main.c        ****                 USB_MIDI_EP_Init();
 2536              		.loc 1 815 0 is_stmt 1
 2537 002c FFF7FEFF 		bl	USB_MIDI_Init
 2538              	.L130:
 816:main.c        ****             }
 817:main.c        ****         }
 818:main.c        ****         else
 819:main.c        ****         {
 820:main.c        ****             //SleepTimer_Stop();
 821:main.c        ****         }    
 822:main.c        ****     }        
 823:main.c        ****     
 824:main.c        ****     if(USB_GetConfiguration() != 0u)    
 2539              		.loc 1 824 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 61


 2540 0030 FFF7FEFF 		bl	USB_GetConfiguration
 2541 0034 0346     		mov	r3, r0
 2542 0036 002B     		cmp	r3, #0
 2543 0038 35D0     		beq	.L135
 825:main.c        ****     {
 826:main.c        **** 
 827:main.c        ****          /* Reinitialize after SET_CONFIGURATION or SET_INTERFACE Requests */
 828:main.c        ****         if(USB_IsConfigurationChanged() != 0x00)
 2544              		.loc 1 828 0
 2545 003a FFF7FEFF 		bl	USB_IsConfigurationChanged
 2546 003e 0346     		mov	r3, r0
 2547 0040 002B     		cmp	r3, #0
 2548 0042 18D0     		beq	.L133
 829:main.c        ****         {
 830:main.c        ****             USB_LoadInEP(USB_midi_in_ep, USB_midiInBuffer,(uint16) USB_midiInPointer);
 2549              		.loc 1 830 0
 2550 0044 1A4B     		ldr	r3, .L136+4
 2551 0046 1B78     		ldrb	r3, [r3]
 2552 0048 D8B2     		uxtb	r0, r3
 2553 004a 1A4B     		ldr	r3, .L136+8
 2554 004c 1B78     		ldrb	r3, [r3]
 2555 004e DBB2     		uxtb	r3, r3
 2556 0050 9BB2     		uxth	r3, r3
 2557 0052 1A46     		mov	r2, r3
 2558 0054 1849     		ldr	r1, .L136+12
 2559 0056 FFF7FEFF 		bl	USB_LoadInEP
 831:main.c        ****             USB_ReadOutEP(USB_midi_out_ep,USB_midiOutBuffer, 64);
 2560              		.loc 1 831 0
 2561 005a 184B     		ldr	r3, .L136+16
 2562 005c 1B78     		ldrb	r3, [r3]
 2563 005e DBB2     		uxtb	r3, r3
 2564 0060 4022     		movs	r2, #64
 2565 0062 1749     		ldr	r1, .L136+20
 2566 0064 1846     		mov	r0, r3
 2567 0066 FFF7FEFF 		bl	USB_ReadOutEP
 832:main.c        ****                                              /* configuring the DMAs for the first time only, the d
 833:main.c        ****                                              in the EP buffer is Transferred by DMA to the buffer a
 834:main.c        ****             USB_EnableOutEP(USB_midi_out_ep);       /* Note 3.*/
 2568              		.loc 1 834 0
 2569 006a 144B     		ldr	r3, .L136+16
 2570 006c 1B78     		ldrb	r3, [r3]
 2571 006e DBB2     		uxtb	r3, r3
 2572 0070 1846     		mov	r0, r3
 2573 0072 FFF7FEFF 		bl	USB_EnableOutEP
 2574              	.L133:
 835:main.c        ****         }
 836:main.c        **** #if 0
 837:main.c        ****          /* Check that all data has been transfered and IN Buffer is empty */
 838:main.c        ****          if (USB_GetEPState(USB_midi_in_ep) == USB_IN_BUFFER_EMPTY)
 839:main.c        ****          {
 840:main.c        ****             /*Rearm the IN Endpoint (EP1) */
 841:main.c        ****             USB_LoadInEP(USB_midi_in_ep, USB_NULL, (uint16) USB_midiInPointer);
 842:main.c        ****          }
 843:main.c        ****              
 844:main.c        ****          if (USB_GetEPState(USB_midi_out_ep) == USB_OUT_BUFFER_FULL)
 845:main.c        ****          {
 846:main.c        ****             USB_EnableOutEP(USB_midi_out_ep);       /* Note 3.*/
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 62


 847:main.c        ****          }
 848:main.c        ****  #endif
 849:main.c        **** 
 850:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 2575              		.loc 1 850 0
 2576 0076 0D4B     		ldr	r3, .L136
 2577 0078 1B78     		ldrb	r3, [r3]
 2578 007a DBB2     		uxtb	r3, r3
 2579 007c 002B     		cmp	r3, #0
 2580 007e 06D0     		beq	.L134
 2581              		.loc 1 850 0 is_stmt 0 discriminator 1
 2582 0080 FFF7FEFF 		bl	USB_VBusPresent
 2583 0084 0346     		mov	r3, r0
 2584 0086 002B     		cmp	r3, #0
 2585 0088 01D0     		beq	.L134
 851:main.c        ****             {
 852:main.c        ****                 USB_MIDI_IN_Service();
 2586              		.loc 1 852 0 is_stmt 1
 2587 008a FFF7FEFF 		bl	USB_MIDI_IN_Service
 2588              	.L134:
 853:main.c        ****             }
 854:main.c        **** 
 855:main.c        **** 
 856:main.c        **** 
 857:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 2589              		.loc 1 857 0
 2590 008e 074B     		ldr	r3, .L136
 2591 0090 1B78     		ldrb	r3, [r3]
 2592 0092 DBB2     		uxtb	r3, r3
 2593 0094 002B     		cmp	r3, #0
 2594 0096 06D0     		beq	.L135
 2595              		.loc 1 857 0 is_stmt 0 discriminator 1
 2596 0098 FFF7FEFF 		bl	USB_VBusPresent
 2597 009c 0346     		mov	r3, r0
 2598 009e 002B     		cmp	r3, #0
 2599 00a0 01D0     		beq	.L135
 858:main.c        ****             {
 859:main.c        ****                 USB_MIDI_OUT_Service();
 2600              		.loc 1 859 0 is_stmt 1
 2601 00a2 FFF7FEFF 		bl	USB_MIDI_OUT_Service
 2602              	.L135:
 860:main.c        ****             }
 861:main.c        **** 
 862:main.c        **** /*
 863:main.c        ****         if( usbActivityCounter >= 2u ) 
 864:main.c        ****         {
 865:main.c        **** 
 866:main.c        ****             USB_Suspend();
 867:main.c        **** 
 868:main.c        ****             CyPmSaveClocks();
 869:main.c        ****             CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_PICU);
 870:main.c        ****             CyPmRestoreClocks();
 871:main.c        **** 
 872:main.c        ****             USB_Resume();
 873:main.c        ****             USB_MIDI_EP_Init();
 874:main.c        ****             
 875:main.c        ****             usbActivityCounter = 0u; 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 63


 876:main.c        **** 
 877:main.c        ****         }
 878:main.c        ****         */
 879:main.c        ****     }
 880:main.c        ****         
 881:main.c        **** }
 2603              		.loc 1 881 0
 2604 00a6 00BF     		nop
 2605 00a8 80BD     		pop	{r7, pc}
 2606              	.L137:
 2607 00aa 00BF     		.align	2
 2608              	.L136:
 2609 00ac 00000000 		.word	USB_active
 2610 00b0 00000000 		.word	USB_midi_in_ep
 2611 00b4 00000000 		.word	USB_midiInPointer
 2612 00b8 00000000 		.word	USB_midiInBuffer
 2613 00bc 00000000 		.word	USB_midi_out_ep
 2614 00c0 00000000 		.word	USB_midiOutBuffer
 2615              		.cfi_endproc
 2616              	.LFE75:
 2617              		.size	USB_service, .-USB_service
 2618              		.comm	tempMIDI,4,4
 2619              		.section	.text.USB_callbackLocalMidiEvent,"ax",%progbits
 2620              		.align	2
 2621              		.global	USB_callbackLocalMidiEvent
 2622              		.thumb
 2623              		.thumb_func
 2624              		.type	USB_callbackLocalMidiEvent, %function
 2625              	USB_callbackLocalMidiEvent:
 2626              	.LFB76:
 882:main.c        **** uint8_t tempMIDI[4];
 883:main.c        **** void USB_callbackLocalMidiEvent(uint8 cable, uint8 *midiMsg) CYREENTRANT
 884:main.c        **** {
 2627              		.loc 1 884 0
 2628              		.cfi_startproc
 2629              		@ args = 0, pretend = 0, frame = 8
 2630              		@ frame_needed = 1, uses_anonymous_args = 0
 2631 0000 80B5     		push	{r7, lr}
 2632              		.cfi_def_cfa_offset 8
 2633              		.cfi_offset 7, -8
 2634              		.cfi_offset 14, -4
 2635 0002 82B0     		sub	sp, sp, #8
 2636              		.cfi_def_cfa_offset 16
 2637 0004 00AF     		add	r7, sp, #0
 2638              		.cfi_def_cfa_register 7
 2639 0006 0346     		mov	r3, r0
 2640 0008 3960     		str	r1, [r7]
 2641 000a FB71     		strb	r3, [r7, #7]
 885:main.c        ****      tempMIDI[0] = midiMsg[0];
 2642              		.loc 1 885 0
 2643 000c 3B68     		ldr	r3, [r7]
 2644 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2645 0010 0C4B     		ldr	r3, .L141
 2646 0012 1A70     		strb	r2, [r3]
 886:main.c        ****     tempMIDI[1] = midiMsg[1];
 2647              		.loc 1 886 0
 2648 0014 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 64


 2649 0016 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2650 0018 0A4B     		ldr	r3, .L141
 2651 001a 5A70     		strb	r2, [r3, #1]
 887:main.c        ****      tempMIDI[2] = midiMsg[2];
 2652              		.loc 1 887 0
 2653 001c 3B68     		ldr	r3, [r7]
 2654 001e 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 2655 0020 084B     		ldr	r3, .L141
 2656 0022 9A70     		strb	r2, [r3, #2]
 888:main.c        ****      tempMIDI[3] = midiMsg[3];
 2657              		.loc 1 888 0
 2658 0024 3B68     		ldr	r3, [r7]
 2659 0026 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2660 0028 064B     		ldr	r3, .L141
 2661 002a DA70     		strb	r2, [r3, #3]
 889:main.c        ****     //check that we got here
 890:main.c        ****     
 891:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 2662              		.loc 1 891 0
 2663 002c 064B     		ldr	r3, .L141+4
 2664 002e 1B78     		ldrb	r3, [r3]
 2665 0030 DBB2     		uxtb	r3, r3
 2666 0032 002B     		cmp	r3, #0
 2667 0034 01D0     		beq	.L140
 2668              		.loc 1 891 0 is_stmt 0 discriminator 1
 2669 0036 FFF7FEFF 		bl	USB_VBusPresent
 2670              	.L140:
 892:main.c        ****     { 
 893:main.c        ****     }
 894:main.c        ****     cable = cable;
 895:main.c        **** }
 2671              		.loc 1 895 0 is_stmt 1
 2672 003a 00BF     		nop
 2673 003c 0837     		adds	r7, r7, #8
 2674              		.cfi_def_cfa_offset 8
 2675 003e BD46     		mov	sp, r7
 2676              		.cfi_def_cfa_register 13
 2677              		@ sp needed
 2678 0040 80BD     		pop	{r7, pc}
 2679              	.L142:
 2680 0042 00BF     		.align	2
 2681              	.L141:
 2682 0044 00000000 		.word	tempMIDI
 2683 0048 00000000 		.word	USB_active
 2684              		.cfi_endproc
 2685              	.LFE76:
 2686              		.size	USB_callbackLocalMidiEvent, .-USB_callbackLocalMidiEvent
 2687              		.section	.text.sendMIDINoteOn,"ax",%progbits
 2688              		.align	2
 2689              		.global	sendMIDINoteOn
 2690              		.thumb
 2691              		.thumb_func
 2692              		.type	sendMIDINoteOn, %function
 2693              	sendMIDINoteOn:
 2694              	.LFB77:
 896:main.c        **** 
 897:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 65


 898:main.c        **** {  
 2695              		.loc 1 898 0
 2696              		.cfi_startproc
 2697              		@ args = 0, pretend = 0, frame = 16
 2698              		@ frame_needed = 1, uses_anonymous_args = 0
 2699 0000 80B5     		push	{r7, lr}
 2700              		.cfi_def_cfa_offset 8
 2701              		.cfi_offset 7, -8
 2702              		.cfi_offset 14, -4
 2703 0002 84B0     		sub	sp, sp, #16
 2704              		.cfi_def_cfa_offset 24
 2705 0004 00AF     		add	r7, sp, #0
 2706              		.cfi_def_cfa_register 7
 2707 0006 F860     		str	r0, [r7, #12]
 2708 0008 B960     		str	r1, [r7, #8]
 2709 000a 7A60     		str	r2, [r7, #4]
 899:main.c        ****    
 900:main.c        ****     midiMsg[0] = USB_MIDI_NOTE_ON + channel;
 2710              		.loc 1 900 0
 2711 000c 7B68     		ldr	r3, [r7, #4]
 2712 000e DBB2     		uxtb	r3, r3
 2713 0010 703B     		subs	r3, r3, #112
 2714 0012 DAB2     		uxtb	r2, r3
 2715 0014 254B     		ldr	r3, .L147
 2716 0016 1A70     		strb	r2, [r3]
 901:main.c        ****     midiMsg[1] = MIDInoteNum;
 2717              		.loc 1 901 0
 2718 0018 FB68     		ldr	r3, [r7, #12]
 2719 001a DAB2     		uxtb	r2, r3
 2720 001c 234B     		ldr	r3, .L147
 2721 001e 5A70     		strb	r2, [r3, #1]
 902:main.c        ****     midiMsg[2] = velocity;	
 2722              		.loc 1 902 0
 2723 0020 BB68     		ldr	r3, [r7, #8]
 2724 0022 DAB2     		uxtb	r2, r3
 2725 0024 214B     		ldr	r3, .L147
 2726 0026 9A70     		strb	r2, [r3, #2]
 903:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
 904:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 2727              		.loc 1 904 0
 2728 0028 214B     		ldr	r3, .L147+4
 2729 002a 1B78     		ldrb	r3, [r3]
 2730 002c DBB2     		uxtb	r3, r3
 2731 002e 002B     		cmp	r3, #0
 2732 0030 09D0     		beq	.L144
 2733              		.loc 1 904 0 is_stmt 0 discriminator 1
 2734 0032 FFF7FEFF 		bl	USB_VBusPresent
 2735 0036 0346     		mov	r3, r0
 2736 0038 002B     		cmp	r3, #0
 2737 003a 04D0     		beq	.L144
 905:main.c        ****     {
 906:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 2738              		.loc 1 906 0 is_stmt 1
 2739 003c 0022     		movs	r2, #0
 2740 003e 1B49     		ldr	r1, .L147
 2741 0040 0320     		movs	r0, #3
 2742 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 66


 2743              	.L144:
 907:main.c        ****     } 
 908:main.c        ****     midiSent += 4;
 2744              		.loc 1 908 0
 2745 0046 1B4B     		ldr	r3, .L147+8
 2746 0048 1B88     		ldrh	r3, [r3]
 2747 004a 0433     		adds	r3, r3, #4
 2748 004c 9AB2     		uxth	r2, r3
 2749 004e 194B     		ldr	r3, .L147+8
 2750 0050 1A80     		strh	r2, [r3]	@ movhi
 909:main.c        ****     
 910:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[0];
 2751              		.loc 1 910 0
 2752 0052 194B     		ldr	r3, .L147+12
 2753 0054 1B68     		ldr	r3, [r3]
 2754 0056 5A1C     		adds	r2, r3, #1
 2755 0058 1749     		ldr	r1, .L147+12
 2756 005a 0A60     		str	r2, [r1]
 2757 005c 134A     		ldr	r2, .L147
 2758 005e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 2759 0060 164A     		ldr	r2, .L147+16
 2760 0062 D154     		strb	r1, [r2, r3]
 911:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[1];
 2761              		.loc 1 911 0
 2762 0064 144B     		ldr	r3, .L147+12
 2763 0066 1B68     		ldr	r3, [r3]
 2764 0068 5A1C     		adds	r2, r3, #1
 2765 006a 1349     		ldr	r1, .L147+12
 2766 006c 0A60     		str	r2, [r1]
 2767 006e 0F4A     		ldr	r2, .L147
 2768 0070 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 2769 0072 124A     		ldr	r2, .L147+16
 2770 0074 D154     		strb	r1, [r2, r3]
 912:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[2];
 2771              		.loc 1 912 0
 2772 0076 104B     		ldr	r3, .L147+12
 2773 0078 1B68     		ldr	r3, [r3]
 2774 007a 5A1C     		adds	r2, r3, #1
 2775 007c 0E49     		ldr	r1, .L147+12
 2776 007e 0A60     		str	r2, [r1]
 2777 0080 0A4A     		ldr	r2, .L147
 2778 0082 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 2779 0084 0D4A     		ldr	r2, .L147+16
 2780 0086 D154     		strb	r1, [r2, r3]
 913:main.c        ****     if (velocity > 0)
 2781              		.loc 1 913 0
 2782 0088 BB68     		ldr	r3, [r7, #8]
 2783 008a 002B     		cmp	r3, #0
 2784 008c 03DD     		ble	.L145
 914:main.c        ****     {
 915:main.c        ****         LED1_Write(1);
 2785              		.loc 1 915 0
 2786 008e 0120     		movs	r0, #1
 2787 0090 FFF7FEFF 		bl	LED1_Write
 2788 0094 02E0     		b	.L146
 2789              	.L145:
 916:main.c        ****     }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 67


 917:main.c        ****     else
 918:main.c        ****     {
 919:main.c        ****         LED1_Write(0);
 2790              		.loc 1 919 0
 2791 0096 0020     		movs	r0, #0
 2792 0098 FFF7FEFF 		bl	LED1_Write
 2793              	.L146:
 920:main.c        ****     }
 921:main.c        ****     outChanged = 1;
 2794              		.loc 1 921 0
 2795 009c 084B     		ldr	r3, .L147+20
 2796 009e 0122     		movs	r2, #1
 2797 00a0 1A60     		str	r2, [r3]
 922:main.c        ****     
 923:main.c        **** }
 2798              		.loc 1 923 0
 2799 00a2 00BF     		nop
 2800 00a4 1037     		adds	r7, r7, #16
 2801              		.cfi_def_cfa_offset 8
 2802 00a6 BD46     		mov	sp, r7
 2803              		.cfi_def_cfa_register 13
 2804              		@ sp needed
 2805 00a8 80BD     		pop	{r7, pc}
 2806              	.L148:
 2807 00aa 00BF     		.align	2
 2808              	.L147:
 2809 00ac 00000000 		.word	midiMsg
 2810 00b0 00000000 		.word	USB_active
 2811 00b4 00000000 		.word	midiSent
 2812 00b8 00000000 		.word	currentOutPointer
 2813 00bc 00000000 		.word	tx2BufferTemp
 2814 00c0 00000000 		.word	outChanged
 2815              		.cfi_endproc
 2816              	.LFE77:
 2817              		.size	sendMIDINoteOn, .-sendMIDINoteOn
 2818              		.section	.text.sendMIDIPitchBend,"ax",%progbits
 2819              		.align	2
 2820              		.global	sendMIDIPitchBend
 2821              		.thumb
 2822              		.thumb_func
 2823              		.type	sendMIDIPitchBend, %function
 2824              	sendMIDIPitchBend:
 2825              	.LFB78:
 924:main.c        **** 
 925:main.c        **** void sendMIDIPitchBend(int val, int channel)
 926:main.c        **** {
 2826              		.loc 1 926 0
 2827              		.cfi_startproc
 2828              		@ args = 0, pretend = 0, frame = 8
 2829              		@ frame_needed = 1, uses_anonymous_args = 0
 2830 0000 80B5     		push	{r7, lr}
 2831              		.cfi_def_cfa_offset 8
 2832              		.cfi_offset 7, -8
 2833              		.cfi_offset 14, -4
 2834 0002 82B0     		sub	sp, sp, #8
 2835              		.cfi_def_cfa_offset 16
 2836 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 68


 2837              		.cfi_def_cfa_register 7
 2838 0006 7860     		str	r0, [r7, #4]
 2839 0008 3960     		str	r1, [r7]
 927:main.c        ****     midiMsg[0] = USB_MIDI_PITCH_BEND_CHANGE + channel;
 2840              		.loc 1 927 0
 2841 000a 3B68     		ldr	r3, [r7]
 2842 000c DBB2     		uxtb	r3, r3
 2843 000e 203B     		subs	r3, r3, #32
 2844 0010 DAB2     		uxtb	r2, r3
 2845 0012 224B     		ldr	r3, .L151
 2846 0014 1A70     		strb	r2, [r3]
 928:main.c        ****     midiMsg[1] = (val & 127); //LSB
 2847              		.loc 1 928 0
 2848 0016 7B68     		ldr	r3, [r7, #4]
 2849 0018 DBB2     		uxtb	r3, r3
 2850 001a 03F07F03 		and	r3, r3, #127
 2851 001e DAB2     		uxtb	r2, r3
 2852 0020 1E4B     		ldr	r3, .L151
 2853 0022 5A70     		strb	r2, [r3, #1]
 929:main.c        ****     midiMsg[2] = (val >> 7);	//MSB		
 2854              		.loc 1 929 0
 2855 0024 7B68     		ldr	r3, [r7, #4]
 2856 0026 DB11     		asrs	r3, r3, #7
 2857 0028 DAB2     		uxtb	r2, r3
 2858 002a 1C4B     		ldr	r3, .L151
 2859 002c 9A70     		strb	r2, [r3, #2]
 930:main.c        **** 
 931:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
 932:main.c        ****     
 933:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 2860              		.loc 1 933 0
 2861 002e 1C4B     		ldr	r3, .L151+4
 2862 0030 1B78     		ldrb	r3, [r3]
 2863 0032 DBB2     		uxtb	r3, r3
 2864 0034 002B     		cmp	r3, #0
 2865 0036 09D0     		beq	.L150
 2866              		.loc 1 933 0 is_stmt 0 discriminator 1
 2867 0038 FFF7FEFF 		bl	USB_VBusPresent
 2868 003c 0346     		mov	r3, r0
 2869 003e 002B     		cmp	r3, #0
 2870 0040 04D0     		beq	.L150
 934:main.c        ****     {
 935:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 2871              		.loc 1 935 0 is_stmt 1
 2872 0042 0022     		movs	r2, #0
 2873 0044 1549     		ldr	r1, .L151
 2874 0046 0320     		movs	r0, #3
 2875 0048 FFF7FEFF 		bl	USB_PutUsbMidiIn
 2876              	.L150:
 936:main.c        ****     } 
 937:main.c        ****     midiSent += 4;
 2877              		.loc 1 937 0
 2878 004c 154B     		ldr	r3, .L151+8
 2879 004e 1B88     		ldrh	r3, [r3]
 2880 0050 0433     		adds	r3, r3, #4
 2881 0052 9AB2     		uxth	r2, r3
 2882 0054 134B     		ldr	r3, .L151+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 69


 2883 0056 1A80     		strh	r2, [r3]	@ movhi
 938:main.c        ****     
 939:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[0];
 2884              		.loc 1 939 0
 2885 0058 134B     		ldr	r3, .L151+12
 2886 005a 1B68     		ldr	r3, [r3]
 2887 005c 5A1C     		adds	r2, r3, #1
 2888 005e 1249     		ldr	r1, .L151+12
 2889 0060 0A60     		str	r2, [r1]
 2890 0062 0E4A     		ldr	r2, .L151
 2891 0064 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 2892 0066 114A     		ldr	r2, .L151+16
 2893 0068 D154     		strb	r1, [r2, r3]
 940:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[1];
 2894              		.loc 1 940 0
 2895 006a 0F4B     		ldr	r3, .L151+12
 2896 006c 1B68     		ldr	r3, [r3]
 2897 006e 5A1C     		adds	r2, r3, #1
 2898 0070 0D49     		ldr	r1, .L151+12
 2899 0072 0A60     		str	r2, [r1]
 2900 0074 094A     		ldr	r2, .L151
 2901 0076 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 2902 0078 0C4A     		ldr	r2, .L151+16
 2903 007a D154     		strb	r1, [r2, r3]
 941:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[2];
 2904              		.loc 1 941 0
 2905 007c 0A4B     		ldr	r3, .L151+12
 2906 007e 1B68     		ldr	r3, [r3]
 2907 0080 5A1C     		adds	r2, r3, #1
 2908 0082 0949     		ldr	r1, .L151+12
 2909 0084 0A60     		str	r2, [r1]
 2910 0086 054A     		ldr	r2, .L151
 2911 0088 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 2912 008a 084A     		ldr	r2, .L151+16
 2913 008c D154     		strb	r1, [r2, r3]
 942:main.c        ****     outChanged = 1;
 2914              		.loc 1 942 0
 2915 008e 084B     		ldr	r3, .L151+20
 2916 0090 0122     		movs	r2, #1
 2917 0092 1A60     		str	r2, [r3]
 943:main.c        **** }
 2918              		.loc 1 943 0
 2919 0094 00BF     		nop
 2920 0096 0837     		adds	r7, r7, #8
 2921              		.cfi_def_cfa_offset 8
 2922 0098 BD46     		mov	sp, r7
 2923              		.cfi_def_cfa_register 13
 2924              		@ sp needed
 2925 009a 80BD     		pop	{r7, pc}
 2926              	.L152:
 2927              		.align	2
 2928              	.L151:
 2929 009c 00000000 		.word	midiMsg
 2930 00a0 00000000 		.word	USB_active
 2931 00a4 00000000 		.word	midiSent
 2932 00a8 00000000 		.word	currentOutPointer
 2933 00ac 00000000 		.word	tx2BufferTemp
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 70


 2934 00b0 00000000 		.word	outChanged
 2935              		.cfi_endproc
 2936              	.LFE78:
 2937              		.size	sendMIDIPitchBend, .-sendMIDIPitchBend
 2938              		.section	.text.sendMIDIControlChange,"ax",%progbits
 2939              		.align	2
 2940              		.global	sendMIDIControlChange
 2941              		.thumb
 2942              		.thumb_func
 2943              		.type	sendMIDIControlChange, %function
 2944              	sendMIDIControlChange:
 2945              	.LFB79:
 944:main.c        **** 
 945:main.c        **** 
 946:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel)
 947:main.c        **** {
 2946              		.loc 1 947 0
 2947              		.cfi_startproc
 2948              		@ args = 0, pretend = 0, frame = 16
 2949              		@ frame_needed = 1, uses_anonymous_args = 0
 2950 0000 80B5     		push	{r7, lr}
 2951              		.cfi_def_cfa_offset 8
 2952              		.cfi_offset 7, -8
 2953              		.cfi_offset 14, -4
 2954 0002 84B0     		sub	sp, sp, #16
 2955              		.cfi_def_cfa_offset 24
 2956 0004 00AF     		add	r7, sp, #0
 2957              		.cfi_def_cfa_register 7
 2958 0006 F860     		str	r0, [r7, #12]
 2959 0008 B960     		str	r1, [r7, #8]
 2960 000a 7A60     		str	r2, [r7, #4]
 948:main.c        ****     midiMsg[0] = USB_MIDI_CONTROL_CHANGE + channel;
 2961              		.loc 1 948 0
 2962 000c 7B68     		ldr	r3, [r7, #4]
 2963 000e DBB2     		uxtb	r3, r3
 2964 0010 503B     		subs	r3, r3, #80
 2965 0012 DAB2     		uxtb	r2, r3
 2966 0014 204B     		ldr	r3, .L155
 2967 0016 1A70     		strb	r2, [r3]
 949:main.c        ****     midiMsg[1] = CCnum;
 2968              		.loc 1 949 0
 2969 0018 FB68     		ldr	r3, [r7, #12]
 2970 001a DAB2     		uxtb	r2, r3
 2971 001c 1E4B     		ldr	r3, .L155
 2972 001e 5A70     		strb	r2, [r3, #1]
 950:main.c        ****     midiMsg[2] = CCval;			
 2973              		.loc 1 950 0
 2974 0020 BB68     		ldr	r3, [r7, #8]
 2975 0022 DAB2     		uxtb	r2, r3
 2976 0024 1C4B     		ldr	r3, .L155
 2977 0026 9A70     		strb	r2, [r3, #2]
 951:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
 952:main.c        ****     
 953:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 2978              		.loc 1 953 0
 2979 0028 1C4B     		ldr	r3, .L155+4
 2980 002a 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 71


 2981 002c DBB2     		uxtb	r3, r3
 2982 002e 002B     		cmp	r3, #0
 2983 0030 09D0     		beq	.L154
 2984              		.loc 1 953 0 is_stmt 0 discriminator 1
 2985 0032 FFF7FEFF 		bl	USB_VBusPresent
 2986 0036 0346     		mov	r3, r0
 2987 0038 002B     		cmp	r3, #0
 2988 003a 04D0     		beq	.L154
 954:main.c        ****     {
 955:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 2989              		.loc 1 955 0 is_stmt 1
 2990 003c 0022     		movs	r2, #0
 2991 003e 1649     		ldr	r1, .L155
 2992 0040 0320     		movs	r0, #3
 2993 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 2994              	.L154:
 956:main.c        ****     } 
 957:main.c        ****     midiSent += 4;
 2995              		.loc 1 957 0
 2996 0046 164B     		ldr	r3, .L155+8
 2997 0048 1B88     		ldrh	r3, [r3]
 2998 004a 0433     		adds	r3, r3, #4
 2999 004c 9AB2     		uxth	r2, r3
 3000 004e 144B     		ldr	r3, .L155+8
 3001 0050 1A80     		strh	r2, [r3]	@ movhi
 958:main.c        ****     
 959:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[0];
 3002              		.loc 1 959 0
 3003 0052 144B     		ldr	r3, .L155+12
 3004 0054 1B68     		ldr	r3, [r3]
 3005 0056 5A1C     		adds	r2, r3, #1
 3006 0058 1249     		ldr	r1, .L155+12
 3007 005a 0A60     		str	r2, [r1]
 3008 005c 0E4A     		ldr	r2, .L155
 3009 005e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3010 0060 114A     		ldr	r2, .L155+16
 3011 0062 D154     		strb	r1, [r2, r3]
 960:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[1];
 3012              		.loc 1 960 0
 3013 0064 0F4B     		ldr	r3, .L155+12
 3014 0066 1B68     		ldr	r3, [r3]
 3015 0068 5A1C     		adds	r2, r3, #1
 3016 006a 0E49     		ldr	r1, .L155+12
 3017 006c 0A60     		str	r2, [r1]
 3018 006e 0A4A     		ldr	r2, .L155
 3019 0070 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 3020 0072 0D4A     		ldr	r2, .L155+16
 3021 0074 D154     		strb	r1, [r2, r3]
 961:main.c        ****     tx2BufferTemp[currentOutPointer++] = midiMsg[2];
 3022              		.loc 1 961 0
 3023 0076 0B4B     		ldr	r3, .L155+12
 3024 0078 1B68     		ldr	r3, [r3]
 3025 007a 5A1C     		adds	r2, r3, #1
 3026 007c 0949     		ldr	r1, .L155+12
 3027 007e 0A60     		str	r2, [r1]
 3028 0080 054A     		ldr	r2, .L155
 3029 0082 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 72


 3030 0084 084A     		ldr	r2, .L155+16
 3031 0086 D154     		strb	r1, [r2, r3]
 962:main.c        ****     outChanged = 1;
 3032              		.loc 1 962 0
 3033 0088 084B     		ldr	r3, .L155+20
 3034 008a 0122     		movs	r2, #1
 3035 008c 1A60     		str	r2, [r3]
 963:main.c        ****     
 964:main.c        **** }
 3036              		.loc 1 964 0
 3037 008e 00BF     		nop
 3038 0090 1037     		adds	r7, r7, #16
 3039              		.cfi_def_cfa_offset 8
 3040 0092 BD46     		mov	sp, r7
 3041              		.cfi_def_cfa_register 13
 3042              		@ sp needed
 3043 0094 80BD     		pop	{r7, pc}
 3044              	.L156:
 3045 0096 00BF     		.align	2
 3046              	.L155:
 3047 0098 00000000 		.word	midiMsg
 3048 009c 00000000 		.word	USB_active
 3049 00a0 00000000 		.word	midiSent
 3050 00a4 00000000 		.word	currentOutPointer
 3051 00a8 00000000 		.word	tx2BufferTemp
 3052 00ac 00000000 		.word	outChanged
 3053              		.cfi_endproc
 3054              	.LFE79:
 3055              		.size	sendMIDIControlChange, .-sendMIDIControlChange
 3056              		.global	iVtherm
 3057              		.bss
 3058 0139 000000   		.align	2
 3059              		.type	iVtherm, %object
 3060              		.size	iVtherm, 4
 3061              	iVtherm:
 3062 013c 00000000 		.space	4
 3063              		.global	__aeabi_i2f
 3064              		.section	.text.scanLinearResistor,"ax",%progbits
 3065              		.align	2
 3066              		.global	scanLinearResistor
 3067              		.thumb
 3068              		.thumb_func
 3069              		.type	scanLinearResistor, %function
 3070              	scanLinearResistor:
 3071              	.LFB80:
 965:main.c        **** 
 966:main.c        **** 
 967:main.c        **** int32 iVtherm = 0;
 968:main.c        **** 
 969:main.c        **** 
 970:main.c        **** void scanLinearResistor(void)
 971:main.c        **** {
 3072              		.loc 1 971 0
 3073              		.cfi_startproc
 3074              		@ args = 0, pretend = 0, frame = 16
 3075              		@ frame_needed = 1, uses_anonymous_args = 0
 3076 0000 90B5     		push	{r4, r7, lr}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 73


 3077              		.cfi_def_cfa_offset 12
 3078              		.cfi_offset 4, -12
 3079              		.cfi_offset 7, -8
 3080              		.cfi_offset 14, -4
 3081 0002 85B0     		sub	sp, sp, #20
 3082              		.cfi_def_cfa_offset 32
 3083 0004 00AF     		add	r7, sp, #0
 3084              		.cfi_def_cfa_register 7
 972:main.c        ****         int32 iVref = 0;
 3085              		.loc 1 972 0
 3086 0006 0023     		movs	r3, #0
 3087 0008 BB60     		str	r3, [r7, #8]
 973:main.c        ****         int32 iRes = 0;
 3088              		.loc 1 973 0
 3089 000a 0023     		movs	r3, #0
 3090 000c FB60     		str	r3, [r7, #12]
 974:main.c        ****         int32 offset = 0;
 3091              		.loc 1 974 0
 3092 000e 0023     		movs	r3, #0
 3093 0010 7B60     		str	r3, [r7, #4]
 975:main.c        ****     
 976:main.c        ****         ExtMUXS0_Write(whichLinearSensor & 1);
 3094              		.loc 1 976 0
 3095 0012 3F4B     		ldr	r3, .L160
 3096 0014 1B68     		ldr	r3, [r3]
 3097 0016 DBB2     		uxtb	r3, r3
 3098 0018 03F00103 		and	r3, r3, #1
 3099 001c DBB2     		uxtb	r3, r3
 3100 001e 1846     		mov	r0, r3
 3101 0020 FFF7FEFF 		bl	ExtMUXS0_Write
 977:main.c        ****         ExtMUXS1_Write((whichLinearSensor & 2)>>1);
 3102              		.loc 1 977 0
 3103 0024 3A4B     		ldr	r3, .L160
 3104 0026 1B68     		ldr	r3, [r3]
 3105 0028 03F00203 		and	r3, r3, #2
 3106 002c 5B10     		asrs	r3, r3, #1
 3107 002e DBB2     		uxtb	r3, r3
 3108 0030 1846     		mov	r0, r3
 3109 0032 FFF7FEFF 		bl	ExtMUXS1_Write
 978:main.c        **** 
 979:main.c        ****         scanPart = 0;
 3110              		.loc 1 979 0
 3111 0036 374B     		ldr	r3, .L160+4
 3112 0038 0022     		movs	r2, #0
 3113 003a 1A60     		str	r2, [r3]
 980:main.c        ****         //if (scanPart == 0)
 981:main.c        ****         {
 982:main.c        ****             AMux_1_FastSelect(scanPart);
 3114              		.loc 1 982 0
 3115 003c 354B     		ldr	r3, .L160+4
 3116 003e 1B68     		ldr	r3, [r3]
 3117 0040 DBB2     		uxtb	r3, r3
 3118 0042 1846     		mov	r0, r3
 3119 0044 FFF7FEFF 		bl	AMux_1_FastSelect
 983:main.c        ****             CyDelayUs(4); 
 3120              		.loc 1 983 0
 3121 0048 0420     		movs	r0, #4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 74


 3122 004a FFF7FEFF 		bl	CyDelayUs
 984:main.c        ****             ADC_1_StartConvert();
 3123              		.loc 1 984 0
 3124 004e FFF7FEFF 		bl	ADC_1_StartConvert
 985:main.c        ****             ADC_1_IsEndConversion(ADC_1_WAIT_FOR_RESULT);
 3125              		.loc 1 985 0
 3126 0052 0020     		movs	r0, #0
 3127 0054 FFF7FEFF 		bl	ADC_1_IsEndConversion
 986:main.c        ****             iVtherm = ADC_1_GetResult32();
 3128              		.loc 1 986 0
 3129 0058 FFF7FEFF 		bl	ADC_1_GetResult32
 3130 005c 0246     		mov	r2, r0
 3131 005e 2E4B     		ldr	r3, .L160+8
 3132 0060 1A60     		str	r2, [r3]
 987:main.c        ****             
 988:main.c        ****         }
 989:main.c        ****         scanPart = 1;
 3133              		.loc 1 989 0
 3134 0062 2C4B     		ldr	r3, .L160+4
 3135 0064 0122     		movs	r2, #1
 3136 0066 1A60     		str	r2, [r3]
 990:main.c        ****        // else
 991:main.c        ****         {
 992:main.c        **** 
 993:main.c        ****             AMux_1_FastSelect(scanPart);
 3137              		.loc 1 993 0
 3138 0068 2A4B     		ldr	r3, .L160+4
 3139 006a 1B68     		ldr	r3, [r3]
 3140 006c DBB2     		uxtb	r3, r3
 3141 006e 1846     		mov	r0, r3
 3142 0070 FFF7FEFF 		bl	AMux_1_FastSelect
 994:main.c        ****             CyDelayUs(4); 
 3143              		.loc 1 994 0
 3144 0074 0420     		movs	r0, #4
 3145 0076 FFF7FEFF 		bl	CyDelayUs
 995:main.c        ****             ADC_1_StartConvert();
 3146              		.loc 1 995 0
 3147 007a FFF7FEFF 		bl	ADC_1_StartConvert
 996:main.c        ****             ADC_1_IsEndConversion(ADC_1_WAIT_FOR_RESULT);
 3148              		.loc 1 996 0
 3149 007e 0020     		movs	r0, #0
 3150 0080 FFF7FEFF 		bl	ADC_1_IsEndConversion
 997:main.c        ****             iVref = ADC_1_GetResult32();
 3151              		.loc 1 997 0
 3152 0084 FFF7FEFF 		bl	ADC_1_GetResult32
 3153 0088 B860     		str	r0, [r7, #8]
 998:main.c        **** 
 999:main.c        ****             iVref =   iVref - offset;
 3154              		.loc 1 999 0
 3155 008a BA68     		ldr	r2, [r7, #8]
 3156 008c 7B68     		ldr	r3, [r7, #4]
 3157 008e D31A     		subs	r3, r2, r3
 3158 0090 BB60     		str	r3, [r7, #8]
1000:main.c        ****             
1001:main.c        ****             if ((iVref > 1000) && (iVtherm < 1000))
 3159              		.loc 1 1001 0
 3160 0092 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 75


 3161 0094 B3F57A7F 		cmp	r3, #1000
 3162 0098 08DD     		ble	.L158
 3163              		.loc 1 1001 0 is_stmt 0 discriminator 1
 3164 009a 1F4B     		ldr	r3, .L160+8
 3165 009c 1B68     		ldr	r3, [r3]
 3166 009e B3F57A7F 		cmp	r3, #1000
 3167 00a2 03DA     		bge	.L158
1002:main.c        ****             {
1003:main.c        ****                 iRes = 65535;
 3168              		.loc 1 1003 0 is_stmt 1
 3169 00a4 4FF6FF73 		movw	r3, #65535
 3170 00a8 FB60     		str	r3, [r7, #12]
 3171 00aa 18E0     		b	.L159
 3172              	.L158:
1004:main.c        ****             }
1005:main.c        ****             else
1006:main.c        ****             {
1007:main.c        ****                 iRes = (int32)(((float)iVref / (float)iVtherm) * 30000.0f);
 3173              		.loc 1 1007 0
 3174 00ac B868     		ldr	r0, [r7, #8]
 3175 00ae FFF7FEFF 		bl	__aeabi_i2f
 3176 00b2 0446     		mov	r4, r0
 3177 00b4 184B     		ldr	r3, .L160+8
 3178 00b6 1B68     		ldr	r3, [r3]
 3179 00b8 1846     		mov	r0, r3
 3180 00ba FFF7FEFF 		bl	__aeabi_i2f
 3181 00be 0346     		mov	r3, r0
 3182 00c0 1946     		mov	r1, r3
 3183 00c2 2046     		mov	r0, r4
 3184 00c4 FFF7FEFF 		bl	__aeabi_fdiv
 3185 00c8 0346     		mov	r3, r0
 3186 00ca 1449     		ldr	r1, .L160+12
 3187 00cc 1846     		mov	r0, r3
 3188 00ce FFF7FEFF 		bl	__aeabi_fmul
 3189 00d2 0346     		mov	r3, r0
 3190 00d4 1846     		mov	r0, r3
 3191 00d6 FFF7FEFF 		bl	__aeabi_f2iz
 3192 00da 0346     		mov	r3, r0
 3193 00dc FB60     		str	r3, [r7, #12]
 3194              	.L159:
1008:main.c        ****             }
1009:main.c        ****             linearPotValue32Bit[whichLinearSensor] = iRes;
 3195              		.loc 1 1009 0
 3196 00de 0C4B     		ldr	r3, .L160
 3197 00e0 1B68     		ldr	r3, [r3]
 3198 00e2 0F49     		ldr	r1, .L160+16
 3199 00e4 FA68     		ldr	r2, [r7, #12]
 3200 00e6 41F82320 		str	r2, [r1, r3, lsl #2]
1010:main.c        ****             whichLinearSensor = (whichLinearSensor + 1) & 3;
 3201              		.loc 1 1010 0
 3202 00ea 094B     		ldr	r3, .L160
 3203 00ec 1B68     		ldr	r3, [r3]
 3204 00ee 0133     		adds	r3, r3, #1
 3205 00f0 03F00303 		and	r3, r3, #3
 3206 00f4 064A     		ldr	r2, .L160
 3207 00f6 1360     		str	r3, [r2]
1011:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 76


1012:main.c        ****         scanPart = (scanPart + 1) & 1;
 3208              		.loc 1 1012 0
 3209 00f8 064B     		ldr	r3, .L160+4
 3210 00fa 1B68     		ldr	r3, [r3]
 3211 00fc 0133     		adds	r3, r3, #1
 3212 00fe 03F00103 		and	r3, r3, #1
 3213 0102 044A     		ldr	r2, .L160+4
 3214 0104 1360     		str	r3, [r2]
1013:main.c        ****         //scanPart = 0;
1014:main.c        **** 
1015:main.c        **** }
 3215              		.loc 1 1015 0
 3216 0106 00BF     		nop
 3217 0108 1437     		adds	r7, r7, #20
 3218              		.cfi_def_cfa_offset 12
 3219 010a BD46     		mov	sp, r7
 3220              		.cfi_def_cfa_register 13
 3221              		@ sp needed
 3222 010c 90BD     		pop	{r4, r7, pc}
 3223              	.L161:
 3224 010e 00BF     		.align	2
 3225              	.L160:
 3226 0110 00000000 		.word	whichLinearSensor
 3227 0114 00000000 		.word	scanPart
 3228 0118 00000000 		.word	iVtherm
 3229 011c 0060EA46 		.word	1189765120
 3230 0120 00000000 		.word	linearPotValue32Bit
 3231              		.cfi_endproc
 3232              	.LFE80:
 3233              		.size	scanLinearResistor, .-scanLinearResistor
 3234              		.section	.text.DmaTxConfiguration,"ax",%progbits
 3235              		.align	2
 3236              		.global	DmaTxConfiguration
 3237              		.thumb
 3238              		.thumb_func
 3239              		.type	DmaTxConfiguration, %function
 3240              	DmaTxConfiguration:
 3241              	.LFB81:
1016:main.c        **** 
1017:main.c        **** void DmaTxConfiguration()
1018:main.c        **** {
 3242              		.loc 1 1018 0
 3243              		.cfi_startproc
 3244              		@ args = 0, pretend = 0, frame = 0
 3245              		@ frame_needed = 1, uses_anonymous_args = 0
 3246 0000 80B5     		push	{r7, lr}
 3247              		.cfi_def_cfa_offset 8
 3248              		.cfi_offset 7, -8
 3249              		.cfi_offset 14, -4
 3250 0002 00AF     		add	r7, sp, #0
 3251              		.cfi_def_cfa_register 7
1019:main.c        ****     /* Init DMA, 1 byte bursts, each burst requires a request */ 
1020:main.c        ****     txChannel = DMA_1_TX_DmaInitialize(DMA_TX_BYTES_PER_BURST, DMA_TX_REQUEST_PER_BURST, 
 3252              		.loc 1 1020 0
 3253 0004 4FF48043 		mov	r3, #16384
 3254 0008 41F6FF72 		movw	r2, #8191
 3255 000c 0121     		movs	r1, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 77


 3256 000e 0120     		movs	r0, #1
 3257 0010 FFF7FEFF 		bl	DMA_1_TX_DmaInitialize
 3258 0014 0346     		mov	r3, r0
 3259 0016 1A46     		mov	r2, r3
 3260 0018 294B     		ldr	r3, .L163
 3261 001a 1A70     		strb	r2, [r3]
1021:main.c        ****                                         HI16(DMA_TX_SRC_BASE), HI16(DMA_TX_DST_BASE));
1022:main.c        **** 
1023:main.c        ****     txTD = CyDmaTdAllocate();
 3262              		.loc 1 1023 0
 3263 001c FFF7FEFF 		bl	CyDmaTdAllocate
 3264 0020 0346     		mov	r3, r0
 3265 0022 1A46     		mov	r2, r3
 3266 0024 274B     		ldr	r3, .L163+4
 3267 0026 1A70     		strb	r2, [r3]
1024:main.c        **** 
1025:main.c        ****     /* Configure this Td as follows:
1026:main.c        ****     *  - Increment the source address, but not the destination address   
1027:main.c        ****     */
1028:main.c        ****     CyDmaTdSetConfiguration(txTD, BUFFER_SIZE, CY_DMA_DISABLE_TD, TD_INC_SRC_ADR);
 3268              		.loc 1 1028 0
 3269 0028 264B     		ldr	r3, .L163+4
 3270 002a 1B78     		ldrb	r3, [r3]
 3271 002c D8B2     		uxtb	r0, r3
 3272 002e 0123     		movs	r3, #1
 3273 0030 FE22     		movs	r2, #254
 3274 0032 1021     		movs	r1, #16
 3275 0034 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1029:main.c        **** 
1030:main.c        ****     /* From the memory to the SPIM */
1031:main.c        ****     CyDmaTdSetAddress(txTD, LO16((uint32)txBuffer), LO16((uint32) SPIM_1_TXDATA_PTR));
 3276              		.loc 1 1031 0
 3277 0038 224B     		ldr	r3, .L163+4
 3278 003a 1B78     		ldrb	r3, [r3]
 3279 003c DBB2     		uxtb	r3, r3
 3280 003e 224A     		ldr	r2, .L163+8
 3281 0040 91B2     		uxth	r1, r2
 3282 0042 46F24442 		movw	r2, #25668
 3283 0046 1846     		mov	r0, r3
 3284 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
1032:main.c        ****     
1033:main.c        ****     /* Associate the TD with the channel */
1034:main.c        ****     CyDmaChSetInitialTd(txChannel, txTD); 
 3285              		.loc 1 1034 0
 3286 004c 1C4B     		ldr	r3, .L163
 3287 004e 1B78     		ldrb	r3, [r3]
 3288 0050 DAB2     		uxtb	r2, r3
 3289 0052 1C4B     		ldr	r3, .L163+4
 3290 0054 1B78     		ldrb	r3, [r3]
 3291 0056 DBB2     		uxtb	r3, r3
 3292 0058 1946     		mov	r1, r3
 3293 005a 1046     		mov	r0, r2
 3294 005c FFF7FEFF 		bl	CyDmaChSetInitialTd
1035:main.c        ****     
1036:main.c        ****     ////
1037:main.c        ****     
1038:main.c        ****         /* Init DMA, 1 byte bursts, each burst requires a request */ 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 78


1039:main.c        ****     tx2Channel = DMA_2_TX_DmaInitialize(DMA_TX_BYTES_PER_BURST, DMA_TX_REQUEST_PER_BURST, 
 3295              		.loc 1 1039 0
 3296 0060 4FF48043 		mov	r3, #16384
 3297 0064 41F6FF72 		movw	r2, #8191
 3298 0068 0121     		movs	r1, #1
 3299 006a 0120     		movs	r0, #1
 3300 006c FFF7FEFF 		bl	DMA_2_TX_DmaInitialize
 3301 0070 0346     		mov	r3, r0
 3302 0072 1A46     		mov	r2, r3
 3303 0074 154B     		ldr	r3, .L163+12
 3304 0076 1A70     		strb	r2, [r3]
1040:main.c        ****                                         HI16(DMA_TX_SRC_BASE), HI16(DMA_TX_DST_BASE));
1041:main.c        **** 
1042:main.c        ****     tx2TD = CyDmaTdAllocate();
 3305              		.loc 1 1042 0
 3306 0078 FFF7FEFF 		bl	CyDmaTdAllocate
 3307 007c 0346     		mov	r3, r0
 3308 007e 1A46     		mov	r2, r3
 3309 0080 134B     		ldr	r3, .L163+16
 3310 0082 1A70     		strb	r2, [r3]
1043:main.c        **** 
1044:main.c        ****     /* Configure this Td as follows:
1045:main.c        ****     *  - Increment the source address, but not the destination address   
1046:main.c        ****     */
1047:main.c        ****     CyDmaTdSetConfiguration(tx2TD, BUFFER_2_SIZE, CY_DMA_DISABLE_TD, TD_INC_SRC_ADR);
 3311              		.loc 1 1047 0
 3312 0084 124B     		ldr	r3, .L163+16
 3313 0086 1B78     		ldrb	r3, [r3]
 3314 0088 D8B2     		uxtb	r0, r3
 3315 008a 0123     		movs	r3, #1
 3316 008c FE22     		movs	r2, #254
 3317 008e 1021     		movs	r1, #16
 3318 0090 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1048:main.c        **** 
1049:main.c        ****     /* From the memory to the SPIM */
1050:main.c        ****     CyDmaTdSetAddress(tx2TD, LO16((uint32)tx2Buffer), LO16((uint32) SPIM_2_TXDATA_PTR));
 3319              		.loc 1 1050 0
 3320 0094 0E4B     		ldr	r3, .L163+16
 3321 0096 1B78     		ldrb	r3, [r3]
 3322 0098 DBB2     		uxtb	r3, r3
 3323 009a 0E4A     		ldr	r2, .L163+20
 3324 009c 91B2     		uxth	r1, r2
 3325 009e 46F24B42 		movw	r2, #25675
 3326 00a2 1846     		mov	r0, r3
 3327 00a4 FFF7FEFF 		bl	CyDmaTdSetAddress
1051:main.c        ****     
1052:main.c        ****     /* Associate the TD with the channel */
1053:main.c        ****     CyDmaChSetInitialTd(tx2Channel, tx2TD); 
 3328              		.loc 1 1053 0
 3329 00a8 084B     		ldr	r3, .L163+12
 3330 00aa 1B78     		ldrb	r3, [r3]
 3331 00ac DAB2     		uxtb	r2, r3
 3332 00ae 084B     		ldr	r3, .L163+16
 3333 00b0 1B78     		ldrb	r3, [r3]
 3334 00b2 DBB2     		uxtb	r3, r3
 3335 00b4 1946     		mov	r1, r3
 3336 00b6 1046     		mov	r0, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 79


 3337 00b8 FFF7FEFF 		bl	CyDmaChSetInitialTd
1054:main.c        **** }    
 3338              		.loc 1 1054 0
 3339 00bc 00BF     		nop
 3340 00be 80BD     		pop	{r7, pc}
 3341              	.L164:
 3342              		.align	2
 3343              	.L163:
 3344 00c0 00000000 		.word	txChannel
 3345 00c4 00000000 		.word	txTD
 3346 00c8 00000000 		.word	txBuffer
 3347 00cc 00000000 		.word	tx2Channel
 3348 00d0 00000000 		.word	tx2TD
 3349 00d4 00000000 		.word	tx2Buffer
 3350              		.cfi_endproc
 3351              	.LFE81:
 3352              		.size	DmaTxConfiguration, .-DmaTxConfiguration
 3353              		.section	.text.DmaRxConfiguration,"ax",%progbits
 3354              		.align	2
 3355              		.global	DmaRxConfiguration
 3356              		.thumb
 3357              		.thumb_func
 3358              		.type	DmaRxConfiguration, %function
 3359              	DmaRxConfiguration:
 3360              	.LFB82:
1055:main.c        **** 
1056:main.c        **** void DmaRxConfiguration()
1057:main.c        **** { 
 3361              		.loc 1 1057 0
 3362              		.cfi_startproc
 3363              		@ args = 0, pretend = 0, frame = 0
 3364              		@ frame_needed = 1, uses_anonymous_args = 0
 3365 0000 80B5     		push	{r7, lr}
 3366              		.cfi_def_cfa_offset 8
 3367              		.cfi_offset 7, -8
 3368              		.cfi_offset 14, -4
 3369 0002 00AF     		add	r7, sp, #0
 3370              		.cfi_def_cfa_register 7
1058:main.c        ****     /* Init DMA, 1 byte bursts, each burst requires a request */ 
1059:main.c        ****     rxChannel = DMA_1_RX_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 3371              		.loc 1 1059 0
 3372 0004 41F6FF73 		movw	r3, #8191
 3373 0008 4FF48042 		mov	r2, #16384
 3374 000c 0121     		movs	r1, #1
 3375 000e 0120     		movs	r0, #1
 3376 0010 FFF7FEFF 		bl	DMA_1_RX_DmaInitialize
 3377 0014 0346     		mov	r3, r0
 3378 0016 1A46     		mov	r2, r3
 3379 0018 294B     		ldr	r3, .L166
 3380 001a 1A70     		strb	r2, [r3]
1060:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1061:main.c        **** 
1062:main.c        ****     rxTD = CyDmaTdAllocate();
 3381              		.loc 1 1062 0
 3382 001c FFF7FEFF 		bl	CyDmaTdAllocate
 3383 0020 0346     		mov	r3, r0
 3384 0022 1A46     		mov	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 80


 3385 0024 274B     		ldr	r3, .L166+4
 3386 0026 1A70     		strb	r2, [r3]
1063:main.c        ****     
1064:main.c        ****     /* Configure this Td as follows:
1065:main.c        ****     *  - Increment the destination address, but not the source address
1066:main.c        ****     */
1067:main.c        ****     CyDmaTdSetConfiguration(rxTD, BUFFER_SIZE, CY_DMA_DISABLE_TD, TD_INC_DST_ADR);
 3387              		.loc 1 1067 0
 3388 0028 264B     		ldr	r3, .L166+4
 3389 002a 1B78     		ldrb	r3, [r3]
 3390 002c D8B2     		uxtb	r0, r3
 3391 002e 0223     		movs	r3, #2
 3392 0030 FE22     		movs	r2, #254
 3393 0032 1021     		movs	r1, #16
 3394 0034 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1068:main.c        **** 
1069:main.c        ****     /* From the SPIM to the memory */
1070:main.c        ****     CyDmaTdSetAddress(rxTD, LO16((uint32)SPIM_1_RXDATA_PTR), LO16((uint32)rxBuffer));
 3395              		.loc 1 1070 0
 3396 0038 224B     		ldr	r3, .L166+4
 3397 003a 1B78     		ldrb	r3, [r3]
 3398 003c DBB2     		uxtb	r3, r3
 3399 003e 224A     		ldr	r2, .L166+8
 3400 0040 92B2     		uxth	r2, r2
 3401 0042 46F25441 		movw	r1, #25684
 3402 0046 1846     		mov	r0, r3
 3403 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
1071:main.c        **** 
1072:main.c        ****     /* Associate the TD with the channel */
1073:main.c        ****     CyDmaChSetInitialTd(rxChannel, rxTD);
 3404              		.loc 1 1073 0
 3405 004c 1C4B     		ldr	r3, .L166
 3406 004e 1B78     		ldrb	r3, [r3]
 3407 0050 DAB2     		uxtb	r2, r3
 3408 0052 1C4B     		ldr	r3, .L166+4
 3409 0054 1B78     		ldrb	r3, [r3]
 3410 0056 DBB2     		uxtb	r3, r3
 3411 0058 1946     		mov	r1, r3
 3412 005a 1046     		mov	r0, r2
 3413 005c FFF7FEFF 		bl	CyDmaChSetInitialTd
1074:main.c        ****     
1075:main.c        ****     
1076:main.c        ****     
1077:main.c        ****     ///
1078:main.c        ****     
1079:main.c        ****         /* Init DMA, 1 byte bursts, each burst requires a request */ 
1080:main.c        ****     rx2Channel = DMA_2_RX_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 3414              		.loc 1 1080 0
 3415 0060 41F6FF73 		movw	r3, #8191
 3416 0064 4FF48042 		mov	r2, #16384
 3417 0068 0121     		movs	r1, #1
 3418 006a 0120     		movs	r0, #1
 3419 006c FFF7FEFF 		bl	DMA_2_RX_DmaInitialize
 3420 0070 0346     		mov	r3, r0
 3421 0072 1A46     		mov	r2, r3
 3422 0074 154B     		ldr	r3, .L166+12
 3423 0076 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 81


1081:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1082:main.c        **** 
1083:main.c        ****     rx2TD = CyDmaTdAllocate();
 3424              		.loc 1 1083 0
 3425 0078 FFF7FEFF 		bl	CyDmaTdAllocate
 3426 007c 0346     		mov	r3, r0
 3427 007e 1A46     		mov	r2, r3
 3428 0080 134B     		ldr	r3, .L166+16
 3429 0082 1A70     		strb	r2, [r3]
1084:main.c        ****     
1085:main.c        ****     /* Configure this Td as follows:
1086:main.c        ****     *  - Increment the destination address, but not the source address
1087:main.c        ****     */
1088:main.c        ****     CyDmaTdSetConfiguration(rx2TD, BUFFER_2_SIZE, CY_DMA_DISABLE_TD, TD_INC_DST_ADR);
 3430              		.loc 1 1088 0
 3431 0084 124B     		ldr	r3, .L166+16
 3432 0086 1B78     		ldrb	r3, [r3]
 3433 0088 D8B2     		uxtb	r0, r3
 3434 008a 0223     		movs	r3, #2
 3435 008c FE22     		movs	r2, #254
 3436 008e 1021     		movs	r1, #16
 3437 0090 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1089:main.c        **** 
1090:main.c        ****     /* From the SPIM to the memory */
1091:main.c        ****     CyDmaTdSetAddress(rx2TD, LO16((uint32)SPIM_2_RXDATA_PTR), LO16((uint32)rx2Buffer));
 3438              		.loc 1 1091 0
 3439 0094 0E4B     		ldr	r3, .L166+16
 3440 0096 1B78     		ldrb	r3, [r3]
 3441 0098 DBB2     		uxtb	r3, r3
 3442 009a 0E4A     		ldr	r2, .L166+20
 3443 009c 92B2     		uxth	r2, r2
 3444 009e 46F25B41 		movw	r1, #25691
 3445 00a2 1846     		mov	r0, r3
 3446 00a4 FFF7FEFF 		bl	CyDmaTdSetAddress
1092:main.c        **** 
1093:main.c        ****     /* Associate the TD with the channel */
1094:main.c        ****     CyDmaChSetInitialTd(rx2Channel, rx2TD);
 3447              		.loc 1 1094 0
 3448 00a8 084B     		ldr	r3, .L166+12
 3449 00aa 1B78     		ldrb	r3, [r3]
 3450 00ac DAB2     		uxtb	r2, r3
 3451 00ae 084B     		ldr	r3, .L166+16
 3452 00b0 1B78     		ldrb	r3, [r3]
 3453 00b2 DBB2     		uxtb	r3, r3
 3454 00b4 1946     		mov	r1, r3
 3455 00b6 1046     		mov	r0, r2
 3456 00b8 FFF7FEFF 		bl	CyDmaChSetInitialTd
1095:main.c        **** }
 3457              		.loc 1 1095 0
 3458 00bc 00BF     		nop
 3459 00be 80BD     		pop	{r7, pc}
 3460              	.L167:
 3461              		.align	2
 3462              	.L166:
 3463 00c0 00000000 		.word	rxChannel
 3464 00c4 00000000 		.word	rxTD
 3465 00c8 00000000 		.word	rxBuffer
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 82


 3466 00cc 00000000 		.word	rx2Channel
 3467 00d0 00000000 		.word	rx2TD
 3468 00d4 00000000 		.word	rx2Buffer
 3469              		.cfi_endproc
 3470              	.LFE82:
 3471              		.size	DmaRxConfiguration, .-DmaRxConfiguration
 3472              		.section	.text.I2C_MasterWriteBlocking,"ax",%progbits
 3473              		.align	2
 3474              		.global	I2C_MasterWriteBlocking
 3475              		.thumb
 3476              		.thumb_func
 3477              		.type	I2C_MasterWriteBlocking, %function
 3478              	I2C_MasterWriteBlocking:
 3479              	.LFB83:
1096:main.c        **** 
1097:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode)
1098:main.c        **** {
 3480              		.loc 1 1098 0
 3481              		.cfi_startproc
 3482              		@ args = 0, pretend = 0, frame = 16
 3483              		@ frame_needed = 1, uses_anonymous_args = 0
 3484 0000 80B5     		push	{r7, lr}
 3485              		.cfi_def_cfa_offset 8
 3486              		.cfi_offset 7, -8
 3487              		.cfi_offset 14, -4
 3488 0002 84B0     		sub	sp, sp, #16
 3489              		.cfi_def_cfa_offset 24
 3490 0004 00AF     		add	r7, sp, #0
 3491              		.cfi_def_cfa_register 7
 3492 0006 0346     		mov	r3, r0
 3493 0008 FB71     		strb	r3, [r7, #7]
 3494 000a 0B46     		mov	r3, r1	@ movhi
 3495 000c BB80     		strh	r3, [r7, #4]	@ movhi
 3496 000e 1346     		mov	r3, r2
 3497 0010 BB71     		strb	r3, [r7, #6]
1099:main.c        ****     uint8 volatile status;
1100:main.c        ****     uint32_t timeout = 50000;
 3498              		.loc 1 1100 0
 3499 0012 4CF25033 		movw	r3, #50000
 3500 0016 FB60     		str	r3, [r7, #12]
1101:main.c        ****     status = I2C_1_MasterClearStatus();
 3501              		.loc 1 1101 0
 3502 0018 FFF7FEFF 		bl	I2C_1_MasterClearStatus
 3503 001c 0346     		mov	r3, r0
 3504 001e FB72     		strb	r3, [r7, #11]
1102:main.c        ****     if(!(status & I2C_1_MSTAT_ERR_XFER))
 3505              		.loc 1 1102 0
 3506 0020 FB7A     		ldrb	r3, [r7, #11]
 3507 0022 DBB2     		uxtb	r3, r3
 3508 0024 5BB2     		sxtb	r3, r3
 3509 0026 002B     		cmp	r3, #0
 3510 0028 29DB     		blt	.L169
1103:main.c        ****     {
1104:main.c        ****         status = I2C_1_MasterWriteBuf(i2CAddr, (uint8 *)&I2Cbuff1, nbytes,
 3511              		.loc 1 1104 0
 3512 002a BB88     		ldrh	r3, [r7, #4]	@ movhi
 3513 002c DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 83


 3514 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 3515 0030 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 3516 0032 1649     		ldr	r1, .L174
 3517 0034 FFF7FEFF 		bl	I2C_1_MasterWriteBuf
 3518 0038 0346     		mov	r3, r0
 3519 003a FB72     		strb	r3, [r7, #11]
1105:main.c        ****                                      mode);
1106:main.c        ****         if(status == I2C_1_MSTR_NO_ERROR)
 3520              		.loc 1 1106 0
 3521 003c FB7A     		ldrb	r3, [r7, #11]
 3522 003e DBB2     		uxtb	r3, r3
 3523 0040 002B     		cmp	r3, #0
 3524 0042 1AD1     		bne	.L170
 3525              	.L172:
1107:main.c        ****         {
1108:main.c        ****             /* wait for write complete and no error */
1109:main.c        ****             do
1110:main.c        ****             {
1111:main.c        ****                 status = I2C_1_MasterStatus();
 3526              		.loc 1 1111 0
 3527 0044 FFF7FEFF 		bl	I2C_1_MasterStatus
 3528 0048 0346     		mov	r3, r0
 3529 004a FB72     		strb	r3, [r7, #11]
1112:main.c        ****                 timeout--;
 3530              		.loc 1 1112 0
 3531 004c FB68     		ldr	r3, [r7, #12]
 3532 004e 013B     		subs	r3, r3, #1
 3533 0050 FB60     		str	r3, [r7, #12]
1113:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 3534              		.loc 1 1113 0
 3535 0052 FB7A     		ldrb	r3, [r7, #11]
1114:main.c        ****                 {
1115:main.c        ****                     //I2C_reset();
1116:main.c        ****                 }
1117:main.c        ****                 if (timeout == 0)
 3536              		.loc 1 1117 0
 3537 0054 FB68     		ldr	r3, [r7, #12]
 3538 0056 002B     		cmp	r3, #0
 3539 0058 01D1     		bne	.L171
1118:main.c        ****                 {
1119:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 3540              		.loc 1 1119 0
 3541 005a 8023     		movs	r3, #128
 3542 005c FB72     		strb	r3, [r7, #11]
 3543              	.L171:
1120:main.c        ****                     //I2C_reset();
1121:main.c        ****                 }
1122:main.c        ****                 /*
1123:main.c        ****                 if (status == 0)
1124:main.c        ****                 {
1125:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
1126:main.c        ****                     I2C_reset();
1127:main.c        ****                 }
1128:main.c        ****                 */
1129:main.c        ****             } while(((status & (I2C_1_MSTAT_WR_CMPLT | I2C_1_MSTAT_ERR_XFER)) == 0u) && (status != 
 3544              		.loc 1 1129 0
 3545 005e FB7A     		ldrb	r3, [r7, #11]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 84


 3546 0060 DBB2     		uxtb	r3, r3
 3547 0062 03F08203 		and	r3, r3, #130
 3548 0066 002B     		cmp	r3, #0
 3549 0068 09D1     		bne	.L169
 3550              		.loc 1 1129 0 is_stmt 0 discriminator 1
 3551 006a FB7A     		ldrb	r3, [r7, #11]
 3552 006c DBB2     		uxtb	r3, r3
 3553 006e 002B     		cmp	r3, #0
 3554 0070 05D0     		beq	.L169
 3555              		.loc 1 1129 0 discriminator 2
 3556 0072 FB68     		ldr	r3, [r7, #12]
 3557 0074 002B     		cmp	r3, #0
 3558 0076 E5D1     		bne	.L172
 3559 0078 01E0     		b	.L169
 3560              	.L170:
1130:main.c        ****         }
1131:main.c        ****         else
1132:main.c        ****         {
1133:main.c        ****             /* translate from I2CM_MasterWriteBuf() error output to
1134:main.c        ****             *  I2CM_MasterStatus() error output */
1135:main.c        ****             status = I2C_1_MSTAT_ERR_XFER;
 3561              		.loc 1 1135 0 is_stmt 1
 3562 007a 8023     		movs	r3, #128
 3563 007c FB72     		strb	r3, [r7, #11]
 3564              	.L169:
1136:main.c        ****             //I2C_reset();
1137:main.c        ****         } 
1138:main.c        ****     }  
1139:main.c        ****     return status;
 3565              		.loc 1 1139 0
 3566 007e FB7A     		ldrb	r3, [r7, #11]
 3567 0080 DBB2     		uxtb	r3, r3
1140:main.c        **** }
 3568              		.loc 1 1140 0
 3569 0082 1846     		mov	r0, r3
 3570 0084 1037     		adds	r7, r7, #16
 3571              		.cfi_def_cfa_offset 8
 3572 0086 BD46     		mov	sp, r7
 3573              		.cfi_def_cfa_register 13
 3574              		@ sp needed
 3575 0088 80BD     		pop	{r7, pc}
 3576              	.L175:
 3577 008a 00BF     		.align	2
 3578              	.L174:
 3579 008c 00000000 		.word	I2Cbuff1
 3580              		.cfi_endproc
 3581              	.LFE83:
 3582              		.size	I2C_MasterWriteBlocking, .-I2C_MasterWriteBlocking
 3583              		.global	counter2
 3584              		.data
 3585 0062 0000     		.align	2
 3586              		.type	counter2, %object
 3587              		.size	counter2, 4
 3588              	counter2:
 3589 0064 01000000 		.word	1
 3590              		.section	.text.handleNotes,"ax",%progbits
 3591              		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 85


 3592              		.global	handleNotes
 3593              		.thumb
 3594              		.thumb_func
 3595              		.type	handleNotes, %function
 3596              	handleNotes:
 3597              	.LFB84:
1141:main.c        **** 
1142:main.c        **** //velocity comes in as a 16 bit number from 0-65*** 
1143:main.c        **** //not in decibels, raw amplitude value
1144:main.c        **** int counter2 = 1;
1145:main.c        **** void handleNotes(int note, int velocity, int string)
1146:main.c        **** {
 3598              		.loc 1 1146 0
 3599              		.cfi_startproc
 3600              		@ args = 0, pretend = 0, frame = 32
 3601              		@ frame_needed = 1, uses_anonymous_args = 0
 3602 0000 90B5     		push	{r4, r7, lr}
 3603              		.cfi_def_cfa_offset 12
 3604              		.cfi_offset 4, -12
 3605              		.cfi_offset 7, -8
 3606              		.cfi_offset 14, -4
 3607 0002 89B0     		sub	sp, sp, #36
 3608              		.cfi_def_cfa_offset 48
 3609 0004 00AF     		add	r7, sp, #0
 3610              		.cfi_def_cfa_register 7
 3611 0006 F860     		str	r0, [r7, #12]
 3612 0008 B960     		str	r1, [r7, #8]
 3613 000a 7A60     		str	r2, [r7, #4]
1147:main.c        ****     //static int counter = 1;
1148:main.c        ****     //velocity = (counter2 * 6553);
1149:main.c        ****     //counter2 = (counter2 + 1) % 10;
1150:main.c        ****     if (velocity > 0)
 3614              		.loc 1 1150 0
 3615 000c BB68     		ldr	r3, [r7, #8]
 3616 000e 002B     		cmp	r3, #0
 3617 0010 25DD     		ble	.L177
 3618              	.LBB8:
1151:main.c        ****     {
1152:main.c        ****         //velocity = (((sqrtf((float)velocity) * 0.00001525878903f) - .0239372430f) * 130.114584436
1153:main.c        ****         float tempVel = (float)velocity;
 3619              		.loc 1 1153 0
 3620 0012 B868     		ldr	r0, [r7, #8]
 3621 0014 FFF7FEFF 		bl	__aeabi_i2f
 3622 0018 0346     		mov	r3, r0
 3623 001a 3B61     		str	r3, [r7, #16]	@ float
1154:main.c        ****         tempVel = tempVel * 0.00001525878903f;
 3624              		.loc 1 1154 0
 3625 001c 4FF05E51 		mov	r1, #931135488
 3626 0020 3869     		ldr	r0, [r7, #16]	@ float
 3627 0022 FFF7FEFF 		bl	__aeabi_fmul
 3628 0026 0346     		mov	r3, r0
 3629 0028 3B61     		str	r3, [r7, #16]	@ float
1155:main.c        ****         tempVel = sqrtf(tempVel);
 3630              		.loc 1 1155 0
 3631 002a 3869     		ldr	r0, [r7, #16]	@ float
 3632 002c FFF7FEFF 		bl	sqrtf
 3633 0030 3861     		str	r0, [r7, #16]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 86


1156:main.c        ****         tempVel = tempVel - 0.0239372430f;
 3634              		.loc 1 1156 0
 3635 0032 8049     		ldr	r1, .L192
 3636 0034 3869     		ldr	r0, [r7, #16]	@ float
 3637 0036 FFF7FEFF 		bl	__aeabi_fsub
 3638 003a 0346     		mov	r3, r0
 3639 003c 3B61     		str	r3, [r7, #16]	@ float
1157:main.c        ****         tempVel = tempVel * 130.114584436252734f;
 3640              		.loc 1 1157 0
 3641 003e 7E49     		ldr	r1, .L192+4
 3642 0040 3869     		ldr	r0, [r7, #16]	@ float
 3643 0042 FFF7FEFF 		bl	__aeabi_fmul
 3644 0046 0346     		mov	r3, r0
 3645 0048 3B61     		str	r3, [r7, #16]	@ float
1158:main.c        ****         velocity = (int)tempVel;
 3646              		.loc 1 1158 0
 3647 004a 3869     		ldr	r0, [r7, #16]	@ float
 3648 004c FFF7FEFF 		bl	__aeabi_f2iz
 3649 0050 0346     		mov	r3, r0
 3650 0052 BB60     		str	r3, [r7, #8]
1159:main.c        ****         
1160:main.c        **** 
1161:main.c        ****         if (velocity > 127)
 3651              		.loc 1 1161 0
 3652 0054 BB68     		ldr	r3, [r7, #8]
 3653 0056 7F2B     		cmp	r3, #127
 3654 0058 01DD     		ble	.L177
1162:main.c        ****         {
1163:main.c        ****             velocity = 127;
 3655              		.loc 1 1163 0
 3656 005a 7F23     		movs	r3, #127
 3657 005c BB60     		str	r3, [r7, #8]
 3658              	.L177:
 3659              	.LBE8:
1164:main.c        ****         }
1165:main.c        ****         
1166:main.c        ****     }
1167:main.c        ****     if (polyMode)
 3660              		.loc 1 1167 0
 3661 005e 774B     		ldr	r3, .L192+8
 3662 0060 1B68     		ldr	r3, [r3]
 3663 0062 002B     		cmp	r3, #0
 3664 0064 07D0     		beq	.L178
1168:main.c        ****     {
1169:main.c        ****         sendMIDINoteOn(note, velocity, string+1);
 3665              		.loc 1 1169 0
 3666 0066 7B68     		ldr	r3, [r7, #4]
 3667 0068 0133     		adds	r3, r3, #1
 3668 006a 1A46     		mov	r2, r3
 3669 006c B968     		ldr	r1, [r7, #8]
 3670 006e F868     		ldr	r0, [r7, #12]
 3671 0070 FFF7FEFF 		bl	sendMIDINoteOn
1170:main.c        ****     }
1171:main.c        ****     else
1172:main.c        ****     {
1173:main.c        ****         int loudestSoundingNote = 0;
1174:main.c        ****         if (velocity > 0)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 87


1175:main.c        ****         {
1176:main.c        ****             // find the loudest currently sounding note
1177:main.c        ****             for (int i = 0; i < 4; i++)
1178:main.c        ****             {
1179:main.c        ****                 if (stringStates[i][1] > loudestSoundingNote)
1180:main.c        ****                 {
1181:main.c        ****                     loudestSoundingNote = stringStates[i][1];
1182:main.c        ****                     loudestString = i;
1183:main.c        ****                 }
1184:main.c        ****             }
1185:main.c        ****             //make sure if there is a sounding note that this one is not much lower velocity
1186:main.c        ****             //(would maybe mean this is just sympathetic bridge resonance and shouldn't interrupt t
1187:main.c        ****             // maybe need more complexity in time since attack? // or maybe do active suppression i
1188:main.c        ****             if ((velocity >= (loudestSoundingNote - 25)) || (velocity > 35))
1189:main.c        ****             {
1190:main.c        ****                 for (int i = 0; i < 4; i++)
1191:main.c        ****                 {
1192:main.c        ****                     if (stringStates[i][0] >= 0)
1193:main.c        ****                     {
1194:main.c        **** 
1195:main.c        ****                         sendMIDINoteOn(stringStates[i][0], 0, 0);
1196:main.c        ****                         stringStates[i][0] = -1;
1197:main.c        ****                         stringStates[i][1] = 0;
1198:main.c        ****                     }
1199:main.c        ****                     openStringCount[i] = 10;
1200:main.c        ****                 }
1201:main.c        ****                 timeSinceLastAttack = 0;
1202:main.c        ****                 stringStates[string][0] = note;
1203:main.c        ****                 stringStates[string][1] = velocity;
1204:main.c        ****                  pitchFreeze[string] = 0;
1205:main.c        ****                 sendMIDINoteOn(note, velocity, 0);
1206:main.c        ****                  LHMuteCounter[i] = 0;
1207:main.c        ****                  LHMute[i] = 0;
1208:main.c        ****             }
1209:main.c        ****             else
1210:main.c        ****             {
1211:main.c        ****                 skippedNotes[skipPointer][0] = note;
1212:main.c        ****                 skippedNotes[skipPointer][1] = velocity;
1213:main.c        ****                 skippedNotes[skipPointer][2] = loudestSoundingNote;
1214:main.c        ****                 skippedNotes[skipPointer][3] = loudestString;
1215:main.c        ****                 skippedNotes[skipPointer][4] = string;
1216:main.c        ****                 skipPointer = (skipPointer + 1) & 31;
1217:main.c        ****             }
1218:main.c        ****             #if 0
1219:main.c        ****             else if (timeSinceLastAttack > 500)
1220:main.c        ****             {
1221:main.c        ****                 for (int i = 0; i < 4; i++)
1222:main.c        ****                 {
1223:main.c        ****                     if (stringStates[i][0] >= 0)
1224:main.c        ****                     {
1225:main.c        **** 
1226:main.c        ****                         sendMIDINoteOn(stringStates[i][0], 0, 0);
1227:main.c        ****                         stringStates[i][0] = -1;
1228:main.c        ****                     }
1229:main.c        ****                     openStringCount[i] = 10;
1230:main.c        ****                 }
1231:main.c        ****                 timeSinceLastAttack = 0;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 88


1232:main.c        ****                 stringStates[string][0] = note;
1233:main.c        ****                 stringStates[string][1] = velocity;
1234:main.c        ****                  pitchFreeze[string] = 0;
1235:main.c        ****                 sendMIDINoteOn(note, velocity, 0);
1236:main.c        ****             
1237:main.c        ****             }
1238:main.c        ****             #endif
1239:main.c        ****         }
1240:main.c        ****         else
1241:main.c        ****         {
1242:main.c        ****             if (stringStates[string][0] > 0)
1243:main.c        ****             {
1244:main.c        ****                 sendMIDINoteOn(stringStates[string][0], 0, 0);
1245:main.c        ****             }
1246:main.c        ****             stringStates[string][0] = -1;
1247:main.c        ****             stringStates[string][1] = 0;
1248:main.c        ****             pitchFreeze[string] = 0;
1249:main.c        ****         }
1250:main.c        ****     }       
1251:main.c        **** }...
 3672              		.loc 1 1251 0
 3673 0074 DAE0     		b	.L191
 3674              	.L178:
 3675              	.LBB9:
1173:main.c        ****         int loudestSoundingNote = 0;
 3676              		.loc 1 1173 0
 3677 0076 0023     		movs	r3, #0
 3678 0078 FB61     		str	r3, [r7, #28]
1174:main.c        ****         if (velocity > 0)
 3679              		.loc 1 1174 0
 3680 007a BB68     		ldr	r3, [r7, #8]
 3681 007c 002B     		cmp	r3, #0
 3682 007e 40F3B580 		ble	.L180
 3683              	.LBB10:
1177:main.c        ****             for (int i = 0; i < 4; i++)
 3684              		.loc 1 1177 0
 3685 0082 0023     		movs	r3, #0
 3686 0084 BB61     		str	r3, [r7, #24]
 3687 0086 13E0     		b	.L181
 3688              	.L183:
1179:main.c        ****                 if (stringStates[i][1] > loudestSoundingNote)
 3689              		.loc 1 1179 0
 3690 0088 6D4A     		ldr	r2, .L192+12
 3691 008a BB69     		ldr	r3, [r7, #24]
 3692 008c DB00     		lsls	r3, r3, #3
 3693 008e 1344     		add	r3, r3, r2
 3694 0090 5A68     		ldr	r2, [r3, #4]
 3695 0092 FB69     		ldr	r3, [r7, #28]
 3696 0094 9A42     		cmp	r2, r3
 3697 0096 08DD     		ble	.L182
1181:main.c        ****                     loudestSoundingNote = stringStates[i][1];
 3698              		.loc 1 1181 0
 3699 0098 694A     		ldr	r2, .L192+12
 3700 009a BB69     		ldr	r3, [r7, #24]
 3701 009c DB00     		lsls	r3, r3, #3
 3702 009e 1344     		add	r3, r3, r2
 3703 00a0 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 89


 3704 00a2 FB61     		str	r3, [r7, #28]
1182:main.c        ****                     loudestString = i;
 3705              		.loc 1 1182 0
 3706 00a4 674A     		ldr	r2, .L192+16
 3707 00a6 BB69     		ldr	r3, [r7, #24]
 3708 00a8 1360     		str	r3, [r2]
 3709              	.L182:
1177:main.c        ****             for (int i = 0; i < 4; i++)
 3710              		.loc 1 1177 0 discriminator 2
 3711 00aa BB69     		ldr	r3, [r7, #24]
 3712 00ac 0133     		adds	r3, r3, #1
 3713 00ae BB61     		str	r3, [r7, #24]
 3714              	.L181:
1177:main.c        ****             for (int i = 0; i < 4; i++)
 3715              		.loc 1 1177 0 is_stmt 0 discriminator 1
 3716 00b0 BB69     		ldr	r3, [r7, #24]
 3717 00b2 032B     		cmp	r3, #3
 3718 00b4 E8DD     		ble	.L183
 3719              	.LBE10:
1188:main.c        ****             if ((velocity >= (loudestSoundingNote - 25)) || (velocity > 35))
 3720              		.loc 1 1188 0 is_stmt 1
 3721 00b6 FB69     		ldr	r3, [r7, #28]
 3722 00b8 A3F11902 		sub	r2, r3, #25
 3723 00bc BB68     		ldr	r3, [r7, #8]
 3724 00be 9A42     		cmp	r2, r3
 3725 00c0 02DD     		ble	.L184
1188:main.c        ****             if ((velocity >= (loudestSoundingNote - 25)) || (velocity > 35))
 3726              		.loc 1 1188 0 is_stmt 0 discriminator 1
 3727 00c2 BB68     		ldr	r3, [r7, #8]
 3728 00c4 232B     		cmp	r3, #35
 3729 00c6 52DD     		ble	.L185
 3730              	.L184:
 3731              	.LBB11:
1190:main.c        ****                 for (int i = 0; i < 4; i++)
 3732              		.loc 1 1190 0 is_stmt 1
 3733 00c8 0023     		movs	r3, #0
 3734 00ca 7B61     		str	r3, [r7, #20]
 3735 00cc 22E0     		b	.L186
 3736              	.L188:
1192:main.c        ****                     if (stringStates[i][0] >= 0)
 3737              		.loc 1 1192 0
 3738 00ce 5C4A     		ldr	r2, .L192+12
 3739 00d0 7B69     		ldr	r3, [r7, #20]
 3740 00d2 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3741 00d6 002B     		cmp	r3, #0
 3742 00d8 14DB     		blt	.L187
1195:main.c        ****                         sendMIDINoteOn(stringStates[i][0], 0, 0);
 3743              		.loc 1 1195 0
 3744 00da 594A     		ldr	r2, .L192+12
 3745 00dc 7B69     		ldr	r3, [r7, #20]
 3746 00de 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3747 00e2 0022     		movs	r2, #0
 3748 00e4 0021     		movs	r1, #0
 3749 00e6 1846     		mov	r0, r3
 3750 00e8 FFF7FEFF 		bl	sendMIDINoteOn
1196:main.c        ****                         stringStates[i][0] = -1;
 3751              		.loc 1 1196 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 90


 3752 00ec 544A     		ldr	r2, .L192+12
 3753 00ee 7B69     		ldr	r3, [r7, #20]
 3754 00f0 4FF0FF31 		mov	r1, #-1
 3755 00f4 42F83310 		str	r1, [r2, r3, lsl #3]
1197:main.c        ****                         stringStates[i][1] = 0;
 3756              		.loc 1 1197 0
 3757 00f8 514A     		ldr	r2, .L192+12
 3758 00fa 7B69     		ldr	r3, [r7, #20]
 3759 00fc DB00     		lsls	r3, r3, #3
 3760 00fe 1344     		add	r3, r3, r2
 3761 0100 0022     		movs	r2, #0
 3762 0102 5A60     		str	r2, [r3, #4]
 3763              	.L187:
1199:main.c        ****                     openStringCount[i] = 10;
 3764              		.loc 1 1199 0 discriminator 2
 3765 0104 504A     		ldr	r2, .L192+20
 3766 0106 7B69     		ldr	r3, [r7, #20]
 3767 0108 0A21     		movs	r1, #10
 3768 010a 42F82310 		str	r1, [r2, r3, lsl #2]
1190:main.c        ****                 for (int i = 0; i < 4; i++)
 3769              		.loc 1 1190 0 discriminator 2
 3770 010e 7B69     		ldr	r3, [r7, #20]
 3771 0110 0133     		adds	r3, r3, #1
 3772 0112 7B61     		str	r3, [r7, #20]
 3773              	.L186:
1190:main.c        ****                 for (int i = 0; i < 4; i++)
 3774              		.loc 1 1190 0 is_stmt 0 discriminator 1
 3775 0114 7B69     		ldr	r3, [r7, #20]
 3776 0116 032B     		cmp	r3, #3
 3777 0118 D9DD     		ble	.L188
 3778              	.LBE11:
1201:main.c        ****                 timeSinceLastAttack = 0;
 3779              		.loc 1 1201 0 is_stmt 1
 3780 011a 4C4A     		ldr	r2, .L192+24
 3781 011c 4FF00003 		mov	r3, #0
 3782 0120 4FF00004 		mov	r4, #0
 3783 0124 C2E90034 		strd	r3, [r2]
1202:main.c        ****                 stringStates[string][0] = note;
 3784              		.loc 1 1202 0
 3785 0128 4549     		ldr	r1, .L192+12
 3786 012a 7B68     		ldr	r3, [r7, #4]
 3787 012c FA68     		ldr	r2, [r7, #12]
 3788 012e 41F83320 		str	r2, [r1, r3, lsl #3]
1203:main.c        ****                 stringStates[string][1] = velocity;
 3789              		.loc 1 1203 0
 3790 0132 434A     		ldr	r2, .L192+12
 3791 0134 7B68     		ldr	r3, [r7, #4]
 3792 0136 DB00     		lsls	r3, r3, #3
 3793 0138 1344     		add	r3, r3, r2
 3794 013a BA68     		ldr	r2, [r7, #8]
 3795 013c 5A60     		str	r2, [r3, #4]
1204:main.c        ****                  pitchFreeze[string] = 0;
 3796              		.loc 1 1204 0
 3797 013e 444A     		ldr	r2, .L192+28
 3798 0140 7B68     		ldr	r3, [r7, #4]
 3799 0142 1344     		add	r3, r3, r2
 3800 0144 0022     		movs	r2, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 91


 3801 0146 1A70     		strb	r2, [r3]
1205:main.c        ****                 sendMIDINoteOn(note, velocity, 0);
 3802              		.loc 1 1205 0
 3803 0148 0022     		movs	r2, #0
 3804 014a B968     		ldr	r1, [r7, #8]
 3805 014c F868     		ldr	r0, [r7, #12]
 3806 014e FFF7FEFF 		bl	sendMIDINoteOn
1206:main.c        ****                  LHMuteCounter[i] = 0;
 3807              		.loc 1 1206 0
 3808 0152 404B     		ldr	r3, .L192+32
 3809 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3810 0156 1946     		mov	r1, r3
 3811 0158 3F4B     		ldr	r3, .L192+36
 3812 015a 0022     		movs	r2, #0
 3813 015c 43F82120 		str	r2, [r3, r1, lsl #2]
1207:main.c        ****                  LHMute[i] = 0;
 3814              		.loc 1 1207 0
 3815 0160 3C4B     		ldr	r3, .L192+32
 3816 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3817 0164 1A46     		mov	r2, r3
 3818 0166 3D4B     		ldr	r3, .L192+40
 3819 0168 0021     		movs	r1, #0
 3820 016a 9954     		strb	r1, [r3, r2]
 3821              	.LBE9:
 3822              		.loc 1 1251 0
 3823 016c 5EE0     		b	.L191
 3824              	.L185:
 3825              	.LBB12:
1211:main.c        ****                 skippedNotes[skipPointer][0] = note;
 3826              		.loc 1 1211 0
 3827 016e 3C4B     		ldr	r3, .L192+44
 3828 0170 1A68     		ldr	r2, [r3]
 3829 0172 3C49     		ldr	r1, .L192+48
 3830 0174 1346     		mov	r3, r2
 3831 0176 9B00     		lsls	r3, r3, #2
 3832 0178 1344     		add	r3, r3, r2
 3833 017a 9B00     		lsls	r3, r3, #2
 3834 017c 0B44     		add	r3, r3, r1
 3835 017e FA68     		ldr	r2, [r7, #12]
 3836 0180 1A60     		str	r2, [r3]
1212:main.c        ****                 skippedNotes[skipPointer][1] = velocity;
 3837              		.loc 1 1212 0
 3838 0182 374B     		ldr	r3, .L192+44
 3839 0184 1A68     		ldr	r2, [r3]
 3840 0186 3749     		ldr	r1, .L192+48
 3841 0188 1346     		mov	r3, r2
 3842 018a 9B00     		lsls	r3, r3, #2
 3843 018c 1344     		add	r3, r3, r2
 3844 018e 9B00     		lsls	r3, r3, #2
 3845 0190 0B44     		add	r3, r3, r1
 3846 0192 0433     		adds	r3, r3, #4
 3847 0194 BA68     		ldr	r2, [r7, #8]
 3848 0196 1A60     		str	r2, [r3]
1213:main.c        ****                 skippedNotes[skipPointer][2] = loudestSoundingNote;
 3849              		.loc 1 1213 0
 3850 0198 314B     		ldr	r3, .L192+44
 3851 019a 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 92


 3852 019c 3149     		ldr	r1, .L192+48
 3853 019e 1346     		mov	r3, r2
 3854 01a0 9B00     		lsls	r3, r3, #2
 3855 01a2 1344     		add	r3, r3, r2
 3856 01a4 9B00     		lsls	r3, r3, #2
 3857 01a6 0B44     		add	r3, r3, r1
 3858 01a8 0833     		adds	r3, r3, #8
 3859 01aa FA69     		ldr	r2, [r7, #28]
 3860 01ac 1A60     		str	r2, [r3]
1214:main.c        ****                 skippedNotes[skipPointer][3] = loudestString;
 3861              		.loc 1 1214 0
 3862 01ae 2C4B     		ldr	r3, .L192+44
 3863 01b0 1A68     		ldr	r2, [r3]
 3864 01b2 244B     		ldr	r3, .L192+16
 3865 01b4 1968     		ldr	r1, [r3]
 3866 01b6 2B48     		ldr	r0, .L192+48
 3867 01b8 1346     		mov	r3, r2
 3868 01ba 9B00     		lsls	r3, r3, #2
 3869 01bc 1344     		add	r3, r3, r2
 3870 01be 9B00     		lsls	r3, r3, #2
 3871 01c0 0344     		add	r3, r3, r0
 3872 01c2 0C33     		adds	r3, r3, #12
 3873 01c4 1960     		str	r1, [r3]
1215:main.c        ****                 skippedNotes[skipPointer][4] = string;
 3874              		.loc 1 1215 0
 3875 01c6 264B     		ldr	r3, .L192+44
 3876 01c8 1A68     		ldr	r2, [r3]
 3877 01ca 2649     		ldr	r1, .L192+48
 3878 01cc 1346     		mov	r3, r2
 3879 01ce 9B00     		lsls	r3, r3, #2
 3880 01d0 1344     		add	r3, r3, r2
 3881 01d2 9B00     		lsls	r3, r3, #2
 3882 01d4 0B44     		add	r3, r3, r1
 3883 01d6 1033     		adds	r3, r3, #16
 3884 01d8 7A68     		ldr	r2, [r7, #4]
 3885 01da 1A60     		str	r2, [r3]
1216:main.c        ****                 skipPointer = (skipPointer + 1) & 31;
 3886              		.loc 1 1216 0
 3887 01dc 204B     		ldr	r3, .L192+44
 3888 01de 1B68     		ldr	r3, [r3]
 3889 01e0 0133     		adds	r3, r3, #1
 3890 01e2 03F01F03 		and	r3, r3, #31
 3891 01e6 1E4A     		ldr	r2, .L192+44
 3892 01e8 1360     		str	r3, [r2]
 3893              	.LBE12:
 3894              		.loc 1 1251 0
 3895 01ea 1FE0     		b	.L191
 3896              	.L180:
 3897              	.LBB13:
1242:main.c        ****             if (stringStates[string][0] > 0)
 3898              		.loc 1 1242 0
 3899 01ec 144A     		ldr	r2, .L192+12
 3900 01ee 7B68     		ldr	r3, [r7, #4]
 3901 01f0 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3902 01f4 002B     		cmp	r3, #0
 3903 01f6 08DD     		ble	.L190
1244:main.c        ****                 sendMIDINoteOn(stringStates[string][0], 0, 0);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 93


 3904              		.loc 1 1244 0
 3905 01f8 114A     		ldr	r2, .L192+12
 3906 01fa 7B68     		ldr	r3, [r7, #4]
 3907 01fc 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3908 0200 0022     		movs	r2, #0
 3909 0202 0021     		movs	r1, #0
 3910 0204 1846     		mov	r0, r3
 3911 0206 FFF7FEFF 		bl	sendMIDINoteOn
 3912              	.L190:
1246:main.c        ****             stringStates[string][0] = -1;
 3913              		.loc 1 1246 0
 3914 020a 0D4A     		ldr	r2, .L192+12
 3915 020c 7B68     		ldr	r3, [r7, #4]
 3916 020e 4FF0FF31 		mov	r1, #-1
 3917 0212 42F83310 		str	r1, [r2, r3, lsl #3]
1247:main.c        ****             stringStates[string][1] = 0;
 3918              		.loc 1 1247 0
 3919 0216 0A4A     		ldr	r2, .L192+12
 3920 0218 7B68     		ldr	r3, [r7, #4]
 3921 021a DB00     		lsls	r3, r3, #3
 3922 021c 1344     		add	r3, r3, r2
 3923 021e 0022     		movs	r2, #0
 3924 0220 5A60     		str	r2, [r3, #4]
1248:main.c        ****             pitchFreeze[string] = 0;
 3925              		.loc 1 1248 0
 3926 0222 0B4A     		ldr	r2, .L192+28
 3927 0224 7B68     		ldr	r3, [r7, #4]
 3928 0226 1344     		add	r3, r3, r2
 3929 0228 0022     		movs	r2, #0
 3930 022a 1A70     		strb	r2, [r3]
 3931              	.L191:
 3932              	.LBE13:
 3933              		.loc 1 1251 0
 3934 022c 00BF     		nop
 3935 022e 2437     		adds	r7, r7, #36
 3936              		.cfi_def_cfa_offset 12
 3937 0230 BD46     		mov	sp, r7
 3938              		.cfi_def_cfa_register 13
 3939              		@ sp needed
 3940 0232 90BD     		pop	{r4, r7, pc}
 3941              	.L193:
 3942              		.align	2
 3943              	.L192:
 3944 0234 0918C43C 		.word	1019484169
 3945 0238 551D0243 		.word	1124212053
 3946 023c 00000000 		.word	polyMode
 3947 0240 00000000 		.word	stringStates
 3948 0244 00000000 		.word	loudestString
 3949 0248 00000000 		.word	openStringCount
 3950 024c 00000000 		.word	timeSinceLastAttack
 3951 0250 00000000 		.word	pitchFreeze
 3952 0254 00000000 		.word	i
 3953 0258 00000000 		.word	LHMuteCounter
 3954 025c 00000000 		.word	LHMute
 3955 0260 00000000 		.word	skipPointer
 3956 0264 00000000 		.word	skippedNotes
 3957              		.cfi_endproc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 94


 3958              	.LFE84:
 3959              		.size	handleNotes, .-handleNotes
 3960              		.text
 3961              	.Letext0:
 3962              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3963              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3964              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3965              		.file 5 "Generated_Source\\PSoC5/cy_em_eeprom.h"
 3966              		.file 6 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3967              		.file 7 "Generated_Source\\PSoC5/CapSense_CSHL.h"
 3968              		.file 8 "Generated_Source\\PSoC5/USB_midi.h"
 3969              		.file 9 "Generated_Source\\PSoC5/Em_EEPROM.h"
 3970              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 3971              		.section	.debug_info,"",%progbits
 3972              	.Ldebug_info0:
 3973 0000 EB0F0000 		.4byte	0xfeb
 3974 0004 0400     		.2byte	0x4
 3975 0006 00000000 		.4byte	.Ldebug_abbrev0
 3976 000a 04       		.byte	0x4
 3977 000b 01       		.uleb128 0x1
 3978 000c 3A010000 		.4byte	.LASF194
 3979 0010 0C       		.byte	0xc
 3980 0011 60000000 		.4byte	.LASF195
 3981 0015 A0000000 		.4byte	.LASF196
 3982 0019 20000000 		.4byte	.Ldebug_ranges0+0x20
 3983 001d 00000000 		.4byte	0
 3984 0021 00000000 		.4byte	.Ldebug_line0
 3985 0025 02       		.uleb128 0x2
 3986 0026 01       		.byte	0x1
 3987 0027 06       		.byte	0x6
 3988 0028 87090000 		.4byte	.LASF0
 3989 002c 03       		.uleb128 0x3
 3990 002d CD070000 		.4byte	.LASF3
 3991 0031 02       		.byte	0x2
 3992 0032 1D       		.byte	0x1d
 3993 0033 37000000 		.4byte	0x37
 3994 0037 02       		.uleb128 0x2
 3995 0038 01       		.byte	0x1
 3996 0039 08       		.byte	0x8
 3997 003a E7080000 		.4byte	.LASF1
 3998 003e 02       		.uleb128 0x2
 3999 003f 02       		.byte	0x2
 4000 0040 05       		.byte	0x5
 4001 0041 24070000 		.4byte	.LASF2
 4002 0045 03       		.uleb128 0x3
 4003 0046 76030000 		.4byte	.LASF4
 4004 004a 02       		.byte	0x2
 4005 004b 2B       		.byte	0x2b
 4006 004c 50000000 		.4byte	0x50
 4007 0050 02       		.uleb128 0x2
 4008 0051 02       		.byte	0x2
 4009 0052 07       		.byte	0x7
 4010 0053 93090000 		.4byte	.LASF5
 4011 0057 03       		.uleb128 0x3
 4012 0058 0F010000 		.4byte	.LASF6
 4013 005c 02       		.byte	0x2
 4014 005d 3F       		.byte	0x3f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 95


 4015 005e 62000000 		.4byte	0x62
 4016 0062 02       		.uleb128 0x2
 4017 0063 04       		.byte	0x4
 4018 0064 05       		.byte	0x5
 4019 0065 34070000 		.4byte	.LASF7
 4020 0069 03       		.uleb128 0x3
 4021 006a F5080000 		.4byte	.LASF8
 4022 006e 02       		.byte	0x2
 4023 006f 41       		.byte	0x41
 4024 0070 74000000 		.4byte	0x74
 4025 0074 02       		.uleb128 0x2
 4026 0075 04       		.byte	0x4
 4027 0076 07       		.byte	0x7
 4028 0077 31080000 		.4byte	.LASF9
 4029 007b 03       		.uleb128 0x3
 4030 007c 58060000 		.4byte	.LASF10
 4031 0080 02       		.byte	0x2
 4032 0081 59       		.byte	0x59
 4033 0082 86000000 		.4byte	0x86
 4034 0086 02       		.uleb128 0x2
 4035 0087 08       		.byte	0x8
 4036 0088 05       		.byte	0x5
 4037 0089 6F050000 		.4byte	.LASF11
 4038 008d 02       		.uleb128 0x2
 4039 008e 08       		.byte	0x8
 4040 008f 07       		.byte	0x7
 4041 0090 FF020000 		.4byte	.LASF12
 4042 0094 04       		.uleb128 0x4
 4043 0095 04       		.byte	0x4
 4044 0096 05       		.byte	0x5
 4045 0097 696E7400 		.ascii	"int\000"
 4046 009b 02       		.uleb128 0x2
 4047 009c 04       		.byte	0x4
 4048 009d 07       		.byte	0x7
 4049 009e 93000000 		.4byte	.LASF13
 4050 00a2 03       		.uleb128 0x3
 4051 00a3 11050000 		.4byte	.LASF14
 4052 00a7 03       		.byte	0x3
 4053 00a8 18       		.byte	0x18
 4054 00a9 2C000000 		.4byte	0x2c
 4055 00ad 03       		.uleb128 0x3
 4056 00ae 7E060000 		.4byte	.LASF15
 4057 00b2 03       		.byte	0x3
 4058 00b3 24       		.byte	0x24
 4059 00b4 45000000 		.4byte	0x45
 4060 00b8 03       		.uleb128 0x3
 4061 00b9 7C080000 		.4byte	.LASF16
 4062 00bd 03       		.byte	0x3
 4063 00be 2C       		.byte	0x2c
 4064 00bf 57000000 		.4byte	0x57
 4065 00c3 03       		.uleb128 0x3
 4066 00c4 7E020000 		.4byte	.LASF17
 4067 00c8 03       		.byte	0x3
 4068 00c9 30       		.byte	0x30
 4069 00ca 69000000 		.4byte	0x69
 4070 00ce 03       		.uleb128 0x3
 4071 00cf DD030000 		.4byte	.LASF18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 96


 4072 00d3 03       		.byte	0x3
 4073 00d4 38       		.byte	0x38
 4074 00d5 7B000000 		.4byte	0x7b
 4075 00d9 05       		.uleb128 0x5
 4076 00da D5090000 		.4byte	.LASF19
 4077 00de 04       		.byte	0x4
 4078 00df E401     		.2byte	0x1e4
 4079 00e1 37000000 		.4byte	0x37
 4080 00e5 05       		.uleb128 0x5
 4081 00e6 EE040000 		.4byte	.LASF20
 4082 00ea 04       		.byte	0x4
 4083 00eb E501     		.2byte	0x1e5
 4084 00ed 50000000 		.4byte	0x50
 4085 00f1 05       		.uleb128 0x5
 4086 00f2 00060000 		.4byte	.LASF21
 4087 00f6 04       		.byte	0x4
 4088 00f7 E601     		.2byte	0x1e6
 4089 00f9 74000000 		.4byte	0x74
 4090 00fd 05       		.uleb128 0x5
 4091 00fe A9020000 		.4byte	.LASF22
 4092 0102 04       		.byte	0x4
 4093 0103 E901     		.2byte	0x1e9
 4094 0105 62000000 		.4byte	0x62
 4095 0109 02       		.uleb128 0x2
 4096 010a 04       		.byte	0x4
 4097 010b 04       		.byte	0x4
 4098 010c A3020000 		.4byte	.LASF23
 4099 0110 02       		.uleb128 0x2
 4100 0111 08       		.byte	0x8
 4101 0112 04       		.byte	0x4
 4102 0113 DB090000 		.4byte	.LASF24
 4103 0117 02       		.uleb128 0x2
 4104 0118 01       		.byte	0x1
 4105 0119 08       		.byte	0x8
 4106 011a B9040000 		.4byte	.LASF25
 4107 011e 05       		.uleb128 0x5
 4108 011f CD080000 		.4byte	.LASF26
 4109 0123 04       		.byte	0x4
 4110 0124 8602     		.2byte	0x286
 4111 0126 74000000 		.4byte	0x74
 4112 012a 05       		.uleb128 0x5
 4113 012b 19010000 		.4byte	.LASF27
 4114 012f 04       		.byte	0x4
 4115 0130 8E02     		.2byte	0x28e
 4116 0132 36010000 		.4byte	0x136
 4117 0136 06       		.uleb128 0x6
 4118 0137 D9000000 		.4byte	0xd9
 4119 013b 02       		.uleb128 0x2
 4120 013c 08       		.byte	0x8
 4121 013d 04       		.byte	0x4
 4122 013e 62060000 		.4byte	.LASF28
 4123 0142 02       		.uleb128 0x2
 4124 0143 04       		.byte	0x4
 4125 0144 07       		.byte	0x7
 4126 0145 15080000 		.4byte	.LASF29
 4127 0149 07       		.uleb128 0x7
 4128 014a D9000000 		.4byte	0xd9
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 97


 4129 014e 59010000 		.4byte	0x159
 4130 0152 08       		.uleb128 0x8
 4131 0153 42010000 		.4byte	0x142
 4132 0157 03       		.byte	0x3
 4133 0158 00       		.byte	0
 4134 0159 09       		.uleb128 0x9
 4135 015a 1C       		.byte	0x1c
 4136 015b 05       		.byte	0x5
 4137 015c 1601     		.2byte	0x116
 4138 015e CB010000 		.4byte	0x1cb
 4139 0162 0A       		.uleb128 0xa
 4140 0163 32050000 		.4byte	.LASF30
 4141 0167 05       		.byte	0x5
 4142 0168 1B01     		.2byte	0x11b
 4143 016a F1000000 		.4byte	0xf1
 4144 016e 00       		.byte	0
 4145 016f 0A       		.uleb128 0xa
 4146 0170 87020000 		.4byte	.LASF31
 4147 0174 05       		.byte	0x5
 4148 0175 2001     		.2byte	0x120
 4149 0177 F1000000 		.4byte	0xf1
 4150 017b 04       		.byte	0x4
 4151 017c 0A       		.uleb128 0xa
 4152 017d EC090000 		.4byte	.LASF32
 4153 0181 05       		.byte	0x5
 4154 0182 2301     		.2byte	0x123
 4155 0184 F1000000 		.4byte	0xf1
 4156 0188 08       		.byte	0x8
 4157 0189 0A       		.uleb128 0xa
 4158 018a DB020000 		.4byte	.LASF33
 4159 018e 05       		.byte	0x5
 4160 018f 2601     		.2byte	0x126
 4161 0191 F1000000 		.4byte	0xf1
 4162 0195 0C       		.byte	0xc
 4163 0196 0A       		.uleb128 0xa
 4164 0197 9C080000 		.4byte	.LASF34
 4165 019b 05       		.byte	0x5
 4166 019c 2B01     		.2byte	0x12b
 4167 019e F1000000 		.4byte	0xf1
 4168 01a2 10       		.byte	0x10
 4169 01a3 0A       		.uleb128 0xa
 4170 01a4 16090000 		.4byte	.LASF35
 4171 01a8 05       		.byte	0x5
 4172 01a9 2E01     		.2byte	0x12e
 4173 01ab D9000000 		.4byte	0xd9
 4174 01af 14       		.byte	0x14
 4175 01b0 0A       		.uleb128 0xa
 4176 01b1 C7030000 		.4byte	.LASF36
 4177 01b5 05       		.byte	0x5
 4178 01b6 3301     		.2byte	0x133
 4179 01b8 D9000000 		.4byte	0xd9
 4180 01bc 15       		.byte	0x15
 4181 01bd 0A       		.uleb128 0xa
 4182 01be 27040000 		.4byte	.LASF37
 4183 01c2 05       		.byte	0x5
 4184 01c3 3601     		.2byte	0x136
 4185 01c5 F1000000 		.4byte	0xf1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 98


 4186 01c9 18       		.byte	0x18
 4187 01ca 00       		.byte	0
 4188 01cb 05       		.uleb128 0x5
 4189 01cc 48000000 		.4byte	.LASF38
 4190 01d0 05       		.byte	0x5
 4191 01d1 3701     		.2byte	0x137
 4192 01d3 59010000 		.4byte	0x159
 4193 01d7 0B       		.uleb128 0xb
 4194 01d8 01       		.byte	0x1
 4195 01d9 37000000 		.4byte	0x37
 4196 01dd 05       		.byte	0x5
 4197 01de 5401     		.2byte	0x154
 4198 01e0 03020000 		.4byte	0x203
 4199 01e4 0C       		.uleb128 0xc
 4200 01e5 BE040000 		.4byte	.LASF39
 4201 01e9 00       		.byte	0
 4202 01ea 0C       		.uleb128 0xc
 4203 01eb 1D000000 		.4byte	.LASF40
 4204 01ef 01       		.byte	0x1
 4205 01f0 0C       		.uleb128 0xc
 4206 01f1 5C030000 		.4byte	.LASF41
 4207 01f5 02       		.byte	0x2
 4208 01f6 0C       		.uleb128 0xc
 4209 01f7 24010000 		.4byte	.LASF42
 4210 01fb 03       		.byte	0x3
 4211 01fc 0C       		.uleb128 0xc
 4212 01fd 4B080000 		.4byte	.LASF43
 4213 0201 04       		.byte	0x4
 4214 0202 00       		.byte	0
 4215 0203 05       		.uleb128 0x5
 4216 0204 E6020000 		.4byte	.LASF44
 4217 0208 05       		.byte	0x5
 4218 0209 5A01     		.2byte	0x15a
 4219 020b D7010000 		.4byte	0x1d7
 4220 020f 06       		.uleb128 0x6
 4221 0210 A2000000 		.4byte	0xa2
 4222 0214 07       		.uleb128 0x7
 4223 0215 C3000000 		.4byte	0xc3
 4224 0219 24020000 		.4byte	0x224
 4225 021d 08       		.uleb128 0x8
 4226 021e 42010000 		.4byte	0x142
 4227 0222 04       		.byte	0x4
 4228 0223 00       		.byte	0
 4229 0224 03       		.uleb128 0x3
 4230 0225 D0090000 		.4byte	.LASF45
 4231 0229 06       		.byte	0x6
 4232 022a 6C       		.byte	0x6c
 4233 022b 9B000000 		.4byte	0x9b
 4234 022f 07       		.uleb128 0x7
 4235 0230 A2000000 		.4byte	0xa2
 4236 0234 3F020000 		.4byte	0x23f
 4237 0238 08       		.uleb128 0x8
 4238 0239 42010000 		.4byte	0x142
 4239 023d 03       		.byte	0x3
 4240 023e 00       		.byte	0
 4241 023f 0D       		.uleb128 0xd
 4242 0240 AF080000 		.4byte	.LASF59
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 99


 4243 0244 01       		.byte	0x1
 4244 0245 C9       		.byte	0xc9
 4245 0246 00000000 		.4byte	.LFB64
 4246 024a 0C000000 		.4byte	.LFE64-.LFB64
 4247 024e 01       		.uleb128 0x1
 4248 024f 9C       		.byte	0x9c
 4249 0250 0E       		.uleb128 0xe
 4250 0251 3A040000 		.4byte	.LASF48
 4251 0255 01       		.byte	0x1
 4252 0256 D1       		.byte	0xd1
 4253 0257 09010000 		.4byte	0x109
 4254 025b 00000000 		.4byte	.LFB65
 4255 025f 58000000 		.4byte	.LFE65-.LFB65
 4256 0263 01       		.uleb128 0x1
 4257 0264 9C       		.byte	0x9c
 4258 0265 B0020000 		.4byte	0x2b0
 4259 0269 0F       		.uleb128 0xf
 4260 026a 6D696E00 		.ascii	"min\000"
 4261 026e 01       		.byte	0x1
 4262 026f D1       		.byte	0xd1
 4263 0270 09010000 		.4byte	0x109
 4264 0274 02       		.uleb128 0x2
 4265 0275 91       		.byte	0x91
 4266 0276 6C       		.sleb128 -20
 4267 0277 0F       		.uleb128 0xf
 4268 0278 76616C00 		.ascii	"val\000"
 4269 027c 01       		.byte	0x1
 4270 027d D1       		.byte	0xd1
 4271 027e 09010000 		.4byte	0x109
 4272 0282 02       		.uleb128 0x2
 4273 0283 91       		.byte	0x91
 4274 0284 68       		.sleb128 -24
 4275 0285 0F       		.uleb128 0xf
 4276 0286 6D617800 		.ascii	"max\000"
 4277 028a 01       		.byte	0x1
 4278 028b D1       		.byte	0xd1
 4279 028c 09010000 		.4byte	0x109
 4280 0290 02       		.uleb128 0x2
 4281 0291 91       		.byte	0x91
 4282 0292 64       		.sleb128 -28
 4283 0293 10       		.uleb128 0x10
 4284 0294 0E020000 		.4byte	.LASF46
 4285 0298 01       		.byte	0x1
 4286 0299 D3       		.byte	0xd3
 4287 029a 09010000 		.4byte	0x109
 4288 029e 02       		.uleb128 0x2
 4289 029f 91       		.byte	0x91
 4290 02a0 74       		.sleb128 -12
 4291 02a1 10       		.uleb128 0x10
 4292 02a2 AB060000 		.4byte	.LASF47
 4293 02a6 01       		.byte	0x1
 4294 02a7 D4       		.byte	0xd4
 4295 02a8 09010000 		.4byte	0x109
 4296 02ac 02       		.uleb128 0x2
 4297 02ad 91       		.byte	0x91
 4298 02ae 70       		.sleb128 -16
 4299 02af 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 100


 4300 02b0 0E       		.uleb128 0xe
 4301 02b1 2C090000 		.4byte	.LASF49
 4302 02b5 01       		.byte	0x1
 4303 02b6 E7       		.byte	0xe7
 4304 02b7 09010000 		.4byte	0x109
 4305 02bb 00000000 		.4byte	.LFB66
 4306 02bf 68000000 		.4byte	.LFE66-.LFB66
 4307 02c3 01       		.uleb128 0x1
 4308 02c4 9C       		.byte	0x9c
 4309 02c5 D6020000 		.4byte	0x2d6
 4310 02c9 0F       		.uleb128 0xf
 4311 02ca 6600     		.ascii	"f\000"
 4312 02cc 01       		.byte	0x1
 4313 02cd E7       		.byte	0xe7
 4314 02ce 09010000 		.4byte	0x109
 4315 02d2 02       		.uleb128 0x2
 4316 02d3 91       		.byte	0x91
 4317 02d4 74       		.sleb128 -12
 4318 02d5 00       		.byte	0
 4319 02d6 0E       		.uleb128 0xe
 4320 02d7 C0080000 		.4byte	.LASF50
 4321 02db 01       		.byte	0x1
 4322 02dc EE       		.byte	0xee
 4323 02dd 09010000 		.4byte	0x109
 4324 02e1 00000000 		.4byte	.LFB67
 4325 02e5 4C000000 		.4byte	.LFE67-.LFB67
 4326 02e9 01       		.uleb128 0x1
 4327 02ea 9C       		.byte	0x9c
 4328 02eb FC020000 		.4byte	0x2fc
 4329 02ef 0F       		.uleb128 0xf
 4330 02f0 6600     		.ascii	"f\000"
 4331 02f2 01       		.byte	0x1
 4332 02f3 EE       		.byte	0xee
 4333 02f4 09010000 		.4byte	0x109
 4334 02f8 02       		.uleb128 0x2
 4335 02f9 91       		.byte	0x91
 4336 02fa 74       		.sleb128 -12
 4337 02fb 00       		.byte	0
 4338 02fc 0E       		.uleb128 0xe
 4339 02fd 7D050000 		.4byte	.LASF51
 4340 0301 01       		.byte	0x1
 4341 0302 F4       		.byte	0xf4
 4342 0303 09010000 		.4byte	0x109
 4343 0307 00000000 		.4byte	.LFB68
 4344 030b 46000000 		.4byte	.LFE68-.LFB68
 4345 030f 01       		.uleb128 0x1
 4346 0310 9C       		.byte	0x9c
 4347 0311 58030000 		.4byte	0x358
 4348 0315 0F       		.uleb128 0xf
 4349 0316 4100     		.ascii	"A\000"
 4350 0318 01       		.byte	0x1
 4351 0319 F4       		.byte	0xf4
 4352 031a 09010000 		.4byte	0x109
 4353 031e 02       		.uleb128 0x2
 4354 031f 91       		.byte	0x91
 4355 0320 6C       		.sleb128 -20
 4356 0321 0F       		.uleb128 0xf
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 101


 4357 0322 4200     		.ascii	"B\000"
 4358 0324 01       		.byte	0x1
 4359 0325 F4       		.byte	0xf4
 4360 0326 09010000 		.4byte	0x109
 4361 032a 02       		.uleb128 0x2
 4362 032b 91       		.byte	0x91
 4363 032c 68       		.sleb128 -24
 4364 032d 11       		.uleb128 0x11
 4365 032e 76080000 		.4byte	.LASF52
 4366 0332 01       		.byte	0x1
 4367 0333 F4       		.byte	0xf4
 4368 0334 09010000 		.4byte	0x109
 4369 0338 02       		.uleb128 0x2
 4370 0339 91       		.byte	0x91
 4371 033a 64       		.sleb128 -28
 4372 033b 10       		.uleb128 0x10
 4373 033c 6F040000 		.4byte	.LASF53
 4374 0340 01       		.byte	0x1
 4375 0341 F6       		.byte	0xf6
 4376 0342 09010000 		.4byte	0x109
 4377 0346 02       		.uleb128 0x2
 4378 0347 91       		.byte	0x91
 4379 0348 74       		.sleb128 -12
 4380 0349 12       		.uleb128 0x12
 4381 034a 6F757400 		.ascii	"out\000"
 4382 034e 01       		.byte	0x1
 4383 034f F9       		.byte	0xf9
 4384 0350 09010000 		.4byte	0x109
 4385 0354 02       		.uleb128 0x2
 4386 0355 91       		.byte	0x91
 4387 0356 70       		.sleb128 -16
 4388 0357 00       		.byte	0
 4389 0358 13       		.uleb128 0x13
 4390 0359 6D617000 		.ascii	"map\000"
 4391 035d 01       		.byte	0x1
 4392 035e 0301     		.2byte	0x103
 4393 0360 09010000 		.4byte	0x109
 4394 0364 00000000 		.4byte	.LFB69
 4395 0368 56000000 		.4byte	.LFE69-.LFB69
 4396 036c 01       		.uleb128 0x1
 4397 036d 9C       		.byte	0x9c
 4398 036e BE030000 		.4byte	0x3be
 4399 0372 14       		.uleb128 0x14
 4400 0373 A0030000 		.4byte	.LASF54
 4401 0377 01       		.byte	0x1
 4402 0378 0301     		.2byte	0x103
 4403 037a 09010000 		.4byte	0x109
 4404 037e 02       		.uleb128 0x2
 4405 037f 91       		.byte	0x91
 4406 0380 6C       		.sleb128 -20
 4407 0381 14       		.uleb128 0x14
 4408 0382 4E0A0000 		.4byte	.LASF55
 4409 0386 01       		.byte	0x1
 4410 0387 0301     		.2byte	0x103
 4411 0389 09010000 		.4byte	0x109
 4412 038d 02       		.uleb128 0x2
 4413 038e 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 102


 4414 038f 68       		.sleb128 -24
 4415 0390 14       		.uleb128 0x14
 4416 0391 1E010000 		.4byte	.LASF56
 4417 0395 01       		.byte	0x1
 4418 0396 0301     		.2byte	0x103
 4419 0398 09010000 		.4byte	0x109
 4420 039c 02       		.uleb128 0x2
 4421 039d 91       		.byte	0x91
 4422 039e 64       		.sleb128 -28
 4423 039f 14       		.uleb128 0x14
 4424 03a0 2B060000 		.4byte	.LASF57
 4425 03a4 01       		.byte	0x1
 4426 03a5 0301     		.2byte	0x103
 4427 03a7 09010000 		.4byte	0x109
 4428 03ab 02       		.uleb128 0x2
 4429 03ac 91       		.byte	0x91
 4430 03ad 60       		.sleb128 -32
 4431 03ae 14       		.uleb128 0x14
 4432 03af 34000000 		.4byte	.LASF58
 4433 03b3 01       		.byte	0x1
 4434 03b4 0301     		.2byte	0x103
 4435 03b6 09010000 		.4byte	0x109
 4436 03ba 02       		.uleb128 0x2
 4437 03bb 91       		.byte	0x91
 4438 03bc 00       		.sleb128 0
 4439 03bd 00       		.byte	0
 4440 03be 15       		.uleb128 0x15
 4441 03bf 16020000 		.4byte	.LASF60
 4442 03c3 01       		.byte	0x1
 4443 03c4 3A01     		.2byte	0x13a
 4444 03c6 00000000 		.4byte	.LFB70
 4445 03ca 40000000 		.4byte	.LFE70-.LFB70
 4446 03ce 01       		.uleb128 0x1
 4447 03cf 9C       		.byte	0x9c
 4448 03d0 15       		.uleb128 0x15
 4449 03d1 31090000 		.4byte	.LASF61
 4450 03d5 01       		.byte	0x1
 4451 03d6 4C01     		.2byte	0x14c
 4452 03d8 00000000 		.4byte	.LFB71
 4453 03dc 14000000 		.4byte	.LFE71-.LFB71
 4454 03e0 01       		.uleb128 0x1
 4455 03e1 9C       		.byte	0x9c
 4456 03e2 15       		.uleb128 0x15
 4457 03e3 1E080000 		.4byte	.LASF62
 4458 03e7 01       		.byte	0x1
 4459 03e8 5701     		.2byte	0x157
 4460 03ea 00000000 		.4byte	.LFB72
 4461 03ee 7C000000 		.4byte	.LFE72-.LFB72
 4462 03f2 01       		.uleb128 0x1
 4463 03f3 9C       		.byte	0x9c
 4464 03f4 16       		.uleb128 0x16
 4465 03f5 AC090000 		.4byte	.LASF63
 4466 03f9 01       		.byte	0x1
 4467 03fa 7101     		.2byte	0x171
 4468 03fc 94000000 		.4byte	0x94
 4469 0400 00000000 		.4byte	.LFB73
 4470 0404 9C0B0000 		.4byte	.LFE73-.LFB73
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 103


 4471 0408 01       		.uleb128 0x1
 4472 0409 9C       		.byte	0x9c
 4473 040a A7040000 		.4byte	0x4a7
 4474 040e 17       		.uleb128 0x17
 4475 040f AE000000 		.4byte	.LBB2
 4476 0413 1E050000 		.4byte	.LBE2-.LBB2
 4477 0417 42040000 		.4byte	0x442
 4478 041b 18       		.uleb128 0x18
 4479 041c 5A090000 		.4byte	.LASF64
 4480 0420 01       		.byte	0x1
 4481 0421 EC01     		.2byte	0x1ec
 4482 0423 09010000 		.4byte	0x109
 4483 0427 02       		.uleb128 0x2
 4484 0428 91       		.byte	0x91
 4485 0429 50       		.sleb128 -48
 4486 042a 19       		.uleb128 0x19
 4487 042b 56030000 		.4byte	.LBB3
 4488 042f 34000000 		.4byte	.LBE3-.LBB3
 4489 0433 1A       		.uleb128 0x1a
 4490 0434 6A00     		.ascii	"j\000"
 4491 0436 01       		.byte	0x1
 4492 0437 2302     		.2byte	0x223
 4493 0439 94000000 		.4byte	0x94
 4494 043d 02       		.uleb128 0x2
 4495 043e 91       		.byte	0x91
 4496 043f 64       		.sleb128 -28
 4497 0440 00       		.byte	0
 4498 0441 00       		.byte	0
 4499 0442 17       		.uleb128 0x17
 4500 0443 3A060000 		.4byte	.LBB4
 4501 0447 52010000 		.4byte	.LBE4-.LBB4
 4502 044b 74040000 		.4byte	0x474
 4503 044f 1A       		.uleb128 0x1a
 4504 0450 6900     		.ascii	"i\000"
 4505 0452 01       		.byte	0x1
 4506 0453 5702     		.2byte	0x257
 4507 0455 94000000 		.4byte	0x94
 4508 0459 02       		.uleb128 0x2
 4509 045a 91       		.byte	0x91
 4510 045b 60       		.sleb128 -32
 4511 045c 19       		.uleb128 0x19
 4512 045d 68060000 		.4byte	.LBB5
 4513 0461 32000000 		.4byte	.LBE5-.LBB5
 4514 0465 1A       		.uleb128 0x1a
 4515 0466 6A00     		.ascii	"j\000"
 4516 0468 01       		.byte	0x1
 4517 0469 5B02     		.2byte	0x25b
 4518 046b 94000000 		.4byte	0x94
 4519 046f 02       		.uleb128 0x2
 4520 0470 91       		.byte	0x91
 4521 0471 5C       		.sleb128 -36
 4522 0472 00       		.byte	0
 4523 0473 00       		.byte	0
 4524 0474 17       		.uleb128 0x17
 4525 0475 C2070000 		.4byte	.LBB6
 4526 0479 CC010000 		.4byte	.LBE6-.LBB6
 4527 047d 8F040000 		.4byte	0x48f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 104


 4528 0481 1A       		.uleb128 0x1a
 4529 0482 6900     		.ascii	"i\000"
 4530 0484 01       		.byte	0x1
 4531 0485 8002     		.2byte	0x280
 4532 0487 94000000 		.4byte	0x94
 4533 048b 02       		.uleb128 0x2
 4534 048c 91       		.byte	0x91
 4535 048d 58       		.sleb128 -40
 4536 048e 00       		.byte	0
 4537 048f 19       		.uleb128 0x19
 4538 0490 B6090000 		.4byte	.LBB7
 4539 0494 30000000 		.4byte	.LBE7-.LBB7
 4540 0498 1A       		.uleb128 0x1a
 4541 0499 6900     		.ascii	"i\000"
 4542 049b 01       		.byte	0x1
 4543 049c B602     		.2byte	0x2b6
 4544 049e 24020000 		.4byte	0x224
 4545 04a2 02       		.uleb128 0x2
 4546 04a3 91       		.byte	0x91
 4547 04a4 54       		.sleb128 -44
 4548 04a5 00       		.byte	0
 4549 04a6 00       		.byte	0
 4550 04a7 15       		.uleb128 0x15
 4551 04a8 AF070000 		.4byte	.LASF65
 4552 04ac 01       		.byte	0x1
 4553 04ad 0F03     		.2byte	0x30f
 4554 04af 00000000 		.4byte	.LFB74
 4555 04b3 54000000 		.4byte	.LFE74-.LFB74
 4556 04b7 01       		.uleb128 0x1
 4557 04b8 9C       		.byte	0x9c
 4558 04b9 15       		.uleb128 0x15
 4559 04ba 67090000 		.4byte	.LASF66
 4560 04be 01       		.byte	0x1
 4561 04bf 2303     		.2byte	0x323
 4562 04c1 00000000 		.4byte	.LFB75
 4563 04c5 C4000000 		.4byte	.LFE75-.LFB75
 4564 04c9 01       		.uleb128 0x1
 4565 04ca 9C       		.byte	0x9c
 4566 04cb 1B       		.uleb128 0x1b
 4567 04cc EC030000 		.4byte	.LASF69
 4568 04d0 01       		.byte	0x1
 4569 04d1 7303     		.2byte	0x373
 4570 04d3 00000000 		.4byte	.LFB76
 4571 04d7 4C000000 		.4byte	.LFE76-.LFB76
 4572 04db 01       		.uleb128 0x1
 4573 04dc 9C       		.byte	0x9c
 4574 04dd 00050000 		.4byte	0x500
 4575 04e1 14       		.uleb128 0x14
 4576 04e2 2C050000 		.4byte	.LASF67
 4577 04e6 01       		.byte	0x1
 4578 04e7 7303     		.2byte	0x373
 4579 04e9 D9000000 		.4byte	0xd9
 4580 04ed 02       		.uleb128 0x2
 4581 04ee 91       		.byte	0x91
 4582 04ef 77       		.sleb128 -9
 4583 04f0 14       		.uleb128 0x14
 4584 04f1 6E070000 		.4byte	.LASF68
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 105


 4585 04f5 01       		.byte	0x1
 4586 04f6 7303     		.2byte	0x373
 4587 04f8 00050000 		.4byte	0x500
 4588 04fc 02       		.uleb128 0x2
 4589 04fd 91       		.byte	0x91
 4590 04fe 70       		.sleb128 -16
 4591 04ff 00       		.byte	0
 4592 0500 1C       		.uleb128 0x1c
 4593 0501 04       		.byte	0x4
 4594 0502 D9000000 		.4byte	0xd9
 4595 0506 1B       		.uleb128 0x1b
 4596 0507 B1090000 		.4byte	.LASF70
 4597 050b 01       		.byte	0x1
 4598 050c 8103     		.2byte	0x381
 4599 050e 00000000 		.4byte	.LFB77
 4600 0512 C4000000 		.4byte	.LFE77-.LFB77
 4601 0516 01       		.uleb128 0x1
 4602 0517 9C       		.byte	0x9c
 4603 0518 4A050000 		.4byte	0x54a
 4604 051c 14       		.uleb128 0x14
 4605 051d 7E0A0000 		.4byte	.LASF71
 4606 0521 01       		.byte	0x1
 4607 0522 8103     		.2byte	0x381
 4608 0524 94000000 		.4byte	0x94
 4609 0528 02       		.uleb128 0x2
 4610 0529 91       		.byte	0x91
 4611 052a 74       		.sleb128 -12
 4612 052b 14       		.uleb128 0x14
 4613 052c 0C080000 		.4byte	.LASF72
 4614 0530 01       		.byte	0x1
 4615 0531 8103     		.2byte	0x381
 4616 0533 94000000 		.4byte	0x94
 4617 0537 02       		.uleb128 0x2
 4618 0538 91       		.byte	0x91
 4619 0539 70       		.sleb128 -16
 4620 053a 14       		.uleb128 0x14
 4621 053b B3060000 		.4byte	.LASF73
 4622 053f 01       		.byte	0x1
 4623 0540 8103     		.2byte	0x381
 4624 0542 94000000 		.4byte	0x94
 4625 0546 02       		.uleb128 0x2
 4626 0547 91       		.byte	0x91
 4627 0548 6C       		.sleb128 -20
 4628 0549 00       		.byte	0
 4629 054a 1B       		.uleb128 0x1b
 4630 054b E9050000 		.4byte	.LASF74
 4631 054f 01       		.byte	0x1
 4632 0550 9D03     		.2byte	0x39d
 4633 0552 00000000 		.4byte	.LFB78
 4634 0556 B4000000 		.4byte	.LFE78-.LFB78
 4635 055a 01       		.uleb128 0x1
 4636 055b 9C       		.byte	0x9c
 4637 055c 7F050000 		.4byte	0x57f
 4638 0560 1D       		.uleb128 0x1d
 4639 0561 76616C00 		.ascii	"val\000"
 4640 0565 01       		.byte	0x1
 4641 0566 9D03     		.2byte	0x39d
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 106


 4642 0568 94000000 		.4byte	0x94
 4643 056c 02       		.uleb128 0x2
 4644 056d 91       		.byte	0x91
 4645 056e 74       		.sleb128 -12
 4646 056f 14       		.uleb128 0x14
 4647 0570 B3060000 		.4byte	.LASF73
 4648 0574 01       		.byte	0x1
 4649 0575 9D03     		.2byte	0x39d
 4650 0577 94000000 		.4byte	0x94
 4651 057b 02       		.uleb128 0x2
 4652 057c 91       		.byte	0x91
 4653 057d 70       		.sleb128 -16
 4654 057e 00       		.byte	0
 4655 057f 1B       		.uleb128 0x1b
 4656 0580 99040000 		.4byte	.LASF75
 4657 0584 01       		.byte	0x1
 4658 0585 B203     		.2byte	0x3b2
 4659 0587 00000000 		.4byte	.LFB79
 4660 058b B0000000 		.4byte	.LFE79-.LFB79
 4661 058f 01       		.uleb128 0x1
 4662 0590 9C       		.byte	0x9c
 4663 0591 C3050000 		.4byte	0x5c3
 4664 0595 14       		.uleb128 0x14
 4665 0596 2E070000 		.4byte	.LASF76
 4666 059a 01       		.byte	0x1
 4667 059b B203     		.2byte	0x3b2
 4668 059d 94000000 		.4byte	0x94
 4669 05a1 02       		.uleb128 0x2
 4670 05a2 91       		.byte	0x91
 4671 05a3 74       		.sleb128 -12
 4672 05a4 14       		.uleb128 0x14
 4673 05a5 DC050000 		.4byte	.LASF77
 4674 05a9 01       		.byte	0x1
 4675 05aa B203     		.2byte	0x3b2
 4676 05ac 94000000 		.4byte	0x94
 4677 05b0 02       		.uleb128 0x2
 4678 05b1 91       		.byte	0x91
 4679 05b2 70       		.sleb128 -16
 4680 05b3 14       		.uleb128 0x14
 4681 05b4 B3060000 		.4byte	.LASF73
 4682 05b8 01       		.byte	0x1
 4683 05b9 B203     		.2byte	0x3b2
 4684 05bb 94000000 		.4byte	0x94
 4685 05bf 02       		.uleb128 0x2
 4686 05c0 91       		.byte	0x91
 4687 05c1 6C       		.sleb128 -20
 4688 05c2 00       		.byte	0
 4689 05c3 1B       		.uleb128 0x1b
 4690 05c4 FA090000 		.4byte	.LASF78
 4691 05c8 01       		.byte	0x1
 4692 05c9 CA03     		.2byte	0x3ca
 4693 05cb 00000000 		.4byte	.LFB80
 4694 05cf 24010000 		.4byte	.LFE80-.LFB80
 4695 05d3 01       		.uleb128 0x1
 4696 05d4 9C       		.byte	0x9c
 4697 05d5 07060000 		.4byte	0x607
 4698 05d9 18       		.uleb128 0x18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 107


 4699 05da A6090000 		.4byte	.LASF79
 4700 05de 01       		.byte	0x1
 4701 05df CC03     		.2byte	0x3cc
 4702 05e1 FD000000 		.4byte	0xfd
 4703 05e5 02       		.uleb128 0x2
 4704 05e6 91       		.byte	0x91
 4705 05e7 68       		.sleb128 -24
 4706 05e8 18       		.uleb128 0x18
 4707 05e9 B4040000 		.4byte	.LASF80
 4708 05ed 01       		.byte	0x1
 4709 05ee CD03     		.2byte	0x3cd
 4710 05f0 FD000000 		.4byte	0xfd
 4711 05f4 02       		.uleb128 0x2
 4712 05f5 91       		.byte	0x91
 4713 05f6 6C       		.sleb128 -20
 4714 05f7 18       		.uleb128 0x18
 4715 05f8 E5030000 		.4byte	.LASF81
 4716 05fc 01       		.byte	0x1
 4717 05fd CE03     		.2byte	0x3ce
 4718 05ff FD000000 		.4byte	0xfd
 4719 0603 02       		.uleb128 0x2
 4720 0604 91       		.byte	0x91
 4721 0605 64       		.sleb128 -28
 4722 0606 00       		.byte	0
 4723 0607 15       		.uleb128 0x15
 4724 0608 67000000 		.4byte	.LASF82
 4725 060c 01       		.byte	0x1
 4726 060d F903     		.2byte	0x3f9
 4727 060f 00000000 		.4byte	.LFB81
 4728 0613 D8000000 		.4byte	.LFE81-.LFB81
 4729 0617 01       		.uleb128 0x1
 4730 0618 9C       		.byte	0x9c
 4731 0619 15       		.uleb128 0x15
 4732 061a 80000000 		.4byte	.LASF83
 4733 061e 01       		.byte	0x1
 4734 061f 2004     		.2byte	0x420
 4735 0621 00000000 		.4byte	.LFB82
 4736 0625 D8000000 		.4byte	.LFE82-.LFB82
 4737 0629 01       		.uleb128 0x1
 4738 062a 9C       		.byte	0x9c
 4739 062b 16       		.uleb128 0x16
 4740 062c 84080000 		.4byte	.LASF84
 4741 0630 01       		.byte	0x1
 4742 0631 4904     		.2byte	0x449
 4743 0633 D9000000 		.4byte	0xd9
 4744 0637 00000000 		.4byte	.LFB83
 4745 063b 90000000 		.4byte	.LFE83-.LFB83
 4746 063f 01       		.uleb128 0x1
 4747 0640 9C       		.byte	0x9c
 4748 0641 91060000 		.4byte	0x691
 4749 0645 14       		.uleb128 0x14
 4750 0646 C5080000 		.4byte	.LASF85
 4751 064a 01       		.byte	0x1
 4752 064b 4904     		.2byte	0x449
 4753 064d D9000000 		.4byte	0xd9
 4754 0651 02       		.uleb128 0x2
 4755 0652 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 108


 4756 0653 6F       		.sleb128 -17
 4757 0654 14       		.uleb128 0x14
 4758 0655 E2050000 		.4byte	.LASF86
 4759 0659 01       		.byte	0x1
 4760 065a 4904     		.2byte	0x449
 4761 065c E5000000 		.4byte	0xe5
 4762 0660 02       		.uleb128 0x2
 4763 0661 91       		.byte	0x91
 4764 0662 6C       		.sleb128 -20
 4765 0663 14       		.uleb128 0x14
 4766 0664 FC010000 		.4byte	.LASF87
 4767 0668 01       		.byte	0x1
 4768 0669 4904     		.2byte	0x449
 4769 066b A2000000 		.4byte	0xa2
 4770 066f 02       		.uleb128 0x2
 4771 0670 91       		.byte	0x91
 4772 0671 6E       		.sleb128 -18
 4773 0672 18       		.uleb128 0x18
 4774 0673 19050000 		.4byte	.LASF88
 4775 0677 01       		.byte	0x1
 4776 0678 4B04     		.2byte	0x44b
 4777 067a 36010000 		.4byte	0x136
 4778 067e 02       		.uleb128 0x2
 4779 067f 91       		.byte	0x91
 4780 0680 73       		.sleb128 -13
 4781 0681 18       		.uleb128 0x18
 4782 0682 24090000 		.4byte	.LASF89
 4783 0686 01       		.byte	0x1
 4784 0687 4C04     		.2byte	0x44c
 4785 0689 C3000000 		.4byte	0xc3
 4786 068d 02       		.uleb128 0x2
 4787 068e 91       		.byte	0x91
 4788 068f 74       		.sleb128 -12
 4789 0690 00       		.byte	0
 4790 0691 1B       		.uleb128 0x1b
 4791 0692 76070000 		.4byte	.LASF90
 4792 0696 01       		.byte	0x1
 4793 0697 7904     		.2byte	0x479
 4794 0699 00000000 		.4byte	.LFB84
 4795 069d 68020000 		.4byte	.LFE84-.LFB84
 4796 06a1 01       		.uleb128 0x1
 4797 06a2 9C       		.byte	0x9c
 4798 06a3 39070000 		.4byte	0x739
 4799 06a7 14       		.uleb128 0x14
 4800 06a8 EB070000 		.4byte	.LASF91
 4801 06ac 01       		.byte	0x1
 4802 06ad 7904     		.2byte	0x479
 4803 06af 94000000 		.4byte	0x94
 4804 06b3 02       		.uleb128 0x2
 4805 06b4 91       		.byte	0x91
 4806 06b5 5C       		.sleb128 -36
 4807 06b6 14       		.uleb128 0x14
 4808 06b7 0C080000 		.4byte	.LASF72
 4809 06bb 01       		.byte	0x1
 4810 06bc 7904     		.2byte	0x479
 4811 06be 94000000 		.4byte	0x94
 4812 06c2 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 109


 4813 06c3 91       		.byte	0x91
 4814 06c4 58       		.sleb128 -40
 4815 06c5 14       		.uleb128 0x14
 4816 06c6 E7040000 		.4byte	.LASF92
 4817 06ca 01       		.byte	0x1
 4818 06cb 7904     		.2byte	0x479
 4819 06cd 94000000 		.4byte	0x94
 4820 06d1 02       		.uleb128 0x2
 4821 06d2 91       		.byte	0x91
 4822 06d3 54       		.sleb128 -44
 4823 06d4 17       		.uleb128 0x17
 4824 06d5 12000000 		.4byte	.LBB8
 4825 06d9 4C000000 		.4byte	.LBE8-.LBB8
 4826 06dd F1060000 		.4byte	0x6f1
 4827 06e1 18       		.uleb128 0x18
 4828 06e2 F0070000 		.4byte	.LASF93
 4829 06e6 01       		.byte	0x1
 4830 06e7 8104     		.2byte	0x481
 4831 06e9 09010000 		.4byte	0x109
 4832 06ed 02       		.uleb128 0x2
 4833 06ee 91       		.byte	0x91
 4834 06ef 60       		.sleb128 -32
 4835 06f0 00       		.byte	0
 4836 06f1 1E       		.uleb128 0x1e
 4837 06f2 00000000 		.4byte	.Ldebug_ranges0+0
 4838 06f6 18       		.uleb128 0x18
 4839 06f7 F8070000 		.4byte	.LASF94
 4840 06fb 01       		.byte	0x1
 4841 06fc 9504     		.2byte	0x495
 4842 06fe 94000000 		.4byte	0x94
 4843 0702 02       		.uleb128 0x2
 4844 0703 91       		.byte	0x91
 4845 0704 6C       		.sleb128 -20
 4846 0705 17       		.uleb128 0x17
 4847 0706 82000000 		.4byte	.LBB10
 4848 070a 34000000 		.4byte	.LBE10-.LBB10
 4849 070e 20070000 		.4byte	0x720
 4850 0712 1A       		.uleb128 0x1a
 4851 0713 6900     		.ascii	"i\000"
 4852 0715 01       		.byte	0x1
 4853 0716 9904     		.2byte	0x499
 4854 0718 94000000 		.4byte	0x94
 4855 071c 02       		.uleb128 0x2
 4856 071d 91       		.byte	0x91
 4857 071e 68       		.sleb128 -24
 4858 071f 00       		.byte	0
 4859 0720 19       		.uleb128 0x19
 4860 0721 C8000000 		.4byte	.LBB11
 4861 0725 52000000 		.4byte	.LBE11-.LBB11
 4862 0729 1A       		.uleb128 0x1a
 4863 072a 6900     		.ascii	"i\000"
 4864 072c 01       		.byte	0x1
 4865 072d A604     		.2byte	0x4a6
 4866 072f 94000000 		.4byte	0x94
 4867 0733 02       		.uleb128 0x2
 4868 0734 91       		.byte	0x91
 4869 0735 64       		.sleb128 -28
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 110


 4870 0736 00       		.byte	0
 4871 0737 00       		.byte	0
 4872 0738 00       		.byte	0
 4873 0739 07       		.uleb128 0x7
 4874 073a D9000000 		.4byte	0xd9
 4875 073e 49070000 		.4byte	0x749
 4876 0742 08       		.uleb128 0x8
 4877 0743 42010000 		.4byte	0x142
 4878 0747 01       		.byte	0x1
 4879 0748 00       		.byte	0
 4880 0749 10       		.uleb128 0x10
 4881 074a 07060000 		.4byte	.LASF95
 4882 074e 01       		.byte	0x1
 4883 074f AF       		.byte	0xaf
 4884 0750 39070000 		.4byte	0x739
 4885 0754 05       		.uleb128 0x5
 4886 0755 03       		.byte	0x3
 4887 0756 24000000 		.4byte	eepromArray
 4888 075a 07       		.uleb128 0x7
 4889 075b D9000000 		.4byte	0xd9
 4890 075f 6A070000 		.4byte	0x76a
 4891 0763 08       		.uleb128 0x8
 4892 0764 42010000 		.4byte	0x142
 4893 0768 00       		.byte	0
 4894 0769 00       		.byte	0
 4895 076a 1F       		.uleb128 0x1f
 4896 076b 8A0A0000 		.4byte	.LASF96
 4897 076f 07       		.byte	0x7
 4898 0770 1001     		.2byte	0x110
 4899 0772 5A070000 		.4byte	0x75a
 4900 0776 20       		.uleb128 0x20
 4901 0777 97050000 		.4byte	.LASF97
 4902 077b 08       		.byte	0x8
 4903 077c F3       		.byte	0xf3
 4904 077d 36010000 		.4byte	0x136
 4905 0781 20       		.uleb128 0x20
 4906 0782 94020000 		.4byte	.LASF98
 4907 0786 08       		.byte	0x8
 4908 0787 F9       		.byte	0xf9
 4909 0788 36010000 		.4byte	0x136
 4910 078c 07       		.uleb128 0x7
 4911 078d D9000000 		.4byte	0xd9
 4912 0791 9C070000 		.4byte	0x79c
 4913 0795 08       		.uleb128 0x8
 4914 0796 42010000 		.4byte	0x142
 4915 079a 3F       		.byte	0x3f
 4916 079b 00       		.byte	0
 4917 079c 20       		.uleb128 0x20
 4918 079d 140A0000 		.4byte	.LASF99
 4919 07a1 08       		.byte	0x8
 4920 07a2 FA       		.byte	0xfa
 4921 07a3 8C070000 		.4byte	0x78c
 4922 07a7 20       		.uleb128 0x20
 4923 07a8 3E0A0000 		.4byte	.LASF100
 4924 07ac 08       		.byte	0x8
 4925 07ad FE       		.byte	0xfe
 4926 07ae 36010000 		.4byte	0x136
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 111


 4927 07b2 20       		.uleb128 0x20
 4928 07b3 16030000 		.4byte	.LASF101
 4929 07b7 08       		.byte	0x8
 4930 07b8 FF       		.byte	0xff
 4931 07b9 8C070000 		.4byte	0x78c
 4932 07bd 20       		.uleb128 0x20
 4933 07be F5040000 		.4byte	.LASF102
 4934 07c2 09       		.byte	0x9
 4935 07c3 82       		.byte	0x82
 4936 07c4 CB010000 		.4byte	0x1cb
 4937 07c8 07       		.uleb128 0x7
 4938 07c9 D9070000 		.4byte	0x7d9
 4939 07cd D9070000 		.4byte	0x7d9
 4940 07d1 21       		.uleb128 0x21
 4941 07d2 42010000 		.4byte	0x142
 4942 07d6 FF03     		.2byte	0x3ff
 4943 07d8 00       		.byte	0
 4944 07d9 22       		.uleb128 0x22
 4945 07da A2000000 		.4byte	0xa2
 4946 07de 23       		.uleb128 0x23
 4947 07df 28020000 		.4byte	.LASF103
 4948 07e3 01       		.byte	0x1
 4949 07e4 BC       		.byte	0xbc
 4950 07e5 EF070000 		.4byte	0x7ef
 4951 07e9 05       		.uleb128 0x5
 4952 07ea 03       		.byte	0x3
 4953 07eb 00000000 		.4byte	Em_EEPROM_em_EepromStorage
 4954 07ef 22       		.uleb128 0x22
 4955 07f0 C8070000 		.4byte	0x7c8
 4956 07f4 1F       		.uleb128 0x1f
 4957 07f5 50070000 		.4byte	.LASF104
 4958 07f9 0A       		.byte	0xa
 4959 07fa 1207     		.2byte	0x712
 4960 07fc 00080000 		.4byte	0x800
 4961 0800 06       		.uleb128 0x6
 4962 0801 B8000000 		.4byte	0xb8
 4963 0805 23       		.uleb128 0x23
 4964 0806 3D070000 		.4byte	.LASF105
 4965 080a 01       		.byte	0x1
 4966 080b 31       		.byte	0x31
 4967 080c 36010000 		.4byte	0x136
 4968 0810 05       		.uleb128 0x5
 4969 0811 03       		.byte	0x3
 4970 0812 00000000 		.4byte	usbActivityCounter
 4971 0816 23       		.uleb128 0x23
 4972 0817 6E070000 		.4byte	.LASF68
 4973 081b 01       		.byte	0x1
 4974 081c 32       		.byte	0x32
 4975 081d 49010000 		.4byte	0x149
 4976 0821 05       		.uleb128 0x5
 4977 0822 03       		.byte	0x3
 4978 0823 00000000 		.4byte	midiMsg
 4979 0827 23       		.uleb128 0x23
 4980 0828 3F060000 		.4byte	.LASF106
 4981 082c 01       		.byte	0x1
 4982 082d 33       		.byte	0x33
 4983 082e 0F020000 		.4byte	0x20f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 112


 4984 0832 05       		.uleb128 0x5
 4985 0833 03       		.byte	0x3
 4986 0834 00000000 		.4byte	currentVBUS
 4987 0838 23       		.uleb128 0x23
 4988 0839 E3010000 		.4byte	.LASF107
 4989 083d 01       		.byte	0x1
 4990 083e 34       		.byte	0x34
 4991 083f 0F020000 		.4byte	0x20f
 4992 0843 05       		.uleb128 0x5
 4993 0844 03       		.byte	0x3
 4994 0845 00000000 		.4byte	prevVBUS
 4995 0849 23       		.uleb128 0x23
 4996 084a 0B090000 		.4byte	.LASF108
 4997 084e 01       		.byte	0x1
 4998 084f 35       		.byte	0x35
 4999 0850 0F020000 		.4byte	0x20f
 5000 0854 05       		.uleb128 0x5
 5001 0855 03       		.byte	0x3
 5002 0856 00000000 		.4byte	USB_active
 5003 085a 23       		.uleb128 0x23
 5004 085b 9C060000 		.4byte	.LASF109
 5005 085f 01       		.byte	0x1
 5006 0860 36       		.byte	0x36
 5007 0861 0F020000 		.4byte	0x20f
 5008 0865 05       		.uleb128 0x5
 5009 0866 03       		.byte	0x3
 5010 0867 00000000 		.4byte	USB_check_flag
 5011 086b 23       		.uleb128 0x23
 5012 086c 3F090000 		.4byte	.LASF110
 5013 0870 01       		.byte	0x1
 5014 0871 38       		.byte	0x38
 5015 0872 AD000000 		.4byte	0xad
 5016 0876 05       		.uleb128 0x5
 5017 0877 03       		.byte	0x3
 5018 0878 00000000 		.4byte	midiSent
 5019 087c 23       		.uleb128 0x23
 5020 087d C8010000 		.4byte	.LASF111
 5021 0881 01       		.byte	0x1
 5022 0882 39       		.byte	0x39
 5023 0883 AD000000 		.4byte	0xad
 5024 0887 05       		.uleb128 0x5
 5025 0888 03       		.byte	0x3
 5026 0889 00000000 		.4byte	midiOverflow
 5027 088d 23       		.uleb128 0x23
 5028 088e 00000000 		.4byte	.LASF112
 5029 0892 01       		.byte	0x1
 5030 0893 3B       		.byte	0x3b
 5031 0894 24020000 		.4byte	0x224
 5032 0898 05       		.uleb128 0x5
 5033 0899 03       		.byte	0x3
 5034 089a 00000000 		.4byte	scanPart
 5035 089e 23       		.uleb128 0x23
 5036 089f B3060000 		.4byte	.LASF73
 5037 08a3 01       		.byte	0x1
 5038 08a4 3C       		.byte	0x3c
 5039 08a5 24020000 		.4byte	0x224
 5040 08a9 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 113


 5041 08aa 03       		.byte	0x3
 5042 08ab 00000000 		.4byte	channel
 5043 08af 23       		.uleb128 0x23
 5044 08b0 6C0A0000 		.4byte	.LASF113
 5045 08b4 01       		.byte	0x1
 5046 08b5 3E       		.byte	0x3e
 5047 08b6 24020000 		.4byte	0x224
 5048 08ba 05       		.uleb128 0x5
 5049 08bb 03       		.byte	0x3
 5050 08bc 00000000 		.4byte	currentOutPointer
 5051 08c0 23       		.uleb128 0x23
 5052 08c1 00090000 		.4byte	.LASF114
 5053 08c5 01       		.byte	0x1
 5054 08c6 3F       		.byte	0x3f
 5055 08c7 24020000 		.4byte	0x224
 5056 08cb 05       		.uleb128 0x5
 5057 08cc 03       		.byte	0x3
 5058 08cd 00000000 		.4byte	outChanged
 5059 08d1 07       		.uleb128 0x7
 5060 08d2 0F020000 		.4byte	0x20f
 5061 08d6 E1080000 		.4byte	0x8e1
 5062 08da 08       		.uleb128 0x8
 5063 08db 42010000 		.4byte	0x142
 5064 08df FF       		.byte	0xff
 5065 08e0 00       		.byte	0
 5066 08e1 23       		.uleb128 0x23
 5067 08e2 14000000 		.4byte	.LASF115
 5068 08e6 01       		.byte	0x1
 5069 08e7 52       		.byte	0x52
 5070 08e8 F2080000 		.4byte	0x8f2
 5071 08ec 05       		.uleb128 0x5
 5072 08ed 03       		.byte	0x3
 5073 08ee 00000000 		.4byte	I2Cbuff1
 5074 08f2 06       		.uleb128 0x6
 5075 08f3 D1080000 		.4byte	0x8d1
 5076 08f7 07       		.uleb128 0x7
 5077 08f8 A2000000 		.4byte	0xa2
 5078 08fc 07090000 		.4byte	0x907
 5079 0900 08       		.uleb128 0x8
 5080 0901 42010000 		.4byte	0x142
 5081 0905 00       		.byte	0
 5082 0906 00       		.byte	0
 5083 0907 23       		.uleb128 0x23
 5084 0908 44040000 		.4byte	.LASF116
 5085 090c 01       		.byte	0x1
 5086 090d 53       		.byte	0x53
 5087 090e F7080000 		.4byte	0x8f7
 5088 0912 05       		.uleb128 0x5
 5089 0913 03       		.byte	0x3
 5090 0914 00000000 		.4byte	stringCapSensorsOnOff
 5091 0918 07       		.uleb128 0x7
 5092 0919 A2000000 		.4byte	0xa2
 5093 091d 28090000 		.4byte	0x928
 5094 0921 08       		.uleb128 0x8
 5095 0922 42010000 		.4byte	0x142
 5096 0926 0F       		.byte	0xf
 5097 0927 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 114


 5098 0928 23       		.uleb128 0x23
 5099 0929 4A050000 		.4byte	.LASF117
 5100 092d 01       		.byte	0x1
 5101 092e 54       		.byte	0x54
 5102 092f 18090000 		.4byte	0x918
 5103 0933 05       		.uleb128 0x5
 5104 0934 03       		.byte	0x3
 5105 0935 00000000 		.4byte	stringCapSensorsRaw
 5106 0939 07       		.uleb128 0x7
 5107 093a A2000000 		.4byte	0xa2
 5108 093e 49090000 		.4byte	0x949
 5109 0942 08       		.uleb128 0x8
 5110 0943 42010000 		.4byte	0x142
 5111 0947 07       		.byte	0x7
 5112 0948 00       		.byte	0
 5113 0949 23       		.uleb128 0x23
 5114 094a 6F020000 		.4byte	.LASF118
 5115 094e 01       		.byte	0x1
 5116 094f 55       		.byte	0x55
 5117 0950 39090000 		.4byte	0x939
 5118 0954 05       		.uleb128 0x5
 5119 0955 03       		.byte	0x3
 5120 0956 00000000 		.4byte	thresholdArray
 5121 095a 07       		.uleb128 0x7
 5122 095b C3000000 		.4byte	0xc3
 5123 095f 70090000 		.4byte	0x970
 5124 0963 08       		.uleb128 0x8
 5125 0964 42010000 		.4byte	0x142
 5126 0968 03       		.byte	0x3
 5127 0969 08       		.uleb128 0x8
 5128 096a 42010000 		.4byte	0x142
 5129 096e 01       		.byte	0x1
 5130 096f 00       		.byte	0
 5131 0970 23       		.uleb128 0x23
 5132 0971 5E050000 		.4byte	.LASF119
 5133 0975 01       		.byte	0x1
 5134 0976 5E       		.byte	0x5e
 5135 0977 5A090000 		.4byte	0x95a
 5136 097b 05       		.uleb128 0x5
 5137 097c 03       		.byte	0x3
 5138 097d 00000000 		.4byte	fretMeasurements
 5139 0981 07       		.uleb128 0x7
 5140 0982 09010000 		.4byte	0x109
 5141 0986 91090000 		.4byte	0x991
 5142 098a 08       		.uleb128 0x8
 5143 098b 42010000 		.4byte	0x142
 5144 098f 01       		.byte	0x1
 5145 0990 00       		.byte	0
 5146 0991 23       		.uleb128 0x23
 5147 0992 1C040000 		.4byte	.LASF120
 5148 0996 01       		.byte	0x1
 5149 0997 6C       		.byte	0x6c
 5150 0998 81090000 		.4byte	0x981
 5151 099c 05       		.uleb128 0x5
 5152 099d 03       		.byte	0x3
 5153 099e 00000000 		.4byte	fretRatios
 5154 09a2 07       		.uleb128 0x7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 115


 5155 09a3 B8000000 		.4byte	0xb8
 5156 09a7 B2090000 		.4byte	0x9b2
 5157 09ab 08       		.uleb128 0x8
 5158 09ac 42010000 		.4byte	0x142
 5159 09b0 03       		.byte	0x3
 5160 09b1 00       		.byte	0
 5161 09b2 23       		.uleb128 0x23
 5162 09b3 D3040000 		.4byte	.LASF121
 5163 09b7 01       		.byte	0x1
 5164 09b8 70       		.byte	0x70
 5165 09b9 A2090000 		.4byte	0x9a2
 5166 09bd 05       		.uleb128 0x5
 5167 09be 03       		.byte	0x3
 5168 09bf 00000000 		.4byte	linearPotValue32Bit
 5169 09c3 24       		.uleb128 0x24
 5170 09c4 6900     		.ascii	"i\000"
 5171 09c6 01       		.byte	0x1
 5172 09c7 71       		.byte	0x71
 5173 09c8 A2000000 		.4byte	0xa2
 5174 09cc 05       		.uleb128 0x5
 5175 09cd 03       		.byte	0x3
 5176 09ce 00000000 		.4byte	i
 5177 09d2 23       		.uleb128 0x23
 5178 09d3 D5030000 		.4byte	.LASF122
 5179 09d7 01       		.byte	0x1
 5180 09d8 72       		.byte	0x72
 5181 09d9 A2000000 		.4byte	0xa2
 5182 09dd 05       		.uleb128 0x5
 5183 09de 03       		.byte	0x3
 5184 09df 00000000 		.4byte	counter
 5185 09e3 23       		.uleb128 0x23
 5186 09e4 4B060000 		.4byte	.LASF123
 5187 09e8 01       		.byte	0x1
 5188 09e9 73       		.byte	0x73
 5189 09ea B8000000 		.4byte	0xb8
 5190 09ee 05       		.uleb128 0x5
 5191 09ef 03       		.byte	0x3
 5192 09f0 00000000 		.4byte	temper
 5193 09f4 07       		.uleb128 0x7
 5194 09f5 94000000 		.4byte	0x94
 5195 09f9 040A0000 		.4byte	0xa04
 5196 09fd 08       		.uleb128 0x8
 5197 09fe 42010000 		.4byte	0x142
 5198 0a02 0A       		.byte	0xa
 5199 0a03 00       		.byte	0
 5200 0a04 23       		.uleb128 0x23
 5201 0a05 6E060000 		.4byte	.LASF124
 5202 0a09 01       		.byte	0x1
 5203 0a0a 74       		.byte	0x74
 5204 0a0b F4090000 		.4byte	0x9f4
 5205 0a0f 05       		.uleb128 0x5
 5206 0a10 03       		.byte	0x3
 5207 0a11 00000000 		.4byte	previousButtons
 5208 0a15 23       		.uleb128 0x23
 5209 0a16 0D0A0000 		.4byte	.LASF125
 5210 0a1a 01       		.byte	0x1
 5211 0a1b 75       		.byte	0x75
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 116


 5212 0a1c 94000000 		.4byte	0x94
 5213 0a20 05       		.uleb128 0x5
 5214 0a21 03       		.byte	0x3
 5215 0a22 00000000 		.4byte	octave
 5216 0a26 07       		.uleb128 0x7
 5217 0a27 94000000 		.4byte	0x94
 5218 0a2b 360A0000 		.4byte	0xa36
 5219 0a2f 08       		.uleb128 0x8
 5220 0a30 42010000 		.4byte	0x142
 5221 0a34 03       		.byte	0x3
 5222 0a35 00       		.byte	0
 5223 0a36 23       		.uleb128 0x23
 5224 0a37 32060000 		.4byte	.LASF126
 5225 0a3b 01       		.byte	0x1
 5226 0a3c 77       		.byte	0x77
 5227 0a3d 260A0000 		.4byte	0xa26
 5228 0a41 05       		.uleb128 0x5
 5229 0a42 03       		.byte	0x3
 5230 0a43 00000000 		.4byte	stringPlucks
 5231 0a47 23       		.uleb128 0x23
 5232 0a48 96070000 		.4byte	.LASF127
 5233 0a4c 01       		.byte	0x1
 5234 0a4d 78       		.byte	0x78
 5235 0a4e 260A0000 		.4byte	0xa26
 5236 0a52 05       		.uleb128 0x5
 5237 0a53 03       		.byte	0x3
 5238 0a54 00000000 		.4byte	stringPlucksPrev
 5239 0a58 07       		.uleb128 0x7
 5240 0a59 C3000000 		.4byte	0xc3
 5241 0a5d 6E0A0000 		.4byte	0xa6e
 5242 0a61 08       		.uleb128 0x8
 5243 0a62 42010000 		.4byte	0x142
 5244 0a66 04       		.byte	0x4
 5245 0a67 08       		.uleb128 0x8
 5246 0a68 42010000 		.4byte	0x142
 5247 0a6c 07       		.byte	0x7
 5248 0a6d 00       		.byte	0
 5249 0a6e 23       		.uleb128 0x23
 5250 0a6f 0E070000 		.4byte	.LASF128
 5251 0a73 01       		.byte	0x1
 5252 0a74 7D       		.byte	0x7d
 5253 0a75 580A0000 		.4byte	0xa58
 5254 0a79 05       		.uleb128 0x5
 5255 0a7a 03       		.byte	0x3
 5256 0a7b 00000000 		.4byte	knobsFIR
 5257 0a7f 07       		.uleb128 0x7
 5258 0a80 09010000 		.4byte	0x109
 5259 0a84 8F0A0000 		.4byte	0xa8f
 5260 0a88 08       		.uleb128 0x8
 5261 0a89 42010000 		.4byte	0x142
 5262 0a8d 03       		.byte	0x3
 5263 0a8e 00       		.byte	0
 5264 0a8f 23       		.uleb128 0x23
 5265 0a90 88040000 		.4byte	.LASF129
 5266 0a94 01       		.byte	0x1
 5267 0a95 84       		.byte	0x84
 5268 0a96 7F0A0000 		.4byte	0xa7f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 117


 5269 0a9a 05       		.uleb128 0x5
 5270 0a9b 03       		.byte	0x3
 5271 0a9c 00000000 		.4byte	hysteresisStates
 5272 0aa0 23       		.uleb128 0x23
 5273 0aa1 43020000 		.4byte	.LASF130
 5274 0aa5 01       		.byte	0x1
 5275 0aa6 85       		.byte	0x85
 5276 0aa7 09010000 		.4byte	0x109
 5277 0aab 05       		.uleb128 0x5
 5278 0aac 03       		.byte	0x3
 5279 0aad 00000000 		.4byte	hysteresisLowThresh
 5280 0ab1 23       		.uleb128 0x23
 5281 0ab2 8B030000 		.4byte	.LASF131
 5282 0ab6 01       		.byte	0x1
 5283 0ab7 86       		.byte	0x86
 5284 0ab8 09010000 		.4byte	0x109
 5285 0abc 05       		.uleb128 0x5
 5286 0abd 03       		.byte	0x3
 5287 0abe 00000000 		.4byte	hysteresisHighThresh
 5288 0ac2 23       		.uleb128 0x23
 5289 0ac3 D2050000 		.4byte	.LASF132
 5290 0ac7 01       		.byte	0x1
 5291 0ac8 9C       		.byte	0x9c
 5292 0ac9 36010000 		.4byte	0x136
 5293 0acd 05       		.uleb128 0x5
 5294 0ace 03       		.byte	0x3
 5295 0acf 00000000 		.4byte	txChannel
 5296 0ad3 23       		.uleb128 0x23
 5297 0ad4 FB050000 		.4byte	.LASF133
 5298 0ad8 01       		.byte	0x1
 5299 0ad9 9D       		.byte	0x9d
 5300 0ada 36010000 		.4byte	0x136
 5301 0ade 05       		.uleb128 0x5
 5302 0adf 03       		.byte	0x3
 5303 0ae0 00000000 		.4byte	txTD
 5304 0ae4 07       		.uleb128 0x7
 5305 0ae5 36010000 		.4byte	0x136
 5306 0ae9 F40A0000 		.4byte	0xaf4
 5307 0aed 08       		.uleb128 0x8
 5308 0aee 42010000 		.4byte	0x142
 5309 0af2 0F       		.byte	0xf
 5310 0af3 00       		.byte	0
 5311 0af4 23       		.uleb128 0x23
 5312 0af5 E6060000 		.4byte	.LASF134
 5313 0af9 01       		.byte	0x1
 5314 0afa 9E       		.byte	0x9e
 5315 0afb 050B0000 		.4byte	0xb05
 5316 0aff 05       		.uleb128 0x5
 5317 0b00 03       		.byte	0x3
 5318 0b01 00000000 		.4byte	txBuffer
 5319 0b05 06       		.uleb128 0x6
 5320 0b06 E40A0000 		.4byte	0xae4
 5321 0b0a 23       		.uleb128 0x23
 5322 0b0b BD030000 		.4byte	.LASF135
 5323 0b0f 01       		.byte	0x1
 5324 0b10 A0       		.byte	0xa0
 5325 0b11 36010000 		.4byte	0x136
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 118


 5326 0b15 05       		.uleb128 0x5
 5327 0b16 03       		.byte	0x3
 5328 0b17 00000000 		.4byte	rxChannel
 5329 0b1b 23       		.uleb128 0x23
 5330 0b1c AF040000 		.4byte	.LASF136
 5331 0b20 01       		.byte	0x1
 5332 0b21 A1       		.byte	0xa1
 5333 0b22 36010000 		.4byte	0x136
 5334 0b26 05       		.uleb128 0x5
 5335 0b27 03       		.byte	0x3
 5336 0b28 00000000 		.4byte	rxTD
 5337 0b2c 23       		.uleb128 0x23
 5338 0b2d 87060000 		.4byte	.LASF137
 5339 0b31 01       		.byte	0x1
 5340 0b32 A2       		.byte	0xa2
 5341 0b33 3D0B0000 		.4byte	0xb3d
 5342 0b37 05       		.uleb128 0x5
 5343 0b38 03       		.byte	0x3
 5344 0b39 00000000 		.4byte	rxBuffer
 5345 0b3d 06       		.uleb128 0x6
 5346 0b3e E40A0000 		.4byte	0xae4
 5347 0b42 23       		.uleb128 0x23
 5348 0b43 63070000 		.4byte	.LASF138
 5349 0b47 01       		.byte	0x1
 5350 0b48 A5       		.byte	0xa5
 5351 0b49 36010000 		.4byte	0x136
 5352 0b4d 05       		.uleb128 0x5
 5353 0b4e 03       		.byte	0x3
 5354 0b4f 00000000 		.4byte	tx2Channel
 5355 0b53 23       		.uleb128 0x23
 5356 0b54 7A000000 		.4byte	.LASF139
 5357 0b58 01       		.byte	0x1
 5358 0b59 A6       		.byte	0xa6
 5359 0b5a 36010000 		.4byte	0x136
 5360 0b5e 05       		.uleb128 0x5
 5361 0b5f 03       		.byte	0x3
 5362 0b60 00000000 		.4byte	tx2TD
 5363 0b64 23       		.uleb128 0x23
 5364 0b65 E2090000 		.4byte	.LASF140
 5365 0b69 01       		.byte	0x1
 5366 0b6a A7       		.byte	0xa7
 5367 0b6b 750B0000 		.4byte	0xb75
 5368 0b6f 05       		.uleb128 0x5
 5369 0b70 03       		.byte	0x3
 5370 0b71 00000000 		.4byte	tx2Buffer
 5371 0b75 06       		.uleb128 0x6
 5372 0b76 E40A0000 		.4byte	0xae4
 5373 0b7a 23       		.uleb128 0x23
 5374 0b7b 28030000 		.4byte	.LASF141
 5375 0b7f 01       		.byte	0x1
 5376 0b80 A9       		.byte	0xa9
 5377 0b81 36010000 		.4byte	0x136
 5378 0b85 05       		.uleb128 0x5
 5379 0b86 03       		.byte	0x3
 5380 0b87 00000000 		.4byte	rx2Channel
 5381 0b8b 23       		.uleb128 0x23
 5382 0b8c D7070000 		.4byte	.LASF142
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 119


 5383 0b90 01       		.byte	0x1
 5384 0b91 AA       		.byte	0xaa
 5385 0b92 36010000 		.4byte	0x136
 5386 0b96 05       		.uleb128 0x5
 5387 0b97 03       		.byte	0x3
 5388 0b98 00000000 		.4byte	rx2TD
 5389 0b9c 23       		.uleb128 0x23
 5390 0b9d 65040000 		.4byte	.LASF143
 5391 0ba1 01       		.byte	0x1
 5392 0ba2 AB       		.byte	0xab
 5393 0ba3 AD0B0000 		.4byte	0xbad
 5394 0ba7 05       		.uleb128 0x5
 5395 0ba8 03       		.byte	0x3
 5396 0ba9 00000000 		.4byte	rx2Buffer
 5397 0bad 06       		.uleb128 0x6
 5398 0bae E40A0000 		.4byte	0xae4
 5399 0bb2 23       		.uleb128 0x23
 5400 0bb3 3C050000 		.4byte	.LASF144
 5401 0bb7 01       		.byte	0x1
 5402 0bb8 AD       		.byte	0xad
 5403 0bb9 C30B0000 		.4byte	0xbc3
 5404 0bbd 05       		.uleb128 0x5
 5405 0bbe 03       		.byte	0x3
 5406 0bbf 00000000 		.4byte	tx2BufferTemp
 5407 0bc3 06       		.uleb128 0x6
 5408 0bc4 E40A0000 		.4byte	0xae4
 5409 0bc8 23       		.uleb128 0x23
 5410 0bc9 52060000 		.4byte	.LASF145
 5411 0bcd 01       		.byte	0x1
 5412 0bce B1       		.byte	0xb1
 5413 0bcf 39070000 		.4byte	0x739
 5414 0bd3 05       		.uleb128 0x5
 5415 0bd4 03       		.byte	0x3
 5416 0bd5 00000000 		.4byte	array
 5417 0bd9 23       		.uleb128 0x23
 5418 0bda 48090000 		.4byte	.LASF146
 5419 0bde 01       		.byte	0x1
 5420 0bdf B4       		.byte	0xb4
 5421 0be0 03020000 		.4byte	0x203
 5422 0be4 05       		.uleb128 0x5
 5423 0be5 03       		.byte	0x3
 5424 0be6 00000000 		.4byte	eepromReturnValue
 5425 0bea 23       		.uleb128 0x23
 5426 0beb 09000000 		.4byte	.LASF147
 5427 0bef 01       		.byte	0x1
 5428 0bf0 C0       		.byte	0xc0
 5429 0bf1 D9000000 		.4byte	0xd9
 5430 0bf5 05       		.uleb128 0x5
 5431 0bf6 03       		.byte	0x3
 5432 0bf7 00000000 		.4byte	eeprom_cnt
 5433 0bfb 23       		.uleb128 0x23
 5434 0bfc 19050000 		.4byte	.LASF88
 5435 0c00 01       		.byte	0x1
 5436 0c01 C1       		.byte	0xc1
 5437 0c02 1E010000 		.4byte	0x11e
 5438 0c06 05       		.uleb128 0x5
 5439 0c07 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 120


 5440 0c08 00000000 		.4byte	status
 5441 0c0c 24       		.uleb128 0x24
 5442 0c0d 70747200 		.ascii	"ptr\000"
 5443 0c11 01       		.byte	0x1
 5444 0c12 C2       		.byte	0xc2
 5445 0c13 1D0C0000 		.4byte	0xc1d
 5446 0c17 05       		.uleb128 0x5
 5447 0c18 03       		.byte	0x3
 5448 0c19 00000000 		.4byte	ptr
 5449 0c1d 1C       		.uleb128 0x1c
 5450 0c1e 04       		.byte	0x4
 5451 0c1f 280C0000 		.4byte	0xc28
 5452 0c23 22       		.uleb128 0x22
 5453 0c24 D9000000 		.4byte	0xd9
 5454 0c28 06       		.uleb128 0x6
 5455 0c29 230C0000 		.4byte	0xc23
 5456 0c2d 23       		.uleb128 0x23
 5457 0c2e 22060000 		.4byte	.LASF148
 5458 0c32 01       		.byte	0x1
 5459 0c33 C3       		.byte	0xc3
 5460 0c34 3E0C0000 		.4byte	0xc3e
 5461 0c38 05       		.uleb128 0x5
 5462 0c39 03       		.byte	0x3
 5463 0c3a 00000000 		.4byte	barCount
 5464 0c3e 06       		.uleb128 0x6
 5465 0c3f 94000000 		.4byte	0x94
 5466 0c43 07       		.uleb128 0x7
 5467 0c44 94000000 		.4byte	0x94
 5468 0c48 590C0000 		.4byte	0xc59
 5469 0c4c 08       		.uleb128 0x8
 5470 0c4d 42010000 		.4byte	0x142
 5471 0c51 03       		.byte	0x3
 5472 0c52 08       		.uleb128 0x8
 5473 0c53 42010000 		.4byte	0x142
 5474 0c57 01       		.byte	0x1
 5475 0c58 00       		.byte	0
 5476 0c59 23       		.uleb128 0x23
 5477 0c5a 47030000 		.4byte	.LASF149
 5478 0c5e 01       		.byte	0x1
 5479 0c5f C7       		.byte	0xc7
 5480 0c60 430C0000 		.4byte	0xc43
 5481 0c64 05       		.uleb128 0x5
 5482 0c65 03       		.byte	0x3
 5483 0c66 00000000 		.4byte	stringStates
 5484 0c6a 25       		.uleb128 0x25
 5485 0c6b BB060000 		.4byte	.LASF150
 5486 0c6f 01       		.byte	0x1
 5487 0c70 0101     		.2byte	0x101
 5488 0c72 3E0C0000 		.4byte	0xc3e
 5489 0c76 05       		.uleb128 0x5
 5490 0c77 03       		.byte	0x3
 5491 0c78 00000000 		.4byte	whichLinearSensor
 5492 0c7c 25       		.uleb128 0x25
 5493 0c7d A7070000 		.4byte	.LASF151
 5494 0c81 01       		.byte	0x1
 5495 0c82 0A01     		.2byte	0x10a
 5496 0c84 3E0C0000 		.4byte	0xc3e
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 121


 5497 0c88 05       		.uleb128 0x5
 5498 0c89 03       		.byte	0x3
 5499 0c8a 00000000 		.4byte	testVar
 5500 0c8e 25       		.uleb128 0x25
 5501 0c8f 81030000 		.4byte	.LASF152
 5502 0c93 01       		.byte	0x1
 5503 0c94 0B01     		.2byte	0x10b
 5504 0c96 260A0000 		.4byte	0xa26
 5505 0c9a 05       		.uleb128 0x5
 5506 0c9b 03       		.byte	0x3
 5507 0c9c 00000000 		.4byte	lastNotes
 5508 0ca0 25       		.uleb128 0x25
 5509 0ca1 17070000 		.4byte	.LASF153
 5510 0ca5 01       		.byte	0x1
 5511 0ca6 0C01     		.2byte	0x10c
 5512 0ca8 94000000 		.4byte	0x94
 5513 0cac 05       		.uleb128 0x5
 5514 0cad 03       		.byte	0x3
 5515 0cae 00000000 		.4byte	frettedState
 5516 0cb2 25       		.uleb128 0x25
 5517 0cb3 A6030000 		.4byte	.LASF154
 5518 0cb7 01       		.byte	0x1
 5519 0cb8 0D01     		.2byte	0x10d
 5520 0cba 94000000 		.4byte	0x94
 5521 0cbe 05       		.uleb128 0x5
 5522 0cbf 03       		.byte	0x3
 5523 0cc0 00000000 		.4byte	polyMode
 5524 0cc4 25       		.uleb128 0x25
 5525 0cc5 73090000 		.4byte	.LASF155
 5526 0cc9 01       		.byte	0x1
 5527 0cca 0F01     		.2byte	0x10f
 5528 0ccc 7F0A0000 		.4byte	0xa7f
 5529 0cd0 05       		.uleb128 0x5
 5530 0cd1 03       		.byte	0x3
 5531 0cd2 00000000 		.4byte	pitchBendsPerString
 5532 0cd6 25       		.uleb128 0x25
 5533 0cd7 EC010000 		.4byte	.LASF156
 5534 0cdb 01       		.byte	0x1
 5535 0cdc 1001     		.2byte	0x110
 5536 0cde 260A0000 		.4byte	0xa26
 5537 0ce2 05       		.uleb128 0x5
 5538 0ce3 03       		.byte	0x3
 5539 0ce4 00000000 		.4byte	openStringCount
 5540 0ce8 25       		.uleb128 0x25
 5541 0ce9 D5010000 		.4byte	.LASF157
 5542 0ced 01       		.byte	0x1
 5543 0cee 1101     		.2byte	0x111
 5544 0cf0 94000000 		.4byte	0x94
 5545 0cf4 05       		.uleb128 0x5
 5546 0cf5 03       		.byte	0x3
 5547 0cf6 00000000 		.4byte	loudestString
 5548 0cfa 25       		.uleb128 0x25
 5549 0cfb 33030000 		.4byte	.LASF158
 5550 0cff 01       		.byte	0x1
 5551 0d00 1201     		.2byte	0x112
 5552 0d02 CE000000 		.4byte	0xce
 5553 0d06 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 122


 5554 0d07 03       		.byte	0x3
 5555 0d08 00000000 		.4byte	timeSinceLastAttack
 5556 0d0c 25       		.uleb128 0x25
 5557 0d0d CD060000 		.4byte	.LASF159
 5558 0d11 01       		.byte	0x1
 5559 0d12 1301     		.2byte	0x113
 5560 0d14 7F0A0000 		.4byte	0xa7f
 5561 0d18 05       		.uleb128 0x5
 5562 0d19 03       		.byte	0x3
 5563 0d1a 00000000 		.4byte	previousHysteresisStates
 5564 0d1e 25       		.uleb128 0x25
 5565 0d1f FE060000 		.4byte	.LASF160
 5566 0d23 01       		.byte	0x1
 5567 0d24 1401     		.2byte	0x114
 5568 0d26 7F0A0000 		.4byte	0xa7f
 5569 0d2a 05       		.uleb128 0x5
 5570 0d2b 03       		.byte	0x3
 5571 0d2c 00000000 		.4byte	openStringFreqs
 5572 0d30 25       		.uleb128 0x25
 5573 0d31 EF060000 		.4byte	.LASF161
 5574 0d35 01       		.byte	0x1
 5575 0d36 1501     		.2byte	0x115
 5576 0d38 7F0A0000 		.4byte	0xa7f
 5577 0d3c 05       		.uleb128 0x5
 5578 0d3d 03       		.byte	0x3
 5579 0d3e 00000000 		.4byte	openStringMIDI
 5580 0d42 25       		.uleb128 0x25
 5581 0d43 250A0000 		.4byte	.LASF162
 5582 0d47 01       		.byte	0x1
 5583 0d48 1601     		.2byte	0x116
 5584 0d4a 7F0A0000 		.4byte	0xa7f
 5585 0d4e 05       		.uleb128 0x5
 5586 0d4f 03       		.byte	0x3
 5587 0d50 00000000 		.4byte	invStringMappedPositions
 5588 0d54 25       		.uleb128 0x25
 5589 0d55 07040000 		.4byte	.LASF163
 5590 0d59 01       		.byte	0x1
 5591 0d5a 1701     		.2byte	0x117
 5592 0d5c 7F0A0000 		.4byte	0xa7f
 5593 0d60 05       		.uleb128 0x5
 5594 0d61 03       		.byte	0x3
 5595 0d62 00000000 		.4byte	stringMIDI
 5596 0d66 25       		.uleb128 0x25
 5597 0d67 13060000 		.4byte	.LASF164
 5598 0d6b 01       		.byte	0x1
 5599 0d6c 1801     		.2byte	0x118
 5600 0d6e 7F0A0000 		.4byte	0xa7f
 5601 0d72 05       		.uleb128 0x5
 5602 0d73 03       		.byte	0x3
 5603 0d74 00000000 		.4byte	stringMIDIPrev
 5604 0d78 25       		.uleb128 0x25
 5605 0d79 77040000 		.4byte	.LASF165
 5606 0d7d 01       		.byte	0x1
 5607 0d7e 1901     		.2byte	0x119
 5608 0d80 09010000 		.4byte	0x109
 5609 0d84 05       		.uleb128 0x5
 5610 0d85 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 123


 5611 0d86 00000000 		.4byte	linearHysteresis
 5612 0d8a 25       		.uleb128 0x25
 5613 0d8b 17040000 		.4byte	.LASF166
 5614 0d8f 01       		.byte	0x1
 5615 0d90 1A01     		.2byte	0x11a
 5616 0d92 7F0A0000 		.4byte	0xa7f
 5617 0d96 05       		.uleb128 0x5
 5618 0d97 03       		.byte	0x3
 5619 0d98 00000000 		.4byte	hp_y
 5620 0d9c 25       		.uleb128 0x25
 5621 0d9d 12040000 		.4byte	.LASF167
 5622 0da1 01       		.byte	0x1
 5623 0da2 1B01     		.2byte	0x11b
 5624 0da4 7F0A0000 		.4byte	0xa7f
 5625 0da8 05       		.uleb128 0x5
 5626 0da9 03       		.byte	0x3
 5627 0daa 00000000 		.4byte	hp_x
 5628 0dae 25       		.uleb128 0x25
 5629 0daf B8030000 		.4byte	.LASF168
 5630 0db3 01       		.byte	0x1
 5631 0db4 1C01     		.2byte	0x11c
 5632 0db6 09010000 		.4byte	0x109
 5633 0dba 05       		.uleb128 0x5
 5634 0dbb 03       		.byte	0x3
 5635 0dbc 00000000 		.4byte	hp_R
 5636 0dc0 25       		.uleb128 0x25
 5637 0dc1 D6080000 		.4byte	.LASF169
 5638 0dc5 01       		.byte	0x1
 5639 0dc6 1E01     		.2byte	0x11e
 5640 0dc8 7F0A0000 		.4byte	0xa7f
 5641 0dcc 05       		.uleb128 0x5
 5642 0dcd 03       		.byte	0x3
 5643 0dce 00000000 		.4byte	vibratoCrossfade
 5644 0dd2 25       		.uleb128 0x25
 5645 0dd3 82070000 		.4byte	.LASF170
 5646 0dd7 01       		.byte	0x1
 5647 0dd8 1F01     		.2byte	0x11f
 5648 0dda 260A0000 		.4byte	0xa26
 5649 0dde 05       		.uleb128 0x5
 5650 0ddf 03       		.byte	0x3
 5651 0de0 00000000 		.4byte	crossFadeStartCount
 5652 0de4 25       		.uleb128 0x25
 5653 0de5 550A0000 		.4byte	.LASF171
 5654 0de9 01       		.byte	0x1
 5655 0dea 2101     		.2byte	0x121
 5656 0dec 94000000 		.4byte	0x94
 5657 0df0 05       		.uleb128 0x5
 5658 0df1 03       		.byte	0x3
 5659 0df2 00000000 		.4byte	previousPitchBendsSent
 5660 0df6 25       		.uleb128 0x25
 5661 0df7 5D070000 		.4byte	.LASF172
 5662 0dfb 01       		.byte	0x1
 5663 0dfc 2201     		.2byte	0x122
 5664 0dfe 14020000 		.4byte	0x214
 5665 0e02 05       		.uleb128 0x5
 5666 0e03 03       		.byte	0x3
 5667 0e04 00000000 		.4byte	knobs
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 124


 5668 0e08 25       		.uleb128 0x25
 5669 0e09 43080000 		.4byte	.LASF173
 5670 0e0d 01       		.byte	0x1
 5671 0e0e 2301     		.2byte	0x123
 5672 0e10 94000000 		.4byte	0x94
 5673 0e14 05       		.uleb128 0x5
 5674 0e15 03       		.byte	0x3
 5675 0e16 00000000 		.4byte	buttons
 5676 0e1a 25       		.uleb128 0x25
 5677 0e1b 5A040000 		.4byte	.LASF174
 5678 0e1f 01       		.byte	0x1
 5679 0e20 2501     		.2byte	0x125
 5680 0e22 94000000 		.4byte	0x94
 5681 0e26 05       		.uleb128 0x5
 5682 0e27 03       		.byte	0x3
 5683 0e28 00000000 		.4byte	firPointer
 5684 0e2c 07       		.uleb128 0x7
 5685 0e2d A2000000 		.4byte	0xa2
 5686 0e31 3C0E0000 		.4byte	0xe3c
 5687 0e35 08       		.uleb128 0x8
 5688 0e36 42010000 		.4byte	0x142
 5689 0e3a 04       		.byte	0x4
 5690 0e3b 00       		.byte	0
 5691 0e3c 25       		.uleb128 0x25
 5692 0e3d 07050000 		.4byte	.LASF175
 5693 0e41 01       		.byte	0x1
 5694 0e42 2601     		.2byte	0x126
 5695 0e44 2C0E0000 		.4byte	0xe2c
 5696 0e48 05       		.uleb128 0x5
 5697 0e49 03       		.byte	0x3
 5698 0e4a 00000000 		.4byte	knobs7bit
 5699 0e4e 07       		.uleb128 0x7
 5700 0e4f AD000000 		.4byte	0xad
 5701 0e53 5E0E0000 		.4byte	0xe5e
 5702 0e57 08       		.uleb128 0x8
 5703 0e58 42010000 		.4byte	0x142
 5704 0e5c 04       		.byte	0x4
 5705 0e5d 00       		.byte	0
 5706 0e5e 25       		.uleb128 0x25
 5707 0e5f DD070000 		.4byte	.LASF176
 5708 0e63 01       		.byte	0x1
 5709 0e64 2701     		.2byte	0x127
 5710 0e66 4E0E0000 		.4byte	0xe4e
 5711 0e6a 05       		.uleb128 0x5
 5712 0e6b 03       		.byte	0x3
 5713 0e6c 00000000 		.4byte	knobs7bitPrev
 5714 0e70 25       		.uleb128 0x25
 5715 0e71 C0090000 		.4byte	.LASF177
 5716 0e75 01       		.byte	0x1
 5717 0e76 2801     		.2byte	0x128
 5718 0e78 4E0E0000 		.4byte	0xe4e
 5719 0e7c 05       		.uleb128 0x5
 5720 0e7d 03       		.byte	0x3
 5721 0e7e 00000000 		.4byte	knobs7bitPrevLS
 5722 0e82 25       		.uleb128 0x25
 5723 0e83 AF020000 		.4byte	.LASF178
 5724 0e87 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 125


 5725 0e88 2901     		.2byte	0x129
 5726 0e8a AD000000 		.4byte	0xad
 5727 0e8e 05       		.uleb128 0x5
 5728 0e8f 03       		.byte	0x3
 5729 0e90 00000000 		.4byte	knobs7bitHysteresis
 5730 0e94 25       		.uleb128 0x25
 5731 0e95 3A000000 		.4byte	.LASF179
 5732 0e99 01       		.byte	0x1
 5733 0e9a 2B01     		.2byte	0x12b
 5734 0e9c 2F020000 		.4byte	0x22f
 5735 0ea0 05       		.uleb128 0x5
 5736 0ea1 03       		.byte	0x3
 5737 0ea2 00000000 		.4byte	linFirPointer
 5738 0ea6 25       		.uleb128 0x25
 5739 0ea7 65020000 		.4byte	.LASF180
 5740 0eab 01       		.byte	0x1
 5741 0eac 2C01     		.2byte	0x12c
 5742 0eae 5A090000 		.4byte	0x95a
 5743 0eb2 05       		.uleb128 0x5
 5744 0eb3 03       		.byte	0x3
 5745 0eb4 00000000 		.4byte	linearFIR
 5746 0eb8 07       		.uleb128 0x7
 5747 0eb9 C3000000 		.4byte	0xc3
 5748 0ebd C80E0000 		.4byte	0xec8
 5749 0ec1 08       		.uleb128 0x8
 5750 0ec2 42010000 		.4byte	0x142
 5751 0ec6 03       		.byte	0x3
 5752 0ec7 00       		.byte	0
 5753 0ec8 25       		.uleb128 0x25
 5754 0ec9 C3050000 		.4byte	.LASF181
 5755 0ecd 01       		.byte	0x1
 5756 0ece 2D01     		.2byte	0x12d
 5757 0ed0 B80E0000 		.4byte	0xeb8
 5758 0ed4 05       		.uleb128 0x5
 5759 0ed5 03       		.byte	0x3
 5760 0ed6 00000000 		.4byte	linearSmoothed
 5761 0eda 25       		.uleb128 0x25
 5762 0edb 63080000 		.4byte	.LASF182
 5763 0edf 01       		.byte	0x1
 5764 0ee0 2E01     		.2byte	0x12e
 5765 0ee2 B80E0000 		.4byte	0xeb8
 5766 0ee6 05       		.uleb128 0x5
 5767 0ee7 03       		.byte	0x3
 5768 0ee8 00000000 		.4byte	linearSmoothedPrev
 5769 0eec 25       		.uleb128 0x25
 5770 0eed 57020000 		.4byte	.LASF183
 5771 0ef1 01       		.byte	0x1
 5772 0ef2 2F01     		.2byte	0x12f
 5773 0ef4 B80E0000 		.4byte	0xeb8
 5774 0ef8 05       		.uleb128 0x5
 5775 0ef9 03       		.byte	0x3
 5776 0efa 00000000 		.4byte	LHMuteCounter
 5777 0efe 25       		.uleb128 0x25
 5778 0eff C6070000 		.4byte	.LASF184
 5779 0f03 01       		.byte	0x1
 5780 0f04 3001     		.2byte	0x130
 5781 0f06 2F020000 		.4byte	0x22f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 126


 5782 0f0a 05       		.uleb128 0x5
 5783 0f0b 03       		.byte	0x3
 5784 0f0c 00000000 		.4byte	LHMute
 5785 0f10 25       		.uleb128 0x25
 5786 0f11 90060000 		.4byte	.LASF185
 5787 0f15 01       		.byte	0x1
 5788 0f16 3101     		.2byte	0x131
 5789 0f18 2F020000 		.4byte	0x22f
 5790 0f1c 05       		.uleb128 0x5
 5791 0f1d 03       		.byte	0x3
 5792 0f1e 00000000 		.4byte	pitchFreeze
 5793 0f22 07       		.uleb128 0x7
 5794 0f23 09010000 		.4byte	0x109
 5795 0f27 380F0000 		.4byte	0xf38
 5796 0f2b 08       		.uleb128 0x8
 5797 0f2c 42010000 		.4byte	0x142
 5798 0f30 03       		.byte	0x3
 5799 0f31 08       		.uleb128 0x8
 5800 0f32 42010000 		.4byte	0x142
 5801 0f36 1F       		.byte	0x1f
 5802 0f37 00       		.byte	0
 5803 0f38 25       		.uleb128 0x25
 5804 0f39 B2050000 		.4byte	.LASF186
 5805 0f3d 01       		.byte	0x1
 5806 0f3e 3201     		.2byte	0x132
 5807 0f40 220F0000 		.4byte	0xf22
 5808 0f44 05       		.uleb128 0x5
 5809 0f45 03       		.byte	0x3
 5810 0f46 00000000 		.4byte	pitchBendHistory
 5811 0f4a 07       		.uleb128 0x7
 5812 0f4b AD000000 		.4byte	0xad
 5813 0f4f 5A0F0000 		.4byte	0xf5a
 5814 0f53 08       		.uleb128 0x8
 5815 0f54 42010000 		.4byte	0x142
 5816 0f58 03       		.byte	0x3
 5817 0f59 00       		.byte	0
 5818 0f5a 25       		.uleb128 0x25
 5819 0f5b C3020000 		.4byte	.LASF187
 5820 0f5f 01       		.byte	0x1
 5821 0f60 3301     		.2byte	0x133
 5822 0f62 4A0F0000 		.4byte	0xf4a
 5823 0f66 05       		.uleb128 0x5
 5824 0f67 03       		.byte	0x3
 5825 0f68 00000000 		.4byte	pitchBendHistoryPointer
 5826 0f6c 07       		.uleb128 0x7
 5827 0f6d 94000000 		.4byte	0x94
 5828 0f71 820F0000 		.4byte	0xf82
 5829 0f75 08       		.uleb128 0x8
 5830 0f76 42010000 		.4byte	0x142
 5831 0f7a 1F       		.byte	0x1f
 5832 0f7b 08       		.uleb128 0x8
 5833 0f7c 42010000 		.4byte	0x142
 5834 0f80 04       		.byte	0x4
 5835 0f81 00       		.byte	0
 5836 0f82 25       		.uleb128 0x25
 5837 0f83 01020000 		.4byte	.LASF188
 5838 0f87 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 127


 5839 0f88 3501     		.2byte	0x135
 5840 0f8a 6C0F0000 		.4byte	0xf6c
 5841 0f8e 05       		.uleb128 0x5
 5842 0f8f 03       		.byte	0x3
 5843 0f90 00000000 		.4byte	skippedNotes
 5844 0f94 25       		.uleb128 0x25
 5845 0f95 20050000 		.4byte	.LASF189
 5846 0f99 01       		.byte	0x1
 5847 0f9a 3601     		.2byte	0x136
 5848 0f9c 94000000 		.4byte	0x94
 5849 0fa0 05       		.uleb128 0x5
 5850 0fa1 03       		.byte	0x3
 5851 0fa2 00000000 		.4byte	skipPointer
 5852 0fa6 25       		.uleb128 0x25
 5853 0fa7 A9050000 		.4byte	.LASF190
 5854 0fab 01       		.byte	0x1
 5855 0fac 3801     		.2byte	0x138
 5856 0fae A2000000 		.4byte	0xa2
 5857 0fb2 05       		.uleb128 0x5
 5858 0fb3 03       		.byte	0x3
 5859 0fb4 00000000 		.4byte	bufCount
 5860 0fb8 25       		.uleb128 0x25
 5861 0fb9 BD070000 		.4byte	.LASF191
 5862 0fbd 01       		.byte	0x1
 5863 0fbe 7203     		.2byte	0x372
 5864 0fc0 2F020000 		.4byte	0x22f
 5865 0fc4 05       		.uleb128 0x5
 5866 0fc5 03       		.byte	0x3
 5867 0fc6 00000000 		.4byte	tempMIDI
 5868 0fca 25       		.uleb128 0x25
 5869 0fcb 54030000 		.4byte	.LASF192
 5870 0fcf 01       		.byte	0x1
 5871 0fd0 C703     		.2byte	0x3c7
 5872 0fd2 FD000000 		.4byte	0xfd
 5873 0fd6 05       		.uleb128 0x5
 5874 0fd7 03       		.byte	0x3
 5875 0fd8 00000000 		.4byte	iVtherm
 5876 0fdc 25       		.uleb128 0x25
 5877 0fdd AF030000 		.4byte	.LASF193
 5878 0fe1 01       		.byte	0x1
 5879 0fe2 7804     		.2byte	0x478
 5880 0fe4 94000000 		.4byte	0x94
 5881 0fe8 05       		.uleb128 0x5
 5882 0fe9 03       		.byte	0x3
 5883 0fea 00000000 		.4byte	counter2
 5884 0fee 00       		.byte	0
 5885              		.section	.debug_abbrev,"",%progbits
 5886              	.Ldebug_abbrev0:
 5887 0000 01       		.uleb128 0x1
 5888 0001 11       		.uleb128 0x11
 5889 0002 01       		.byte	0x1
 5890 0003 25       		.uleb128 0x25
 5891 0004 0E       		.uleb128 0xe
 5892 0005 13       		.uleb128 0x13
 5893 0006 0B       		.uleb128 0xb
 5894 0007 03       		.uleb128 0x3
 5895 0008 0E       		.uleb128 0xe
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 128


 5896 0009 1B       		.uleb128 0x1b
 5897 000a 0E       		.uleb128 0xe
 5898 000b 55       		.uleb128 0x55
 5899 000c 17       		.uleb128 0x17
 5900 000d 11       		.uleb128 0x11
 5901 000e 01       		.uleb128 0x1
 5902 000f 10       		.uleb128 0x10
 5903 0010 17       		.uleb128 0x17
 5904 0011 00       		.byte	0
 5905 0012 00       		.byte	0
 5906 0013 02       		.uleb128 0x2
 5907 0014 24       		.uleb128 0x24
 5908 0015 00       		.byte	0
 5909 0016 0B       		.uleb128 0xb
 5910 0017 0B       		.uleb128 0xb
 5911 0018 3E       		.uleb128 0x3e
 5912 0019 0B       		.uleb128 0xb
 5913 001a 03       		.uleb128 0x3
 5914 001b 0E       		.uleb128 0xe
 5915 001c 00       		.byte	0
 5916 001d 00       		.byte	0
 5917 001e 03       		.uleb128 0x3
 5918 001f 16       		.uleb128 0x16
 5919 0020 00       		.byte	0
 5920 0021 03       		.uleb128 0x3
 5921 0022 0E       		.uleb128 0xe
 5922 0023 3A       		.uleb128 0x3a
 5923 0024 0B       		.uleb128 0xb
 5924 0025 3B       		.uleb128 0x3b
 5925 0026 0B       		.uleb128 0xb
 5926 0027 49       		.uleb128 0x49
 5927 0028 13       		.uleb128 0x13
 5928 0029 00       		.byte	0
 5929 002a 00       		.byte	0
 5930 002b 04       		.uleb128 0x4
 5931 002c 24       		.uleb128 0x24
 5932 002d 00       		.byte	0
 5933 002e 0B       		.uleb128 0xb
 5934 002f 0B       		.uleb128 0xb
 5935 0030 3E       		.uleb128 0x3e
 5936 0031 0B       		.uleb128 0xb
 5937 0032 03       		.uleb128 0x3
 5938 0033 08       		.uleb128 0x8
 5939 0034 00       		.byte	0
 5940 0035 00       		.byte	0
 5941 0036 05       		.uleb128 0x5
 5942 0037 16       		.uleb128 0x16
 5943 0038 00       		.byte	0
 5944 0039 03       		.uleb128 0x3
 5945 003a 0E       		.uleb128 0xe
 5946 003b 3A       		.uleb128 0x3a
 5947 003c 0B       		.uleb128 0xb
 5948 003d 3B       		.uleb128 0x3b
 5949 003e 05       		.uleb128 0x5
 5950 003f 49       		.uleb128 0x49
 5951 0040 13       		.uleb128 0x13
 5952 0041 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 129


 5953 0042 00       		.byte	0
 5954 0043 06       		.uleb128 0x6
 5955 0044 35       		.uleb128 0x35
 5956 0045 00       		.byte	0
 5957 0046 49       		.uleb128 0x49
 5958 0047 13       		.uleb128 0x13
 5959 0048 00       		.byte	0
 5960 0049 00       		.byte	0
 5961 004a 07       		.uleb128 0x7
 5962 004b 01       		.uleb128 0x1
 5963 004c 01       		.byte	0x1
 5964 004d 49       		.uleb128 0x49
 5965 004e 13       		.uleb128 0x13
 5966 004f 01       		.uleb128 0x1
 5967 0050 13       		.uleb128 0x13
 5968 0051 00       		.byte	0
 5969 0052 00       		.byte	0
 5970 0053 08       		.uleb128 0x8
 5971 0054 21       		.uleb128 0x21
 5972 0055 00       		.byte	0
 5973 0056 49       		.uleb128 0x49
 5974 0057 13       		.uleb128 0x13
 5975 0058 2F       		.uleb128 0x2f
 5976 0059 0B       		.uleb128 0xb
 5977 005a 00       		.byte	0
 5978 005b 00       		.byte	0
 5979 005c 09       		.uleb128 0x9
 5980 005d 13       		.uleb128 0x13
 5981 005e 01       		.byte	0x1
 5982 005f 0B       		.uleb128 0xb
 5983 0060 0B       		.uleb128 0xb
 5984 0061 3A       		.uleb128 0x3a
 5985 0062 0B       		.uleb128 0xb
 5986 0063 3B       		.uleb128 0x3b
 5987 0064 05       		.uleb128 0x5
 5988 0065 01       		.uleb128 0x1
 5989 0066 13       		.uleb128 0x13
 5990 0067 00       		.byte	0
 5991 0068 00       		.byte	0
 5992 0069 0A       		.uleb128 0xa
 5993 006a 0D       		.uleb128 0xd
 5994 006b 00       		.byte	0
 5995 006c 03       		.uleb128 0x3
 5996 006d 0E       		.uleb128 0xe
 5997 006e 3A       		.uleb128 0x3a
 5998 006f 0B       		.uleb128 0xb
 5999 0070 3B       		.uleb128 0x3b
 6000 0071 05       		.uleb128 0x5
 6001 0072 49       		.uleb128 0x49
 6002 0073 13       		.uleb128 0x13
 6003 0074 38       		.uleb128 0x38
 6004 0075 0B       		.uleb128 0xb
 6005 0076 00       		.byte	0
 6006 0077 00       		.byte	0
 6007 0078 0B       		.uleb128 0xb
 6008 0079 04       		.uleb128 0x4
 6009 007a 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 130


 6010 007b 0B       		.uleb128 0xb
 6011 007c 0B       		.uleb128 0xb
 6012 007d 49       		.uleb128 0x49
 6013 007e 13       		.uleb128 0x13
 6014 007f 3A       		.uleb128 0x3a
 6015 0080 0B       		.uleb128 0xb
 6016 0081 3B       		.uleb128 0x3b
 6017 0082 05       		.uleb128 0x5
 6018 0083 01       		.uleb128 0x1
 6019 0084 13       		.uleb128 0x13
 6020 0085 00       		.byte	0
 6021 0086 00       		.byte	0
 6022 0087 0C       		.uleb128 0xc
 6023 0088 28       		.uleb128 0x28
 6024 0089 00       		.byte	0
 6025 008a 03       		.uleb128 0x3
 6026 008b 0E       		.uleb128 0xe
 6027 008c 1C       		.uleb128 0x1c
 6028 008d 0B       		.uleb128 0xb
 6029 008e 00       		.byte	0
 6030 008f 00       		.byte	0
 6031 0090 0D       		.uleb128 0xd
 6032 0091 2E       		.uleb128 0x2e
 6033 0092 00       		.byte	0
 6034 0093 3F       		.uleb128 0x3f
 6035 0094 19       		.uleb128 0x19
 6036 0095 03       		.uleb128 0x3
 6037 0096 0E       		.uleb128 0xe
 6038 0097 3A       		.uleb128 0x3a
 6039 0098 0B       		.uleb128 0xb
 6040 0099 3B       		.uleb128 0x3b
 6041 009a 0B       		.uleb128 0xb
 6042 009b 27       		.uleb128 0x27
 6043 009c 19       		.uleb128 0x19
 6044 009d 11       		.uleb128 0x11
 6045 009e 01       		.uleb128 0x1
 6046 009f 12       		.uleb128 0x12
 6047 00a0 06       		.uleb128 0x6
 6048 00a1 40       		.uleb128 0x40
 6049 00a2 18       		.uleb128 0x18
 6050 00a3 9742     		.uleb128 0x2117
 6051 00a5 19       		.uleb128 0x19
 6052 00a6 00       		.byte	0
 6053 00a7 00       		.byte	0
 6054 00a8 0E       		.uleb128 0xe
 6055 00a9 2E       		.uleb128 0x2e
 6056 00aa 01       		.byte	0x1
 6057 00ab 3F       		.uleb128 0x3f
 6058 00ac 19       		.uleb128 0x19
 6059 00ad 03       		.uleb128 0x3
 6060 00ae 0E       		.uleb128 0xe
 6061 00af 3A       		.uleb128 0x3a
 6062 00b0 0B       		.uleb128 0xb
 6063 00b1 3B       		.uleb128 0x3b
 6064 00b2 0B       		.uleb128 0xb
 6065 00b3 27       		.uleb128 0x27
 6066 00b4 19       		.uleb128 0x19
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 131


 6067 00b5 49       		.uleb128 0x49
 6068 00b6 13       		.uleb128 0x13
 6069 00b7 11       		.uleb128 0x11
 6070 00b8 01       		.uleb128 0x1
 6071 00b9 12       		.uleb128 0x12
 6072 00ba 06       		.uleb128 0x6
 6073 00bb 40       		.uleb128 0x40
 6074 00bc 18       		.uleb128 0x18
 6075 00bd 9642     		.uleb128 0x2116
 6076 00bf 19       		.uleb128 0x19
 6077 00c0 01       		.uleb128 0x1
 6078 00c1 13       		.uleb128 0x13
 6079 00c2 00       		.byte	0
 6080 00c3 00       		.byte	0
 6081 00c4 0F       		.uleb128 0xf
 6082 00c5 05       		.uleb128 0x5
 6083 00c6 00       		.byte	0
 6084 00c7 03       		.uleb128 0x3
 6085 00c8 08       		.uleb128 0x8
 6086 00c9 3A       		.uleb128 0x3a
 6087 00ca 0B       		.uleb128 0xb
 6088 00cb 3B       		.uleb128 0x3b
 6089 00cc 0B       		.uleb128 0xb
 6090 00cd 49       		.uleb128 0x49
 6091 00ce 13       		.uleb128 0x13
 6092 00cf 02       		.uleb128 0x2
 6093 00d0 18       		.uleb128 0x18
 6094 00d1 00       		.byte	0
 6095 00d2 00       		.byte	0
 6096 00d3 10       		.uleb128 0x10
 6097 00d4 34       		.uleb128 0x34
 6098 00d5 00       		.byte	0
 6099 00d6 03       		.uleb128 0x3
 6100 00d7 0E       		.uleb128 0xe
 6101 00d8 3A       		.uleb128 0x3a
 6102 00d9 0B       		.uleb128 0xb
 6103 00da 3B       		.uleb128 0x3b
 6104 00db 0B       		.uleb128 0xb
 6105 00dc 49       		.uleb128 0x49
 6106 00dd 13       		.uleb128 0x13
 6107 00de 02       		.uleb128 0x2
 6108 00df 18       		.uleb128 0x18
 6109 00e0 00       		.byte	0
 6110 00e1 00       		.byte	0
 6111 00e2 11       		.uleb128 0x11
 6112 00e3 05       		.uleb128 0x5
 6113 00e4 00       		.byte	0
 6114 00e5 03       		.uleb128 0x3
 6115 00e6 0E       		.uleb128 0xe
 6116 00e7 3A       		.uleb128 0x3a
 6117 00e8 0B       		.uleb128 0xb
 6118 00e9 3B       		.uleb128 0x3b
 6119 00ea 0B       		.uleb128 0xb
 6120 00eb 49       		.uleb128 0x49
 6121 00ec 13       		.uleb128 0x13
 6122 00ed 02       		.uleb128 0x2
 6123 00ee 18       		.uleb128 0x18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 132


 6124 00ef 00       		.byte	0
 6125 00f0 00       		.byte	0
 6126 00f1 12       		.uleb128 0x12
 6127 00f2 34       		.uleb128 0x34
 6128 00f3 00       		.byte	0
 6129 00f4 03       		.uleb128 0x3
 6130 00f5 08       		.uleb128 0x8
 6131 00f6 3A       		.uleb128 0x3a
 6132 00f7 0B       		.uleb128 0xb
 6133 00f8 3B       		.uleb128 0x3b
 6134 00f9 0B       		.uleb128 0xb
 6135 00fa 49       		.uleb128 0x49
 6136 00fb 13       		.uleb128 0x13
 6137 00fc 02       		.uleb128 0x2
 6138 00fd 18       		.uleb128 0x18
 6139 00fe 00       		.byte	0
 6140 00ff 00       		.byte	0
 6141 0100 13       		.uleb128 0x13
 6142 0101 2E       		.uleb128 0x2e
 6143 0102 01       		.byte	0x1
 6144 0103 3F       		.uleb128 0x3f
 6145 0104 19       		.uleb128 0x19
 6146 0105 03       		.uleb128 0x3
 6147 0106 08       		.uleb128 0x8
 6148 0107 3A       		.uleb128 0x3a
 6149 0108 0B       		.uleb128 0xb
 6150 0109 3B       		.uleb128 0x3b
 6151 010a 05       		.uleb128 0x5
 6152 010b 27       		.uleb128 0x27
 6153 010c 19       		.uleb128 0x19
 6154 010d 49       		.uleb128 0x49
 6155 010e 13       		.uleb128 0x13
 6156 010f 11       		.uleb128 0x11
 6157 0110 01       		.uleb128 0x1
 6158 0111 12       		.uleb128 0x12
 6159 0112 06       		.uleb128 0x6
 6160 0113 40       		.uleb128 0x40
 6161 0114 18       		.uleb128 0x18
 6162 0115 9642     		.uleb128 0x2116
 6163 0117 19       		.uleb128 0x19
 6164 0118 01       		.uleb128 0x1
 6165 0119 13       		.uleb128 0x13
 6166 011a 00       		.byte	0
 6167 011b 00       		.byte	0
 6168 011c 14       		.uleb128 0x14
 6169 011d 05       		.uleb128 0x5
 6170 011e 00       		.byte	0
 6171 011f 03       		.uleb128 0x3
 6172 0120 0E       		.uleb128 0xe
 6173 0121 3A       		.uleb128 0x3a
 6174 0122 0B       		.uleb128 0xb
 6175 0123 3B       		.uleb128 0x3b
 6176 0124 05       		.uleb128 0x5
 6177 0125 49       		.uleb128 0x49
 6178 0126 13       		.uleb128 0x13
 6179 0127 02       		.uleb128 0x2
 6180 0128 18       		.uleb128 0x18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 133


 6181 0129 00       		.byte	0
 6182 012a 00       		.byte	0
 6183 012b 15       		.uleb128 0x15
 6184 012c 2E       		.uleb128 0x2e
 6185 012d 00       		.byte	0
 6186 012e 3F       		.uleb128 0x3f
 6187 012f 19       		.uleb128 0x19
 6188 0130 03       		.uleb128 0x3
 6189 0131 0E       		.uleb128 0xe
 6190 0132 3A       		.uleb128 0x3a
 6191 0133 0B       		.uleb128 0xb
 6192 0134 3B       		.uleb128 0x3b
 6193 0135 05       		.uleb128 0x5
 6194 0136 27       		.uleb128 0x27
 6195 0137 19       		.uleb128 0x19
 6196 0138 11       		.uleb128 0x11
 6197 0139 01       		.uleb128 0x1
 6198 013a 12       		.uleb128 0x12
 6199 013b 06       		.uleb128 0x6
 6200 013c 40       		.uleb128 0x40
 6201 013d 18       		.uleb128 0x18
 6202 013e 9642     		.uleb128 0x2116
 6203 0140 19       		.uleb128 0x19
 6204 0141 00       		.byte	0
 6205 0142 00       		.byte	0
 6206 0143 16       		.uleb128 0x16
 6207 0144 2E       		.uleb128 0x2e
 6208 0145 01       		.byte	0x1
 6209 0146 3F       		.uleb128 0x3f
 6210 0147 19       		.uleb128 0x19
 6211 0148 03       		.uleb128 0x3
 6212 0149 0E       		.uleb128 0xe
 6213 014a 3A       		.uleb128 0x3a
 6214 014b 0B       		.uleb128 0xb
 6215 014c 3B       		.uleb128 0x3b
 6216 014d 05       		.uleb128 0x5
 6217 014e 27       		.uleb128 0x27
 6218 014f 19       		.uleb128 0x19
 6219 0150 49       		.uleb128 0x49
 6220 0151 13       		.uleb128 0x13
 6221 0152 11       		.uleb128 0x11
 6222 0153 01       		.uleb128 0x1
 6223 0154 12       		.uleb128 0x12
 6224 0155 06       		.uleb128 0x6
 6225 0156 40       		.uleb128 0x40
 6226 0157 18       		.uleb128 0x18
 6227 0158 9642     		.uleb128 0x2116
 6228 015a 19       		.uleb128 0x19
 6229 015b 01       		.uleb128 0x1
 6230 015c 13       		.uleb128 0x13
 6231 015d 00       		.byte	0
 6232 015e 00       		.byte	0
 6233 015f 17       		.uleb128 0x17
 6234 0160 0B       		.uleb128 0xb
 6235 0161 01       		.byte	0x1
 6236 0162 11       		.uleb128 0x11
 6237 0163 01       		.uleb128 0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 134


 6238 0164 12       		.uleb128 0x12
 6239 0165 06       		.uleb128 0x6
 6240 0166 01       		.uleb128 0x1
 6241 0167 13       		.uleb128 0x13
 6242 0168 00       		.byte	0
 6243 0169 00       		.byte	0
 6244 016a 18       		.uleb128 0x18
 6245 016b 34       		.uleb128 0x34
 6246 016c 00       		.byte	0
 6247 016d 03       		.uleb128 0x3
 6248 016e 0E       		.uleb128 0xe
 6249 016f 3A       		.uleb128 0x3a
 6250 0170 0B       		.uleb128 0xb
 6251 0171 3B       		.uleb128 0x3b
 6252 0172 05       		.uleb128 0x5
 6253 0173 49       		.uleb128 0x49
 6254 0174 13       		.uleb128 0x13
 6255 0175 02       		.uleb128 0x2
 6256 0176 18       		.uleb128 0x18
 6257 0177 00       		.byte	0
 6258 0178 00       		.byte	0
 6259 0179 19       		.uleb128 0x19
 6260 017a 0B       		.uleb128 0xb
 6261 017b 01       		.byte	0x1
 6262 017c 11       		.uleb128 0x11
 6263 017d 01       		.uleb128 0x1
 6264 017e 12       		.uleb128 0x12
 6265 017f 06       		.uleb128 0x6
 6266 0180 00       		.byte	0
 6267 0181 00       		.byte	0
 6268 0182 1A       		.uleb128 0x1a
 6269 0183 34       		.uleb128 0x34
 6270 0184 00       		.byte	0
 6271 0185 03       		.uleb128 0x3
 6272 0186 08       		.uleb128 0x8
 6273 0187 3A       		.uleb128 0x3a
 6274 0188 0B       		.uleb128 0xb
 6275 0189 3B       		.uleb128 0x3b
 6276 018a 05       		.uleb128 0x5
 6277 018b 49       		.uleb128 0x49
 6278 018c 13       		.uleb128 0x13
 6279 018d 02       		.uleb128 0x2
 6280 018e 18       		.uleb128 0x18
 6281 018f 00       		.byte	0
 6282 0190 00       		.byte	0
 6283 0191 1B       		.uleb128 0x1b
 6284 0192 2E       		.uleb128 0x2e
 6285 0193 01       		.byte	0x1
 6286 0194 3F       		.uleb128 0x3f
 6287 0195 19       		.uleb128 0x19
 6288 0196 03       		.uleb128 0x3
 6289 0197 0E       		.uleb128 0xe
 6290 0198 3A       		.uleb128 0x3a
 6291 0199 0B       		.uleb128 0xb
 6292 019a 3B       		.uleb128 0x3b
 6293 019b 05       		.uleb128 0x5
 6294 019c 27       		.uleb128 0x27
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 135


 6295 019d 19       		.uleb128 0x19
 6296 019e 11       		.uleb128 0x11
 6297 019f 01       		.uleb128 0x1
 6298 01a0 12       		.uleb128 0x12
 6299 01a1 06       		.uleb128 0x6
 6300 01a2 40       		.uleb128 0x40
 6301 01a3 18       		.uleb128 0x18
 6302 01a4 9642     		.uleb128 0x2116
 6303 01a6 19       		.uleb128 0x19
 6304 01a7 01       		.uleb128 0x1
 6305 01a8 13       		.uleb128 0x13
 6306 01a9 00       		.byte	0
 6307 01aa 00       		.byte	0
 6308 01ab 1C       		.uleb128 0x1c
 6309 01ac 0F       		.uleb128 0xf
 6310 01ad 00       		.byte	0
 6311 01ae 0B       		.uleb128 0xb
 6312 01af 0B       		.uleb128 0xb
 6313 01b0 49       		.uleb128 0x49
 6314 01b1 13       		.uleb128 0x13
 6315 01b2 00       		.byte	0
 6316 01b3 00       		.byte	0
 6317 01b4 1D       		.uleb128 0x1d
 6318 01b5 05       		.uleb128 0x5
 6319 01b6 00       		.byte	0
 6320 01b7 03       		.uleb128 0x3
 6321 01b8 08       		.uleb128 0x8
 6322 01b9 3A       		.uleb128 0x3a
 6323 01ba 0B       		.uleb128 0xb
 6324 01bb 3B       		.uleb128 0x3b
 6325 01bc 05       		.uleb128 0x5
 6326 01bd 49       		.uleb128 0x49
 6327 01be 13       		.uleb128 0x13
 6328 01bf 02       		.uleb128 0x2
 6329 01c0 18       		.uleb128 0x18
 6330 01c1 00       		.byte	0
 6331 01c2 00       		.byte	0
 6332 01c3 1E       		.uleb128 0x1e
 6333 01c4 0B       		.uleb128 0xb
 6334 01c5 01       		.byte	0x1
 6335 01c6 55       		.uleb128 0x55
 6336 01c7 17       		.uleb128 0x17
 6337 01c8 00       		.byte	0
 6338 01c9 00       		.byte	0
 6339 01ca 1F       		.uleb128 0x1f
 6340 01cb 34       		.uleb128 0x34
 6341 01cc 00       		.byte	0
 6342 01cd 03       		.uleb128 0x3
 6343 01ce 0E       		.uleb128 0xe
 6344 01cf 3A       		.uleb128 0x3a
 6345 01d0 0B       		.uleb128 0xb
 6346 01d1 3B       		.uleb128 0x3b
 6347 01d2 05       		.uleb128 0x5
 6348 01d3 49       		.uleb128 0x49
 6349 01d4 13       		.uleb128 0x13
 6350 01d5 3F       		.uleb128 0x3f
 6351 01d6 19       		.uleb128 0x19
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 136


 6352 01d7 3C       		.uleb128 0x3c
 6353 01d8 19       		.uleb128 0x19
 6354 01d9 00       		.byte	0
 6355 01da 00       		.byte	0
 6356 01db 20       		.uleb128 0x20
 6357 01dc 34       		.uleb128 0x34
 6358 01dd 00       		.byte	0
 6359 01de 03       		.uleb128 0x3
 6360 01df 0E       		.uleb128 0xe
 6361 01e0 3A       		.uleb128 0x3a
 6362 01e1 0B       		.uleb128 0xb
 6363 01e2 3B       		.uleb128 0x3b
 6364 01e3 0B       		.uleb128 0xb
 6365 01e4 49       		.uleb128 0x49
 6366 01e5 13       		.uleb128 0x13
 6367 01e6 3F       		.uleb128 0x3f
 6368 01e7 19       		.uleb128 0x19
 6369 01e8 3C       		.uleb128 0x3c
 6370 01e9 19       		.uleb128 0x19
 6371 01ea 00       		.byte	0
 6372 01eb 00       		.byte	0
 6373 01ec 21       		.uleb128 0x21
 6374 01ed 21       		.uleb128 0x21
 6375 01ee 00       		.byte	0
 6376 01ef 49       		.uleb128 0x49
 6377 01f0 13       		.uleb128 0x13
 6378 01f1 2F       		.uleb128 0x2f
 6379 01f2 05       		.uleb128 0x5
 6380 01f3 00       		.byte	0
 6381 01f4 00       		.byte	0
 6382 01f5 22       		.uleb128 0x22
 6383 01f6 26       		.uleb128 0x26
 6384 01f7 00       		.byte	0
 6385 01f8 49       		.uleb128 0x49
 6386 01f9 13       		.uleb128 0x13
 6387 01fa 00       		.byte	0
 6388 01fb 00       		.byte	0
 6389 01fc 23       		.uleb128 0x23
 6390 01fd 34       		.uleb128 0x34
 6391 01fe 00       		.byte	0
 6392 01ff 03       		.uleb128 0x3
 6393 0200 0E       		.uleb128 0xe
 6394 0201 3A       		.uleb128 0x3a
 6395 0202 0B       		.uleb128 0xb
 6396 0203 3B       		.uleb128 0x3b
 6397 0204 0B       		.uleb128 0xb
 6398 0205 49       		.uleb128 0x49
 6399 0206 13       		.uleb128 0x13
 6400 0207 3F       		.uleb128 0x3f
 6401 0208 19       		.uleb128 0x19
 6402 0209 02       		.uleb128 0x2
 6403 020a 18       		.uleb128 0x18
 6404 020b 00       		.byte	0
 6405 020c 00       		.byte	0
 6406 020d 24       		.uleb128 0x24
 6407 020e 34       		.uleb128 0x34
 6408 020f 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 137


 6409 0210 03       		.uleb128 0x3
 6410 0211 08       		.uleb128 0x8
 6411 0212 3A       		.uleb128 0x3a
 6412 0213 0B       		.uleb128 0xb
 6413 0214 3B       		.uleb128 0x3b
 6414 0215 0B       		.uleb128 0xb
 6415 0216 49       		.uleb128 0x49
 6416 0217 13       		.uleb128 0x13
 6417 0218 3F       		.uleb128 0x3f
 6418 0219 19       		.uleb128 0x19
 6419 021a 02       		.uleb128 0x2
 6420 021b 18       		.uleb128 0x18
 6421 021c 00       		.byte	0
 6422 021d 00       		.byte	0
 6423 021e 25       		.uleb128 0x25
 6424 021f 34       		.uleb128 0x34
 6425 0220 00       		.byte	0
 6426 0221 03       		.uleb128 0x3
 6427 0222 0E       		.uleb128 0xe
 6428 0223 3A       		.uleb128 0x3a
 6429 0224 0B       		.uleb128 0xb
 6430 0225 3B       		.uleb128 0x3b
 6431 0226 05       		.uleb128 0x5
 6432 0227 49       		.uleb128 0x49
 6433 0228 13       		.uleb128 0x13
 6434 0229 3F       		.uleb128 0x3f
 6435 022a 19       		.uleb128 0x19
 6436 022b 02       		.uleb128 0x2
 6437 022c 18       		.uleb128 0x18
 6438 022d 00       		.byte	0
 6439 022e 00       		.byte	0
 6440 022f 00       		.byte	0
 6441              		.section	.debug_aranges,"",%progbits
 6442 0000 BC000000 		.4byte	0xbc
 6443 0004 0200     		.2byte	0x2
 6444 0006 00000000 		.4byte	.Ldebug_info0
 6445 000a 04       		.byte	0x4
 6446 000b 00       		.byte	0
 6447 000c 0000     		.2byte	0
 6448 000e 0000     		.2byte	0
 6449 0010 00000000 		.4byte	.LFB64
 6450 0014 0C000000 		.4byte	.LFE64-.LFB64
 6451 0018 00000000 		.4byte	.LFB65
 6452 001c 58000000 		.4byte	.LFE65-.LFB65
 6453 0020 00000000 		.4byte	.LFB66
 6454 0024 68000000 		.4byte	.LFE66-.LFB66
 6455 0028 00000000 		.4byte	.LFB67
 6456 002c 4C000000 		.4byte	.LFE67-.LFB67
 6457 0030 00000000 		.4byte	.LFB68
 6458 0034 46000000 		.4byte	.LFE68-.LFB68
 6459 0038 00000000 		.4byte	.LFB69
 6460 003c 56000000 		.4byte	.LFE69-.LFB69
 6461 0040 00000000 		.4byte	.LFB70
 6462 0044 40000000 		.4byte	.LFE70-.LFB70
 6463 0048 00000000 		.4byte	.LFB71
 6464 004c 14000000 		.4byte	.LFE71-.LFB71
 6465 0050 00000000 		.4byte	.LFB72
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 138


 6466 0054 7C000000 		.4byte	.LFE72-.LFB72
 6467 0058 00000000 		.4byte	.LFB73
 6468 005c 9C0B0000 		.4byte	.LFE73-.LFB73
 6469 0060 00000000 		.4byte	.LFB74
 6470 0064 54000000 		.4byte	.LFE74-.LFB74
 6471 0068 00000000 		.4byte	.LFB75
 6472 006c C4000000 		.4byte	.LFE75-.LFB75
 6473 0070 00000000 		.4byte	.LFB76
 6474 0074 4C000000 		.4byte	.LFE76-.LFB76
 6475 0078 00000000 		.4byte	.LFB77
 6476 007c C4000000 		.4byte	.LFE77-.LFB77
 6477 0080 00000000 		.4byte	.LFB78
 6478 0084 B4000000 		.4byte	.LFE78-.LFB78
 6479 0088 00000000 		.4byte	.LFB79
 6480 008c B0000000 		.4byte	.LFE79-.LFB79
 6481 0090 00000000 		.4byte	.LFB80
 6482 0094 24010000 		.4byte	.LFE80-.LFB80
 6483 0098 00000000 		.4byte	.LFB81
 6484 009c D8000000 		.4byte	.LFE81-.LFB81
 6485 00a0 00000000 		.4byte	.LFB82
 6486 00a4 D8000000 		.4byte	.LFE82-.LFB82
 6487 00a8 00000000 		.4byte	.LFB83
 6488 00ac 90000000 		.4byte	.LFE83-.LFB83
 6489 00b0 00000000 		.4byte	.LFB84
 6490 00b4 68020000 		.4byte	.LFE84-.LFB84
 6491 00b8 00000000 		.4byte	0
 6492 00bc 00000000 		.4byte	0
 6493              		.section	.debug_ranges,"",%progbits
 6494              	.Ldebug_ranges0:
 6495 0000 76000000 		.4byte	.LBB9
 6496 0004 6C010000 		.4byte	.LBE9
 6497 0008 6E010000 		.4byte	.LBB12
 6498 000c EA010000 		.4byte	.LBE12
 6499 0010 EC010000 		.4byte	.LBB13
 6500 0014 2C020000 		.4byte	.LBE13
 6501 0018 00000000 		.4byte	0
 6502 001c 00000000 		.4byte	0
 6503 0020 00000000 		.4byte	.LFB64
 6504 0024 0C000000 		.4byte	.LFE64
 6505 0028 00000000 		.4byte	.LFB65
 6506 002c 58000000 		.4byte	.LFE65
 6507 0030 00000000 		.4byte	.LFB66
 6508 0034 68000000 		.4byte	.LFE66
 6509 0038 00000000 		.4byte	.LFB67
 6510 003c 4C000000 		.4byte	.LFE67
 6511 0040 00000000 		.4byte	.LFB68
 6512 0044 46000000 		.4byte	.LFE68
 6513 0048 00000000 		.4byte	.LFB69
 6514 004c 56000000 		.4byte	.LFE69
 6515 0050 00000000 		.4byte	.LFB70
 6516 0054 40000000 		.4byte	.LFE70
 6517 0058 00000000 		.4byte	.LFB71
 6518 005c 14000000 		.4byte	.LFE71
 6519 0060 00000000 		.4byte	.LFB72
 6520 0064 7C000000 		.4byte	.LFE72
 6521 0068 00000000 		.4byte	.LFB73
 6522 006c 9C0B0000 		.4byte	.LFE73
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 139


 6523 0070 00000000 		.4byte	.LFB74
 6524 0074 54000000 		.4byte	.LFE74
 6525 0078 00000000 		.4byte	.LFB75
 6526 007c C4000000 		.4byte	.LFE75
 6527 0080 00000000 		.4byte	.LFB76
 6528 0084 4C000000 		.4byte	.LFE76
 6529 0088 00000000 		.4byte	.LFB77
 6530 008c C4000000 		.4byte	.LFE77
 6531 0090 00000000 		.4byte	.LFB78
 6532 0094 B4000000 		.4byte	.LFE78
 6533 0098 00000000 		.4byte	.LFB79
 6534 009c B0000000 		.4byte	.LFE79
 6535 00a0 00000000 		.4byte	.LFB80
 6536 00a4 24010000 		.4byte	.LFE80
 6537 00a8 00000000 		.4byte	.LFB81
 6538 00ac D8000000 		.4byte	.LFE81
 6539 00b0 00000000 		.4byte	.LFB82
 6540 00b4 D8000000 		.4byte	.LFE82
 6541 00b8 00000000 		.4byte	.LFB83
 6542 00bc 90000000 		.4byte	.LFE83
 6543 00c0 00000000 		.4byte	.LFB84
 6544 00c4 68020000 		.4byte	.LFE84
 6545 00c8 00000000 		.4byte	0
 6546 00cc 00000000 		.4byte	0
 6547              		.section	.debug_line,"",%progbits
 6548              	.Ldebug_line0:
 6549 0000 0E060000 		.section	.debug_str,"MS",%progbits,1
 6549      02009901 
 6549      00000201 
 6549      FB0E0D00 
 6549      01010101 
 6550              	.LASF112:
 6551 0000 7363616E 		.ascii	"scanPart\000"
 6551      50617274 
 6551      00
 6552              	.LASF147:
 6553 0009 65657072 		.ascii	"eeprom_cnt\000"
 6553      6F6D5F63 
 6553      6E7400
 6554              	.LASF115:
 6555 0014 49324362 		.ascii	"I2Cbuff1\000"
 6555      75666631 
 6555      00
 6556              	.LASF40:
 6557 001d 43595F45 		.ascii	"CY_EM_EEPROM_BAD_PARAM\000"
 6557      4D5F4545 
 6557      50524F4D 
 6557      5F424144 
 6557      5F504152 
 6558              	.LASF58:
 6559 0034 6F73746F 		.ascii	"ostop\000"
 6559      7000
 6560              	.LASF179:
 6561 003a 6C696E46 		.ascii	"linFirPointer\000"
 6561      6972506F 
 6561      696E7465 
 6561      7200
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 140


 6562              	.LASF38:
 6563 0048 63795F73 		.ascii	"cy_stc_eeprom_context_t\000"
 6563      74635F65 
 6563      6570726F 
 6563      6D5F636F 
 6563      6E746578 
 6564              	.LASF195:
 6565 0060 6D61696E 		.ascii	"main.c\000"
 6565      2E6300
 6566              	.LASF82:
 6567 0067 446D6154 		.ascii	"DmaTxConfiguration\000"
 6567      78436F6E 
 6567      66696775 
 6567      72617469 
 6567      6F6E00
 6568              	.LASF139:
 6569 007a 74783254 		.ascii	"tx2TD\000"
 6569      4400
 6570              	.LASF83:
 6571 0080 446D6152 		.ascii	"DmaRxConfiguration\000"
 6571      78436F6E 
 6571      66696775 
 6571      72617469 
 6571      6F6E00
 6572              	.LASF13:
 6573 0093 756E7369 		.ascii	"unsigned int\000"
 6573      676E6564 
 6573      20696E74 
 6573      00
 6574              	.LASF196:
 6575 00a0 433A5C55 		.ascii	"C:\\Users\\JeffSnyder\\dev\\Electrobass_embedded\\P"
 6575      73657273 
 6575      5C4A6566 
 6575      66536E79 
 6575      6465725C 
 6576 00ce 534F4335 		.ascii	"SOC5_electrobass_stringsensors\\CE210514_PSOC3_5_Th"
 6576      5F656C65 
 6576      6374726F 
 6576      62617373 
 6576      5F737472 
 6577 0100 65726D69 		.ascii	"ermistor.cydsn\000"
 6577      73746F72 
 6577      2E637964 
 6577      736E00
 6578              	.LASF6:
 6579 010f 5F5F696E 		.ascii	"__int32_t\000"
 6579      7433325F 
 6579      7400
 6580              	.LASF27:
 6581 0119 72656738 		.ascii	"reg8\000"
 6581      00
 6582              	.LASF56:
 6583 011e 6973746F 		.ascii	"istop\000"
 6583      7000
 6584              	.LASF42:
 6585 0124 43595F45 		.ascii	"CY_EM_EEPROM_BAD_DATA\000"
 6585      4D5F4545 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 141


 6585      50524F4D 
 6585      5F424144 
 6585      5F444154 
 6586              	.LASF194:
 6587 013a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 6587      43313120 
 6587      352E342E 
 6587      31203230 
 6587      31363036 
 6588 016d 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 6588      20726576 
 6588      6973696F 
 6588      6E203233 
 6588      37373135 
 6589 01a0 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 6589      66756E63 
 6589      74696F6E 
 6589      2D736563 
 6589      74696F6E 
 6590              	.LASF111:
 6591 01c8 6D696469 		.ascii	"midiOverflow\000"
 6591      4F766572 
 6591      666C6F77 
 6591      00
 6592              	.LASF157:
 6593 01d5 6C6F7564 		.ascii	"loudestString\000"
 6593      65737453 
 6593      7472696E 
 6593      6700
 6594              	.LASF107:
 6595 01e3 70726576 		.ascii	"prevVBUS\000"
 6595      56425553 
 6595      00
 6596              	.LASF156:
 6597 01ec 6F70656E 		.ascii	"openStringCount\000"
 6597      53747269 
 6597      6E67436F 
 6597      756E7400 
 6598              	.LASF87:
 6599 01fc 6D6F6465 		.ascii	"mode\000"
 6599      00
 6600              	.LASF188:
 6601 0201 736B6970 		.ascii	"skippedNotes\000"
 6601      7065644E 
 6601      6F746573 
 6601      00
 6602              	.LASF46:
 6603 020e 74656D70 		.ascii	"tempmin\000"
 6603      6D696E00 
 6604              	.LASF60:
 6605 0216 536C6565 		.ascii	"SleepIsr_function\000"
 6605      70497372 
 6605      5F66756E 
 6605      6374696F 
 6605      6E00
 6606              	.LASF103:
 6607 0228 456D5F45 		.ascii	"Em_EEPROM_em_EepromStorage\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 142


 6607      4550524F 
 6607      4D5F656D 
 6607      5F456570 
 6607      726F6D53 
 6608              	.LASF130:
 6609 0243 68797374 		.ascii	"hysteresisLowThresh\000"
 6609      65726573 
 6609      69734C6F 
 6609      77546872 
 6609      65736800 
 6610              	.LASF183:
 6611 0257 4C484D75 		.ascii	"LHMuteCounter\000"
 6611      7465436F 
 6611      756E7465 
 6611      7200
 6612              	.LASF180:
 6613 0265 6C696E65 		.ascii	"linearFIR\000"
 6613      61724649 
 6613      5200
 6614              	.LASF118:
 6615 026f 74687265 		.ascii	"thresholdArray\000"
 6615      73686F6C 
 6615      64417272 
 6615      617900
 6616              	.LASF17:
 6617 027e 75696E74 		.ascii	"uint32_t\000"
 6617      33325F74 
 6617      00
 6618              	.LASF31:
 6619 0287 6E756D62 		.ascii	"numberOfRows\000"
 6619      65724F66 
 6619      526F7773 
 6619      00
 6620              	.LASF98:
 6621 0294 5553425F 		.ascii	"USB_midi_in_ep\000"
 6621      6D696469 
 6621      5F696E5F 
 6621      657000
 6622              	.LASF23:
 6623 02a3 666C6F61 		.ascii	"float\000"
 6623      7400
 6624              	.LASF22:
 6625 02a9 696E7433 		.ascii	"int32\000"
 6625      3200
 6626              	.LASF178:
 6627 02af 6B6E6F62 		.ascii	"knobs7bitHysteresis\000"
 6627      73376269 
 6627      74487973 
 6627      74657265 
 6627      73697300 
 6628              	.LASF187:
 6629 02c3 70697463 		.ascii	"pitchBendHistoryPointer\000"
 6629      6842656E 
 6629      64486973 
 6629      746F7279 
 6629      506F696E 
 6630              	.LASF33:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 143


 6631 02db 65657072 		.ascii	"eepromSize\000"
 6631      6F6D5369 
 6631      7A6500
 6632              	.LASF44:
 6633 02e6 63795F65 		.ascii	"cy_en_em_eeprom_status_t\000"
 6633      6E5F656D 
 6633      5F656570 
 6633      726F6D5F 
 6633      73746174 
 6634              	.LASF12:
 6635 02ff 6C6F6E67 		.ascii	"long long unsigned int\000"
 6635      206C6F6E 
 6635      6720756E 
 6635      7369676E 
 6635      65642069 
 6636              	.LASF101:
 6637 0316 5553425F 		.ascii	"USB_midiOutBuffer\000"
 6637      6D696469 
 6637      4F757442 
 6637      75666665 
 6637      7200
 6638              	.LASF141:
 6639 0328 72783243 		.ascii	"rx2Channel\000"
 6639      68616E6E 
 6639      656C00
 6640              	.LASF158:
 6641 0333 74696D65 		.ascii	"timeSinceLastAttack\000"
 6641      53696E63 
 6641      654C6173 
 6641      74417474 
 6641      61636B00 
 6642              	.LASF149:
 6643 0347 73747269 		.ascii	"stringStates\000"
 6643      6E675374 
 6643      61746573 
 6643      00
 6644              	.LASF192:
 6645 0354 69567468 		.ascii	"iVtherm\000"
 6645      65726D00 
 6646              	.LASF41:
 6647 035c 43595F45 		.ascii	"CY_EM_EEPROM_BAD_CHECKSUM\000"
 6647      4D5F4545 
 6647      50524F4D 
 6647      5F424144 
 6647      5F434845 
 6648              	.LASF4:
 6649 0376 5F5F7569 		.ascii	"__uint16_t\000"
 6649      6E743136 
 6649      5F7400
 6650              	.LASF152:
 6651 0381 6C617374 		.ascii	"lastNotes\000"
 6651      4E6F7465 
 6651      7300
 6652              	.LASF131:
 6653 038b 68797374 		.ascii	"hysteresisHighThresh\000"
 6653      65726573 
 6653      69734869 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 144


 6653      67685468 
 6653      72657368 
 6654              	.LASF54:
 6655 03a0 76616C75 		.ascii	"value\000"
 6655      6500
 6656              	.LASF154:
 6657 03a6 706F6C79 		.ascii	"polyMode\000"
 6657      4D6F6465 
 6657      00
 6658              	.LASF193:
 6659 03af 636F756E 		.ascii	"counter2\000"
 6659      74657232 
 6659      00
 6660              	.LASF168:
 6661 03b8 68705F52 		.ascii	"hp_R\000"
 6661      00
 6662              	.LASF135:
 6663 03bd 72784368 		.ascii	"rxChannel\000"
 6663      616E6E65 
 6663      6C00
 6664              	.LASF36:
 6665 03c7 626C6F63 		.ascii	"blockingWrite\000"
 6665      6B696E67 
 6665      57726974 
 6665      6500
 6666              	.LASF122:
 6667 03d5 636F756E 		.ascii	"counter\000"
 6667      74657200 
 6668              	.LASF18:
 6669 03dd 696E7436 		.ascii	"int64_t\000"
 6669      345F7400 
 6670              	.LASF81:
 6671 03e5 6F666673 		.ascii	"offset\000"
 6671      657400
 6672              	.LASF69:
 6673 03ec 5553425F 		.ascii	"USB_callbackLocalMidiEvent\000"
 6673      63616C6C 
 6673      6261636B 
 6673      4C6F6361 
 6673      6C4D6964 
 6674              	.LASF163:
 6675 0407 73747269 		.ascii	"stringMIDI\000"
 6675      6E674D49 
 6675      444900
 6676              	.LASF167:
 6677 0412 68705F78 		.ascii	"hp_x\000"
 6677      00
 6678              	.LASF166:
 6679 0417 68705F79 		.ascii	"hp_y\000"
 6679      00
 6680              	.LASF120:
 6681 041c 66726574 		.ascii	"fretRatios\000"
 6681      52617469 
 6681      6F7300
 6682              	.LASF37:
 6683 0427 75736572 		.ascii	"userFlashStartAddr\000"
 6683      466C6173 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 145


 6683      68537461 
 6683      72744164 
 6683      647200
 6684              	.LASF48:
 6685 043a 4C454146 		.ascii	"LEAF_clip\000"
 6685      5F636C69 
 6685      7000
 6686              	.LASF116:
 6687 0444 73747269 		.ascii	"stringCapSensorsOnOff\000"
 6687      6E674361 
 6687      7053656E 
 6687      736F7273 
 6687      4F6E4F66 
 6688              	.LASF174:
 6689 045a 66697250 		.ascii	"firPointer\000"
 6689      6F696E74 
 6689      657200
 6690              	.LASF143:
 6691 0465 72783242 		.ascii	"rx2Buffer\000"
 6691      75666665 
 6691      7200
 6692              	.LASF53:
 6693 046f 6F6D416C 		.ascii	"omAlpha\000"
 6693      70686100 
 6694              	.LASF165:
 6695 0477 6C696E65 		.ascii	"linearHysteresis\000"
 6695      61724879 
 6695      73746572 
 6695      65736973 
 6695      00
 6696              	.LASF129:
 6697 0488 68797374 		.ascii	"hysteresisStates\000"
 6697      65726573 
 6697      69735374 
 6697      61746573 
 6697      00
 6698              	.LASF75:
 6699 0499 73656E64 		.ascii	"sendMIDIControlChange\000"
 6699      4D494449 
 6699      436F6E74 
 6699      726F6C43 
 6699      68616E67 
 6700              	.LASF136:
 6701 04af 72785444 		.ascii	"rxTD\000"
 6701      00
 6702              	.LASF80:
 6703 04b4 69526573 		.ascii	"iRes\000"
 6703      00
 6704              	.LASF25:
 6705 04b9 63686172 		.ascii	"char\000"
 6705      00
 6706              	.LASF39:
 6707 04be 43595F45 		.ascii	"CY_EM_EEPROM_SUCCESS\000"
 6707      4D5F4545 
 6707      50524F4D 
 6707      5F535543 
 6707      43455353 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 146


 6708              	.LASF121:
 6709 04d3 6C696E65 		.ascii	"linearPotValue32Bit\000"
 6709      6172506F 
 6709      7456616C 
 6709      75653332 
 6709      42697400 
 6710              	.LASF92:
 6711 04e7 73747269 		.ascii	"string\000"
 6711      6E6700
 6712              	.LASF20:
 6713 04ee 75696E74 		.ascii	"uint16\000"
 6713      313600
 6714              	.LASF102:
 6715 04f5 456D5F45 		.ascii	"Em_EEPROM_context\000"
 6715      4550524F 
 6715      4D5F636F 
 6715      6E746578 
 6715      7400
 6716              	.LASF175:
 6717 0507 6B6E6F62 		.ascii	"knobs7bit\000"
 6717      73376269 
 6717      7400
 6718              	.LASF14:
 6719 0511 75696E74 		.ascii	"uint8_t\000"
 6719      385F7400 
 6720              	.LASF88:
 6721 0519 73746174 		.ascii	"status\000"
 6721      757300
 6722              	.LASF189:
 6723 0520 736B6970 		.ascii	"skipPointer\000"
 6723      506F696E 
 6723      74657200 
 6724              	.LASF67:
 6725 052c 6361626C 		.ascii	"cable\000"
 6725      6500
 6726              	.LASF30:
 6727 0532 776C456E 		.ascii	"wlEndAddr\000"
 6727      64416464 
 6727      7200
 6728              	.LASF144:
 6729 053c 74783242 		.ascii	"tx2BufferTemp\000"
 6729      75666665 
 6729      7254656D 
 6729      7000
 6730              	.LASF117:
 6731 054a 73747269 		.ascii	"stringCapSensorsRaw\000"
 6731      6E674361 
 6731      7053656E 
 6731      736F7273 
 6731      52617700 
 6732              	.LASF119:
 6733 055e 66726574 		.ascii	"fretMeasurements\000"
 6733      4D656173 
 6733      7572656D 
 6733      656E7473 
 6733      00
 6734              	.LASF11:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 147


 6735 056f 6C6F6E67 		.ascii	"long long int\000"
 6735      206C6F6E 
 6735      6720696E 
 6735      7400
 6736              	.LASF51:
 6737 057d 4C454146 		.ascii	"LEAF_interpolation_linear\000"
 6737      5F696E74 
 6737      6572706F 
 6737      6C617469 
 6737      6F6E5F6C 
 6738              	.LASF97:
 6739 0597 5553425F 		.ascii	"USB_midiInPointer\000"
 6739      6D696469 
 6739      496E506F 
 6739      696E7465 
 6739      7200
 6740              	.LASF190:
 6741 05a9 62756643 		.ascii	"bufCount\000"
 6741      6F756E74 
 6741      00
 6742              	.LASF186:
 6743 05b2 70697463 		.ascii	"pitchBendHistory\000"
 6743      6842656E 
 6743      64486973 
 6743      746F7279 
 6743      00
 6744              	.LASF181:
 6745 05c3 6C696E65 		.ascii	"linearSmoothed\000"
 6745      6172536D 
 6745      6F6F7468 
 6745      656400
 6746              	.LASF132:
 6747 05d2 74784368 		.ascii	"txChannel\000"
 6747      616E6E65 
 6747      6C00
 6748              	.LASF77:
 6749 05dc 43437661 		.ascii	"CCval\000"
 6749      6C00
 6750              	.LASF86:
 6751 05e2 6E627974 		.ascii	"nbytes\000"
 6751      657300
 6752              	.LASF74:
 6753 05e9 73656E64 		.ascii	"sendMIDIPitchBend\000"
 6753      4D494449 
 6753      50697463 
 6753      6842656E 
 6753      6400
 6754              	.LASF133:
 6755 05fb 74785444 		.ascii	"txTD\000"
 6755      00
 6756              	.LASF21:
 6757 0600 75696E74 		.ascii	"uint32\000"
 6757      333200
 6758              	.LASF95:
 6759 0607 65657072 		.ascii	"eepromArray\000"
 6759      6F6D4172 
 6759      72617900 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 148


 6760              	.LASF164:
 6761 0613 73747269 		.ascii	"stringMIDIPrev\000"
 6761      6E674D49 
 6761      44495072 
 6761      657600
 6762              	.LASF148:
 6763 0622 62617243 		.ascii	"barCount\000"
 6763      6F756E74 
 6763      00
 6764              	.LASF57:
 6765 062b 6F737461 		.ascii	"ostart\000"
 6765      727400
 6766              	.LASF126:
 6767 0632 73747269 		.ascii	"stringPlucks\000"
 6767      6E67506C 
 6767      75636B73 
 6767      00
 6768              	.LASF106:
 6769 063f 63757272 		.ascii	"currentVBUS\000"
 6769      656E7456 
 6769      42555300 
 6770              	.LASF123:
 6771 064b 74656D70 		.ascii	"temper\000"
 6771      657200
 6772              	.LASF145:
 6773 0652 61727261 		.ascii	"array\000"
 6773      7900
 6774              	.LASF10:
 6775 0658 5F5F696E 		.ascii	"__int64_t\000"
 6775      7436345F 
 6775      7400
 6776              	.LASF28:
 6777 0662 6C6F6E67 		.ascii	"long double\000"
 6777      20646F75 
 6777      626C6500 
 6778              	.LASF124:
 6779 066e 70726576 		.ascii	"previousButtons\000"
 6779      696F7573 
 6779      42757474 
 6779      6F6E7300 
 6780              	.LASF15:
 6781 067e 75696E74 		.ascii	"uint16_t\000"
 6781      31365F74 
 6781      00
 6782              	.LASF137:
 6783 0687 72784275 		.ascii	"rxBuffer\000"
 6783      66666572 
 6783      00
 6784              	.LASF185:
 6785 0690 70697463 		.ascii	"pitchFreeze\000"
 6785      68467265 
 6785      657A6500 
 6786              	.LASF109:
 6787 069c 5553425F 		.ascii	"USB_check_flag\000"
 6787      63686563 
 6787      6B5F666C 
 6787      616700
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 149


 6788              	.LASF47:
 6789 06ab 74656D70 		.ascii	"tempmax\000"
 6789      6D617800 
 6790              	.LASF73:
 6791 06b3 6368616E 		.ascii	"channel\000"
 6791      6E656C00 
 6792              	.LASF150:
 6793 06bb 77686963 		.ascii	"whichLinearSensor\000"
 6793      684C696E 
 6793      65617253 
 6793      656E736F 
 6793      7200
 6794              	.LASF159:
 6795 06cd 70726576 		.ascii	"previousHysteresisStates\000"
 6795      696F7573 
 6795      48797374 
 6795      65726573 
 6795      69735374 
 6796              	.LASF134:
 6797 06e6 74784275 		.ascii	"txBuffer\000"
 6797      66666572 
 6797      00
 6798              	.LASF161:
 6799 06ef 6F70656E 		.ascii	"openStringMIDI\000"
 6799      53747269 
 6799      6E674D49 
 6799      444900
 6800              	.LASF160:
 6801 06fe 6F70656E 		.ascii	"openStringFreqs\000"
 6801      53747269 
 6801      6E674672 
 6801      65717300 
 6802              	.LASF128:
 6803 070e 6B6E6F62 		.ascii	"knobsFIR\000"
 6803      73464952 
 6803      00
 6804              	.LASF153:
 6805 0717 66726574 		.ascii	"frettedState\000"
 6805      74656453 
 6805      74617465 
 6805      00
 6806              	.LASF2:
 6807 0724 73686F72 		.ascii	"short int\000"
 6807      7420696E 
 6807      7400
 6808              	.LASF76:
 6809 072e 43436E75 		.ascii	"CCnum\000"
 6809      6D00
 6810              	.LASF7:
 6811 0734 6C6F6E67 		.ascii	"long int\000"
 6811      20696E74 
 6811      00
 6812              	.LASF105:
 6813 073d 75736241 		.ascii	"usbActivityCounter\000"
 6813      63746976 
 6813      69747943 
 6813      6F756E74 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 150


 6813      657200
 6814              	.LASF104:
 6815 0750 49544D5F 		.ascii	"ITM_RxBuffer\000"
 6815      52784275 
 6815      66666572 
 6815      00
 6816              	.LASF172:
 6817 075d 6B6E6F62 		.ascii	"knobs\000"
 6817      7300
 6818              	.LASF138:
 6819 0763 74783243 		.ascii	"tx2Channel\000"
 6819      68616E6E 
 6819      656C00
 6820              	.LASF68:
 6821 076e 6D696469 		.ascii	"midiMsg\000"
 6821      4D736700 
 6822              	.LASF90:
 6823 0776 68616E64 		.ascii	"handleNotes\000"
 6823      6C654E6F 
 6823      74657300 
 6824              	.LASF170:
 6825 0782 63726F73 		.ascii	"crossFadeStartCount\000"
 6825      73466164 
 6825      65537461 
 6825      7274436F 
 6825      756E7400 
 6826              	.LASF127:
 6827 0796 73747269 		.ascii	"stringPlucksPrev\000"
 6827      6E67506C 
 6827      75636B73 
 6827      50726576 
 6827      00
 6828              	.LASF151:
 6829 07a7 74657374 		.ascii	"testVar\000"
 6829      56617200 
 6830              	.LASF65:
 6831 07af 63686563 		.ascii	"checkUSB_Vbus\000"
 6831      6B555342 
 6831      5F566275 
 6831      7300
 6832              	.LASF191:
 6833 07bd 74656D70 		.ascii	"tempMIDI\000"
 6833      4D494449 
 6833      00
 6834              	.LASF184:
 6835 07c6 4C484D75 		.ascii	"LHMute\000"
 6835      746500
 6836              	.LASF3:
 6837 07cd 5F5F7569 		.ascii	"__uint8_t\000"
 6837      6E74385F 
 6837      7400
 6838              	.LASF142:
 6839 07d7 72783254 		.ascii	"rx2TD\000"
 6839      4400
 6840              	.LASF176:
 6841 07dd 6B6E6F62 		.ascii	"knobs7bitPrev\000"
 6841      73376269 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 151


 6841      74507265 
 6841      7600
 6842              	.LASF91:
 6843 07eb 6E6F7465 		.ascii	"note\000"
 6843      00
 6844              	.LASF93:
 6845 07f0 74656D70 		.ascii	"tempVel\000"
 6845      56656C00 
 6846              	.LASF94:
 6847 07f8 6C6F7564 		.ascii	"loudestSoundingNote\000"
 6847      65737453 
 6847      6F756E64 
 6847      696E674E 
 6847      6F746500 
 6848              	.LASF72:
 6849 080c 76656C6F 		.ascii	"velocity\000"
 6849      63697479 
 6849      00
 6850              	.LASF29:
 6851 0815 73697A65 		.ascii	"sizetype\000"
 6851      74797065 
 6851      00
 6852              	.LASF62:
 6853 081e 72657374 		.ascii	"restartSystemCheck\000"
 6853      61727453 
 6853      79737465 
 6853      6D436865 
 6853      636B00
 6854              	.LASF9:
 6855 0831 6C6F6E67 		.ascii	"long unsigned int\000"
 6855      20756E73 
 6855      69676E65 
 6855      6420696E 
 6855      7400
 6856              	.LASF173:
 6857 0843 62757474 		.ascii	"buttons\000"
 6857      6F6E7300 
 6858              	.LASF43:
 6859 084b 43595F45 		.ascii	"CY_EM_EEPROM_WRITE_FAIL\000"
 6859      4D5F4545 
 6859      50524F4D 
 6859      5F575249 
 6859      54455F46 
 6860              	.LASF182:
 6861 0863 6C696E65 		.ascii	"linearSmoothedPrev\000"
 6861      6172536D 
 6861      6F6F7468 
 6861      65645072 
 6861      657600
 6862              	.LASF52:
 6863 0876 616C7068 		.ascii	"alpha\000"
 6863      6100
 6864              	.LASF16:
 6865 087c 696E7433 		.ascii	"int32_t\000"
 6865      325F7400 
 6866              	.LASF84:
 6867 0884 4932435F 		.ascii	"I2C_MasterWriteBlocking\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 152


 6867      4D617374 
 6867      65725772 
 6867      69746542 
 6867      6C6F636B 
 6868              	.LASF34:
 6869 089c 77656172 		.ascii	"wearLevelingFactor\000"
 6869      4C657665 
 6869      6C696E67 
 6869      46616374 
 6869      6F7200
 6870              	.LASF59:
 6871 08af 62757474 		.ascii	"button_press_ISR\000"
 6871      6F6E5F70 
 6871      72657373 
 6871      5F495352 
 6871      00
 6872              	.LASF50:
 6873 08c0 66746F6D 		.ascii	"ftom\000"
 6873      00
 6874              	.LASF85:
 6875 08c5 69324341 		.ascii	"i2CAddr\000"
 6875      64647200 
 6876              	.LASF26:
 6877 08cd 63797374 		.ascii	"cystatus\000"
 6877      61747573 
 6877      00
 6878              	.LASF169:
 6879 08d6 76696272 		.ascii	"vibratoCrossfade\000"
 6879      61746F43 
 6879      726F7373 
 6879      66616465 
 6879      00
 6880              	.LASF1:
 6881 08e7 756E7369 		.ascii	"unsigned char\000"
 6881      676E6564 
 6881      20636861 
 6881      7200
 6882              	.LASF8:
 6883 08f5 5F5F7569 		.ascii	"__uint32_t\000"
 6883      6E743332 
 6883      5F7400
 6884              	.LASF114:
 6885 0900 6F757443 		.ascii	"outChanged\000"
 6885      68616E67 
 6885      656400
 6886              	.LASF108:
 6887 090b 5553425F 		.ascii	"USB_active\000"
 6887      61637469 
 6887      766500
 6888              	.LASF35:
 6889 0916 72656475 		.ascii	"redundantCopy\000"
 6889      6E64616E 
 6889      74436F70 
 6889      7900
 6890              	.LASF89:
 6891 0924 74696D65 		.ascii	"timeout\000"
 6891      6F757400 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 153


 6892              	.LASF49:
 6893 092c 6D746F66 		.ascii	"mtof\000"
 6893      00
 6894              	.LASF61:
 6895 0931 56627573 		.ascii	"Vbus_function\000"
 6895      5F66756E 
 6895      6374696F 
 6895      6E00
 6896              	.LASF110:
 6897 093f 6D696469 		.ascii	"midiSent\000"
 6897      53656E74 
 6897      00
 6898              	.LASF146:
 6899 0948 65657072 		.ascii	"eepromReturnValue\000"
 6899      6F6D5265 
 6899      7475726E 
 6899      56616C75 
 6899      6500
 6900              	.LASF64:
 6901 095a 70697463 		.ascii	"pitchBendVal\000"
 6901      6842656E 
 6901      6456616C 
 6901      00
 6902              	.LASF66:
 6903 0967 5553425F 		.ascii	"USB_service\000"
 6903      73657276 
 6903      69636500 
 6904              	.LASF155:
 6905 0973 70697463 		.ascii	"pitchBendsPerString\000"
 6905      6842656E 
 6905      64735065 
 6905      72537472 
 6905      696E6700 
 6906              	.LASF0:
 6907 0987 7369676E 		.ascii	"signed char\000"
 6907      65642063 
 6907      68617200 
 6908              	.LASF5:
 6909 0993 73686F72 		.ascii	"short unsigned int\000"
 6909      7420756E 
 6909      7369676E 
 6909      65642069 
 6909      6E7400
 6910              	.LASF79:
 6911 09a6 69567265 		.ascii	"iVref\000"
 6911      6600
 6912              	.LASF63:
 6913 09ac 6D61696E 		.ascii	"main\000"
 6913      00
 6914              	.LASF70:
 6915 09b1 73656E64 		.ascii	"sendMIDINoteOn\000"
 6915      4D494449 
 6915      4E6F7465 
 6915      4F6E00
 6916              	.LASF177:
 6917 09c0 6B6E6F62 		.ascii	"knobs7bitPrevLS\000"
 6917      73376269 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 154


 6917      74507265 
 6917      764C5300 
 6918              	.LASF45:
 6919 09d0 75696E74 		.ascii	"uint\000"
 6919      00
 6920              	.LASF19:
 6921 09d5 75696E74 		.ascii	"uint8\000"
 6921      3800
 6922              	.LASF24:
 6923 09db 646F7562 		.ascii	"double\000"
 6923      6C6500
 6924              	.LASF140:
 6925 09e2 74783242 		.ascii	"tx2Buffer\000"
 6925      75666665 
 6925      7200
 6926              	.LASF32:
 6927 09ec 6C617374 		.ascii	"lastWrRowAddr\000"
 6927      5772526F 
 6927      77416464 
 6927      7200
 6928              	.LASF78:
 6929 09fa 7363616E 		.ascii	"scanLinearResistor\000"
 6929      4C696E65 
 6929      61725265 
 6929      73697374 
 6929      6F7200
 6930              	.LASF125:
 6931 0a0d 6F637461 		.ascii	"octave\000"
 6931      766500
 6932              	.LASF99:
 6933 0a14 5553425F 		.ascii	"USB_midiInBuffer\000"
 6933      6D696469 
 6933      496E4275 
 6933      66666572 
 6933      00
 6934              	.LASF162:
 6935 0a25 696E7653 		.ascii	"invStringMappedPositions\000"
 6935      7472696E 
 6935      674D6170 
 6935      70656450 
 6935      6F736974 
 6936              	.LASF100:
 6937 0a3e 5553425F 		.ascii	"USB_midi_out_ep\000"
 6937      6D696469 
 6937      5F6F7574 
 6937      5F657000 
 6938              	.LASF55:
 6939 0a4e 69737461 		.ascii	"istart\000"
 6939      727400
 6940              	.LASF171:
 6941 0a55 70726576 		.ascii	"previousPitchBendsSent\000"
 6941      696F7573 
 6941      50697463 
 6941      6842656E 
 6941      64735365 
 6942              	.LASF113:
 6943 0a6c 63757272 		.ascii	"currentOutPointer\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccb9bvo9.s 			page 155


 6943      656E744F 
 6943      7574506F 
 6943      696E7465 
 6943      7200
 6944              	.LASF71:
 6945 0a7e 4D494449 		.ascii	"MIDInoteNum\000"
 6945      6E6F7465 
 6945      4E756D00 
 6946              	.LASF96:
 6947 0a8a 43617053 		.ascii	"CapSense_sensorOnMask\000"
 6947      656E7365 
 6947      5F73656E 
 6947      736F724F 
 6947      6E4D6173 
 6948              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
